/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 616.0, "minX": 0.0, "maxY": 7316.0, "series": [{"data": [[0.0, 616.0], [0.1, 653.0], [0.2, 788.0], [0.3, 863.0], [0.4, 873.0], [0.5, 887.0], [0.6, 917.0], [0.7, 931.0], [0.8, 963.0], [0.9, 971.0], [1.0, 993.0], [1.1, 1017.0], [1.2, 1046.0], [1.3, 1056.0], [1.4, 1069.0], [1.5, 1076.0], [1.6, 1096.0], [1.7, 1118.0], [1.8, 1128.0], [1.9, 1132.0], [2.0, 1145.0], [2.1, 1170.0], [2.2, 1219.0], [2.3, 1246.0], [2.4, 1265.0], [2.5, 1271.0], [2.6, 1287.0], [2.7, 1321.0], [2.8, 1335.0], [2.9, 1345.0], [3.0, 1352.0], [3.1, 1362.0], [3.2, 1365.0], [3.3, 1380.0], [3.4, 1381.0], [3.5, 1389.0], [3.6, 1390.0], [3.7, 1400.0], [3.8, 1406.0], [3.9, 1430.0], [4.0, 1437.0], [4.1, 1445.0], [4.2, 1453.0], [4.3, 1477.0], [4.4, 1481.0], [4.5, 1490.0], [4.6, 1504.0], [4.7, 1523.0], [4.8, 1534.0], [4.9, 1553.0], [5.0, 1556.0], [5.1, 1597.0], [5.2, 1599.0], [5.3, 1615.0], [5.4, 1616.0], [5.5, 1629.0], [5.6, 1631.0], [5.7, 1635.0], [5.8, 1637.0], [5.9, 1641.0], [6.0, 1648.0], [6.1, 1664.0], [6.2, 1673.0], [6.3, 1684.0], [6.4, 1696.0], [6.5, 1706.0], [6.6, 1709.0], [6.7, 1723.0], [6.8, 1724.0], [6.9, 1729.0], [7.0, 1736.0], [7.1, 1740.0], [7.2, 1747.0], [7.3, 1769.0], [7.4, 1771.0], [7.5, 1781.0], [7.6, 1784.0], [7.7, 1799.0], [7.8, 1812.0], [7.9, 1820.0], [8.0, 1824.0], [8.1, 1832.0], [8.2, 1851.0], [8.3, 1881.0], [8.4, 1886.0], [8.5, 1894.0], [8.6, 1896.0], [8.7, 1901.0], [8.8, 1920.0], [8.9, 1927.0], [9.0, 1954.0], [9.1, 1956.0], [9.2, 1961.0], [9.3, 1963.0], [9.4, 1972.0], [9.5, 1977.0], [9.6, 1989.0], [9.7, 1989.0], [9.8, 2001.0], [9.9, 2004.0], [10.0, 2021.0], [10.1, 2027.0], [10.2, 2043.0], [10.3, 2059.0], [10.4, 2070.0], [10.5, 2074.0], [10.6, 2083.0], [10.7, 2091.0], [10.8, 2107.0], [10.9, 2116.0], [11.0, 2122.0], [11.1, 2127.0], [11.2, 2135.0], [11.3, 2138.0], [11.4, 2141.0], [11.5, 2149.0], [11.6, 2161.0], [11.7, 2169.0], [11.8, 2174.0], [11.9, 2181.0], [12.0, 2199.0], [12.1, 2201.0], [12.2, 2205.0], [12.3, 2207.0], [12.4, 2216.0], [12.5, 2224.0], [12.6, 2235.0], [12.7, 2243.0], [12.8, 2250.0], [12.9, 2254.0], [13.0, 2263.0], [13.1, 2271.0], [13.2, 2273.0], [13.3, 2275.0], [13.4, 2278.0], [13.5, 2285.0], [13.6, 2292.0], [13.7, 2295.0], [13.8, 2300.0], [13.9, 2308.0], [14.0, 2318.0], [14.1, 2329.0], [14.2, 2344.0], [14.3, 2346.0], [14.4, 2366.0], [14.5, 2367.0], [14.6, 2375.0], [14.7, 2376.0], [14.8, 2381.0], [14.9, 2387.0], [15.0, 2404.0], [15.1, 2409.0], [15.2, 2414.0], [15.3, 2426.0], [15.4, 2441.0], [15.5, 2458.0], [15.6, 2466.0], [15.7, 2471.0], [15.8, 2485.0], [15.9, 2489.0], [16.0, 2496.0], [16.1, 2501.0], [16.2, 2510.0], [16.3, 2518.0], [16.4, 2527.0], [16.5, 2532.0], [16.6, 2542.0], [16.7, 2572.0], [16.8, 2577.0], [16.9, 2583.0], [17.0, 2600.0], [17.1, 2602.0], [17.2, 2615.0], [17.3, 2622.0], [17.4, 2626.0], [17.5, 2633.0], [17.6, 2644.0], [17.7, 2648.0], [17.8, 2663.0], [17.9, 2669.0], [18.0, 2679.0], [18.1, 2687.0], [18.2, 2708.0], [18.3, 2714.0], [18.4, 2720.0], [18.5, 2729.0], [18.6, 2731.0], [18.7, 2736.0], [18.8, 2740.0], [18.9, 2743.0], [19.0, 2754.0], [19.1, 2761.0], [19.2, 2770.0], [19.3, 2776.0], [19.4, 2786.0], [19.5, 2790.0], [19.6, 2795.0], [19.7, 2802.0], [19.8, 2814.0], [19.9, 2819.0], [20.0, 2821.0], [20.1, 2833.0], [20.2, 2848.0], [20.3, 2850.0], [20.4, 2864.0], [20.5, 2872.0], [20.6, 2876.0], [20.7, 2877.0], [20.8, 2880.0], [20.9, 2891.0], [21.0, 2896.0], [21.1, 2902.0], [21.2, 2913.0], [21.3, 2915.0], [21.4, 2922.0], [21.5, 2925.0], [21.6, 2934.0], [21.7, 2938.0], [21.8, 2945.0], [21.9, 2947.0], [22.0, 2959.0], [22.1, 2960.0], [22.2, 2984.0], [22.3, 2991.0], [22.4, 2992.0], [22.5, 2995.0], [22.6, 2998.0], [22.7, 3006.0], [22.8, 3013.0], [22.9, 3017.0], [23.0, 3028.0], [23.1, 3034.0], [23.2, 3042.0], [23.3, 3052.0], [23.4, 3054.0], [23.5, 3056.0], [23.6, 3067.0], [23.7, 3071.0], [23.8, 3075.0], [23.9, 3083.0], [24.0, 3088.0], [24.1, 3094.0], [24.2, 3099.0], [24.3, 3106.0], [24.4, 3111.0], [24.5, 3114.0], [24.6, 3126.0], [24.7, 3135.0], [24.8, 3138.0], [24.9, 3147.0], [25.0, 3150.0], [25.1, 3155.0], [25.2, 3160.0], [25.3, 3161.0], [25.4, 3167.0], [25.5, 3168.0], [25.6, 3177.0], [25.7, 3184.0], [25.8, 3196.0], [25.9, 3206.0], [26.0, 3207.0], [26.1, 3211.0], [26.2, 3222.0], [26.3, 3225.0], [26.4, 3232.0], [26.5, 3238.0], [26.6, 3246.0], [26.7, 3249.0], [26.8, 3255.0], [26.9, 3258.0], [27.0, 3266.0], [27.1, 3267.0], [27.2, 3280.0], [27.3, 3281.0], [27.4, 3292.0], [27.5, 3297.0], [27.6, 3300.0], [27.7, 3302.0], [27.8, 3306.0], [27.9, 3313.0], [28.0, 3317.0], [28.1, 3320.0], [28.2, 3330.0], [28.3, 3338.0], [28.4, 3343.0], [28.5, 3345.0], [28.6, 3370.0], [28.7, 3380.0], [28.8, 3389.0], [28.9, 3392.0], [29.0, 3394.0], [29.1, 3395.0], [29.2, 3405.0], [29.3, 3407.0], [29.4, 3409.0], [29.5, 3411.0], [29.6, 3421.0], [29.7, 3422.0], [29.8, 3423.0], [29.9, 3432.0], [30.0, 3445.0], [30.1, 3460.0], [30.2, 3468.0], [30.3, 3473.0], [30.4, 3478.0], [30.5, 3482.0], [30.6, 3492.0], [30.7, 3497.0], [30.8, 3507.0], [30.9, 3512.0], [31.0, 3518.0], [31.1, 3521.0], [31.2, 3524.0], [31.3, 3527.0], [31.4, 3540.0], [31.5, 3542.0], [31.6, 3547.0], [31.7, 3548.0], [31.8, 3549.0], [31.9, 3551.0], [32.0, 3553.0], [32.1, 3554.0], [32.2, 3563.0], [32.3, 3578.0], [32.4, 3582.0], [32.5, 3585.0], [32.6, 3593.0], [32.7, 3600.0], [32.8, 3614.0], [32.9, 3621.0], [33.0, 3625.0], [33.1, 3628.0], [33.2, 3632.0], [33.3, 3640.0], [33.4, 3648.0], [33.5, 3650.0], [33.6, 3653.0], [33.7, 3655.0], [33.8, 3657.0], [33.9, 3666.0], [34.0, 3669.0], [34.1, 3676.0], [34.2, 3688.0], [34.3, 3693.0], [34.4, 3718.0], [34.5, 3721.0], [34.6, 3729.0], [34.7, 3736.0], [34.8, 3738.0], [34.9, 3740.0], [35.0, 3752.0], [35.1, 3756.0], [35.2, 3765.0], [35.3, 3776.0], [35.4, 3788.0], [35.5, 3799.0], [35.6, 3810.0], [35.7, 3820.0], [35.8, 3827.0], [35.9, 3833.0], [36.0, 3845.0], [36.1, 3852.0], [36.2, 3853.0], [36.3, 3855.0], [36.4, 3857.0], [36.5, 3858.0], [36.6, 3867.0], [36.7, 3873.0], [36.8, 3878.0], [36.9, 3882.0], [37.0, 3893.0], [37.1, 3897.0], [37.2, 3900.0], [37.3, 3902.0], [37.4, 3907.0], [37.5, 3909.0], [37.6, 3917.0], [37.7, 3919.0], [37.8, 3926.0], [37.9, 3929.0], [38.0, 3932.0], [38.1, 3944.0], [38.2, 3955.0], [38.3, 3957.0], [38.4, 3960.0], [38.5, 3963.0], [38.6, 3971.0], [38.7, 3981.0], [38.8, 3993.0], [38.9, 3997.0], [39.0, 4001.0], [39.1, 4013.0], [39.2, 4017.0], [39.3, 4036.0], [39.4, 4051.0], [39.5, 4054.0], [39.6, 4057.0], [39.7, 4058.0], [39.8, 4061.0], [39.9, 4065.0], [40.0, 4070.0], [40.1, 4084.0], [40.2, 4095.0], [40.3, 4096.0], [40.4, 4105.0], [40.5, 4107.0], [40.6, 4110.0], [40.7, 4112.0], [40.8, 4116.0], [40.9, 4117.0], [41.0, 4118.0], [41.1, 4127.0], [41.2, 4133.0], [41.3, 4138.0], [41.4, 4145.0], [41.5, 4149.0], [41.6, 4154.0], [41.7, 4162.0], [41.8, 4177.0], [41.9, 4201.0], [42.0, 4206.0], [42.1, 4215.0], [42.2, 4218.0], [42.3, 4225.0], [42.4, 4232.0], [42.5, 4235.0], [42.6, 4241.0], [42.7, 4248.0], [42.8, 4253.0], [42.9, 4272.0], [43.0, 4276.0], [43.1, 4278.0], [43.2, 4290.0], [43.3, 4292.0], [43.4, 4298.0], [43.5, 4303.0], [43.6, 4311.0], [43.7, 4315.0], [43.8, 4321.0], [43.9, 4326.0], [44.0, 4337.0], [44.1, 4338.0], [44.2, 4351.0], [44.3, 4353.0], [44.4, 4359.0], [44.5, 4372.0], [44.6, 4390.0], [44.7, 4393.0], [44.8, 4405.0], [44.9, 4410.0], [45.0, 4420.0], [45.1, 4424.0], [45.2, 4439.0], [45.3, 4443.0], [45.4, 4450.0], [45.5, 4454.0], [45.6, 4465.0], [45.7, 4494.0], [45.8, 4509.0], [45.9, 4514.0], [46.0, 4538.0], [46.1, 4552.0], [46.2, 4570.0], [46.3, 4586.0], [46.4, 4592.0], [46.5, 4593.0], [46.6, 4608.0], [46.7, 4619.0], [46.8, 4628.0], [46.9, 4632.0], [47.0, 4645.0], [47.1, 4655.0], [47.2, 4675.0], [47.3, 4678.0], [47.4, 4691.0], [47.5, 4713.0], [47.6, 4720.0], [47.7, 4723.0], [47.8, 4756.0], [47.9, 4777.0], [48.0, 4782.0], [48.1, 4787.0], [48.2, 4796.0], [48.3, 4802.0], [48.4, 4815.0], [48.5, 4823.0], [48.6, 4841.0], [48.7, 4846.0], [48.8, 4860.0], [48.9, 4869.0], [49.0, 4882.0], [49.1, 4885.0], [49.2, 4901.0], [49.3, 4906.0], [49.4, 4911.0], [49.5, 4917.0], [49.6, 4923.0], [49.7, 4926.0], [49.8, 4941.0], [49.9, 4942.0], [50.0, 4944.0], [50.1, 4945.0], [50.2, 4948.0], [50.3, 4950.0], [50.4, 4968.0], [50.5, 4973.0], [50.6, 4987.0], [50.7, 5008.0], [50.8, 5027.0], [50.9, 5029.0], [51.0, 5042.0], [51.1, 5051.0], [51.2, 5063.0], [51.3, 5066.0], [51.4, 5074.0], [51.5, 5080.0], [51.6, 5096.0], [51.7, 5098.0], [51.8, 5100.0], [51.9, 5104.0], [52.0, 5110.0], [52.1, 5113.0], [52.2, 5123.0], [52.3, 5125.0], [52.4, 5128.0], [52.5, 5131.0], [52.6, 5136.0], [52.7, 5139.0], [52.8, 5148.0], [52.9, 5150.0], [53.0, 5160.0], [53.1, 5165.0], [53.2, 5171.0], [53.3, 5173.0], [53.4, 5179.0], [53.5, 5181.0], [53.6, 5184.0], [53.7, 5190.0], [53.8, 5193.0], [53.9, 5197.0], [54.0, 5208.0], [54.1, 5210.0], [54.2, 5216.0], [54.3, 5220.0], [54.4, 5228.0], [54.5, 5232.0], [54.6, 5235.0], [54.7, 5236.0], [54.8, 5240.0], [54.9, 5241.0], [55.0, 5243.0], [55.1, 5245.0], [55.2, 5247.0], [55.3, 5251.0], [55.4, 5254.0], [55.5, 5254.0], [55.6, 5256.0], [55.7, 5257.0], [55.8, 5259.0], [55.9, 5259.0], [56.0, 5261.0], [56.1, 5263.0], [56.2, 5266.0], [56.3, 5269.0], [56.4, 5271.0], [56.5, 5272.0], [56.6, 5273.0], [56.7, 5276.0], [56.8, 5284.0], [56.9, 5289.0], [57.0, 5290.0], [57.1, 5292.0], [57.2, 5298.0], [57.3, 5300.0], [57.4, 5311.0], [57.5, 5312.0], [57.6, 5316.0], [57.7, 5319.0], [57.8, 5321.0], [57.9, 5321.0], [58.0, 5323.0], [58.1, 5326.0], [58.2, 5330.0], [58.3, 5330.0], [58.4, 5336.0], [58.5, 5338.0], [58.6, 5341.0], [58.7, 5350.0], [58.8, 5352.0], [58.9, 5357.0], [59.0, 5362.0], [59.1, 5363.0], [59.2, 5368.0], [59.3, 5369.0], [59.4, 5373.0], [59.5, 5376.0], [59.6, 5380.0], [59.7, 5381.0], [59.8, 5389.0], [59.9, 5390.0], [60.0, 5398.0], [60.1, 5399.0], [60.2, 5404.0], [60.3, 5407.0], [60.4, 5415.0], [60.5, 5418.0], [60.6, 5426.0], [60.7, 5432.0], [60.8, 5439.0], [60.9, 5447.0], [61.0, 5456.0], [61.1, 5463.0], [61.2, 5469.0], [61.3, 5471.0], [61.4, 5485.0], [61.5, 5495.0], [61.6, 5497.0], [61.7, 5501.0], [61.8, 5513.0], [61.9, 5517.0], [62.0, 5523.0], [62.1, 5526.0], [62.2, 5529.0], [62.3, 5533.0], [62.4, 5534.0], [62.5, 5539.0], [62.6, 5546.0], [62.7, 5548.0], [62.8, 5567.0], [62.9, 5570.0], [63.0, 5573.0], [63.1, 5583.0], [63.2, 5587.0], [63.3, 5592.0], [63.4, 5598.0], [63.5, 5604.0], [63.6, 5606.0], [63.7, 5608.0], [63.8, 5614.0], [63.9, 5616.0], [64.0, 5617.0], [64.1, 5618.0], [64.2, 5623.0], [64.3, 5626.0], [64.4, 5633.0], [64.5, 5635.0], [64.6, 5637.0], [64.7, 5642.0], [64.8, 5648.0], [64.9, 5649.0], [65.0, 5652.0], [65.1, 5655.0], [65.2, 5660.0], [65.3, 5660.0], [65.4, 5664.0], [65.5, 5665.0], [65.6, 5668.0], [65.7, 5671.0], [65.8, 5682.0], [65.9, 5685.0], [66.0, 5687.0], [66.1, 5694.0], [66.2, 5697.0], [66.3, 5702.0], [66.4, 5706.0], [66.5, 5710.0], [66.6, 5713.0], [66.7, 5713.0], [66.8, 5716.0], [66.9, 5716.0], [67.0, 5719.0], [67.1, 5722.0], [67.2, 5725.0], [67.3, 5726.0], [67.4, 5732.0], [67.5, 5732.0], [67.6, 5734.0], [67.7, 5735.0], [67.8, 5739.0], [67.9, 5739.0], [68.0, 5750.0], [68.1, 5751.0], [68.2, 5755.0], [68.3, 5757.0], [68.4, 5762.0], [68.5, 5765.0], [68.6, 5767.0], [68.7, 5768.0], [68.8, 5775.0], [68.9, 5780.0], [69.0, 5782.0], [69.1, 5785.0], [69.2, 5786.0], [69.3, 5788.0], [69.4, 5794.0], [69.5, 5796.0], [69.6, 5799.0], [69.7, 5801.0], [69.8, 5806.0], [69.9, 5810.0], [70.0, 5812.0], [70.1, 5814.0], [70.2, 5816.0], [70.3, 5816.0], [70.4, 5818.0], [70.5, 5818.0], [70.6, 5821.0], [70.7, 5822.0], [70.8, 5824.0], [70.9, 5825.0], [71.0, 5826.0], [71.1, 5827.0], [71.2, 5828.0], [71.3, 5828.0], [71.4, 5830.0], [71.5, 5832.0], [71.6, 5834.0], [71.7, 5837.0], [71.8, 5838.0], [71.9, 5841.0], [72.0, 5848.0], [72.1, 5850.0], [72.2, 5851.0], [72.3, 5852.0], [72.4, 5856.0], [72.5, 5856.0], [72.6, 5860.0], [72.7, 5864.0], [72.8, 5865.0], [72.9, 5867.0], [73.0, 5871.0], [73.1, 5873.0], [73.2, 5877.0], [73.3, 5884.0], [73.4, 5887.0], [73.5, 5888.0], [73.6, 5890.0], [73.7, 5890.0], [73.8, 5891.0], [73.9, 5892.0], [74.0, 5895.0], [74.1, 5898.0], [74.2, 5903.0], [74.3, 5905.0], [74.4, 5909.0], [74.5, 5911.0], [74.6, 5913.0], [74.7, 5914.0], [74.8, 5915.0], [74.9, 5916.0], [75.0, 5918.0], [75.1, 5919.0], [75.2, 5920.0], [75.3, 5920.0], [75.4, 5921.0], [75.5, 5922.0], [75.6, 5925.0], [75.7, 5926.0], [75.8, 5933.0], [75.9, 5936.0], [76.0, 5937.0], [76.1, 5938.0], [76.2, 5939.0], [76.3, 5940.0], [76.4, 5941.0], [76.5, 5944.0], [76.6, 5945.0], [76.7, 5948.0], [76.8, 5953.0], [76.9, 5954.0], [77.0, 5956.0], [77.1, 5957.0], [77.2, 5959.0], [77.3, 5963.0], [77.4, 5969.0], [77.5, 5971.0], [77.6, 5976.0], [77.7, 5977.0], [77.8, 5978.0], [77.9, 5978.0], [78.0, 5979.0], [78.1, 5980.0], [78.2, 5984.0], [78.3, 5985.0], [78.4, 5987.0], [78.5, 5989.0], [78.6, 5992.0], [78.7, 5993.0], [78.8, 5996.0], [78.9, 5999.0], [79.0, 6000.0], [79.1, 6001.0], [79.2, 6004.0], [79.3, 6005.0], [79.4, 6007.0], [79.5, 6008.0], [79.6, 6010.0], [79.7, 6011.0], [79.8, 6012.0], [79.9, 6015.0], [80.0, 6017.0], [80.1, 6018.0], [80.2, 6020.0], [80.3, 6020.0], [80.4, 6023.0], [80.5, 6024.0], [80.6, 6025.0], [80.7, 6025.0], [80.8, 6030.0], [80.9, 6032.0], [81.0, 6035.0], [81.1, 6037.0], [81.2, 6038.0], [81.3, 6039.0], [81.4, 6040.0], [81.5, 6041.0], [81.6, 6045.0], [81.7, 6048.0], [81.8, 6051.0], [81.9, 6053.0], [82.0, 6056.0], [82.1, 6056.0], [82.2, 6060.0], [82.3, 6060.0], [82.4, 6063.0], [82.5, 6064.0], [82.6, 6067.0], [82.7, 6068.0], [82.8, 6074.0], [82.9, 6077.0], [83.0, 6084.0], [83.1, 6084.0], [83.2, 6086.0], [83.3, 6089.0], [83.4, 6092.0], [83.5, 6093.0], [83.6, 6097.0], [83.7, 6100.0], [83.8, 6103.0], [83.9, 6107.0], [84.0, 6114.0], [84.1, 6117.0], [84.2, 6128.0], [84.3, 6133.0], [84.4, 6136.0], [84.5, 6141.0], [84.6, 6144.0], [84.7, 6145.0], [84.8, 6161.0], [84.9, 6164.0], [85.0, 6169.0], [85.1, 6170.0], [85.2, 6171.0], [85.3, 6174.0], [85.4, 6176.0], [85.5, 6179.0], [85.6, 6182.0], [85.7, 6185.0], [85.8, 6187.0], [85.9, 6190.0], [86.0, 6196.0], [86.1, 6200.0], [86.2, 6201.0], [86.3, 6207.0], [86.4, 6212.0], [86.5, 6217.0], [86.6, 6218.0], [86.7, 6220.0], [86.8, 6224.0], [86.9, 6227.0], [87.0, 6232.0], [87.1, 6233.0], [87.2, 6237.0], [87.3, 6239.0], [87.4, 6241.0], [87.5, 6246.0], [87.6, 6250.0], [87.7, 6257.0], [87.8, 6261.0], [87.9, 6264.0], [88.0, 6265.0], [88.1, 6276.0], [88.2, 6278.0], [88.3, 6279.0], [88.4, 6280.0], [88.5, 6293.0], [88.6, 6301.0], [88.7, 6306.0], [88.8, 6312.0], [88.9, 6326.0], [89.0, 6337.0], [89.1, 6347.0], [89.2, 6352.0], [89.3, 6356.0], [89.4, 6362.0], [89.5, 6376.0], [89.6, 6385.0], [89.7, 6399.0], [89.8, 6407.0], [89.9, 6431.0], [90.0, 6441.0], [90.1, 6449.0], [90.2, 6459.0], [90.3, 6477.0], [90.4, 6481.0], [90.5, 6483.0], [90.6, 6486.0], [90.7, 6489.0], [90.8, 6497.0], [90.9, 6502.0], [91.0, 6505.0], [91.1, 6512.0], [91.2, 6515.0], [91.3, 6528.0], [91.4, 6532.0], [91.5, 6537.0], [91.6, 6544.0], [91.7, 6554.0], [91.8, 6556.0], [91.9, 6564.0], [92.0, 6567.0], [92.1, 6575.0], [92.2, 6582.0], [92.3, 6589.0], [92.4, 6602.0], [92.5, 6613.0], [92.6, 6620.0], [92.7, 6626.0], [92.8, 6634.0], [92.9, 6650.0], [93.0, 6653.0], [93.1, 6666.0], [93.2, 6685.0], [93.3, 6693.0], [93.4, 6698.0], [93.5, 6709.0], [93.6, 6710.0], [93.7, 6718.0], [93.8, 6722.0], [93.9, 6734.0], [94.0, 6739.0], [94.1, 6741.0], [94.2, 6751.0], [94.3, 6757.0], [94.4, 6762.0], [94.5, 6789.0], [94.6, 6797.0], [94.7, 6808.0], [94.8, 6814.0], [94.9, 6833.0], [95.0, 6852.0], [95.1, 6868.0], [95.2, 6869.0], [95.3, 6878.0], [95.4, 6880.0], [95.5, 6886.0], [95.6, 6887.0], [95.7, 6900.0], [95.8, 6914.0], [95.9, 6919.0], [96.0, 6929.0], [96.1, 6938.0], [96.2, 6940.0], [96.3, 6946.0], [96.4, 6952.0], [96.5, 6956.0], [96.6, 6967.0], [96.7, 6978.0], [96.8, 6979.0], [96.9, 6986.0], [97.0, 6989.0], [97.1, 6994.0], [97.2, 7008.0], [97.3, 7009.0], [97.4, 7013.0], [97.5, 7021.0], [97.6, 7029.0], [97.7, 7042.0], [97.8, 7045.0], [97.9, 7050.0], [98.0, 7069.0], [98.1, 7073.0], [98.2, 7078.0], [98.3, 7080.0], [98.4, 7081.0], [98.5, 7088.0], [98.6, 7099.0], [98.7, 7108.0], [98.8, 7111.0], [98.9, 7124.0], [99.0, 7130.0], [99.1, 7146.0], [99.2, 7150.0], [99.3, 7168.0], [99.4, 7183.0], [99.5, 7196.0], [99.6, 7220.0], [99.7, 7239.0], [99.8, 7260.0], [99.9, 7307.0], [100.0, 7316.0]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 600.0, "maxY": 120.0, "series": [{"data": [[600.0, 4.0], [700.0, 2.0], [800.0, 9.0], [900.0, 11.0], [1000.0, 14.0], [1100.0, 14.0], [1200.0, 12.0], [1300.0, 26.0], [1400.0, 22.0], [1500.0, 16.0], [1600.0, 31.0], [1700.0, 32.0], [1800.0, 24.0], [1900.0, 28.0], [2000.0, 24.0], [2100.0, 33.0], [2200.0, 43.0], [2300.0, 29.0], [2400.0, 28.0], [2500.0, 23.0], [2600.0, 29.0], [2700.0, 37.0], [2800.0, 35.0], [2900.0, 40.0], [3000.0, 40.0], [3100.0, 40.0], [3200.0, 44.0], [3300.0, 39.0], [3400.0, 39.0], [3500.0, 49.0], [3600.0, 41.0], [3700.0, 30.0], [3800.0, 42.0], [3900.0, 44.0], [4000.0, 36.0], [4100.0, 37.0], [4200.0, 39.0], [4300.0, 33.0], [4400.0, 24.0], [4500.0, 20.0], [4600.0, 23.0], [4700.0, 20.0], [4800.0, 24.0], [4900.0, 37.0], [5000.0, 28.0], [5100.0, 53.0], [5200.0, 84.0], [5300.0, 72.0], [5400.0, 37.0], [5500.0, 45.0], [5600.0, 71.0], [5700.0, 84.0], [5800.0, 112.0], [5900.0, 120.0], [6000.0, 118.0], [6100.0, 61.0], [6200.0, 62.0], [6300.0, 29.0], [6500.0, 37.0], [6600.0, 27.0], [6400.0, 28.0], [6700.0, 30.0], [6900.0, 37.0], [6800.0, 27.0], [7000.0, 36.0], [7100.0, 23.0], [7200.0, 9.0], [7300.0, 3.0]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 114.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2386.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 114.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2386.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1250.9936000000012, "minX": 1.75567536E12, "maxY": 1250.9936000000012, "series": [{"data": [[1.75567536E12, 1250.9936000000012]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567536E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 616.0, "minX": 2.0, "maxY": 7316.0, "series": [{"data": [[2.0, 6455.0], [4.0, 6399.0], [5.0, 6894.0], [6.0, 6433.5], [7.0, 6238.0], [9.0, 6280.0], [10.0, 6258.0], [11.0, 6745.0], [12.0, 7316.0], [13.0, 6276.0], [14.0, 7314.0], [15.0, 6650.0], [16.0, 7010.0], [17.0, 6771.0], [18.0, 6241.0], [19.0, 6005.0], [20.0, 7009.0], [21.0, 6620.0], [23.0, 7085.0], [24.0, 6001.0], [25.0, 6760.0], [27.0, 6955.666666666667], [31.0, 6941.5], [33.0, 7280.0], [32.0, 6985.0], [35.0, 6623.0], [36.0, 7091.5], [39.0, 5979.0], [38.0, 6796.5], [40.0, 6039.0], [43.0, 6852.0], [42.0, 6723.0], [44.0, 6722.0], [46.0, 6722.0], [49.0, 6478.0], [51.0, 6887.0], [50.0, 6507.5], [52.0, 6513.0], [54.0, 6606.5], [56.0, 6152.0], [59.0, 7283.5], [58.0, 6432.5], [61.0, 6198.0], [60.0, 7196.0], [63.0, 6568.0], [65.0, 6667.5], [70.0, 6609.0], [69.0, 6400.5], [68.0, 6065.0], [75.0, 6978.0], [74.0, 6693.0], [73.0, 6652.5], [72.0, 5968.0], [79.0, 7097.0], [78.0, 7249.0], [77.0, 7057.0], [83.0, 6664.0], [82.0, 7275.0], [81.0, 6454.5], [87.0, 6232.0], [86.0, 6126.5], [84.0, 6293.0], [91.0, 6568.0], [90.0, 6573.0], [88.0, 5985.0], [95.0, 5951.0], [94.0, 6105.0], [92.0, 5980.0], [99.0, 5984.0], [98.0, 6886.0], [97.0, 6885.0], [100.0, 7080.0], [107.0, 6616.5], [106.0, 5950.5], [104.0, 6566.0], [110.0, 6685.0], [109.0, 5954.0], [108.0, 7239.0], [115.0, 6558.0], [114.0, 6517.5], [113.0, 6512.0], [112.0, 6677.0], [119.0, 6200.0], [118.0, 6852.0], [117.0, 7117.0], [123.0, 6867.0], [122.0, 6098.5], [120.0, 6488.0], [126.0, 6136.0], [125.0, 5920.0], [124.0, 6863.0], [135.0, 6863.5], [133.0, 6728.666666666667], [130.0, 6066.0], [129.0, 7108.0], [128.0, 6405.5], [142.0, 6225.0], [141.0, 6560.666666666667], [138.0, 5901.0], [137.0, 5969.0], [136.0, 7042.0], [151.0, 7090.5], [149.0, 6376.0], [148.0, 6597.5], [146.0, 6623.5], [144.0, 6070.0], [145.0, 6189.0], [159.0, 6085.0], [158.0, 6823.5], [154.0, 6709.0], [153.0, 6100.0], [152.0, 5871.0], [166.0, 7016.0], [165.0, 7085.5], [164.0, 6289.0], [161.0, 6708.0], [174.0, 6944.0], [172.0, 7151.5], [171.0, 7008.0], [170.0, 5978.0], [168.0, 6035.5], [183.0, 6582.5], [180.0, 5998.0], [178.0, 7124.0], [177.0, 6600.333333333333], [190.0, 5920.0], [188.0, 6324.5], [187.0, 7085.0], [185.0, 6871.333333333333], [199.0, 6201.5], [197.0, 6915.0], [196.0, 6481.5], [192.0, 6172.0], [207.0, 6553.0], [206.0, 6046.0], [205.0, 6461.0], [204.0, 6008.0], [202.0, 5916.0], [201.0, 6045.0], [200.0, 6979.0], [215.0, 6216.0], [214.0, 5939.0], [213.0, 6371.5], [210.0, 6041.0], [209.0, 6921.0], [208.0, 7116.0], [222.0, 6035.0], [221.0, 6579.0], [219.0, 6385.333333333333], [230.0, 7029.0], [229.0, 5937.0], [228.0, 6627.666666666667], [225.0, 7146.0], [224.0, 5984.0], [239.0, 6297.5], [237.0, 6028.0], [236.0, 5959.0], [235.0, 6025.0], [234.0, 6567.0], [233.0, 6558.0], [232.0, 6232.0], [246.0, 6957.0], [245.0, 6014.0], [244.0, 7101.0], [243.0, 6224.0], [241.0, 6512.0], [255.0, 6173.666666666667], [252.0, 7013.0], [251.0, 6978.0], [250.0, 6016.0], [249.0, 5917.5], [248.0, 6366.0], [271.0, 6338.0], [269.0, 6456.5], [268.0, 6954.0], [266.0, 6431.333333333333], [263.0, 6698.666666666667], [260.0, 5973.0], [259.0, 6703.5], [257.0, 6442.0], [275.0, 6502.0], [287.0, 6641.333333333333], [284.0, 7073.0], [283.0, 6544.0], [282.0, 6744.5], [280.0, 5993.0], [279.0, 6009.0], [278.0, 6624.666666666667], [273.0, 6907.5], [272.0, 5999.0], [303.0, 6510.8], [298.0, 7044.0], [297.0, 6757.0], [296.0, 6948.0], [295.0, 6411.5], [289.0, 5924.0], [293.0, 5851.0], [292.0, 5985.0], [291.0, 7050.0], [290.0, 6715.5], [316.0, 6582.0], [318.0, 6529.0], [319.0, 6751.0], [317.0, 6929.0], [313.0, 6900.0], [312.0, 5871.0], [311.0, 6410.0], [309.0, 6903.5], [307.0, 6337.0], [306.0, 6690.0], [304.0, 5909.0], [334.0, 6500.0], [335.0, 6890.0], [333.0, 6482.0], [332.0, 7038.0], [331.0, 6497.0], [330.0, 6283.0], [329.0, 6738.0], [326.0, 6451.0], [321.0, 5954.0], [320.0, 7027.0], [325.0, 6392.0], [324.0, 7073.0], [350.0, 6486.0], [351.0, 6441.0], [348.0, 6555.0], [347.0, 6489.0], [346.0, 6362.0], [345.0, 6699.666666666667], [342.0, 6786.0], [340.0, 6393.0], [338.0, 6640.333333333333], [355.0, 6685.5], [366.0, 6708.0], [365.0, 6638.666666666667], [362.0, 6710.0], [361.0, 6710.0], [360.0, 6437.0], [359.0, 6808.0], [358.0, 6815.666666666667], [353.0, 6878.0], [352.0, 6875.0], [382.0, 6986.0], [383.0, 6445.0], [381.0, 6238.0], [380.0, 6312.0], [379.0, 6116.0], [377.0, 6879.0], [376.0, 6250.0], [375.0, 6590.0], [371.0, 6893.0], [368.0, 6522.0], [372.0, 6257.0], [387.0, 6697.0], [398.0, 6138.166666666666], [395.0, 6324.0], [393.0, 6264.0], [389.0, 6835.0], [388.0, 6938.0], [386.0, 6954.0], [385.0, 6989.0], [384.0, 6568.0], [414.0, 6230.0], [415.0, 6254.5], [413.0, 6050.0], [410.0, 6362.0], [409.0, 6107.666666666667], [408.0, 6058.0], [405.0, 6205.0], [404.0, 6915.0], [403.0, 6020.0], [402.0, 6500.5], [400.0, 6079.5], [419.0, 6095.5], [430.0, 6032.5], [428.0, 6037.0], [427.0, 6061.333333333333], [426.0, 6088.0], [423.0, 6084.0], [422.0, 6084.0], [421.0, 6074.0], [420.0, 6074.0], [417.0, 6352.0], [416.0, 6040.0], [446.0, 6090.0], [444.0, 6016.0], [435.0, 6038.0], [434.0, 6043.5], [432.0, 6054.5], [443.0, 6012.0], [442.0, 6055.0], [441.0, 6025.0], [440.0, 6010.0], [439.0, 6023.0], [438.0, 6030.0], [436.0, 6040.0], [461.0, 5996.0], [462.0, 5978.0], [460.0, 6740.0], [451.0, 6797.0], [450.0, 6020.0], [449.0, 6164.0], [448.0, 6399.0], [459.0, 5977.0], [458.0, 6006.0], [456.0, 5984.5], [454.0, 5978.0], [453.0, 6011.0], [452.0, 6022.0], [478.0, 5903.0], [479.0, 5914.0], [477.0, 5921.0], [476.0, 5934.0], [475.0, 6483.0], [474.0, 5919.0], [472.0, 5940.0], [471.0, 5922.0], [465.0, 6117.0], [464.0, 5998.5], [470.0, 5962.8], [492.0, 5877.0], [491.0, 5912.0], [490.0, 5915.0], [488.0, 5880.75], [484.0, 5898.0], [483.0, 5890.0], [482.0, 5868.0], [481.0, 5890.0], [480.0, 5908.0], [511.0, 5839.5], [509.0, 5824.5], [507.0, 5837.0], [506.0, 5849.5], [504.0, 5831.0], [503.0, 5856.0], [501.0, 5863.5], [499.0, 5864.0], [536.0, 5788.0], [542.0, 5782.0], [528.0, 5794.5], [540.0, 5782.0], [526.0, 5796.0], [512.0, 5826.0], [514.0, 5827.0], [518.0, 5827.0], [524.0, 5824.0], [520.0, 5838.0], [534.0, 5824.0], [530.0, 5806.0], [568.0, 5734.0], [564.0, 5750.0], [560.0, 5771.0], [570.0, 6037.0], [546.0, 5757.0], [544.0, 5739.0], [558.0, 5751.0], [556.0, 5799.0], [554.0, 5779.4], [566.0, 5781.0], [606.0, 5696.0], [596.0, 5715.666666666667], [594.0, 5716.0], [592.0, 5686.0], [600.0, 5725.0], [582.0, 5697.0], [576.0, 5757.333333333333], [590.0, 5705.0], [586.0, 5694.0], [598.0, 5719.0], [634.0, 5914.0], [624.0, 5959.0], [626.0, 5926.0], [636.0, 5911.0], [632.0, 5917.0], [614.0, 5845.0], [622.0, 5950.0], [620.0, 5940.0], [618.0, 5696.0], [616.0, 5971.0], [630.0, 5699.0], [666.0, 5501.0], [660.0, 5615.0], [670.0, 5820.0], [658.0, 5794.0], [646.0, 5737.0], [644.0, 5820.25], [642.0, 5945.0], [650.0, 5818.0], [648.0, 5649.0], [662.0, 5608.0], [698.0, 5617.0], [702.0, 5614.0], [688.0, 5649.0], [690.0, 5637.0], [696.0, 5630.0], [672.0, 5641.5], [676.0, 5666.0], [674.0, 5667.0], [678.0, 5664.0], [684.0, 5655.0], [682.0, 5659.666666666667], [694.0, 5638.5], [692.0, 5643.0], [728.0, 5827.5], [722.0, 5941.0], [732.0, 5575.0], [730.0, 5944.0], [706.0, 5608.0], [716.0, 5592.0], [714.0, 5544.0], [712.0, 5563.666666666667], [726.0, 6326.0], [724.0, 5928.0], [720.0, 5533.0], [762.0, 6176.0], [766.0, 6218.0], [752.0, 5807.0], [754.0, 6187.0], [756.0, 6217.0], [760.0, 6265.0], [742.0, 6179.0], [740.0, 5368.0], [750.0, 5352.0], [748.0, 5756.0], [746.0, 5361.0], [744.0, 6181.0], [758.0, 6231.0], [794.0, 6250.0], [792.0, 5635.0], [784.0, 6144.0], [786.0, 6225.0], [796.0, 5798.5], [772.0, 6224.0], [774.0, 5760.0], [782.0, 5793.0], [780.0, 6280.0], [778.0, 6279.0], [790.0, 6145.0], [824.0, 6142.0], [830.0, 5884.0], [816.0, 6217.0], [818.0, 6212.0], [828.0, 6062.0], [802.0, 6223.0], [804.0, 5357.0], [814.0, 5908.0], [810.0, 6044.5], [808.0, 6077.0], [822.0, 6188.0], [820.0, 6188.0], [838.0, 5803.0], [848.0, 6000.0], [860.0, 5968.0], [856.0, 5636.5], [834.0, 6045.0], [832.0, 6007.0], [844.0, 6110.0], [842.0, 6102.0], [840.0, 5918.0], [854.0, 5828.0], [888.0, 5529.333333333333], [882.0, 5256.0], [892.0, 5245.0], [890.0, 5247.0], [870.0, 5951.0], [868.0, 5814.0], [864.0, 5816.0], [878.0, 5259.0], [876.0, 6092.0], [874.0, 5266.0], [884.0, 5254.0], [924.0, 5993.0], [926.0, 6017.0], [912.0, 5923.666666666667], [914.0, 5926.0], [916.0, 6056.0], [922.0, 6024.0], [920.0, 6024.0], [900.0, 5241.0], [898.0, 5242.0], [908.0, 6018.0], [906.0, 5989.0], [904.0, 5235.0], [934.0, 5689.666666666667], [956.0, 5657.5], [954.0, 5798.0], [952.0, 5760.333333333333], [928.0, 5995.5], [940.0, 5452.0], [938.0, 5860.0], [936.0, 5852.0], [948.0, 5228.0], [986.0, 5343.0], [990.0, 5072.0], [976.0, 5911.0], [978.0, 5373.0], [984.0, 5341.0], [966.0, 5430.0], [960.0, 5811.0], [970.0, 5895.0], [968.0, 5919.0], [982.0, 5407.0], [1018.0, 5322.0], [1012.0, 5446.5], [1022.0, 5323.0], [1020.0, 5390.0], [998.0, 5482.0], [996.0, 5628.5], [992.0, 5679.5], [1006.0, 4802.0], [1004.0, 5568.5], [1002.0, 5519.75], [1014.0, 5721.0], [1072.0, 5768.0], [1080.0, 5448.0], [1056.0, 5273.0], [1060.0, 5467.0], [1084.0, 5425.0], [1076.0, 5192.0], [1024.0, 5292.5], [1028.0, 5710.0], [1036.0, 5572.5], [1052.0, 5665.0], [1048.0, 5476.0], [1044.0, 5274.0], [1136.0, 5041.0], [1148.0, 4995.5], [1120.0, 5113.0], [1144.0, 5062.0], [1116.0, 4869.0], [1092.0, 5572.0], [1096.0, 5497.0], [1112.0, 5288.0], [1128.0, 5386.333333333333], [1124.0, 4949.0], [1212.0, 4389.0], [1188.0, 5377.5], [1204.0, 4343.0], [1180.0, 5468.0], [1176.0, 5297.0], [1172.0, 5053.5], [1168.0, 4832.0], [1196.0, 5298.0], [1192.0, 5485.0], [1268.0, 4315.6], [1256.0, 4276.0], [1276.0, 4201.0], [1248.0, 5001.142857142857], [1264.0, 5327.0], [1236.0, 4359.0], [1220.0, 5319.0], [1228.0, 4923.0], [1260.0, 5232.0], [1252.0, 5250.0], [1332.0, 4815.0], [1340.0, 5052.0], [1312.0, 4420.0], [1316.0, 5161.0], [1336.0, 4620.0], [1308.0, 4657.0], [1280.0, 4849.0], [1284.0, 4098.0], [1292.0, 5241.0], [1300.0, 5038.0], [1324.0, 4628.0], [1320.0, 5155.0], [1400.0, 3893.0], [1404.0, 4434.0], [1392.0, 3846.5], [1372.0, 3827.0], [1344.0, 4868.0], [1348.0, 3965.0], [1356.0, 4056.0], [1360.0, 3909.0], [1380.0, 4097.5], [1460.0, 4123.5], [1468.0, 3503.5], [1440.0, 4304.0], [1444.0, 4831.0], [1448.0, 3721.0], [1464.0, 3554.0], [1420.0, 3820.0], [1416.0, 4824.0], [1412.0, 4926.0], [1408.0, 4908.0], [1436.0, 4461.0], [1432.0, 4852.0], [1428.0, 4801.0], [1424.0, 3729.0], [1524.0, 3380.0], [1504.0, 4606.0], [1512.0, 3734.5], [1528.0, 3385.0], [1520.0, 4416.0], [1484.0, 4109.0], [1480.0, 4678.0], [1476.0, 4133.0], [1472.0, 4144.0], [1496.0, 4567.0], [1492.0, 4298.0], [1488.0, 3549.0], [1592.0, 3338.0], [1568.0, 4312.0], [1576.0, 3267.0], [1580.0, 3282.0], [1584.0, 4423.0], [1536.0, 3318.0], [1544.0, 3850.5], [1548.0, 3854.25], [1564.0, 4287.0], [1560.0, 3941.0], [1552.0, 4391.0], [1652.0, 3958.0], [1656.0, 3773.0], [1632.0, 3761.5], [1636.0, 3765.0], [1640.0, 3448.0], [1644.0, 3107.0], [1648.0, 3605.5], [1600.0, 3882.0], [1604.0, 4238.0], [1612.0, 4230.0], [1628.0, 4010.0], [1624.0, 3799.0], [1720.0, 2891.0], [1700.0, 4105.0], [1696.0, 3897.0], [1704.0, 3600.75], [1708.0, 3053.0], [1712.0, 3052.0], [1664.0, 4276.0], [1668.0, 3228.5], [1676.0, 4061.0], [1692.0, 3054.0], [1688.0, 3132.0], [1684.0, 3249.0], [1680.0, 3483.3333333333335], [1776.0, 4000.0], [1768.0, 3960.0], [1784.0, 3549.0], [1760.0, 3436.0], [1772.0, 3261.0], [1780.0, 2877.0], [1728.0, 3870.5], [1732.0, 3682.0], [1736.0, 3013.0], [1740.0, 3521.0], [1756.0, 3402.0], [1744.0, 2992.0], [1848.0, 3668.0], [1852.0, 3666.0], [1824.0, 3135.5], [1828.0, 3423.0], [1832.0, 3075.0], [1836.0, 3723.0], [1844.0, 3095.0], [1840.0, 3394.0], [1804.0, 3929.0], [1800.0, 3169.6666666666665], [1796.0, 3242.0], [1792.0, 3857.0], [1820.0, 3150.0], [1912.0, 3508.0], [1916.0, 3603.3333333333335], [1896.0, 3265.0], [1888.0, 3585.0], [1900.0, 2950.0], [1904.0, 3206.0], [1856.0, 3805.0], [1860.0, 3460.0], [1864.0, 3354.5], [1868.0, 3788.0], [1872.0, 3473.0], [1972.0, 2938.0], [1952.0, 3433.0], [1956.0, 3294.0], [1980.0, 2205.0], [1968.0, 3389.0], [1932.0, 2805.0], [1928.0, 3203.0], [1924.0, 2366.0], [1948.0, 3583.0], [1944.0, 3589.0], [1936.0, 3473.0], [2040.0, 2300.0], [2044.0, 3203.0], [2016.0, 3206.0], [2020.0, 2070.0], [2024.0, 2569.0], [2028.0, 3097.0], [2032.0, 2096.0], [1984.0, 2739.0], [1992.0, 3071.0], [1996.0, 2125.0], [2012.0, 2701.75], [2008.0, 3239.0], [2004.0, 3121.0], [2144.0, 1961.0], [2112.0, 2531.0], [2136.0, 1889.0], [2152.0, 2893.0], [2072.0, 2001.0], [2064.0, 2199.0], [2056.0, 2730.0], [2048.0, 2958.0], [2096.0, 2185.0], [2088.0, 1970.0], [2080.0, 2268.0], [2288.0, 1404.0], [2296.0, 1896.0], [2240.0, 2786.0], [2248.0, 2577.0], [2256.0, 1437.0], [2264.0, 1629.0], [2272.0, 2102.0], [2176.0, 2602.0], [2184.0, 2771.0], [2192.0, 1642.0], [2232.0, 2204.0], [2216.0, 2515.0], [2408.0, 931.0], [2416.0, 1664.0], [2368.0, 1380.0], [2376.0, 2141.0], [2384.0, 2013.0], [2392.0, 1991.0], [2400.0, 1962.0], [2328.0, 2319.0], [2320.0, 1271.0], [2312.0, 2254.0], [2304.0, 2606.0], [2360.0, 1599.0], [2352.0, 1671.0], [2336.0, 2414.0], [2456.0, 1497.0], [2496.0, 808.0], [2448.0, 1616.0], [2432.0, 874.0], [2488.0, 1356.0], [2480.0, 1410.8], [2472.0, 1723.0], [2153.0, 2652.0], [2113.0, 2039.0], [2121.0, 2670.0], [2137.0, 2542.0], [2169.0, 2615.0], [2145.0, 2141.0], [2065.0, 2922.0], [2057.0, 3280.0], [2105.0, 2497.5], [2097.0, 2990.0], [2089.0, 2871.0], [2081.0, 2740.0], [2289.0, 2135.0], [2273.0, 1951.0], [2241.0, 1489.0], [2249.0, 2370.0], [2265.0, 2495.5], [2297.0, 1332.0], [2185.0, 1802.0], [2193.0, 1641.0], [2201.0, 2633.0], [2233.0, 2580.0], [2225.0, 2271.5], [2417.0, 970.0], [2409.0, 923.0], [2369.0, 1118.0], [2377.0, 1819.0], [2425.0, 894.0], [2329.0, 2404.0], [2321.0, 1271.5], [2313.0, 2250.0], [2305.0, 2263.0], [2361.0, 1715.0], [2353.0, 1886.0], [2345.0, 1145.5], [2337.0, 2273.0], [2449.0, 1380.0], [2489.0, 630.0], [2497.0, 873.0], [2433.0, 2127.0], [2481.0, 1390.0], [2473.0, 1462.0], [2465.0, 1219.3333333333333], [1081.0, 5173.0], [1057.0, 5071.0], [1073.0, 5181.0], [1025.0, 5290.0], [1049.0, 5275.0], [1045.0, 5362.0], [1041.0, 5289.5], [1069.0, 5194.0], [1061.0, 5183.0], [1093.0, 5671.0], [1149.0, 5110.0], [1121.0, 5381.0], [1145.0, 5318.0], [1089.0, 5238.5], [1097.0, 5313.0], [1117.0, 5642.0], [1113.0, 5684.0], [1109.0, 5352.0], [1105.0, 5099.0], [1133.0, 5004.5], [1129.0, 5365.0], [1125.0, 4724.0], [1209.0, 4832.5], [1213.0, 4922.0], [1185.0, 5332.0], [1193.0, 5351.0], [1205.0, 5016.0], [1201.0, 5134.5], [1161.0, 5494.333333333333], [1157.0, 5142.333333333333], [1153.0, 5191.0], [1181.0, 5319.0], [1177.0, 5529.0], [1173.0, 4787.0], [1197.0, 4943.0], [1273.0, 4382.0], [1253.0, 5247.0], [1269.0, 4503.0], [1245.0, 4550.5], [1221.0, 4328.0], [1229.0, 5416.0], [1237.0, 5290.0], [1233.0, 5021.5], [1257.0, 5261.0], [1249.0, 4882.0], [1289.0, 4715.666666666667], [1337.0, 4067.0], [1329.0, 4391.333333333333], [1317.0, 4095.0], [1309.0, 4676.0], [1281.0, 4740.0], [1285.0, 4138.0], [1293.0, 4156.0], [1305.0, 5190.0], [1301.0, 5210.0], [1297.0, 4365.666666666667], [1397.0, 4498.0], [1405.0, 4298.0], [1377.0, 3889.5], [1381.0, 3857.0], [1385.0, 3901.0], [1401.0, 3759.0], [1393.0, 3878.0], [1357.0, 4912.0], [1353.0, 4454.0], [1349.0, 4058.0], [1373.0, 4506.0], [1365.0, 3929.0], [1389.0, 4197.0], [1457.0, 4186.5], [1461.0, 3542.0], [1465.0, 3640.0], [1445.0, 3625.0], [1441.0, 3776.0], [1421.0, 3812.0], [1417.0, 4911.0], [1413.0, 4633.0], [1409.0, 3739.0], [1437.0, 3722.0], [1429.0, 4341.0], [1425.0, 3706.0], [1453.0, 3872.5], [1529.0, 4442.0], [1509.0, 4154.333333333333], [1513.0, 4051.0], [1517.0, 4407.5], [1533.0, 4377.5], [1481.0, 4107.0], [1473.0, 3497.0], [1501.0, 3474.0], [1497.0, 4619.0], [1493.0, 3540.0], [1489.0, 3507.0], [1597.0, 4224.5], [1573.0, 4030.0], [1569.0, 3658.0], [1577.0, 3266.0], [1581.0, 4278.0], [1593.0, 3867.0], [1589.0, 4149.5], [1585.0, 4418.0], [1537.0, 4127.0], [1541.0, 3431.5], [1565.0, 4446.0], [1561.0, 3322.0], [1553.0, 3405.0], [1661.0, 3726.0], [1633.0, 4215.0], [1637.0, 3755.0], [1641.0, 3737.0], [1645.0, 3868.0], [1657.0, 3551.0], [1653.0, 3873.0], [1649.0, 3056.0], [1601.0, 3846.0], [1605.0, 3227.0], [1609.0, 3776.0], [1617.0, 3300.0], [1669.0, 4118.0], [1721.0, 3306.0], [1717.0, 3691.6666666666665], [1697.0, 3390.0], [1709.0, 3740.0], [1725.0, 3491.0], [1665.0, 3476.0], [1673.0, 3146.0], [1677.0, 3431.0], [1693.0, 3857.0], [1689.0, 3410.0], [1685.0, 3135.0], [1785.0, 3375.0], [1761.0, 2960.0], [1765.0, 3200.0], [1769.0, 4016.0], [1773.0, 3855.0], [1781.0, 2913.0], [1729.0, 4117.0], [1733.0, 2915.0], [1737.0, 3981.0], [1741.0, 3456.5], [1757.0, 3593.0], [1753.0, 2939.5], [1749.0, 3913.5], [1745.0, 3042.0], [1853.0, 2525.0], [1825.0, 3874.0], [1829.0, 3126.0], [1833.0, 3138.0], [1837.0, 2572.0], [1845.0, 3852.0], [1841.0, 2624.0], [1805.0, 2993.5], [1801.0, 3810.0], [1821.0, 2643.0], [1817.0, 3418.5], [1813.0, 3418.0], [1909.0, 3290.5], [1897.0, 3549.0], [1901.0, 2717.0], [1917.0, 3502.0], [1905.0, 3655.0], [1857.0, 2551.0], [1861.0, 3249.0], [1865.0, 3304.0], [1869.0, 3782.0], [1885.0, 3220.0], [1881.0, 3060.0], [1877.0, 3024.5], [1977.0, 2921.0], [1969.0, 3518.0], [1961.0, 3537.5], [1965.0, 2267.5], [1981.0, 2209.0], [1933.0, 3302.0], [1929.0, 3628.0], [1921.0, 2907.0], [1949.0, 2819.0], [1945.0, 3161.0], [1941.0, 2938.0], [1937.0, 2318.0], [2045.0, 2741.0], [2021.0, 2458.0], [2025.0, 3147.0], [2029.0, 2059.0], [2041.0, 2087.0], [2037.0, 3316.5], [2033.0, 2800.0], [1989.0, 2658.0], [1993.0, 2385.0], [1997.0, 2346.0], [2013.0, 2367.0], [2162.0, 2268.0], [2130.0, 2470.0], [2138.0, 1830.0], [2170.0, 2367.5], [2146.0, 2687.0], [2074.0, 2561.5], [2066.0, 3104.0], [2050.0, 2794.0], [2106.0, 3156.0], [2098.0, 3067.0], [2082.0, 1989.0], [2290.0, 2633.0], [2242.0, 1481.0], [2298.0, 2441.0], [2258.0, 1799.5], [2282.0, 1813.0], [2194.0, 1643.0], [2202.0, 1670.0], [2234.0, 1556.0], [2226.0, 2207.0], [2210.0, 2050.6666666666665], [2418.0, 1709.0], [2426.0, 1108.0], [2370.0, 1076.0], [2378.0, 1781.0], [2386.0, 1350.5], [2394.0, 1597.0], [2410.0, 947.0], [2402.0, 1472.5], [2330.0, 1833.0], [2322.0, 1266.0], [2314.0, 2412.0], [2306.0, 1888.0], [2362.0, 1128.0], [2354.0, 1133.0], [2346.0, 1170.0], [2338.0, 1771.0], [2458.0, 1319.5], [2434.0, 868.0], [2490.0, 1928.0], [2466.0, 1678.0], [2155.0, 2192.0], [2171.0, 2805.0], [2115.0, 2848.0], [2123.0, 2729.0], [2131.0, 2876.0], [2139.0, 1768.0], [2067.0, 3054.0], [2059.0, 2472.0], [2051.0, 2021.0], [2099.0, 2509.0], [2091.0, 2488.0], [2083.0, 2876.0], [2291.0, 2069.0], [2283.0, 2222.5], [2251.0, 2366.0], [2243.0, 2199.0], [2259.0, 2251.0], [2267.0, 2352.0], [2299.0, 1321.0], [2275.0, 1393.0], [2179.0, 2364.3333333333335], [2187.0, 1667.0], [2195.0, 1624.0], [2203.0, 2708.0], [2227.0, 2119.0], [2219.0, 1861.3333333333333], [2211.0, 2573.0], [2403.0, 1595.0], [2419.0, 898.0], [2411.0, 1534.0], [2387.0, 1963.0], [2395.0, 1406.5], [2331.0, 2489.0], [2323.0, 1479.0], [2315.0, 2249.0], [2307.0, 2258.0], [2363.0, 1317.0], [2355.0, 1726.0], [2347.0, 1373.0], [2339.0, 2161.0], [2451.0, 1642.5], [2435.0, 871.0], [2459.0, 1681.0], [2443.0, 1420.2], [2491.0, 1747.0], [2483.0, 1154.5], [2475.0, 1518.0], [537.0, 5775.0], [543.0, 5815.5], [529.0, 5826.0], [539.0, 5805.0], [513.0, 5796.0], [517.0, 5841.333333333333], [519.0, 5780.0], [525.0, 5761.0], [523.0, 5829.0], [521.0, 5809.0], [535.0, 5824.0], [533.0, 6066.0], [549.0, 5748.666666666667], [573.0, 5993.666666666667], [545.0, 5767.0], [559.0, 5775.0], [557.0, 6064.0], [555.0, 5784.0], [567.0, 5773.0], [565.0, 5764.0], [563.0, 5778.5], [561.0, 5786.0], [583.0, 5735.0], [607.0, 5713.0], [605.0, 5665.5], [603.0, 5692.666666666667], [581.0, 5851.8], [589.0, 5671.0], [587.0, 6000.0], [585.0, 5726.0], [599.0, 5728.0], [597.0, 5713.0], [635.0, 5912.0], [637.0, 5913.0], [639.0, 5925.0], [625.0, 5957.0], [627.0, 5925.0], [633.0, 5915.0], [615.0, 5704.0], [613.0, 5789.666666666667], [609.0, 5799.0], [623.0, 5800.0], [617.0, 5606.0], [631.0, 5583.0], [667.0, 5496.0], [669.0, 5546.5], [657.0, 5616.0], [659.0, 5511.0], [665.0, 5553.0], [647.0, 5836.0], [645.0, 5941.0], [655.0, 5851.8], [649.0, 5892.0], [663.0, 5755.0], [661.0, 5759.0], [699.0, 5625.0], [703.0, 5621.0], [689.0, 5621.666666666667], [701.0, 5535.0], [685.0, 5649.0], [673.0, 5676.0], [679.0, 5660.0], [683.0, 5682.0], [695.0, 6362.0], [691.0, 5636.0], [705.0, 5613.0], [733.0, 6244.0], [719.0, 5563.5], [709.0, 5519.5], [707.0, 5548.0], [717.0, 5534.0], [715.0, 5601.0], [713.0, 5539.0], [725.0, 5524.0], [765.0, 6238.5], [767.0, 6170.0], [753.0, 6315.0], [755.0, 6161.0], [763.0, 6261.0], [761.0, 6261.0], [741.0, 6303.0], [739.0, 6164.714285714286], [749.0, 6264.0], [745.0, 6251.0], [759.0, 6304.0], [793.0, 6213.0], [797.0, 6176.0], [799.0, 5731.5], [785.0, 5957.0], [783.0, 6240.0], [769.0, 6228.0], [771.0, 6192.5], [775.0, 6199.0], [779.0, 6182.0], [777.0, 6233.0], [791.0, 6092.0], [789.0, 6167.0], [787.0, 6093.0], [825.0, 5891.0], [829.0, 6049.0], [817.0, 5362.0], [827.0, 6037.5], [815.0, 6171.0], [801.0, 6094.5], [803.0, 6218.0], [807.0, 6148.0], [805.0, 5272.0], [813.0, 6132.0], [811.0, 6100.0], [823.0, 6164.0], [821.0, 5243.0], [839.0, 5311.0], [859.0, 5982.0], [849.0, 6077.0], [861.0, 5823.0], [863.0, 5819.5], [835.0, 6174.0], [833.0, 6173.0], [847.0, 5982.5], [845.0, 5838.0], [843.0, 5841.0], [841.0, 5850.0], [853.0, 5831.0], [851.0, 5989.5], [889.0, 5256.0], [893.0, 5251.0], [895.0, 5668.0], [881.0, 5257.0], [883.0, 5254.0], [891.0, 5254.0], [871.0, 5271.0], [867.0, 5635.0], [879.0, 5259.0], [877.0, 5261.0], [875.0, 5263.0], [873.0, 5270.5], [885.0, 5257.0], [923.0, 6051.0], [925.0, 5992.0], [913.0, 6035.0], [915.0, 6008.0], [921.0, 6021.0], [903.0, 5234.5], [901.0, 5172.0], [909.0, 5940.0], [907.0, 6041.0], [905.0, 5106.0], [919.0, 6015.5], [917.0, 5216.0], [957.0, 5211.0], [959.0, 5603.5], [953.0, 5403.0], [943.0, 5136.0], [931.0, 6011.666666666667], [935.0, 5863.0], [939.0, 5517.0], [949.0, 5938.0], [947.0, 5554.0], [945.0, 5697.0], [985.0, 5873.0], [989.0, 5752.333333333333], [979.0, 5329.0], [977.0, 5765.0], [967.0, 5505.0], [963.0, 5582.5], [961.0, 5381.0], [975.0, 5475.5], [973.0, 5900.0], [971.0, 5905.0], [969.0, 5371.0], [983.0, 5336.0], [981.0, 5534.0], [1021.0, 5404.0], [1009.0, 5330.0], [1017.0, 5692.5], [995.0, 5826.0], [993.0, 5321.0], [1007.0, 5210.0], [1005.0, 5817.0], [1015.0, 5735.0], [1013.0, 5278.0], [1078.0, 5067.0], [1086.0, 5146.0], [1062.0, 5173.0], [1082.0, 5213.0], [1074.0, 5180.0], [1054.0, 5291.333333333333], [1026.0, 5203.0], [1034.0, 5229.333333333333], [1038.0, 5126.0], [1046.0, 5415.0], [1042.0, 5260.0], [1070.0, 5613.0], [1066.0, 5470.0], [1138.0, 5157.5], [1150.0, 5063.0], [1122.0, 5523.0], [1142.0, 5234.0], [1090.0, 5572.0], [1094.0, 5118.0], [1102.0, 5409.0], [1098.0, 5711.0], [1114.0, 5534.0], [1110.0, 5123.0], [1106.0, 5043.666666666667], [1134.0, 5084.0], [1130.0, 5546.0], [1210.0, 5239.333333333333], [1190.0, 5452.5], [1214.0, 4321.0], [1186.0, 4777.0], [1202.0, 5341.0], [1158.0, 5381.0], [1154.0, 5035.0], [1182.0, 5150.0], [1178.0, 5508.0], [1170.0, 5469.0], [1198.0, 5281.0], [1222.0, 4217.0], [1250.0, 5224.0], [1218.0, 4390.0], [1230.0, 4923.0], [1262.0, 4600.5], [1258.0, 4206.0], [1254.0, 5356.0], [1334.0, 5011.5], [1342.0, 4554.0], [1314.0, 4567.5], [1338.0, 5097.0], [1282.0, 4144.0], [1290.0, 4116.0], [1286.0, 4128.0], [1294.0, 4675.0], [1306.0, 4113.5], [1298.0, 4661.0], [1326.0, 4585.0], [1322.0, 4367.0], [1398.0, 4583.0], [1406.0, 4552.0], [1394.0, 3908.0], [1346.0, 4028.5], [1350.0, 3960.0], [1354.0, 4318.5], [1370.0, 4606.0], [1386.0, 4181.5], [1382.0, 4686.0], [1378.0, 4838.0], [1466.0, 4110.0], [1470.0, 4288.0], [1442.0, 4823.0], [1446.0, 4807.0], [1462.0, 4570.0], [1458.0, 4534.0], [1422.0, 3949.0], [1418.0, 3688.0], [1414.0, 4950.0], [1410.0, 4944.0], [1438.0, 4689.0], [1434.0, 4321.5], [1426.0, 4355.0], [1454.0, 4723.0], [1450.0, 4229.0], [1526.0, 3453.0], [1510.0, 4587.0], [1530.0, 4538.0], [1506.0, 4331.0], [1514.0, 4269.0], [1518.0, 4592.0], [1522.0, 4015.5], [1486.0, 4242.5], [1482.0, 3556.0], [1478.0, 4272.0], [1502.0, 4065.0], [1498.0, 4311.0], [1490.0, 3552.0], [1550.0, 4146.5], [1598.0, 3227.0], [1570.0, 3917.0], [1590.0, 3298.0], [1542.0, 3880.0], [1566.0, 3973.0], [1562.0, 3382.0], [1558.0, 3532.3333333333335], [1554.0, 4152.0], [1662.0, 3025.0], [1634.0, 3238.0], [1642.0, 3210.0], [1646.0, 4298.0], [1658.0, 3034.0], [1654.0, 3186.0], [1630.0, 4314.5], [1606.0, 3207.0], [1610.0, 3997.0], [1614.0, 3234.0], [1626.0, 4277.0], [1618.0, 3168.0], [1718.0, 3057.0], [1722.0, 3564.0], [1726.0, 4054.0], [1698.0, 3729.0], [1706.0, 3832.5], [1710.0, 3344.0], [1714.0, 3504.0], [1666.0, 4242.0], [1670.0, 3008.0], [1674.0, 3988.0], [1694.0, 3857.0], [1690.0, 3898.0], [1686.0, 3693.0], [1682.0, 3350.5], [1790.0, 3508.6], [1762.0, 2959.0], [1766.0, 2947.0], [1770.0, 2790.0], [1758.0, 3550.0], [1734.0, 3993.0], [1738.0, 3273.0], [1754.0, 4049.0], [1750.0, 3522.0], [1746.0, 2991.0], [1774.0, 3917.0], [1854.0, 3510.0], [1826.0, 3345.0], [1830.0, 2602.0], [1834.0, 3348.0], [1838.0, 3111.0], [1850.0, 3183.0], [1846.0, 3030.0], [1842.0, 3852.0], [1806.0, 3176.0], [1802.0, 3932.0], [1794.0, 3553.5], [1822.0, 3738.0], [1818.0, 3748.0], [1814.0, 3465.0], [1810.0, 3492.6666666666665], [1918.0, 3094.0], [1890.0, 2725.5], [1894.0, 3612.3333333333335], [1898.0, 2717.0], [1902.0, 3147.0], [1910.0, 3518.0], [1906.0, 3534.0], [1858.0, 3296.0], [1862.0, 3069.0], [1866.0, 2714.0], [1870.0, 2485.0], [1882.0, 2510.0], [1878.0, 2687.0], [1874.0, 3463.5], [1974.0, 2753.0], [1970.0, 3422.0], [1954.0, 2840.5], [1962.0, 3207.0], [1966.0, 3167.0], [1978.0, 3517.0], [1934.0, 3637.0], [1930.0, 2376.0], [1926.0, 3558.0], [1950.0, 3423.0], [1946.0, 2273.0], [1942.0, 3588.0], [2046.0, 3149.0], [2018.0, 3183.0], [2022.0, 2353.0], [2026.0, 2285.0], [2030.0, 3184.0], [2042.0, 3163.0], [2038.0, 2769.0], [2034.0, 3158.0], [1994.0, 2409.0], [2006.0, 2109.0], [2002.0, 3066.0], [2156.0, 1723.0], [2148.0, 2618.5], [2116.0, 1823.0], [2172.0, 2683.0], [2164.0, 2632.0], [2076.0, 2419.5], [2060.0, 2036.0], [2052.0, 2329.0], [2100.0, 2235.0], [2092.0, 2747.0], [2084.0, 2877.0], [2276.0, 2466.0], [2244.0, 1729.0], [2252.0, 1453.0], [2260.0, 1444.0], [2268.0, 1383.0], [2188.0, 2922.0], [2196.0, 2736.0], [2204.0, 1673.0], [2236.0, 1819.5], [2412.0, 2052.0], [2420.0, 1637.0], [2372.0, 2147.0], [2380.0, 1583.0], [2388.0, 1017.0], [2396.0, 1982.0], [2404.0, 1955.0], [2332.0, 2310.0], [2316.0, 2239.0], [2356.0, 1115.0], [2348.0, 2276.0], [2340.0, 2475.0], [2452.0, 1771.0], [2500.0, 1119.0], [2444.0, 2074.0], [2436.0, 1969.0], [2484.0, 1132.0], [2476.0, 1856.0], [2468.0, 1350.0], [2165.0, 2336.0], [2125.0, 2271.5], [2133.0, 2407.5], [2173.0, 1698.0], [2157.0, 1718.0], [2149.0, 1724.0], [2077.0, 2216.0], [2069.0, 2604.0], [2061.0, 2931.0], [2109.0, 2652.0], [2101.0, 3040.0], [2093.0, 2644.0], [2085.0, 2876.0], [2277.0, 1391.0], [2285.0, 1352.5], [2293.0, 2299.5], [2245.0, 1445.0], [2269.0, 1387.0], [2301.0, 2149.5], [2181.0, 1881.0], [2189.0, 1908.0], [2197.0, 2188.0], [2237.0, 1613.0], [2229.0, 1664.5], [2221.0, 2538.0], [2213.0, 2417.0], [2405.0, 996.0], [2381.0, 1830.0], [2373.0, 1056.0], [2397.0, 1977.0], [2429.0, 1344.0], [2325.0, 1605.0], [2317.0, 2345.0], [2309.0, 2124.5], [2365.0, 2001.5], [2357.0, 1901.0], [2349.0, 2131.0], [2341.0, 1219.0], [2461.0, 1412.5], [2453.0, 993.0], [2445.0, 1543.0], [2493.0, 1109.5], [2485.0, 1390.0], [2469.0, 1504.0], [1083.0, 5715.0], [1063.0, 5171.0], [1075.0, 5096.0], [1055.0, 5709.0], [1027.0, 5717.0], [1039.0, 5283.5], [1031.0, 5446.0], [1051.0, 5513.0], [1071.0, 5099.0], [1067.0, 5229.333333333333], [1059.0, 5189.0], [1143.0, 5270.5], [1139.0, 5633.0], [1151.0, 5074.0], [1123.0, 5335.0], [1147.0, 4936.0], [1119.0, 5393.5], [1091.0, 5290.0], [1095.0, 5318.0], [1115.0, 5094.0], [1111.0, 5681.0], [1107.0, 5136.0], [1131.0, 4948.0], [1191.0, 5366.0], [1215.0, 4385.0], [1195.0, 5163.0], [1211.0, 4942.0], [1203.0, 5369.0], [1167.0, 5296.833333333334], [1179.0, 5469.0], [1199.0, 5376.0], [1271.0, 4715.5], [1275.0, 4491.5], [1219.0, 4846.0], [1227.0, 4652.5], [1223.0, 4273.0], [1231.0, 4364.0], [1239.0, 4514.5], [1235.0, 4870.5], [1259.0, 4172.0], [1255.0, 5241.0], [1251.0, 5219.0], [1335.0, 5149.0], [1331.0, 5023.0], [1323.0, 4629.0], [1319.0, 5000.0], [1315.0, 3963.0], [1283.0, 4885.0], [1291.0, 5018.0], [1307.0, 4395.0], [1303.0, 5175.0], [1403.0, 4429.5], [1407.0, 4942.0], [1383.0, 3910.0], [1387.0, 4484.0], [1399.0, 4645.0], [1359.0, 4800.5], [1355.0, 5106.0], [1351.0, 5128.0], [1347.0, 5042.0], [1375.0, 3911.0], [1371.0, 3855.0], [1367.0, 4773.666666666667], [1363.0, 4665.0], [1391.0, 3845.0], [1423.0, 4096.0], [1447.0, 4814.0], [1471.0, 3941.0], [1463.0, 4716.0], [1419.0, 4909.0], [1411.0, 4786.0], [1439.0, 4337.0], [1435.0, 4707.0], [1431.0, 4308.0], [1427.0, 4225.0], [1455.0, 4177.0], [1451.0, 4795.0], [1531.0, 3328.0], [1535.0, 3787.5], [1515.0, 4053.0], [1519.0, 3981.0], [1527.0, 4235.0], [1523.0, 3493.0], [1503.0, 4306.0], [1487.0, 3422.0], [1483.0, 4249.0], [1479.0, 4291.666666666667], [1475.0, 3467.0], [1499.0, 3407.0], [1495.0, 4471.0], [1491.0, 4611.0], [1599.0, 4405.0], [1595.0, 3927.0], [1571.0, 3900.0], [1575.0, 4050.0], [1579.0, 3773.5], [1583.0, 4150.5], [1591.0, 3338.0], [1587.0, 4286.5], [1567.0, 3919.0], [1539.0, 3867.0], [1559.0, 3393.0], [1555.0, 4454.0], [1655.0, 3109.0], [1659.0, 3177.0], [1663.0, 3167.0], [1635.0, 3225.0], [1643.0, 3114.0], [1651.0, 3743.0], [1603.0, 4010.5], [1607.0, 3831.0], [1611.0, 3735.0], [1615.0, 3175.0], [1627.0, 3788.0], [1623.0, 3625.0], [1719.0, 3330.0], [1699.0, 3624.0], [1707.0, 3835.0], [1711.0, 2945.0], [1695.0, 4058.0], [1675.0, 3432.0], [1691.0, 3409.0], [1687.0, 3719.0], [1683.0, 3138.0], [1791.0, 3833.0], [1779.0, 3169.6666666666665], [1767.0, 3232.0], [1771.0, 2786.0], [1731.0, 3562.5], [1735.0, 2864.0], [1743.0, 3287.0], [1751.0, 2925.0], [1747.0, 4057.0], [1775.0, 3258.0], [1851.0, 3083.0], [1843.0, 3112.0], [1855.0, 3086.0], [1827.0, 3756.0], [1831.0, 2802.0], [1839.0, 2622.0], [1847.0, 2762.0], [1807.0, 3796.0], [1799.0, 2663.0], [1795.0, 3874.0], [1819.0, 3743.0], [1815.0, 2833.0], [1811.0, 2665.0], [1919.0, 3076.0], [1915.0, 3632.0], [1891.0, 3582.0], [1895.0, 3690.0], [1899.0, 2486.0], [1903.0, 2381.0], [1907.0, 2432.0], [1887.0, 3616.5], [1859.0, 3652.0], [1867.0, 2532.0], [1871.0, 3222.0], [1883.0, 3617.0], [1875.0, 3669.0], [1979.0, 2992.0], [1975.0, 2761.0], [1983.0, 2567.5], [1959.0, 3276.6666666666665], [1963.0, 3394.0], [1967.0, 2458.0], [1971.0, 3394.0], [1935.0, 3553.0], [1927.0, 2542.0], [1923.0, 2988.0], [1951.0, 2970.0], [1947.0, 3555.0], [1943.0, 3580.0], [1939.0, 2404.0], [2035.0, 3160.0], [2047.0, 2960.0], [2031.0, 2995.0], [2039.0, 3164.0], [2015.0, 2730.5], [1987.0, 2563.0], [1991.0, 2611.5], [1995.0, 2704.0], [1999.0, 2709.5], [2007.0, 2629.5], [2150.0, 1740.0], [2158.0, 1753.0], [2166.0, 2224.0], [2118.0, 2298.5], [2134.0, 2937.0], [2142.0, 2463.3333333333335], [2078.0, 3223.0], [2070.0, 1956.0], [2062.0, 2743.0], [2054.0, 3105.5], [2110.0, 2360.3333333333335], [2094.0, 1972.0], [2286.0, 1381.0], [2246.0, 2378.0], [2254.0, 2113.5], [2262.0, 1418.0], [2270.0, 2129.0], [2278.0, 2493.0], [2182.0, 2754.0], [2206.0, 1725.0], [2222.0, 2145.0], [2430.0, 1599.6666666666667], [2374.0, 1046.0], [2382.0, 2023.0], [2390.0, 1903.0], [2398.0, 1976.0], [2422.0, 1401.5], [2414.0, 1646.0], [2326.0, 1288.0], [2318.0, 2233.0], [2310.0, 2375.0], [2366.0, 2073.0], [2358.0, 2426.0], [2350.0, 1362.0], [2342.0, 2248.0], [2438.0, 1062.0], [2446.0, 2065.0], [2462.0, 1744.0], [2486.0, 1132.0], [2470.0, 1733.0], [2159.0, 2787.0], [2175.0, 2439.5], [2119.0, 2738.0], [2127.0, 2459.5], [2143.0, 2647.0], [2167.0, 2673.0], [2151.0, 2465.0], [2079.0, 2720.0], [2071.0, 2181.0], [2063.0, 2305.0], [2055.0, 2027.0], [2111.0, 1899.0], [2103.0, 2601.0], [2095.0, 2637.0], [2087.0, 2539.5], [2287.0, 1569.0], [2295.0, 1880.0], [2303.0, 2175.0], [2247.0, 1445.0], [2255.0, 2149.0], [2271.0, 2508.0], [2279.0, 2136.0], [2239.0, 2610.0], [2191.0, 2622.0], [2199.0, 2438.5], [2207.0, 1631.0], [2231.0, 1519.0], [2223.0, 1784.0], [2215.0, 2013.0], [2423.0, 1769.0], [2431.0, 1984.0], [2375.0, 1048.0], [2383.0, 2003.0], [2391.0, 1616.0], [2399.0, 2043.0], [2415.0, 1190.0], [2407.0, 1545.0], [2335.0, 1889.3333333333333], [2327.0, 1287.0], [2311.0, 2275.0], [2359.0, 1118.0], [2343.0, 1799.0], [2447.0, 1437.0], [2495.0, 616.0], [2455.0, 1245.0], [2487.0, 672.0], [2471.0, 733.0]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}, {"data": [[1250.9932000000006, 4506.210399999995]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 21041.666666666668, "minX": 1.75567536E12, "maxY": 191500.0, "series": [{"data": [[1.75567536E12, 191500.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75567536E12, 21041.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567536E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4506.210399999995, "minX": 1.75567536E12, "maxY": 4506.210399999995, "series": [{"data": [[1.75567536E12, 4506.210399999995]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567536E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4506.176000000002, "minX": 1.75567536E12, "maxY": 4506.176000000002, "series": [{"data": [[1.75567536E12, 4506.176000000002]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567536E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4357.763199999992, "minX": 1.75567536E12, "maxY": 4357.763199999992, "series": [{"data": [[1.75567536E12, 4357.763199999992]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567536E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 616.0, "minX": 1.75567536E12, "maxY": 7316.0, "series": [{"data": [[1.75567536E12, 7316.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75567536E12, 6443.700000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75567536E12, 7132.969999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75567536E12, 6862.449999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75567536E12, 616.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75567536E12, 4944.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567536E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1373.0, "minX": 45.0, "maxY": 6564.0, "series": [{"data": [[590.0, 5915.0], [317.0, 1881.0], [311.0, 6564.0], [45.0, 1373.0], [381.0, 2995.0], [387.0, 3893.0], [469.0, 5235.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 590.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1373.0, "minX": 45.0, "maxY": 6564.0, "series": [{"data": [[590.0, 5915.0], [317.0, 1881.0], [311.0, 6564.0], [45.0, 1373.0], [381.0, 2995.0], [387.0, 3893.0], [469.0, 5235.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 590.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567536E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567536E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567536E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567536E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567536E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567536E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567536E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567536E12, 41.666666666666664]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567536E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567536E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567536E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567536E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

