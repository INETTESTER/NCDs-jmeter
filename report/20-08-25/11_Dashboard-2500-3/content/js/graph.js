/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 542.0, "minX": 0.0, "maxY": 7058.0, "series": [{"data": [[0.0, 542.0], [0.1, 860.0], [0.2, 961.0], [0.3, 969.0], [0.4, 1038.0], [0.5, 1051.0], [0.6, 1087.0], [0.7, 1121.0], [0.8, 1141.0], [0.9, 1162.0], [1.0, 1189.0], [1.1, 1229.0], [1.2, 1256.0], [1.3, 1297.0], [1.4, 1309.0], [1.5, 1337.0], [1.6, 1360.0], [1.7, 1375.0], [1.8, 1380.0], [1.9, 1406.0], [2.0, 1408.0], [2.1, 1412.0], [2.2, 1414.0], [2.3, 1419.0], [2.4, 1437.0], [2.5, 1447.0], [2.6, 1459.0], [2.7, 1490.0], [2.8, 1498.0], [2.9, 1509.0], [3.0, 1537.0], [3.1, 1555.0], [3.2, 1568.0], [3.3, 1584.0], [3.4, 1591.0], [3.5, 1601.0], [3.6, 1607.0], [3.7, 1614.0], [3.8, 1640.0], [3.9, 1655.0], [4.0, 1660.0], [4.1, 1670.0], [4.2, 1672.0], [4.3, 1684.0], [4.4, 1688.0], [4.5, 1708.0], [4.6, 1720.0], [4.7, 1745.0], [4.8, 1754.0], [4.9, 1767.0], [5.0, 1782.0], [5.1, 1798.0], [5.2, 1803.0], [5.3, 1813.0], [5.4, 1829.0], [5.5, 1836.0], [5.6, 1846.0], [5.7, 1856.0], [5.8, 1867.0], [5.9, 1880.0], [6.0, 1882.0], [6.1, 1886.0], [6.2, 1890.0], [6.3, 1904.0], [6.4, 1924.0], [6.5, 1932.0], [6.6, 1960.0], [6.7, 1963.0], [6.8, 1971.0], [6.9, 1982.0], [7.0, 1988.0], [7.1, 1999.0], [7.2, 2003.0], [7.3, 2018.0], [7.4, 2029.0], [7.5, 2036.0], [7.6, 2044.0], [7.7, 2052.0], [7.8, 2068.0], [7.9, 2074.0], [8.0, 2077.0], [8.1, 2087.0], [8.2, 2106.0], [8.3, 2107.0], [8.4, 2115.0], [8.5, 2116.0], [8.6, 2123.0], [8.7, 2126.0], [8.8, 2130.0], [8.9, 2132.0], [9.0, 2143.0], [9.1, 2150.0], [9.2, 2158.0], [9.3, 2167.0], [9.4, 2175.0], [9.5, 2175.0], [9.6, 2181.0], [9.7, 2190.0], [9.8, 2194.0], [9.9, 2195.0], [10.0, 2220.0], [10.1, 2223.0], [10.2, 2231.0], [10.3, 2234.0], [10.4, 2240.0], [10.5, 2241.0], [10.6, 2245.0], [10.7, 2249.0], [10.8, 2262.0], [10.9, 2269.0], [11.0, 2271.0], [11.1, 2276.0], [11.2, 2279.0], [11.3, 2284.0], [11.4, 2290.0], [11.5, 2291.0], [11.6, 2293.0], [11.7, 2295.0], [11.8, 2300.0], [11.9, 2305.0], [12.0, 2308.0], [12.1, 2314.0], [12.2, 2316.0], [12.3, 2326.0], [12.4, 2333.0], [12.5, 2337.0], [12.6, 2341.0], [12.7, 2346.0], [12.8, 2356.0], [12.9, 2359.0], [13.0, 2374.0], [13.1, 2379.0], [13.2, 2386.0], [13.3, 2387.0], [13.4, 2391.0], [13.5, 2394.0], [13.6, 2404.0], [13.7, 2412.0], [13.8, 2434.0], [13.9, 2460.0], [14.0, 2463.0], [14.1, 2466.0], [14.2, 2473.0], [14.3, 2480.0], [14.4, 2494.0], [14.5, 2498.0], [14.6, 2504.0], [14.7, 2507.0], [14.8, 2511.0], [14.9, 2522.0], [15.0, 2533.0], [15.1, 2537.0], [15.2, 2544.0], [15.3, 2545.0], [15.4, 2553.0], [15.5, 2559.0], [15.6, 2570.0], [15.7, 2577.0], [15.8, 2586.0], [15.9, 2595.0], [16.0, 2603.0], [16.1, 2617.0], [16.2, 2631.0], [16.3, 2638.0], [16.4, 2645.0], [16.5, 2651.0], [16.6, 2660.0], [16.7, 2662.0], [16.8, 2668.0], [16.9, 2671.0], [17.0, 2681.0], [17.1, 2686.0], [17.2, 2694.0], [17.3, 2708.0], [17.4, 2713.0], [17.5, 2716.0], [17.6, 2727.0], [17.7, 2733.0], [17.8, 2746.0], [17.9, 2750.0], [18.0, 2762.0], [18.1, 2775.0], [18.2, 2786.0], [18.3, 2794.0], [18.4, 2804.0], [18.5, 2812.0], [18.6, 2826.0], [18.7, 2829.0], [18.8, 2837.0], [18.9, 2850.0], [19.0, 2859.0], [19.1, 2865.0], [19.2, 2881.0], [19.3, 2883.0], [19.4, 2890.0], [19.5, 2894.0], [19.6, 2900.0], [19.7, 2903.0], [19.8, 2908.0], [19.9, 2910.0], [20.0, 2926.0], [20.1, 2929.0], [20.2, 2933.0], [20.3, 2939.0], [20.4, 2939.0], [20.5, 2944.0], [20.6, 2952.0], [20.7, 2963.0], [20.8, 2965.0], [20.9, 2966.0], [21.0, 2972.0], [21.1, 2975.0], [21.2, 2979.0], [21.3, 2983.0], [21.4, 3004.0], [21.5, 3006.0], [21.6, 3019.0], [21.7, 3022.0], [21.8, 3039.0], [21.9, 3048.0], [22.0, 3051.0], [22.1, 3059.0], [22.2, 3062.0], [22.3, 3064.0], [22.4, 3080.0], [22.5, 3085.0], [22.6, 3089.0], [22.7, 3094.0], [22.8, 3105.0], [22.9, 3108.0], [23.0, 3109.0], [23.1, 3111.0], [23.2, 3115.0], [23.3, 3117.0], [23.4, 3128.0], [23.5, 3139.0], [23.6, 3143.0], [23.7, 3144.0], [23.8, 3150.0], [23.9, 3152.0], [24.0, 3154.0], [24.1, 3156.0], [24.2, 3159.0], [24.3, 3163.0], [24.4, 3168.0], [24.5, 3172.0], [24.6, 3176.0], [24.7, 3180.0], [24.8, 3182.0], [24.9, 3184.0], [25.0, 3189.0], [25.1, 3194.0], [25.2, 3196.0], [25.3, 3198.0], [25.4, 3203.0], [25.5, 3205.0], [25.6, 3206.0], [25.7, 3210.0], [25.8, 3215.0], [25.9, 3222.0], [26.0, 3224.0], [26.1, 3225.0], [26.2, 3232.0], [26.3, 3236.0], [26.4, 3242.0], [26.5, 3244.0], [26.6, 3251.0], [26.7, 3252.0], [26.8, 3263.0], [26.9, 3268.0], [27.0, 3271.0], [27.1, 3276.0], [27.2, 3282.0], [27.3, 3283.0], [27.4, 3287.0], [27.5, 3293.0], [27.6, 3299.0], [27.7, 3299.0], [27.8, 3302.0], [27.9, 3309.0], [28.0, 3324.0], [28.1, 3327.0], [28.2, 3329.0], [28.3, 3334.0], [28.4, 3340.0], [28.5, 3342.0], [28.6, 3349.0], [28.7, 3359.0], [28.8, 3370.0], [28.9, 3377.0], [29.0, 3389.0], [29.1, 3397.0], [29.2, 3403.0], [29.3, 3407.0], [29.4, 3424.0], [29.5, 3434.0], [29.6, 3439.0], [29.7, 3448.0], [29.8, 3452.0], [29.9, 3462.0], [30.0, 3479.0], [30.1, 3481.0], [30.2, 3493.0], [30.3, 3496.0], [30.4, 3503.0], [30.5, 3506.0], [30.6, 3509.0], [30.7, 3515.0], [30.8, 3524.0], [30.9, 3537.0], [31.0, 3551.0], [31.1, 3554.0], [31.2, 3560.0], [31.3, 3563.0], [31.4, 3566.0], [31.5, 3578.0], [31.6, 3583.0], [31.7, 3584.0], [31.8, 3592.0], [31.9, 3604.0], [32.0, 3608.0], [32.1, 3611.0], [32.2, 3613.0], [32.3, 3616.0], [32.4, 3622.0], [32.5, 3626.0], [32.6, 3631.0], [32.7, 3637.0], [32.8, 3643.0], [32.9, 3650.0], [33.0, 3658.0], [33.1, 3663.0], [33.2, 3667.0], [33.3, 3670.0], [33.4, 3676.0], [33.5, 3685.0], [33.6, 3696.0], [33.7, 3709.0], [33.8, 3717.0], [33.9, 3722.0], [34.0, 3731.0], [34.1, 3744.0], [34.2, 3764.0], [34.3, 3771.0], [34.4, 3780.0], [34.5, 3784.0], [34.6, 3795.0], [34.7, 3803.0], [34.8, 3814.0], [34.9, 3827.0], [35.0, 3831.0], [35.1, 3836.0], [35.2, 3840.0], [35.3, 3850.0], [35.4, 3856.0], [35.5, 3861.0], [35.6, 3881.0], [35.7, 3881.0], [35.8, 3899.0], [35.9, 3903.0], [36.0, 3919.0], [36.1, 3924.0], [36.2, 3929.0], [36.3, 3941.0], [36.4, 3947.0], [36.5, 3953.0], [36.6, 3962.0], [36.7, 3965.0], [36.8, 3979.0], [36.9, 3984.0], [37.0, 3992.0], [37.1, 3994.0], [37.2, 3996.0], [37.3, 4000.0], [37.4, 4009.0], [37.5, 4020.0], [37.6, 4027.0], [37.7, 4029.0], [37.8, 4034.0], [37.9, 4043.0], [38.0, 4070.0], [38.1, 4076.0], [38.2, 4085.0], [38.3, 4097.0], [38.4, 4104.0], [38.5, 4112.0], [38.6, 4122.0], [38.7, 4131.0], [38.8, 4157.0], [38.9, 4161.0], [39.0, 4170.0], [39.1, 4174.0], [39.2, 4186.0], [39.3, 4189.0], [39.4, 4197.0], [39.5, 4200.0], [39.6, 4204.0], [39.7, 4222.0], [39.8, 4229.0], [39.9, 4237.0], [40.0, 4242.0], [40.1, 4251.0], [40.2, 4266.0], [40.3, 4270.0], [40.4, 4282.0], [40.5, 4290.0], [40.6, 4301.0], [40.7, 4309.0], [40.8, 4317.0], [40.9, 4320.0], [41.0, 4327.0], [41.1, 4330.0], [41.2, 4339.0], [41.3, 4344.0], [41.4, 4350.0], [41.5, 4354.0], [41.6, 4360.0], [41.7, 4362.0], [41.8, 4364.0], [41.9, 4365.0], [42.0, 4372.0], [42.1, 4378.0], [42.2, 4389.0], [42.3, 4402.0], [42.4, 4410.0], [42.5, 4414.0], [42.6, 4416.0], [42.7, 4418.0], [42.8, 4424.0], [42.9, 4425.0], [43.0, 4443.0], [43.1, 4444.0], [43.2, 4452.0], [43.3, 4464.0], [43.4, 4470.0], [43.5, 4472.0], [43.6, 4485.0], [43.7, 4487.0], [43.8, 4489.0], [43.9, 4491.0], [44.0, 4492.0], [44.1, 4498.0], [44.2, 4504.0], [44.3, 4506.0], [44.4, 4510.0], [44.5, 4521.0], [44.6, 4523.0], [44.7, 4530.0], [44.8, 4542.0], [44.9, 4565.0], [45.0, 4568.0], [45.1, 4571.0], [45.2, 4574.0], [45.3, 4579.0], [45.4, 4587.0], [45.5, 4588.0], [45.6, 4595.0], [45.7, 4600.0], [45.8, 4608.0], [45.9, 4612.0], [46.0, 4617.0], [46.1, 4619.0], [46.2, 4623.0], [46.3, 4625.0], [46.4, 4631.0], [46.5, 4632.0], [46.6, 4647.0], [46.7, 4658.0], [46.8, 4663.0], [46.9, 4664.0], [47.0, 4679.0], [47.1, 4681.0], [47.2, 4693.0], [47.3, 4701.0], [47.4, 4714.0], [47.5, 4722.0], [47.6, 4735.0], [47.7, 4737.0], [47.8, 4748.0], [47.9, 4759.0], [48.0, 4769.0], [48.1, 4777.0], [48.2, 4785.0], [48.3, 4792.0], [48.4, 4797.0], [48.5, 4802.0], [48.6, 4805.0], [48.7, 4809.0], [48.8, 4823.0], [48.9, 4827.0], [49.0, 4833.0], [49.1, 4839.0], [49.2, 4854.0], [49.3, 4855.0], [49.4, 4862.0], [49.5, 4863.0], [49.6, 4872.0], [49.7, 4881.0], [49.8, 4892.0], [49.9, 4902.0], [50.0, 4908.0], [50.1, 4910.0], [50.2, 4917.0], [50.3, 4920.0], [50.4, 4926.0], [50.5, 4937.0], [50.6, 4942.0], [50.7, 4955.0], [50.8, 4962.0], [50.9, 4964.0], [51.0, 4996.0], [51.1, 5020.0], [51.2, 5029.0], [51.3, 5034.0], [51.4, 5037.0], [51.5, 5041.0], [51.6, 5050.0], [51.7, 5051.0], [51.8, 5055.0], [51.9, 5062.0], [52.0, 5063.0], [52.1, 5068.0], [52.2, 5073.0], [52.3, 5074.0], [52.4, 5079.0], [52.5, 5082.0], [52.6, 5090.0], [52.7, 5094.0], [52.8, 5095.0], [52.9, 5100.0], [53.0, 5116.0], [53.1, 5124.0], [53.2, 5130.0], [53.3, 5138.0], [53.4, 5147.0], [53.5, 5148.0], [53.6, 5157.0], [53.7, 5164.0], [53.8, 5165.0], [53.9, 5169.0], [54.0, 5175.0], [54.1, 5181.0], [54.2, 5189.0], [54.3, 5199.0], [54.4, 5200.0], [54.5, 5204.0], [54.6, 5208.0], [54.7, 5210.0], [54.8, 5216.0], [54.9, 5219.0], [55.0, 5226.0], [55.1, 5231.0], [55.2, 5236.0], [55.3, 5238.0], [55.4, 5240.0], [55.5, 5245.0], [55.6, 5247.0], [55.7, 5252.0], [55.8, 5257.0], [55.9, 5258.0], [56.0, 5272.0], [56.1, 5276.0], [56.2, 5278.0], [56.3, 5283.0], [56.4, 5283.0], [56.5, 5285.0], [56.6, 5289.0], [56.7, 5291.0], [56.8, 5302.0], [56.9, 5304.0], [57.0, 5306.0], [57.1, 5306.0], [57.2, 5312.0], [57.3, 5317.0], [57.4, 5327.0], [57.5, 5328.0], [57.6, 5329.0], [57.7, 5329.0], [57.8, 5331.0], [57.9, 5335.0], [58.0, 5339.0], [58.1, 5342.0], [58.2, 5346.0], [58.3, 5349.0], [58.4, 5352.0], [58.5, 5354.0], [58.6, 5359.0], [58.7, 5360.0], [58.8, 5365.0], [58.9, 5367.0], [59.0, 5370.0], [59.1, 5381.0], [59.2, 5386.0], [59.3, 5388.0], [59.4, 5389.0], [59.5, 5390.0], [59.6, 5394.0], [59.7, 5395.0], [59.8, 5398.0], [59.9, 5398.0], [60.0, 5399.0], [60.1, 5400.0], [60.2, 5401.0], [60.3, 5401.0], [60.4, 5402.0], [60.5, 5402.0], [60.6, 5403.0], [60.7, 5404.0], [60.8, 5405.0], [60.9, 5406.0], [61.0, 5409.0], [61.1, 5409.0], [61.2, 5413.0], [61.3, 5415.0], [61.4, 5417.0], [61.5, 5418.0], [61.6, 5421.0], [61.7, 5422.0], [61.8, 5423.0], [61.9, 5427.0], [62.0, 5430.0], [62.1, 5430.0], [62.2, 5436.0], [62.3, 5439.0], [62.4, 5441.0], [62.5, 5442.0], [62.6, 5443.0], [62.7, 5445.0], [62.8, 5447.0], [62.9, 5447.0], [63.0, 5450.0], [63.1, 5451.0], [63.2, 5456.0], [63.3, 5457.0], [63.4, 5461.0], [63.5, 5463.0], [63.6, 5470.0], [63.7, 5472.0], [63.8, 5476.0], [63.9, 5481.0], [64.0, 5484.0], [64.1, 5484.0], [64.2, 5491.0], [64.3, 5493.0], [64.4, 5500.0], [64.5, 5501.0], [64.6, 5504.0], [64.7, 5506.0], [64.8, 5510.0], [64.9, 5510.0], [65.0, 5512.0], [65.1, 5517.0], [65.2, 5524.0], [65.3, 5534.0], [65.4, 5539.0], [65.5, 5543.0], [65.6, 5545.0], [65.7, 5551.0], [65.8, 5558.0], [65.9, 5563.0], [66.0, 5569.0], [66.1, 5572.0], [66.2, 5578.0], [66.3, 5580.0], [66.4, 5583.0], [66.5, 5584.0], [66.6, 5589.0], [66.7, 5590.0], [66.8, 5593.0], [66.9, 5597.0], [67.0, 5598.0], [67.1, 5598.0], [67.2, 5601.0], [67.3, 5605.0], [67.4, 5608.0], [67.5, 5609.0], [67.6, 5616.0], [67.7, 5620.0], [67.8, 5623.0], [67.9, 5624.0], [68.0, 5627.0], [68.1, 5630.0], [68.2, 5633.0], [68.3, 5636.0], [68.4, 5643.0], [68.5, 5648.0], [68.6, 5651.0], [68.7, 5654.0], [68.8, 5656.0], [68.9, 5657.0], [69.0, 5658.0], [69.1, 5661.0], [69.2, 5666.0], [69.3, 5667.0], [69.4, 5670.0], [69.5, 5671.0], [69.6, 5675.0], [69.7, 5675.0], [69.8, 5678.0], [69.9, 5679.0], [70.0, 5684.0], [70.1, 5684.0], [70.2, 5690.0], [70.3, 5694.0], [70.4, 5697.0], [70.5, 5703.0], [70.6, 5707.0], [70.7, 5711.0], [70.8, 5716.0], [70.9, 5721.0], [71.0, 5725.0], [71.1, 5729.0], [71.2, 5731.0], [71.3, 5735.0], [71.4, 5738.0], [71.5, 5739.0], [71.6, 5744.0], [71.7, 5751.0], [71.8, 5754.0], [71.9, 5755.0], [72.0, 5767.0], [72.1, 5769.0], [72.2, 5771.0], [72.3, 5772.0], [72.4, 5776.0], [72.5, 5778.0], [72.6, 5781.0], [72.7, 5781.0], [72.8, 5786.0], [72.9, 5789.0], [73.0, 5793.0], [73.1, 5797.0], [73.2, 5800.0], [73.3, 5802.0], [73.4, 5803.0], [73.5, 5805.0], [73.6, 5806.0], [73.7, 5808.0], [73.8, 5809.0], [73.9, 5810.0], [74.0, 5813.0], [74.1, 5815.0], [74.2, 5817.0], [74.3, 5818.0], [74.4, 5820.0], [74.5, 5821.0], [74.6, 5823.0], [74.7, 5823.0], [74.8, 5826.0], [74.9, 5829.0], [75.0, 5830.0], [75.1, 5832.0], [75.2, 5833.0], [75.3, 5835.0], [75.4, 5838.0], [75.5, 5841.0], [75.6, 5844.0], [75.7, 5846.0], [75.8, 5848.0], [75.9, 5849.0], [76.0, 5853.0], [76.1, 5855.0], [76.2, 5858.0], [76.3, 5859.0], [76.4, 5862.0], [76.5, 5862.0], [76.6, 5864.0], [76.7, 5864.0], [76.8, 5865.0], [76.9, 5865.0], [77.0, 5865.0], [77.1, 5867.0], [77.2, 5867.0], [77.3, 5868.0], [77.4, 5869.0], [77.5, 5871.0], [77.6, 5872.0], [77.7, 5873.0], [77.8, 5875.0], [77.9, 5875.0], [78.0, 5878.0], [78.1, 5882.0], [78.2, 5883.0], [78.3, 5886.0], [78.4, 5887.0], [78.5, 5888.0], [78.6, 5891.0], [78.7, 5892.0], [78.8, 5899.0], [78.9, 5899.0], [79.0, 5902.0], [79.1, 5905.0], [79.2, 5909.0], [79.3, 5912.0], [79.4, 5916.0], [79.5, 5918.0], [79.6, 5919.0], [79.7, 5921.0], [79.8, 5926.0], [79.9, 5929.0], [80.0, 5932.0], [80.1, 5938.0], [80.2, 5939.0], [80.3, 5941.0], [80.4, 5944.0], [80.5, 5945.0], [80.6, 5946.0], [80.7, 5946.0], [80.8, 5949.0], [80.9, 5953.0], [81.0, 5954.0], [81.1, 5959.0], [81.2, 5961.0], [81.3, 5966.0], [81.4, 5968.0], [81.5, 5972.0], [81.6, 5974.0], [81.7, 5976.0], [81.8, 5977.0], [81.9, 5980.0], [82.0, 5980.0], [82.1, 5984.0], [82.2, 5985.0], [82.3, 5988.0], [82.4, 5992.0], [82.5, 5995.0], [82.6, 5995.0], [82.7, 5999.0], [82.8, 6002.0], [82.9, 6004.0], [83.0, 6006.0], [83.1, 6008.0], [83.2, 6009.0], [83.3, 6014.0], [83.4, 6016.0], [83.5, 6019.0], [83.6, 6020.0], [83.7, 6026.0], [83.8, 6030.0], [83.9, 6033.0], [84.0, 6038.0], [84.1, 6043.0], [84.2, 6048.0], [84.3, 6050.0], [84.4, 6054.0], [84.5, 6062.0], [84.6, 6066.0], [84.7, 6069.0], [84.8, 6080.0], [84.9, 6088.0], [85.0, 6091.0], [85.1, 6092.0], [85.2, 6092.0], [85.3, 6094.0], [85.4, 6099.0], [85.5, 6103.0], [85.6, 6107.0], [85.7, 6113.0], [85.8, 6115.0], [85.9, 6133.0], [86.0, 6136.0], [86.1, 6140.0], [86.2, 6147.0], [86.3, 6156.0], [86.4, 6163.0], [86.5, 6182.0], [86.6, 6183.0], [86.7, 6192.0], [86.8, 6196.0], [86.9, 6203.0], [87.0, 6208.0], [87.1, 6215.0], [87.2, 6219.0], [87.3, 6223.0], [87.4, 6227.0], [87.5, 6236.0], [87.6, 6237.0], [87.7, 6254.0], [87.8, 6257.0], [87.9, 6263.0], [88.0, 6272.0], [88.1, 6275.0], [88.2, 6282.0], [88.3, 6287.0], [88.4, 6290.0], [88.5, 6297.0], [88.6, 6300.0], [88.7, 6304.0], [88.8, 6306.0], [88.9, 6310.0], [89.0, 6313.0], [89.1, 6318.0], [89.2, 6319.0], [89.3, 6325.0], [89.4, 6326.0], [89.5, 6327.0], [89.6, 6328.0], [89.7, 6332.0], [89.8, 6333.0], [89.9, 6336.0], [90.0, 6340.0], [90.1, 6346.0], [90.2, 6352.0], [90.3, 6355.0], [90.4, 6360.0], [90.5, 6368.0], [90.6, 6371.0], [90.7, 6379.0], [90.8, 6384.0], [90.9, 6395.0], [91.0, 6399.0], [91.1, 6406.0], [91.2, 6413.0], [91.3, 6421.0], [91.4, 6422.0], [91.5, 6432.0], [91.6, 6435.0], [91.7, 6441.0], [91.8, 6445.0], [91.9, 6449.0], [92.0, 6451.0], [92.1, 6464.0], [92.2, 6472.0], [92.3, 6475.0], [92.4, 6477.0], [92.5, 6481.0], [92.6, 6496.0], [92.7, 6504.0], [92.8, 6507.0], [92.9, 6515.0], [93.0, 6519.0], [93.1, 6532.0], [93.2, 6534.0], [93.3, 6539.0], [93.4, 6545.0], [93.5, 6548.0], [93.6, 6566.0], [93.7, 6569.0], [93.8, 6577.0], [93.9, 6587.0], [94.0, 6588.0], [94.1, 6598.0], [94.2, 6601.0], [94.3, 6626.0], [94.4, 6630.0], [94.5, 6644.0], [94.6, 6649.0], [94.7, 6656.0], [94.8, 6661.0], [94.9, 6667.0], [95.0, 6674.0], [95.1, 6682.0], [95.2, 6683.0], [95.3, 6687.0], [95.4, 6695.0], [95.5, 6696.0], [95.6, 6704.0], [95.7, 6712.0], [95.8, 6722.0], [95.9, 6724.0], [96.0, 6724.0], [96.1, 6727.0], [96.2, 6730.0], [96.3, 6731.0], [96.4, 6735.0], [96.5, 6740.0], [96.6, 6744.0], [96.7, 6756.0], [96.8, 6758.0], [96.9, 6766.0], [97.0, 6768.0], [97.1, 6783.0], [97.2, 6783.0], [97.3, 6789.0], [97.4, 6795.0], [97.5, 6809.0], [97.6, 6831.0], [97.7, 6842.0], [97.8, 6848.0], [97.9, 6870.0], [98.0, 6875.0], [98.1, 6882.0], [98.2, 6890.0], [98.3, 6901.0], [98.4, 6906.0], [98.5, 6912.0], [98.6, 6924.0], [98.7, 6928.0], [98.8, 6930.0], [98.9, 6951.0], [99.0, 6959.0], [99.1, 6968.0], [99.2, 6975.0], [99.3, 6991.0], [99.4, 7007.0], [99.5, 7023.0], [99.6, 7031.0], [99.7, 7043.0], [99.8, 7049.0], [99.9, 7058.0], [100.0, 7058.0]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 500.0, "maxY": 143.0, "series": [{"data": [[800.0, 3.0], [900.0, 5.0], [1000.0, 8.0], [1100.0, 9.0], [1200.0, 7.0], [1300.0, 14.0], [1400.0, 23.0], [1500.0, 16.0], [1600.0, 25.0], [1700.0, 18.0], [1800.0, 28.0], [1900.0, 21.0], [2000.0, 26.0], [2100.0, 44.0], [2200.0, 46.0], [2300.0, 46.0], [2400.0, 24.0], [2500.0, 36.0], [2600.0, 31.0], [2700.0, 28.0], [2800.0, 31.0], [2900.0, 45.0], [3000.0, 33.0], [3100.0, 65.0], [3200.0, 60.0], [3300.0, 36.0], [3400.0, 30.0], [3500.0, 38.0], [3600.0, 44.0], [3700.0, 25.0], [3800.0, 30.0], [3900.0, 36.0], [4000.0, 26.0], [4100.0, 29.0], [4200.0, 27.0], [4300.0, 43.0], [4400.0, 47.0], [4500.0, 37.0], [4600.0, 41.0], [4700.0, 30.0], [4800.0, 35.0], [4900.0, 29.0], [5000.0, 46.0], [5100.0, 37.0], [5200.0, 60.0], [5300.0, 83.0], [5400.0, 108.0], [5500.0, 68.0], [5600.0, 83.0], [5700.0, 69.0], [5800.0, 143.0], [5900.0, 95.0], [6000.0, 67.0], [6100.0, 35.0], [6200.0, 44.0], [6300.0, 61.0], [6400.0, 41.0], [6500.0, 37.0], [6600.0, 35.0], [6700.0, 47.0], [6900.0, 27.0], [6800.0, 21.0], [7000.0, 17.0], [500.0, 1.0]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 70.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2430.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 70.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2430.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1171.6253737718944, "minX": 1.7556768E12, "maxY": 2421.301886792455, "series": [{"data": [[1.75567686E12, 1171.6253737718944], [1.7556768E12, 2421.301886792455]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567686E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 542.0, "minX": 1.0, "maxY": 7058.0, "series": [{"data": [[3.0, 6594.0], [5.0, 7049.0], [7.0, 6632.0], [10.0, 6929.0], [12.0, 6697.5], [13.0, 6869.0], [15.0, 6661.666666666667], [17.0, 6756.0], [19.0, 6777.0], [20.0, 6676.666666666667], [21.0, 6008.0], [22.0, 6730.0], [24.0, 6727.0], [27.0, 6327.5], [28.0, 6764.0], [30.0, 6649.666666666667], [31.0, 6008.0], [33.0, 6924.0], [35.0, 6722.0], [34.0, 5941.0], [36.0, 5871.0], [38.0, 6004.5], [43.0, 6342.666666666667], [45.0, 5867.0], [44.0, 6594.0], [46.0, 6723.0], [48.0, 5869.0], [51.0, 6086.0], [53.0, 5867.0], [54.0, 5866.5], [57.0, 5865.0], [62.0, 5874.0], [67.0, 5860.0], [65.0, 6265.5], [64.0, 6233.333333333333], [71.0, 6587.0], [70.0, 6253.666666666667], [69.0, 6982.0], [68.0, 7038.0], [73.0, 6449.0], [77.0, 6712.0], [76.0, 6379.0], [83.0, 6491.0], [87.0, 5883.0], [86.0, 6577.0], [85.0, 6010.0], [89.0, 6974.0], [88.0, 6870.0], [94.0, 5976.0], [95.0, 6704.0], [93.0, 6417.666666666667], [92.0, 6380.5], [99.0, 6744.0], [98.0, 6640.666666666667], [97.0, 6319.0], [103.0, 6322.0], [107.0, 6431.666666666667], [110.0, 6489.5], [109.0, 6336.0], [112.0, 6832.5], [119.0, 6968.0], [118.0, 6706.0], [117.0, 7058.0], [116.0, 6696.0], [122.0, 6254.0], [121.0, 6700.333333333333], [120.0, 6295.5], [125.0, 6682.0], [135.0, 6773.5], [133.0, 6357.900000000001], [132.0, 6740.0], [142.0, 6735.0], [141.0, 5973.0], [140.0, 6725.0], [139.0, 5854.0], [138.0, 6823.0], [151.0, 6664.0], [150.0, 6031.0], [149.0, 5848.0], [148.0, 5868.5], [144.0, 6282.5], [157.0, 5892.0], [156.0, 5961.0], [155.0, 6463.75], [167.0, 7007.0], [166.0, 5921.0], [165.0, 6967.0], [163.0, 6928.0], [162.0, 6287.666666666667], [160.0, 6499.0], [174.0, 5946.0], [173.0, 6907.0], [172.0, 6641.0], [171.0, 6729.0], [170.0, 5953.0], [169.0, 6528.0], [168.0, 5951.5], [183.0, 6826.0], [182.0, 6991.0], [181.0, 6363.0], [180.0, 6783.0], [178.0, 6624.333333333333], [177.0, 6724.0], [190.0, 6548.0], [189.0, 5865.0], [188.0, 5925.0], [187.0, 6890.0], [186.0, 5929.0], [185.0, 7022.0], [184.0, 7031.0], [197.0, 6464.5], [195.0, 5980.0], [194.0, 6756.0], [193.0, 6352.5], [192.0, 5908.0], [205.0, 6955.0], [204.0, 6455.5], [200.0, 6105.0], [215.0, 6803.0], [214.0, 6768.0], [213.0, 6834.5], [211.0, 6533.0], [210.0, 6901.0], [209.0, 6422.0], [208.0, 6207.333333333333], [223.0, 6481.0], [222.0, 6539.0], [221.0, 6836.0], [219.0, 6835.0], [218.0, 6216.0], [217.0, 6909.0], [230.0, 6683.0], [226.0, 6843.0], [224.0, 6233.0], [238.0, 5862.0], [237.0, 6321.0], [236.0, 6356.5], [233.0, 6478.0], [232.0, 6629.5], [246.0, 6120.333333333333], [245.0, 5858.5], [242.0, 5832.0], [240.0, 6610.5], [254.0, 6310.25], [251.0, 6399.0], [249.0, 5827.0], [248.0, 5984.0], [258.0, 6910.0], [270.0, 6628.0], [271.0, 6626.0], [269.0, 6693.5], [267.0, 6595.0], [265.0, 6543.5], [263.0, 6185.5], [261.0, 5950.333333333333], [257.0, 6324.5], [256.0, 5805.0], [286.0, 6136.0], [287.0, 6795.0], [285.0, 6766.0], [284.0, 6731.0], [283.0, 6275.0], [282.0, 6413.0], [281.0, 6115.0], [280.0, 6448.0], [279.0, 5740.0], [272.0, 6472.0], [275.0, 6451.0], [274.0, 5847.0], [278.0, 6395.0], [277.0, 6789.0], [276.0, 6140.0], [290.0, 5637.0], [299.0, 6168.0], [296.0, 6187.0], [295.0, 6300.0], [294.0, 6325.0], [293.0, 6345.0], [292.0, 5652.0], [291.0, 6408.0], [289.0, 6031.5], [319.0, 6430.25], [316.0, 6682.0], [315.0, 6393.0], [312.0, 6300.2], [311.0, 6496.0], [309.0, 6113.0], [306.0, 6127.0], [304.0, 6092.0], [335.0, 6147.0], [334.0, 6330.0], [323.0, 6214.0], [322.0, 6365.333333333333], [331.0, 6670.0], [330.0, 6287.0], [329.0, 6203.0], [328.0, 6185.5], [326.0, 6353.0], [325.0, 6686.0], [324.0, 6269.0], [339.0, 5636.0], [351.0, 6491.0], [347.0, 6233.666666666667], [344.0, 5984.0], [343.0, 6026.0], [342.0, 5778.0], [341.0, 6133.0], [338.0, 6475.0], [337.0, 6477.0], [336.0, 6175.0], [366.0, 6010.0], [367.0, 6687.0], [365.0, 6028.0], [364.0, 5972.0], [363.0, 6046.0], [362.0, 6050.0], [361.0, 6051.0], [360.0, 6062.0], [358.0, 5821.5], [352.0, 6191.5], [382.0, 5975.0], [383.0, 5945.0], [381.0, 5966.0], [380.0, 6009.0], [379.0, 6215.0], [378.0, 6016.5], [376.0, 6208.0], [375.0, 6018.0], [370.0, 6683.0], [369.0, 6267.0], [374.0, 6038.0], [373.0, 6149.666666666667], [387.0, 5993.0], [397.0, 6326.0], [398.0, 6588.0], [396.0, 6200.0], [386.0, 6193.0], [385.0, 5961.0], [384.0, 6331.0], [394.0, 5736.0], [392.0, 6182.0], [391.0, 6612.0], [390.0, 5980.0], [389.0, 6186.0], [388.0, 6014.0], [414.0, 6432.0], [413.0, 6499.5], [411.0, 6477.0], [409.0, 5953.0], [407.0, 6131.0], [405.0, 5945.333333333333], [402.0, 6177.333333333333], [401.0, 6500.0], [430.0, 5597.0], [429.0, 5598.0], [418.0, 6115.333333333333], [416.0, 5601.0], [427.0, 6296.5], [426.0, 5596.0], [424.0, 5597.0], [423.0, 5997.0], [422.0, 6598.0], [421.0, 5913.5], [420.0, 5483.0], [446.0, 5491.0], [447.0, 5980.0], [445.0, 6257.0], [443.0, 6214.5], [441.0, 5484.0], [440.0, 6304.0], [439.0, 6300.0], [437.0, 6143.0], [435.0, 5987.0], [434.0, 6303.0], [433.0, 6339.0], [432.0, 6174.5], [461.0, 5997.0], [463.0, 5478.5], [460.0, 5934.0], [451.0, 5443.0], [450.0, 5456.0], [449.0, 5630.0], [448.0, 6545.0], [459.0, 5954.0], [458.0, 6588.0], [457.0, 6262.0], [456.0, 6460.0], [454.0, 6593.0], [453.0, 6000.5], [478.0, 6133.0], [479.0, 5944.0], [476.0, 5703.0], [467.0, 6030.5], [465.0, 6403.0], [474.0, 6422.0], [473.0, 5470.0], [472.0, 6406.0], [471.0, 6445.0], [470.0, 5472.0], [469.0, 5677.0], [494.0, 6449.0], [492.0, 6092.0], [491.0, 5855.0], [490.0, 5419.0], [489.0, 5418.0], [488.0, 5878.75], [485.0, 5968.0], [484.0, 5970.0], [483.0, 5939.0], [482.0, 5909.0], [481.0, 5947.0], [510.0, 6088.0], [511.0, 5899.0], [509.0, 5865.0], [508.0, 5445.0], [507.0, 6515.0], [506.0, 5398.0], [505.0, 6015.0], [503.0, 5489.0], [497.0, 5873.0], [502.0, 5961.0], [501.0, 6545.0], [500.0, 6150.2], [538.0, 5354.0], [540.0, 5686.666666666667], [532.0, 5868.0], [542.0, 6234.5], [528.0, 5847.0], [536.0, 5349.0], [514.0, 6536.0], [512.0, 6476.0], [516.0, 6435.0], [526.0, 5852.5], [524.0, 6054.0], [522.0, 6156.0], [534.0, 5451.0], [530.0, 5865.5], [570.0, 5805.0], [562.0, 5809.0], [574.0, 5754.5], [560.0, 6464.0], [572.0, 5828.5], [550.0, 5630.0], [548.0, 5984.25], [558.0, 6017.0], [556.0, 5847.0], [554.0, 5855.0], [552.0, 6219.0], [564.0, 6146.5], [602.0, 5800.0], [604.0, 5798.0], [594.0, 5309.0], [606.0, 5820.0], [600.0, 5921.0], [576.0, 5329.0], [580.0, 5869.5], [578.0, 6465.0], [588.0, 6363.5], [598.0, 6107.0], [632.0, 5814.0], [634.0, 5500.5], [626.0, 5770.0], [638.0, 6373.0], [624.0, 5806.0], [614.0, 5793.0], [612.0, 5791.0], [610.0, 5985.0], [608.0, 5900.0], [620.0, 5730.0], [618.0, 5774.0], [630.0, 5805.0], [628.0, 5364.0], [664.0, 5965.0], [670.0, 5856.0], [656.0, 6413.0], [658.0, 6121.0], [666.0, 5970.5], [642.0, 5659.0], [640.0, 6353.0], [644.0, 5564.5], [646.0, 6034.0], [654.0, 5768.0], [652.0, 6441.0], [650.0, 5753.0], [648.0, 5624.0], [662.0, 5716.0], [660.0, 5770.5], [700.0, 6333.0], [702.0, 5686.5], [690.0, 5692.5], [688.0, 5975.0], [698.0, 5805.0], [696.0, 5694.0], [674.0, 6101.0], [686.0, 5922.0], [684.0, 6094.0], [680.0, 5718.333333333333], [692.0, 5306.0], [728.0, 5882.0], [732.0, 5247.0], [734.0, 6273.0], [720.0, 6053.5], [730.0, 5479.0], [718.0, 5829.0], [706.0, 5674.0], [708.0, 5820.0], [710.0, 5707.0], [714.0, 5873.0], [712.0, 5245.0], [726.0, 5573.0], [742.0, 6313.0], [764.0, 5397.75], [740.0, 5846.0], [738.0, 5672.0], [736.0, 5987.0], [758.0, 5522.5], [754.0, 5616.0], [752.0, 5675.0], [750.0, 5449.0], [748.0, 5678.0], [746.0, 5842.0], [798.0, 5741.0], [786.0, 5429.0], [792.0, 5517.5], [774.0, 5473.0], [782.0, 5843.0], [790.0, 5664.0], [788.0, 5567.0], [824.0, 5767.333333333333], [804.0, 5645.0], [820.0, 6033.0], [818.0, 5426.0], [814.0, 5421.5], [808.0, 5415.0], [848.0, 5403.5], [852.0, 5401.0], [862.0, 5402.5], [850.0, 5401.5], [858.0, 5442.0], [838.0, 5614.5], [834.0, 5405.5], [842.0, 5756.333333333333], [854.0, 5402.0], [888.0, 5391.0], [894.0, 5389.0], [880.0, 5658.0], [890.0, 5387.0], [864.0, 5440.0], [866.0, 5400.5], [868.0, 5400.0], [870.0, 5669.0], [878.0, 5523.666666666667], [874.0, 5409.0], [872.0, 5404.5], [886.0, 5629.0], [882.0, 5367.0], [920.0, 5491.0], [914.0, 5290.0], [924.0, 5272.0], [926.0, 5297.0], [912.0, 5288.0], [902.0, 5330.0], [900.0, 5470.5], [896.0, 5344.0], [910.0, 5336.0], [906.0, 5329.0], [904.0, 5465.5], [916.0, 5289.0], [952.0, 5368.0], [958.0, 5555.0], [946.0, 5641.0], [954.0, 6049.0], [934.0, 5257.5], [932.0, 5601.0], [930.0, 5501.0], [928.0, 5271.5], [942.0, 5240.0], [940.0, 5245.0], [938.0, 5424.5], [950.0, 5543.0], [948.0, 5510.0], [988.0, 5165.0], [978.0, 5170.0], [986.0, 5165.0], [974.0, 5519.0], [960.0, 5376.5], [962.0, 5226.0], [966.0, 5537.0], [968.0, 5988.0], [980.0, 5185.0], [1016.0, 5843.0], [1020.0, 5877.0], [1008.0, 5912.0], [1010.0, 5130.0], [1018.0, 5240.5], [992.0, 5328.5], [996.0, 5157.0], [998.0, 5149.0], [1004.0, 5405.0], [1000.0, 5455.0], [1014.0, 5158.0], [1012.0, 5124.0], [1076.0, 5292.0], [1084.0, 5589.0], [1056.0, 5849.0], [1080.0, 4942.0], [1072.0, 5811.0], [1024.0, 5838.0], [1052.0, 5961.0], [1048.0, 5417.0], [1044.0, 5689.5], [1068.0, 5655.0], [1060.0, 5306.0], [1140.0, 5583.0], [1148.0, 5274.0], [1128.0, 4887.0], [1124.0, 4859.0], [1136.0, 5268.25], [1100.0, 5521.5], [1096.0, 5216.0], [1092.0, 4948.0], [1088.0, 4959.0], [1112.0, 5818.0], [1104.0, 5079.0], [1132.0, 5261.5], [1208.0, 4632.0], [1184.0, 5041.0], [1188.0, 5037.0], [1192.0, 5549.0], [1204.0, 5098.0], [1200.0, 5104.5], [1164.0, 5683.0], [1156.0, 5563.5], [1152.0, 4814.0], [1180.0, 5497.5], [1196.0, 4679.0], [1264.0, 4507.0], [1272.0, 4477.0], [1252.0, 4553.0], [1268.0, 5423.0], [1216.0, 5589.0], [1220.0, 4619.0], [1228.0, 4602.0], [1244.0, 5544.0], [1236.0, 4812.0], [1232.0, 4628.0], [1260.0, 4521.0], [1256.0, 5401.0], [1284.0, 4425.0], [1340.0, 4770.5], [1312.0, 4861.0], [1332.0, 5057.5], [1280.0, 4444.0], [1288.0, 4411.0], [1292.0, 5072.0], [1308.0, 4797.0], [1304.0, 5278.0], [1300.0, 4369.0], [1296.0, 4386.0], [1324.0, 4571.0], [1320.0, 5082.0], [1396.0, 4609.0], [1400.0, 3975.5], [1352.0, 4112.0], [1372.0, 4710.0], [1368.0, 4498.0], [1364.0, 4510.0], [1388.0, 4362.0], [1384.0, 4680.5], [1376.0, 5090.0], [1464.0, 4364.5], [1468.0, 4205.25], [1440.0, 3871.0], [1444.0, 4204.0], [1460.0, 4498.0], [1456.0, 4468.0], [1408.0, 4588.0], [1412.0, 3946.0], [1420.0, 4741.0], [1436.0, 4863.0], [1432.0, 4583.5], [1448.0, 4916.0], [1528.0, 3846.5], [1508.0, 4636.0], [1504.0, 3592.0], [1516.0, 4145.0], [1532.0, 3398.0], [1520.0, 4487.0], [1480.0, 4352.0], [1484.0, 4029.0], [1500.0, 3521.0], [1496.0, 4523.0], [1492.0, 4680.0], [1488.0, 3924.0], [1588.0, 3618.0], [1596.0, 3990.0], [1576.0, 4339.0], [1568.0, 3696.0], [1572.0, 4322.0], [1580.0, 3632.0], [1536.0, 3397.0], [1544.0, 3670.0], [1548.0, 4492.0], [1564.0, 4357.0], [1556.0, 3306.0], [1552.0, 4461.0], [1660.0, 4162.0], [1632.0, 4160.0], [1636.0, 4271.0], [1640.0, 3975.0], [1656.0, 4259.0], [1652.0, 3183.0], [1600.0, 4372.0], [1604.0, 3257.0], [1608.0, 3225.0], [1624.0, 4201.0], [1620.0, 3778.75], [1616.0, 3346.0], [1712.0, 3589.0], [1720.0, 3887.3333333333335], [1724.0, 3562.0], [1696.0, 4004.0], [1704.0, 4011.0], [1708.0, 4009.0], [1676.0, 3705.0], [1672.0, 3771.0], [1664.0, 4043.0], [1692.0, 3044.0], [1684.0, 3480.0], [1780.0, 3881.0], [1760.0, 3244.0], [1764.0, 2809.0], [1768.0, 3659.0], [1732.0, 3942.0], [1736.0, 2910.0], [1740.0, 2971.5], [1756.0, 3239.5], [1752.0, 2850.0], [1748.0, 2953.0], [1744.0, 3394.5], [1848.0, 2577.0], [1852.0, 2595.0], [1824.0, 3439.0], [1828.0, 2661.0], [1832.0, 3784.0], [1840.0, 3329.4], [1804.0, 3156.0], [1792.0, 3722.0], [1820.0, 3537.0], [1816.0, 3571.0], [1812.0, 2713.0], [1808.0, 2702.0], [1908.0, 2719.0], [1912.0, 3541.0], [1888.0, 3584.0], [1892.0, 3622.0], [1896.0, 3299.0], [1904.0, 3349.0], [1860.0, 2983.0], [1868.0, 3407.0], [1884.0, 2800.0], [1880.0, 2908.0], [1876.0, 2979.0], [1980.0, 3173.0], [1952.0, 2387.0], [1956.0, 2339.0], [1964.0, 3258.3333333333335], [1976.0, 2308.0], [1972.0, 2434.0], [1968.0, 2964.3333333333335], [1920.0, 3584.0], [1924.0, 2987.0], [1928.0, 3302.0], [1932.0, 2464.0], [1948.0, 2432.75], [1944.0, 2473.0], [2036.0, 3033.5], [2040.0, 3225.0], [2016.0, 2236.0], [2020.0, 3087.0], [2024.0, 3092.0], [2028.0, 3062.0], [2032.0, 2770.25], [1996.0, 2306.0], [1992.0, 2369.0], [1988.0, 3373.0], [1984.0, 3180.0], [2008.0, 3108.0], [2004.0, 3311.0], [2000.0, 2256.0], [2160.0, 2694.0], [2112.0, 2180.0], [2128.0, 3050.0], [2168.0, 2294.0], [2152.0, 2332.0], [2144.0, 2963.0], [2072.0, 3283.0], [2064.0, 2775.0], [2056.0, 3251.0], [2048.0, 2128.0], [2104.0, 3094.0], [2096.0, 2036.0], [2088.0, 3189.0], [2080.0, 3159.0], [2288.0, 1604.0], [2248.0, 2466.0], [2256.0, 1832.5], [2264.0, 1673.0], [2272.0, 2397.0], [2200.0, 2157.0], [2184.0, 2723.0], [2176.0, 2271.0], [2232.0, 2894.0], [2224.0, 2193.0], [2216.0, 2940.0], [2208.0, 2924.0], [2424.0, 1528.0], [2368.0, 1743.5], [2376.0, 2068.0], [2384.0, 1301.0], [2392.0, 2290.0], [2416.0, 1229.0], [2408.0, 2228.0], [2312.0, 1835.5], [2328.0, 1787.5], [2360.0, 1869.0], [2352.0, 1415.0], [2344.0, 1425.0], [2336.0, 2462.0], [2440.0, 1087.0], [2496.0, 542.0], [2432.0, 1925.0], [2448.0, 1429.0], [2456.0, 1375.0], [2488.0, 1890.0], [2480.0, 1846.0], [2464.0, 1971.0], [2153.0, 3059.0], [2129.0, 2837.0], [2169.0, 1963.0], [2161.0, 2720.0], [2145.0, 2298.0], [2073.0, 3154.0], [2065.0, 3282.0], [2057.0, 3200.0], [2097.0, 3219.0], [2089.0, 2040.0], [2297.0, 2469.5], [2241.0, 1798.5], [2249.0, 2714.0], [2257.0, 1688.0], [2265.0, 1672.0], [2289.0, 2305.0], [2281.0, 2681.5], [2201.0, 2933.0], [2193.0, 2804.5], [2233.0, 1767.0], [2217.0, 2570.0], [2209.0, 2939.0], [2417.0, 2223.0], [2377.0, 2068.0], [2385.0, 2052.0], [2425.0, 2253.0], [2409.0, 1711.5], [2401.0, 1437.5], [2305.0, 1939.0], [2329.0, 1443.0], [2361.0, 1408.0], [2345.0, 2231.0], [2337.0, 1474.0], [2433.0, 1501.0], [2441.0, 1984.0], [2449.0, 2150.0], [2489.0, 1829.0], [2473.0, 1539.0], [2465.0, 1051.0], [1077.0, 5430.0], [1061.0, 5035.0], [1065.0, 5044.0], [1081.0, 5282.0], [1073.0, 5062.0], [1029.0, 5257.0], [1025.0, 5912.0], [1049.0, 5389.0], [1045.0, 5055.0], [1041.0, 5903.0], [1069.0, 5073.0], [1101.0, 5707.0], [1141.0, 4809.0], [1149.0, 5200.0], [1137.0, 5213.0], [1121.0, 5263.0], [1089.0, 4769.0], [1093.0, 5569.0], [1097.0, 5247.0], [1117.0, 5284.0], [1113.0, 5236.0], [1109.0, 5729.0], [1105.0, 4892.0], [1205.0, 5539.0], [1213.0, 5501.0], [1185.0, 5656.0], [1189.0, 5579.0], [1165.0, 4785.0], [1161.0, 5248.5], [1157.0, 4781.0], [1153.0, 5623.0], [1181.0, 5436.0], [1177.0, 5246.0], [1173.0, 5193.5], [1169.0, 5050.25], [1197.0, 5351.0], [1193.0, 4682.0], [1265.0, 5401.0], [1273.0, 4892.0], [1249.0, 5404.0], [1253.0, 5439.0], [1269.0, 5190.0], [1221.0, 5395.0], [1229.0, 5285.0], [1245.0, 4565.0], [1241.0, 5081.0], [1237.0, 5545.0], [1233.0, 5482.0], [1261.0, 4402.0], [1257.0, 4926.0], [1333.0, 4186.0], [1337.0, 4740.5], [1341.0, 4845.0], [1313.0, 4911.0], [1317.0, 5076.5], [1329.0, 5186.0], [1293.0, 5312.0], [1289.0, 4410.0], [1281.0, 4443.0], [1309.0, 4714.0], [1305.0, 4222.0], [1301.0, 4371.0], [1297.0, 4631.0], [1325.0, 5240.0], [1401.0, 5039.0], [1405.0, 4385.0], [1345.0, 4867.666666666667], [1349.0, 4605.5], [1373.0, 4051.0], [1365.0, 4813.0], [1361.0, 4926.5], [1381.0, 4755.0], [1413.0, 5063.0], [1461.0, 4688.0], [1441.0, 4659.0], [1417.0, 4612.0], [1409.0, 4753.0], [1437.0, 4571.0], [1429.0, 4612.0], [1425.0, 4456.0], [1453.0, 4077.0], [1449.0, 4625.0], [1445.0, 4759.0], [1525.0, 4360.0], [1529.0, 3493.0], [1505.0, 4491.0], [1509.0, 4530.0], [1513.0, 4444.0], [1517.0, 3861.0], [1521.0, 4161.0], [1485.0, 3650.0], [1481.0, 3996.0], [1477.0, 3816.0], [1473.0, 4295.0], [1501.0, 4303.0], [1497.0, 4583.0], [1493.0, 3563.0], [1489.0, 3592.0], [1593.0, 3846.0], [1597.0, 3947.0], [1569.0, 4076.0], [1573.0, 4269.0], [1577.0, 4325.0], [1581.0, 4251.0], [1589.0, 4237.0], [1537.0, 3451.0], [1541.0, 4207.666666666667], [1545.0, 4115.0], [1549.0, 4362.0], [1565.0, 3299.0], [1561.0, 3863.0], [1553.0, 4452.0], [1653.0, 4275.0], [1633.0, 3152.0], [1641.0, 4179.0], [1657.0, 3812.0], [1649.0, 3602.0], [1601.0, 3667.0], [1609.0, 3197.0], [1613.0, 3235.0], [1629.0, 3545.5], [1625.0, 4309.0], [1721.0, 3899.0], [1697.0, 2983.0], [1709.0, 3613.0], [1725.0, 3677.0], [1717.0, 3765.0], [1713.0, 3326.0], [1677.0, 3709.0], [1673.0, 4095.0], [1669.0, 3667.5], [1665.0, 4200.0], [1693.0, 3800.0], [1689.0, 3833.0], [1685.0, 3188.0], [1785.0, 3053.5], [1761.0, 2784.0], [1769.0, 3658.0], [1789.0, 3136.25], [1777.0, 3334.2], [1737.0, 2883.0], [1741.0, 4020.0], [1757.0, 3996.0], [1753.0, 3874.0], [1749.0, 2836.0], [1745.0, 2926.0], [1849.0, 2603.0], [1841.0, 3712.0], [1829.0, 3102.0], [1833.0, 2641.0], [1853.0, 3631.0], [1845.0, 3709.5], [1805.0, 3722.0], [1801.0, 3146.0], [1797.0, 2964.0], [1793.0, 3607.0], [1821.0, 3730.0], [1817.0, 3764.0], [1813.0, 3645.0], [1809.0, 3150.0], [1917.0, 2911.5], [1889.0, 3575.0], [1897.0, 2504.0], [1901.0, 2503.5], [1913.0, 2863.0], [1909.0, 2507.0], [1905.0, 3670.0], [1857.0, 3006.0], [1861.0, 3755.0], [1869.0, 3731.0], [1881.0, 2533.0], [1877.0, 3715.0], [1873.0, 3074.5], [1973.0, 3508.0], [1953.0, 2479.0], [1957.0, 3210.0], [1961.0, 3205.0], [1965.0, 3506.0], [1969.0, 3395.0], [1925.0, 2471.0], [1929.0, 3263.0], [1933.0, 3293.0], [1949.0, 2486.0], [1941.0, 2728.333333333333], [2045.0, 3115.0], [2021.0, 3342.0], [2017.0, 3295.0], [2025.0, 2243.0], [2041.0, 3324.0], [2033.0, 2279.0], [1993.0, 3422.0], [1989.0, 3152.0], [2013.0, 2267.5], [2009.0, 2357.0], [2005.0, 3123.0], [2162.0, 1847.0], [2154.0, 1880.0], [2114.0, 3143.0], [2122.0, 2914.3333333333335], [2130.0, 3172.0], [2170.0, 2248.0], [2074.0, 3170.0], [2066.0, 2082.0], [2058.0, 3224.0], [2050.0, 2659.0], [2106.0, 3110.0], [2098.0, 2859.0], [2090.0, 3135.0], [2082.0, 3171.5], [2194.0, 2631.0], [2274.0, 2177.0], [2202.0, 1897.0], [2242.0, 2115.0], [2266.0, 1670.0], [2290.0, 1584.0], [2186.0, 2597.5], [2178.0, 2674.5], [2234.0, 2886.0], [2226.0, 2444.0], [2218.0, 2828.0], [2418.0, 1961.0], [2378.0, 2080.0], [2386.0, 2287.0], [2394.0, 2294.0], [2426.0, 1180.0], [2402.0, 2314.0], [2314.0, 1555.0], [2330.0, 1803.0], [2362.0, 1360.0], [2346.0, 1447.0], [2338.0, 1787.0], [2434.0, 1149.0], [2442.0, 1121.0], [2490.0, 1140.0], [2450.0, 1813.0], [2458.0, 1396.5], [2482.0, 961.5], [2474.0, 1729.0], [2466.0, 1375.0], [2155.0, 2963.0], [2163.0, 1932.0], [2171.0, 2292.0], [2115.0, 2018.0], [2131.0, 1964.0], [2139.0, 2313.0], [2067.0, 2963.0], [2059.0, 3212.0], [2051.0, 2116.0], [2107.0, 3128.0], [2099.0, 3215.0], [2091.0, 2158.0], [2083.0, 3244.0], [2283.0, 2123.5], [2291.0, 1591.0], [2299.0, 2274.5], [2243.0, 2071.0], [2259.0, 2378.0], [2267.0, 1663.0], [2275.0, 2463.0], [2203.0, 2596.0], [2187.0, 2249.0], [2179.0, 2262.0], [2235.0, 2541.0], [2227.0, 2753.0], [2211.0, 2687.5], [2411.0, 1742.5], [2427.0, 1503.0], [2371.0, 1796.0], [2387.0, 2328.0], [2403.0, 2029.0], [2315.0, 1532.0], [2323.0, 2022.5], [2363.0, 2106.0], [2355.0, 2153.6666666666665], [2347.0, 1734.0], [2339.0, 2175.0], [2443.0, 1856.0], [2435.0, 1883.0], [2451.0, 2003.0], [2491.0, 1883.0], [2483.0, 1962.0], [2475.0, 1335.0], [2467.0, 2087.0], [515.0, 5608.5], [527.0, 6062.0], [519.0, 6433.5], [517.0, 5367.0], [523.0, 5868.0], [521.0, 6188.5], [535.0, 5809.0], [533.0, 6514.0], [531.0, 5768.0], [551.0, 5608.0], [575.0, 5839.0], [561.0, 5339.0], [569.0, 5924.0], [545.0, 5954.0], [559.0, 5430.0], [557.0, 5833.0], [555.0, 6025.0], [567.0, 6165.0], [565.0, 5873.0], [605.0, 5359.0], [607.0, 5772.0], [593.0, 5983.0], [595.0, 5781.0], [603.0, 5821.0], [601.0, 5403.0], [591.0, 6458.0], [577.0, 6379.0], [583.0, 5944.0], [581.0, 6010.0], [589.0, 6368.0], [587.0, 6109.0], [585.0, 6226.5], [597.0, 6090.0], [615.0, 5786.0], [637.0, 5648.5], [625.0, 5327.0], [635.0, 5276.0], [613.0, 5778.0], [611.0, 5813.0], [609.0, 5737.0], [623.0, 5738.0], [621.0, 5992.0], [619.0, 5689.0], [617.0, 5866.5], [627.0, 6277.0], [667.0, 6236.0], [671.0, 5511.0], [657.0, 6420.0], [669.0, 6247.0], [655.0, 5941.0], [643.0, 6443.0], [647.0, 6404.0], [651.0, 5772.0], [663.0, 5714.0], [661.0, 5867.0], [699.0, 5724.0], [703.0, 6213.0], [687.0, 6272.0], [673.0, 5994.5], [675.0, 5257.0], [683.0, 5999.333333333333], [681.0, 5560.5], [695.0, 6237.0], [693.0, 5825.0], [691.0, 5810.0], [707.0, 6351.0], [721.0, 5627.0], [731.0, 5675.0], [729.0, 5481.0], [705.0, 5524.0], [711.0, 5821.0], [717.0, 6080.5], [715.0, 5833.0], [713.0, 5670.0], [727.0, 5919.0], [725.0, 5589.0], [723.0, 5893.0], [743.0, 6059.0], [753.0, 5754.0], [767.0, 5857.333333333333], [763.0, 5919.333333333333], [739.0, 5965.5], [737.0, 5503.0], [757.0, 5202.0], [751.0, 5447.0], [749.0, 5451.0], [747.0, 5681.0], [745.0, 6328.0], [793.0, 5656.0], [797.0, 5617.0], [785.0, 5598.25], [795.0, 5542.0], [773.0, 6223.0], [771.0, 5790.75], [781.0, 5949.0], [779.0, 5684.75], [789.0, 5724.0], [827.0, 6192.0], [829.0, 5693.666666666667], [807.0, 5721.0], [801.0, 5628.666666666667], [821.0, 5358.0], [819.0, 5679.8], [815.0, 5553.0], [811.0, 5721.0], [809.0, 5532.0], [857.0, 5420.5], [861.0, 5643.0], [849.0, 5618.333333333333], [859.0, 5711.0], [839.0, 5679.0], [833.0, 5397.333333333333], [843.0, 6068.0], [841.0, 5446.0], [855.0, 5443.0], [853.0, 5421.0], [889.0, 5622.0], [895.0, 5347.0], [881.0, 5657.0], [893.0, 5451.0], [879.0, 5388.0], [865.0, 5815.0], [867.0, 5398.0], [869.0, 5399.0], [875.0, 5666.0], [873.0, 5670.0], [885.0, 5632.0], [883.0, 5778.0], [901.0, 5370.0], [921.0, 5275.0], [913.0, 5331.0], [923.0, 5452.5], [899.0, 5374.0], [897.0, 5610.0], [911.0, 5346.0], [907.0, 5327.0], [905.0, 5329.0], [919.0, 5353.333333333333], [915.0, 5328.0], [935.0, 5496.0], [953.0, 5591.0], [947.0, 5237.0], [957.0, 5296.0], [931.0, 5503.0], [929.0, 5608.0], [943.0, 5511.0], [941.0, 5464.0], [939.0, 5588.0], [937.0, 5684.0], [949.0, 5234.0], [985.0, 5175.0], [989.0, 5939.0], [991.0, 5463.0], [977.0, 5296.333333333333], [987.0, 5165.0], [961.0, 5648.0], [965.0, 5201.5], [963.0, 5552.0], [967.0, 5514.0], [973.0, 5344.5], [971.0, 5404.0], [983.0, 5611.0], [981.0, 5499.0], [979.0, 5169.0], [1017.0, 5148.0], [1023.0, 5352.0], [1009.0, 5137.0], [1019.0, 5148.0], [1007.0, 5810.333333333333], [995.0, 5970.5], [993.0, 5882.0], [997.0, 5150.0], [999.0, 5461.0], [1003.0, 5913.5], [1001.0, 5447.0], [1013.0, 5388.0], [1011.0, 5126.0], [1082.0, 4968.0], [1086.0, 5643.0], [1054.0, 5382.5], [1038.0, 5438.6], [1030.0, 5831.0], [1046.0, 5517.0], [1042.0, 5469.5], [1070.0, 5302.0], [1066.0, 5073.0], [1142.0, 4805.0], [1138.0, 5675.0], [1150.0, 4993.0], [1122.0, 5798.0], [1146.0, 5291.0], [1102.0, 4920.0], [1098.0, 4933.0], [1094.0, 4937.0], [1090.0, 5852.0], [1114.0, 5696.0], [1110.0, 5013.0], [1106.0, 5728.0], [1130.0, 5018.0], [1202.0, 5003.0], [1210.0, 5108.0], [1214.0, 4793.5], [1186.0, 5573.0], [1190.0, 5661.0], [1206.0, 5434.0], [1162.0, 5598.0], [1158.0, 5735.0], [1154.0, 4792.0], [1182.0, 5045.0], [1178.0, 5396.0], [1174.0, 5608.0], [1170.0, 5521.0], [1198.0, 5620.0], [1270.0, 4482.0], [1278.0, 4830.8], [1250.0, 5535.0], [1254.0, 4530.0], [1266.0, 5413.0], [1246.0, 4565.0], [1218.0, 4554.0], [1226.0, 4816.0], [1222.0, 5559.0], [1230.0, 4608.0], [1242.0, 5551.0], [1238.0, 5475.0], [1234.0, 5563.0], [1262.0, 4511.0], [1258.0, 4524.0], [1334.0, 4600.0], [1330.0, 4865.0], [1342.0, 4722.0], [1314.0, 5212.0], [1338.0, 4847.0], [1310.0, 5256.0], [1282.0, 5305.0], [1286.0, 4423.5], [1290.0, 5399.0], [1294.0, 4795.0], [1302.0, 5365.0], [1298.0, 4746.0], [1326.0, 4902.0], [1322.0, 4632.5], [1402.0, 3990.0], [1406.0, 4327.0], [1398.0, 3958.0], [1394.0, 4502.125], [1374.0, 5074.0], [1362.0, 4078.0], [1378.0, 4155.5], [1470.0, 4314.0], [1442.0, 4919.0], [1462.0, 3694.0], [1438.0, 3881.0], [1418.0, 4760.0], [1422.0, 4262.5], [1430.0, 4382.0], [1426.0, 5048.0], [1454.0, 4881.0], [1450.0, 4344.0], [1446.0, 4647.0], [1534.0, 4026.0], [1510.0, 3920.0], [1514.0, 4506.0], [1518.0, 4157.0], [1526.0, 4418.0], [1502.0, 3979.0], [1474.0, 3580.0], [1482.0, 4503.0], [1486.0, 3608.0], [1498.0, 4523.0], [1494.0, 3984.0], [1490.0, 4600.0], [1598.0, 4266.0], [1570.0, 4406.0], [1574.0, 4339.0], [1578.0, 4423.0], [1582.0, 3658.0], [1590.0, 3286.0], [1586.0, 3767.3333333333335], [1538.0, 4236.0], [1542.0, 4449.0], [1546.0, 4317.0], [1550.0, 4469.0], [1566.0, 4335.0], [1562.0, 3341.0], [1558.0, 3988.5], [1658.0, 3779.0], [1634.0, 3854.0], [1638.0, 3243.5], [1646.0, 3566.0], [1662.0, 3342.5], [1654.0, 3543.0], [1650.0, 3165.0], [1602.0, 4205.0], [1606.0, 3246.0], [1614.0, 3242.0], [1630.0, 3919.0], [1622.0, 3748.0], [1722.0, 3964.0], [1698.0, 4115.0], [1710.0, 3903.0], [1726.0, 3613.0], [1714.0, 3367.0], [1678.0, 3497.0], [1674.0, 4184.0], [1670.0, 3139.0], [1690.0, 3108.0], [1686.0, 4167.0], [1682.0, 3630.75], [1790.0, 3829.0], [1766.0, 2881.0], [1730.0, 2899.0], [1738.0, 2975.0], [1742.0, 2929.0], [1754.0, 3458.0], [1746.0, 3929.0], [1770.0, 2804.0], [1842.0, 2655.0], [1826.0, 3042.5], [1834.0, 2727.0], [1854.0, 2670.0], [1802.0, 3509.0], [1798.0, 3167.0], [1794.0, 2746.0], [1822.0, 3111.0], [1818.0, 2686.0], [1814.0, 3827.0], [1810.0, 3831.0], [1918.0, 3558.0], [1890.0, 3583.0], [1894.0, 2741.0], [1898.0, 3606.0], [1902.0, 2522.0], [1914.0, 2480.0], [1910.0, 3299.0], [1906.0, 2513.0], [1858.0, 2612.0], [1866.0, 3485.0], [1870.0, 3514.0], [1886.0, 2966.0], [1878.0, 2552.0], [1978.0, 3440.0], [1974.0, 3389.0], [1954.0, 3154.0], [1958.0, 2511.0], [1982.0, 3345.5], [1970.0, 2366.0], [1922.0, 3099.5], [1926.0, 2890.0], [1930.0, 3302.0], [1934.0, 3463.0], [1950.0, 3227.0], [1938.0, 3557.0], [2042.0, 3222.0], [2022.0, 3039.0], [2026.0, 2663.0], [2046.0, 3271.0], [2038.0, 3143.0], [2034.0, 3215.0], [1998.0, 2335.0], [1994.0, 2292.0], [1986.0, 2899.5], [2014.0, 3108.0], [2010.0, 3334.0], [2006.0, 3329.0], [2002.0, 2859.0], [2164.0, 3049.0], [2156.0, 1867.0], [2116.0, 3193.0], [2124.0, 1989.5], [2132.0, 2050.0], [2172.0, 2671.0], [2148.0, 2998.6666666666665], [2076.0, 3218.0], [2068.0, 3261.0], [2060.0, 2215.0], [2052.0, 2118.0], [2108.0, 2877.0], [2100.0, 2028.0], [2092.0, 3248.0], [2292.0, 2662.0], [2284.0, 2346.0], [2252.0, 2179.6666666666665], [2244.0, 1745.0], [2268.0, 1662.0], [2300.0, 2316.0], [2276.0, 2350.0], [2196.0, 2499.5], [2180.0, 2656.0], [2236.0, 2130.0], [2220.0, 2738.5], [2212.0, 2615.0], [2404.0, 2230.0], [2428.0, 1487.0], [2380.0, 1946.5], [2372.0, 1345.0], [2388.0, 1297.0], [2396.0, 1817.5], [2308.0, 1568.0], [2316.0, 1854.0], [2324.0, 2220.0], [2332.0, 2327.5], [2364.0, 1685.0], [2348.0, 1437.0], [2340.0, 2498.0], [2444.0, 2181.0], [2500.0, 994.25], [2436.0, 1141.0], [2452.0, 1414.0], [2460.0, 2093.5], [2492.0, 1754.0], [2476.0, 1708.0], [2468.0, 1040.0], [2149.0, 3076.0], [2165.0, 2412.0], [2117.0, 2830.0], [2125.0, 2106.0], [2173.0, 2241.0], [2157.0, 2730.0], [2069.0, 2901.0], [2061.0, 3293.0], [2053.0, 2234.0], [2085.0, 3216.0], [2293.0, 2501.0], [2245.0, 2112.0], [2261.0, 1672.0], [2269.0, 2394.0], [2301.0, 1571.0], [2285.0, 1599.0], [2277.0, 1640.0], [2205.0, 2793.5], [2197.0, 2617.0], [2189.0, 2413.0], [2237.0, 2871.0], [2229.0, 2191.5], [2213.0, 2903.0], [2421.0, 1989.0], [2413.0, 1594.5], [2373.0, 2359.0], [2381.0, 1320.0], [2429.0, 2237.0], [2309.0, 1991.0], [2317.0, 1542.0], [2325.0, 2573.0], [2365.0, 2387.0], [2357.0, 1418.5], [2349.0, 2379.0], [2341.0, 1622.5], [2437.0, 1457.0], [2453.0, 1409.0], [2461.0, 1062.0], [2493.0, 1162.0], [2485.0, 1453.0], [2469.0, 2032.0], [1083.0, 4964.0], [1075.0, 5411.5], [1087.0, 4962.0], [1059.0, 5627.0], [1063.0, 5050.0], [1067.0, 5024.0], [1079.0, 5562.0], [1039.0, 5124.0], [1035.0, 5406.0], [1031.0, 5409.0], [1027.0, 5452.0], [1055.0, 5754.0], [1047.0, 5335.0], [1071.0, 5303.0], [1091.0, 5558.0], [1139.0, 5583.0], [1127.0, 5168.0], [1123.0, 4862.0], [1119.0, 4877.0], [1095.0, 4941.0], [1103.0, 5232.0], [1115.0, 5238.0], [1111.0, 5739.0], [1107.0, 5729.0], [1211.0, 5572.0], [1191.0, 5650.0], [1215.0, 4622.0], [1187.0, 5037.0], [1207.0, 4504.0], [1163.0, 4805.0], [1159.0, 5094.0], [1183.0, 5094.0], [1175.0, 5055.0], [1171.0, 5450.0], [1195.0, 4679.0], [1267.0, 4494.0], [1279.0, 5358.0], [1251.0, 4778.0], [1271.0, 5330.0], [1247.0, 5507.0], [1219.0, 4617.0], [1227.0, 5476.0], [1223.0, 5463.0], [1231.0, 4595.0], [1243.0, 4568.0], [1239.0, 4579.0], [1235.0, 4589.0], [1263.0, 4510.0], [1259.0, 4521.0], [1295.0, 5251.0], [1319.0, 4741.0], [1315.0, 4203.0], [1335.0, 4925.0], [1287.0, 4414.0], [1283.0, 4431.0], [1311.0, 5095.0], [1307.0, 5059.5], [1303.0, 4360.0], [1299.0, 4377.0], [1327.0, 5029.0], [1323.0, 4222.0], [1395.0, 5062.0], [1407.0, 4587.0], [1403.0, 3953.0], [1399.0, 4923.0], [1375.0, 5065.0], [1347.0, 4672.5], [1359.0, 4587.571428571428], [1351.0, 4947.0], [1371.0, 4754.0], [1367.0, 4800.0], [1363.0, 4074.0], [1387.0, 4042.5], [1379.0, 4365.0], [1419.0, 4448.0], [1447.0, 3840.0], [1471.0, 4579.0], [1459.0, 4220.0], [1415.0, 4203.5], [1411.0, 4614.0], [1439.0, 4270.0], [1435.0, 4249.666666666667], [1427.0, 3897.0], [1455.0, 3881.0], [1443.0, 4389.0], [1523.0, 3743.0], [1507.0, 4002.0], [1531.0, 4467.0], [1535.0, 3437.0], [1515.0, 4433.0], [1519.0, 3481.0], [1487.0, 4309.0], [1483.0, 4350.0], [1475.0, 4606.0], [1503.0, 4646.0], [1499.0, 4246.0], [1495.0, 3520.0], [1491.0, 4701.0], [1595.0, 4040.0], [1599.0, 3586.0], [1571.0, 3270.0], [1575.0, 4424.0], [1579.0, 4395.0], [1583.0, 3276.0], [1591.0, 3329.0], [1587.0, 4407.0], [1567.0, 3344.0], [1547.0, 3403.0], [1551.0, 3981.0], [1563.0, 3993.0], [1559.0, 4345.0], [1555.0, 4181.0], [1655.0, 3248.0], [1659.0, 3108.0], [1663.0, 4189.0], [1635.0, 3195.0], [1643.0, 3278.0], [1647.0, 3182.5], [1651.0, 4242.0], [1631.0, 3965.0], [1603.0, 4336.0], [1607.0, 3287.0], [1611.0, 4354.0], [1615.0, 3705.0], [1627.0, 4039.5], [1623.0, 3631.0], [1715.0, 3360.0], [1727.0, 3941.0], [1703.0, 3728.6], [1707.0, 3506.0], [1723.0, 3565.0], [1675.0, 3795.0], [1671.0, 3053.0], [1667.0, 3499.5], [1695.0, 3907.0], [1691.0, 4000.0], [1687.0, 4145.0], [1683.0, 4029.0], [1779.0, 3142.0], [1791.0, 3551.0], [1763.0, 3822.0], [1767.0, 3061.0], [1783.0, 3728.0], [1759.0, 3427.0], [1731.0, 3616.0], [1735.0, 3709.3333333333335], [1751.0, 3851.5], [1747.0, 3928.0], [1771.0, 2947.0], [1847.0, 3026.5], [1855.0, 2578.0], [1827.0, 2668.0], [1831.0, 3609.5], [1835.0, 3406.0], [1851.0, 3162.0], [1843.0, 2976.0], [1807.0, 2923.0], [1803.0, 3159.0], [1799.0, 3380.0], [1795.0, 2825.0], [1823.0, 2679.0], [1819.0, 3857.0], [1811.0, 3565.0], [1919.0, 2900.0], [1915.0, 3288.0], [1891.0, 2952.0], [1895.0, 3384.0], [1899.0, 2939.0], [1903.0, 3301.0], [1911.0, 3338.0], [1887.0, 2539.0], [1863.0, 3107.0], [1867.0, 3717.0], [1871.0, 2647.0], [1879.0, 3626.0], [1875.0, 2596.0], [1971.0, 3496.0], [1975.0, 3505.0], [1979.0, 3184.0], [1983.0, 2302.0], [1955.0, 3462.0], [1959.0, 2346.0], [1951.0, 2386.0], [1927.0, 3560.0], [1931.0, 2537.0], [1943.0, 2776.0], [2043.0, 2175.0], [2039.0, 2123.0], [2047.0, 2146.0], [2019.0, 2718.0], [2023.0, 2294.0], [2027.0, 3080.0], [1999.0, 3140.0], [1995.0, 2278.0], [1991.0, 2827.0], [1987.0, 3434.0], [2015.0, 3109.0], [2011.0, 3309.0], [2007.0, 3062.0], [2003.0, 3340.0], [2158.0, 3059.0], [2118.0, 2829.0], [2126.0, 2106.0], [2134.0, 2390.0], [2142.0, 2545.0], [2150.0, 1877.0], [2078.0, 2508.0], [2054.0, 2929.0], [2110.0, 2013.0], [2102.0, 3117.0], [2094.0, 3219.0], [2086.0, 3149.0], [2286.0, 2671.0], [2254.0, 2403.0], [2262.0, 2037.5], [2270.0, 1659.0], [2278.0, 1960.0], [2206.0, 1891.0], [2198.0, 2890.0], [2190.0, 2245.0], [2238.0, 2716.0], [2230.0, 1836.0], [2222.0, 2536.0], [2406.0, 2231.0], [2422.0, 1189.0], [2374.0, 2337.0], [2382.0, 1309.0], [2390.0, 1613.0], [2398.0, 1453.5], [2366.0, 2374.0], [2310.0, 1881.0], [2318.0, 1865.0], [2326.0, 1498.0], [2334.0, 2192.0], [2358.0, 1413.0], [2350.0, 1380.0], [2342.0, 1407.0], [2438.0, 2132.0], [2494.0, 1782.0], [2446.0, 2167.5], [2462.0, 1017.0], [2478.0, 1801.5], [2159.0, 3051.0], [2175.0, 2564.0], [2119.0, 3088.0], [2127.0, 2851.0], [2135.0, 2794.0], [2151.0, 1889.0], [2079.0, 2070.0], [2071.0, 3214.0], [2063.0, 2553.0], [2055.0, 2120.0], [2111.0, 2585.0], [2103.0, 2611.5], [2095.0, 2044.0], [2087.0, 2917.0], [2295.0, 1938.0], [2303.0, 2415.0], [2247.0, 2733.0], [2263.0, 2391.0], [2271.0, 1655.0], [2287.0, 1607.0], [2279.0, 2341.0], [2207.0, 2597.0], [2199.0, 2937.0], [2191.0, 1875.0], [2183.0, 2698.0], [2239.0, 2812.0], [2231.0, 2136.0], [2223.0, 2569.0], [2215.0, 2536.0], [2423.0, 2240.0], [2415.0, 1606.0], [2431.0, 1323.5], [2375.0, 2333.0], [2383.0, 2316.0], [2391.0, 1954.0], [2399.0, 2130.0], [2407.0, 2300.0], [2319.0, 2276.0], [2335.0, 2471.0], [2351.0, 1750.0], [2439.0, 2091.0], [2447.0, 1828.0], [2495.0, 1095.0], [2455.0, 1059.0], [2463.0, 1779.0], [2487.0, 1692.0], [2479.0, 969.0], [1.0, 6016.0]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}, {"data": [[1251.1047999999973, 4518.225600000005]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1338.25, "minX": 1.7556768E12, "maxY": 179320.6, "series": [{"data": [[1.75567686E12, 179320.6], [1.7556768E12, 12179.4]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75567686E12, 19703.416666666668], [1.7556768E12, 1338.25]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567686E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1697.7924528301887, "minX": 1.7556768E12, "maxY": 4709.788551900894, "series": [{"data": [[1.75567686E12, 4709.788551900894], [1.7556768E12, 1697.7924528301887]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567686E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1697.4276729559747, "minX": 1.7556768E12, "maxY": 4709.770183682182, "series": [{"data": [[1.75567686E12, 4709.770183682182], [1.7556768E12, 1697.4276729559747]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567686E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1679.0880503144656, "minX": 1.7556768E12, "maxY": 4356.822725331057, "series": [{"data": [[1.75567686E12, 4356.822725331057], [1.7556768E12, 1679.0880503144656]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567686E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 542.0, "minX": 1.7556768E12, "maxY": 7058.0, "series": [{"data": [[1.75567686E12, 7058.0], [1.7556768E12, 2387.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75567686E12, 6373.8], [1.7556768E12, 2287.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75567686E12, 6967.58], [1.7556768E12, 2382.2]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75567686E12, 6692.400000000001], [1.7556768E12, 2328.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75567686E12, 1443.0], [1.7556768E12, 542.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75567686E12, 5126.0], [1.7556768E12, 1708.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567686E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1708.0, "minX": 159.0, "maxY": 6217.5, "series": [{"data": [[548.0, 6217.5], [289.0, 4503.0], [159.0, 1708.0], [704.0, 5522.5], [383.0, 2569.0], [417.0, 3472.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 704.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1708.0, "minX": 159.0, "maxY": 6217.5, "series": [{"data": [[548.0, 6217.5], [289.0, 4503.0], [159.0, 1708.0], [704.0, 5522.5], [383.0, 2569.0], [417.0, 3472.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 704.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7556768E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7556768E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556768E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.65, "minX": 1.7556768E12, "maxY": 39.016666666666666, "series": [{"data": [[1.75567686E12, 39.016666666666666], [1.7556768E12, 2.65]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567686E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.65, "minX": 1.7556768E12, "maxY": 39.016666666666666, "series": [{"data": [[1.75567686E12, 39.016666666666666], [1.7556768E12, 2.65]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567686E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.65, "minX": 1.7556768E12, "maxY": 39.016666666666666, "series": [{"data": [[1.75567686E12, 39.016666666666666], [1.7556768E12, 2.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567686E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

