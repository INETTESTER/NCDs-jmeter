/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 900.0, "minX": 0.0, "maxY": 8011.0, "series": [{"data": [[0.0, 900.0], [0.1, 1019.0], [0.2, 1134.0], [0.3, 1192.0], [0.4, 1235.0], [0.5, 1324.0], [0.6, 1355.0], [0.7, 1370.0], [0.8, 1384.0], [0.9, 1407.0], [1.0, 1435.0], [1.1, 1465.0], [1.2, 1498.0], [1.3, 1510.0], [1.4, 1567.0], [1.5, 1576.0], [1.6, 1584.0], [1.7, 1588.0], [1.8, 1594.0], [1.9, 1609.0], [2.0, 1626.0], [2.1, 1653.0], [2.2, 1658.0], [2.3, 1678.0], [2.4, 1691.0], [2.5, 1705.0], [2.6, 1709.0], [2.7, 1720.0], [2.8, 1722.0], [2.9, 1744.0], [3.0, 1767.0], [3.1, 1772.0], [3.2, 1785.0], [3.3, 1796.0], [3.4, 1802.0], [3.5, 1831.0], [3.6, 1842.0], [3.7, 1863.0], [3.8, 1866.0], [3.9, 1888.0], [4.0, 1889.0], [4.1, 1899.0], [4.2, 1918.0], [4.3, 1945.0], [4.4, 1964.0], [4.5, 1973.0], [4.6, 1979.0], [4.7, 1989.0], [4.8, 2002.0], [4.9, 2009.0], [5.0, 2012.0], [5.1, 2024.0], [5.2, 2034.0], [5.3, 2059.0], [5.4, 2059.0], [5.5, 2066.0], [5.6, 2066.0], [5.7, 2069.0], [5.8, 2077.0], [5.9, 2091.0], [6.0, 2094.0], [6.1, 2104.0], [6.2, 2113.0], [6.3, 2129.0], [6.4, 2138.0], [6.5, 2145.0], [6.6, 2150.0], [6.7, 2156.0], [6.8, 2157.0], [6.9, 2165.0], [7.0, 2166.0], [7.1, 2182.0], [7.2, 2186.0], [7.3, 2202.0], [7.4, 2212.0], [7.5, 2221.0], [7.6, 2224.0], [7.7, 2228.0], [7.8, 2242.0], [7.9, 2254.0], [8.0, 2257.0], [8.1, 2266.0], [8.2, 2273.0], [8.3, 2276.0], [8.4, 2286.0], [8.5, 2292.0], [8.6, 2304.0], [8.7, 2312.0], [8.8, 2325.0], [8.9, 2331.0], [9.0, 2338.0], [9.1, 2342.0], [9.2, 2353.0], [9.3, 2356.0], [9.4, 2364.0], [9.5, 2370.0], [9.6, 2377.0], [9.7, 2381.0], [9.8, 2395.0], [9.9, 2398.0], [10.0, 2403.0], [10.1, 2405.0], [10.2, 2416.0], [10.3, 2420.0], [10.4, 2430.0], [10.5, 2436.0], [10.6, 2442.0], [10.7, 2451.0], [10.8, 2460.0], [10.9, 2477.0], [11.0, 2486.0], [11.1, 2490.0], [11.2, 2498.0], [11.3, 2507.0], [11.4, 2511.0], [11.5, 2517.0], [11.6, 2522.0], [11.7, 2524.0], [11.8, 2527.0], [11.9, 2528.0], [12.0, 2539.0], [12.1, 2544.0], [12.2, 2558.0], [12.3, 2565.0], [12.4, 2575.0], [12.5, 2591.0], [12.6, 2607.0], [12.7, 2620.0], [12.8, 2625.0], [12.9, 2630.0], [13.0, 2634.0], [13.1, 2634.0], [13.2, 2638.0], [13.3, 2645.0], [13.4, 2651.0], [13.5, 2667.0], [13.6, 2677.0], [13.7, 2694.0], [13.8, 2697.0], [13.9, 2707.0], [14.0, 2712.0], [14.1, 2715.0], [14.2, 2722.0], [14.3, 2724.0], [14.4, 2731.0], [14.5, 2731.0], [14.6, 2747.0], [14.7, 2751.0], [14.8, 2756.0], [14.9, 2768.0], [15.0, 2772.0], [15.1, 2772.0], [15.2, 2792.0], [15.3, 2799.0], [15.4, 2811.0], [15.5, 2817.0], [15.6, 2825.0], [15.7, 2841.0], [15.8, 2849.0], [15.9, 2853.0], [16.0, 2873.0], [16.1, 2886.0], [16.2, 2907.0], [16.3, 2919.0], [16.4, 2927.0], [16.5, 2930.0], [16.6, 2937.0], [16.7, 2938.0], [16.8, 2954.0], [16.9, 2964.0], [17.0, 2969.0], [17.1, 2984.0], [17.2, 2998.0], [17.3, 3000.0], [17.4, 3003.0], [17.5, 3010.0], [17.6, 3016.0], [17.7, 3020.0], [17.8, 3022.0], [17.9, 3030.0], [18.0, 3044.0], [18.1, 3052.0], [18.2, 3072.0], [18.3, 3075.0], [18.4, 3088.0], [18.5, 3100.0], [18.6, 3112.0], [18.7, 3115.0], [18.8, 3119.0], [18.9, 3125.0], [19.0, 3137.0], [19.1, 3143.0], [19.2, 3149.0], [19.3, 3151.0], [19.4, 3159.0], [19.5, 3169.0], [19.6, 3171.0], [19.7, 3171.0], [19.8, 3182.0], [19.9, 3185.0], [20.0, 3190.0], [20.1, 3194.0], [20.2, 3203.0], [20.3, 3210.0], [20.4, 3219.0], [20.5, 3227.0], [20.6, 3235.0], [20.7, 3242.0], [20.8, 3248.0], [20.9, 3250.0], [21.0, 3274.0], [21.1, 3283.0], [21.2, 3294.0], [21.3, 3299.0], [21.4, 3308.0], [21.5, 3316.0], [21.6, 3324.0], [21.7, 3325.0], [21.8, 3330.0], [21.9, 3331.0], [22.0, 3335.0], [22.1, 3339.0], [22.2, 3345.0], [22.3, 3352.0], [22.4, 3378.0], [22.5, 3383.0], [22.6, 3389.0], [22.7, 3392.0], [22.8, 3407.0], [22.9, 3415.0], [23.0, 3420.0], [23.1, 3435.0], [23.2, 3439.0], [23.3, 3442.0], [23.4, 3447.0], [23.5, 3450.0], [23.6, 3468.0], [23.7, 3471.0], [23.8, 3476.0], [23.9, 3478.0], [24.0, 3480.0], [24.1, 3492.0], [24.2, 3498.0], [24.3, 3499.0], [24.4, 3503.0], [24.5, 3509.0], [24.6, 3523.0], [24.7, 3531.0], [24.8, 3535.0], [24.9, 3540.0], [25.0, 3551.0], [25.1, 3553.0], [25.2, 3569.0], [25.3, 3585.0], [25.4, 3602.0], [25.5, 3604.0], [25.6, 3607.0], [25.7, 3609.0], [25.8, 3618.0], [25.9, 3623.0], [26.0, 3628.0], [26.1, 3633.0], [26.2, 3636.0], [26.3, 3648.0], [26.4, 3656.0], [26.5, 3664.0], [26.6, 3675.0], [26.7, 3685.0], [26.8, 3695.0], [26.9, 3723.0], [27.0, 3730.0], [27.1, 3733.0], [27.2, 3745.0], [27.3, 3750.0], [27.4, 3753.0], [27.5, 3755.0], [27.6, 3759.0], [27.7, 3767.0], [27.8, 3777.0], [27.9, 3783.0], [28.0, 3794.0], [28.1, 3796.0], [28.2, 3799.0], [28.3, 3817.0], [28.4, 3820.0], [28.5, 3825.0], [28.6, 3839.0], [28.7, 3844.0], [28.8, 3847.0], [28.9, 3853.0], [29.0, 3859.0], [29.1, 3871.0], [29.2, 3879.0], [29.3, 3885.0], [29.4, 3894.0], [29.5, 3898.0], [29.6, 3909.0], [29.7, 3914.0], [29.8, 3917.0], [29.9, 3923.0], [30.0, 3931.0], [30.1, 3936.0], [30.2, 3942.0], [30.3, 3952.0], [30.4, 3956.0], [30.5, 3965.0], [30.6, 3970.0], [30.7, 3972.0], [30.8, 3980.0], [30.9, 3989.0], [31.0, 4004.0], [31.1, 4011.0], [31.2, 4020.0], [31.3, 4033.0], [31.4, 4040.0], [31.5, 4047.0], [31.6, 4056.0], [31.7, 4060.0], [31.8, 4074.0], [31.9, 4082.0], [32.0, 4087.0], [32.1, 4088.0], [32.2, 4092.0], [32.3, 4101.0], [32.4, 4109.0], [32.5, 4116.0], [32.6, 4130.0], [32.7, 4134.0], [32.8, 4142.0], [32.9, 4142.0], [33.0, 4156.0], [33.1, 4161.0], [33.2, 4168.0], [33.3, 4172.0], [33.4, 4182.0], [33.5, 4183.0], [33.6, 4190.0], [33.7, 4192.0], [33.8, 4202.0], [33.9, 4210.0], [34.0, 4213.0], [34.1, 4218.0], [34.2, 4230.0], [34.3, 4231.0], [34.4, 4242.0], [34.5, 4244.0], [34.6, 4255.0], [34.7, 4259.0], [34.8, 4265.0], [34.9, 4273.0], [35.0, 4278.0], [35.1, 4291.0], [35.2, 4296.0], [35.3, 4298.0], [35.4, 4309.0], [35.5, 4310.0], [35.6, 4320.0], [35.7, 4323.0], [35.8, 4333.0], [35.9, 4339.0], [36.0, 4346.0], [36.1, 4350.0], [36.2, 4363.0], [36.3, 4364.0], [36.4, 4371.0], [36.5, 4380.0], [36.6, 4387.0], [36.7, 4393.0], [36.8, 4415.0], [36.9, 4420.0], [37.0, 4429.0], [37.1, 4438.0], [37.2, 4445.0], [37.3, 4454.0], [37.4, 4463.0], [37.5, 4473.0], [37.6, 4492.0], [37.7, 4503.0], [37.8, 4510.0], [37.9, 4512.0], [38.0, 4515.0], [38.1, 4521.0], [38.2, 4527.0], [38.3, 4535.0], [38.4, 4543.0], [38.5, 4543.0], [38.6, 4551.0], [38.7, 4555.0], [38.8, 4563.0], [38.9, 4583.0], [39.0, 4589.0], [39.1, 4590.0], [39.2, 4596.0], [39.3, 4605.0], [39.4, 4613.0], [39.5, 4625.0], [39.6, 4632.0], [39.7, 4638.0], [39.8, 4645.0], [39.9, 4650.0], [40.0, 4663.0], [40.1, 4667.0], [40.2, 4669.0], [40.3, 4670.0], [40.4, 4683.0], [40.5, 4689.0], [40.6, 4702.0], [40.7, 4705.0], [40.8, 4721.0], [40.9, 4729.0], [41.0, 4731.0], [41.1, 4736.0], [41.2, 4740.0], [41.3, 4746.0], [41.4, 4755.0], [41.5, 4756.0], [41.6, 4761.0], [41.7, 4764.0], [41.8, 4771.0], [41.9, 4780.0], [42.0, 4784.0], [42.1, 4789.0], [42.2, 4803.0], [42.3, 4816.0], [42.4, 4832.0], [42.5, 4837.0], [42.6, 4845.0], [42.7, 4850.0], [42.8, 4866.0], [42.9, 4886.0], [43.0, 4891.0], [43.1, 4893.0], [43.2, 4907.0], [43.3, 4917.0], [43.4, 4935.0], [43.5, 4946.0], [43.6, 4959.0], [43.7, 4964.0], [43.8, 4974.0], [43.9, 4990.0], [44.0, 4999.0], [44.1, 5016.0], [44.2, 5031.0], [44.3, 5038.0], [44.4, 5046.0], [44.5, 5049.0], [44.6, 5054.0], [44.7, 5058.0], [44.8, 5068.0], [44.9, 5070.0], [45.0, 5096.0], [45.1, 5107.0], [45.2, 5121.0], [45.3, 5125.0], [45.4, 5128.0], [45.5, 5132.0], [45.6, 5152.0], [45.7, 5156.0], [45.8, 5169.0], [45.9, 5175.0], [46.0, 5183.0], [46.1, 5198.0], [46.2, 5216.0], [46.3, 5240.0], [46.4, 5252.0], [46.5, 5261.0], [46.6, 5266.0], [46.7, 5269.0], [46.8, 5277.0], [46.9, 5285.0], [47.0, 5295.0], [47.1, 5297.0], [47.2, 5306.0], [47.3, 5317.0], [47.4, 5326.0], [47.5, 5330.0], [47.6, 5338.0], [47.7, 5342.0], [47.8, 5350.0], [47.9, 5366.0], [48.0, 5370.0], [48.1, 5374.0], [48.2, 5379.0], [48.3, 5385.0], [48.4, 5387.0], [48.5, 5389.0], [48.6, 5406.0], [48.7, 5410.0], [48.8, 5417.0], [48.9, 5426.0], [49.0, 5434.0], [49.1, 5440.0], [49.2, 5444.0], [49.3, 5446.0], [49.4, 5449.0], [49.5, 5452.0], [49.6, 5458.0], [49.7, 5460.0], [49.8, 5466.0], [49.9, 5473.0], [50.0, 5476.0], [50.1, 5485.0], [50.2, 5490.0], [50.3, 5493.0], [50.4, 5497.0], [50.5, 5499.0], [50.6, 5501.0], [50.7, 5505.0], [50.8, 5509.0], [50.9, 5511.0], [51.0, 5514.0], [51.1, 5517.0], [51.2, 5521.0], [51.3, 5524.0], [51.4, 5532.0], [51.5, 5536.0], [51.6, 5544.0], [51.7, 5549.0], [51.8, 5551.0], [51.9, 5554.0], [52.0, 5556.0], [52.1, 5557.0], [52.2, 5562.0], [52.3, 5563.0], [52.4, 5566.0], [52.5, 5568.0], [52.6, 5573.0], [52.7, 5575.0], [52.8, 5578.0], [52.9, 5585.0], [53.0, 5589.0], [53.1, 5589.0], [53.2, 5597.0], [53.3, 5599.0], [53.4, 5602.0], [53.5, 5604.0], [53.6, 5608.0], [53.7, 5611.0], [53.8, 5615.0], [53.9, 5616.0], [54.0, 5618.0], [54.1, 5621.0], [54.2, 5626.0], [54.3, 5629.0], [54.4, 5633.0], [54.5, 5634.0], [54.6, 5635.0], [54.7, 5639.0], [54.8, 5641.0], [54.9, 5646.0], [55.0, 5648.0], [55.1, 5654.0], [55.2, 5663.0], [55.3, 5665.0], [55.4, 5672.0], [55.5, 5678.0], [55.6, 5681.0], [55.7, 5681.0], [55.8, 5683.0], [55.9, 5687.0], [56.0, 5690.0], [56.1, 5695.0], [56.2, 5700.0], [56.3, 5704.0], [56.4, 5715.0], [56.5, 5719.0], [56.6, 5723.0], [56.7, 5725.0], [56.8, 5735.0], [56.9, 5735.0], [57.0, 5737.0], [57.1, 5739.0], [57.2, 5745.0], [57.3, 5748.0], [57.4, 5753.0], [57.5, 5755.0], [57.6, 5758.0], [57.7, 5761.0], [57.8, 5764.0], [57.9, 5765.0], [58.0, 5776.0], [58.1, 5785.0], [58.2, 5789.0], [58.3, 5791.0], [58.4, 5797.0], [58.5, 5803.0], [58.6, 5809.0], [58.7, 5811.0], [58.8, 5814.0], [58.9, 5817.0], [59.0, 5820.0], [59.1, 5822.0], [59.2, 5823.0], [59.3, 5825.0], [59.4, 5830.0], [59.5, 5834.0], [59.6, 5834.0], [59.7, 5836.0], [59.8, 5838.0], [59.9, 5845.0], [60.0, 5847.0], [60.1, 5850.0], [60.2, 5856.0], [60.3, 5858.0], [60.4, 5866.0], [60.5, 5868.0], [60.6, 5874.0], [60.7, 5879.0], [60.8, 5885.0], [60.9, 5887.0], [61.0, 5889.0], [61.1, 5893.0], [61.2, 5896.0], [61.3, 5898.0], [61.4, 5905.0], [61.5, 5906.0], [61.6, 5918.0], [61.7, 5930.0], [61.8, 5934.0], [61.9, 5934.0], [62.0, 5946.0], [62.1, 5950.0], [62.2, 5954.0], [62.3, 5956.0], [62.4, 5961.0], [62.5, 5962.0], [62.6, 5971.0], [62.7, 5975.0], [62.8, 5979.0], [62.9, 5984.0], [63.0, 5996.0], [63.1, 6013.0], [63.2, 6019.0], [63.3, 6022.0], [63.4, 6032.0], [63.5, 6033.0], [63.6, 6038.0], [63.7, 6043.0], [63.8, 6056.0], [63.9, 6058.0], [64.0, 6062.0], [64.1, 6066.0], [64.2, 6072.0], [64.3, 6073.0], [64.4, 6079.0], [64.5, 6082.0], [64.6, 6094.0], [64.7, 6101.0], [64.8, 6108.0], [64.9, 6112.0], [65.0, 6120.0], [65.1, 6128.0], [65.2, 6138.0], [65.3, 6140.0], [65.4, 6145.0], [65.5, 6146.0], [65.6, 6157.0], [65.7, 6165.0], [65.8, 6170.0], [65.9, 6177.0], [66.0, 6188.0], [66.1, 6193.0], [66.2, 6200.0], [66.3, 6203.0], [66.4, 6209.0], [66.5, 6212.0], [66.6, 6213.0], [66.7, 6220.0], [66.8, 6222.0], [66.9, 6230.0], [67.0, 6235.0], [67.1, 6238.0], [67.2, 6245.0], [67.3, 6247.0], [67.4, 6251.0], [67.5, 6255.0], [67.6, 6261.0], [67.7, 6268.0], [67.8, 6276.0], [67.9, 6281.0], [68.0, 6289.0], [68.1, 6292.0], [68.2, 6296.0], [68.3, 6299.0], [68.4, 6303.0], [68.5, 6304.0], [68.6, 6306.0], [68.7, 6308.0], [68.8, 6311.0], [68.9, 6314.0], [69.0, 6322.0], [69.1, 6326.0], [69.2, 6331.0], [69.3, 6334.0], [69.4, 6349.0], [69.5, 6352.0], [69.6, 6359.0], [69.7, 6362.0], [69.8, 6368.0], [69.9, 6374.0], [70.0, 6378.0], [70.1, 6379.0], [70.2, 6384.0], [70.3, 6387.0], [70.4, 6390.0], [70.5, 6391.0], [70.6, 6393.0], [70.7, 6395.0], [70.8, 6398.0], [70.9, 6399.0], [71.0, 6401.0], [71.1, 6403.0], [71.2, 6415.0], [71.3, 6418.0], [71.4, 6423.0], [71.5, 6428.0], [71.6, 6431.0], [71.7, 6432.0], [71.8, 6434.0], [71.9, 6436.0], [72.0, 6440.0], [72.1, 6446.0], [72.2, 6450.0], [72.3, 6451.0], [72.4, 6457.0], [72.5, 6461.0], [72.6, 6464.0], [72.7, 6467.0], [72.8, 6471.0], [72.9, 6471.0], [73.0, 6476.0], [73.1, 6481.0], [73.2, 6484.0], [73.3, 6487.0], [73.4, 6491.0], [73.5, 6492.0], [73.6, 6496.0], [73.7, 6500.0], [73.8, 6507.0], [73.9, 6510.0], [74.0, 6512.0], [74.1, 6513.0], [74.2, 6518.0], [74.3, 6519.0], [74.4, 6523.0], [74.5, 6524.0], [74.6, 6524.0], [74.7, 6525.0], [74.8, 6526.0], [74.9, 6528.0], [75.0, 6532.0], [75.1, 6535.0], [75.2, 6536.0], [75.3, 6536.0], [75.4, 6540.0], [75.5, 6541.0], [75.6, 6544.0], [75.7, 6545.0], [75.8, 6547.0], [75.9, 6550.0], [76.0, 6556.0], [76.1, 6557.0], [76.2, 6558.0], [76.3, 6563.0], [76.4, 6563.0], [76.5, 6565.0], [76.6, 6566.0], [76.7, 6566.0], [76.8, 6567.0], [76.9, 6569.0], [77.0, 6570.0], [77.1, 6573.0], [77.2, 6578.0], [77.3, 6579.0], [77.4, 6585.0], [77.5, 6589.0], [77.6, 6592.0], [77.7, 6594.0], [77.8, 6596.0], [77.9, 6598.0], [78.0, 6600.0], [78.1, 6601.0], [78.2, 6605.0], [78.3, 6606.0], [78.4, 6609.0], [78.5, 6611.0], [78.6, 6615.0], [78.7, 6618.0], [78.8, 6621.0], [78.9, 6623.0], [79.0, 6626.0], [79.1, 6630.0], [79.2, 6634.0], [79.3, 6635.0], [79.4, 6637.0], [79.5, 6638.0], [79.6, 6643.0], [79.7, 6648.0], [79.8, 6657.0], [79.9, 6660.0], [80.0, 6660.0], [80.1, 6661.0], [80.2, 6661.0], [80.3, 6666.0], [80.4, 6666.0], [80.5, 6668.0], [80.6, 6668.0], [80.7, 6670.0], [80.8, 6672.0], [80.9, 6675.0], [81.0, 6676.0], [81.1, 6679.0], [81.2, 6681.0], [81.3, 6684.0], [81.4, 6685.0], [81.5, 6687.0], [81.6, 6688.0], [81.7, 6691.0], [81.8, 6696.0], [81.9, 6697.0], [82.0, 6700.0], [82.1, 6701.0], [82.2, 6702.0], [82.3, 6709.0], [82.4, 6719.0], [82.5, 6721.0], [82.6, 6725.0], [82.7, 6727.0], [82.8, 6729.0], [82.9, 6733.0], [83.0, 6736.0], [83.1, 6740.0], [83.2, 6742.0], [83.3, 6746.0], [83.4, 6752.0], [83.5, 6758.0], [83.6, 6764.0], [83.7, 6772.0], [83.8, 6775.0], [83.9, 6778.0], [84.0, 6780.0], [84.1, 6785.0], [84.2, 6794.0], [84.3, 6796.0], [84.4, 6797.0], [84.5, 6801.0], [84.6, 6803.0], [84.7, 6806.0], [84.8, 6810.0], [84.9, 6812.0], [85.0, 6814.0], [85.1, 6819.0], [85.2, 6821.0], [85.3, 6822.0], [85.4, 6823.0], [85.5, 6827.0], [85.6, 6830.0], [85.7, 6831.0], [85.8, 6834.0], [85.9, 6837.0], [86.0, 6840.0], [86.1, 6843.0], [86.2, 6850.0], [86.3, 6857.0], [86.4, 6858.0], [86.5, 6864.0], [86.6, 6866.0], [86.7, 6870.0], [86.8, 6872.0], [86.9, 6877.0], [87.0, 6877.0], [87.1, 6879.0], [87.2, 6880.0], [87.3, 6886.0], [87.4, 6889.0], [87.5, 6897.0], [87.6, 6905.0], [87.7, 6913.0], [87.8, 6917.0], [87.9, 6921.0], [88.0, 6923.0], [88.1, 6925.0], [88.2, 6932.0], [88.3, 6935.0], [88.4, 6936.0], [88.5, 6937.0], [88.6, 6939.0], [88.7, 6943.0], [88.8, 6947.0], [88.9, 6950.0], [89.0, 6953.0], [89.1, 6961.0], [89.2, 6963.0], [89.3, 6978.0], [89.4, 6979.0], [89.5, 6982.0], [89.6, 6984.0], [89.7, 6989.0], [89.8, 6990.0], [89.9, 7001.0], [90.0, 7004.0], [90.1, 7008.0], [90.2, 7008.0], [90.3, 7018.0], [90.4, 7019.0], [90.5, 7023.0], [90.6, 7026.0], [90.7, 7030.0], [90.8, 7031.0], [90.9, 7034.0], [91.0, 7038.0], [91.1, 7046.0], [91.2, 7050.0], [91.3, 7053.0], [91.4, 7054.0], [91.5, 7055.0], [91.6, 7056.0], [91.7, 7062.0], [91.8, 7065.0], [91.9, 7067.0], [92.0, 7072.0], [92.1, 7074.0], [92.2, 7078.0], [92.3, 7079.0], [92.4, 7083.0], [92.5, 7085.0], [92.6, 7086.0], [92.7, 7088.0], [92.8, 7089.0], [92.9, 7093.0], [93.0, 7093.0], [93.1, 7098.0], [93.2, 7101.0], [93.3, 7103.0], [93.4, 7106.0], [93.5, 7111.0], [93.6, 7113.0], [93.7, 7115.0], [93.8, 7119.0], [93.9, 7121.0], [94.0, 7123.0], [94.1, 7130.0], [94.2, 7132.0], [94.3, 7133.0], [94.4, 7137.0], [94.5, 7143.0], [94.6, 7157.0], [94.7, 7161.0], [94.8, 7164.0], [94.9, 7169.0], [95.0, 7179.0], [95.1, 7189.0], [95.2, 7193.0], [95.3, 7201.0], [95.4, 7205.0], [95.5, 7215.0], [95.6, 7223.0], [95.7, 7233.0], [95.8, 7236.0], [95.9, 7241.0], [96.0, 7245.0], [96.1, 7254.0], [96.2, 7260.0], [96.3, 7264.0], [96.4, 7270.0], [96.5, 7289.0], [96.6, 7302.0], [96.7, 7313.0], [96.8, 7319.0], [96.9, 7338.0], [97.0, 7341.0], [97.1, 7355.0], [97.2, 7365.0], [97.3, 7370.0], [97.4, 7378.0], [97.5, 7395.0], [97.6, 7398.0], [97.7, 7406.0], [97.8, 7418.0], [97.9, 7428.0], [98.0, 7433.0], [98.1, 7452.0], [98.2, 7469.0], [98.3, 7535.0], [98.4, 7576.0], [98.5, 7599.0], [98.6, 7637.0], [98.7, 7649.0], [98.8, 7688.0], [98.9, 7709.0], [99.0, 7745.0], [99.1, 7761.0], [99.2, 7793.0], [99.3, 7809.0], [99.4, 7818.0], [99.5, 7829.0], [99.6, 7879.0], [99.7, 7918.0], [99.8, 7942.0], [99.9, 7976.0], [100.0, 8011.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 900.0, "maxY": 108.0, "series": [{"data": [[900.0, 2.0], [1000.0, 3.0], [1100.0, 3.0], [1200.0, 4.0], [1300.0, 10.0], [1400.0, 8.0], [1500.0, 15.0], [1600.0, 17.0], [1700.0, 21.0], [1800.0, 20.0], [1900.0, 16.0], [2000.0, 32.0], [2100.0, 30.0], [2200.0, 33.0], [2300.0, 34.0], [2400.0, 34.0], [2500.0, 32.0], [2600.0, 33.0], [2700.0, 36.0], [2800.0, 21.0], [2900.0, 28.0], [3000.0, 30.0], [3100.0, 42.0], [3200.0, 29.0], [3300.0, 36.0], [3400.0, 40.0], [3500.0, 26.0], [3600.0, 37.0], [3700.0, 34.0], [3800.0, 32.0], [3900.0, 37.0], [4000.0, 31.0], [4100.0, 39.0], [4200.0, 38.0], [4300.0, 36.0], [4400.0, 22.0], [4500.0, 40.0], [4600.0, 33.0], [4700.0, 41.0], [4800.0, 24.0], [4900.0, 22.0], [5000.0, 25.0], [5100.0, 28.0], [5200.0, 24.0], [5300.0, 36.0], [5400.0, 49.0], [5500.0, 71.0], [5600.0, 70.0], [5700.0, 57.0], [5800.0, 73.0], [5900.0, 42.0], [6000.0, 40.0], [6100.0, 39.0], [6200.0, 53.0], [6300.0, 66.0], [6400.0, 68.0], [6500.0, 108.0], [6600.0, 98.0], [6700.0, 62.0], [6800.0, 79.0], [6900.0, 58.0], [7000.0, 82.0], [7100.0, 52.0], [7200.0, 33.0], [7300.0, 27.0], [7400.0, 15.0], [7500.0, 7.0], [7600.0, 7.0], [7700.0, 11.0], [7800.0, 10.0], [7900.0, 7.0], [8000.0, 2.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 30.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2470.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 30.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2470.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.7644000000014, "minX": 1.75567428E12, "maxY": 1251.7644000000014, "series": [{"data": [[1.75567428E12, 1251.7644000000014]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567428E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 971.0, "minX": 1.0, "maxY": 8011.0, "series": [{"data": [[2.0, 7140.0], [4.0, 7118.0], [5.0, 7117.0], [6.0, 8011.0], [10.0, 7109.5], [11.0, 7105.5], [12.0, 7118.5], [14.0, 7085.0], [16.0, 7109.5], [17.0, 7522.0], [18.0, 7761.0], [21.0, 7636.333333333333], [23.0, 7107.5], [24.0, 7072.0], [27.0, 7086.0], [28.0, 7065.0], [35.0, 7600.2], [36.0, 7431.666666666667], [39.0, 7112.0], [41.0, 7549.0], [40.0, 7331.333333333333], [43.0, 7049.5], [45.0, 7505.5], [47.0, 7055.5], [51.0, 7093.0], [50.0, 7591.666666666667], [53.0, 7505.0], [59.0, 7026.0], [58.0, 7364.2], [62.0, 7394.333333333333], [67.0, 7055.0], [66.0, 7074.0], [65.0, 7019.0], [64.0, 7020.5], [71.0, 7869.0], [70.0, 7936.0], [69.0, 7050.0], [75.0, 7027.0], [73.0, 7482.0], [72.0, 7006.0], [76.0, 7917.0], [83.0, 7889.0], [82.0, 6982.0], [81.0, 7818.0], [80.0, 7004.25], [87.0, 7015.0], [86.0, 7708.0], [85.0, 7829.0], [84.0, 7709.0], [91.0, 6949.0], [90.0, 6997.0], [89.0, 7008.0], [88.0, 7703.0], [95.0, 7001.0], [94.0, 7010.0], [93.0, 7008.0], [92.0, 7829.0], [98.0, 6953.0], [97.0, 6952.0], [96.0, 7809.0], [103.0, 6947.0], [102.0, 6991.0], [101.0, 6939.0], [100.0, 6941.0], [106.0, 6943.0], [105.0, 6936.0], [104.0, 6936.0], [108.0, 6934.5], [115.0, 7068.142857142858], [119.0, 6950.0], [118.0, 6917.0], [117.0, 6923.0], [116.0, 6978.0], [121.0, 6936.0], [120.0, 7645.0], [127.0, 6886.0], [126.0, 6877.0], [125.0, 6921.0], [124.0, 7145.333333333333], [135.0, 6919.0], [133.0, 6921.0], [132.0, 6879.0], [131.0, 6868.0], [130.0, 6880.0], [129.0, 7800.0], [128.0, 6877.0], [143.0, 7039.75], [139.0, 6857.0], [138.0, 6911.0], [137.0, 6915.0], [136.0, 7647.0], [151.0, 6864.5], [149.0, 6872.0], [148.0, 6874.0], [147.0, 6833.0], [146.0, 6889.0], [145.0, 6837.0], [144.0, 6897.0], [159.0, 6814.5], [158.0, 6822.0], [156.0, 6853.0], [155.0, 6865.0], [154.0, 7311.5], [152.0, 7576.0], [167.0, 6796.0], [166.0, 7254.0], [164.0, 6818.0], [162.0, 6802.0], [161.0, 6842.0], [160.0, 6843.0], [175.0, 6791.5], [171.0, 6775.0], [170.0, 6777.5], [168.0, 6834.0], [183.0, 6736.0], [182.0, 6785.0], [181.0, 6782.0], [180.0, 6750.0], [179.0, 6791.0], [178.0, 6806.0], [177.0, 6752.0], [176.0, 7599.0], [191.0, 7637.0], [190.0, 6771.5], [188.0, 6733.0], [187.0, 7661.0], [186.0, 6741.0], [185.0, 7180.0], [199.0, 6725.0], [198.0, 6719.0], [197.0, 6675.5], [195.0, 6687.0], [194.0, 6739.0], [193.0, 6709.0], [192.0, 6722.0], [207.0, 6658.0], [206.0, 6696.0], [205.0, 6665.0], [204.0, 6661.0], [203.0, 6666.0], [202.0, 6668.0], [201.0, 6681.0], [200.0, 6681.0], [215.0, 7535.0], [214.0, 6637.0], [213.0, 6642.0], [212.0, 6676.0], [211.0, 6703.0], [210.0, 7000.0], [208.0, 6697.0], [223.0, 6672.0], [222.0, 6636.0], [221.0, 6635.0], [220.0, 6688.0], [219.0, 6632.0], [218.0, 6668.0], [217.0, 6666.0], [231.0, 7040.5], [229.0, 6608.0], [228.0, 7302.0], [227.0, 6607.0], [224.0, 6666.0], [239.0, 6570.0], [238.0, 6621.0], [237.0, 6572.5], [235.0, 6584.0], [234.0, 7428.0], [233.0, 6638.0], [232.0, 6640.0], [247.0, 6776.0], [246.0, 6593.0], [245.0, 6730.0], [244.0, 6619.0], [243.0, 6591.5], [241.0, 7315.0], [240.0, 6579.0], [255.0, 6570.0], [254.0, 6595.0], [253.0, 7208.333333333333], [250.0, 6606.0], [249.0, 6575.0], [259.0, 6757.0], [270.0, 7010.666666666666], [269.0, 6831.0], [264.0, 6878.0], [263.0, 6678.0], [262.0, 7421.0], [261.0, 6526.0], [258.0, 7009.5], [256.0, 6567.0], [286.0, 6544.0], [284.0, 7380.0], [282.0, 6830.0], [281.0, 6547.0], [279.0, 7398.0], [278.0, 6548.0], [277.0, 6619.5], [275.0, 6648.666666666667], [274.0, 6940.5], [303.0, 6630.0], [301.0, 6604.0], [299.0, 6978.333333333333], [296.0, 6821.0], [295.0, 7435.0], [294.0, 6789.0], [292.0, 6717.666666666667], [289.0, 6664.5], [288.0, 7196.0], [306.0, 6894.0], [319.0, 6721.0], [318.0, 7385.333333333333], [315.0, 6977.0], [313.0, 7168.333333333333], [310.0, 6980.0], [309.0, 6534.0], [308.0, 6879.5], [305.0, 7434.0], [304.0, 6543.0], [335.0, 7063.0], [333.0, 7152.5], [323.0, 6666.0], [322.0, 6524.0], [321.0, 6689.0], [331.0, 6782.0], [330.0, 7390.0], [329.0, 6525.0], [328.0, 6818.0], [327.0, 6516.0], [326.0, 6879.0], [325.0, 6523.0], [324.0, 6519.0], [339.0, 7245.0], [350.0, 6683.5], [348.0, 6515.5], [346.0, 6684.0], [345.0, 7027.0], [343.0, 7355.0], [342.0, 7380.0], [341.0, 6630.0], [340.0, 6920.0], [338.0, 6634.0], [337.0, 6552.5], [364.0, 6428.0], [362.0, 6825.0], [361.0, 6492.0], [360.0, 6471.0], [359.0, 7184.0], [353.0, 6621.0], [352.0, 6553.0], [358.0, 6934.0], [357.0, 6814.0], [356.0, 7346.0], [355.0, 6430.0], [354.0, 6596.0], [382.0, 6984.0], [383.0, 6463.0], [380.0, 7319.0], [369.0, 7341.0], [368.0, 7139.0], [379.0, 6436.0], [378.0, 6452.0], [377.0, 7223.0], [376.0, 7338.0], [375.0, 6637.5], [374.0, 6780.333333333333], [373.0, 7094.75], [387.0, 7215.0], [397.0, 7193.0], [396.0, 7247.0], [395.0, 6598.0], [394.0, 7204.0], [392.0, 7262.0], [391.0, 6656.0], [389.0, 7199.5], [386.0, 6729.0], [385.0, 6440.0], [384.0, 7138.0], [413.0, 6744.666666666667], [415.0, 6742.0], [412.0, 7064.0], [403.0, 6872.0], [411.0, 6393.0], [409.0, 7131.0], [408.0, 7201.0], [407.0, 6418.0], [406.0, 6541.0], [405.0, 7286.5], [429.0, 6543.0], [428.0, 6499.5], [425.0, 7132.0], [424.0, 6951.0], [423.0, 6390.0], [422.0, 6984.5], [421.0, 6728.0], [420.0, 6394.0], [419.0, 7241.0], [418.0, 6690.0], [444.0, 6610.0], [446.0, 7254.0], [447.0, 7122.0], [445.0, 7054.0], [443.0, 7219.0], [440.0, 6511.0], [436.0, 6936.0], [433.0, 6881.666666666667], [435.0, 7125.0], [434.0, 7236.0], [451.0, 6557.0], [462.0, 7085.0], [463.0, 6963.5], [460.0, 7029.0], [458.0, 7142.0], [456.0, 6835.0], [453.0, 7051.0], [452.0, 6599.0], [450.0, 6788.0], [449.0, 7240.0], [478.0, 7169.0], [479.0, 7078.0], [477.0, 7019.5], [467.0, 6880.5], [466.0, 7260.0], [465.0, 6670.0], [475.0, 7085.0], [474.0, 7046.0], [473.0, 7084.0], [472.0, 6740.0], [471.0, 7086.0], [470.0, 7205.0], [469.0, 6750.5], [492.0, 6527.5], [494.0, 7223.0], [495.0, 6819.0], [493.0, 6464.0], [490.0, 7157.0], [489.0, 6590.0], [487.0, 6701.0], [480.0, 6531.0], [483.0, 6731.0], [481.0, 7269.0], [486.0, 6517.5], [484.0, 6884.5], [510.0, 6775.0], [511.0, 6462.0], [509.0, 6535.0], [508.0, 6450.0], [507.0, 6536.0], [506.0, 7111.5], [504.0, 6545.0], [503.0, 6765.5], [496.0, 7145.0], [499.0, 6707.5], [497.0, 7157.0], [501.0, 7189.0], [500.0, 6626.0], [538.0, 6594.0], [536.0, 6600.0], [542.0, 6576.0], [528.0, 6517.0], [540.0, 6848.0], [512.0, 7207.0], [514.0, 7196.0], [518.0, 7164.0], [526.0, 6399.0], [522.0, 6432.0], [534.0, 6476.0], [532.0, 6513.0], [570.0, 6567.0], [574.0, 6636.0], [562.0, 7019.0], [572.0, 6685.0], [568.0, 7062.0], [544.0, 6959.0], [548.0, 6471.0], [558.0, 6627.333333333333], [552.0, 6800.0], [564.0, 6496.0], [602.0, 6753.0], [606.0, 6528.0], [592.0, 6399.0], [594.0, 6377.0], [604.0, 6604.0], [600.0, 6585.0], [582.0, 6617.0], [580.0, 6561.0], [578.0, 7073.0], [576.0, 6774.0], [588.0, 6609.0], [586.0, 6566.0], [584.0, 6575.5], [598.0, 6362.0], [632.0, 6487.0], [638.0, 6990.0], [636.0, 7005.0], [634.0, 7051.0], [622.0, 6670.0], [608.0, 6592.0], [620.0, 6471.0], [616.0, 6304.0], [630.0, 6328.0], [664.0, 6665.0], [668.0, 6417.0], [670.0, 6483.0], [666.0, 6310.0], [640.0, 6413.5], [642.0, 6820.5], [654.0, 6409.0], [652.0, 6268.0], [650.0, 6984.0], [648.0, 6420.0], [658.0, 6451.0], [656.0, 6491.0], [698.0, 6345.5], [702.0, 6581.0], [688.0, 6580.666666666667], [690.0, 6205.0], [696.0, 6378.0], [678.0, 6961.0], [674.0, 6322.0], [672.0, 6552.333333333333], [684.0, 6450.0], [682.0, 6203.0], [692.0, 6439.0], [728.0, 6825.0], [732.0, 6361.0], [722.0, 6351.0], [720.0, 6803.0], [734.0, 6286.0], [730.0, 6362.0], [704.0, 6170.0], [706.0, 6823.0], [710.0, 6158.0], [716.0, 6140.0], [714.0, 6145.0], [712.0, 6293.0], [724.0, 6379.5], [742.0, 6271.5], [762.0, 6058.0], [756.0, 6499.333333333333], [766.0, 6231.0], [740.0, 6780.0], [736.0, 6398.0], [750.0, 6797.0], [748.0, 6509.0], [744.0, 6739.0], [758.0, 6307.0], [772.0, 6041.0], [784.0, 6101.0], [796.0, 6464.666666666667], [774.0, 6335.5], [770.0, 6701.0], [786.0, 6594.0], [782.0, 6745.0], [780.0, 6189.333333333333], [776.0, 6037.0], [826.0, 5970.0], [818.0, 5974.0], [804.0, 6212.0], [822.0, 6702.0], [858.0, 5961.0], [856.0, 6156.5], [850.0, 6419.0], [848.0, 6435.5], [846.0, 6140.0], [844.0, 6700.0], [842.0, 6146.0], [840.0, 6650.0], [888.0, 6177.0], [892.0, 5809.0], [880.0, 6558.0], [882.0, 6434.0], [890.0, 5820.0], [866.0, 6101.0], [870.0, 5856.0], [878.0, 6205.0], [876.0, 6200.0], [872.0, 6387.5], [886.0, 5822.0], [884.0, 5834.0], [924.0, 5984.0], [914.0, 6133.0], [912.0, 5851.0], [916.0, 6030.5], [926.0, 5816.0], [922.0, 6268.0], [920.0, 5823.0], [910.0, 5950.0], [900.0, 6326.8], [902.0, 5962.0], [908.0, 6019.0], [906.0, 6014.0], [918.0, 5829.0], [956.0, 5815.5], [958.0, 5764.0], [944.0, 6436.0], [946.0, 5913.0], [954.0, 5934.0], [952.0, 5996.5], [934.0, 5811.0], [930.0, 5920.0], [928.0, 5736.0], [942.0, 5789.0], [940.0, 5820.0], [950.0, 5939.0], [948.0, 6399.0], [984.0, 5889.0], [990.0, 5641.0], [978.0, 5773.666666666667], [986.0, 6106.5], [962.0, 5754.0], [966.0, 5678.0], [972.0, 5672.0], [970.0, 5909.0], [968.0, 5678.0], [982.0, 5850.0], [980.0, 5894.0], [1016.0, 5670.4], [1020.0, 5601.0], [1008.0, 5618.0], [1022.0, 5635.0], [1018.0, 6298.0], [992.0, 5758.0], [996.0, 5700.0], [994.0, 5807.5], [1006.0, 6145.0], [1004.0, 5675.0], [1002.0, 5809.0], [1000.0, 5748.0], [1072.0, 5534.5], [1076.0, 5612.0], [1060.0, 5776.0], [1080.0, 5639.5], [1056.0, 5923.0], [1032.0, 5718.0], [1028.0, 5662.0], [1024.0, 6289.0], [1052.0, 5604.0], [1044.0, 5617.0], [1040.0, 5737.0], [1064.0, 5517.0], [1096.0, 5682.5], [1136.0, 5547.333333333333], [1148.0, 5440.0], [1144.0, 5501.0], [1116.0, 5493.0], [1112.0, 5521.5], [1108.0, 5575.5], [1104.0, 5552.0], [1128.0, 5608.0], [1124.0, 5486.0], [1208.0, 5666.666666666667], [1192.0, 5406.0], [1212.0, 5334.0], [1184.0, 5385.0], [1164.0, 6123.0], [1160.0, 5374.0], [1156.0, 5435.0], [1152.0, 6038.0], [1180.0, 5385.0], [1176.0, 5979.5], [1172.0, 6100.0], [1168.0, 5444.0], [1196.0, 5633.0], [1188.0, 5342.0], [1264.0, 5750.0], [1272.0, 5094.0], [1248.0, 5834.0], [1256.0, 5823.0], [1276.0, 5704.0], [1268.0, 5687.0], [1216.0, 5389.0], [1224.0, 5859.0], [1220.0, 5836.0], [1228.0, 5312.0], [1244.0, 5240.0], [1240.0, 5533.666666666667], [1236.0, 5466.0], [1232.0, 5245.0], [1260.0, 5800.0], [1336.0, 4935.0], [1340.0, 5064.0], [1316.0, 5544.0], [1312.0, 5072.0], [1320.0, 5505.0], [1332.0, 4969.0], [1328.0, 5283.0], [1292.0, 5483.0], [1288.0, 5159.0], [1284.0, 5641.0], [1280.0, 5173.0], [1308.0, 5741.0], [1304.0, 5205.333333333333], [1300.0, 5269.0], [1296.0, 5655.0], [1392.0, 4787.0], [1404.0, 4925.0], [1384.0, 4702.0], [1376.0, 5564.0], [1380.0, 5046.0], [1356.0, 5103.0], [1348.0, 4789.0], [1368.0, 4737.0], [1364.0, 5049.0], [1360.0, 5198.0], [1388.0, 5127.0], [1456.0, 5038.0], [1468.0, 4669.0], [1440.0, 5301.0], [1444.0, 5262.0], [1460.0, 4312.0], [1416.0, 5366.0], [1420.0, 5274.0], [1436.0, 4596.0], [1432.0, 5080.333333333333], [1428.0, 4638.0], [1424.0, 4650.0], [1452.0, 4589.0], [1448.0, 4613.0], [1528.0, 4090.0], [1532.0, 4075.0], [1508.0, 4340.0], [1512.0, 4278.0], [1524.0, 4393.0], [1520.0, 4887.0], [1480.0, 4863.0], [1472.0, 5122.0], [1500.0, 4454.0], [1496.0, 4333.0], [1492.0, 4526.0], [1516.0, 4130.0], [1584.0, 4759.0], [1592.0, 4066.0], [1568.0, 4141.0], [1580.0, 4047.0], [1548.0, 4644.6], [1540.0, 4878.5], [1536.0, 4538.5], [1564.0, 4349.0], [1556.0, 4334.5], [1552.0, 4208.0], [1656.0, 4363.0], [1632.0, 4108.0], [1636.0, 3859.5], [1644.0, 4175.0], [1660.0, 3909.0], [1648.0, 3917.0], [1600.0, 4085.0], [1604.0, 4724.0], [1612.0, 4359.5], [1628.0, 4168.0], [1624.0, 4492.0], [1616.0, 3849.0], [1720.0, 4366.0], [1696.0, 3664.0], [1700.0, 3620.0], [1708.0, 3735.0], [1716.0, 3760.0], [1712.0, 3599.0], [1672.0, 4563.0], [1668.0, 4004.0], [1664.0, 4551.0], [1692.0, 3671.0], [1684.0, 4562.0], [1680.0, 3844.0], [1788.0, 4082.0], [1768.0, 3847.0], [1760.0, 3856.0], [1764.0, 3624.0], [1772.0, 3472.0], [1784.0, 3470.0], [1780.0, 4256.0], [1728.0, 4377.0], [1732.0, 4445.0], [1736.0, 3931.0], [1740.0, 3695.0], [1756.0, 4291.0], [1752.0, 3651.0], [1748.0, 4309.0], [1744.0, 3656.0], [1852.0, 3569.0], [1824.0, 4116.0], [1828.0, 3980.0], [1832.0, 3680.0], [1836.0, 3609.0], [1848.0, 3649.0], [1844.0, 4172.0], [1840.0, 4192.0], [1792.0, 3823.3333333333335], [1796.0, 3983.0], [1804.0, 4213.0], [1820.0, 3332.0], [1816.0, 3475.0], [1808.0, 3392.0], [1908.0, 3075.0], [1912.0, 3210.0], [1896.0, 3246.0], [1888.0, 3494.0], [1900.0, 3930.0], [1904.0, 3759.0], [1868.0, 3237.0], [1884.0, 3215.0], [1880.0, 3352.0], [1876.0, 3394.0], [1872.0, 3515.0], [1972.0, 3606.0], [1980.0, 2937.0], [1952.0, 2984.0], [1956.0, 3345.0], [1960.0, 3242.0], [1964.0, 3077.0], [1968.0, 3561.0], [1920.0, 3900.0], [1924.0, 3407.0], [1928.0, 3913.0], [1932.0, 3292.0], [1948.0, 3853.0], [1944.0, 3185.0], [1940.0, 3447.5], [1936.0, 3567.5], [2040.0, 3020.0], [2016.0, 3316.0], [2020.0, 3648.0], [2024.0, 3057.0], [2028.0, 3072.0], [2044.0, 3498.0], [1984.0, 3109.0], [1988.0, 3203.0], [1992.0, 3725.0], [1996.0, 2907.0], [2012.0, 3005.5], [2008.0, 2848.0], [2004.0, 2860.0], [2000.0, 2954.0], [2152.0, 3052.0], [2160.0, 2527.0], [2168.0, 2715.5], [2120.0, 2539.0], [2128.0, 2829.0], [2136.0, 2572.0], [2144.0, 2792.0], [2048.0, 2719.0], [2056.0, 3115.0], [2104.0, 2583.0], [2096.0, 2634.0], [2088.0, 3494.0], [2080.0, 2986.0], [2296.0, 2849.0], [2240.0, 2129.0], [2256.0, 2853.0], [2264.0, 2418.0], [2288.0, 2711.0], [2280.0, 2440.0], [2200.0, 2768.0], [2192.0, 2266.0], [2184.0, 2338.0], [2176.0, 3203.0], [2232.0, 2575.0], [2224.0, 2182.0], [2216.0, 2542.0], [2208.0, 2251.0], [2408.0, 1709.0], [2424.0, 1908.5], [2368.0, 2059.0], [2376.0, 1811.0], [2384.0, 1952.5], [2392.0, 1765.0], [2304.0, 2769.0], [2312.0, 2404.0], [2320.0, 2159.0], [2328.0, 2009.0], [2360.0, 1880.0], [2352.0, 2193.0], [2344.0, 2090.5], [2336.0, 1837.0], [2448.0, 2156.0], [2496.0, 971.0], [2440.0, 1869.5], [2432.0, 1615.0], [2464.0, 1609.0], [2169.0, 2402.0], [2113.0, 2744.0], [2121.0, 2469.0], [2137.0, 3331.0], [2161.0, 2521.0], [2145.0, 2405.0], [2065.0, 2887.0], [2073.0, 3065.5], [2105.0, 3295.0], [2097.0, 2720.0], [2089.0, 2625.0], [2081.0, 2756.0], [2273.0, 2345.0], [2281.0, 2276.0], [2289.0, 2334.0], [2249.0, 2327.5], [2265.0, 2059.0], [2297.0, 2436.0], [2201.0, 2276.0], [2185.0, 2312.0], [2233.0, 2607.0], [2217.0, 3012.0], [2209.0, 2680.0], [2417.0, 1665.5], [2425.0, 2305.0], [2369.0, 1976.0], [2377.0, 2558.0], [2385.0, 2349.0], [2393.0, 2494.0], [2409.0, 1705.0], [2401.0, 2024.5], [2305.0, 2731.0], [2321.0, 1888.0], [2329.0, 2127.0], [2361.0, 2092.0], [2353.0, 1889.0], [2345.0, 1821.0], [2337.0, 2565.0], [2441.0, 1866.0], [2449.0, 2292.0], [2497.0, 1795.0], [2457.0, 1740.0], [2489.0, 1192.0], [2481.0, 1722.0], [2473.0, 1722.6666666666667], [2465.0, 1567.0], [1033.0, 5677.333333333333], [1085.0, 5883.0], [1057.0, 5622.0], [1073.0, 6188.0], [1029.0, 5625.0], [1025.0, 6091.0], [1053.0, 5626.0], [1049.0, 5551.0], [1045.0, 5557.0], [1041.0, 5554.0], [1069.0, 5548.333333333333], [1065.0, 5609.0], [1141.0, 5790.0], [1149.0, 5406.0], [1121.0, 5610.0], [1145.0, 5645.0], [1137.0, 5505.0], [1093.0, 5719.0], [1089.0, 5756.0], [1097.0, 5466.0], [1101.0, 5836.0], [1117.0, 5616.0], [1113.0, 5634.0], [1105.0, 6220.0], [1133.0, 5781.0], [1129.0, 5503.0], [1125.0, 5603.0], [1209.0, 5891.0], [1213.0, 5332.0], [1185.0, 6030.0], [1193.0, 5306.0], [1205.0, 5567.0], [1201.0, 5689.0], [1165.0, 5413.0], [1161.0, 5388.0], [1157.0, 5461.0], [1181.0, 5426.0], [1177.0, 5393.0], [1173.0, 6114.0], [1169.0, 5777.0], [1197.0, 5497.0], [1265.0, 5177.0], [1277.0, 5741.0], [1253.0, 5734.0], [1249.0, 5830.0], [1273.0, 5121.0], [1245.0, 5808.0], [1217.0, 5879.0], [1225.0, 5330.0], [1229.0, 5857.0], [1237.0, 5329.0], [1233.0, 5237.0], [1257.0, 5216.0], [1337.0, 4964.0], [1313.0, 5317.0], [1293.0, 5813.0], [1289.0, 5631.0], [1281.0, 5629.0], [1309.0, 5024.0], [1301.0, 5587.0], [1325.0, 5295.333333333333], [1321.0, 5296.0], [1317.0, 5521.0], [1397.0, 5089.0], [1377.0, 4714.0], [1381.0, 4705.0], [1401.0, 5213.0], [1345.0, 5471.0], [1349.0, 5165.5], [1353.0, 4938.5], [1373.0, 5199.0], [1365.0, 5618.0], [1361.0, 5015.0], [1389.0, 4893.0], [1385.0, 4837.0], [1461.0, 4305.0], [1469.0, 4490.0], [1441.0, 5271.0], [1445.0, 4705.0], [1449.0, 4689.0], [1465.0, 4589.0], [1421.0, 4666.0], [1417.0, 4723.0], [1413.0, 5009.0], [1409.0, 4642.0], [1437.0, 5073.0], [1433.0, 4626.0], [1429.0, 4764.0], [1425.0, 5326.0], [1453.0, 4503.0], [1525.0, 4746.0], [1521.0, 4974.0], [1533.0, 4858.0], [1505.0, 4142.0], [1509.0, 4135.0], [1529.0, 4534.0], [1477.0, 4397.75], [1473.0, 4392.0], [1481.0, 5058.0], [1485.0, 4708.0], [1501.0, 4277.0], [1493.0, 4172.0], [1489.0, 4566.5], [1517.0, 5016.0], [1513.0, 4419.0], [1597.0, 4066.0], [1573.0, 4534.5], [1569.0, 4088.0], [1577.0, 4343.666666666667], [1581.0, 4608.0], [1593.0, 4183.0], [1589.0, 4326.5], [1585.0, 4210.0], [1549.0, 4011.0], [1541.0, 4843.0], [1537.0, 4360.0], [1565.0, 4346.0], [1561.0, 4513.0], [1557.0, 4765.0], [1553.0, 4771.0], [1661.0, 3844.0], [1633.0, 4668.0], [1637.0, 3776.0], [1641.0, 4180.0], [1657.0, 4612.0], [1653.0, 4249.5], [1649.0, 3745.0], [1601.0, 4756.0], [1605.0, 4746.0], [1613.0, 4740.0], [1625.0, 4100.0], [1621.0, 4213.666666666667], [1617.0, 4721.0], [1721.0, 3802.0], [1717.0, 3608.0], [1701.0, 4501.0], [1697.0, 4543.0], [1705.0, 4515.0], [1709.0, 3829.0], [1725.0, 4129.666666666667], [1713.0, 4321.0], [1677.0, 4141.0], [1669.0, 3879.0], [1665.0, 4562.5], [1693.0, 4088.0], [1689.0, 4033.0], [1685.0, 4040.0], [1781.0, 3468.0], [1789.0, 3435.0], [1761.0, 3498.0], [1765.0, 3623.0], [1769.0, 4259.0], [1773.0, 3604.0], [1777.0, 3915.5], [1729.0, 4040.0], [1733.0, 3917.0], [1737.0, 3551.0], [1741.0, 4320.0], [1757.0, 3499.0], [1753.0, 4239.0], [1749.0, 4412.0], [1849.0, 4118.0], [1825.0, 3324.0], [1833.0, 3590.0], [1837.0, 4193.0], [1845.0, 4160.0], [1841.0, 3419.0], [1793.0, 4107.0], [1797.0, 4273.0], [1801.0, 3503.0], [1805.0, 4223.0], [1821.0, 4218.0], [1813.0, 4124.5], [1917.0, 3485.0], [1889.0, 3389.0], [1893.0, 3185.0], [1897.0, 3108.0], [1901.0, 3235.0], [1913.0, 3941.0], [1909.0, 3118.0], [1905.0, 3923.0], [1869.0, 3233.0], [1865.0, 3419.5], [1861.0, 3843.0], [1857.0, 3318.5], [1885.0, 3415.0], [1881.0, 3326.0], [1877.0, 3492.0], [1969.0, 2929.0], [1981.0, 3755.0], [1953.0, 3169.0], [1957.0, 3000.0], [1961.0, 3634.0], [1965.0, 3074.0], [1921.0, 3935.0], [1925.0, 3171.0], [1929.0, 3025.0], [1949.0, 3022.0], [2045.0, 3614.0], [2017.0, 2907.0], [2025.0, 2771.0], [2029.0, 3478.0], [2041.0, 2729.0], [2037.0, 2823.6666666666665], [2033.0, 3056.0], [1985.0, 3821.0], [1989.0, 3730.0], [1993.0, 3780.0], [1997.0, 3127.0], [2013.0, 3182.0], [2001.0, 3477.0], [2154.0, 2855.0], [2114.0, 2876.0], [2130.0, 2492.5], [2170.0, 3153.0], [2146.0, 3300.0], [2050.0, 3052.0], [2058.0, 2962.0], [2066.0, 2677.0], [2074.0, 3359.0], [2106.0, 2615.0], [2090.0, 3442.0], [2290.0, 2034.0], [2298.0, 2825.0], [2242.0, 2228.0], [2250.0, 2224.0], [2258.0, 2164.5], [2266.0, 2186.0], [2274.0, 2048.0], [2202.0, 3112.0], [2194.0, 2412.5], [2186.0, 2507.0], [2178.0, 2691.5], [2234.0, 2451.0], [2226.0, 2508.5], [2218.0, 2225.0], [2418.0, 1508.0], [2370.0, 1831.0], [2386.0, 1645.0], [2394.0, 2498.0], [2426.0, 2269.0], [2410.0, 1918.0], [2402.0, 1586.0], [2306.0, 2077.0], [2314.0, 2493.0], [2330.0, 2171.0], [2362.0, 2222.0], [2354.0, 1772.0], [2346.0, 2509.0], [2338.0, 2726.0], [2450.0, 1391.0], [2458.0, 1584.0], [2442.0, 1845.0], [2434.0, 1654.5], [2490.0, 1593.0], [2482.0, 1432.5], [2474.0, 1449.0], [2163.0, 2398.0], [2123.0, 3365.0], [2131.0, 2460.0], [2139.0, 2920.0], [2171.0, 2325.0], [2155.0, 3242.0], [2147.0, 2545.0], [2051.0, 2707.0], [2067.0, 3450.0], [2075.0, 2772.0], [2107.0, 2936.0], [2099.0, 2951.0], [2091.0, 3030.0], [2083.0, 2634.0], [2299.0, 2620.0], [2291.0, 1989.0], [2243.0, 2544.0], [2251.0, 2217.0], [2259.0, 2208.0], [2267.0, 2938.0], [2283.0, 2522.0], [2275.0, 2165.0], [2195.0, 2301.0], [2187.0, 2356.0], [2179.0, 2696.0], [2235.0, 2180.0], [2227.0, 2353.0], [2211.0, 2264.0], [2427.0, 1498.0], [2379.0, 1730.0], [2387.0, 2314.0], [2395.0, 1741.0], [2411.0, 2251.0], [2403.0, 1709.0], [2315.0, 2095.0], [2323.0, 2056.5], [2331.0, 1980.0], [2363.0, 1865.0], [2355.0, 2403.0], [2347.0, 2153.0], [2451.0, 1796.0], [2491.0, 1136.0], [2459.0, 1696.0], [2443.0, 1564.0], [2435.0, 1454.0], [2475.0, 2003.0], [2467.0, 1774.5], [517.0, 6541.0], [541.0, 6790.5], [529.0, 6314.0], [537.0, 7087.0], [527.0, 7113.0], [513.0, 7132.0], [515.0, 6438.0], [519.0, 7172.0], [525.0, 6468.0], [523.0, 6430.0], [521.0, 6812.5], [535.0, 6469.0], [531.0, 6787.0], [551.0, 7067.0], [573.0, 6448.0], [561.0, 6574.0], [571.0, 6508.0], [559.0, 7111.0], [545.0, 6471.0], [547.0, 6446.0], [549.0, 7067.0], [555.0, 6822.0], [553.0, 6540.0], [567.0, 7061.5], [565.0, 7162.0], [563.0, 7165.0], [605.0, 6351.0], [607.0, 6584.0], [593.0, 6720.0], [597.0, 6456.0], [595.0, 7030.0], [603.0, 7121.0], [581.0, 6681.0], [579.0, 6376.0], [591.0, 6841.666666666667], [587.0, 7115.0], [585.0, 6396.0], [599.0, 6359.0], [615.0, 6661.0], [637.0, 6304.0], [625.0, 7065.0], [633.0, 6296.0], [609.0, 6400.0], [613.0, 6646.75], [621.0, 6311.0], [619.0, 7039.0], [617.0, 6559.0], [631.0, 6541.0], [629.0, 6597.0], [627.0, 6451.5], [665.0, 6500.0], [667.0, 6247.0], [655.0, 6497.0], [643.0, 6457.0], [647.0, 6552.0], [645.0, 6407.5], [651.0, 6937.0], [649.0, 6287.0], [657.0, 6963.0], [701.0, 6174.0], [691.0, 6500.0], [703.0, 6172.0], [689.0, 6207.0], [679.0, 6230.0], [677.0, 6718.0], [673.0, 6923.0], [685.0, 6566.0], [683.0, 6467.0], [681.0, 6356.0], [695.0, 6274.5], [693.0, 6493.0], [729.0, 6219.0], [735.0, 6352.0], [733.0, 6813.0], [731.0, 6189.0], [719.0, 6364.0], [705.0, 6313.0], [709.0, 6283.0], [707.0, 6866.0], [711.0, 6378.0], [715.0, 6880.0], [713.0, 6700.0], [725.0, 6850.0], [761.0, 6074.0], [767.0, 6563.0], [753.0, 6190.5], [765.0, 6724.25], [743.0, 6092.0], [739.0, 6429.5], [737.0, 6801.0], [751.0, 6835.0], [749.0, 6746.0], [747.0, 6825.5], [745.0, 6374.0], [759.0, 6487.0], [757.0, 6359.0], [771.0, 6760.0], [775.0, 6053.0], [769.0, 6755.5], [789.0, 6447.0], [785.0, 6196.0], [783.0, 6691.0], [781.0, 6686.0], [777.0, 6043.0], [827.0, 5975.0], [829.0, 6213.0], [809.0, 6133.5], [807.0, 6060.0], [823.0, 6398.0], [851.0, 6569.0], [891.0, 6072.0], [895.0, 6211.333333333333], [881.0, 6081.0], [883.0, 5910.0], [889.0, 6070.0], [879.0, 6493.0], [865.0, 6239.230769230771], [867.0, 6558.0], [869.0, 6033.5], [875.0, 6347.5], [873.0, 6033.0], [887.0, 5817.0], [885.0, 6079.0], [923.0, 5978.0], [927.0, 5749.0], [917.0, 5792.0], [925.0, 5748.0], [921.0, 6510.0], [901.0, 5958.0], [903.0, 5792.0], [909.0, 5764.0], [907.0, 5956.0], [905.0, 6070.5], [919.0, 5982.0], [953.0, 6424.0], [959.0, 5790.0], [947.0, 5897.0], [957.0, 5765.0], [933.0, 6077.5], [931.0, 5971.0], [929.0, 5734.0], [943.0, 5954.0], [941.0, 6484.0], [939.0, 6203.5], [937.0, 5906.666666666667], [987.0, 5646.0], [991.0, 5881.0], [979.0, 6387.0], [989.0, 6025.5], [975.0, 5966.666666666667], [961.0, 5681.0], [965.0, 5682.0], [963.0, 6251.0], [967.0, 6387.0], [971.0, 6095.5], [983.0, 5803.0], [981.0, 5715.0], [1017.0, 5825.0], [1023.0, 5573.0], [1021.0, 5576.0], [1019.0, 5695.0], [1007.0, 5737.0], [999.0, 5743.5], [997.0, 5765.5], [1005.0, 5860.0], [1003.0, 5866.0], [1001.0, 5629.0], [1011.0, 5754.5], [1009.0, 5791.0], [1082.0, 5828.0], [1058.0, 5551.0], [1078.0, 5623.5], [1054.0, 5712.0], [1050.0, 5735.0], [1046.0, 5723.0], [1042.0, 5621.0], [1066.0, 5514.0], [1062.0, 5937.5], [1094.0, 6015.0], [1150.0, 5639.0], [1146.0, 5474.0], [1138.0, 5449.0], [1118.0, 5615.0], [1102.0, 5640.0], [1098.0, 5559.0], [1114.0, 5633.0], [1110.0, 5576.0], [1106.0, 6222.0], [1130.0, 5996.0], [1122.0, 5517.0], [1166.0, 5531.0], [1210.0, 5277.0], [1158.0, 5428.0], [1154.0, 5383.0], [1174.0, 5365.0], [1198.0, 5648.0], [1194.0, 6030.0], [1190.0, 5777.5], [1270.0, 5413.0], [1278.0, 5630.0], [1250.0, 5295.0], [1274.0, 5117.0], [1266.0, 5175.0], [1246.0, 5991.0], [1230.0, 5846.0], [1234.0, 5125.0], [1258.0, 5821.0], [1330.0, 5527.0], [1342.0, 5251.5], [1318.0, 5169.0], [1334.0, 5562.5], [1294.0, 5378.0], [1290.0, 5153.0], [1286.0, 5466.0], [1282.0, 5681.0], [1310.0, 4891.0], [1306.0, 5474.0], [1298.0, 5691.0], [1326.0, 5033.0], [1322.0, 5068.0], [1394.0, 4886.5], [1406.0, 5074.5], [1378.0, 5554.0], [1402.0, 4866.0], [1354.0, 5410.0], [1350.0, 5418.0], [1346.0, 4990.0], [1374.0, 5589.0], [1370.0, 4888.5], [1366.0, 5368.0], [1362.0, 5358.0], [1390.0, 4991.0], [1386.0, 4867.0], [1462.0, 4304.0], [1470.0, 5127.0], [1442.0, 4601.0], [1446.0, 5256.0], [1458.0, 4850.5], [1438.0, 5287.0], [1410.0, 4841.0], [1414.0, 4637.0], [1418.0, 4949.0], [1434.0, 4747.0], [1426.0, 5318.0], [1454.0, 5031.0], [1450.0, 4543.0], [1522.0, 4832.0], [1534.0, 4231.0], [1506.0, 4326.5], [1510.0, 4339.0], [1514.0, 4420.0], [1526.0, 4343.5], [1486.0, 5061.0], [1482.0, 5068.0], [1478.0, 4589.0], [1502.0, 4784.0], [1498.0, 4603.0], [1518.0, 4274.0], [1590.0, 4056.0], [1594.0, 4092.0], [1574.0, 3955.0], [1582.0, 4074.0], [1586.0, 4210.0], [1550.0, 4779.0], [1538.0, 4215.0], [1566.0, 3972.0], [1562.0, 4167.0], [1558.0, 4730.0], [1554.0, 4691.0], [1658.0, 4020.0], [1662.0, 4625.0], [1634.0, 4656.0], [1638.0, 3984.0], [1642.0, 4605.0], [1654.0, 3738.0], [1650.0, 4583.0], [1630.0, 4607.0], [1602.0, 4671.0], [1606.0, 4069.0], [1610.0, 4730.5], [1614.0, 4545.0], [1618.0, 4310.0], [1718.0, 3750.0], [1698.0, 4490.0], [1706.0, 4515.0], [1710.0, 4327.0], [1722.0, 3799.0], [1714.0, 4083.0], [1678.0, 4051.0], [1674.0, 4349.0], [1670.0, 4396.0], [1666.0, 3887.0], [1694.0, 4547.0], [1690.0, 4104.5], [1782.0, 4331.0], [1786.0, 3634.0], [1762.0, 3859.0], [1766.0, 4316.0], [1770.0, 3602.0], [1774.0, 3825.0], [1778.0, 4279.0], [1730.0, 4350.0], [1734.0, 3914.0], [1738.0, 4425.0], [1758.0, 3636.0], [1754.0, 4259.0], [1746.0, 3641.5], [1802.0, 4255.0], [1846.0, 3408.0], [1842.0, 4156.0], [1850.0, 3624.0], [1834.0, 3445.0], [1838.0, 3316.0], [1798.0, 3730.0], [1806.0, 3839.0], [1822.0, 3330.0], [1818.0, 3917.0], [1814.0, 3343.0], [1810.0, 3637.5], [1918.0, 3954.0], [1894.0, 3250.0], [1898.0, 3116.0], [1902.0, 3381.0], [1914.0, 3732.0], [1870.0, 3585.0], [1866.0, 3540.0], [1862.0, 3965.0], [1858.0, 3383.0], [1886.0, 3476.0], [1882.0, 3480.0], [1878.0, 3329.0], [1874.0, 3837.0], [1982.0, 3794.0], [1954.0, 3159.0], [1958.0, 2954.0], [1962.0, 3151.0], [1974.0, 2984.0], [1970.0, 2927.0], [1930.0, 3499.0], [1934.0, 3170.5], [1946.0, 3085.5], [1942.0, 3321.0], [1938.0, 3212.5], [2038.0, 2750.0], [2022.0, 3146.0], [2030.0, 3125.0], [2042.0, 2768.0], [2034.0, 3628.0], [2014.0, 2772.0], [1986.0, 3685.0], [1994.0, 3194.0], [1998.0, 2851.0], [2010.0, 3087.0], [2006.0, 3149.0], [2156.0, 2401.0], [2164.0, 2645.0], [2172.0, 3182.0], [2124.0, 2492.0], [2140.0, 2438.0], [2148.0, 3316.0], [2052.0, 3486.0], [2060.0, 3274.5], [2068.0, 2664.0], [2076.0, 3561.0], [2100.0, 2915.0], [2092.0, 2724.0], [2084.0, 2944.5], [2292.0, 2016.0], [2244.0, 2241.0], [2252.0, 2873.0], [2260.0, 2377.0], [2268.0, 2358.0], [2300.0, 2819.0], [2284.0, 2145.0], [2276.0, 2331.0], [2204.0, 2290.0], [2196.0, 3170.0], [2188.0, 2499.0], [2180.0, 2522.0], [2236.0, 2139.0], [2228.0, 2158.0], [2220.0, 2434.0], [2212.0, 2370.0], [2428.0, 2372.0], [2420.0, 2024.5], [2372.0, 2012.0], [2380.0, 1800.0], [2388.0, 2459.0], [2396.0, 2355.0], [2412.0, 2442.0], [2404.0, 2069.0], [2308.0, 2066.5], [2316.0, 1901.0], [2332.0, 2731.0], [2364.0, 1984.0], [2356.0, 2633.0], [2348.0, 2260.0], [2340.0, 2291.5], [2500.0, 993.3333333333334], [2452.0, 1626.0], [2492.0, 1216.0], [2484.0, 2016.5], [2476.0, 1370.0], [2468.0, 1656.0], [2165.0, 2824.5], [2117.0, 2799.3333333333335], [2125.0, 2523.0], [2133.0, 2656.5], [2173.0, 2490.0], [2157.0, 3180.0], [2149.0, 3314.0], [2053.0, 3420.0], [2061.0, 2799.0], [2069.0, 2667.0], [2077.0, 2772.0], [2109.0, 2687.0], [2093.0, 2596.0], [2085.0, 3415.0], [2277.0, 2021.0], [2285.0, 2010.0], [2245.0, 2227.0], [2253.0, 2448.0], [2261.0, 2066.0], [2269.0, 2525.0], [2205.0, 2625.0], [2197.0, 2420.0], [2189.0, 2674.0], [2181.0, 3171.0], [2237.0, 2395.0], [2229.0, 2157.0], [2221.0, 2937.0], [2213.0, 2430.0], [2421.0, 1644.0], [2413.0, 1678.0], [2373.0, 1691.0], [2381.0, 2524.0], [2389.0, 2377.0], [2397.0, 1606.0], [2429.0, 1601.0], [2405.0, 1770.0], [2309.0, 1928.0], [2317.0, 2166.0], [2325.0, 2475.0], [2333.0, 1994.0], [2365.0, 1856.0], [2357.0, 2638.0], [2453.0, 1364.0], [2461.0, 1797.5], [2445.0, 2032.0], [2437.0, 1519.0], [2493.0, 1863.0], [2485.0, 1374.0], [2477.0, 1435.0], [1075.0, 5683.5], [1063.0, 5870.0], [1087.0, 5637.0], [1059.0, 5548.0], [1083.0, 5490.0], [1039.0, 5620.75], [1035.0, 6021.0], [1027.0, 5669.0], [1051.0, 5562.0], [1047.0, 6258.0], [1043.0, 6221.0], [1071.0, 5745.0], [1147.0, 5703.5], [1123.0, 5776.0], [1143.0, 5501.0], [1119.0, 5455.0], [1099.0, 5577.0], [1103.0, 6226.0], [1115.0, 5468.0], [1131.0, 5445.0], [1203.0, 5809.5], [1215.0, 5335.5], [1191.0, 5499.0], [1187.0, 5754.5], [1195.0, 5379.0], [1211.0, 5370.0], [1163.0, 5604.5], [1159.0, 5410.0], [1155.0, 5470.666666666667], [1183.0, 5463.5], [1179.0, 5432.0], [1171.0, 5719.5], [1199.0, 6033.0], [1275.0, 5851.0], [1279.0, 5267.0], [1267.0, 5870.0], [1223.0, 5522.0], [1219.0, 5702.0], [1227.0, 5511.5], [1231.0, 5348.0], [1243.0, 5838.0], [1263.0, 5814.0], [1259.0, 5978.0], [1255.0, 5909.5], [1295.0, 5148.0], [1319.0, 5297.0], [1335.0, 4803.0], [1331.0, 5573.0], [1287.0, 5387.0], [1283.0, 5169.0], [1307.0, 5252.0], [1299.0, 5063.0], [1327.0, 5286.0], [1315.0, 5331.5], [1395.0, 5479.0], [1403.0, 4795.0], [1407.0, 4650.0], [1379.0, 5549.0], [1383.0, 5458.5], [1399.0, 4838.0], [1375.0, 5551.0], [1347.0, 4783.0], [1351.0, 4980.0], [1359.0, 5635.0], [1355.0, 5204.0], [1371.0, 4904.0], [1367.0, 4845.0], [1391.0, 5514.0], [1387.0, 5128.0], [1467.0, 4377.0], [1471.0, 4573.0], [1443.0, 5264.0], [1447.0, 5144.0], [1451.0, 5242.0], [1463.0, 4296.0], [1459.0, 5052.0], [1423.0, 5034.5], [1419.0, 4645.0], [1415.0, 4527.0], [1411.0, 4850.0], [1439.0, 4437.0], [1435.0, 4560.0], [1427.0, 4761.0], [1455.0, 5114.0], [1527.0, 4364.0], [1531.0, 4619.5], [1507.0, 4961.0], [1511.0, 4429.0], [1503.0, 4514.0], [1483.0, 4626.0], [1487.0, 4184.0], [1499.0, 5023.0], [1495.0, 4312.0], [1491.0, 4712.0], [1519.0, 4473.0], [1515.0, 4997.0], [1591.0, 3894.0], [1595.0, 4762.0], [1571.0, 4499.0], [1599.0, 4061.5], [1579.0, 4315.5], [1583.0, 3917.0], [1587.0, 4757.0], [1551.0, 4176.0], [1543.0, 4545.5], [1567.0, 3970.0], [1563.0, 4755.0], [1559.0, 4729.0], [1651.0, 4109.0], [1655.0, 4090.0], [1659.0, 4189.0], [1639.0, 4142.0], [1647.0, 4390.666666666667], [1607.0, 3978.0], [1615.0, 3969.0], [1627.0, 4649.5], [1623.0, 4685.0], [1619.0, 4265.0], [1719.0, 4013.0], [1727.0, 4219.0], [1699.0, 4541.0], [1707.0, 4320.75], [1711.0, 3819.0], [1715.0, 3817.0], [1679.0, 3893.0], [1671.0, 4588.0], [1667.0, 4384.0], [1695.0, 4551.0], [1691.0, 3686.0], [1687.0, 3795.0], [1683.0, 4351.666666666667], [1783.0, 3936.0], [1787.0, 3439.0], [1763.0, 3527.0], [1767.0, 4380.0], [1771.0, 4014.0], [1775.0, 4147.0], [1779.0, 3820.0], [1759.0, 3691.0], [1731.0, 3840.0], [1735.0, 3723.0], [1739.0, 3542.0], [1743.0, 3899.0], [1755.0, 3871.0], [1751.0, 3521.5], [1747.0, 3957.0], [1855.0, 3730.6666666666665], [1851.0, 3300.0], [1827.0, 3391.0], [1831.0, 3771.3333333333335], [1835.0, 3440.0], [1839.0, 4190.0], [1847.0, 3750.0], [1843.0, 3324.0], [1823.0, 3339.0], [1799.0, 4265.0], [1803.0, 3386.0], [1807.0, 4039.0], [1819.0, 3471.0], [1815.0, 3335.0], [1811.0, 4029.0], [1915.0, 3426.0], [1911.0, 3677.5], [1919.0, 3091.0], [1891.0, 3457.5], [1895.0, 3775.0], [1899.0, 3219.0], [1903.0, 3945.0], [1907.0, 3528.0], [1871.0, 4107.0], [1867.0, 3352.0], [1863.0, 4126.0], [1859.0, 3553.0], [1887.0, 3885.0], [1883.0, 3558.0], [1875.0, 3348.0], [1979.0, 3369.5], [1959.0, 3152.0], [1983.0, 3785.0], [1955.0, 2968.0], [1963.0, 3733.0], [1967.0, 3686.0], [1975.0, 2919.0], [1971.0, 2969.0], [1951.0, 3410.5], [1923.0, 3468.5], [1927.0, 3402.0], [1931.0, 3864.0], [1947.0, 3877.0], [1943.0, 3187.0], [2043.0, 3005.0], [2039.0, 2736.0], [2023.0, 3639.0], [2047.0, 3078.5], [2019.0, 2984.0], [2027.0, 3336.0], [2031.0, 2751.0], [1987.0, 3604.0], [1991.0, 3540.0], [1995.0, 3308.0], [1999.0, 3031.0], [2007.0, 2808.0], [2003.0, 2921.0], [2166.0, 2388.0], [2158.0, 2529.0], [2118.0, 2622.0], [2126.0, 2479.0], [2142.0, 2828.0], [2174.0, 3143.0], [2054.0, 2697.0], [2062.0, 2715.0], [2070.0, 2699.0], [2110.0, 2528.0], [2102.0, 2838.5], [2094.0, 2973.0], [2086.0, 3330.0], [2294.0, 2094.0], [2246.0, 2104.0], [2254.0, 2943.0], [2262.0, 2813.0], [2270.0, 2526.0], [2302.0, 1945.0], [2278.0, 2027.0], [2206.0, 2747.0], [2190.0, 2630.0], [2238.0, 2409.0], [2230.0, 2156.0], [2222.0, 2521.0], [2422.0, 1510.0], [2414.0, 1690.0], [2382.0, 1973.0], [2374.0, 2431.0], [2398.0, 1744.0], [2430.0, 1898.0], [2406.0, 1936.0], [2310.0, 1979.0], [2318.0, 2257.0], [2326.0, 1885.0], [2366.0, 1715.0], [2358.0, 1888.0], [2350.0, 2527.0], [2342.0, 1963.0], [2462.0, 1324.0], [2454.0, 1324.0], [2494.0, 1019.0], [2486.0, 2064.0], [2478.0, 1257.0], [2470.0, 1548.5], [2159.0, 2517.0], [2175.0, 2358.0], [2119.0, 3318.0], [2127.0, 2602.0], [2135.0, 2809.5], [2143.0, 2637.0], [2151.0, 2824.0], [2111.0, 2564.0], [2055.0, 3535.0], [2063.0, 3504.0], [2071.0, 2650.0], [2079.0, 3220.0], [2103.0, 3010.0], [2095.0, 3378.0], [2087.0, 2631.0], [2303.0, 2829.0], [2255.0, 2345.0], [2295.0, 2166.0], [2247.0, 2999.0], [2263.0, 2547.0], [2271.0, 2212.0], [2287.0, 2398.0], [2279.0, 2201.0], [2207.0, 3150.0], [2199.0, 2748.5], [2191.0, 2731.0], [2183.0, 2743.5], [2239.0, 3020.0], [2231.0, 2341.0], [2223.0, 2257.0], [2215.0, 2722.5], [2407.0, 1574.0], [2415.0, 1899.0], [2431.0, 1895.0], [2375.0, 2126.0], [2391.0, 1941.5], [2399.0, 1729.0], [2367.0, 2060.0], [2311.0, 2059.0], [2319.0, 2221.0], [2327.0, 2517.0], [2335.0, 2119.0], [2359.0, 2002.0], [2351.0, 1767.0], [2455.0, 1344.0], [2495.0, 1134.0], [2463.0, 1407.0], [2447.0, 2207.5], [2439.0, 1720.0], [2487.0, 1211.0], [2479.0, 1235.0], [1.0, 7137.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}, {"data": [[1251.7644000000014, 5006.042799999996]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20375.0, "minX": 1.75567428E12, "maxY": 49000.0, "series": [{"data": [[1.75567428E12, 49000.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75567428E12, 20375.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567428E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5006.042799999996, "minX": 1.75567428E12, "maxY": 5006.042799999996, "series": [{"data": [[1.75567428E12, 5006.042799999996]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567428E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5006.001599999973, "minX": 1.75567428E12, "maxY": 5006.001599999973, "series": [{"data": [[1.75567428E12, 5006.001599999973]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567428E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4894.39719999999, "minX": 1.75567428E12, "maxY": 4894.39719999999, "series": [{"data": [[1.75567428E12, 4894.39719999999]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567428E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 900.0, "minX": 1.75567428E12, "maxY": 8011.0, "series": [{"data": [[1.75567428E12, 8011.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75567428E12, 7004.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75567428E12, 7745.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75567428E12, 7181.849999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75567428E12, 900.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75567428E12, 5475.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567428E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1435.0, "minX": 33.0, "maxY": 6894.0, "series": [{"data": [[33.0, 1435.0], [266.0, 2153.5], [559.0, 6894.0], [577.0, 6193.0], [329.0, 5368.0], [354.0, 3133.0], [382.0, 4195.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 577.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1435.0, "minX": 33.0, "maxY": 6894.0, "series": [{"data": [[33.0, 1435.0], [266.0, 2153.5], [559.0, 6894.0], [577.0, 6193.0], [329.0, 5368.0], [354.0, 3133.0], [382.0, 4195.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 577.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567428E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567428E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567428E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567428E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567428E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567428E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567428E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567428E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567428E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567428E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567428E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567428E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

