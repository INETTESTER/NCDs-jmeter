/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 39.0, "minX": 0.0, "maxY": 6633.0, "series": [{"data": [[0.0, 39.0], [0.1, 63.0], [0.2, 333.0], [0.3, 334.0], [0.4, 399.0], [0.5, 461.0], [0.6, 479.0], [0.7, 484.0], [0.8, 487.0], [0.9, 494.0], [1.0, 515.0], [1.1, 543.0], [1.2, 570.0], [1.3, 577.0], [1.4, 579.0], [1.5, 584.0], [1.6, 590.0], [1.7, 601.0], [1.8, 604.0], [1.9, 621.0], [2.0, 627.0], [2.1, 650.0], [2.2, 669.0], [2.3, 673.0], [2.4, 675.0], [2.5, 689.0], [2.6, 700.0], [2.7, 710.0], [2.8, 713.0], [2.9, 715.0], [3.0, 718.0], [3.1, 725.0], [3.2, 727.0], [3.3, 734.0], [3.4, 738.0], [3.5, 752.0], [3.6, 754.0], [3.7, 767.0], [3.8, 775.0], [3.9, 780.0], [4.0, 796.0], [4.1, 805.0], [4.2, 810.0], [4.3, 829.0], [4.4, 837.0], [4.5, 842.0], [4.6, 853.0], [4.7, 867.0], [4.8, 868.0], [4.9, 873.0], [5.0, 878.0], [5.1, 884.0], [5.2, 888.0], [5.3, 899.0], [5.4, 901.0], [5.5, 909.0], [5.6, 916.0], [5.7, 924.0], [5.8, 927.0], [5.9, 936.0], [6.0, 940.0], [6.1, 947.0], [6.2, 950.0], [6.3, 959.0], [6.4, 967.0], [6.5, 979.0], [6.6, 990.0], [6.7, 998.0], [6.8, 1028.0], [6.9, 1035.0], [7.0, 1047.0], [7.1, 1059.0], [7.2, 1060.0], [7.3, 1064.0], [7.4, 1068.0], [7.5, 1072.0], [7.6, 1075.0], [7.7, 1078.0], [7.8, 1086.0], [7.9, 1100.0], [8.0, 1110.0], [8.1, 1120.0], [8.2, 1129.0], [8.3, 1158.0], [8.4, 1163.0], [8.5, 1165.0], [8.6, 1178.0], [8.7, 1183.0], [8.8, 1194.0], [8.9, 1202.0], [9.0, 1214.0], [9.1, 1222.0], [9.2, 1231.0], [9.3, 1231.0], [9.4, 1244.0], [9.5, 1249.0], [9.6, 1256.0], [9.7, 1264.0], [9.8, 1269.0], [9.9, 1274.0], [10.0, 1289.0], [10.1, 1290.0], [10.2, 1297.0], [10.3, 1302.0], [10.4, 1310.0], [10.5, 1316.0], [10.6, 1324.0], [10.7, 1331.0], [10.8, 1355.0], [10.9, 1361.0], [11.0, 1364.0], [11.1, 1380.0], [11.2, 1386.0], [11.3, 1387.0], [11.4, 1399.0], [11.5, 1411.0], [11.6, 1414.0], [11.7, 1417.0], [11.8, 1425.0], [11.9, 1430.0], [12.0, 1438.0], [12.1, 1446.0], [12.2, 1449.0], [12.3, 1450.0], [12.4, 1459.0], [12.5, 1469.0], [12.6, 1493.0], [12.7, 1500.0], [12.8, 1507.0], [12.9, 1515.0], [13.0, 1521.0], [13.1, 1527.0], [13.2, 1537.0], [13.3, 1539.0], [13.4, 1544.0], [13.5, 1544.0], [13.6, 1548.0], [13.7, 1552.0], [13.8, 1564.0], [13.9, 1567.0], [14.0, 1580.0], [14.1, 1582.0], [14.2, 1585.0], [14.3, 1589.0], [14.4, 1596.0], [14.5, 1598.0], [14.6, 1603.0], [14.7, 1609.0], [14.8, 1630.0], [14.9, 1631.0], [15.0, 1636.0], [15.1, 1639.0], [15.2, 1656.0], [15.3, 1661.0], [15.4, 1670.0], [15.5, 1673.0], [15.6, 1679.0], [15.7, 1679.0], [15.8, 1687.0], [15.9, 1692.0], [16.0, 1704.0], [16.1, 1708.0], [16.2, 1714.0], [16.3, 1716.0], [16.4, 1719.0], [16.5, 1724.0], [16.6, 1726.0], [16.7, 1727.0], [16.8, 1733.0], [16.9, 1739.0], [17.0, 1752.0], [17.1, 1753.0], [17.2, 1758.0], [17.3, 1761.0], [17.4, 1768.0], [17.5, 1777.0], [17.6, 1784.0], [17.7, 1786.0], [17.8, 1791.0], [17.9, 1794.0], [18.0, 1800.0], [18.1, 1805.0], [18.2, 1814.0], [18.3, 1818.0], [18.4, 1824.0], [18.5, 1829.0], [18.6, 1833.0], [18.7, 1839.0], [18.8, 1854.0], [18.9, 1870.0], [19.0, 1882.0], [19.1, 1884.0], [19.2, 1892.0], [19.3, 1894.0], [19.4, 1901.0], [19.5, 1906.0], [19.6, 1920.0], [19.7, 1927.0], [19.8, 1935.0], [19.9, 1941.0], [20.0, 1946.0], [20.1, 1950.0], [20.2, 1970.0], [20.3, 1982.0], [20.4, 1995.0], [20.5, 2002.0], [20.6, 2011.0], [20.7, 2016.0], [20.8, 2027.0], [20.9, 2033.0], [21.0, 2052.0], [21.1, 2060.0], [21.2, 2073.0], [21.3, 2108.0], [21.4, 2130.0], [21.5, 2134.0], [21.6, 2140.0], [21.7, 2142.0], [21.8, 2148.0], [21.9, 2149.0], [22.0, 2161.0], [22.1, 2162.0], [22.2, 2172.0], [22.3, 2177.0], [22.4, 2183.0], [22.5, 2186.0], [22.6, 2195.0], [22.7, 2197.0], [22.8, 2206.0], [22.9, 2214.0], [23.0, 2229.0], [23.1, 2234.0], [23.2, 2244.0], [23.3, 2244.0], [23.4, 2253.0], [23.5, 2256.0], [23.6, 2261.0], [23.7, 2267.0], [23.8, 2276.0], [23.9, 2279.0], [24.0, 2284.0], [24.1, 2286.0], [24.2, 2297.0], [24.3, 2305.0], [24.4, 2316.0], [24.5, 2319.0], [24.6, 2327.0], [24.7, 2328.0], [24.8, 2339.0], [24.9, 2342.0], [25.0, 2349.0], [25.1, 2350.0], [25.2, 2357.0], [25.3, 2358.0], [25.4, 2371.0], [25.5, 2393.0], [25.6, 2407.0], [25.7, 2410.0], [25.8, 2426.0], [25.9, 2427.0], [26.0, 2429.0], [26.1, 2435.0], [26.2, 2439.0], [26.3, 2441.0], [26.4, 2446.0], [26.5, 2457.0], [26.6, 2466.0], [26.7, 2468.0], [26.8, 2474.0], [26.9, 2483.0], [27.0, 2487.0], [27.1, 2494.0], [27.2, 2500.0], [27.3, 2502.0], [27.4, 2509.0], [27.5, 2522.0], [27.6, 2530.0], [27.7, 2531.0], [27.8, 2540.0], [27.9, 2544.0], [28.0, 2550.0], [28.1, 2557.0], [28.2, 2563.0], [28.3, 2566.0], [28.4, 2573.0], [28.5, 2584.0], [28.6, 2587.0], [28.7, 2588.0], [28.8, 2597.0], [28.9, 2599.0], [29.0, 2602.0], [29.1, 2625.0], [29.2, 2629.0], [29.3, 2631.0], [29.4, 2644.0], [29.5, 2648.0], [29.6, 2658.0], [29.7, 2664.0], [29.8, 2670.0], [29.9, 2670.0], [30.0, 2676.0], [30.1, 2685.0], [30.2, 2688.0], [30.3, 2691.0], [30.4, 2696.0], [30.5, 2701.0], [30.6, 2706.0], [30.7, 2711.0], [30.8, 2716.0], [30.9, 2724.0], [31.0, 2726.0], [31.1, 2734.0], [31.2, 2741.0], [31.3, 2751.0], [31.4, 2752.0], [31.5, 2753.0], [31.6, 2757.0], [31.7, 2759.0], [31.8, 2764.0], [31.9, 2766.0], [32.0, 2771.0], [32.1, 2778.0], [32.2, 2785.0], [32.3, 2787.0], [32.4, 2794.0], [32.5, 2796.0], [32.6, 2800.0], [32.7, 2803.0], [32.8, 2811.0], [32.9, 2814.0], [33.0, 2825.0], [33.1, 2827.0], [33.2, 2831.0], [33.3, 2855.0], [33.4, 2872.0], [33.5, 2885.0], [33.6, 2892.0], [33.7, 2896.0], [33.8, 2902.0], [33.9, 2918.0], [34.0, 2921.0], [34.1, 2924.0], [34.2, 2930.0], [34.3, 2934.0], [34.4, 2956.0], [34.5, 2958.0], [34.6, 2964.0], [34.7, 2966.0], [34.8, 2972.0], [34.9, 2974.0], [35.0, 2978.0], [35.1, 2984.0], [35.2, 2988.0], [35.3, 2992.0], [35.4, 3000.0], [35.5, 3004.0], [35.6, 3013.0], [35.7, 3016.0], [35.8, 3022.0], [35.9, 3029.0], [36.0, 3041.0], [36.1, 3060.0], [36.2, 3087.0], [36.3, 3089.0], [36.4, 3110.0], [36.5, 3112.0], [36.6, 3125.0], [36.7, 3130.0], [36.8, 3135.0], [36.9, 3138.0], [37.0, 3142.0], [37.1, 3146.0], [37.2, 3148.0], [37.3, 3151.0], [37.4, 3154.0], [37.5, 3163.0], [37.6, 3167.0], [37.7, 3171.0], [37.8, 3174.0], [37.9, 3182.0], [38.0, 3192.0], [38.1, 3194.0], [38.2, 3207.0], [38.3, 3211.0], [38.4, 3213.0], [38.5, 3216.0], [38.6, 3219.0], [38.7, 3229.0], [38.8, 3240.0], [38.9, 3242.0], [39.0, 3245.0], [39.1, 3256.0], [39.2, 3262.0], [39.3, 3265.0], [39.4, 3280.0], [39.5, 3281.0], [39.6, 3282.0], [39.7, 3297.0], [39.8, 3300.0], [39.9, 3308.0], [40.0, 3318.0], [40.1, 3319.0], [40.2, 3321.0], [40.3, 3349.0], [40.4, 3351.0], [40.5, 3352.0], [40.6, 3396.0], [40.7, 3397.0], [40.8, 3414.0], [40.9, 3416.0], [41.0, 3431.0], [41.1, 3431.0], [41.2, 3435.0], [41.3, 3436.0], [41.4, 3438.0], [41.5, 3439.0], [41.6, 3441.0], [41.7, 3442.0], [41.8, 3444.0], [41.9, 3445.0], [42.0, 3447.0], [42.1, 3448.0], [42.2, 3451.0], [42.3, 3451.0], [42.4, 3451.0], [42.5, 3453.0], [42.6, 3457.0], [42.7, 3459.0], [42.8, 3462.0], [42.9, 3466.0], [43.0, 3472.0], [43.1, 3478.0], [43.2, 3491.0], [43.3, 3494.0], [43.4, 3498.0], [43.5, 3501.0], [43.6, 3533.0], [43.7, 3560.0], [43.8, 3563.0], [43.9, 3565.0], [44.0, 3574.0], [44.1, 3578.0], [44.2, 3611.0], [44.3, 3648.0], [44.4, 3661.0], [44.5, 3668.0], [44.6, 3673.0], [44.7, 3681.0], [44.8, 3683.0], [44.9, 3692.0], [45.0, 3722.0], [45.1, 3725.0], [45.2, 3741.0], [45.3, 3741.0], [45.4, 3748.0], [45.5, 3755.0], [45.6, 3761.0], [45.7, 3769.0], [45.8, 3776.0], [45.9, 3779.0], [46.0, 3783.0], [46.1, 3785.0], [46.2, 3788.0], [46.3, 3790.0], [46.4, 3793.0], [46.5, 3804.0], [46.6, 3809.0], [46.7, 3816.0], [46.8, 3846.0], [46.9, 3846.0], [47.0, 3857.0], [47.1, 3869.0], [47.2, 3916.0], [47.3, 3955.0], [47.4, 4078.0], [47.5, 4112.0], [47.6, 4170.0], [47.7, 4202.0], [47.8, 4221.0], [47.9, 4230.0], [48.0, 4242.0], [48.1, 4273.0], [48.2, 4306.0], [48.3, 4326.0], [48.4, 4343.0], [48.5, 4345.0], [48.6, 4349.0], [48.7, 4356.0], [48.8, 4382.0], [48.9, 4398.0], [49.0, 4423.0], [49.1, 4428.0], [49.2, 4465.0], [49.3, 4467.0], [49.4, 4475.0], [49.5, 4478.0], [49.6, 4481.0], [49.7, 4482.0], [49.8, 4485.0], [49.9, 4502.0], [50.0, 4536.0], [50.1, 4546.0], [50.2, 4549.0], [50.3, 4553.0], [50.4, 4559.0], [50.5, 4559.0], [50.6, 4560.0], [50.7, 4567.0], [50.8, 4573.0], [50.9, 4579.0], [51.0, 4603.0], [51.1, 4605.0], [51.2, 4610.0], [51.3, 4612.0], [51.4, 4620.0], [51.5, 4639.0], [51.6, 4678.0], [51.7, 4681.0], [51.8, 4688.0], [51.9, 4693.0], [52.0, 4699.0], [52.1, 4707.0], [52.2, 4710.0], [52.3, 4711.0], [52.4, 4723.0], [52.5, 4731.0], [52.6, 4732.0], [52.7, 4732.0], [52.8, 4733.0], [52.9, 4736.0], [53.0, 4755.0], [53.1, 4764.0], [53.2, 4767.0], [53.3, 4773.0], [53.4, 4780.0], [53.5, 4805.0], [53.6, 4812.0], [53.7, 4826.0], [53.8, 4830.0], [53.9, 4833.0], [54.0, 4844.0], [54.1, 4846.0], [54.2, 4859.0], [54.3, 4859.0], [54.4, 4865.0], [54.5, 4869.0], [54.6, 4882.0], [54.7, 4892.0], [54.8, 4907.0], [54.9, 4911.0], [55.0, 4915.0], [55.1, 4917.0], [55.2, 4926.0], [55.3, 4938.0], [55.4, 4948.0], [55.5, 4961.0], [55.6, 4970.0], [55.7, 4979.0], [55.8, 4988.0], [55.9, 4991.0], [56.0, 4996.0], [56.1, 5003.0], [56.2, 5021.0], [56.3, 5024.0], [56.4, 5029.0], [56.5, 5064.0], [56.6, 5076.0], [56.7, 5106.0], [56.8, 5113.0], [56.9, 5123.0], [57.0, 5145.0], [57.1, 5157.0], [57.2, 5174.0], [57.3, 5218.0], [57.4, 5221.0], [57.5, 5231.0], [57.6, 5245.0], [57.7, 5265.0], [57.8, 5299.0], [57.9, 5344.0], [58.0, 5454.0], [58.1, 5466.0], [58.2, 5511.0], [58.3, 5514.0], [58.4, 5543.0], [58.5, 5547.0], [58.6, 5553.0], [58.7, 5559.0], [58.8, 5560.0], [58.9, 5566.0], [59.0, 5571.0], [59.1, 5573.0], [59.2, 5580.0], [59.3, 5582.0], [59.4, 5585.0], [59.5, 5587.0], [59.6, 5595.0], [59.7, 5596.0], [59.8, 5600.0], [59.9, 5606.0], [60.0, 5607.0], [60.1, 5610.0], [60.2, 5616.0], [60.3, 5616.0], [60.4, 5619.0], [60.5, 5621.0], [60.6, 5622.0], [60.7, 5624.0], [60.8, 5626.0], [60.9, 5626.0], [61.0, 5630.0], [61.1, 5632.0], [61.2, 5636.0], [61.3, 5639.0], [61.4, 5645.0], [61.5, 5647.0], [61.6, 5649.0], [61.7, 5652.0], [61.8, 5654.0], [61.9, 5656.0], [62.0, 5657.0], [62.1, 5658.0], [62.2, 5664.0], [62.3, 5665.0], [62.4, 5668.0], [62.5, 5673.0], [62.6, 5682.0], [62.7, 5683.0], [62.8, 5691.0], [62.9, 5699.0], [63.0, 5701.0], [63.1, 5715.0], [63.2, 5724.0], [63.3, 5743.0], [63.4, 5754.0], [63.5, 5763.0], [63.6, 5775.0], [63.7, 5783.0], [63.8, 5798.0], [63.9, 5815.0], [64.0, 5835.0], [64.1, 5838.0], [64.2, 5846.0], [64.3, 5857.0], [64.4, 5863.0], [64.5, 5868.0], [64.6, 5880.0], [64.7, 5883.0], [64.8, 5886.0], [64.9, 5890.0], [65.0, 5897.0], [65.1, 5898.0], [65.2, 5901.0], [65.3, 5902.0], [65.4, 5904.0], [65.5, 5908.0], [65.6, 5920.0], [65.7, 5924.0], [65.8, 5937.0], [65.9, 5938.0], [66.0, 5945.0], [66.1, 5946.0], [66.2, 5958.0], [66.3, 5963.0], [66.4, 5986.0], [66.5, 6000.0], [66.6, 6001.0], [66.7, 6002.0], [66.8, 6005.0], [66.9, 6007.0], [67.0, 6021.0], [67.1, 6024.0], [67.2, 6027.0], [67.3, 6029.0], [67.4, 6032.0], [67.5, 6035.0], [67.6, 6043.0], [67.7, 6050.0], [67.8, 6056.0], [67.9, 6057.0], [68.0, 6063.0], [68.1, 6065.0], [68.2, 6083.0], [68.3, 6087.0], [68.4, 6093.0], [68.5, 6096.0], [68.6, 6104.0], [68.7, 6109.0], [68.8, 6116.0], [68.9, 6116.0], [69.0, 6120.0], [69.1, 6124.0], [69.2, 6125.0], [69.3, 6125.0], [69.4, 6129.0], [69.5, 6130.0], [69.6, 6133.0], [69.7, 6133.0], [69.8, 6137.0], [69.9, 6139.0], [70.0, 6140.0], [70.1, 6141.0], [70.2, 6142.0], [70.3, 6143.0], [70.4, 6146.0], [70.5, 6148.0], [70.6, 6152.0], [70.7, 6153.0], [70.8, 6154.0], [70.9, 6156.0], [71.0, 6162.0], [71.1, 6163.0], [71.2, 6166.0], [71.3, 6168.0], [71.4, 6170.0], [71.5, 6171.0], [71.6, 6175.0], [71.7, 6177.0], [71.8, 6180.0], [71.9, 6181.0], [72.0, 6187.0], [72.1, 6202.0], [72.2, 6218.0], [72.3, 6242.0], [72.4, 6257.0], [72.5, 6259.0], [72.6, 6263.0], [72.7, 6267.0], [72.8, 6276.0], [72.9, 6279.0], [73.0, 6291.0], [73.1, 6297.0], [73.2, 6301.0], [73.3, 6302.0], [73.4, 6303.0], [73.5, 6306.0], [73.6, 6308.0], [73.7, 6310.0], [73.8, 6311.0], [73.9, 6313.0], [74.0, 6315.0], [74.1, 6317.0], [74.2, 6320.0], [74.3, 6322.0], [74.4, 6325.0], [74.5, 6327.0], [74.6, 6328.0], [74.7, 6330.0], [74.8, 6330.0], [74.9, 6331.0], [75.0, 6332.0], [75.1, 6332.0], [75.2, 6336.0], [75.3, 6337.0], [75.4, 6340.0], [75.5, 6341.0], [75.6, 6342.0], [75.7, 6342.0], [75.8, 6347.0], [75.9, 6348.0], [76.0, 6349.0], [76.1, 6349.0], [76.2, 6350.0], [76.3, 6350.0], [76.4, 6351.0], [76.5, 6352.0], [76.6, 6352.0], [76.7, 6353.0], [76.8, 6354.0], [76.9, 6355.0], [77.0, 6357.0], [77.1, 6358.0], [77.2, 6359.0], [77.3, 6360.0], [77.4, 6363.0], [77.5, 6364.0], [77.6, 6365.0], [77.7, 6366.0], [77.8, 6367.0], [77.9, 6367.0], [78.0, 6369.0], [78.1, 6369.0], [78.2, 6370.0], [78.3, 6371.0], [78.4, 6372.0], [78.5, 6373.0], [78.6, 6373.0], [78.7, 6375.0], [78.8, 6376.0], [78.9, 6376.0], [79.0, 6377.0], [79.1, 6378.0], [79.2, 6379.0], [79.3, 6380.0], [79.4, 6380.0], [79.5, 6381.0], [79.6, 6383.0], [79.7, 6383.0], [79.8, 6383.0], [79.9, 6385.0], [80.0, 6386.0], [80.1, 6387.0], [80.2, 6387.0], [80.3, 6388.0], [80.4, 6389.0], [80.5, 6389.0], [80.6, 6392.0], [80.7, 6393.0], [80.8, 6393.0], [80.9, 6395.0], [81.0, 6396.0], [81.1, 6397.0], [81.2, 6397.0], [81.3, 6398.0], [81.4, 6398.0], [81.5, 6400.0], [81.6, 6401.0], [81.7, 6402.0], [81.8, 6403.0], [81.9, 6404.0], [82.0, 6405.0], [82.1, 6405.0], [82.2, 6405.0], [82.3, 6406.0], [82.4, 6407.0], [82.5, 6410.0], [82.6, 6411.0], [82.7, 6412.0], [82.8, 6416.0], [82.9, 6418.0], [83.0, 6420.0], [83.1, 6423.0], [83.2, 6425.0], [83.3, 6426.0], [83.4, 6428.0], [83.5, 6430.0], [83.6, 6431.0], [83.7, 6434.0], [83.8, 6436.0], [83.9, 6436.0], [84.0, 6439.0], [84.1, 6440.0], [84.2, 6441.0], [84.3, 6443.0], [84.4, 6444.0], [84.5, 6448.0], [84.6, 6448.0], [84.7, 6449.0], [84.8, 6449.0], [84.9, 6451.0], [85.0, 6454.0], [85.1, 6454.0], [85.2, 6457.0], [85.3, 6459.0], [85.4, 6459.0], [85.5, 6460.0], [85.6, 6460.0], [85.7, 6463.0], [85.8, 6463.0], [85.9, 6464.0], [86.0, 6464.0], [86.1, 6468.0], [86.2, 6470.0], [86.3, 6470.0], [86.4, 6471.0], [86.5, 6472.0], [86.6, 6474.0], [86.7, 6475.0], [86.8, 6476.0], [86.9, 6477.0], [87.0, 6477.0], [87.1, 6478.0], [87.2, 6481.0], [87.3, 6484.0], [87.4, 6485.0], [87.5, 6485.0], [87.6, 6490.0], [87.7, 6490.0], [87.8, 6492.0], [87.9, 6493.0], [88.0, 6494.0], [88.1, 6497.0], [88.2, 6499.0], [88.3, 6501.0], [88.4, 6503.0], [88.5, 6505.0], [88.6, 6507.0], [88.7, 6508.0], [88.8, 6509.0], [88.9, 6510.0], [89.0, 6511.0], [89.1, 6512.0], [89.2, 6513.0], [89.3, 6514.0], [89.4, 6515.0], [89.5, 6516.0], [89.6, 6518.0], [89.7, 6518.0], [89.8, 6521.0], [89.9, 6524.0], [90.0, 6525.0], [90.1, 6526.0], [90.2, 6527.0], [90.3, 6529.0], [90.4, 6530.0], [90.5, 6531.0], [90.6, 6532.0], [90.7, 6536.0], [90.8, 6537.0], [90.9, 6538.0], [91.0, 6539.0], [91.1, 6542.0], [91.2, 6544.0], [91.3, 6545.0], [91.4, 6547.0], [91.5, 6548.0], [91.6, 6549.0], [91.7, 6551.0], [91.8, 6551.0], [91.9, 6554.0], [92.0, 6554.0], [92.1, 6555.0], [92.2, 6556.0], [92.3, 6559.0], [92.4, 6561.0], [92.5, 6562.0], [92.6, 6562.0], [92.7, 6564.0], [92.8, 6564.0], [92.9, 6565.0], [93.0, 6565.0], [93.1, 6565.0], [93.2, 6566.0], [93.3, 6567.0], [93.4, 6567.0], [93.5, 6569.0], [93.6, 6570.0], [93.7, 6570.0], [93.8, 6571.0], [93.9, 6572.0], [94.0, 6572.0], [94.1, 6573.0], [94.2, 6573.0], [94.3, 6575.0], [94.4, 6575.0], [94.5, 6576.0], [94.6, 6576.0], [94.7, 6576.0], [94.8, 6577.0], [94.9, 6577.0], [95.0, 6577.0], [95.1, 6577.0], [95.2, 6578.0], [95.3, 6578.0], [95.4, 6579.0], [95.5, 6582.0], [95.6, 6582.0], [95.7, 6583.0], [95.8, 6583.0], [95.9, 6585.0], [96.0, 6586.0], [96.1, 6587.0], [96.2, 6587.0], [96.3, 6589.0], [96.4, 6589.0], [96.5, 6591.0], [96.6, 6591.0], [96.7, 6593.0], [96.8, 6594.0], [96.9, 6595.0], [97.0, 6596.0], [97.1, 6596.0], [97.2, 6598.0], [97.3, 6599.0], [97.4, 6599.0], [97.5, 6601.0], [97.6, 6601.0], [97.7, 6603.0], [97.8, 6604.0], [97.9, 6605.0], [98.0, 6606.0], [98.1, 6608.0], [98.2, 6609.0], [98.3, 6609.0], [98.4, 6610.0], [98.5, 6610.0], [98.6, 6612.0], [98.7, 6615.0], [98.8, 6616.0], [98.9, 6616.0], [99.0, 6617.0], [99.1, 6619.0], [99.2, 6620.0], [99.3, 6624.0], [99.4, 6625.0], [99.5, 6626.0], [99.6, 6627.0], [99.7, 6628.0], [99.8, 6628.0], [99.9, 6630.0], [100.0, 6633.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 228.0, "series": [{"data": [[0.0, 4.0], [600.0, 22.0], [700.0, 36.0], [800.0, 33.0], [900.0, 35.0], [1000.0, 29.0], [1100.0, 24.0], [1200.0, 36.0], [1300.0, 30.0], [1400.0, 30.0], [1500.0, 46.0], [1600.0, 36.0], [1700.0, 51.0], [1800.0, 35.0], [1900.0, 27.0], [2000.0, 20.0], [2100.0, 36.0], [2200.0, 38.0], [2300.0, 32.0], [2400.0, 42.0], [2500.0, 43.0], [2600.0, 39.0], [2700.0, 53.0], [2800.0, 28.0], [2900.0, 41.0], [3000.0, 24.0], [3100.0, 46.0], [3200.0, 41.0], [3300.0, 24.0], [3400.0, 68.0], [3500.0, 18.0], [3600.0, 19.0], [3700.0, 37.0], [3800.0, 19.0], [3900.0, 3.0], [4000.0, 3.0], [4200.0, 13.0], [4100.0, 6.0], [4300.0, 18.0], [4400.0, 23.0], [4500.0, 29.0], [4600.0, 26.0], [4700.0, 36.0], [4800.0, 33.0], [4900.0, 31.0], [5000.0, 16.0], [5100.0, 14.0], [5200.0, 15.0], [5300.0, 3.0], [5400.0, 4.0], [5500.0, 42.0], [5600.0, 79.0], [5700.0, 22.0], [5800.0, 33.0], [5900.0, 33.0], [6000.0, 51.0], [6100.0, 89.0], [6200.0, 27.0], [6300.0, 208.0], [6400.0, 170.0], [6500.0, 228.0], [6600.0, 65.0], [300.0, 7.0], [400.0, 12.0], [500.0, 19.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2182.0, "series": [{"data": [[0.0, 23.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 295.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2182.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1315.3708000000015, "minX": 1.75567518E12, "maxY": 1315.3708000000015, "series": [{"data": [[1.75567518E12, 1315.3708000000015]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567518E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 264.0, "minX": 213.0, "maxY": 6620.0, "series": [{"data": [[214.0, 6388.0], [213.0, 6614.0], [221.0, 6033.5], [219.0, 5659.0], [218.0, 6373.0], [216.0, 6402.0], [227.0, 6087.0], [225.0, 6120.0], [224.0, 6146.0], [233.0, 6364.0], [303.0, 6318.694444444444], [307.0, 6602.5], [317.0, 6132.5], [319.0, 5647.0], [316.0, 6500.75], [313.0, 6120.333333333333], [312.0, 6035.75], [309.0, 6360.2], [310.0, 6620.0], [306.0, 6069.333333333333], [305.0, 5984.0], [304.0, 6282.142857142857], [323.0, 5674.0], [329.0, 6368.0], [332.0, 6309.75], [331.0, 6533.333333333333], [327.0, 6616.0], [326.0, 6359.0], [325.0, 6443.5], [324.0, 6444.5], [322.0, 6030.333333333333], [320.0, 6100.5], [339.0, 6610.0], [350.0, 6549.0], [348.0, 6371.0], [345.0, 6378.5], [344.0, 6383.0], [342.0, 5761.0], [341.0, 6587.5], [340.0, 6539.333333333333], [337.0, 6045.25], [336.0, 6311.0], [366.0, 6433.444444444444], [364.0, 6609.0], [361.0, 6505.5], [359.0, 6320.5], [358.0, 6270.5], [356.0, 6496.5], [354.0, 6617.0], [352.0, 6145.2], [383.0, 6042.0], [382.0, 6398.0], [379.0, 6441.0], [377.0, 6387.0], [376.0, 6067.666666666667], [375.0, 6106.0], [373.0, 5901.0], [372.0, 5970.5], [371.0, 6405.0], [368.0, 6160.0], [397.0, 6438.666666666667], [396.0, 6024.333333333333], [395.0, 6444.333333333333], [391.0, 6033.333333333333], [389.0, 5979.0], [387.0, 6347.0], [386.0, 5964.0], [384.0, 6138.5], [403.0, 6474.5], [413.0, 6297.333333333334], [412.0, 6043.0], [410.0, 6332.0], [407.0, 6128.666666666667], [406.0, 6048.0], [404.0, 6163.0], [402.0, 6013.0], [401.0, 6394.6], [423.0, 6279.4], [424.0, 5621.0], [422.0, 6408.5], [421.0, 5893.0], [420.0, 6010.5], [418.0, 6105.5], [417.0, 6372.0], [444.0, 6215.333333333334], [441.0, 6332.0], [458.0, 6423.25], [456.0, 6593.0], [455.0, 6058.0], [454.0, 6301.090909090909], [453.0, 6293.000000000001], [452.0, 5666.0], [451.0, 5667.0], [450.0, 6142.0], [478.0, 6071.142857142857], [475.0, 6376.0], [466.0, 6246.0], [491.0, 5656.0], [490.0, 5767.5], [489.0, 6340.0], [486.0, 5632.0], [485.0, 6607.0], [484.0, 6094.333333333333], [483.0, 6352.666666666667], [481.0, 6142.0], [499.0, 6587.0], [511.0, 6573.0], [508.0, 6256.0], [505.0, 6571.0], [504.0, 5798.0], [502.0, 5968.6], [500.0, 6570.0], [498.0, 6603.0], [497.0, 5672.0], [496.0, 5696.0], [541.0, 6327.0], [543.0, 6523.0], [528.0, 6246.0], [530.0, 6122.0], [529.0, 6461.0], [540.0, 6598.0], [539.0, 6590.0], [538.0, 6589.0], [537.0, 5898.0], [527.0, 6130.0], [513.0, 6355.0], [512.0, 6329.0], [517.0, 6574.0], [514.0, 6308.5], [522.0, 6582.0], [521.0, 6125.0], [535.0, 5883.0], [534.0, 6576.0], [533.0, 5803.0], [532.0, 6505.5], [570.0, 5652.0], [573.0, 6368.0], [575.0, 6006.8], [571.0, 6441.0], [566.0, 6008.5], [565.0, 5615.0], [559.0, 6283.25], [547.0, 6472.714285714285], [545.0, 6583.5], [551.0, 6125.0], [548.0, 6305.666666666667], [557.0, 6570.0], [556.0, 6583.25], [555.0, 6572.0], [554.0, 6475.0], [553.0, 5668.0], [552.0, 6563.0], [605.0, 6304.5], [595.0, 5753.0], [606.0, 5751.0], [592.0, 6323.0], [594.0, 5580.0], [593.0, 6506.0], [603.0, 6330.0], [602.0, 6291.0], [601.0, 6403.0], [583.0, 6586.0], [582.0, 6224.5], [580.0, 5656.0], [578.0, 6109.5], [576.0, 6595.0], [589.0, 6254.0], [588.0, 6322.0], [587.0, 6569.0], [586.0, 5946.0], [585.0, 6404.0], [599.0, 6441.0], [598.0, 6056.0], [597.0, 5990.0], [638.0, 5868.0], [639.0, 6124.0], [625.0, 6573.0], [637.0, 6180.0], [635.0, 6352.0], [634.0, 6408.0], [633.0, 6026.2], [632.0, 6589.0], [615.0, 5948.5], [613.0, 6264.6], [611.0, 6559.0], [608.0, 6330.25], [623.0, 6036.0], [622.0, 6193.0], [620.0, 6576.0], [617.0, 6111.166666666667], [616.0, 6309.0], [627.0, 6325.0], [626.0, 6307.5], [670.0, 6314.0], [671.0, 6244.5], [658.0, 6574.0], [656.0, 5870.5], [668.0, 6372.5], [667.0, 6445.0], [666.0, 5890.0], [664.0, 6036.75], [653.0, 6003.0], [647.0, 6503.0], [646.0, 6208.5], [644.0, 6448.5], [642.0, 6218.666666666667], [641.0, 6243.0], [640.0, 6422.666666666667], [654.0, 5647.0], [652.0, 5922.333333333333], [662.0, 5757.5], [661.0, 5697.5], [660.0, 6079.5], [659.0, 6094.5], [701.0, 6562.0], [703.0, 6350.0], [700.0, 6572.0], [697.0, 6574.0], [696.0, 6350.0], [678.0, 5543.0], [676.0, 6123.5], [675.0, 6354.0], [672.0, 6082.0], [686.0, 6131.75], [685.0, 6202.0], [683.0, 6026.333333333333], [681.0, 6030.0], [680.0, 6148.5], [694.0, 6233.833333333333], [693.0, 6237.5], [692.0, 6463.0], [690.0, 6133.0], [733.0, 6320.2], [735.0, 6430.0], [720.0, 6556.0], [722.0, 6527.0], [721.0, 6297.371428571428], [725.0, 6140.0], [723.0, 6102.0], [732.0, 6267.0], [731.0, 6063.0], [730.0, 6531.0], [729.0, 6512.0], [728.0, 6412.5], [710.0, 6409.333333333333], [709.0, 6068.0], [707.0, 6569.5], [706.0, 6347.0], [716.0, 5572.0], [715.0, 6545.0], [713.0, 6463.0], [712.0, 6284.0], [727.0, 6221.0], [726.0, 6514.333333333333], [761.0, 6395.0], [753.0, 6496.0], [765.0, 6166.5], [767.0, 6478.5], [752.0, 6509.0], [762.0, 6375.0], [760.0, 6368.0], [743.0, 6531.0], [741.0, 6509.0], [740.0, 6317.0], [738.0, 6286.5], [737.0, 6461.25], [750.0, 6341.333333333333], [749.0, 6218.0], [747.0, 6364.0], [745.0, 6506.5], [744.0, 6409.0], [758.0, 6512.0], [755.0, 6513.0], [754.0, 6384.5], [787.0, 6412.0], [796.0, 6501.5], [799.0, 6507.666666666667], [786.0, 6500.5], [785.0, 6499.0], [794.0, 6502.0], [793.0, 6353.0], [792.0, 6490.0], [775.0, 6503.2], [774.0, 6096.0], [773.0, 6511.0], [771.0, 6417.0], [770.0, 6504.0], [768.0, 6525.666666666667], [783.0, 6465.0], [782.0, 6524.0], [780.0, 6507.0], [779.0, 6056.0], [791.0, 6511.0], [790.0, 6493.0], [789.0, 6380.0], [805.0, 6347.4], [802.0, 6451.0], [852.0, 6473.0], [861.0, 6325.666666666667], [860.0, 6478.0], [857.0, 6479.0], [856.0, 6463.0], [847.0, 6438.0], [836.0, 6374.8], [846.0, 6424.772727272727], [840.0, 6477.0], [855.0, 6303.0], [854.0, 6322.666666666667], [853.0, 6478.0], [849.0, 6163.0], [848.0, 6471.0], [893.0, 6324.666666666667], [894.0, 6342.2], [891.0, 6443.0], [889.0, 6444.5], [883.0, 6381.125], [882.0, 6449.0], [877.0, 6448.0], [865.0, 6470.0], [864.0, 6291.166666666666], [867.0, 6453.0], [866.0, 6145.0], [871.0, 6405.0], [870.0, 6460.0], [880.0, 6005.0], [876.0, 6426.5], [872.0, 5981.0], [926.0, 6454.0], [927.0, 6285.0], [923.0, 6454.0], [922.0, 6306.0], [921.0, 6424.0], [920.0, 6409.0], [907.0, 6439.0], [896.0, 6294.5], [903.0, 6459.0], [902.0, 6414.0], [906.0, 6431.333333333334], [905.0, 6459.0], [904.0, 6316.0], [918.0, 6436.0], [917.0, 6446.333333333333], [914.0, 6426.5], [912.0, 6419.666666666667], [958.0, 6391.4], [959.0, 6387.0], [953.0, 6409.0], [935.0, 6410.5], [933.0, 6337.0], [932.0, 6380.5], [930.0, 6298.0], [929.0, 6403.0], [928.0, 6434.0], [951.0, 6376.0], [949.0, 6251.666666666667], [946.0, 6390.0], [944.0, 6417.5], [942.0, 6390.0], [941.0, 6403.0], [940.0, 6400.0], [939.0, 6417.5], [938.0, 6423.0], [936.0, 6406.0], [990.0, 6180.5], [980.0, 6367.0], [991.0, 6027.0], [977.0, 6343.0], [979.0, 6357.0], [978.0, 6361.0], [988.0, 6020.0], [987.0, 6364.5], [985.0, 6034.5], [967.0, 6348.0], [966.0, 6148.0], [964.0, 6398.0], [963.0, 6379.0], [962.0, 5924.0], [961.0, 6396.0], [975.0, 6336.0], [974.0, 6342.0], [973.0, 6240.666666666667], [972.0, 6371.0], [969.0, 6375.0], [983.0, 6376.0], [982.0, 6366.0], [981.0, 6354.0], [1019.0, 5963.0], [1010.0, 5619.0], [1022.0, 6018.5], [1023.0, 5880.0], [1009.0, 6088.0], [1008.0, 6109.0], [1020.0, 5712.5], [1017.0, 5999.25], [999.0, 6311.0], [998.0, 6340.0], [997.0, 6325.5], [995.0, 6353.0], [994.0, 6202.0], [993.0, 6024.0], [992.0, 6206.0], [1007.0, 5636.0], [1006.0, 6141.0], [1005.0, 6137.0], [1004.0, 6063.0], [1003.0, 6125.0], [1002.0, 6167.0], [1001.0, 6278.0], [1000.0, 6269.0], [1013.0, 6005.0], [1012.0, 6026.0], [1011.0, 6045.0], [1080.0, 4438.0], [1064.0, 4387.0], [1084.0, 4471.333333333333], [1058.0, 5431.75], [1078.0, 4482.0], [1076.0, 4481.0], [1050.0, 5514.0], [1026.0, 6002.0], [1030.0, 5783.0], [1028.0, 5920.0], [1034.0, 5719.0], [1032.0, 5763.0], [1038.0, 5200.0], [1036.0, 5682.0], [1048.0, 5527.0], [1046.0, 5343.0], [1042.0, 5153.0], [1040.0, 5645.0], [1070.0, 4478.0], [1068.0, 5274.0], [1066.0, 4467.0], [1062.0, 4429.0], [1060.0, 4428.0], [1138.0, 4733.5], [1148.0, 4889.0], [1150.0, 4992.0], [1122.0, 4709.25], [1128.0, 4721.0], [1124.0, 4710.0], [1146.0, 5220.0], [1144.0, 4872.0], [1140.0, 4859.0], [1136.0, 4733.0], [1100.0, 4549.0], [1098.0, 4549.0], [1096.0, 4379.0], [1094.0, 4474.0], [1092.0, 4419.0], [1088.0, 4348.0], [1116.0, 4686.0], [1114.0, 5273.0], [1112.0, 4605.0], [1110.0, 4579.5], [1108.0, 4569.0], [1104.0, 4559.666666666667], [1134.0, 4732.5], [1130.0, 4732.0], [1202.0, 5003.0], [1210.0, 4996.0], [1214.0, 4947.0], [1184.0, 4911.0], [1188.0, 5018.0], [1186.0, 5107.0], [1192.0, 4932.0], [1190.0, 5076.0], [1208.0, 5002.0], [1206.0, 4782.5], [1204.0, 5021.0], [1200.0, 4969.0], [1166.0, 4961.0], [1164.0, 5245.0], [1160.0, 5168.5], [1158.0, 5197.666666666667], [1156.0, 5240.0], [1182.0, 5123.0], [1180.0, 4676.0], [1178.0, 4902.5], [1174.0, 5042.0], [1172.0, 5174.0], [1170.0, 4991.0], [1168.0, 4884.5], [1198.0, 5024.5], [1194.0, 4925.0], [1272.0, 4696.0], [1248.0, 4345.0], [1276.0, 4639.0], [1252.0, 4832.0], [1254.0, 4780.0], [1258.0, 4807.0], [1260.0, 4294.0], [1262.0, 4738.0], [1278.0, 4619.0], [1274.0, 4620.0], [1270.0, 4682.0], [1268.0, 4227.0], [1266.0, 4692.0], [1264.0, 4755.0], [1246.0, 4820.0], [1218.0, 4877.5], [1216.0, 4965.0], [1230.0, 4846.0], [1222.0, 4914.0], [1244.0, 4349.0], [1242.0, 4859.0], [1238.0, 4847.0], [1234.0, 4840.0], [1232.0, 4838.0], [1340.0, 3809.0], [1312.0, 3787.0], [1316.0, 4056.5], [1314.0, 4013.0], [1318.0, 4103.0], [1322.0, 3967.5], [1326.0, 3847.0], [1324.0, 4221.0], [1342.0, 3801.0], [1338.0, 3812.0], [1336.0, 4013.5], [1334.0, 4198.0], [1332.0, 4206.0], [1330.0, 4169.0], [1328.0, 4024.5], [1294.0, 4158.0], [1292.0, 4409.0], [1290.0, 4541.0], [1288.0, 4549.0], [1284.0, 4605.0], [1280.0, 4611.0], [1310.0, 3916.0], [1308.0, 4170.0], [1306.0, 3857.0], [1304.0, 4242.0], [1302.0, 4398.0], [1300.0, 4423.0], [1298.0, 4371.5], [1296.0, 4334.0], [1396.0, 3649.0], [1398.0, 3577.0], [1404.0, 3564.5], [1376.0, 3725.0], [1380.0, 3692.0], [1388.0, 3668.0], [1390.0, 3664.0], [1406.0, 3561.0], [1402.0, 3568.0], [1400.0, 3574.0], [1394.0, 3578.0], [1392.0, 3661.0], [1358.0, 3677.0], [1356.0, 3776.0], [1354.0, 3777.0], [1350.0, 3784.0], [1348.0, 3788.0], [1344.0, 3790.0], [1374.0, 3728.0], [1368.0, 3748.0], [1366.0, 3757.25], [1362.0, 3756.0], [1360.0, 3770.0], [1442.0, 3445.0], [1448.0, 3457.0], [1440.0, 3446.5], [1444.0, 3451.0], [1450.0, 3449.0], [1452.0, 3454.0], [1456.0, 3437.0], [1408.0, 3561.0], [1410.0, 3534.0], [1412.0, 3504.0], [1414.0, 3501.0], [1416.0, 3497.0], [1420.0, 3491.0], [1438.0, 3446.0], [1436.0, 3444.0], [1434.0, 3458.3333333333335], [1428.0, 3466.0], [1426.0, 3471.0], [1424.0, 3474.0], [1454.0, 3453.0], [1524.0, 3255.0], [1530.0, 3240.0], [1506.0, 3298.5], [1504.0, 3301.0], [1508.0, 3298.0], [1518.0, 3265.0], [1534.0, 3228.0], [1532.0, 3230.0], [1528.0, 3241.0], [1526.0, 3244.5], [1522.0, 3261.0], [1520.0, 3261.5], [1482.0, 3398.0], [1478.0, 3414.0], [1476.0, 3432.5], [1474.0, 3428.0], [1502.0, 3314.0], [1500.0, 3318.0], [1494.0, 3319.0], [1490.0, 3354.0], [1594.0, 3041.0], [1598.0, 3087.0], [1568.0, 3151.0], [1570.0, 3148.0], [1574.0, 3142.0], [1576.0, 3139.0], [1584.0, 3129.0], [1550.0, 3192.0], [1546.0, 3202.0], [1544.0, 3207.0], [1538.0, 3217.5], [1566.0, 3153.0], [1564.0, 3154.0], [1562.0, 3165.0], [1558.0, 3173.0], [1556.0, 3173.0], [1554.0, 3178.0], [1552.0, 3187.0], [1582.0, 3130.0], [1658.0, 2896.0], [1634.0, 2964.0], [1638.0, 2960.0], [1636.0, 2966.0], [1640.0, 2950.0], [1644.0, 2930.0], [1646.0, 2928.0], [1662.0, 2888.5], [1660.0, 2892.0], [1656.0, 2900.0], [1654.0, 2917.5], [1652.0, 2918.0], [1648.0, 2923.0], [1614.0, 3000.0], [1612.0, 3005.0], [1610.0, 3011.0], [1606.0, 3021.5], [1604.0, 3021.0], [1628.0, 2974.0], [1626.0, 2978.0], [1624.0, 2979.0], [1618.0, 2992.0], [1616.0, 2993.0], [1720.0, 2741.0], [1702.0, 2769.0], [1696.0, 2781.0], [1698.0, 2778.0], [1700.0, 2771.0], [1704.0, 2766.0], [1706.0, 2764.0], [1710.0, 2758.3333333333335], [1726.0, 2726.0], [1722.0, 2734.0], [1718.0, 2752.0], [1716.0, 2752.0], [1712.0, 2755.0], [1666.0, 2871.6666666666665], [1668.0, 2856.0], [1670.0, 2831.0], [1674.0, 2826.0], [1672.0, 2827.0], [1676.0, 2816.0], [1694.0, 2784.0], [1692.0, 2790.5], [1690.0, 2795.25], [1686.0, 2799.0], [1684.0, 2801.0], [1682.0, 2804.0], [1680.0, 2811.0], [1784.0, 2586.0], [1762.0, 2648.0], [1760.0, 2658.5], [1766.0, 2643.5], [1764.0, 2647.3333333333335], [1772.0, 2629.0], [1774.0, 2599.0], [1788.0, 2587.0], [1786.0, 2582.0], [1782.0, 2591.0], [1780.0, 2597.0], [1778.0, 2599.0], [1776.0, 2602.5], [1758.0, 2664.0], [1728.0, 2724.0], [1732.0, 2713.5], [1730.0, 2716.0], [1734.0, 2708.0], [1736.0, 2705.0], [1738.0, 2702.0], [1740.0, 2696.0], [1742.0, 2693.0], [1756.0, 2668.0], [1750.0, 2677.0], [1748.0, 2685.5], [1746.0, 2688.0], [1850.0, 2430.0], [1824.0, 2489.0], [1826.0, 2487.0], [1828.0, 2483.0], [1830.0, 2474.0], [1832.0, 2470.0], [1834.0, 2467.0], [1838.0, 2457.0], [1852.0, 2427.0], [1848.0, 2429.0], [1844.0, 2435.0], [1842.0, 2444.0], [1806.0, 2538.0], [1804.0, 2540.0], [1802.0, 2544.0], [1798.0, 2557.0], [1796.0, 2562.0], [1794.0, 2565.0], [1820.0, 2500.0], [1818.0, 2502.0], [1816.0, 2508.0], [1814.0, 2513.0], [1812.0, 2523.0], [1810.0, 2530.3333333333335], [1906.0, 2324.0], [1918.0, 2308.0], [1916.0, 2311.0], [1914.0, 2317.0], [1858.0, 2410.0], [1862.0, 2407.0], [1860.0, 2407.5], [1864.0, 2393.0], [1884.0, 2348.3333333333335], [1882.0, 2350.0], [1876.0, 2353.0], [1872.0, 2362.0], [1920.0, 2305.0], [1964.0, 2259.0], [1980.0, 2244.0], [1930.0, 2297.0], [1950.0, 2268.0], [1948.0, 2275.0], [1940.0, 2281.0], [1938.0, 2284.0], [1936.0, 2286.0], [1966.0, 2253.0], [1958.0, 2263.0], [2016.0, 2197.0], [2026.0, 2186.0], [2034.0, 2177.0], [1988.0, 2229.0], [1984.0, 2237.0], [2004.0, 2212.0], [2000.0, 2215.0], [2028.0, 2183.0], [2020.0, 2194.0], [2168.0, 1908.0], [2116.0, 1794.0], [2132.0, 1772.5], [2136.0, 1949.0], [2172.0, 1906.0], [2160.0, 1758.0], [2156.0, 1927.0], [2152.0, 1744.0], [2148.0, 1935.0], [2068.0, 1922.0], [2076.0, 1950.3333333333333], [2100.0, 1771.0], [2096.0, 1832.0], [2092.0, 1922.0], [2084.0, 1842.0], [2300.0, 1515.0], [2240.0, 1798.0], [2256.0, 1694.0], [2260.0, 1595.0], [2296.0, 1706.0], [2288.0, 1561.0], [2284.0, 1623.3333333333333], [2272.0, 1562.0], [2176.0, 1790.5], [2184.0, 1812.5], [2192.0, 1727.0], [2196.0, 1884.0], [2200.0, 1688.0], [2204.0, 1701.0], [2236.0, 1805.0], [2420.0, 1386.0], [2424.0, 1427.0], [2428.0, 1290.0], [2368.0, 1455.0], [2388.0, 1513.75], [2396.0, 1401.5], [2412.0, 1450.0], [2400.0, 1389.25], [2304.0, 1686.0], [2312.0, 1512.0], [2316.0, 1538.0], [2328.0, 1521.5], [2364.0, 1460.0], [2360.0, 1470.0], [2352.0, 1411.0], [2348.0, 1598.0], [2336.0, 1399.0], [2440.0, 1271.0], [2496.0, 386.0], [2432.0, 1411.0], [2444.0, 1163.0], [2448.0, 1380.5], [2452.0, 1238.0], [2460.0, 1215.0], [2488.0, 475.0], [2484.0, 399.0], [2480.0, 494.0], [2476.0, 1181.0], [2468.0, 1267.0], [2145.0, 1941.0], [2117.0, 1983.0], [2121.0, 1973.0], [2125.0, 1878.5], [2137.0, 1950.0], [2141.0, 1946.0], [2049.0, 2072.0], [2053.0, 2060.0], [2061.0, 2063.5], [2057.0, 2054.0], [2065.0, 1811.0], [2069.0, 1829.0], [2073.0, 1824.0], [2105.0, 2002.0], [2093.0, 2011.0], [2089.0, 2016.0], [2085.0, 1827.0], [2081.0, 2027.0], [2245.0, 1726.0], [2297.0, 1544.0], [2253.0, 1675.5], [2257.0, 1564.0], [2261.0, 1639.0], [2265.0, 1632.0], [2269.0, 1752.5], [2285.0, 1714.0], [2281.0, 1589.0], [2277.0, 1622.1818181818182], [2181.0, 1813.5], [2189.0, 1890.0], [2201.0, 1704.0], [2233.0, 1811.5], [2213.0, 1860.0], [2209.0, 1870.0], [2413.0, 1448.0], [2369.0, 1585.0], [2373.0, 1516.0], [2393.0, 1302.0], [2429.0, 1362.0], [2425.0, 1423.0], [2421.0, 1231.0], [2417.0, 1302.5], [2405.0, 1390.6666666666667], [2309.0, 1609.0], [2317.0, 1469.0], [2321.0, 1500.0], [2329.0, 1581.0], [2333.0, 1447.0], [2361.0, 1438.0], [2357.0, 1431.0], [2353.0, 1502.0], [2349.0, 1508.0], [2337.0, 1399.0], [2441.0, 1160.0], [2485.0, 479.0], [2489.0, 570.0], [2497.0, 444.5], [2433.0, 1183.0], [2445.0, 1264.0], [2457.0, 1214.0], [2461.0, 1101.0], [2473.0, 1308.0], [2469.0, 1311.0], [2465.0, 1269.5], [1083.0, 4485.0], [1065.0, 5265.0], [1087.0, 4399.0], [1059.0, 5299.0], [1057.0, 5344.0], [1063.0, 3947.0], [1061.0, 4413.0], [1077.0, 4362.0], [1075.0, 4480.0], [1073.0, 4479.0], [1039.0, 5652.0], [1037.0, 5708.0], [1035.0, 5673.0], [1033.0, 5724.0], [1031.0, 5305.0], [1029.0, 5765.0], [1027.0, 5958.0], [1025.0, 5950.5], [1053.0, 5506.0], [1051.0, 5507.0], [1049.0, 5437.0], [1047.0, 5581.0], [1041.0, 5600.0], [1071.0, 4475.0], [1069.0, 4473.0], [1067.0, 4465.0], [1143.0, 4879.0], [1151.0, 4765.0], [1141.0, 4861.0], [1137.0, 4732.0], [1135.0, 4729.0], [1133.0, 4731.5], [1129.0, 4859.0], [1121.0, 4699.0], [1119.0, 4693.0], [1095.0, 4382.0], [1101.0, 4552.0], [1097.0, 4546.0], [1115.0, 4688.0], [1113.0, 4612.0], [1107.0, 4568.0], [1105.0, 4559.0], [1203.0, 4970.0], [1213.0, 4847.0], [1215.0, 4978.0], [1187.0, 5029.0], [1185.0, 4926.0], [1191.0, 5011.0], [1189.0, 5098.0], [1195.0, 4915.0], [1193.0, 5070.0], [1211.0, 4953.0], [1209.0, 4990.0], [1207.0, 4526.0], [1201.0, 5028.0], [1165.0, 5257.0], [1163.0, 4992.5], [1161.0, 4912.0], [1155.0, 5146.333333333333], [1183.0, 5119.0], [1181.0, 4938.0], [1179.0, 5157.0], [1177.0, 4740.0], [1175.0, 5160.0], [1173.0, 5172.0], [1171.0, 4988.0], [1169.0, 4992.0], [1199.0, 5022.0], [1197.0, 5024.0], [1277.0, 4559.0], [1279.0, 4614.0], [1249.0, 4343.0], [1251.0, 4679.5], [1253.0, 4805.0], [1257.0, 4779.0], [1255.0, 4698.0], [1259.0, 4768.0], [1261.0, 4293.0], [1263.0, 4767.0], [1275.0, 4628.0], [1273.0, 4669.0], [1271.0, 4560.0], [1269.0, 4680.0], [1267.0, 4702.0], [1265.0, 4716.0], [1247.0, 4812.0], [1223.0, 4909.0], [1221.0, 4921.0], [1231.0, 4868.0], [1229.0, 4895.166666666666], [1245.0, 4844.0], [1243.0, 4780.0], [1241.0, 4828.333333333333], [1237.0, 4864.5], [1235.0, 4833.0], [1233.0, 4826.0], [1329.0, 3846.0], [1331.0, 3843.0], [1343.0, 3792.0], [1317.0, 4112.0], [1323.0, 3854.0], [1341.0, 3804.0], [1339.0, 3809.0], [1337.0, 3816.0], [1333.0, 4230.0], [1295.0, 4481.0], [1293.0, 4470.0], [1291.0, 4555.0], [1289.0, 4530.666666666667], [1285.0, 4573.0], [1283.0, 4584.5], [1281.0, 4595.0], [1311.0, 3793.0], [1309.0, 3807.0], [1307.0, 3955.0], [1305.0, 4306.0], [1303.0, 4030.0], [1301.0, 4071.0], [1299.0, 4078.0], [1405.0, 3563.0], [1381.0, 3689.0], [1407.0, 3560.0], [1377.0, 3722.0], [1379.0, 3707.0], [1383.0, 3646.5], [1387.0, 3672.0], [1385.0, 3681.5], [1389.0, 3668.0], [1391.0, 3594.0], [1399.0, 3641.0], [1397.0, 3579.0], [1393.0, 3661.0], [1357.0, 3775.0], [1355.0, 3779.0], [1353.0, 3731.5], [1351.0, 3779.0], [1347.0, 3789.0], [1345.0, 3790.0], [1375.0, 3724.0], [1373.0, 3739.3333333333335], [1361.0, 3765.0], [1467.0, 3431.0], [1465.0, 3437.0], [1471.0, 3432.5], [1443.0, 3443.0], [1447.0, 3450.0], [1445.0, 3452.0], [1449.0, 3451.0], [1451.0, 3447.0], [1453.0, 3451.0], [1469.0, 3439.0], [1463.0, 3441.0], [1461.0, 3439.0], [1459.0, 3442.0], [1439.0, 3456.5], [1409.0, 3533.0], [1411.0, 3507.0], [1415.0, 3499.0], [1417.0, 3494.0], [1419.0, 3492.5], [1423.0, 3478.0], [1421.0, 3485.0], [1431.0, 3460.3333333333335], [1427.0, 3466.0], [1455.0, 3448.0], [1529.0, 3242.0], [1535.0, 3218.0], [1509.0, 3297.0], [1515.0, 3281.0], [1513.0, 3281.0], [1517.0, 3280.166666666667], [1527.0, 3244.0], [1485.0, 3396.5], [1483.0, 3396.0], [1481.0, 3415.0], [1479.0, 3413.0], [1477.0, 3416.0], [1473.0, 3437.6666666666665], [1503.0, 3308.0], [1501.0, 3315.0], [1499.0, 3320.6], [1493.0, 3351.0], [1491.0, 3350.0], [1489.0, 3352.5], [1585.0, 3125.0], [1599.0, 3062.0], [1569.0, 3151.0], [1571.0, 3146.0], [1573.0, 3146.0], [1575.0, 3142.0], [1581.0, 3134.5], [1579.0, 3138.6666666666665], [1593.0, 3101.833333333333], [1589.0, 3111.0], [1551.0, 3187.0], [1549.0, 3193.5], [1547.0, 3195.0], [1545.0, 3207.0], [1543.0, 3212.0], [1541.0, 3213.0], [1539.0, 3215.0], [1537.0, 3219.0], [1565.0, 3156.0], [1563.0, 3163.0], [1561.0, 3166.5], [1559.0, 3168.0], [1557.0, 3171.0], [1555.0, 3174.0], [1553.0, 3182.0], [1583.0, 3130.0], [1655.0, 2902.0], [1639.0, 2957.0], [1659.0, 2896.0], [1663.0, 2885.0], [1633.0, 2967.0], [1635.0, 2958.0], [1643.0, 2933.5], [1641.0, 2966.0], [1645.0, 2937.0], [1647.0, 2924.0], [1657.0, 2900.0], [1651.0, 2919.5], [1649.0, 2921.0], [1615.0, 3000.0], [1613.0, 3002.0], [1611.0, 3004.0], [1609.0, 3013.5], [1607.0, 3016.0], [1605.0, 3074.0], [1603.0, 3053.5], [1601.0, 3025.0], [1631.0, 2968.5], [1629.0, 2970.0], [1627.0, 2977.0], [1625.0, 2972.0], [1623.0, 2985.6666666666665], [1621.0, 2988.0], [1619.0, 3048.0], [1617.0, 2991.0], [1697.0, 2785.0], [1719.0, 2747.0], [1723.0, 2734.0], [1727.0, 2725.0], [1701.0, 2770.0], [1703.0, 2765.0], [1705.0, 2764.0], [1707.0, 2760.0], [1711.0, 2757.0], [1725.0, 2727.0], [1721.0, 2739.0], [1717.0, 2751.0], [1695.0, 2785.0], [1669.0, 2854.5], [1671.0, 2829.0], [1675.0, 2826.0], [1679.0, 2813.5], [1677.0, 2816.0], [1693.0, 2787.0], [1685.0, 2800.0], [1683.0, 2803.0], [1681.0, 2805.0], [1779.0, 2601.0], [1787.0, 2588.0], [1791.0, 2572.0], [1767.0, 2641.0], [1773.0, 2628.3333333333335], [1789.0, 2584.0], [1785.0, 2586.0], [1783.0, 2588.0], [1781.0, 2597.0], [1729.0, 2720.0], [1733.0, 2711.0], [1735.0, 2706.0], [1739.0, 2698.0], [1741.0, 2692.0], [1743.0, 2691.0], [1757.0, 2667.0], [1755.0, 2670.0], [1753.0, 2671.0], [1751.0, 2674.0], [1749.0, 2676.0], [1853.0, 2427.0], [1831.0, 2473.0], [1855.0, 2431.5], [1825.0, 2487.0], [1827.0, 2483.0], [1829.0, 2477.0], [1833.0, 2468.0], [1837.0, 2459.0], [1835.0, 2466.0], [1839.0, 2456.0], [1847.0, 2439.0], [1845.0, 2440.0], [1843.0, 2442.0], [1841.0, 2442.5], [1807.0, 2538.0], [1805.0, 2540.0], [1803.0, 2544.0], [1801.0, 2550.0], [1799.0, 2552.0], [1797.0, 2560.0], [1823.0, 2494.5], [1821.0, 2497.0], [1819.0, 2500.0], [1817.0, 2506.0], [1815.0, 2509.0], [1813.0, 2522.0], [1811.0, 2527.0], [1915.0, 2316.0], [1905.0, 2326.0], [1919.0, 2305.0], [1889.0, 2341.5], [1895.0, 2332.0], [1891.0, 2339.0], [1913.0, 2319.0], [1885.0, 2345.0], [1857.0, 2425.0], [1865.0, 2371.0], [1875.0, 2357.5], [1873.0, 2358.0], [1903.0, 2327.0], [1901.0, 2328.0], [1931.0, 2294.0], [1951.0, 2267.0], [1979.0, 2244.0], [1975.0, 2247.0], [1935.0, 2288.0], [1947.0, 2276.0], [1945.0, 2277.0], [1943.0, 2279.0], [1941.0, 2281.0], [1937.0, 2285.0], [1967.0, 2251.0], [1965.0, 2256.5], [1959.0, 2261.0], [2041.0, 2172.0], [2017.0, 2197.0], [2045.0, 2142.681818181818], [2019.0, 2195.0], [1997.0, 2221.0], [1987.0, 2233.5], [1985.0, 2237.0], [2015.0, 2201.0], [2009.0, 2203.0], [2005.0, 2206.0], [2001.0, 2214.0], [2031.0, 2182.0], [2027.0, 2185.0], [2023.0, 2189.0], [2162.0, 1823.0], [2174.0, 1904.0], [2118.0, 1982.0], [2130.0, 1762.0], [2126.0, 1970.0], [2134.0, 1870.0], [2138.0, 1765.0], [2142.0, 1715.0], [2166.0, 1687.0], [2158.0, 1836.5], [2154.0, 1845.0], [2150.0, 1935.0], [2146.0, 1758.0], [2066.0, 2042.0], [2078.0, 2026.0], [2106.0, 1997.0], [2090.0, 2011.0], [2086.0, 2020.0], [2082.0, 1846.0], [2246.0, 1788.0], [2298.0, 1538.0], [2290.0, 1708.0], [2302.0, 1610.5], [2258.0, 1641.0], [2262.0, 1634.0], [2266.0, 1811.0], [2270.0, 1622.0], [2294.0, 1584.0], [2274.0, 1739.0], [2190.0, 1723.0], [2194.0, 1804.5], [2198.0, 1724.0], [2202.0, 1657.0], [2238.0, 1670.5], [2234.0, 1598.0], [2230.0, 1781.2], [2430.0, 1362.0], [2370.0, 1584.0], [2382.0, 1496.0], [2390.0, 1439.5], [2426.0, 1297.0], [2410.0, 1319.0], [2314.0, 1675.0], [2318.0, 1670.0], [2330.0, 1503.0], [2362.0, 1359.0], [2354.0, 1417.0], [2486.0, 480.0], [2442.0, 1244.0], [2490.0, 461.0], [2446.0, 1231.0], [2450.0, 1243.0], [2458.0, 1215.5], [2482.0, 264.0], [2478.0, 872.6048780487806], [2474.0, 1304.0], [2470.0, 1162.0], [2167.0, 1912.0], [2171.0, 1679.0], [2115.0, 1794.0], [2123.0, 1799.5], [2143.0, 1942.0], [2163.0, 1753.0], [2147.0, 1941.0], [2111.0, 1898.0], [2051.0, 2072.0], [2075.0, 1854.0], [2107.0, 1820.0], [2103.0, 1909.5], [2083.0, 1830.0], [2247.0, 1580.0], [2295.0, 1544.0], [2251.0, 1678.6666666666667], [2259.0, 1636.0], [2263.0, 1630.0], [2267.0, 1678.0], [2271.0, 1579.0], [2287.0, 1591.0], [2283.0, 1716.0], [2279.0, 1537.0], [2239.0, 1719.0], [2179.0, 1896.5], [2187.0, 1891.5], [2195.0, 1882.0], [2199.0, 1772.0], [2203.0, 1877.0], [2231.0, 1814.0], [2215.0, 1671.0], [2419.0, 1387.0], [2411.0, 1396.0], [2423.0, 1430.0], [2431.0, 1178.0], [2375.0, 1438.0], [2391.0, 1386.0], [2415.0, 1369.5], [2407.0, 1458.0], [2367.0, 1400.5], [2311.0, 1643.0], [2323.0, 1544.0], [2331.0, 1648.0], [2363.0, 1527.0], [2351.0, 1459.0], [2339.0, 1565.5], [2443.0, 1165.0], [2439.0, 1397.0], [2451.0, 1129.0], [2455.0, 1266.0], [2459.0, 1351.0], [2463.0, 1183.0], [2487.0, 484.0], [2483.0, 482.0], [2479.0, 487.0], [2467.0, 1255.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}, {"data": [[1315.3680000000033, 4181.2855999999965]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2497.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20375.0, "minX": 1.75567518E12, "maxY": 49000.0, "series": [{"data": [[1.75567518E12, 49000.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75567518E12, 20375.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567518E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4181.2855999999965, "minX": 1.75567518E12, "maxY": 4181.2855999999965, "series": [{"data": [[1.75567518E12, 4181.2855999999965]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567518E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4181.246000000003, "minX": 1.75567518E12, "maxY": 4181.246000000003, "series": [{"data": [[1.75567518E12, 4181.246000000003]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567518E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3701.6532, "minX": 1.75567518E12, "maxY": 3701.6532, "series": [{"data": [[1.75567518E12, 3701.6532]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567518E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 39.0, "minX": 1.75567518E12, "maxY": 6633.0, "series": [{"data": [[1.75567518E12, 6633.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75567518E12, 6525.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75567518E12, 6617.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75567518E12, 6577.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75567518E12, 39.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75567518E12, 4531.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567518E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 889.0, "minX": 168.0, "maxY": 6385.0, "series": [{"data": [[260.0, 889.0], [168.0, 4687.0], [173.0, 4893.0], [412.0, 1835.0], [486.0, 3118.5], [1001.0, 6385.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1001.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 889.0, "minX": 168.0, "maxY": 6385.0, "series": [{"data": [[260.0, 889.0], [168.0, 4687.0], [173.0, 4893.0], [412.0, 1835.0], [486.0, 3118.5], [1001.0, 6385.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1001.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567518E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567518E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567518E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567518E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567518E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567518E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567518E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567518E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567518E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75567518E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75567518E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567518E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

