/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 201.0, "minX": 0.0, "maxY": 3600.0, "series": [{"data": [[0.0, 201.0], [0.1, 212.0], [0.2, 214.0], [0.3, 214.0], [0.4, 236.0], [0.5, 239.0], [0.6, 244.0], [0.7, 253.0], [0.8, 259.0], [0.9, 270.0], [1.0, 273.0], [1.1, 278.0], [1.2, 291.0], [1.3, 291.0], [1.4, 291.0], [1.5, 292.0], [1.6, 294.0], [1.7, 294.0], [1.8, 296.0], [1.9, 297.0], [2.0, 297.0], [2.1, 298.0], [2.2, 299.0], [2.3, 299.0], [2.4, 301.0], [2.5, 301.0], [2.6, 303.0], [2.7, 305.0], [2.8, 305.0], [2.9, 306.0], [3.0, 306.0], [3.1, 307.0], [3.2, 307.0], [3.3, 310.0], [3.4, 310.0], [3.5, 310.0], [3.6, 310.0], [3.7, 311.0], [3.8, 311.0], [3.9, 312.0], [4.0, 312.0], [4.1, 313.0], [4.2, 313.0], [4.3, 313.0], [4.4, 313.0], [4.5, 313.0], [4.6, 315.0], [4.7, 315.0], [4.8, 315.0], [4.9, 316.0], [5.0, 316.0], [5.1, 316.0], [5.2, 317.0], [5.3, 317.0], [5.4, 318.0], [5.5, 318.0], [5.6, 319.0], [5.7, 319.0], [5.8, 319.0], [5.9, 322.0], [6.0, 322.0], [6.1, 322.0], [6.2, 322.0], [6.3, 322.0], [6.4, 323.0], [6.5, 324.0], [6.6, 324.0], [6.7, 325.0], [6.8, 325.0], [6.9, 325.0], [7.0, 325.0], [7.1, 325.0], [7.2, 326.0], [7.3, 326.0], [7.4, 327.0], [7.5, 327.0], [7.6, 327.0], [7.7, 327.0], [7.8, 327.0], [7.9, 328.0], [8.0, 328.0], [8.1, 328.0], [8.2, 328.0], [8.3, 328.0], [8.4, 329.0], [8.5, 329.0], [8.6, 330.0], [8.7, 330.0], [8.8, 331.0], [8.9, 331.0], [9.0, 331.0], [9.1, 331.0], [9.2, 333.0], [9.3, 333.0], [9.4, 334.0], [9.5, 334.0], [9.6, 335.0], [9.7, 336.0], [9.8, 336.0], [9.9, 337.0], [10.0, 338.0], [10.1, 339.0], [10.2, 339.0], [10.3, 339.0], [10.4, 340.0], [10.5, 340.0], [10.6, 340.0], [10.7, 342.0], [10.8, 343.0], [10.9, 343.0], [11.0, 344.0], [11.1, 344.0], [11.2, 344.0], [11.3, 345.0], [11.4, 345.0], [11.5, 346.0], [11.6, 346.0], [11.7, 346.0], [11.8, 346.0], [11.9, 347.0], [12.0, 347.0], [12.1, 347.0], [12.2, 347.0], [12.3, 348.0], [12.4, 349.0], [12.5, 349.0], [12.6, 349.0], [12.7, 349.0], [12.8, 349.0], [12.9, 349.0], [13.0, 349.0], [13.1, 349.0], [13.2, 350.0], [13.3, 351.0], [13.4, 351.0], [13.5, 352.0], [13.6, 353.0], [13.7, 354.0], [13.8, 355.0], [13.9, 356.0], [14.0, 356.0], [14.1, 356.0], [14.2, 357.0], [14.3, 357.0], [14.4, 359.0], [14.5, 359.0], [14.6, 359.0], [14.7, 360.0], [14.8, 360.0], [14.9, 361.0], [15.0, 361.0], [15.1, 362.0], [15.2, 364.0], [15.3, 364.0], [15.4, 365.0], [15.5, 365.0], [15.6, 365.0], [15.7, 366.0], [15.8, 369.0], [15.9, 369.0], [16.0, 372.0], [16.1, 372.0], [16.2, 373.0], [16.3, 373.0], [16.4, 374.0], [16.5, 374.0], [16.6, 377.0], [16.7, 379.0], [16.8, 379.0], [16.9, 381.0], [17.0, 383.0], [17.1, 383.0], [17.2, 385.0], [17.3, 388.0], [17.4, 391.0], [17.5, 391.0], [17.6, 391.0], [17.7, 392.0], [17.8, 396.0], [17.9, 396.0], [18.0, 397.0], [18.1, 398.0], [18.2, 398.0], [18.3, 399.0], [18.4, 399.0], [18.5, 401.0], [18.6, 402.0], [18.7, 403.0], [18.8, 403.0], [18.9, 405.0], [19.0, 405.0], [19.1, 406.0], [19.2, 407.0], [19.3, 408.0], [19.4, 408.0], [19.5, 409.0], [19.6, 410.0], [19.7, 413.0], [19.8, 414.0], [19.9, 415.0], [20.0, 415.0], [20.1, 415.0], [20.2, 418.0], [20.3, 419.0], [20.4, 420.0], [20.5, 420.0], [20.6, 424.0], [20.7, 428.0], [20.8, 429.0], [20.9, 431.0], [21.0, 435.0], [21.1, 436.0], [21.2, 438.0], [21.3, 440.0], [21.4, 441.0], [21.5, 442.0], [21.6, 444.0], [21.7, 446.0], [21.8, 456.0], [21.9, 468.0], [22.0, 470.0], [22.1, 473.0], [22.2, 478.0], [22.3, 481.0], [22.4, 484.0], [22.5, 484.0], [22.6, 495.0], [22.7, 503.0], [22.8, 518.0], [22.9, 523.0], [23.0, 524.0], [23.1, 525.0], [23.2, 526.0], [23.3, 527.0], [23.4, 533.0], [23.5, 534.0], [23.6, 536.0], [23.7, 539.0], [23.8, 541.0], [23.9, 541.0], [24.0, 545.0], [24.1, 546.0], [24.2, 546.0], [24.3, 548.0], [24.4, 553.0], [24.5, 560.0], [24.6, 563.0], [24.7, 565.0], [24.8, 567.0], [24.9, 572.0], [25.0, 581.0], [25.1, 604.0], [25.2, 651.0], [25.3, 661.0], [25.4, 666.0], [25.5, 667.0], [25.6, 667.0], [25.7, 673.0], [25.8, 673.0], [25.9, 678.0], [26.0, 679.0], [26.1, 683.0], [26.2, 698.0], [26.3, 700.0], [26.4, 716.0], [26.5, 726.0], [26.6, 744.0], [26.7, 744.0], [26.8, 745.0], [26.9, 747.0], [27.0, 751.0], [27.1, 751.0], [27.2, 754.0], [27.3, 761.0], [27.4, 766.0], [27.5, 774.0], [27.6, 777.0], [27.7, 797.0], [27.8, 799.0], [27.9, 803.0], [28.0, 806.0], [28.1, 806.0], [28.2, 810.0], [28.3, 812.0], [28.4, 812.0], [28.5, 819.0], [28.6, 822.0], [28.7, 824.0], [28.8, 834.0], [28.9, 836.0], [29.0, 840.0], [29.1, 841.0], [29.2, 844.0], [29.3, 844.0], [29.4, 851.0], [29.5, 852.0], [29.6, 858.0], [29.7, 863.0], [29.8, 864.0], [29.9, 867.0], [30.0, 867.0], [30.1, 868.0], [30.2, 869.0], [30.3, 870.0], [30.4, 874.0], [30.5, 878.0], [30.6, 878.0], [30.7, 879.0], [30.8, 880.0], [30.9, 883.0], [31.0, 887.0], [31.1, 889.0], [31.2, 891.0], [31.3, 891.0], [31.4, 893.0], [31.5, 896.0], [31.6, 898.0], [31.7, 902.0], [31.8, 906.0], [31.9, 907.0], [32.0, 912.0], [32.1, 919.0], [32.2, 919.0], [32.3, 923.0], [32.4, 927.0], [32.5, 929.0], [32.6, 931.0], [32.7, 933.0], [32.8, 937.0], [32.9, 938.0], [33.0, 938.0], [33.1, 947.0], [33.2, 949.0], [33.3, 949.0], [33.4, 954.0], [33.5, 961.0], [33.6, 976.0], [33.7, 981.0], [33.8, 988.0], [33.9, 994.0], [34.0, 997.0], [34.1, 997.0], [34.2, 999.0], [34.3, 1003.0], [34.4, 1004.0], [34.5, 1004.0], [34.6, 1007.0], [34.7, 1007.0], [34.8, 1008.0], [34.9, 1010.0], [35.0, 1014.0], [35.1, 1015.0], [35.2, 1021.0], [35.3, 1022.0], [35.4, 1026.0], [35.5, 1026.0], [35.6, 1030.0], [35.7, 1040.0], [35.8, 1042.0], [35.9, 1044.0], [36.0, 1049.0], [36.1, 1049.0], [36.2, 1051.0], [36.3, 1052.0], [36.4, 1054.0], [36.5, 1055.0], [36.6, 1058.0], [36.7, 1058.0], [36.8, 1061.0], [36.9, 1064.0], [37.0, 1068.0], [37.1, 1072.0], [37.2, 1074.0], [37.3, 1077.0], [37.4, 1085.0], [37.5, 1089.0], [37.6, 1090.0], [37.7, 1100.0], [37.8, 1111.0], [37.9, 1119.0], [38.0, 1123.0], [38.1, 1125.0], [38.2, 1125.0], [38.3, 1133.0], [38.4, 1136.0], [38.5, 1139.0], [38.6, 1142.0], [38.7, 1149.0], [38.8, 1151.0], [38.9, 1152.0], [39.0, 1158.0], [39.1, 1163.0], [39.2, 1172.0], [39.3, 1173.0], [39.4, 1177.0], [39.5, 1191.0], [39.6, 1192.0], [39.7, 1192.0], [39.8, 1195.0], [39.9, 1205.0], [40.0, 1213.0], [40.1, 1218.0], [40.2, 1227.0], [40.3, 1237.0], [40.4, 1238.0], [40.5, 1241.0], [40.6, 1245.0], [40.7, 1252.0], [40.8, 1252.0], [40.9, 1252.0], [41.0, 1256.0], [41.1, 1256.0], [41.2, 1260.0], [41.3, 1261.0], [41.4, 1263.0], [41.5, 1265.0], [41.6, 1268.0], [41.7, 1272.0], [41.8, 1276.0], [41.9, 1279.0], [42.0, 1279.0], [42.1, 1287.0], [42.2, 1289.0], [42.3, 1290.0], [42.4, 1292.0], [42.5, 1301.0], [42.6, 1302.0], [42.7, 1311.0], [42.8, 1315.0], [42.9, 1324.0], [43.0, 1327.0], [43.1, 1328.0], [43.2, 1331.0], [43.3, 1333.0], [43.4, 1336.0], [43.5, 1341.0], [43.6, 1358.0], [43.7, 1368.0], [43.8, 1368.0], [43.9, 1370.0], [44.0, 1383.0], [44.1, 1387.0], [44.2, 1388.0], [44.3, 1394.0], [44.4, 1398.0], [44.5, 1404.0], [44.6, 1412.0], [44.7, 1423.0], [44.8, 1426.0], [44.9, 1426.0], [45.0, 1430.0], [45.1, 1430.0], [45.2, 1434.0], [45.3, 1436.0], [45.4, 1468.0], [45.5, 1472.0], [45.6, 1474.0], [45.7, 1491.0], [45.8, 1498.0], [45.9, 1500.0], [46.0, 1521.0], [46.1, 1536.0], [46.2, 1549.0], [46.3, 1550.0], [46.4, 1554.0], [46.5, 1557.0], [46.6, 1558.0], [46.7, 1561.0], [46.8, 1561.0], [46.9, 1588.0], [47.0, 1614.0], [47.1, 1619.0], [47.2, 1624.0], [47.3, 1634.0], [47.4, 1634.0], [47.5, 1634.0], [47.6, 1641.0], [47.7, 1651.0], [47.8, 1660.0], [47.9, 1674.0], [48.0, 1682.0], [48.1, 1703.0], [48.2, 1706.0], [48.3, 1706.0], [48.4, 1706.0], [48.5, 1736.0], [48.6, 1745.0], [48.7, 1747.0], [48.8, 1800.0], [48.9, 1801.0], [49.0, 1806.0], [49.1, 1807.0], [49.2, 1811.0], [49.3, 1824.0], [49.4, 1825.0], [49.5, 1826.0], [49.6, 1830.0], [49.7, 1846.0], [49.8, 1859.0], [49.9, 1872.0], [50.0, 1873.0], [50.1, 1912.0], [50.2, 1917.0], [50.3, 1918.0], [50.4, 1927.0], [50.5, 1938.0], [50.6, 1939.0], [50.7, 1944.0], [50.8, 1949.0], [50.9, 1960.0], [51.0, 1962.0], [51.1, 1973.0], [51.2, 1974.0], [51.3, 1982.0], [51.4, 1991.0], [51.5, 1995.0], [51.6, 2011.0], [51.7, 2018.0], [51.8, 2029.0], [51.9, 2034.0], [52.0, 2036.0], [52.1, 2038.0], [52.2, 2047.0], [52.3, 2060.0], [52.4, 2067.0], [52.5, 2070.0], [52.6, 2073.0], [52.7, 2076.0], [52.8, 2084.0], [52.9, 2085.0], [53.0, 2096.0], [53.1, 2104.0], [53.2, 2105.0], [53.3, 2110.0], [53.4, 2111.0], [53.5, 2112.0], [53.6, 2113.0], [53.7, 2115.0], [53.8, 2122.0], [53.9, 2122.0], [54.0, 2125.0], [54.1, 2125.0], [54.2, 2130.0], [54.3, 2130.0], [54.4, 2132.0], [54.5, 2136.0], [54.6, 2142.0], [54.7, 2147.0], [54.8, 2149.0], [54.9, 2150.0], [55.0, 2154.0], [55.1, 2160.0], [55.2, 2165.0], [55.3, 2180.0], [55.4, 2181.0], [55.5, 2182.0], [55.6, 2191.0], [55.7, 2193.0], [55.8, 2198.0], [55.9, 2199.0], [56.0, 2202.0], [56.1, 2207.0], [56.2, 2209.0], [56.3, 2210.0], [56.4, 2221.0], [56.5, 2226.0], [56.6, 2226.0], [56.7, 2227.0], [56.8, 2232.0], [56.9, 2236.0], [57.0, 2245.0], [57.1, 2247.0], [57.2, 2253.0], [57.3, 2254.0], [57.4, 2256.0], [57.5, 2258.0], [57.6, 2258.0], [57.7, 2270.0], [57.8, 2291.0], [57.9, 2295.0], [58.0, 2297.0], [58.1, 2299.0], [58.2, 2301.0], [58.3, 2302.0], [58.4, 2305.0], [58.5, 2306.0], [58.6, 2309.0], [58.7, 2312.0], [58.8, 2313.0], [58.9, 2322.0], [59.0, 2324.0], [59.1, 2330.0], [59.2, 2333.0], [59.3, 2336.0], [59.4, 2338.0], [59.5, 2347.0], [59.6, 2347.0], [59.7, 2366.0], [59.8, 2374.0], [59.9, 2377.0], [60.0, 2379.0], [60.1, 2383.0], [60.2, 2390.0], [60.3, 2391.0], [60.4, 2391.0], [60.5, 2400.0], [60.6, 2405.0], [60.7, 2408.0], [60.8, 2414.0], [60.9, 2422.0], [61.0, 2424.0], [61.1, 2424.0], [61.2, 2428.0], [61.3, 2428.0], [61.4, 2438.0], [61.5, 2442.0], [61.6, 2453.0], [61.7, 2458.0], [61.8, 2462.0], [61.9, 2464.0], [62.0, 2468.0], [62.1, 2470.0], [62.2, 2476.0], [62.3, 2476.0], [62.4, 2476.0], [62.5, 2477.0], [62.6, 2480.0], [62.7, 2482.0], [62.8, 2483.0], [62.9, 2491.0], [63.0, 2501.0], [63.1, 2506.0], [63.2, 2509.0], [63.3, 2513.0], [63.4, 2514.0], [63.5, 2514.0], [63.6, 2517.0], [63.7, 2517.0], [63.8, 2521.0], [63.9, 2525.0], [64.0, 2529.0], [64.1, 2533.0], [64.2, 2533.0], [64.3, 2534.0], [64.4, 2535.0], [64.5, 2537.0], [64.6, 2538.0], [64.7, 2543.0], [64.8, 2546.0], [64.9, 2553.0], [65.0, 2554.0], [65.1, 2556.0], [65.2, 2556.0], [65.3, 2557.0], [65.4, 2557.0], [65.5, 2562.0], [65.6, 2564.0], [65.7, 2575.0], [65.8, 2580.0], [65.9, 2581.0], [66.0, 2582.0], [66.1, 2589.0], [66.2, 2591.0], [66.3, 2591.0], [66.4, 2591.0], [66.5, 2592.0], [66.6, 2594.0], [66.7, 2594.0], [66.8, 2597.0], [66.9, 2597.0], [67.0, 2599.0], [67.1, 2599.0], [67.2, 2600.0], [67.3, 2604.0], [67.4, 2607.0], [67.5, 2609.0], [67.6, 2610.0], [67.7, 2618.0], [67.8, 2618.0], [67.9, 2619.0], [68.0, 2623.0], [68.1, 2624.0], [68.2, 2624.0], [68.3, 2625.0], [68.4, 2626.0], [68.5, 2628.0], [68.6, 2628.0], [68.7, 2630.0], [68.8, 2630.0], [68.9, 2638.0], [69.0, 2638.0], [69.1, 2639.0], [69.2, 2646.0], [69.3, 2650.0], [69.4, 2650.0], [69.5, 2651.0], [69.6, 2653.0], [69.7, 2654.0], [69.8, 2657.0], [69.9, 2657.0], [70.0, 2658.0], [70.1, 2661.0], [70.2, 2665.0], [70.3, 2668.0], [70.4, 2669.0], [70.5, 2670.0], [70.6, 2672.0], [70.7, 2673.0], [70.8, 2674.0], [70.9, 2676.0], [71.0, 2684.0], [71.1, 2685.0], [71.2, 2686.0], [71.3, 2686.0], [71.4, 2689.0], [71.5, 2691.0], [71.6, 2691.0], [71.7, 2691.0], [71.8, 2691.0], [71.9, 2695.0], [72.0, 2697.0], [72.1, 2698.0], [72.2, 2700.0], [72.3, 2702.0], [72.4, 2705.0], [72.5, 2706.0], [72.6, 2708.0], [72.7, 2709.0], [72.8, 2711.0], [72.9, 2711.0], [73.0, 2712.0], [73.1, 2713.0], [73.2, 2717.0], [73.3, 2717.0], [73.4, 2719.0], [73.5, 2723.0], [73.6, 2725.0], [73.7, 2727.0], [73.8, 2727.0], [73.9, 2728.0], [74.0, 2732.0], [74.1, 2737.0], [74.2, 2742.0], [74.3, 2744.0], [74.4, 2745.0], [74.5, 2748.0], [74.6, 2750.0], [74.7, 2753.0], [74.8, 2757.0], [74.9, 2762.0], [75.0, 2763.0], [75.1, 2766.0], [75.2, 2766.0], [75.3, 2769.0], [75.4, 2772.0], [75.5, 2783.0], [75.6, 2783.0], [75.7, 2784.0], [75.8, 2785.0], [75.9, 2791.0], [76.0, 2796.0], [76.1, 2802.0], [76.2, 2804.0], [76.3, 2805.0], [76.4, 2805.0], [76.5, 2809.0], [76.6, 2816.0], [76.7, 2816.0], [76.8, 2817.0], [76.9, 2817.0], [77.0, 2821.0], [77.1, 2821.0], [77.2, 2825.0], [77.3, 2826.0], [77.4, 2827.0], [77.5, 2829.0], [77.6, 2829.0], [77.7, 2829.0], [77.8, 2830.0], [77.9, 2832.0], [78.0, 2836.0], [78.1, 2836.0], [78.2, 2844.0], [78.3, 2845.0], [78.4, 2846.0], [78.5, 2849.0], [78.6, 2849.0], [78.7, 2849.0], [78.8, 2852.0], [78.9, 2853.0], [79.0, 2857.0], [79.1, 2859.0], [79.2, 2859.0], [79.3, 2865.0], [79.4, 2867.0], [79.5, 2870.0], [79.6, 2873.0], [79.7, 2876.0], [79.8, 2879.0], [79.9, 2880.0], [80.0, 2880.0], [80.1, 2883.0], [80.2, 2883.0], [80.3, 2886.0], [80.4, 2887.0], [80.5, 2891.0], [80.6, 2892.0], [80.7, 2899.0], [80.8, 2899.0], [80.9, 2904.0], [81.0, 2905.0], [81.1, 2906.0], [81.2, 2907.0], [81.3, 2907.0], [81.4, 2907.0], [81.5, 2908.0], [81.6, 2908.0], [81.7, 2909.0], [81.8, 2912.0], [81.9, 2913.0], [82.0, 2914.0], [82.1, 2915.0], [82.2, 2915.0], [82.3, 2918.0], [82.4, 2920.0], [82.5, 2920.0], [82.6, 2920.0], [82.7, 2923.0], [82.8, 2923.0], [82.9, 2924.0], [83.0, 2926.0], [83.1, 2931.0], [83.2, 2933.0], [83.3, 2937.0], [83.4, 2939.0], [83.5, 2939.0], [83.6, 2941.0], [83.7, 2944.0], [83.8, 2945.0], [83.9, 2947.0], [84.0, 2947.0], [84.1, 2955.0], [84.2, 2957.0], [84.3, 2960.0], [84.4, 2961.0], [84.5, 2961.0], [84.6, 2961.0], [84.7, 2961.0], [84.8, 2962.0], [84.9, 2963.0], [85.0, 2966.0], [85.1, 2966.0], [85.2, 2967.0], [85.3, 2969.0], [85.4, 2970.0], [85.5, 2970.0], [85.6, 2971.0], [85.7, 2971.0], [85.8, 2974.0], [85.9, 2974.0], [86.0, 2975.0], [86.1, 2982.0], [86.2, 2983.0], [86.3, 2983.0], [86.4, 2985.0], [86.5, 2985.0], [86.6, 2987.0], [86.7, 2987.0], [86.8, 2988.0], [86.9, 2990.0], [87.0, 2992.0], [87.1, 2993.0], [87.2, 2994.0], [87.3, 2995.0], [87.4, 3000.0], [87.5, 3001.0], [87.6, 3001.0], [87.7, 3006.0], [87.8, 3008.0], [87.9, 3008.0], [88.0, 3008.0], [88.1, 3011.0], [88.2, 3016.0], [88.3, 3018.0], [88.4, 3028.0], [88.5, 3032.0], [88.6, 3034.0], [88.7, 3035.0], [88.8, 3038.0], [88.9, 3038.0], [89.0, 3042.0], [89.1, 3043.0], [89.2, 3043.0], [89.3, 3043.0], [89.4, 3047.0], [89.5, 3048.0], [89.6, 3050.0], [89.7, 3050.0], [89.8, 3051.0], [89.9, 3054.0], [90.0, 3054.0], [90.1, 3055.0], [90.2, 3056.0], [90.3, 3057.0], [90.4, 3057.0], [90.5, 3066.0], [90.6, 3067.0], [90.7, 3067.0], [90.8, 3068.0], [90.9, 3072.0], [91.0, 3074.0], [91.1, 3080.0], [91.2, 3080.0], [91.3, 3088.0], [91.4, 3088.0], [91.5, 3090.0], [91.6, 3094.0], [91.7, 3094.0], [91.8, 3098.0], [91.9, 3099.0], [92.0, 3100.0], [92.1, 3104.0], [92.2, 3106.0], [92.3, 3107.0], [92.4, 3112.0], [92.5, 3113.0], [92.6, 3114.0], [92.7, 3116.0], [92.8, 3127.0], [92.9, 3130.0], [93.0, 3130.0], [93.1, 3132.0], [93.2, 3137.0], [93.3, 3139.0], [93.4, 3140.0], [93.5, 3144.0], [93.6, 3147.0], [93.7, 3147.0], [93.8, 3160.0], [93.9, 3176.0], [94.0, 3189.0], [94.1, 3190.0], [94.2, 3195.0], [94.3, 3196.0], [94.4, 3202.0], [94.5, 3211.0], [94.6, 3212.0], [94.7, 3224.0], [94.8, 3225.0], [94.9, 3228.0], [95.0, 3228.0], [95.1, 3233.0], [95.2, 3236.0], [95.3, 3243.0], [95.4, 3244.0], [95.5, 3245.0], [95.6, 3245.0], [95.7, 3249.0], [95.8, 3250.0], [95.9, 3252.0], [96.0, 3256.0], [96.1, 3257.0], [96.2, 3257.0], [96.3, 3258.0], [96.4, 3260.0], [96.5, 3262.0], [96.6, 3264.0], [96.7, 3265.0], [96.8, 3267.0], [96.9, 3271.0], [97.0, 3351.0], [97.1, 3359.0], [97.2, 3359.0], [97.3, 3360.0], [97.4, 3362.0], [97.5, 3363.0], [97.6, 3371.0], [97.7, 3395.0], [97.8, 3403.0], [97.9, 3415.0], [98.0, 3420.0], [98.1, 3426.0], [98.2, 3427.0], [98.3, 3430.0], [98.4, 3431.0], [98.5, 3431.0], [98.6, 3431.0], [98.7, 3433.0], [98.8, 3434.0], [98.9, 3435.0], [99.0, 3436.0], [99.1, 3440.0], [99.2, 3445.0], [99.3, 3449.0], [99.4, 3455.0], [99.5, 3459.0], [99.6, 3477.0], [99.7, 3490.0], [99.8, 3528.0], [99.9, 3600.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 162.0, "series": [{"data": [[600.0, 12.0], [700.0, 16.0], [800.0, 38.0], [900.0, 26.0], [1000.0, 34.0], [1100.0, 22.0], [1200.0, 26.0], [1300.0, 20.0], [1400.0, 14.0], [1500.0, 11.0], [1600.0, 11.0], [1700.0, 7.0], [1800.0, 13.0], [1900.0, 15.0], [2000.0, 15.0], [2100.0, 29.0], [2200.0, 22.0], [2300.0, 23.0], [2400.0, 25.0], [2500.0, 42.0], [2600.0, 50.0], [2700.0, 39.0], [2800.0, 48.0], [2900.0, 66.0], [3000.0, 46.0], [3100.0, 24.0], [200.0, 23.0], [3200.0, 26.0], [3300.0, 8.0], [3400.0, 20.0], [3500.0, 1.0], [3600.0, 1.0], [300.0, 162.0], [400.0, 41.0], [500.0, 24.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 226.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 541.0, "series": [{"data": [[0.0, 226.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 233.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 541.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.2859999999993, "minX": 1.75568088E12, "maxY": 501.2859999999993, "series": [{"data": [[1.75568088E12, 501.2859999999993]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75568088E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 201.0, "minX": 2.0, "maxY": 3545.0, "series": [{"data": [[2.0, 3545.0], [3.0, 3528.0], [4.0, 3362.0], [5.0, 3371.0], [6.0, 3067.0], [8.0, 3239.0], [11.0, 3316.0], [13.0, 3091.5], [15.0, 3261.0], [16.0, 3249.0], [17.0, 3016.0], [19.0, 3109.0], [20.0, 3449.0], [27.0, 3426.0], [28.0, 3173.5], [29.0, 3063.5], [32.0, 3377.5], [35.0, 3361.0], [34.0, 3435.0], [39.0, 3168.5], [38.0, 3440.0], [41.0, 3445.0], [40.0, 3348.5], [43.0, 3154.0], [45.0, 3351.0], [47.0, 3372.0], [46.0, 2873.0], [49.0, 3420.0], [50.0, 3336.0], [53.0, 3201.0], [52.0, 3233.0], [54.0, 3359.0], [58.0, 3382.5], [61.0, 3088.0], [60.0, 3172.0], [63.0, 3177.5], [67.0, 3264.0], [66.0, 3202.0], [65.0, 2980.0], [71.0, 3114.0], [70.0, 3256.0], [69.0, 3195.0], [68.0, 3257.0], [74.0, 3265.0], [73.0, 3228.0], [72.0, 3090.0], [79.0, 3067.0], [78.0, 3042.0], [77.0, 3011.0], [76.0, 3147.5], [82.0, 3032.0], [81.0, 3034.5], [87.0, 3008.0], [86.0, 3056.5], [84.0, 3057.0], [91.0, 3075.0], [89.0, 3127.0], [88.0, 3094.0], [93.0, 2993.0], [92.0, 2939.0], [97.0, 2931.5], [101.0, 3072.5], [107.0, 2982.0], [106.0, 2970.0], [105.0, 2979.0], [110.0, 3147.0], [109.0, 3032.5], [115.0, 3035.5], [113.0, 2955.0], [112.0, 3060.5], [119.0, 2974.0], [117.0, 3104.0], [116.0, 2653.0], [123.0, 3135.6666666666665], [120.0, 2941.0], [126.0, 3054.0], [125.0, 2937.0], [124.0, 3100.0], [135.0, 2905.0], [134.0, 3116.0], [133.0, 2577.0], [131.0, 3130.0], [130.0, 2963.0], [128.0, 2950.5], [142.0, 3107.0], [141.0, 2727.5], [138.0, 3139.0], [137.0, 2556.0], [136.0, 2963.0], [148.0, 3003.5], [146.0, 2923.0], [145.0, 2924.25], [159.0, 2890.0], [158.0, 2984.0], [155.0, 3054.0], [152.0, 2877.0], [164.0, 2972.5], [163.0, 3002.0], [161.0, 2987.0], [175.0, 2849.0], [174.0, 2483.0], [173.0, 2981.777777777778], [182.0, 2835.5], [180.0, 2829.0], [179.0, 3043.0], [178.0, 2790.0], [177.0, 2983.0], [190.0, 2994.0], [189.0, 2907.5], [188.0, 3018.0], [186.0, 2966.0], [185.0, 3056.0], [184.0, 2649.0], [194.0, 3008.0], [193.0, 2791.0], [192.0, 2996.0], [206.0, 2728.0], [205.0, 2850.0], [203.0, 2995.0], [202.0, 3038.0], [201.0, 2813.0], [213.0, 2894.0], [210.0, 2753.0], [209.0, 2869.3333333333335], [221.0, 2712.3333333333335], [220.0, 2915.0], [219.0, 2732.0], [218.0, 2745.0], [216.0, 2817.5], [231.0, 2861.3333333333335], [229.0, 2843.0], [225.0, 2723.0], [224.0, 2961.0], [237.0, 2240.0], [236.0, 2971.0], [234.0, 2727.0], [233.0, 2866.0], [232.0, 2932.0], [247.0, 2325.0], [246.0, 2891.5], [241.0, 2763.0], [240.0, 2602.6666666666665], [254.0, 2532.0], [253.0, 2883.0], [252.0, 2599.0], [250.0, 2903.5], [248.0, 2920.0], [270.0, 572.0], [271.0, 565.0], [269.0, 2796.5], [267.0, 2676.0], [266.0, 2683.5], [264.0, 2907.0], [263.0, 2908.0], [262.0, 2787.6666666666665], [259.0, 2886.0], [258.0, 1736.5], [256.0, 2878.5], [284.0, 2785.6666666666665], [287.0, 548.0], [286.0, 2836.0], [285.0, 2845.0], [281.0, 2747.5], [279.0, 2672.0], [275.0, 2639.0], [274.0, 2763.3333333333335], [278.0, 2762.0], [277.0, 2857.0], [276.0, 560.0], [302.0, 2600.0], [301.0, 546.0], [299.0, 2604.5], [297.0, 2829.0], [296.0, 2825.0], [295.0, 1564.0], [293.0, 533.0], [292.0, 2221.5], [288.0, 545.0], [317.0, 1685.0], [315.0, 2592.0], [314.0, 2182.25], [312.0, 526.0], [310.0, 2796.0], [308.0, 2836.0], [307.0, 2617.3333333333335], [304.0, 1630.0], [333.0, 1554.0], [335.0, 2644.5], [332.0, 2529.0], [322.0, 2805.0], [321.0, 2776.6666666666665], [320.0, 2619.0], [330.0, 2557.0], [329.0, 2785.0], [328.0, 2784.0], [327.0, 1564.0], [325.0, 2594.0], [324.0, 2708.0], [351.0, 2594.5], [348.0, 1583.0], [350.0, 2506.0], [345.0, 503.0], [342.0, 2719.0], [341.0, 2611.0], [338.0, 2686.0], [337.0, 2677.0], [366.0, 2514.0], [364.0, 2309.0], [363.0, 2615.5], [361.0, 1459.0], [360.0, 2468.0], [358.0, 2601.0], [356.0, 1738.4], [355.0, 1528.0], [353.0, 2534.0], [382.0, 2471.6666666666665], [378.0, 2491.0], [377.0, 2691.0], [376.0, 2630.0], [375.0, 2610.0], [369.0, 1636.5], [368.0, 2657.0], [374.0, 2480.0], [373.0, 2702.0], [372.0, 2564.0], [371.0, 2533.0], [370.0, 2160.0], [399.0, 2609.0], [398.0, 2369.5], [384.0, 2657.0], [395.0, 2691.0], [394.0, 2546.5], [392.0, 2442.0], [391.0, 2628.0], [390.0, 2428.0], [389.0, 2494.25], [388.0, 2652.0], [403.0, 2390.0], [415.0, 291.0], [412.0, 347.0], [411.0, 331.0], [410.0, 2442.0], [408.0, 2514.5], [406.0, 468.0], [405.0, 2111.0], [404.0, 2110.0], [402.0, 2424.5], [401.0, 2400.0], [400.0, 2670.0], [429.0, 315.0], [430.0, 478.0], [428.0, 2646.0], [419.0, 2465.0], [417.0, 1571.0], [427.0, 470.0], [426.0, 2096.0], [425.0, 356.0], [424.0, 415.0], [423.0, 297.0], [422.0, 2366.0], [421.0, 1480.75], [434.0, 2589.0], [446.0, 2060.0], [445.0, 327.5], [443.0, 341.5], [442.0, 253.0], [440.0, 315.0], [439.0, 422.5], [437.0, 1444.5], [436.0, 2562.0], [433.0, 340.0], [432.0, 1471.0], [462.0, 389.5], [463.0, 2575.0], [460.0, 1313.5], [451.0, 399.5], [449.0, 385.0], [448.0, 345.5], [458.0, 446.0], [457.0, 2336.0], [456.0, 365.0], [455.0, 2301.0], [454.0, 2347.0], [453.0, 355.0], [452.0, 291.0], [479.0, 2553.0], [478.0, 1112.0], [467.0, 2299.0], [466.0, 2538.0], [465.0, 2322.0], [464.0, 330.0], [475.0, 431.0], [474.0, 361.0], [473.0, 2514.0], [472.0, 2517.0], [471.0, 2297.0], [470.0, 1431.0], [468.0, 336.0], [494.0, 2513.0], [495.0, 2377.0], [493.0, 2247.0], [492.0, 417.0], [491.0, 2221.0], [490.0, 2198.0], [488.0, 2202.0], [487.0, 2511.0], [483.0, 484.0], [482.0, 2214.3333333333335], [485.0, 2243.5], [510.0, 1991.0], [511.0, 1873.0], [509.0, 317.0], [508.0, 415.0], [507.0, 2462.0], [506.0, 339.0], [505.0, 2320.0], [503.0, 2476.0], [497.0, 346.0], [496.0, 2193.0], [499.0, 1918.0], [498.0, 2453.0], [502.0, 322.0], [501.0, 2256.0], [500.0, 438.0], [538.0, 360.0], [531.0, 356.0], [542.0, 1696.25], [528.0, 2067.0], [537.0, 327.0], [519.0, 2243.5], [517.0, 2313.0], [516.0, 2130.0], [515.0, 2335.5], [513.0, 325.0], [512.0, 2149.0], [527.0, 343.0], [524.0, 351.0], [523.0, 2222.5], [521.0, 2379.0], [520.0, 408.0], [535.0, 1331.0], [533.0, 392.0], [532.0, 2070.0], [530.0, 340.0], [529.0, 2258.0], [568.0, 2154.0], [572.0, 328.0], [575.0, 2180.0], [561.0, 333.0], [560.0, 2226.0], [564.0, 1301.0], [562.0, 325.0], [574.0, 1944.0], [573.0, 345.0], [571.0, 1949.0], [570.0, 2047.0], [569.0, 2143.5], [559.0, 1736.0], [544.0, 2315.0], [546.0, 311.0], [545.0, 313.0], [548.0, 334.0], [547.0, 1982.0], [551.0, 1304.5], [550.0, 1373.0], [558.0, 456.0], [557.0, 2182.0], [556.0, 2254.0], [555.0, 2312.0], [554.0, 344.0], [553.0, 327.0], [552.0, 1275.0], [567.0, 2227.0], [565.0, 349.0], [600.0, 1824.0], [606.0, 2048.0], [607.0, 322.0], [593.0, 1859.0], [592.0, 2199.0], [595.0, 2136.0], [594.0, 322.0], [605.0, 1209.0], [602.0, 2104.0], [601.0, 2165.0], [591.0, 310.0], [576.0, 398.0], [579.0, 1917.0], [578.0, 994.0], [583.0, 2232.0], [582.0, 1526.3333333333335], [590.0, 318.0], [589.0, 2130.0], [588.0, 2209.0], [587.0, 2084.0], [586.0, 2207.0], [585.0, 2147.0], [584.0, 331.0], [599.0, 1927.0], [598.0, 319.0], [597.0, 298.0], [596.0, 1872.0], [635.0, 310.0], [628.0, 380.0], [638.0, 1825.0], [639.0, 1096.0], [624.0, 2132.0], [637.0, 317.0], [634.0, 878.3333333333334], [615.0, 2125.0], [614.0, 2122.0], [613.0, 301.0], [612.0, 428.0], [611.0, 1068.0], [609.0, 331.0], [608.0, 2125.0], [623.0, 321.0], [622.0, 1706.0], [621.0, 1067.5], [619.0, 297.0], [618.0, 315.0], [617.0, 2112.0], [616.0, 1826.0], [631.0, 301.0], [630.0, 2038.0], [629.0, 1839.5], [669.0, 1624.0], [670.0, 1634.0], [656.0, 1801.0], [659.0, 326.0], [657.0, 1938.0], [661.0, 415.0], [660.0, 364.5], [668.0, 303.0], [667.0, 1634.0], [666.0, 1619.0], [665.0, 316.0], [664.0, 362.0], [641.0, 1800.0], [640.0, 297.0], [655.0, 397.0], [654.0, 340.0], [653.0, 1995.0], [652.0, 1674.0], [651.0, 1641.0], [650.0, 1190.7777777777778], [649.0, 372.0], [663.0, 316.0], [662.0, 396.0], [698.0, 660.5], [702.0, 312.0], [703.0, 360.0], [689.0, 388.0], [688.0, 1558.0], [701.0, 1554.0], [700.0, 329.0], [699.0, 1806.0], [687.0, 1763.5], [673.0, 1171.3333333333333], [677.0, 326.0], [676.0, 407.0], [679.0, 1706.0], [678.0, 729.0], [685.0, 311.0], [684.0, 313.0], [683.0, 346.0], [682.0, 350.0], [681.0, 324.0], [694.0, 299.0], [693.0, 337.0], [692.0, 341.0], [690.0, 1962.0], [732.0, 770.6], [722.0, 307.0], [734.0, 1358.0], [735.0, 322.0], [720.0, 1561.0], [733.0, 414.0], [729.0, 1472.0], [711.0, 359.0], [710.0, 323.0], [709.0, 1481.0], [707.0, 310.0], [706.0, 325.0], [705.0, 1651.0], [704.0, 310.0], [719.0, 339.0], [718.0, 1846.0], [717.0, 1412.0], [716.0, 319.0], [715.0, 366.0], [714.0, 313.0], [713.0, 1394.0], [712.0, 1912.0], [726.0, 351.0], [725.0, 1068.6666666666667], [723.0, 330.0], [760.0, 1398.0], [765.0, 1315.0], [766.0, 349.0], [753.0, 379.0], [752.0, 364.0], [755.0, 369.0], [754.0, 1324.0], [764.0, 347.0], [763.0, 1353.0], [761.0, 374.0], [751.0, 1491.0], [738.0, 343.0], [741.0, 843.5], [740.0, 405.0], [743.0, 343.0], [742.0, 1468.0], [750.0, 957.5], [748.0, 1272.0], [747.0, 1634.0], [746.0, 399.0], [745.0, 346.0], [759.0, 1290.0], [758.0, 1614.0], [757.0, 1426.0], [756.0, 356.0], [792.0, 1436.0], [797.0, 1331.0], [799.0, 335.5], [787.0, 1288.5], [785.0, 1328.5], [796.0, 1279.0], [795.0, 753.5], [793.0, 1341.0], [783.0, 1315.0], [769.0, 1265.0], [768.0, 901.5], [771.0, 354.0], [770.0, 318.0], [773.0, 347.0], [772.0, 1252.0], [782.0, 1238.0], [779.0, 1256.0], [778.0, 1261.0], [777.0, 1252.0], [776.0, 1294.6666666666667], [791.0, 1747.0], [790.0, 307.0], [789.0, 1328.0], [788.0, 1292.0], [824.0, 349.0], [830.0, 1061.0], [831.0, 1173.0], [816.0, 1260.0], [819.0, 800.5], [817.0, 1218.0], [829.0, 1090.0], [827.0, 239.0], [826.0, 341.5], [815.0, 1111.0], [802.0, 1174.5], [800.0, 346.0], [805.0, 1172.0], [804.0, 1202.0], [807.0, 398.0], [806.0, 1311.0], [814.0, 1136.0], [813.0, 1263.0], [812.0, 1172.0], [810.0, 273.0], [809.0, 391.0], [808.0, 1302.0], [823.0, 1195.0], [822.0, 357.0], [821.0, 372.0], [820.0, 374.0], [857.0, 236.0], [862.0, 1434.0], [863.0, 1119.0], [850.0, 1123.0], [861.0, 1089.0], [860.0, 1038.0], [858.0, 1144.6], [847.0, 1064.0], [832.0, 1192.0], [835.0, 1051.0], [834.0, 1133.0], [837.0, 1139.0], [836.0, 981.0], [839.0, 270.0], [838.0, 1133.0], [845.0, 1151.0], [844.0, 1068.0], [843.0, 201.0], [842.0, 1163.0], [841.0, 1085.0], [840.0, 1149.0], [855.0, 1368.0], [853.0, 1142.0], [852.0, 1125.0], [851.0, 244.0], [889.0, 863.0], [894.0, 993.0], [895.0, 912.0], [881.0, 1022.0], [880.0, 919.0], [883.0, 902.0], [882.0, 961.0], [892.0, 988.0], [891.0, 1015.0], [890.0, 1026.0], [888.0, 938.0], [871.0, 214.0], [870.0, 1274.5], [869.0, 615.5], [866.0, 1074.0], [865.0, 1423.0], [864.0, 1004.0], [879.0, 1030.5], [877.0, 965.0], [876.0, 1014.0], [874.0, 1049.0], [873.0, 1042.0], [872.0, 212.0], [887.0, 954.3333333333334], [884.0, 1008.0], [921.0, 797.0], [925.0, 919.0], [927.0, 1083.0], [912.0, 879.0], [915.0, 851.0], [913.0, 868.0], [924.0, 841.0], [923.0, 949.0], [922.0, 844.0], [911.0, 891.0], [897.0, 1040.0], [896.0, 999.0], [899.0, 870.0], [898.0, 994.0], [901.0, 997.0], [900.0, 907.0], [903.0, 1030.0], [902.0, 887.0], [910.0, 878.0], [909.0, 1279.0], [908.0, 885.5], [907.0, 883.0], [905.0, 824.0], [904.0, 937.0], [919.0, 1333.0], [918.0, 949.0], [917.0, 874.0], [916.0, 909.0], [956.0, 858.0], [947.0, 799.0], [959.0, 984.0], [944.0, 945.6666666666666], [955.0, 744.6666666666666], [954.0, 774.0], [941.0, 751.0], [930.0, 879.0], [929.0, 898.0], [933.0, 854.0], [931.0, 938.0], [940.0, 844.0], [939.0, 880.0], [938.0, 869.0], [937.0, 803.0], [936.0, 743.3333333333334], [951.0, 789.0], [949.0, 867.0], [948.0, 716.0], [946.0, 834.0], [945.0, 812.0], [984.0, 373.0], [988.0, 407.3333333333333], [991.0, 590.0], [979.0, 617.6666666666666], [976.0, 747.0], [990.0, 500.5], [989.0, 338.0], [987.0, 679.0], [986.0, 744.0], [985.0, 683.0], [975.0, 913.0], [960.0, 698.0], [962.0, 754.0], [961.0, 700.0], [967.0, 576.5], [965.0, 419.3333333333333], [974.0, 675.5], [972.0, 806.0], [971.0, 836.0], [970.0, 406.0], [968.0, 744.0], [983.0, 278.0], [982.0, 348.0], [981.0, 666.0], [980.0, 810.0], [992.0, 765.5], [994.0, 472.6666666666667]], "isOverall": false, "label": "สร้าง Visit", "isController": false}, {"data": [[501.2859999999993, 1748.7010000000005]], "isOverall": false, "label": "สร้าง Visit-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 994.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8883.333333333334, "minX": 1.75568088E12, "maxY": 11733.333333333334, "series": [{"data": [[1.75568088E12, 11733.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75568088E12, 8883.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75568088E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1748.7010000000005, "minX": 1.75568088E12, "maxY": 1748.7010000000005, "series": [{"data": [[1.75568088E12, 1748.7010000000005]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75568088E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1748.6660000000006, "minX": 1.75568088E12, "maxY": 1748.6660000000006, "series": [{"data": [[1.75568088E12, 1748.6660000000006]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75568088E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1388.4029999999993, "minX": 1.75568088E12, "maxY": 1388.4029999999993, "series": [{"data": [[1.75568088E12, 1388.4029999999993]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75568088E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 201.0, "minX": 1.75568088E12, "maxY": 3600.0, "series": [{"data": [[1.75568088E12, 3600.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75568088E12, 3054.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75568088E12, 3435.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75568088E12, 3228.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75568088E12, 201.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75568088E12, 1892.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75568088E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 844.0, "minX": 60.0, "maxY": 3311.0, "series": [{"data": [[365.0, 1090.0], [456.0, 2686.0], [119.0, 844.0], [60.0, 3311.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 456.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 844.0, "minX": 60.0, "maxY": 3311.0, "series": [{"data": [[365.0, 1090.0], [456.0, 2686.0], [119.0, 844.0], [60.0, 3311.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 456.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75568088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75568088E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75568088E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75568088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75568088E12, 16.666666666666668]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75568088E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75568088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75568088E12, 16.666666666666668]], "isOverall": false, "label": "สร้าง Visit-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75568088E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75568088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75568088E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75568088E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

