/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18.0, "minX": 0.0, "maxY": 5642.0, "series": [{"data": [[0.0, 18.0], [0.1, 18.0], [0.2, 18.0], [0.3, 18.0], [0.4, 19.0], [0.5, 19.0], [0.6, 19.0], [0.7, 19.0], [0.8, 19.0], [0.9, 20.0], [1.0, 20.0], [1.1, 20.0], [1.2, 20.0], [1.3, 20.0], [1.4, 20.0], [1.5, 20.0], [1.6, 20.0], [1.7, 20.0], [1.8, 20.0], [1.9, 20.0], [2.0, 20.0], [2.1, 21.0], [2.2, 21.0], [2.3, 21.0], [2.4, 21.0], [2.5, 21.0], [2.6, 21.0], [2.7, 21.0], [2.8, 21.0], [2.9, 21.0], [3.0, 21.0], [3.1, 22.0], [3.2, 22.0], [3.3, 22.0], [3.4, 22.0], [3.5, 22.0], [3.6, 22.0], [3.7, 22.0], [3.8, 22.0], [3.9, 23.0], [4.0, 23.0], [4.1, 23.0], [4.2, 23.0], [4.3, 23.0], [4.4, 23.0], [4.5, 23.0], [4.6, 23.0], [4.7, 23.0], [4.8, 23.0], [4.9, 23.0], [5.0, 23.0], [5.1, 23.0], [5.2, 24.0], [5.3, 24.0], [5.4, 24.0], [5.5, 24.0], [5.6, 24.0], [5.7, 24.0], [5.8, 24.0], [5.9, 24.0], [6.0, 24.0], [6.1, 24.0], [6.2, 24.0], [6.3, 24.0], [6.4, 24.0], [6.5, 24.0], [6.6, 24.0], [6.7, 25.0], [6.8, 25.0], [6.9, 25.0], [7.0, 25.0], [7.1, 25.0], [7.2, 25.0], [7.3, 25.0], [7.4, 25.0], [7.5, 25.0], [7.6, 25.0], [7.7, 26.0], [7.8, 26.0], [7.9, 26.0], [8.0, 26.0], [8.1, 26.0], [8.2, 26.0], [8.3, 26.0], [8.4, 26.0], [8.5, 26.0], [8.6, 26.0], [8.7, 27.0], [8.8, 27.0], [8.9, 27.0], [9.0, 27.0], [9.1, 27.0], [9.2, 27.0], [9.3, 27.0], [9.4, 27.0], [9.5, 27.0], [9.6, 27.0], [9.7, 27.0], [9.8, 28.0], [9.9, 28.0], [10.0, 28.0], [10.1, 28.0], [10.2, 28.0], [10.3, 28.0], [10.4, 28.0], [10.5, 28.0], [10.6, 28.0], [10.7, 28.0], [10.8, 29.0], [10.9, 29.0], [11.0, 29.0], [11.1, 29.0], [11.2, 29.0], [11.3, 29.0], [11.4, 30.0], [11.5, 30.0], [11.6, 30.0], [11.7, 30.0], [11.8, 30.0], [11.9, 30.0], [12.0, 30.0], [12.1, 30.0], [12.2, 30.0], [12.3, 31.0], [12.4, 31.0], [12.5, 31.0], [12.6, 31.0], [12.7, 31.0], [12.8, 31.0], [12.9, 31.0], [13.0, 31.0], [13.1, 32.0], [13.2, 32.0], [13.3, 32.0], [13.4, 32.0], [13.5, 33.0], [13.6, 33.0], [13.7, 33.0], [13.8, 33.0], [13.9, 34.0], [14.0, 34.0], [14.1, 34.0], [14.2, 34.0], [14.3, 35.0], [14.4, 35.0], [14.5, 35.0], [14.6, 36.0], [14.7, 36.0], [14.8, 36.0], [14.9, 36.0], [15.0, 36.0], [15.1, 37.0], [15.2, 37.0], [15.3, 37.0], [15.4, 38.0], [15.5, 38.0], [15.6, 38.0], [15.7, 39.0], [15.8, 39.0], [15.9, 39.0], [16.0, 40.0], [16.1, 40.0], [16.2, 41.0], [16.3, 41.0], [16.4, 42.0], [16.5, 42.0], [16.6, 42.0], [16.7, 43.0], [16.8, 43.0], [16.9, 44.0], [17.0, 44.0], [17.1, 45.0], [17.2, 45.0], [17.3, 48.0], [17.4, 49.0], [17.5, 49.0], [17.6, 50.0], [17.7, 50.0], [17.8, 52.0], [17.9, 52.0], [18.0, 53.0], [18.1, 53.0], [18.2, 53.0], [18.3, 53.0], [18.4, 54.0], [18.5, 57.0], [18.6, 58.0], [18.7, 58.0], [18.8, 59.0], [18.9, 59.0], [19.0, 61.0], [19.1, 63.0], [19.2, 64.0], [19.3, 68.0], [19.4, 71.0], [19.5, 72.0], [19.6, 76.0], [19.7, 77.0], [19.8, 77.0], [19.9, 80.0], [20.0, 82.0], [20.1, 84.0], [20.2, 86.0], [20.3, 88.0], [20.4, 92.0], [20.5, 96.0], [20.6, 99.0], [20.7, 99.0], [20.8, 101.0], [20.9, 105.0], [21.0, 105.0], [21.1, 110.0], [21.2, 111.0], [21.3, 115.0], [21.4, 115.0], [21.5, 116.0], [21.6, 116.0], [21.7, 119.0], [21.8, 122.0], [21.9, 124.0], [22.0, 126.0], [22.1, 132.0], [22.2, 135.0], [22.3, 140.0], [22.4, 143.0], [22.5, 149.0], [22.6, 151.0], [22.7, 153.0], [22.8, 154.0], [22.9, 155.0], [23.0, 155.0], [23.1, 164.0], [23.2, 167.0], [23.3, 170.0], [23.4, 174.0], [23.5, 176.0], [23.6, 181.0], [23.7, 182.0], [23.8, 182.0], [23.9, 185.0], [24.0, 187.0], [24.1, 188.0], [24.2, 191.0], [24.3, 194.0], [24.4, 195.0], [24.5, 199.0], [24.6, 209.0], [24.7, 211.0], [24.8, 213.0], [24.9, 215.0], [25.0, 219.0], [25.1, 221.0], [25.2, 224.0], [25.3, 228.0], [25.4, 236.0], [25.5, 259.0], [25.6, 267.0], [25.7, 280.0], [25.8, 282.0], [25.9, 283.0], [26.0, 291.0], [26.1, 307.0], [26.2, 313.0], [26.3, 314.0], [26.4, 322.0], [26.5, 331.0], [26.6, 332.0], [26.7, 337.0], [26.8, 338.0], [26.9, 342.0], [27.0, 346.0], [27.1, 352.0], [27.2, 353.0], [27.3, 355.0], [27.4, 364.0], [27.5, 366.0], [27.6, 372.0], [27.7, 382.0], [27.8, 408.0], [27.9, 418.0], [28.0, 432.0], [28.1, 437.0], [28.2, 450.0], [28.3, 452.0], [28.4, 455.0], [28.5, 457.0], [28.6, 467.0], [28.7, 469.0], [28.8, 470.0], [28.9, 474.0], [29.0, 476.0], [29.1, 481.0], [29.2, 483.0], [29.3, 484.0], [29.4, 485.0], [29.5, 486.0], [29.6, 486.0], [29.7, 490.0], [29.8, 491.0], [29.9, 495.0], [30.0, 496.0], [30.1, 498.0], [30.2, 499.0], [30.3, 500.0], [30.4, 507.0], [30.5, 509.0], [30.6, 515.0], [30.7, 521.0], [30.8, 525.0], [30.9, 530.0], [31.0, 534.0], [31.1, 535.0], [31.2, 536.0], [31.3, 536.0], [31.4, 539.0], [31.5, 541.0], [31.6, 545.0], [31.7, 572.0], [31.8, 577.0], [31.9, 609.0], [32.0, 664.0], [32.1, 697.0], [32.2, 699.0], [32.3, 710.0], [32.4, 720.0], [32.5, 726.0], [32.6, 730.0], [32.7, 734.0], [32.8, 736.0], [32.9, 740.0], [33.0, 743.0], [33.1, 746.0], [33.2, 747.0], [33.3, 753.0], [33.4, 753.0], [33.5, 759.0], [33.6, 760.0], [33.7, 765.0], [33.8, 770.0], [33.9, 773.0], [34.0, 776.0], [34.1, 782.0], [34.2, 784.0], [34.3, 786.0], [34.4, 791.0], [34.5, 806.0], [34.6, 821.0], [34.7, 822.0], [34.8, 830.0], [34.9, 842.0], [35.0, 844.0], [35.1, 852.0], [35.2, 854.0], [35.3, 859.0], [35.4, 864.0], [35.5, 869.0], [35.6, 870.0], [35.7, 875.0], [35.8, 882.0], [35.9, 884.0], [36.0, 885.0], [36.1, 889.0], [36.2, 896.0], [36.3, 897.0], [36.4, 899.0], [36.5, 902.0], [36.6, 904.0], [36.7, 910.0], [36.8, 911.0], [36.9, 917.0], [37.0, 931.0], [37.1, 935.0], [37.2, 943.0], [37.3, 956.0], [37.4, 985.0], [37.5, 992.0], [37.6, 999.0], [37.7, 1001.0], [37.8, 1006.0], [37.9, 1021.0], [38.0, 1052.0], [38.1, 1059.0], [38.2, 1062.0], [38.3, 1075.0], [38.4, 1078.0], [38.5, 1092.0], [38.6, 1106.0], [38.7, 1115.0], [38.8, 1122.0], [38.9, 1127.0], [39.0, 1171.0], [39.1, 1181.0], [39.2, 1193.0], [39.3, 1195.0], [39.4, 1201.0], [39.5, 1206.0], [39.6, 1209.0], [39.7, 1215.0], [39.8, 1216.0], [39.9, 1222.0], [40.0, 1226.0], [40.1, 1229.0], [40.2, 1231.0], [40.3, 1232.0], [40.4, 1235.0], [40.5, 1236.0], [40.6, 1239.0], [40.7, 1240.0], [40.8, 1242.0], [40.9, 1247.0], [41.0, 1248.0], [41.1, 1251.0], [41.2, 1251.0], [41.3, 1253.0], [41.4, 1263.0], [41.5, 1264.0], [41.6, 1266.0], [41.7, 1277.0], [41.8, 1278.0], [41.9, 1282.0], [42.0, 1292.0], [42.1, 1301.0], [42.2, 1309.0], [42.3, 1319.0], [42.4, 1320.0], [42.5, 1324.0], [42.6, 1325.0], [42.7, 1327.0], [42.8, 1328.0], [42.9, 1331.0], [43.0, 1333.0], [43.1, 1337.0], [43.2, 1339.0], [43.3, 1340.0], [43.4, 1340.0], [43.5, 1341.0], [43.6, 1342.0], [43.7, 1342.0], [43.8, 1343.0], [43.9, 1344.0], [44.0, 1347.0], [44.1, 1348.0], [44.2, 1348.0], [44.3, 1350.0], [44.4, 1353.0], [44.5, 1353.0], [44.6, 1354.0], [44.7, 1355.0], [44.8, 1356.0], [44.9, 1357.0], [45.0, 1357.0], [45.1, 1357.0], [45.2, 1362.0], [45.3, 1371.0], [45.4, 1385.0], [45.5, 1387.0], [45.6, 1394.0], [45.7, 1396.0], [45.8, 1397.0], [45.9, 1399.0], [46.0, 1407.0], [46.1, 1426.0], [46.2, 1448.0], [46.3, 1454.0], [46.4, 1464.0], [46.5, 1467.0], [46.6, 1471.0], [46.7, 1476.0], [46.8, 1480.0], [46.9, 1483.0], [47.0, 1488.0], [47.1, 1493.0], [47.2, 1499.0], [47.3, 1500.0], [47.4, 1508.0], [47.5, 1509.0], [47.6, 1519.0], [47.7, 1521.0], [47.8, 1522.0], [47.9, 1524.0], [48.0, 1524.0], [48.1, 1525.0], [48.2, 1526.0], [48.3, 1527.0], [48.4, 1530.0], [48.5, 1537.0], [48.6, 1538.0], [48.7, 1538.0], [48.8, 1545.0], [48.9, 1547.0], [49.0, 1549.0], [49.1, 1556.0], [49.2, 1561.0], [49.3, 1573.0], [49.4, 1575.0], [49.5, 1582.0], [49.6, 1584.0], [49.7, 1587.0], [49.8, 1589.0], [49.9, 1591.0], [50.0, 1598.0], [50.1, 1604.0], [50.2, 1608.0], [50.3, 1610.0], [50.4, 1615.0], [50.5, 1616.0], [50.6, 1618.0], [50.7, 1621.0], [50.8, 1632.0], [50.9, 1633.0], [51.0, 1635.0], [51.1, 1636.0], [51.2, 1643.0], [51.3, 1647.0], [51.4, 1654.0], [51.5, 1655.0], [51.6, 1664.0], [51.7, 1671.0], [51.8, 1686.0], [51.9, 1688.0], [52.0, 1699.0], [52.1, 1704.0], [52.2, 1709.0], [52.3, 1717.0], [52.4, 1719.0], [52.5, 1729.0], [52.6, 1731.0], [52.7, 1733.0], [52.8, 1735.0], [52.9, 1739.0], [53.0, 1741.0], [53.1, 1743.0], [53.2, 1744.0], [53.3, 1752.0], [53.4, 1760.0], [53.5, 1770.0], [53.6, 1772.0], [53.7, 1773.0], [53.8, 1774.0], [53.9, 1778.0], [54.0, 1789.0], [54.1, 1792.0], [54.2, 1797.0], [54.3, 1811.0], [54.4, 1813.0], [54.5, 1822.0], [54.6, 1828.0], [54.7, 1832.0], [54.8, 1837.0], [54.9, 1840.0], [55.0, 1840.0], [55.1, 1844.0], [55.2, 1853.0], [55.3, 1856.0], [55.4, 1863.0], [55.5, 1870.0], [55.6, 1885.0], [55.7, 1886.0], [55.8, 1902.0], [55.9, 1906.0], [56.0, 1913.0], [56.1, 1931.0], [56.2, 1936.0], [56.3, 1944.0], [56.4, 1946.0], [56.5, 1948.0], [56.6, 1966.0], [56.7, 1970.0], [56.8, 1976.0], [56.9, 1979.0], [57.0, 1981.0], [57.1, 1998.0], [57.2, 2009.0], [57.3, 2014.0], [57.4, 2021.0], [57.5, 2023.0], [57.6, 2039.0], [57.7, 2041.0], [57.8, 2044.0], [57.9, 2046.0], [58.0, 2062.0], [58.1, 2064.0], [58.2, 2078.0], [58.3, 2085.0], [58.4, 2093.0], [58.5, 2097.0], [58.6, 2101.0], [58.7, 2110.0], [58.8, 2110.0], [58.9, 2112.0], [59.0, 2115.0], [59.1, 2117.0], [59.2, 2118.0], [59.3, 2121.0], [59.4, 2124.0], [59.5, 2128.0], [59.6, 2129.0], [59.7, 2133.0], [59.8, 2140.0], [59.9, 2149.0], [60.0, 2155.0], [60.1, 2158.0], [60.2, 2167.0], [60.3, 2169.0], [60.4, 2175.0], [60.5, 2182.0], [60.6, 2185.0], [60.7, 2191.0], [60.8, 2202.0], [60.9, 2205.0], [61.0, 2213.0], [61.1, 2220.0], [61.2, 2221.0], [61.3, 2225.0], [61.4, 2226.0], [61.5, 2228.0], [61.6, 2229.0], [61.7, 2233.0], [61.8, 2238.0], [61.9, 2249.0], [62.0, 2254.0], [62.1, 2262.0], [62.2, 2272.0], [62.3, 2277.0], [62.4, 2285.0], [62.5, 2294.0], [62.6, 2313.0], [62.7, 2322.0], [62.8, 2324.0], [62.9, 2329.0], [63.0, 2333.0], [63.1, 2343.0], [63.2, 2347.0], [63.3, 2349.0], [63.4, 2353.0], [63.5, 2362.0], [63.6, 2369.0], [63.7, 2373.0], [63.8, 2374.0], [63.9, 2381.0], [64.0, 2383.0], [64.1, 2389.0], [64.2, 2389.0], [64.3, 2393.0], [64.4, 2395.0], [64.5, 2401.0], [64.6, 2407.0], [64.7, 2411.0], [64.8, 2415.0], [64.9, 2417.0], [65.0, 2428.0], [65.1, 2432.0], [65.2, 2436.0], [65.3, 2443.0], [65.4, 2462.0], [65.5, 2467.0], [65.6, 2469.0], [65.7, 2474.0], [65.8, 2479.0], [65.9, 2479.0], [66.0, 2484.0], [66.1, 2487.0], [66.2, 2490.0], [66.3, 2508.0], [66.4, 2509.0], [66.5, 2510.0], [66.6, 2512.0], [66.7, 2513.0], [66.8, 2523.0], [66.9, 2536.0], [67.0, 2543.0], [67.1, 2545.0], [67.2, 2549.0], [67.3, 2554.0], [67.4, 2560.0], [67.5, 2563.0], [67.6, 2565.0], [67.7, 2569.0], [67.8, 2574.0], [67.9, 2577.0], [68.0, 2581.0], [68.1, 2582.0], [68.2, 2595.0], [68.3, 2605.0], [68.4, 2618.0], [68.5, 2626.0], [68.6, 2632.0], [68.7, 2633.0], [68.8, 2633.0], [68.9, 2637.0], [69.0, 2639.0], [69.1, 2640.0], [69.2, 2647.0], [69.3, 2653.0], [69.4, 2658.0], [69.5, 2661.0], [69.6, 2674.0], [69.7, 2680.0], [69.8, 2686.0], [69.9, 2695.0], [70.0, 2697.0], [70.1, 2701.0], [70.2, 2709.0], [70.3, 2713.0], [70.4, 2714.0], [70.5, 2725.0], [70.6, 2731.0], [70.7, 2736.0], [70.8, 2742.0], [70.9, 2747.0], [71.0, 2748.0], [71.1, 2752.0], [71.2, 2754.0], [71.3, 2759.0], [71.4, 2764.0], [71.5, 2765.0], [71.6, 2768.0], [71.7, 2768.0], [71.8, 2769.0], [71.9, 2772.0], [72.0, 2772.0], [72.1, 2776.0], [72.2, 2790.0], [72.3, 2791.0], [72.4, 2795.0], [72.5, 2795.0], [72.6, 2799.0], [72.7, 2801.0], [72.8, 2805.0], [72.9, 2809.0], [73.0, 2811.0], [73.1, 2812.0], [73.2, 2822.0], [73.3, 2830.0], [73.4, 2835.0], [73.5, 2836.0], [73.6, 2839.0], [73.7, 2844.0], [73.8, 2847.0], [73.9, 2848.0], [74.0, 2851.0], [74.1, 2853.0], [74.2, 2856.0], [74.3, 2856.0], [74.4, 2857.0], [74.5, 2858.0], [74.6, 2859.0], [74.7, 2870.0], [74.8, 2871.0], [74.9, 2875.0], [75.0, 2876.0], [75.1, 2880.0], [75.2, 2881.0], [75.3, 2882.0], [75.4, 2885.0], [75.5, 2886.0], [75.6, 2886.0], [75.7, 2890.0], [75.8, 2893.0], [75.9, 2895.0], [76.0, 2900.0], [76.1, 2902.0], [76.2, 2906.0], [76.3, 2907.0], [76.4, 2916.0], [76.5, 2919.0], [76.6, 2921.0], [76.7, 2932.0], [76.8, 2941.0], [76.9, 2943.0], [77.0, 2944.0], [77.1, 2948.0], [77.2, 2962.0], [77.3, 2969.0], [77.4, 2973.0], [77.5, 2977.0], [77.6, 2981.0], [77.7, 2988.0], [77.8, 2994.0], [77.9, 2994.0], [78.0, 3003.0], [78.1, 3010.0], [78.2, 3020.0], [78.3, 3028.0], [78.4, 3029.0], [78.5, 3046.0], [78.6, 3051.0], [78.7, 3057.0], [78.8, 3059.0], [78.9, 3064.0], [79.0, 3072.0], [79.1, 3082.0], [79.2, 3091.0], [79.3, 3093.0], [79.4, 3094.0], [79.5, 3099.0], [79.6, 3111.0], [79.7, 3127.0], [79.8, 3146.0], [79.9, 3155.0], [80.0, 3169.0], [80.1, 3176.0], [80.2, 3194.0], [80.3, 3217.0], [80.4, 3219.0], [80.5, 3223.0], [80.6, 3227.0], [80.7, 3235.0], [80.8, 3249.0], [80.9, 3249.0], [81.0, 3252.0], [81.1, 3265.0], [81.2, 3279.0], [81.3, 3288.0], [81.4, 3316.0], [81.5, 3318.0], [81.6, 3323.0], [81.7, 3326.0], [81.8, 3334.0], [81.9, 3357.0], [82.0, 3392.0], [82.1, 3421.0], [82.2, 3448.0], [82.3, 3452.0], [82.4, 3458.0], [82.5, 3466.0], [82.6, 3488.0], [82.7, 3490.0], [82.8, 3494.0], [82.9, 3496.0], [83.0, 3497.0], [83.1, 3507.0], [83.2, 3508.0], [83.3, 3515.0], [83.4, 3521.0], [83.5, 3523.0], [83.6, 3526.0], [83.7, 3530.0], [83.8, 3534.0], [83.9, 3544.0], [84.0, 3550.0], [84.1, 3558.0], [84.2, 3564.0], [84.3, 3584.0], [84.4, 3593.0], [84.5, 3617.0], [84.6, 3619.0], [84.7, 3619.0], [84.8, 3634.0], [84.9, 3639.0], [85.0, 3641.0], [85.1, 3644.0], [85.2, 3645.0], [85.3, 3664.0], [85.4, 3674.0], [85.5, 3679.0], [85.6, 3686.0], [85.7, 3700.0], [85.8, 3703.0], [85.9, 3704.0], [86.0, 3705.0], [86.1, 3708.0], [86.2, 3708.0], [86.3, 3710.0], [86.4, 3717.0], [86.5, 3721.0], [86.6, 3726.0], [86.7, 3731.0], [86.8, 3734.0], [86.9, 3736.0], [87.0, 3736.0], [87.1, 3741.0], [87.2, 3742.0], [87.3, 3751.0], [87.4, 3753.0], [87.5, 3754.0], [87.6, 3758.0], [87.7, 3764.0], [87.8, 3764.0], [87.9, 3767.0], [88.0, 3773.0], [88.1, 3781.0], [88.2, 3782.0], [88.3, 3784.0], [88.4, 3785.0], [88.5, 3789.0], [88.6, 3811.0], [88.7, 3822.0], [88.8, 3834.0], [88.9, 3839.0], [89.0, 3849.0], [89.1, 3853.0], [89.2, 3858.0], [89.3, 3869.0], [89.4, 3891.0], [89.5, 3894.0], [89.6, 3931.0], [89.7, 3936.0], [89.8, 3945.0], [89.9, 3976.0], [90.0, 3984.0], [90.1, 3987.0], [90.2, 3990.0], [90.3, 3997.0], [90.4, 4000.0], [90.5, 4008.0], [90.6, 4024.0], [90.7, 4030.0], [90.8, 4032.0], [90.9, 4035.0], [91.0, 4046.0], [91.1, 4069.0], [91.2, 4077.0], [91.3, 4082.0], [91.4, 4090.0], [91.5, 4091.0], [91.6, 4094.0], [91.7, 4102.0], [91.8, 4106.0], [91.9, 4115.0], [92.0, 4120.0], [92.1, 4123.0], [92.2, 4126.0], [92.3, 4128.0], [92.4, 4131.0], [92.5, 4134.0], [92.6, 4145.0], [92.7, 4150.0], [92.8, 4167.0], [92.9, 4182.0], [93.0, 4187.0], [93.1, 4195.0], [93.2, 4198.0], [93.3, 4213.0], [93.4, 4256.0], [93.5, 4291.0], [93.6, 4334.0], [93.7, 4347.0], [93.8, 4366.0], [93.9, 4395.0], [94.0, 4396.0], [94.1, 4397.0], [94.2, 4397.0], [94.3, 4398.0], [94.4, 4398.0], [94.5, 4422.0], [94.6, 4468.0], [94.7, 4540.0], [94.8, 4565.0], [94.9, 4575.0], [95.0, 4576.0], [95.1, 4578.0], [95.2, 4582.0], [95.3, 4588.0], [95.4, 4603.0], [95.5, 4619.0], [95.6, 4623.0], [95.7, 4646.0], [95.8, 4650.0], [95.9, 4659.0], [96.0, 4662.0], [96.1, 4690.0], [96.2, 4733.0], [96.3, 4759.0], [96.4, 4770.0], [96.5, 4778.0], [96.6, 4782.0], [96.7, 4795.0], [96.8, 4800.0], [96.9, 4819.0], [97.0, 4830.0], [97.1, 4835.0], [97.2, 4844.0], [97.3, 4864.0], [97.4, 4870.0], [97.5, 4894.0], [97.6, 4899.0], [97.7, 4919.0], [97.8, 4945.0], [97.9, 4975.0], [98.0, 5027.0], [98.1, 5036.0], [98.2, 5055.0], [98.3, 5062.0], [98.4, 5084.0], [98.5, 5161.0], [98.6, 5177.0], [98.7, 5218.0], [98.8, 5252.0], [98.9, 5276.0], [99.0, 5288.0], [99.1, 5322.0], [99.2, 5339.0], [99.3, 5397.0], [99.4, 5404.0], [99.5, 5415.0], [99.6, 5477.0], [99.7, 5514.0], [99.8, 5625.0], [99.9, 5642.0]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 414.0, "series": [{"data": [[0.0, 414.0], [600.0, 7.0], [700.0, 44.0], [800.0, 40.0], [900.0, 25.0], [1000.0, 19.0], [1100.0, 16.0], [1200.0, 54.0], [1300.0, 77.0], [1400.0, 27.0], [1500.0, 55.0], [1600.0, 40.0], [1700.0, 44.0], [1800.0, 30.0], [1900.0, 28.0], [2000.0, 29.0], [2100.0, 44.0], [2200.0, 35.0], [2300.0, 39.0], [2400.0, 35.0], [2500.0, 40.0], [2600.0, 37.0], [2700.0, 51.0], [2800.0, 67.0], [2900.0, 40.0], [3000.0, 31.0], [3100.0, 14.0], [3200.0, 23.0], [3300.0, 14.0], [3400.0, 19.0], [3500.0, 29.0], [3600.0, 24.0], [3700.0, 57.0], [3800.0, 20.0], [3900.0, 17.0], [4000.0, 26.0], [4100.0, 31.0], [4200.0, 6.0], [4300.0, 19.0], [4400.0, 3.0], [4500.0, 15.0], [4600.0, 15.0], [4700.0, 13.0], [4800.0, 17.0], [5000.0, 10.0], [5100.0, 5.0], [4900.0, 6.0], [5200.0, 7.0], [5300.0, 6.0], [5400.0, 6.0], [5500.0, 2.0], [5600.0, 5.0], [100.0, 76.0], [200.0, 31.0], [300.0, 34.0], [400.0, 50.0], [500.0, 32.0]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 341.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1053.0, "series": [{"data": [[0.0, 606.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 341.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1053.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 984.4970000000023, "minX": 1.7556714E12, "maxY": 984.4970000000023, "series": [{"data": [[1.7556714E12, 984.4970000000023]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556714E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.0, "maxY": 5642.0, "series": [{"data": [[2.0, 4975.0], [4.0, 1172.0], [10.0, 1354.0], [19.0, 1328.0], [25.0, 1353.0], [29.0, 1333.6999999999998], [30.0, 1355.5], [31.0, 1353.0], [34.0, 1381.1666666666667], [37.0, 1347.6666666666667], [36.0, 1355.0], [39.0, 1343.0], [38.0, 1347.0], [42.0, 1341.6666666666667], [44.0, 1341.5], [47.0, 572.0], [46.0, 1318.5], [48.0, 1001.0], [51.0, 1000.0], [55.0, 1332.5], [59.0, 1450.0], [58.0, 2665.0], [61.0, 3330.5], [63.0, 5247.0], [62.0, 1347.0], [66.0, 1362.5], [71.0, 1343.0], [70.0, 1343.0], [69.0, 1331.0], [68.0, 1338.0], [75.0, 1324.0], [74.0, 4659.0], [73.0, 4662.0], [72.0, 4668.0], [79.0, 5415.0], [78.0, 5514.0], [77.0, 1320.0], [76.0, 1328.0], [83.0, 5625.0], [82.0, 1350.0], [81.0, 5418.0], [87.0, 5642.0], [86.0, 5642.0], [85.0, 5134.5], [91.0, 1345.0], [90.0, 5502.0], [89.0, 5477.0], [88.0, 1319.0], [94.0, 1240.0], [99.0, 1301.75], [98.0, 1232.0], [96.0, 1340.0], [103.0, 1339.0], [101.0, 1340.0], [100.0, 1341.0], [107.0, 2927.5], [105.0, 4195.0], [104.0, 1240.0], [108.0, 1226.0], [115.0, 1239.0], [113.0, 1222.0], [119.0, 1371.0], [118.0, 1193.0], [117.0, 1188.0], [116.0, 1834.1666666666665], [123.0, 4398.0], [122.0, 999.0], [121.0, 1049.0], [127.0, 4397.0], [135.0, 911.0], [133.0, 911.0], [131.0, 4397.5], [129.0, 4396.4], [143.0, 4396.0], [140.0, 1127.0], [139.0, 2814.0], [137.0, 2080.3333333333335], [151.0, 4632.5], [150.0, 3370.5], [148.0, 1171.0], [146.0, 5303.0], [159.0, 4579.0], [158.0, 900.0], [156.0, 4574.0], [153.0, 902.0], [165.0, 4806.5], [163.0, 2759.0], [160.0, 4694.0], [174.0, 2977.5], [172.0, 4830.0], [171.0, 5061.0], [170.0, 2858.0], [168.0, 2195.0], [182.0, 886.0], [181.0, 885.0], [180.0, 1159.0], [178.0, 4565.0], [177.0, 4586.0], [176.0, 4890.5], [191.0, 870.0], [190.0, 873.0], [189.0, 875.0], [188.0, 910.0], [187.0, 880.0], [186.0, 882.0], [185.0, 883.3333333333334], [199.0, 852.0], [198.0, 854.0], [197.0, 859.0], [196.0, 859.0], [195.0, 867.0], [194.0, 863.0], [193.0, 869.5], [207.0, 4832.0], [206.0, 1070.5], [205.0, 830.0], [203.0, 864.0], [202.0, 851.0], [201.0, 843.0], [200.0, 852.0], [215.0, 1234.0], [214.0, 1008.0], [212.0, 889.0], [211.0, 815.0], [209.0, 842.0], [208.0, 784.0], [223.0, 753.0], [222.0, 765.0], [221.0, 763.0], [220.0, 1079.0], [218.0, 806.0], [217.0, 803.0], [231.0, 751.0], [230.0, 1325.0], [229.0, 825.0], [228.0, 764.5], [227.0, 759.0], [225.0, 776.0], [224.0, 4343.0], [239.0, 967.5], [237.0, 782.0], [236.0, 744.5], [234.0, 787.0], [233.0, 791.0], [232.0, 726.0], [247.0, 972.0], [245.0, 398.0], [244.0, 1208.0], [243.0, 765.0], [242.0, 770.0], [241.0, 738.0], [240.0, 773.0], [255.0, 757.0], [254.0, 723.0], [253.0, 366.0], [252.0, 1213.0], [251.0, 696.0], [250.0, 567.5], [248.0, 1242.0], [259.0, 759.0], [269.0, 1251.0], [271.0, 1251.0], [268.0, 736.0], [267.0, 429.0], [266.0, 582.3333333333334], [263.0, 791.0], [261.0, 743.0], [260.0, 747.0], [258.0, 703.5], [256.0, 437.0], [286.0, 1561.0], [287.0, 1572.0], [285.0, 2835.0], [283.0, 4798.0], [282.0, 116.0], [280.0, 2281.3333333333335], [277.0, 708.0], [274.0, 1264.0], [273.0, 734.0], [272.0, 780.5], [302.0, 929.0], [300.0, 1547.0], [290.0, 1604.0], [289.0, 4759.0], [288.0, 267.0], [299.0, 1548.0], [298.0, 2169.0], [297.0, 2175.0], [296.0, 1334.5], [294.0, 1551.0], [293.0, 1549.0], [292.0, 2620.5], [307.0, 5110.0], [318.0, 1636.0], [319.0, 1778.0], [317.0, 4770.0], [314.0, 1583.0], [313.0, 1538.0], [311.0, 1172.75], [304.0, 1502.5], [306.0, 5404.0], [305.0, 4870.0], [335.0, 1545.0], [332.0, 4969.0], [330.0, 4777.5], [328.0, 4899.0], [327.0, 1530.0], [326.0, 1760.0], [325.0, 4782.0], [324.0, 5441.0], [322.0, 3221.0], [320.0, 4895.0], [351.0, 1535.3333333333333], [347.0, 1589.0], [346.0, 3393.5], [344.0, 1526.0], [343.0, 4407.6], [340.0, 1526.0], [339.0, 1528.0], [336.0, 3730.0], [365.0, 1508.0], [364.0, 4730.0], [362.0, 2573.0], [360.0, 1773.0], [359.0, 4959.0], [358.0, 5012.0], [357.0, 1582.0], [356.0, 3185.5], [355.0, 1540.0], [354.0, 1549.0], [370.0, 792.0], [382.0, 29.666666666666668], [383.0, 1499.0], [380.0, 2688.0], [369.0, 1519.0], [368.0, 1516.5], [379.0, 32.0], [376.0, 1480.0], [375.0, 4945.0], [374.0, 33.0], [373.0, 1575.0], [372.0, 1524.0], [398.0, 5055.0], [399.0, 28.0], [397.0, 35.0], [396.0, 1488.0], [395.0, 1488.0], [394.0, 765.0], [392.0, 1497.0], [391.0, 1492.0], [387.0, 1519.0], [386.0, 25.0], [385.0, 26.0], [384.0, 5333.0], [390.0, 2139.0], [415.0, 752.5], [413.0, 750.5], [403.0, 27.5], [401.0, 721.0], [411.0, 23.0], [410.0, 1464.0], [409.0, 1476.0], [408.0, 26.0], [407.0, 749.0], [406.0, 28.0], [404.0, 31.0], [430.0, 24.0], [431.0, 26.0], [428.0, 29.0], [419.0, 656.5], [417.0, 32.0], [416.0, 1390.0], [427.0, 3135.5], [425.0, 36.0], [424.0, 38.0], [423.0, 25.0], [422.0, 5322.0], [421.0, 30.0], [434.0, 1394.0], [447.0, 31.0], [445.0, 576.5], [442.0, 5036.0], [441.0, 1248.0], [440.0, 4126.0], [438.0, 1199.0], [437.0, 3863.3333333333335], [433.0, 1206.0], [432.0, 4869.0], [462.0, 24.0], [463.0, 24.0], [461.0, 1112.0], [460.0, 4475.0], [459.0, 26.0], [457.0, 1115.0], [456.0, 1194.0], [455.0, 4963.5], [449.0, 2075.0], [451.0, 1120.0], [450.0, 1122.0], [453.0, 1201.0], [452.0, 3183.5], [467.0, 4094.0], [478.0, 35.0], [479.0, 4079.0], [476.0, 735.0], [473.0, 23.5], [472.0, 24.0], [470.0, 27.0], [469.0, 1092.0], [468.0, 28.0], [466.0, 5054.0], [464.0, 1106.0], [482.0, 1078.0], [495.0, 710.6666666666666], [492.0, 536.0], [491.0, 536.0], [490.0, 536.0], [489.0, 539.5], [487.0, 713.6666666666666], [484.0, 23.5], [481.0, 27.0], [480.0, 1078.0], [510.0, 36.0], [511.0, 515.0], [508.0, 1052.0], [497.0, 26.0], [496.0, 521.0], [507.0, 1053.0], [506.0, 1062.0], [505.0, 541.0], [504.0, 1061.0], [502.0, 22.0], [501.0, 528.0], [500.0, 356.0], [532.0, 291.0], [542.0, 486.0], [543.0, 734.0], [530.0, 86.0], [529.0, 263.0], [540.0, 659.6666666666666], [537.0, 956.0], [536.0, 485.0], [518.0, 31.0], [517.0, 37.0], [516.0, 32.0], [514.0, 42.666666666666664], [527.0, 267.0], [525.0, 259.0], [523.0, 260.0], [521.0, 496.0], [520.0, 32.0], [535.0, 486.0], [534.0, 951.0], [533.0, 24.0], [570.0, 250.5], [574.0, 55.0], [575.0, 54.0], [561.0, 932.0], [560.0, 455.0], [563.0, 943.0], [562.0, 481.5], [565.0, 49.0], [564.0, 32.0], [573.0, 61.0], [572.0, 378.0], [571.0, 30.0], [568.0, 408.0], [551.0, 736.0], [549.0, 5084.0], [548.0, 469.0], [547.0, 936.0], [546.0, 1021.0], [545.0, 258.0], [558.0, 1006.0], [557.0, 470.0], [556.0, 432.0], [555.0, 964.0], [554.0, 465.6666666666667], [567.0, 418.0], [566.0, 45.0], [604.0, 336.0], [607.0, 314.0], [592.0, 35.0], [594.0, 786.0], [593.0, 342.0], [597.0, 352.5], [595.0, 353.0], [606.0, 331.0], [605.0, 331.0], [603.0, 337.0], [602.0, 21.0], [601.0, 338.0], [600.0, 819.0], [591.0, 343.0], [579.0, 52.0], [578.0, 53.333333333333336], [583.0, 150.0], [580.0, 338.0], [590.0, 601.5], [588.0, 364.0], [587.0, 366.0], [586.0, 43.0], [585.0, 44.0], [584.0, 44.0], [599.0, 346.0], [598.0, 822.0], [628.0, 213.0], [637.0, 380.0], [638.0, 182.0], [627.0, 734.0], [626.0, 581.6666666666666], [634.0, 266.0], [633.0, 699.0], [632.0, 270.0], [615.0, 521.5], [613.0, 430.5], [611.0, 320.0], [609.0, 822.0], [623.0, 283.0], [621.0, 476.0], [620.0, 291.0], [618.0, 731.0], [617.0, 23.0], [616.0, 282.0], [631.0, 228.0], [630.0, 195.0], [629.0, 195.0], [669.0, 172.5], [659.0, 155.0], [670.0, 151.0], [656.0, 196.0], [667.0, 143.0], [665.0, 147.0], [655.0, 410.5], [640.0, 220.5], [642.0, 221.0], [641.0, 239.0], [644.0, 236.0], [643.0, 220.0], [647.0, 408.5], [645.0, 215.0], [653.0, 174.0], [652.0, 219.0], [651.0, 199.0], [650.0, 202.0], [649.0, 227.0], [648.0, 165.0], [663.0, 152.0], [661.0, 132.0], [660.0, 151.0], [658.0, 153.0], [657.0, 135.0], [696.0, 536.0], [702.0, 296.5], [703.0, 572.0], [689.0, 105.0], [688.0, 577.0], [691.0, 545.0], [690.0, 109.0], [700.0, 502.5], [698.0, 509.0], [697.0, 4304.0], [687.0, 111.0], [673.0, 185.0], [672.0, 154.0], [675.0, 187.0], [674.0, 181.0], [677.0, 119.0], [676.0, 154.0], [679.0, 115.0], [678.0, 124.0], [686.0, 155.0], [685.0, 609.0], [684.0, 105.0], [683.0, 164.0], [682.0, 105.0], [681.0, 110.0], [680.0, 101.0], [695.0, 541.0], [694.0, 115.0], [693.0, 115.0], [692.0, 547.0], [728.0, 30.0], [733.0, 448.5], [735.0, 2399.0], [720.0, 4733.0], [723.0, 2504.5], [721.0, 476.0], [731.0, 452.0], [730.0, 451.0], [729.0, 457.0], [719.0, 479.0], [705.0, 547.5], [708.0, 286.0], [706.0, 498.0], [711.0, 495.0], [709.0, 71.0], [718.0, 481.5], [716.0, 483.0], [715.0, 491.0], [714.0, 484.0], [713.0, 489.0], [727.0, 525.0], [726.0, 33.0], [725.0, 457.0], [724.0, 467.0], [766.0, 3249.0], [767.0, 3750.0], [752.0, 3673.0], [756.0, 3782.0], [755.0, 3631.0], [765.0, 3249.0], [764.0, 4334.0], [762.0, 3521.0], [761.0, 4538.0], [760.0, 3522.0], [743.0, 3736.0], [742.0, 3708.0], [740.0, 3736.5], [738.0, 3747.5], [736.0, 3777.0], [750.0, 3788.0], [749.0, 3710.0], [748.0, 3706.6666666666665], [745.0, 3717.3333333333335], [759.0, 3523.0], [758.0, 3526.5], [798.0, 32.0], [799.0, 31.0], [784.0, 4203.0], [786.0, 37.0], [785.0, 39.0], [797.0, 35.0], [796.0, 25.0], [795.0, 28.666666666666668], [792.0, 35.0], [783.0, 355.0], [774.0, 4011.6], [769.0, 4463.5], [782.0, 4535.5], [780.0, 4422.0], [779.0, 468.0], [778.0, 30.0], [777.0, 34.0], [776.0, 2548.0], [791.0, 31.0], [790.0, 4540.0], [789.0, 4612.0], [788.0, 2117.0], [825.0, 3987.0], [829.0, 4381.5], [830.0, 88.0], [816.0, 3999.0], [818.0, 4256.0], [817.0, 4131.0], [828.0, 4167.0], [827.0, 3976.0], [815.0, 346.0], [801.0, 325.0], [800.0, 26.0], [803.0, 4429.0], [802.0, 213.0], [805.0, 211.0], [804.0, 194.0], [807.0, 25.0], [806.0, 192.0], [814.0, 123.33333333333333], [812.0, 280.0], [810.0, 21.0], [809.0, 290.0], [826.0, 179.0], [823.0, 3452.0], [822.0, 185.0], [821.0, 73.5], [819.0, 4077.0], [862.0, 2893.0], [863.0, 4213.0], [849.0, 3093.0], [848.0, 3093.75], [851.0, 3064.0], [850.0, 3073.0], [860.0, 4124.0], [859.0, 4062.0], [857.0, 4197.0], [856.0, 2809.0], [844.0, 3894.0], [834.0, 4030.0], [833.0, 2429.0], [837.0, 110.0], [835.0, 4165.0], [839.0, 2836.0], [838.0, 3934.0], [843.0, 58.0], [842.0, 3272.0], [841.0, 53.0], [840.0, 4147.0], [855.0, 2809.0], [854.0, 3785.0], [853.0, 3458.0], [852.0, 3059.0], [889.0, 4182.0], [894.0, 4090.0], [895.0, 3636.0], [880.0, 3141.0], [883.0, 3912.0], [881.0, 45.0], [885.0, 4000.0], [884.0, 4195.0], [892.0, 3764.0], [891.0, 2632.0], [890.0, 27.0], [888.0, 31.0], [870.0, 50.0], [869.0, 51.0], [867.0, 51.0], [865.0, 53.0], [864.0, 53.0], [879.0, 3782.0], [878.0, 2844.0], [877.0, 3842.3333333333335], [874.0, 4150.5], [872.0, 50.0], [887.0, 4069.0], [886.0, 4187.0], [920.0, 4139.0], [913.0, 23.0], [925.0, 3929.3333333333335], [922.0, 3764.0], [921.0, 4132.0], [911.0, 3851.5], [896.0, 22.0], [898.0, 3734.0], [897.0, 4102.0], [901.0, 4082.0], [900.0, 4011.0], [909.0, 28.0], [908.0, 4150.0], [907.0, 3742.0], [906.0, 34.0], [905.0, 4016.0], [904.0, 1372.3333333333335], [919.0, 3927.0], [917.0, 2736.0], [914.0, 52.0], [912.0, 26.0], [957.0, 4008.0], [958.0, 4058.0], [945.0, 21.0], [947.0, 3544.0], [946.0, 3894.5], [956.0, 3531.0], [955.0, 3806.0], [953.0, 24.0], [952.0, 3644.0], [943.0, 3804.0], [930.0, 3957.5], [933.0, 3704.5], [931.0, 4125.0], [939.0, 3754.0], [938.0, 4120.0], [937.0, 4111.0], [951.0, 3645.0], [950.0, 4091.0], [949.0, 4106.0], [948.0, 24.0], [990.0, 27.0], [991.0, 176.0], [978.0, 23.0], [976.0, 3705.3333333333335], [989.0, 2133.0], [988.0, 3849.0], [987.0, 2029.0], [985.0, 40.0], [984.0, 25.0], [966.0, 30.0], [965.0, 4095.0], [964.0, 28.0], [963.0, 1986.5], [961.0, 31.0], [960.0, 3869.5], [973.0, 3619.0], [972.0, 27.666666666666668], [970.0, 3682.0], [968.0, 30.0], [983.0, 3799.6666666666665], [981.0, 3622.3333333333335], [1017.0, 2058.5], [1022.0, 23.0], [1023.0, 24.0], [1009.0, 33.0], [1011.0, 99.0], [1010.0, 25.0], [1021.0, 27.0], [1020.0, 30.5], [1018.0, 3704.0], [1007.0, 3558.0], [992.0, 24.0], [995.0, 27.0], [993.0, 170.0], [997.0, 125.0], [996.0, 4005.0], [999.0, 122.0], [998.0, 3997.0], [1006.0, 109.0], [1004.0, 123.0], [1003.0, 37.0], [1002.0, 3570.0], [1001.0, 110.0], [1000.0, 115.0], [1015.0, 167.0], [1014.0, 94.0], [1013.0, 96.0], [1012.0, 37.0], [1084.0, 3744.0], [1064.0, 3773.0], [1056.0, 1966.3333333333335], [1058.0, 3853.0], [1060.0, 50.0], [1062.0, 3726.0], [1066.0, 29.0], [1068.0, 3767.0], [1070.0, 3843.0], [1086.0, 3827.0], [1080.0, 3789.0], [1076.0, 1886.0], [1074.0, 23.0], [1072.0, 3853.0], [1038.0, 3939.0], [1036.0, 3858.0], [1034.0, 3931.0], [1030.0, 29.0], [1028.0, 64.0], [1024.0, 80.0], [1050.0, 3766.0], [1048.0, 48.0], [1046.0, 1966.0], [1044.0, 3891.0], [1042.0, 91.33333333333333], [1040.0, 99.0], [1138.0, 27.0], [1150.0, 1990.6666666666665], [1146.0, 1880.5], [1120.0, 2767.0], [1122.0, 20.0], [1124.0, 24.0], [1126.0, 1773.0], [1128.0, 3641.0], [1132.0, 3515.0], [1134.0, 35.5], [1148.0, 1872.0], [1140.0, 887.0], [1136.0, 34.0], [1118.0, 3784.0], [1088.0, 19.0], [1090.0, 24.0], [1092.0, 30.0], [1094.0, 3721.0], [1096.0, 3584.0], [1098.0, 18.0], [1100.0, 1855.0], [1116.0, 3634.0], [1114.0, 57.0], [1110.0, 3801.0], [1108.0, 3488.0], [1106.0, 23.0], [1104.0, 26.0], [1160.0, 3249.0], [1176.0, 753.5], [1178.0, 19.0], [1180.0, 26.0], [1152.0, 1739.0], [1154.0, 27.0], [1156.0, 24.0], [1158.0, 27.0], [1164.0, 3648.0], [1162.0, 3463.5], [1166.0, 23.0], [1182.0, 3508.0], [1172.0, 24.0], [1174.0, 3223.0], [1168.0, 2897.3333333333335], [1184.0, 27.0], [1188.0, 2170.0], [1190.0, 40.0], [1192.0, 3525.0], [1194.0, 3617.0], [1196.0, 43.0], [1198.0, 3584.0], [1214.0, 1609.0], [1212.0, 1615.0], [1208.0, 62.0], [1206.0, 26.0], [1204.0, 25.0], [1202.0, 28.5], [1200.0, 32.0], [1276.0, 2886.0], [1254.0, 2275.0], [1256.0, 58.0], [1258.0, 3326.0], [1262.0, 3376.0], [1268.0, 3010.0], [1266.0, 3071.0], [1264.0, 3281.0], [1228.0, 33.0], [1224.0, 814.0], [1218.0, 3593.0], [1216.0, 3330.0], [1242.0, 1574.0], [1238.0, 3369.5], [1234.0, 30.0], [1340.0, 2792.0], [1320.0, 3448.0], [1314.0, 2853.5], [1316.0, 2907.0], [1318.0, 3111.0], [1322.0, 2903.0], [1324.0, 3123.0], [1326.0, 2921.0], [1342.0, 2888.0], [1336.0, 2742.0], [1334.0, 2633.0], [1330.0, 3005.5], [1328.0, 3398.0], [1294.0, 3421.0], [1290.0, 2990.6666666666665], [1284.0, 2857.0], [1280.0, 2800.0], [1310.0, 2834.0], [1306.0, 2916.0], [1304.0, 3146.0], [1302.0, 2815.0], [1300.0, 3219.0], [1298.0, 3217.0], [1296.0, 2931.0], [1400.0, 2928.0], [1384.0, 3317.5], [1376.0, 1927.6666666666665], [1380.0, 1332.5], [1378.0, 3169.0], [1382.0, 2849.0], [1386.0, 61.0], [1388.0, 3003.0], [1390.0, 19.0], [1402.0, 19.0], [1398.0, 2563.0], [1396.0, 1824.5], [1394.0, 2960.5], [1392.0, 2754.0], [1344.0, 2736.0], [1350.0, 2880.0], [1352.0, 2748.0], [1354.0, 2714.0], [1358.0, 2686.0], [1372.0, 29.0], [1370.0, 27.0], [1368.0, 2773.5], [1364.0, 2764.0], [1362.0, 2847.0], [1360.0, 2739.5], [1464.0, 2557.0], [1462.0, 2639.5], [1468.0, 2901.0], [1442.0, 1361.0], [1440.0, 2618.0], [1444.0, 2560.0], [1446.0, 20.0], [1450.0, 2552.0], [1452.0, 3029.0], [1470.0, 2633.0], [1466.0, 2637.0], [1460.0, 2851.0], [1458.0, 3168.0], [1456.0, 19.0], [1422.0, 20.0], [1420.0, 1388.0], [1418.0, 2830.5], [1416.0, 3072.0], [1414.0, 1926.3333333333335], [1412.0, 3082.0], [1410.0, 2857.6666666666665], [1408.0, 19.0], [1438.0, 2534.0], [1436.0, 2841.0], [1434.0, 2626.0], [1432.0, 2948.0], [1430.0, 1825.5], [1428.0, 1801.6666666666667], [1424.0, 2880.0], [1520.0, 2802.0], [1532.0, 3028.0], [1510.0, 2543.0], [1516.0, 20.0], [1518.0, 2586.0], [1534.0, 2343.0], [1530.0, 2790.0], [1528.0, 25.0], [1522.0, 2902.0], [1486.0, 31.0], [1484.0, 20.0], [1482.0, 2362.0], [1480.0, 2859.0], [1476.0, 2870.0], [1474.0, 24.0], [1472.0, 18.0], [1502.0, 30.0], [1500.0, 2835.0], [1494.0, 37.0], [1598.0, 21.0], [1574.0, 2048.0], [1578.0, 1871.3333333333333], [1580.0, 1129.142857142857], [1582.0, 1815.5], [1576.0, 1787.6666666666667], [1572.0, 26.0], [1570.0, 2675.0], [1568.0, 2680.0], [1596.0, 2895.0], [1594.0, 22.0], [1592.0, 2131.0], [1590.0, 2574.0], [1588.0, 20.0], [1586.0, 2477.5], [1584.0, 22.0], [1536.0, 2294.0], [1540.0, 2382.0], [1546.0, 1712.6666666666665], [1542.0, 3020.0], [1548.0, 48.0], [1550.0, 2777.0], [1566.0, 1215.0], [1562.0, 2853.0], [1560.0, 26.0], [1558.0, 19.0], [1556.0, 2871.0], [1660.0, 1256.5], [1662.0, 2577.0], [1632.0, 43.0], [1634.0, 2272.0], [1636.0, 2510.0], [1638.0, 2648.0], [1640.0, 2414.0], [1642.0, 2474.0], [1646.0, 26.0], [1644.0, 2713.0], [1658.0, 2233.0], [1654.0, 27.0], [1652.0, 2512.0], [1650.0, 2118.0], [1648.0, 2798.0], [1614.0, 24.0], [1612.0, 2389.0], [1608.0, 2857.0], [1606.0, 2856.0], [1604.0, 2856.0], [1602.0, 2870.0], [1600.0, 2121.0], [1624.0, 1104.5], [1622.0, 2512.0], [1620.0, 2185.0], [1616.0, 2765.0], [1724.0, 2313.0], [1696.0, 2039.0], [1698.0, 77.0], [1700.0, 2638.5], [1702.0, 2665.0], [1704.0, 2443.0], [1706.0, 2084.5], [1708.0, 2383.0], [1710.0, 23.0], [1726.0, 2575.0], [1722.0, 2349.0], [1720.0, 952.0], [1718.0, 2361.5], [1714.0, 2374.0], [1712.0, 2517.0], [1678.0, 2225.0], [1676.0, 2101.0], [1670.0, 2435.0], [1668.0, 2237.0], [1666.0, 2124.0], [1694.0, 1104.5], [1690.0, 25.0], [1686.0, 2094.0], [1684.0, 2021.5], [1680.0, 2220.0], [1740.0, 971.0], [1788.0, 1805.0], [1752.0, 1567.0], [1754.0, 2011.3333333333333], [1756.0, 24.0], [1776.0, 20.0], [1742.0, 1968.0], [1734.0, 2217.0], [1732.0, 1936.0], [1730.0, 1172.0], [1728.0, 20.0], [1736.0, 2347.0], [1758.0, 2228.0], [1778.0, 2158.0], [1780.0, 1770.0], [1750.0, 855.0], [1748.0, 2515.0], [1744.0, 1926.0], [1790.0, 1764.2], [1760.0, 2154.0], [1762.0, 1792.0], [1764.0, 2117.0], [1766.0, 23.0], [1768.0, 1967.5], [1770.0, 2085.0], [1772.0, 2405.0], [1774.0, 2167.0], [1786.0, 1728.0], [1784.0, 2108.5], [1800.0, 1245.6666666666665], [1806.0, 1596.5], [1842.0, 1976.6666666666667], [1846.0, 26.0], [1848.0, 1733.0], [1850.0, 1584.0], [1852.0, 2135.0], [1824.0, 2009.0], [1826.0, 1020.0], [1828.0, 2213.0], [1832.0, 1726.5], [1836.0, 1023.0], [1834.0, 1812.0], [1798.0, 1933.5], [1796.0, 1826.6666666666667], [1794.0, 1875.25], [1792.0, 1186.3333333333335], [1822.0, 1958.0], [1820.0, 2045.0], [1816.0, 2288.5], [1814.0, 2286.0], [1812.0, 1090.5], [1810.0, 839.0], [1808.0, 2033.0], [1864.0, 1473.0], [1868.0, 1584.0], [1866.0, 934.0], [1870.0, 1581.0], [1862.0, 1634.0], [1860.0, 1909.0], [1858.0, 2123.0], [1856.0, 1853.0], [1085.0, 3617.0], [1087.0, 3822.0], [1057.0, 59.0], [1059.0, 57.0], [1061.0, 3799.5], [1063.0, 3758.0], [1065.0, 32.0], [1067.0, 29.0], [1069.0, 88.0], [1071.0, 3686.0], [1083.0, 2801.0], [1081.0, 3624.5], [1079.0, 3731.0], [1077.0, 1931.0], [1075.0, 24.0], [1037.0, 3717.0], [1035.0, 92.0], [1033.0, 49.0], [1031.0, 59.0], [1029.0, 3770.0], [1027.0, 77.0], [1025.0, 3639.0], [1053.0, 1972.0], [1051.0, 3903.0], [1049.0, 53.0], [1045.0, 76.0], [1043.0, 104.0], [1143.0, 1743.5], [1145.0, 2717.5], [1147.0, 338.0], [1151.0, 3679.0], [1121.0, 40.0], [1123.0, 3466.0], [1125.0, 3644.0], [1127.0, 1772.0], [1129.0, 3497.0], [1131.0, 1705.0], [1135.0, 33.0], [1141.0, 3542.0], [1137.0, 33.0], [1089.0, 23.0], [1091.0, 3685.0], [1093.0, 21.0], [1095.0, 3709.0], [1097.0, 3674.0], [1099.0, 19.0], [1103.0, 1535.0], [1101.0, 3550.0], [1117.0, 3751.0], [1115.0, 3644.0], [1113.0, 38.0], [1111.0, 23.0], [1109.0, 31.0], [1107.0, 22.0], [1105.0, 34.0], [1157.0, 21.0], [1207.0, 25.0], [1167.0, 1278.0], [1175.0, 1163.3333333333335], [1177.0, 3198.5], [1179.0, 18.0], [1181.0, 24.0], [1183.0, 2894.0], [1153.0, 3319.0], [1155.0, 29.0], [1159.0, 28.0], [1165.0, 20.0], [1173.0, 1199.0], [1171.0, 583.4], [1169.0, 3666.0], [1215.0, 1604.0], [1185.0, 24.0], [1189.0, 1644.0], [1191.0, 20.0], [1193.0, 3186.0], [1195.0, 3063.0], [1197.0, 3494.0], [1199.0, 32.0], [1213.0, 1613.0], [1211.0, 819.5], [1209.0, 23.0], [1205.0, 25.0], [1203.0, 27.0], [1275.0, 3052.0], [1279.0, 3082.0], [1249.0, 3024.5], [1253.0, 2988.0], [1251.0, 2994.0], [1255.0, 3296.0], [1257.0, 3392.0], [1259.0, 2977.0], [1263.0, 2952.0], [1277.0, 2944.0], [1273.0, 2963.0], [1271.0, 2945.0], [1269.0, 3057.0], [1267.0, 2944.0], [1231.0, 811.0], [1229.0, 1591.0], [1227.0, 813.5], [1225.0, 36.0], [1223.0, 36.0], [1221.0, 37.5], [1219.0, 38.0], [1217.0, 41.0], [1247.0, 3172.0], [1245.0, 3156.5], [1243.0, 2916.0], [1241.0, 2629.6666666666665], [1239.0, 3465.0], [1235.0, 22.0], [1233.0, 2541.5], [1339.0, 2747.0], [1335.0, 2801.0], [1343.0, 2768.0], [1315.0, 2904.5], [1317.0, 2943.0], [1319.0, 182.0], [1321.0, 2941.0], [1323.0, 2857.0], [1325.0, 2893.0], [1327.0, 2846.0], [1341.0, 2770.0], [1337.0, 2886.0], [1333.0, 2799.0], [1331.0, 2811.0], [1293.0, 3500.5], [1291.0, 3489.0], [1287.0, 2930.0], [1283.0, 2880.0], [1281.0, 2916.0], [1311.0, 2967.0], [1309.0, 3064.0], [1307.0, 2971.0], [1303.0, 1399.0], [1301.0, 3086.0], [1299.0, 2838.0], [1297.0, 3497.0], [1401.0, 2677.5], [1405.0, 2711.0], [1377.0, 2561.0], [1381.0, 21.0], [1385.0, 65.0], [1387.0, 2007.0], [1389.0, 2885.0], [1391.0, 2731.0], [1403.0, 2772.0], [1399.0, 3227.0], [1373.0, 1578.5], [1345.0, 2882.0], [1349.0, 3059.5], [1347.0, 2807.5], [1351.0, 2839.0], [1353.0, 2769.0], [1355.0, 21.0], [1357.0, 2751.5], [1367.0, 29.0], [1363.0, 32.0], [1361.0, 3334.0], [1443.0, 2436.0], [1445.0, 2555.0], [1471.0, 39.0], [1449.0, 1052.3333333333335], [1451.0, 2992.0], [1455.0, 2624.0], [1453.0, 2639.0], [1469.0, 3155.0], [1465.0, 2505.0], [1461.0, 2900.0], [1457.0, 20.0], [1423.0, 2941.5], [1415.0, 2565.0], [1411.0, 2582.0], [1439.0, 2628.5], [1433.0, 21.0], [1431.0, 2654.0], [1425.0, 2932.0], [1529.0, 2790.0], [1535.0, 2462.0], [1505.0, 1268.5], [1509.0, 2381.0], [1507.0, 2652.0], [1513.0, 2795.0], [1515.0, 2183.2], [1519.0, 2547.0], [1533.0, 2812.0], [1531.0, 2373.0], [1527.0, 2450.0], [1525.0, 2566.0], [1521.0, 2469.0], [1483.0, 18.0], [1481.0, 2886.0], [1479.0, 1558.5], [1477.0, 21.0], [1475.0, 3051.0], [1473.0, 2509.0], [1503.0, 2761.0], [1501.0, 169.0], [1499.0, 2627.0], [1497.0, 2536.0], [1495.0, 2858.0], [1493.0, 149.0], [1491.0, 28.0], [1489.0, 123.0], [1597.0, 18.0], [1595.0, 2417.0], [1581.0, 1277.625], [1577.0, 870.6666666666667], [1579.0, 1219.3333333333333], [1583.0, 1889.0], [1575.0, 705.75], [1573.0, 1621.0], [1571.0, 27.5], [1569.0, 22.0], [1599.0, 2126.0], [1593.0, 2349.0], [1591.0, 2255.0], [1589.0, 2140.0], [1587.0, 2216.0], [1567.0, 19.0], [1539.0, 2392.5], [1541.0, 2329.0], [1547.0, 42.0], [1551.0, 2768.0], [1565.0, 2456.0], [1563.0, 24.0], [1561.0, 2482.0], [1559.0, 2417.0], [1557.0, 21.0], [1555.0, 2690.0], [1553.0, 1450.5], [1633.0, 2229.0], [1637.0, 24.0], [1657.0, 2109.0], [1635.0, 2772.0], [1639.0, 2196.0], [1643.0, 2323.0], [1653.0, 2513.0], [1615.0, 2581.0], [1613.0, 2569.0], [1611.0, 1703.0], [1607.0, 24.0], [1605.0, 2338.0], [1603.0, 23.0], [1601.0, 26.0], [1631.0, 2462.3333333333335], [1627.0, 2633.0], [1621.0, 2822.0], [1619.0, 2537.3333333333335], [1725.0, 2059.0], [1727.0, 2078.0], [1697.0, 2401.0], [1699.0, 68.0], [1701.0, 2296.0], [1705.0, 2158.0], [1703.0, 23.0], [1707.0, 2415.0], [1709.0, 20.0], [1711.0, 2632.0], [1723.0, 2374.0], [1721.0, 1955.0], [1719.0, 22.0], [1717.0, 1039.0], [1715.0, 2093.0], [1713.0, 2174.5], [1679.0, 2140.5], [1675.0, 2334.5], [1673.0, 1253.0], [1671.0, 20.0], [1669.0, 2766.0], [1665.0, 2479.0], [1695.0, 2468.0], [1691.0, 2182.0], [1689.0, 2376.5], [1687.0, 2699.0], [1681.0, 2647.0], [1739.0, 1423.3333333333335], [1781.0, 1716.0], [1751.0, 2021.0], [1753.0, 2347.5], [1755.0, 1947.0], [1757.0, 1945.0], [1743.0, 2062.0], [1741.0, 23.0], [1737.0, 2245.5], [1735.0, 1872.8333333333335], [1733.0, 22.0], [1731.0, 2276.6666666666665], [1777.0, 1942.0], [1779.0, 2222.0], [1749.0, 1720.0], [1747.0, 1804.0], [1745.0, 2225.0], [1791.0, 1556.5], [1761.0, 2020.0], [1763.0, 899.5], [1765.0, 2202.0], [1767.0, 2467.0], [1771.0, 21.0], [1773.0, 2184.0], [1775.0, 1870.0], [1789.0, 1902.0], [1787.0, 1961.5], [1785.0, 1944.0], [1783.0, 21.0], [1845.0, 2044.0], [1849.0, 58.0], [1799.0, 1638.6666666666667], [1803.0, 1512.75], [1843.0, 1767.0], [1847.0, 1664.0], [1853.0, 1996.0], [1855.0, 2043.0], [1827.0, 1655.0], [1831.0, 1540.5], [1829.0, 2221.0], [1833.0, 1723.0], [1839.0, 816.0], [1837.0, 1840.0], [1825.0, 1584.8333333333335], [1801.0, 1760.5], [1797.0, 1655.0], [1795.0, 1792.6666666666667], [1793.0, 2313.0], [1823.0, 1763.6666666666667], [1821.0, 1772.0], [1819.0, 1099.5], [1817.0, 1687.0], [1815.0, 1343.0], [1813.0, 2180.0], [1811.0, 2158.5], [1809.0, 53.0], [1865.0, 28.0], [1871.0, 38.0], [1869.0, 2023.0], [1867.0, 25.0], [1863.0, 1322.25], [1861.0, 1842.0], [1859.0, 1735.0], [1857.0, 1665.0], [1.0, 5039.0]], "isOverall": false, "label": "Healthcheck", "isController": false}, {"data": [[984.4970000000023, 1793.200500000001]], "isOverall": false, "label": "Healthcheck-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1871.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15266.666666666666, "minX": 1.7556714E12, "maxY": 18533.333333333332, "series": [{"data": [[1.7556714E12, 18533.333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7556714E12, 15266.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556714E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1793.200500000001, "minX": 1.7556714E12, "maxY": 1793.200500000001, "series": [{"data": [[1.7556714E12, 1793.200500000001]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556714E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1793.1709999999991, "minX": 1.7556714E12, "maxY": 1793.1709999999991, "series": [{"data": [[1.7556714E12, 1793.1709999999991]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556714E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1644.8795000000011, "minX": 1.7556714E12, "maxY": 1644.8795000000011, "series": [{"data": [[1.7556714E12, 1644.8795000000011]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556714E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18.0, "minX": 1.7556714E12, "maxY": 5642.0, "series": [{"data": [[1.7556714E12, 5642.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7556714E12, 3983.4000000000005]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7556714E12, 5287.93]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7556714E12, 4575.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7556714E12, 18.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7556714E12, 1595.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556714E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 956.0, "minX": 61.0, "maxY": 3094.0, "series": [{"data": [[551.0, 2674.0], [324.0, 2028.0], [689.0, 956.0], [375.0, 3094.0], [61.0, 1397.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 689.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 956.0, "minX": 61.0, "maxY": 3094.0, "series": [{"data": [[551.0, 2674.0], [324.0, 2028.0], [689.0, 956.0], [375.0, 3094.0], [61.0, 1397.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 689.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.7556714E12, "maxY": 33.333333333333336, "series": [{"data": [[1.7556714E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556714E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.7556714E12, "maxY": 33.333333333333336, "series": [{"data": [[1.7556714E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556714E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.7556714E12, "maxY": 33.333333333333336, "series": [{"data": [[1.7556714E12, 33.333333333333336]], "isOverall": false, "label": "Healthcheck-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556714E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.7556714E12, "maxY": 33.333333333333336, "series": [{"data": [[1.7556714E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556714E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

