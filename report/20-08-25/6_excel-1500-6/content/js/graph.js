/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 245.0, "minX": 0.0, "maxY": 12384.0, "series": [{"data": [[0.0, 245.0], [0.1, 364.0], [0.2, 372.0], [0.3, 380.0], [0.4, 501.0], [0.5, 529.0], [0.6, 547.0], [0.7, 548.0], [0.8, 600.0], [0.9, 625.0], [1.0, 651.0], [1.1, 723.0], [1.2, 736.0], [1.3, 740.0], [1.4, 759.0], [1.5, 772.0], [1.6, 991.0], [1.7, 1036.0], [1.8, 1051.0], [1.9, 1056.0], [2.0, 1067.0], [2.1, 1112.0], [2.2, 1138.0], [2.3, 1168.0], [2.4, 1175.0], [2.5, 1184.0], [2.6, 1191.0], [2.7, 1197.0], [2.8, 1216.0], [2.9, 1223.0], [3.0, 1246.0], [3.1, 1282.0], [3.2, 1289.0], [3.3, 1320.0], [3.4, 1321.0], [3.5, 1338.0], [3.6, 1444.0], [3.7, 1456.0], [3.8, 1484.0], [3.9, 1567.0], [4.0, 1577.0], [4.1, 1843.0], [4.2, 1850.0], [4.3, 1863.0], [4.4, 1913.0], [4.5, 1947.0], [4.6, 2004.0], [4.7, 2017.0], [4.8, 2029.0], [4.9, 2230.0], [5.0, 2345.0], [5.1, 2455.0], [5.2, 2464.0], [5.3, 2657.0], [5.4, 2676.0], [5.5, 2687.0], [5.6, 2712.0], [5.7, 2842.0], [5.8, 2866.0], [5.9, 2897.0], [6.0, 2972.0], [6.1, 2979.0], [6.2, 3027.0], [6.3, 3054.0], [6.4, 3064.0], [6.5, 3076.0], [6.6, 3131.0], [6.7, 3176.0], [6.8, 3385.0], [6.9, 3471.0], [7.0, 3521.0], [7.1, 3567.0], [7.2, 3690.0], [7.3, 3734.0], [7.4, 3813.0], [7.5, 3822.0], [7.6, 3843.0], [7.7, 3857.0], [7.8, 3883.0], [7.9, 3886.0], [8.0, 3935.0], [8.1, 3966.0], [8.2, 4057.0], [8.3, 4064.0], [8.4, 4173.0], [8.5, 4235.0], [8.6, 4338.0], [8.7, 4381.0], [8.8, 4438.0], [8.9, 4453.0], [9.0, 4480.0], [9.1, 4527.0], [9.2, 4652.0], [9.3, 4663.0], [9.4, 4673.0], [9.5, 4677.0], [9.6, 4738.0], [9.7, 4751.0], [9.8, 4838.0], [9.9, 4857.0], [10.0, 4936.0], [10.1, 5031.0], [10.2, 5132.0], [10.3, 5198.0], [10.4, 5263.0], [10.5, 5274.0], [10.6, 5295.0], [10.7, 5300.0], [10.8, 5334.0], [10.9, 5352.0], [11.0, 5417.0], [11.1, 5441.0], [11.2, 5472.0], [11.3, 5476.0], [11.4, 5544.0], [11.5, 5550.0], [11.6, 5635.0], [11.7, 5651.0], [11.8, 5686.0], [11.9, 5707.0], [12.0, 5730.0], [12.1, 5752.0], [12.2, 5804.0], [12.3, 5820.0], [12.4, 5855.0], [12.5, 5890.0], [12.6, 5898.0], [12.7, 5947.0], [12.8, 5971.0], [12.9, 5972.0], [13.0, 5997.0], [13.1, 6009.0], [13.2, 6036.0], [13.3, 6057.0], [13.4, 6057.0], [13.5, 6060.0], [13.6, 6061.0], [13.7, 6071.0], [13.8, 6091.0], [13.9, 6120.0], [14.0, 6122.0], [14.1, 6150.0], [14.2, 6184.0], [14.3, 6197.0], [14.4, 6205.0], [14.5, 6212.0], [14.6, 6241.0], [14.7, 6244.0], [14.8, 6271.0], [14.9, 6274.0], [15.0, 6282.0], [15.1, 6287.0], [15.2, 6317.0], [15.3, 6323.0], [15.4, 6334.0], [15.5, 6348.0], [15.6, 6357.0], [15.7, 6367.0], [15.8, 6370.0], [15.9, 6390.0], [16.0, 6419.0], [16.1, 6422.0], [16.2, 6449.0], [16.3, 6463.0], [16.4, 6473.0], [16.5, 6480.0], [16.6, 6509.0], [16.7, 6522.0], [16.8, 6530.0], [16.9, 6532.0], [17.0, 6557.0], [17.1, 6561.0], [17.2, 6595.0], [17.3, 6600.0], [17.4, 6613.0], [17.5, 6631.0], [17.6, 6637.0], [17.7, 6650.0], [17.8, 6663.0], [17.9, 6665.0], [18.0, 6670.0], [18.1, 6672.0], [18.2, 6690.0], [18.3, 6691.0], [18.4, 6712.0], [18.5, 6731.0], [18.6, 6735.0], [18.7, 6741.0], [18.8, 6745.0], [18.9, 6759.0], [19.0, 6764.0], [19.1, 6780.0], [19.2, 6783.0], [19.3, 6787.0], [19.4, 6795.0], [19.5, 6800.0], [19.6, 6816.0], [19.7, 6820.0], [19.8, 6826.0], [19.9, 6832.0], [20.0, 6840.0], [20.1, 6849.0], [20.2, 6896.0], [20.3, 6906.0], [20.4, 6911.0], [20.5, 6921.0], [20.6, 6931.0], [20.7, 6940.0], [20.8, 6972.0], [20.9, 6983.0], [21.0, 6990.0], [21.1, 6996.0], [21.2, 7004.0], [21.3, 7005.0], [21.4, 7015.0], [21.5, 7023.0], [21.6, 7062.0], [21.7, 7066.0], [21.8, 7074.0], [21.9, 7081.0], [22.0, 7088.0], [22.1, 7093.0], [22.2, 7102.0], [22.3, 7122.0], [22.4, 7142.0], [22.5, 7145.0], [22.6, 7166.0], [22.7, 7168.0], [22.8, 7173.0], [22.9, 7175.0], [23.0, 7180.0], [23.1, 7192.0], [23.2, 7198.0], [23.3, 7254.0], [23.4, 7263.0], [23.5, 7272.0], [23.6, 7287.0], [23.7, 7288.0], [23.8, 7303.0], [23.9, 7304.0], [24.0, 7310.0], [24.1, 7311.0], [24.2, 7325.0], [24.3, 7325.0], [24.4, 7332.0], [24.5, 7334.0], [24.6, 7343.0], [24.7, 7345.0], [24.8, 7347.0], [24.9, 7349.0], [25.0, 7350.0], [25.1, 7376.0], [25.2, 7389.0], [25.3, 7389.0], [25.4, 7405.0], [25.5, 7407.0], [25.6, 7435.0], [25.7, 7441.0], [25.8, 7452.0], [25.9, 7458.0], [26.0, 7463.0], [26.1, 7464.0], [26.2, 7471.0], [26.3, 7478.0], [26.4, 7481.0], [26.5, 7483.0], [26.6, 7489.0], [26.7, 7505.0], [26.8, 7511.0], [26.9, 7513.0], [27.0, 7514.0], [27.1, 7514.0], [27.2, 7519.0], [27.3, 7520.0], [27.4, 7528.0], [27.5, 7530.0], [27.6, 7536.0], [27.7, 7543.0], [27.8, 7549.0], [27.9, 7558.0], [28.0, 7559.0], [28.1, 7562.0], [28.2, 7575.0], [28.3, 7578.0], [28.4, 7590.0], [28.5, 7596.0], [28.6, 7600.0], [28.7, 7611.0], [28.8, 7619.0], [28.9, 7622.0], [29.0, 7627.0], [29.1, 7639.0], [29.2, 7646.0], [29.3, 7647.0], [29.4, 7656.0], [29.5, 7657.0], [29.6, 7678.0], [29.7, 7679.0], [29.8, 7694.0], [29.9, 7694.0], [30.0, 7702.0], [30.1, 7707.0], [30.2, 7731.0], [30.3, 7732.0], [30.4, 7736.0], [30.5, 7743.0], [30.6, 7749.0], [30.7, 7750.0], [30.8, 7758.0], [30.9, 7758.0], [31.0, 7761.0], [31.1, 7761.0], [31.2, 7765.0], [31.3, 7765.0], [31.4, 7766.0], [31.5, 7767.0], [31.6, 7780.0], [31.7, 7780.0], [31.8, 7785.0], [31.9, 7788.0], [32.0, 7801.0], [32.1, 7809.0], [32.2, 7812.0], [32.3, 7818.0], [32.4, 7819.0], [32.5, 7824.0], [32.6, 7827.0], [32.7, 7830.0], [32.8, 7834.0], [32.9, 7841.0], [33.0, 7844.0], [33.1, 7846.0], [33.2, 7847.0], [33.3, 7859.0], [33.4, 7862.0], [33.5, 7866.0], [33.6, 7873.0], [33.7, 7882.0], [33.8, 7890.0], [33.9, 7890.0], [34.0, 7900.0], [34.1, 7901.0], [34.2, 7903.0], [34.3, 7904.0], [34.4, 7910.0], [34.5, 7919.0], [34.6, 7925.0], [34.7, 7927.0], [34.8, 7927.0], [34.9, 7942.0], [35.0, 7942.0], [35.1, 7946.0], [35.2, 7951.0], [35.3, 7961.0], [35.4, 7962.0], [35.5, 7970.0], [35.6, 7972.0], [35.7, 7978.0], [35.8, 7979.0], [35.9, 7980.0], [36.0, 7981.0], [36.1, 7994.0], [36.2, 7995.0], [36.3, 7997.0], [36.4, 8005.0], [36.5, 8013.0], [36.6, 8014.0], [36.7, 8018.0], [36.8, 8020.0], [36.9, 8028.0], [37.0, 8030.0], [37.1, 8050.0], [37.2, 8051.0], [37.3, 8057.0], [37.4, 8062.0], [37.5, 8066.0], [37.6, 8067.0], [37.7, 8080.0], [37.8, 8083.0], [37.9, 8087.0], [38.0, 8088.0], [38.1, 8090.0], [38.2, 8097.0], [38.3, 8102.0], [38.4, 8104.0], [38.5, 8112.0], [38.6, 8116.0], [38.7, 8116.0], [38.8, 8129.0], [38.9, 8137.0], [39.0, 8141.0], [39.1, 8147.0], [39.2, 8148.0], [39.3, 8162.0], [39.4, 8165.0], [39.5, 8172.0], [39.6, 8173.0], [39.7, 8186.0], [39.8, 8188.0], [39.9, 8191.0], [40.0, 8192.0], [40.1, 8207.0], [40.2, 8209.0], [40.3, 8213.0], [40.4, 8214.0], [40.5, 8219.0], [40.6, 8226.0], [40.7, 8233.0], [40.8, 8235.0], [40.9, 8240.0], [41.0, 8242.0], [41.1, 8251.0], [41.2, 8254.0], [41.3, 8259.0], [41.4, 8264.0], [41.5, 8266.0], [41.6, 8273.0], [41.7, 8281.0], [41.8, 8285.0], [41.9, 8289.0], [42.0, 8302.0], [42.1, 8304.0], [42.2, 8308.0], [42.3, 8319.0], [42.4, 8319.0], [42.5, 8322.0], [42.6, 8327.0], [42.7, 8331.0], [42.8, 8343.0], [42.9, 8350.0], [43.0, 8350.0], [43.1, 8351.0], [43.2, 8356.0], [43.3, 8370.0], [43.4, 8394.0], [43.5, 8406.0], [43.6, 8413.0], [43.7, 8420.0], [43.8, 8427.0], [43.9, 8433.0], [44.0, 8441.0], [44.1, 8441.0], [44.2, 8443.0], [44.3, 8447.0], [44.4, 8448.0], [44.5, 8455.0], [44.6, 8461.0], [44.7, 8470.0], [44.8, 8472.0], [44.9, 8478.0], [45.0, 8485.0], [45.1, 8492.0], [45.2, 8493.0], [45.3, 8495.0], [45.4, 8510.0], [45.5, 8522.0], [45.6, 8536.0], [45.7, 8549.0], [45.8, 8549.0], [45.9, 8557.0], [46.0, 8558.0], [46.1, 8564.0], [46.2, 8575.0], [46.3, 8580.0], [46.4, 8582.0], [46.5, 8594.0], [46.6, 8596.0], [46.7, 8600.0], [46.8, 8608.0], [46.9, 8616.0], [47.0, 8618.0], [47.1, 8623.0], [47.2, 8627.0], [47.3, 8633.0], [47.4, 8634.0], [47.5, 8640.0], [47.6, 8640.0], [47.7, 8645.0], [47.8, 8647.0], [47.9, 8649.0], [48.0, 8651.0], [48.1, 8660.0], [48.2, 8660.0], [48.3, 8665.0], [48.4, 8665.0], [48.5, 8669.0], [48.6, 8672.0], [48.7, 8674.0], [48.8, 8674.0], [48.9, 8679.0], [49.0, 8680.0], [49.1, 8688.0], [49.2, 8694.0], [49.3, 8702.0], [49.4, 8706.0], [49.5, 8710.0], [49.6, 8712.0], [49.7, 8715.0], [49.8, 8716.0], [49.9, 8720.0], [50.0, 8728.0], [50.1, 8735.0], [50.2, 8739.0], [50.3, 8752.0], [50.4, 8755.0], [50.5, 8763.0], [50.6, 8768.0], [50.7, 8772.0], [50.8, 8773.0], [50.9, 8775.0], [51.0, 8775.0], [51.1, 8785.0], [51.2, 8792.0], [51.3, 8795.0], [51.4, 8798.0], [51.5, 8802.0], [51.6, 8804.0], [51.7, 8804.0], [51.8, 8805.0], [51.9, 8819.0], [52.0, 8822.0], [52.1, 8830.0], [52.2, 8833.0], [52.3, 8835.0], [52.4, 8844.0], [52.5, 8847.0], [52.6, 8849.0], [52.7, 8850.0], [52.8, 8852.0], [52.9, 8855.0], [53.0, 8855.0], [53.1, 8857.0], [53.2, 8863.0], [53.3, 8867.0], [53.4, 8871.0], [53.5, 8878.0], [53.6, 8883.0], [53.7, 8885.0], [53.8, 8891.0], [53.9, 8901.0], [54.0, 8903.0], [54.1, 8912.0], [54.2, 8915.0], [54.3, 8930.0], [54.4, 8933.0], [54.5, 8938.0], [54.6, 8944.0], [54.7, 8948.0], [54.8, 8950.0], [54.9, 8963.0], [55.0, 8964.0], [55.1, 8965.0], [55.2, 8966.0], [55.3, 8970.0], [55.4, 8974.0], [55.5, 8977.0], [55.6, 8982.0], [55.7, 8985.0], [55.8, 8997.0], [55.9, 9001.0], [56.0, 9007.0], [56.1, 9028.0], [56.2, 9032.0], [56.3, 9035.0], [56.4, 9036.0], [56.5, 9040.0], [56.6, 9044.0], [56.7, 9051.0], [56.8, 9052.0], [56.9, 9055.0], [57.0, 9066.0], [57.1, 9080.0], [57.2, 9083.0], [57.3, 9085.0], [57.4, 9085.0], [57.5, 9087.0], [57.6, 9091.0], [57.7, 9094.0], [57.8, 9095.0], [57.9, 9101.0], [58.0, 9123.0], [58.1, 9147.0], [58.2, 9151.0], [58.3, 9161.0], [58.4, 9163.0], [58.5, 9176.0], [58.6, 9201.0], [58.7, 9208.0], [58.8, 9208.0], [58.9, 9214.0], [59.0, 9230.0], [59.1, 9244.0], [59.2, 9249.0], [59.3, 9256.0], [59.4, 9266.0], [59.5, 9279.0], [59.6, 9282.0], [59.7, 9299.0], [59.8, 9308.0], [59.9, 9321.0], [60.0, 9328.0], [60.1, 9339.0], [60.2, 9339.0], [60.3, 9342.0], [60.4, 9348.0], [60.5, 9350.0], [60.6, 9351.0], [60.7, 9365.0], [60.8, 9365.0], [60.9, 9384.0], [61.0, 9388.0], [61.1, 9404.0], [61.2, 9409.0], [61.3, 9415.0], [61.4, 9429.0], [61.5, 9439.0], [61.6, 9442.0], [61.7, 9448.0], [61.8, 9449.0], [61.9, 9465.0], [62.0, 9471.0], [62.1, 9473.0], [62.2, 9474.0], [62.3, 9485.0], [62.4, 9489.0], [62.5, 9495.0], [62.6, 9506.0], [62.7, 9536.0], [62.8, 9539.0], [62.9, 9543.0], [63.0, 9546.0], [63.1, 9559.0], [63.2, 9559.0], [63.3, 9562.0], [63.4, 9565.0], [63.5, 9574.0], [63.6, 9576.0], [63.7, 9581.0], [63.8, 9615.0], [63.9, 9628.0], [64.0, 9630.0], [64.1, 9633.0], [64.2, 9634.0], [64.3, 9637.0], [64.4, 9641.0], [64.5, 9652.0], [64.6, 9656.0], [64.7, 9689.0], [64.8, 9701.0], [64.9, 9710.0], [65.0, 9723.0], [65.1, 9733.0], [65.2, 9733.0], [65.3, 9746.0], [65.4, 9756.0], [65.5, 9765.0], [65.6, 9793.0], [65.7, 9809.0], [65.8, 9813.0], [65.9, 9855.0], [66.0, 9859.0], [66.1, 9866.0], [66.2, 9872.0], [66.3, 9886.0], [66.4, 9888.0], [66.5, 9907.0], [66.6, 9916.0], [66.7, 9928.0], [66.8, 9928.0], [66.9, 9964.0], [67.0, 9969.0], [67.1, 9972.0], [67.2, 9981.0], [67.3, 10004.0], [67.4, 10010.0], [67.5, 10015.0], [67.6, 10017.0], [67.7, 10031.0], [67.8, 10032.0], [67.9, 10042.0], [68.0, 10044.0], [68.1, 10046.0], [68.2, 10049.0], [68.3, 10066.0], [68.4, 10070.0], [68.5, 10088.0], [68.6, 10091.0], [68.7, 10100.0], [68.8, 10105.0], [68.9, 10112.0], [69.0, 10114.0], [69.1, 10140.0], [69.2, 10141.0], [69.3, 10144.0], [69.4, 10154.0], [69.5, 10188.0], [69.6, 10205.0], [69.7, 10232.0], [69.8, 10240.0], [69.9, 10251.0], [70.0, 10251.0], [70.1, 10261.0], [70.2, 10282.0], [70.3, 10298.0], [70.4, 10318.0], [70.5, 10338.0], [70.6, 10344.0], [70.7, 10360.0], [70.8, 10366.0], [70.9, 10374.0], [71.0, 10378.0], [71.1, 10394.0], [71.2, 10395.0], [71.3, 10397.0], [71.4, 10418.0], [71.5, 10421.0], [71.6, 10442.0], [71.7, 10446.0], [71.8, 10450.0], [71.9, 10456.0], [72.0, 10459.0], [72.1, 10469.0], [72.2, 10474.0], [72.3, 10498.0], [72.4, 10500.0], [72.5, 10505.0], [72.6, 10513.0], [72.7, 10515.0], [72.8, 10517.0], [72.9, 10520.0], [73.0, 10520.0], [73.1, 10543.0], [73.2, 10551.0], [73.3, 10591.0], [73.4, 10595.0], [73.5, 10601.0], [73.6, 10608.0], [73.7, 10626.0], [73.8, 10628.0], [73.9, 10633.0], [74.0, 10636.0], [74.1, 10640.0], [74.2, 10642.0], [74.3, 10683.0], [74.4, 10686.0], [74.5, 10690.0], [74.6, 10698.0], [74.7, 10706.0], [74.8, 10714.0], [74.9, 10721.0], [75.0, 10721.0], [75.1, 10725.0], [75.2, 10728.0], [75.3, 10736.0], [75.4, 10739.0], [75.5, 10741.0], [75.6, 10745.0], [75.7, 10758.0], [75.8, 10760.0], [75.9, 10780.0], [76.0, 10794.0], [76.1, 10822.0], [76.2, 10834.0], [76.3, 10843.0], [76.4, 10843.0], [76.5, 10845.0], [76.6, 10846.0], [76.7, 10864.0], [76.8, 10864.0], [76.9, 10867.0], [77.0, 10867.0], [77.1, 10878.0], [77.2, 10882.0], [77.3, 10886.0], [77.4, 10888.0], [77.5, 10895.0], [77.6, 10903.0], [77.7, 10905.0], [77.8, 10910.0], [77.9, 10916.0], [78.0, 10920.0], [78.1, 10927.0], [78.2, 10931.0], [78.3, 10949.0], [78.4, 10951.0], [78.5, 10956.0], [78.6, 10958.0], [78.7, 10966.0], [78.8, 10985.0], [78.9, 11006.0], [79.0, 11011.0], [79.1, 11012.0], [79.2, 11015.0], [79.3, 11015.0], [79.4, 11016.0], [79.5, 11020.0], [79.6, 11026.0], [79.7, 11032.0], [79.8, 11035.0], [79.9, 11045.0], [80.0, 11049.0], [80.1, 11059.0], [80.2, 11061.0], [80.3, 11064.0], [80.4, 11067.0], [80.5, 11069.0], [80.6, 11070.0], [80.7, 11073.0], [80.8, 11080.0], [80.9, 11083.0], [81.0, 11085.0], [81.1, 11086.0], [81.2, 11090.0], [81.3, 11095.0], [81.4, 11099.0], [81.5, 11108.0], [81.6, 11108.0], [81.7, 11115.0], [81.8, 11117.0], [81.9, 11118.0], [82.0, 11124.0], [82.1, 11126.0], [82.2, 11127.0], [82.3, 11130.0], [82.4, 11130.0], [82.5, 11137.0], [82.6, 11140.0], [82.7, 11142.0], [82.8, 11143.0], [82.9, 11153.0], [83.0, 11155.0], [83.1, 11169.0], [83.2, 11171.0], [83.3, 11178.0], [83.4, 11179.0], [83.5, 11184.0], [83.6, 11184.0], [83.7, 11185.0], [83.8, 11187.0], [83.9, 11200.0], [84.0, 11202.0], [84.1, 11211.0], [84.2, 11213.0], [84.3, 11214.0], [84.4, 11222.0], [84.5, 11227.0], [84.6, 11228.0], [84.7, 11241.0], [84.8, 11247.0], [84.9, 11250.0], [85.0, 11250.0], [85.1, 11266.0], [85.2, 11273.0], [85.3, 11277.0], [85.4, 11283.0], [85.5, 11293.0], [85.6, 11294.0], [85.7, 11308.0], [85.8, 11309.0], [85.9, 11318.0], [86.0, 11328.0], [86.1, 11334.0], [86.2, 11335.0], [86.3, 11336.0], [86.4, 11340.0], [86.5, 11343.0], [86.6, 11343.0], [86.7, 11344.0], [86.8, 11353.0], [86.9, 11357.0], [87.0, 11358.0], [87.1, 11365.0], [87.2, 11367.0], [87.3, 11370.0], [87.4, 11371.0], [87.5, 11383.0], [87.6, 11385.0], [87.7, 11392.0], [87.8, 11395.0], [87.9, 11410.0], [88.0, 11412.0], [88.1, 11416.0], [88.2, 11418.0], [88.3, 11420.0], [88.4, 11421.0], [88.5, 11430.0], [88.6, 11437.0], [88.7, 11451.0], [88.8, 11458.0], [88.9, 11459.0], [89.0, 11464.0], [89.1, 11472.0], [89.2, 11478.0], [89.3, 11478.0], [89.4, 11479.0], [89.5, 11483.0], [89.6, 11486.0], [89.7, 11494.0], [89.8, 11494.0], [89.9, 11496.0], [90.0, 11496.0], [90.1, 11499.0], [90.2, 11499.0], [90.3, 11501.0], [90.4, 11502.0], [90.5, 11507.0], [90.6, 11508.0], [90.7, 11515.0], [90.8, 11516.0], [90.9, 11516.0], [91.0, 11517.0], [91.1, 11524.0], [91.2, 11528.0], [91.3, 11532.0], [91.4, 11534.0], [91.5, 11537.0], [91.6, 11539.0], [91.7, 11564.0], [91.8, 11565.0], [91.9, 11570.0], [92.0, 11575.0], [92.1, 11586.0], [92.2, 11590.0], [92.3, 11595.0], [92.4, 11601.0], [92.5, 11605.0], [92.6, 11608.0], [92.7, 11618.0], [92.8, 11628.0], [92.9, 11629.0], [93.0, 11631.0], [93.1, 11637.0], [93.2, 11641.0], [93.3, 11648.0], [93.4, 11649.0], [93.5, 11652.0], [93.6, 11655.0], [93.7, 11659.0], [93.8, 11660.0], [93.9, 11667.0], [94.0, 11671.0], [94.1, 11677.0], [94.2, 11684.0], [94.3, 11691.0], [94.4, 11695.0], [94.5, 11711.0], [94.6, 11715.0], [94.7, 11717.0], [94.8, 11717.0], [94.9, 11721.0], [95.0, 11723.0], [95.1, 11725.0], [95.2, 11726.0], [95.3, 11731.0], [95.4, 11737.0], [95.5, 11747.0], [95.6, 11755.0], [95.7, 11772.0], [95.8, 11772.0], [95.9, 11782.0], [96.0, 11786.0], [96.1, 11790.0], [96.2, 11795.0], [96.3, 11816.0], [96.4, 11821.0], [96.5, 11831.0], [96.6, 11840.0], [96.7, 11861.0], [96.8, 11870.0], [96.9, 11877.0], [97.0, 11883.0], [97.1, 11902.0], [97.2, 11906.0], [97.3, 11926.0], [97.4, 11927.0], [97.5, 11954.0], [97.6, 11959.0], [97.7, 11970.0], [97.8, 11974.0], [97.9, 11992.0], [98.0, 12038.0], [98.1, 12051.0], [98.2, 12068.0], [98.3, 12074.0], [98.4, 12079.0], [98.5, 12083.0], [98.6, 12106.0], [98.7, 12122.0], [98.8, 12141.0], [98.9, 12148.0], [99.0, 12149.0], [99.1, 12152.0], [99.2, 12157.0], [99.3, 12189.0], [99.4, 12218.0], [99.5, 12252.0], [99.6, 12300.0], [99.7, 12307.0], [99.8, 12372.0], [99.9, 12373.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 38.0, "series": [{"data": [[200.0, 1.0], [300.0, 4.0], [400.0, 1.0], [500.0, 6.0], [600.0, 4.0], [700.0, 7.0], [900.0, 2.0], [1000.0, 6.0], [1100.0, 10.0], [1200.0, 7.0], [1300.0, 5.0], [1400.0, 4.0], [1500.0, 3.0], [1600.0, 1.0], [1800.0, 4.0], [1900.0, 3.0], [2000.0, 4.0], [2100.0, 1.0], [2300.0, 2.0], [2200.0, 1.0], [2400.0, 2.0], [2500.0, 1.0], [2600.0, 5.0], [2800.0, 5.0], [2700.0, 1.0], [2900.0, 2.0], [3000.0, 6.0], [3100.0, 4.0], [3300.0, 1.0], [3400.0, 2.0], [3500.0, 2.0], [3600.0, 2.0], [3700.0, 2.0], [3800.0, 8.0], [3900.0, 3.0], [4000.0, 3.0], [4100.0, 2.0], [4300.0, 2.0], [4200.0, 2.0], [4400.0, 5.0], [4600.0, 6.0], [4500.0, 2.0], [4800.0, 4.0], [4700.0, 2.0], [5000.0, 2.0], [5100.0, 2.0], [4900.0, 1.0], [5300.0, 5.0], [5200.0, 5.0], [5400.0, 6.0], [5500.0, 2.0], [5600.0, 5.0], [5700.0, 5.0], [5800.0, 7.0], [6000.0, 12.0], [5900.0, 6.0], [6100.0, 7.0], [6200.0, 13.0], [6300.0, 11.0], [6400.0, 10.0], [6600.0, 17.0], [6500.0, 10.0], [6800.0, 12.0], [6700.0, 16.0], [6900.0, 14.0], [7000.0, 15.0], [7100.0, 16.0], [7300.0, 24.0], [7200.0, 8.0], [7400.0, 19.0], [7500.0, 29.0], [7600.0, 21.0], [7700.0, 30.0], [7800.0, 30.0], [7900.0, 35.0], [8000.0, 28.0], [8100.0, 27.0], [8200.0, 29.0], [8300.0, 22.0], [8400.0, 29.0], [8500.0, 20.0], [8600.0, 38.0], [8700.0, 33.0], [8800.0, 36.0], [8900.0, 31.0], [9000.0, 29.0], [9100.0, 11.0], [9200.0, 18.0], [9300.0, 20.0], [9400.0, 22.0], [9500.0, 18.0], [9600.0, 15.0], [9700.0, 13.0], [9800.0, 12.0], [9900.0, 13.0], [10000.0, 21.0], [10100.0, 13.0], [10200.0, 12.0], [10300.0, 15.0], [10400.0, 15.0], [10500.0, 17.0], [10600.0, 17.0], [10700.0, 21.0], [10800.0, 23.0], [10900.0, 20.0], [11000.0, 38.0], [11100.0, 37.0], [11200.0, 27.0], [11300.0, 33.0], [11400.0, 35.0], [11500.0, 32.0], [11600.0, 31.0], [11700.0, 27.0], [11800.0, 13.0], [11900.0, 13.0], [12000.0, 10.0], [12100.0, 12.0], [12200.0, 3.0], [12300.0, 6.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1443.0, "series": [{"data": [[0.0, 6.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 51.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1443.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 745.7853333333334, "minX": 1.75566516E12, "maxY": 745.7853333333334, "series": [{"data": [[1.75566516E12, 745.7853333333334]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566516E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 444.0, "minX": 1.0, "maxY": 12384.0, "series": [{"data": [[2.0, 11755.0], [3.0, 12336.0], [4.0, 9397.0], [5.0, 11747.0], [6.0, 12148.0], [7.0, 12126.0], [8.0, 12153.0], [9.0, 12384.0], [10.0, 11708.0], [13.0, 10722.5], [14.0, 11747.0], [15.0, 11717.0], [16.0, 9432.0], [17.0, 10584.0], [18.0, 12290.0], [20.0, 10440.0], [21.0, 12106.0], [22.0, 12152.0], [24.0, 10887.5], [25.0, 9550.0], [26.0, 12373.0], [27.0, 12372.0], [29.0, 11817.5], [30.0, 12079.0], [31.0, 12060.0], [33.0, 12148.0], [32.0, 9536.0], [35.0, 10378.0], [34.0, 9546.0], [37.0, 10745.5], [39.0, 12083.0], [38.0, 9634.0], [41.0, 9576.0], [40.0, 12252.0], [43.0, 9877.0], [42.0, 9656.0], [45.0, 9368.0], [44.0, 12300.0], [46.0, 11641.0], [51.0, 12079.0], [50.0, 11235.25], [52.0, 11629.0], [55.0, 10869.0], [56.0, 9484.0], [59.0, 11046.0], [58.0, 11673.0], [61.0, 11608.0], [60.0, 11608.0], [67.0, 11930.0], [66.0, 11426.333333333334], [65.0, 8852.0], [64.0, 11593.0], [70.0, 11916.5], [68.0, 12189.0], [75.0, 12198.0], [74.0, 11909.0], [73.0, 12218.0], [72.0, 11855.0], [79.0, 11861.0], [78.0, 12115.5], [76.0, 11902.0], [83.0, 11840.0], [82.0, 9308.0], [81.0, 11610.0], [86.0, 11886.0], [85.0, 12086.0], [84.0, 11367.0], [91.0, 11671.0], [89.0, 11726.0], [88.0, 10587.5], [95.0, 11846.0], [94.0, 11879.0], [92.0, 11471.0], [99.0, 9249.0], [98.0, 9211.0], [97.0, 11782.0], [96.0, 11211.0], [103.0, 12051.0], [102.0, 9733.0], [101.0, 11786.0], [100.0, 9634.0], [107.0, 11430.0], [106.0, 12038.0], [105.0, 8660.0], [104.0, 9044.0], [111.0, 10871.333333333334], [110.0, 9085.0], [115.0, 10982.666666666666], [112.0, 11410.0], [119.0, 11984.0], [118.0, 11717.0], [117.0, 8594.0], [116.0, 11723.0], [123.0, 11660.0], [122.0, 11858.5], [121.0, 10010.0], [127.0, 9365.0], [126.0, 11512.5], [124.0, 9176.0], [135.0, 11954.0], [134.0, 11308.0], [132.0, 11650.0], [131.0, 11334.0], [130.0, 10634.5], [128.0, 9151.0], [142.0, 9349.0], [141.0, 11629.0], [140.0, 11648.0], [139.0, 11662.0], [138.0, 11667.0], [137.0, 10123.0], [136.0, 11633.0], [151.0, 10088.0], [150.0, 9633.0], [149.0, 11275.0], [148.0, 11546.333333333334], [145.0, 9282.0], [144.0, 11288.0], [158.0, 11721.0], [157.0, 9055.0], [155.0, 9006.5], [153.0, 10094.0], [152.0, 9918.0], [167.0, 11812.0], [166.0, 11788.0], [165.0, 11684.0], [164.0, 11644.0], [163.0, 11843.0], [161.0, 11536.666666666666], [175.0, 11090.0], [174.0, 11532.0], [173.0, 11191.0], [172.0, 11391.6], [183.0, 11031.0], [182.0, 10015.0], [181.0, 10076.0], [179.0, 11016.0], [178.0, 11601.0], [177.0, 10152.0], [190.0, 11521.0], [189.0, 10348.0], [187.0, 11494.0], [186.0, 8915.0], [185.0, 11464.0], [184.0, 8944.0], [199.0, 9824.333333333334], [198.0, 11478.0], [194.0, 11790.0], [193.0, 8965.0], [192.0, 10236.5], [206.0, 11508.0], [204.0, 10197.4], [200.0, 10995.0], [213.0, 11095.0], [212.0, 8883.0], [211.0, 9384.0], [210.0, 11318.75], [209.0, 8963.0], [222.0, 8999.0], [221.0, 8878.0], [220.0, 11479.0], [219.0, 8775.0], [218.0, 10073.0], [216.0, 11281.0], [231.0, 11073.0], [230.0, 10288.5], [229.0, 11227.0], [227.0, 11731.0], [226.0, 11415.0], [225.0, 10479.0], [235.0, 11523.5], [233.0, 11516.0], [232.0, 11064.0], [246.0, 9087.0], [245.0, 11245.0], [242.0, 11359.0], [240.0, 11250.8], [255.0, 11309.0], [251.0, 11717.0], [250.0, 11528.0], [249.0, 11631.0], [248.0, 11603.0], [271.0, 8847.0], [270.0, 11655.0], [267.0, 9974.5], [265.0, 11659.0], [264.0, 11327.25], [261.0, 9442.0], [258.0, 10055.0], [257.0, 8950.0], [256.0, 11731.0], [286.0, 8903.0], [287.0, 8912.0], [285.0, 11458.0], [284.0, 8112.0], [283.0, 11380.5], [282.0, 11420.0], [281.0, 11226.5], [278.0, 11574.5], [275.0, 8855.0], [272.0, 8317.0], [276.0, 10586.666666666666], [302.0, 10058.0], [303.0, 11045.0], [300.0, 11370.0], [291.0, 10264.0], [289.0, 11099.0], [288.0, 11451.0], [299.0, 10037.0], [297.0, 11420.0], [296.0, 11015.0], [295.0, 11691.0], [294.0, 9340.0], [293.0, 11108.0], [292.0, 11695.0], [317.0, 10966.0], [319.0, 8822.5], [316.0, 11020.0], [305.0, 11586.0], [304.0, 11392.0], [315.0, 11357.0], [314.0, 11068.0], [313.0, 9285.5], [311.0, 11658.0], [310.0, 10487.0], [309.0, 11459.0], [308.0, 11395.0], [333.0, 10964.0], [334.0, 8804.0], [332.0, 9802.0], [323.0, 11421.0], [322.0, 11266.0], [321.0, 11371.5], [331.0, 9641.0], [330.0, 11537.0], [329.0, 11361.0], [328.0, 8792.0], [327.0, 10895.0], [326.0, 8810.0], [325.0, 11499.0], [324.0, 9652.0], [350.0, 11379.0], [351.0, 11590.0], [349.0, 9256.0], [339.0, 9751.5], [337.0, 11501.0], [336.0, 9219.0], [347.0, 11412.0], [346.0, 8785.0], [345.0, 8660.0], [344.0, 11343.0], [343.0, 8674.0], [342.0, 10845.0], [341.0, 9906.0], [355.0, 8819.0], [367.0, 11564.0], [366.0, 11567.0], [365.0, 10075.4], [360.0, 11354.0], [359.0, 11401.0], [358.0, 11516.5], [354.0, 10920.0], [353.0, 11248.5], [370.0, 11049.0], [381.0, 11277.0], [383.0, 8445.0], [380.0, 11524.0], [369.0, 11308.0], [368.0, 10882.0], [379.0, 10504.666666666666], [376.0, 11294.0], [375.0, 11295.0], [374.0, 11336.0], [373.0, 11344.0], [372.0, 9906.0], [394.0, 8584.0], [393.0, 8707.0], [392.0, 9614.666666666666], [389.0, 10903.0], [388.0, 11229.0], [387.0, 9996.0], [385.0, 8855.0], [384.0, 8719.0], [403.0, 10813.0], [414.0, 8638.0], [412.0, 11335.0], [411.0, 9845.5], [409.0, 11500.0], [407.0, 11163.0], [406.0, 10760.0], [405.0, 8894.0], [402.0, 11015.0], [401.0, 10246.57142857143], [419.0, 8663.5], [430.0, 9806.0], [428.0, 10905.0], [427.0, 10706.0], [426.0, 11185.0], [425.0, 11212.0], [423.0, 11171.0], [422.0, 8597.0], [420.0, 11085.0], [417.0, 8669.0], [416.0, 8766.5], [447.0, 10724.0], [444.0, 11340.0], [443.0, 9650.0], [442.0, 8574.5], [440.0, 10202.666666666666], [437.0, 11006.0], [434.0, 9471.0], [433.0, 10636.0], [432.0, 10690.0], [461.0, 10733.0], [463.0, 11124.0], [460.0, 11365.0], [450.0, 9863.0], [448.0, 10130.666666666666], [459.0, 10517.0], [458.0, 8575.0], [457.0, 10780.0], [456.0, 10740.0], [455.0, 11267.0], [454.0, 11130.0], [453.0, 9955.0], [477.0, 8549.0], [478.0, 10758.0], [476.0, 9635.0], [474.0, 10905.5], [472.0, 10922.5], [471.0, 8672.0], [469.0, 9637.5], [467.0, 10855.0], [465.0, 10121.0], [493.0, 8331.0], [492.0, 7942.0], [491.0, 11020.0], [490.0, 11070.0], [489.0, 10686.0], [488.0, 9341.0], [486.0, 9747.5], [484.0, 8679.0], [483.0, 9854.0], [481.0, 10327.666666666666], [499.0, 10640.0], [511.0, 10628.0], [508.0, 11214.0], [507.0, 10624.0], [506.0, 10835.0], [504.0, 10990.5], [502.0, 10043.666666666666], [496.0, 10274.333333333334], [498.0, 11011.0], [497.0, 10958.0], [537.0, 10951.0], [542.0, 10692.0], [543.0, 11175.0], [529.0, 10920.0], [528.0, 10591.0], [532.0, 11026.0], [531.0, 9772.5], [540.0, 11200.0], [539.0, 9412.0], [538.0, 10519.0], [536.0, 7830.0], [519.0, 10601.0], [518.0, 10421.0], [517.0, 10041.5], [515.0, 10454.0], [514.0, 11075.0], [513.0, 11011.0], [512.0, 9794.5], [527.0, 8441.0], [526.0, 10904.0], [525.0, 8350.0], [524.0, 10701.5], [523.0, 10844.0], [521.0, 8266.0], [520.0, 10911.0], [535.0, 10956.0], [534.0, 9800.5], [568.0, 11118.0], [572.0, 8308.0], [575.0, 7735.0], [562.0, 10800.5], [560.0, 8273.0], [574.0, 8214.0], [573.0, 10834.0], [571.0, 10443.0], [570.0, 10931.0], [569.0, 10383.0], [559.0, 11127.0], [545.0, 8732.0], [544.0, 10910.0], [547.0, 11127.0], [546.0, 10514.0], [549.0, 11140.0], [548.0, 11151.0], [551.0, 10505.0], [550.0, 8370.0], [558.0, 10669.0], [556.0, 8461.0], [555.0, 9991.333333333334], [554.0, 10864.0], [564.0, 10446.0], [563.0, 11064.0], [600.0, 10894.0], [604.0, 8086.0], [605.0, 10633.0], [593.0, 10867.0], [592.0, 10366.0], [595.0, 8129.0], [594.0, 10456.0], [603.0, 8087.0], [602.0, 10714.0], [601.0, 10369.0], [591.0, 10374.0], [576.0, 11015.0], [578.0, 8083.0], [577.0, 7694.0], [582.0, 9787.0], [580.0, 10184.0], [590.0, 10725.0], [589.0, 10843.0], [588.0, 11086.0], [587.0, 10736.0], [586.0, 9123.0], [585.0, 9262.0], [584.0, 10344.0], [599.0, 10502.0], [598.0, 8320.0], [597.0, 9214.0], [596.0, 8327.0], [636.0, 10105.0], [639.0, 10175.0], [624.0, 10846.0], [626.0, 10840.0], [625.0, 10500.0], [629.0, 10374.5], [627.0, 10843.0], [638.0, 10469.0], [637.0, 7981.0], [635.0, 10513.0], [634.0, 10655.0], [633.0, 10205.0], [632.0, 10140.0], [623.0, 7890.0], [609.0, 10916.0], [608.0, 9774.0], [611.0, 8108.0], [610.0, 10683.0], [613.0, 10543.0], [612.0, 10822.0], [615.0, 10886.0], [614.0, 7481.0], [622.0, 8056.0], [621.0, 8176.0], [620.0, 10144.0], [619.0, 10857.0], [618.0, 8080.0], [617.0, 9078.0], [616.0, 10046.0], [631.0, 7951.0], [630.0, 8020.0], [670.0, 8877.0], [660.0, 8259.0], [671.0, 10049.0], [657.0, 7894.0], [656.0, 9716.5], [659.0, 9964.0], [658.0, 10017.0], [668.0, 8871.0], [667.0, 9490.333333333334], [664.0, 7901.0], [645.0, 7389.0], [644.0, 7973.0], [643.0, 7407.0], [642.0, 9928.0], [641.0, 8485.5], [654.0, 9641.0], [651.0, 10044.0], [650.0, 7919.0], [649.0, 9901.0], [648.0, 9400.0], [663.0, 8857.0], [662.0, 10004.0], [661.0, 7809.0], [699.0, 10066.0], [700.0, 9689.0], [698.0, 9723.0], [697.0, 10272.0], [693.0, 7596.0], [692.0, 9994.0], [691.0, 10182.0], [689.0, 10404.5], [687.0, 7678.0], [673.0, 7627.0], [672.0, 10251.0], [675.0, 10338.0], [674.0, 10520.0], [677.0, 10298.0], [676.0, 9972.0], [686.0, 8391.333333333334], [683.0, 10188.0], [682.0, 9827.0], [681.0, 10482.0], [680.0, 8327.333333333334], [734.0, 9813.0], [735.0, 9506.0], [733.0, 9888.0], [732.0, 6849.0], [731.0, 9798.0], [725.0, 10023.0], [722.0, 7489.0], [721.0, 9160.714285714286], [714.0, 9891.666666666666], [706.0, 9722.166666666668], [711.0, 8487.4], [755.0, 10031.0], [765.0, 9208.0], [767.0, 9707.5], [754.0, 9592.8], [764.0, 9527.666666666666], [761.0, 7122.0], [760.0, 9449.0], [743.0, 8688.5], [742.0, 8704.0], [739.0, 9540.0], [738.0, 9784.5], [736.0, 6795.0], [749.0, 9448.0], [748.0, 9885.0], [746.0, 8524.333333333334], [759.0, 9374.0], [757.0, 9710.0], [756.0, 10042.0], [793.0, 9101.0], [798.0, 8977.0], [799.0, 6759.0], [785.0, 6824.0], [784.0, 9049.0], [797.0, 8473.5], [795.0, 9342.0], [794.0, 6800.0], [792.0, 6370.0], [774.0, 6368.0], [773.0, 9572.0], [772.0, 8677.666666666666], [769.0, 9493.0], [768.0, 9230.0], [783.0, 8853.5], [779.0, 6317.0], [778.0, 9474.0], [777.0, 9051.0], [776.0, 7482.5], [791.0, 8588.6], [789.0, 9628.0], [816.0, 8328.5], [821.0, 6473.0], [820.0, 9473.0], [819.0, 9190.0], [814.0, 9349.75], [804.0, 9351.0], [810.0, 9394.5], [809.0, 8948.0], [808.0, 6745.0], [806.0, 6212.0], [805.0, 9223.8], [862.0, 8823.75], [863.0, 8447.0], [858.0, 8057.25], [839.0, 7694.0], [835.0, 6060.0], [834.0, 8765.923076923076], [854.0, 8804.0], [853.0, 9162.25], [849.0, 9010.666666666666], [846.0, 8597.5], [842.0, 8927.0], [841.0, 8476.75], [840.0, 9447.0], [871.0, 8419.0], [891.0, 8318.666666666666], [893.0, 8837.333333333334], [890.0, 8285.0], [886.0, 8514.3], [876.0, 8449.666666666666], [873.0, 8446.0], [872.0, 8985.0], [870.0, 8643.0], [869.0, 8634.0], [868.0, 9171.5], [866.0, 5898.0], [865.0, 8481.0], [902.0, 8712.0], [923.0, 7661.0], [921.0, 8110.6], [916.0, 7946.666666666667], [911.0, 8172.0], [909.0, 8494.0], [908.0, 8603.5], [901.0, 5686.0], [900.0, 9047.0], [898.0, 8278.2], [945.0, 8207.0], [958.0, 8089.0], [957.0, 8116.0], [956.0, 8752.0], [955.0, 8569.4], [943.0, 8617.0], [941.0, 8457.75], [940.0, 8456.166666666666], [939.0, 8567.0], [938.0, 7754.5], [950.0, 8359.0], [948.0, 8557.0], [947.0, 8476.0], [944.0, 8645.0], [988.0, 8325.714285714284], [987.0, 8472.0], [980.0, 6236.0], [979.0, 8063.333333333334], [967.0, 8495.0], [966.0, 8096.333333333333], [965.0, 8416.5], [994.0, 8640.0], [1023.0, 8037.285714285715], [1016.0, 6840.0], [1012.0, 7088.0], [1010.0, 8173.0], [1009.0, 7336.714285714286], [1002.0, 6691.0], [1001.0, 8119.0], [993.0, 5892.0], [992.0, 8066.75], [1038.0, 7809.333333333333], [1074.0, 7624.0], [1058.0, 7919.0], [1076.0, 8363.0], [1034.0, 7081.666666666667], [1030.0, 7599.2], [1024.0, 8548.0], [1054.0, 7673.125], [1046.0, 7819.714285714285], [1042.0, 7758.0], [1062.0, 7292.75], [1100.0, 734.0], [1102.0, 1056.0], [1106.0, 648.0], [1104.0, 1067.0], [1136.0, 7382.0], [1144.0, 8089.0], [1090.0, 7788.0], [1088.0, 8192.0], [1098.0, 7297.875], [1094.0, 7461.0], [1112.0, 7655.0], [1134.0, 6205.0], [1150.0, 6834.666666666667], [1148.0, 7436.0], [1204.0, 7476.0], [1190.0, 973.3333333333334], [1184.0, 7366.5], [1208.0, 7481.0], [1178.0, 7520.0], [1160.0, 6271.0], [1162.0, 7062.0], [1168.0, 7286.249999999999], [1196.0, 6946.0], [1194.0, 7514.7], [1252.0, 1197.0], [1276.0, 6505.75], [1256.0, 1127.0], [1258.0, 7062.0], [1254.0, 1129.5], [1248.0, 6261.666666666667], [1278.0, 6063.0], [1272.0, 6632.0], [1270.0, 6503.714285714286], [1268.0, 6787.0], [1228.0, 6863.250000000001], [1216.0, 7175.0], [1232.0, 7520.5], [1328.0, 5603.5], [1290.0, 6893.363636363637], [1302.0, 6866.5], [1300.0, 6382.0], [1296.0, 5904.0], [1330.0, 6840.0], [1342.0, 1223.0], [1326.0, 6712.0], [1338.0, 6613.0], [1334.0, 6197.0], [1332.0, 6838.0], [1356.0, 6025.0], [1400.0, 1919.6666666666665], [1346.0, 5027.0], [1348.0, 4480.0], [1374.0, 4527.0], [1372.0, 3479.5], [1370.0, 4835.0], [1368.0, 4738.0], [1366.0, 4690.0], [1362.0, 5797.0], [1392.0, 2858.0], [1358.0, 5352.0], [1354.0, 4857.5], [1352.0, 4253.0], [1350.0, 5729.0], [1394.0, 3435.0], [1396.0, 4338.0], [1398.0, 2402.0], [1406.0, 1464.0], [1390.0, 3128.0], [1388.0, 4467.0], [1386.0, 4165.0], [1384.0, 3054.0], [1380.0, 3921.5], [1378.0, 4677.0], [1376.0, 4381.0], [1404.0, 2687.0], [1412.0, 1222.5], [1410.0, 1104.0], [1414.0, 1374.6], [1422.0, 2230.0], [1420.0, 3055.0], [1418.0, 3917.0], [1416.0, 3876.0], [1430.0, 1138.0], [1428.0, 1181.0], [1426.0, 1216.0], [1424.0, 3182.0], [1432.0, 1961.0], [1408.0, 2671.0], [1434.0, 1136.0], [1079.0, 7235.0], [1083.0, 7580.75], [1087.0, 7390.25], [1057.0, 6776.666666666667], [1075.0, 7819.0], [1073.0, 7874.333333333333], [1035.0, 8431.0], [1033.0, 7765.0], [1029.0, 8213.0], [1069.0, 6289.5], [1103.0, 444.0], [1105.0, 7860.0], [1139.0, 7637.5], [1143.0, 6987.5], [1147.0, 7343.0], [1145.0, 7995.0], [1101.0, 740.0], [1115.0, 7921.666666666667], [1111.0, 7660.4], [1109.0, 7647.0], [1107.0, 8254.0], [1151.0, 7736.0], [1133.0, 7558.666666666667], [1123.0, 7273.875], [1135.0, 7427.75], [1149.0, 7997.0], [1205.0, 7780.0], [1209.0, 6769.571428571428], [1215.0, 6626.5], [1213.0, 7609.75], [1203.0, 7086.5], [1159.0, 8070.0], [1161.0, 7704.5], [1165.0, 7307.0], [1177.0, 7197.444444444444], [1251.0, 7382.5], [1253.0, 1210.5], [1255.0, 1203.5], [1257.0, 7420.5], [1249.0, 6762.0], [1279.0, 6637.0], [1271.0, 7015.0], [1269.0, 6842.25], [1227.0, 7770.0], [1225.0, 5804.0], [1247.0, 6094.0], [1243.0, 6582.0], [1235.0, 6627.666666666667], [1295.0, 6595.0], [1337.0, 5858.0], [1281.0, 1320.0], [1291.0, 5368.0], [1311.0, 6191.5], [1307.0, 6208.25], [1303.0, 6665.0], [1329.0, 5094.0], [1331.0, 6122.0], [1339.0, 3005.5], [1343.0, 6184.5], [1325.0, 6409.5], [1319.0, 6397.0], [1317.0, 6449.0], [1315.0, 6782.5], [1313.0, 7090.5], [1335.0, 6071.0], [1333.0, 4838.0], [1359.0, 3966.0], [1407.0, 3346.0], [1349.0, 3094.0], [1375.0, 4438.0], [1347.0, 3798.0], [1373.0, 4453.0], [1369.0, 5031.0], [1367.0, 3857.0], [1365.0, 4306.5], [1363.0, 3823.0], [1361.0, 4510.0], [1357.0, 5472.0], [1355.0, 5972.0], [1351.0, 5263.0], [1395.0, 3003.0], [1397.0, 2842.0], [1399.0, 1631.0], [1401.0, 1521.25], [1405.0, 1668.5], [1391.0, 4421.0], [1387.0, 3665.0], [1385.0, 3064.0], [1383.0, 4293.5], [1381.0, 3176.0], [1377.0, 4057.0], [1403.0, 3216.5], [1411.0, 1699.5], [1413.0, 2375.3333333333335], [1409.0, 1555.8333333333333], [1415.0, 3060.0], [1421.0, 2972.0], [1419.0, 2897.0], [1417.0, 2362.0], [1431.0, 1045.0], [1429.0, 2455.0], [1427.0, 1194.0], [1425.0, 1217.0], [1435.0, 2105.0], [1433.0, 2157.0], [1.0, 12122.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[745.7853333333334, 8488.725333333305]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1435.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 17300.0, "minX": 1.75566516E12, "maxY": 1.07928542E7, "series": [{"data": [[1.75566516E12, 17300.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75566516E12, 1.07928542E7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566516E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8488.725333333305, "minX": 1.75566516E12, "maxY": 8488.725333333305, "series": [{"data": [[1.75566516E12, 8488.725333333305]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566516E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8488.693999999996, "minX": 1.75566516E12, "maxY": 8488.693999999996, "series": [{"data": [[1.75566516E12, 8488.693999999996]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566516E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3003.6373333333327, "minX": 1.75566516E12, "maxY": 3003.6373333333327, "series": [{"data": [[1.75566516E12, 3003.6373333333327]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566516E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 245.0, "minX": 1.75566516E12, "maxY": 12384.0, "series": [{"data": [[1.75566516E12, 12384.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75566516E12, 11497.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75566516E12, 12148.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75566516E12, 11723.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75566516E12, 245.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75566516E12, 8730.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566516E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1140.0, "minX": 6.0, "maxY": 11717.0, "series": [{"data": [[141.0, 9201.0], [36.0, 1140.0], [40.0, 1269.0], [23.0, 4857.0], [6.0, 2975.5], [48.0, 3544.0], [51.0, 6463.0], [205.0, 10140.0], [208.0, 7347.0], [225.0, 8192.0], [461.0, 11108.0], [56.0, 11717.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 461.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1140.0, "minX": 6.0, "maxY": 11717.0, "series": [{"data": [[141.0, 9201.0], [36.0, 1140.0], [40.0, 1269.0], [23.0, 4857.0], [6.0, 2975.5], [48.0, 3544.0], [51.0, 6463.0], [205.0, 10140.0], [208.0, 7347.0], [225.0, 8192.0], [461.0, 11108.0], [56.0, 11717.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 461.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75566516E12, "maxY": 25.0, "series": [{"data": [[1.75566516E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566516E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75566516E12, "maxY": 25.0, "series": [{"data": [[1.75566516E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566516E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75566516E12, "maxY": 25.0, "series": [{"data": [[1.75566516E12, 25.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566516E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75566516E12, "maxY": 25.0, "series": [{"data": [[1.75566516E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566516E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

