/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1035.0, "minX": 0.0, "maxY": 6125.0, "series": [{"data": [[0.0, 1035.0], [0.1, 1216.0], [0.2, 1256.0], [0.3, 1256.0], [0.4, 1501.0], [0.5, 1501.0], [0.6, 1501.0], [0.7, 1523.0], [0.8, 1677.0], [0.9, 1846.0], [1.0, 2010.0], [1.1, 2014.0], [1.2, 2014.0], [1.3, 2049.0], [1.4, 2105.0], [1.5, 2138.0], [1.6, 2212.0], [1.7, 2226.0], [1.8, 2235.0], [1.9, 2251.0], [2.0, 2291.0], [2.1, 2341.0], [2.2, 2348.0], [2.3, 2350.0], [2.4, 2392.0], [2.5, 2399.0], [2.6, 2416.0], [2.7, 2431.0], [2.8, 2432.0], [2.9, 2466.0], [3.0, 2532.0], [3.1, 2550.0], [3.2, 2584.0], [3.3, 2587.0], [3.4, 2614.0], [3.5, 2644.0], [3.6, 2661.0], [3.7, 2663.0], [3.8, 2845.0], [3.9, 2859.0], [4.0, 2908.0], [4.1, 2917.0], [4.2, 2927.0], [4.3, 2958.0], [4.4, 2958.0], [4.5, 2973.0], [4.6, 2984.0], [4.7, 2987.0], [4.8, 2992.0], [4.9, 3115.0], [5.0, 3126.0], [5.1, 3127.0], [5.2, 3128.0], [5.3, 3142.0], [5.4, 3144.0], [5.5, 3153.0], [5.6, 3159.0], [5.7, 3174.0], [5.8, 3186.0], [5.9, 3190.0], [6.0, 3200.0], [6.1, 3204.0], [6.2, 3222.0], [6.3, 3232.0], [6.4, 3235.0], [6.5, 3235.0], [6.6, 3242.0], [6.7, 3245.0], [6.8, 3298.0], [6.9, 3312.0], [7.0, 3324.0], [7.1, 3326.0], [7.2, 3334.0], [7.3, 3338.0], [7.4, 3342.0], [7.5, 3348.0], [7.6, 3349.0], [7.7, 3357.0], [7.8, 3363.0], [7.9, 3372.0], [8.0, 3372.0], [8.1, 3375.0], [8.2, 3379.0], [8.3, 3381.0], [8.4, 3384.0], [8.5, 3406.0], [8.6, 3417.0], [8.7, 3427.0], [8.8, 3445.0], [8.9, 3468.0], [9.0, 3469.0], [9.1, 3513.0], [9.2, 3517.0], [9.3, 3545.0], [9.4, 3561.0], [9.5, 3564.0], [9.6, 3577.0], [9.7, 3601.0], [9.8, 3606.0], [9.9, 3627.0], [10.0, 3632.0], [10.1, 3633.0], [10.2, 3635.0], [10.3, 3650.0], [10.4, 3652.0], [10.5, 3654.0], [10.6, 3656.0], [10.7, 3661.0], [10.8, 3661.0], [10.9, 3665.0], [11.0, 3669.0], [11.1, 3689.0], [11.2, 3690.0], [11.3, 3699.0], [11.4, 3701.0], [11.5, 3710.0], [11.6, 3716.0], [11.7, 3717.0], [11.8, 3722.0], [11.9, 3723.0], [12.0, 3724.0], [12.1, 3727.0], [12.2, 3728.0], [12.3, 3729.0], [12.4, 3731.0], [12.5, 3731.0], [12.6, 3733.0], [12.7, 3733.0], [12.8, 3746.0], [12.9, 3748.0], [13.0, 3749.0], [13.1, 3761.0], [13.2, 3765.0], [13.3, 3777.0], [13.4, 3784.0], [13.5, 3786.0], [13.6, 3791.0], [13.7, 3792.0], [13.8, 3800.0], [13.9, 3806.0], [14.0, 3807.0], [14.1, 3807.0], [14.2, 3822.0], [14.3, 3825.0], [14.4, 3828.0], [14.5, 3833.0], [14.6, 3842.0], [14.7, 3848.0], [14.8, 3848.0], [14.9, 3849.0], [15.0, 3860.0], [15.1, 3865.0], [15.2, 3867.0], [15.3, 3870.0], [15.4, 3882.0], [15.5, 3905.0], [15.6, 3905.0], [15.7, 3908.0], [15.8, 3916.0], [15.9, 3916.0], [16.0, 3918.0], [16.1, 3921.0], [16.2, 3947.0], [16.3, 3948.0], [16.4, 3957.0], [16.5, 3967.0], [16.6, 3967.0], [16.7, 3970.0], [16.8, 3970.0], [16.9, 3970.0], [17.0, 3971.0], [17.1, 3973.0], [17.2, 3979.0], [17.3, 3981.0], [17.4, 3982.0], [17.5, 3983.0], [17.6, 4000.0], [17.7, 4004.0], [17.8, 4011.0], [17.9, 4012.0], [18.0, 4016.0], [18.1, 4023.0], [18.2, 4023.0], [18.3, 4024.0], [18.4, 4030.0], [18.5, 4044.0], [18.6, 4050.0], [18.7, 4052.0], [18.8, 4053.0], [18.9, 4054.0], [19.0, 4058.0], [19.1, 4060.0], [19.2, 4060.0], [19.3, 4061.0], [19.4, 4061.0], [19.5, 4071.0], [19.6, 4071.0], [19.7, 4073.0], [19.8, 4074.0], [19.9, 4075.0], [20.0, 4077.0], [20.1, 4082.0], [20.2, 4085.0], [20.3, 4085.0], [20.4, 4092.0], [20.5, 4092.0], [20.6, 4097.0], [20.7, 4101.0], [20.8, 4108.0], [20.9, 4108.0], [21.0, 4111.0], [21.1, 4112.0], [21.2, 4114.0], [21.3, 4117.0], [21.4, 4117.0], [21.5, 4119.0], [21.6, 4128.0], [21.7, 4131.0], [21.8, 4132.0], [21.9, 4134.0], [22.0, 4135.0], [22.1, 4135.0], [22.2, 4140.0], [22.3, 4140.0], [22.4, 4144.0], [22.5, 4146.0], [22.6, 4147.0], [22.7, 4154.0], [22.8, 4155.0], [22.9, 4155.0], [23.0, 4160.0], [23.1, 4162.0], [23.2, 4165.0], [23.3, 4172.0], [23.4, 4172.0], [23.5, 4184.0], [23.6, 4185.0], [23.7, 4186.0], [23.8, 4193.0], [23.9, 4194.0], [24.0, 4200.0], [24.1, 4208.0], [24.2, 4209.0], [24.3, 4214.0], [24.4, 4215.0], [24.5, 4218.0], [24.6, 4218.0], [24.7, 4218.0], [24.8, 4222.0], [24.9, 4227.0], [25.0, 4227.0], [25.1, 4235.0], [25.2, 4237.0], [25.3, 4242.0], [25.4, 4244.0], [25.5, 4246.0], [25.6, 4255.0], [25.7, 4256.0], [25.8, 4265.0], [25.9, 4268.0], [26.0, 4269.0], [26.1, 4272.0], [26.2, 4276.0], [26.3, 4281.0], [26.4, 4292.0], [26.5, 4296.0], [26.6, 4296.0], [26.7, 4306.0], [26.8, 4316.0], [26.9, 4317.0], [27.0, 4317.0], [27.1, 4317.0], [27.2, 4321.0], [27.3, 4323.0], [27.4, 4323.0], [27.5, 4324.0], [27.6, 4324.0], [27.7, 4327.0], [27.8, 4328.0], [27.9, 4330.0], [28.0, 4330.0], [28.1, 4331.0], [28.2, 4331.0], [28.3, 4336.0], [28.4, 4337.0], [28.5, 4338.0], [28.6, 4340.0], [28.7, 4344.0], [28.8, 4346.0], [28.9, 4346.0], [29.0, 4346.0], [29.1, 4349.0], [29.2, 4356.0], [29.3, 4363.0], [29.4, 4370.0], [29.5, 4377.0], [29.6, 4384.0], [29.7, 4388.0], [29.8, 4388.0], [29.9, 4398.0], [30.0, 4398.0], [30.1, 4400.0], [30.2, 4409.0], [30.3, 4411.0], [30.4, 4416.0], [30.5, 4416.0], [30.6, 4419.0], [30.7, 4422.0], [30.8, 4424.0], [30.9, 4429.0], [31.0, 4430.0], [31.1, 4431.0], [31.2, 4436.0], [31.3, 4436.0], [31.4, 4436.0], [31.5, 4438.0], [31.6, 4439.0], [31.7, 4439.0], [31.8, 4440.0], [31.9, 4446.0], [32.0, 4450.0], [32.1, 4450.0], [32.2, 4452.0], [32.3, 4460.0], [32.4, 4462.0], [32.5, 4464.0], [32.6, 4466.0], [32.7, 4466.0], [32.8, 4467.0], [32.9, 4473.0], [33.0, 4475.0], [33.1, 4476.0], [33.2, 4477.0], [33.3, 4477.0], [33.4, 4484.0], [33.5, 4484.0], [33.6, 4486.0], [33.7, 4487.0], [33.8, 4488.0], [33.9, 4491.0], [34.0, 4492.0], [34.1, 4499.0], [34.2, 4501.0], [34.3, 4502.0], [34.4, 4506.0], [34.5, 4512.0], [34.6, 4516.0], [34.7, 4518.0], [34.8, 4519.0], [34.9, 4521.0], [35.0, 4522.0], [35.1, 4523.0], [35.2, 4523.0], [35.3, 4526.0], [35.4, 4530.0], [35.5, 4530.0], [35.6, 4533.0], [35.7, 4534.0], [35.8, 4538.0], [35.9, 4538.0], [36.0, 4539.0], [36.1, 4541.0], [36.2, 4541.0], [36.3, 4543.0], [36.4, 4543.0], [36.5, 4544.0], [36.6, 4545.0], [36.7, 4545.0], [36.8, 4545.0], [36.9, 4546.0], [37.0, 4548.0], [37.1, 4549.0], [37.2, 4549.0], [37.3, 4551.0], [37.4, 4556.0], [37.5, 4557.0], [37.6, 4562.0], [37.7, 4568.0], [37.8, 4570.0], [37.9, 4571.0], [38.0, 4571.0], [38.1, 4578.0], [38.2, 4585.0], [38.3, 4589.0], [38.4, 4590.0], [38.5, 4592.0], [38.6, 4593.0], [38.7, 4595.0], [38.8, 4596.0], [38.9, 4597.0], [39.0, 4598.0], [39.1, 4598.0], [39.2, 4601.0], [39.3, 4601.0], [39.4, 4605.0], [39.5, 4608.0], [39.6, 4608.0], [39.7, 4611.0], [39.8, 4612.0], [39.9, 4612.0], [40.0, 4617.0], [40.1, 4617.0], [40.2, 4619.0], [40.3, 4620.0], [40.4, 4623.0], [40.5, 4624.0], [40.6, 4624.0], [40.7, 4625.0], [40.8, 4627.0], [40.9, 4631.0], [41.0, 4632.0], [41.1, 4636.0], [41.2, 4638.0], [41.3, 4640.0], [41.4, 4641.0], [41.5, 4641.0], [41.6, 4643.0], [41.7, 4643.0], [41.8, 4645.0], [41.9, 4646.0], [42.0, 4647.0], [42.1, 4649.0], [42.2, 4650.0], [42.3, 4650.0], [42.4, 4652.0], [42.5, 4652.0], [42.6, 4655.0], [42.7, 4656.0], [42.8, 4656.0], [42.9, 4657.0], [43.0, 4658.0], [43.1, 4659.0], [43.2, 4659.0], [43.3, 4662.0], [43.4, 4667.0], [43.5, 4668.0], [43.6, 4670.0], [43.7, 4673.0], [43.8, 4673.0], [43.9, 4678.0], [44.0, 4679.0], [44.1, 4681.0], [44.2, 4682.0], [44.3, 4682.0], [44.4, 4682.0], [44.5, 4683.0], [44.6, 4684.0], [44.7, 4685.0], [44.8, 4686.0], [44.9, 4686.0], [45.0, 4689.0], [45.1, 4690.0], [45.2, 4694.0], [45.3, 4699.0], [45.4, 4699.0], [45.5, 4702.0], [45.6, 4702.0], [45.7, 4705.0], [45.8, 4713.0], [45.9, 4714.0], [46.0, 4719.0], [46.1, 4721.0], [46.2, 4723.0], [46.3, 4723.0], [46.4, 4724.0], [46.5, 4724.0], [46.6, 4728.0], [46.7, 4729.0], [46.8, 4732.0], [46.9, 4733.0], [47.0, 4733.0], [47.1, 4734.0], [47.2, 4737.0], [47.3, 4740.0], [47.4, 4742.0], [47.5, 4742.0], [47.6, 4745.0], [47.7, 4746.0], [47.8, 4747.0], [47.9, 4748.0], [48.0, 4756.0], [48.1, 4756.0], [48.2, 4757.0], [48.3, 4757.0], [48.4, 4761.0], [48.5, 4761.0], [48.6, 4767.0], [48.7, 4774.0], [48.8, 4776.0], [48.9, 4778.0], [49.0, 4779.0], [49.1, 4780.0], [49.2, 4783.0], [49.3, 4784.0], [49.4, 4784.0], [49.5, 4785.0], [49.6, 4788.0], [49.7, 4800.0], [49.8, 4802.0], [49.9, 4803.0], [50.0, 4809.0], [50.1, 4812.0], [50.2, 4814.0], [50.3, 4817.0], [50.4, 4820.0], [50.5, 4823.0], [50.6, 4827.0], [50.7, 4828.0], [50.8, 4832.0], [50.9, 4832.0], [51.0, 4846.0], [51.1, 4851.0], [51.2, 4857.0], [51.3, 4858.0], [51.4, 4859.0], [51.5, 4865.0], [51.6, 4867.0], [51.7, 4868.0], [51.8, 4869.0], [51.9, 4872.0], [52.0, 4889.0], [52.1, 4895.0], [52.2, 4898.0], [52.3, 4898.0], [52.4, 4902.0], [52.5, 4903.0], [52.6, 4904.0], [52.7, 4906.0], [52.8, 4921.0], [52.9, 4927.0], [53.0, 4928.0], [53.1, 4929.0], [53.2, 4933.0], [53.3, 4940.0], [53.4, 4944.0], [53.5, 4949.0], [53.6, 4949.0], [53.7, 4957.0], [53.8, 4958.0], [53.9, 4962.0], [54.0, 4976.0], [54.1, 4979.0], [54.2, 4985.0], [54.3, 4986.0], [54.4, 4987.0], [54.5, 4991.0], [54.6, 5001.0], [54.7, 5007.0], [54.8, 5008.0], [54.9, 5008.0], [55.0, 5009.0], [55.1, 5014.0], [55.2, 5025.0], [55.3, 5026.0], [55.4, 5029.0], [55.5, 5031.0], [55.6, 5032.0], [55.7, 5033.0], [55.8, 5034.0], [55.9, 5044.0], [56.0, 5049.0], [56.1, 5050.0], [56.2, 5054.0], [56.3, 5057.0], [56.4, 5057.0], [56.5, 5064.0], [56.6, 5067.0], [56.7, 5069.0], [56.8, 5071.0], [56.9, 5072.0], [57.0, 5072.0], [57.1, 5074.0], [57.2, 5075.0], [57.3, 5080.0], [57.4, 5085.0], [57.5, 5089.0], [57.6, 5094.0], [57.7, 5094.0], [57.8, 5097.0], [57.9, 5101.0], [58.0, 5108.0], [58.1, 5119.0], [58.2, 5127.0], [58.3, 5130.0], [58.4, 5133.0], [58.5, 5136.0], [58.6, 5139.0], [58.7, 5145.0], [58.8, 5146.0], [58.9, 5150.0], [59.0, 5158.0], [59.1, 5162.0], [59.2, 5168.0], [59.3, 5170.0], [59.4, 5171.0], [59.5, 5172.0], [59.6, 5181.0], [59.7, 5189.0], [59.8, 5193.0], [59.9, 5194.0], [60.0, 5200.0], [60.1, 5201.0], [60.2, 5205.0], [60.3, 5206.0], [60.4, 5208.0], [60.5, 5209.0], [60.6, 5212.0], [60.7, 5214.0], [60.8, 5214.0], [60.9, 5216.0], [61.0, 5227.0], [61.1, 5237.0], [61.2, 5241.0], [61.3, 5248.0], [61.4, 5250.0], [61.5, 5254.0], [61.6, 5264.0], [61.7, 5269.0], [61.8, 5270.0], [61.9, 5275.0], [62.0, 5276.0], [62.1, 5284.0], [62.2, 5286.0], [62.3, 5286.0], [62.4, 5290.0], [62.5, 5290.0], [62.6, 5302.0], [62.7, 5310.0], [62.8, 5311.0], [62.9, 5312.0], [63.0, 5312.0], [63.1, 5314.0], [63.2, 5331.0], [63.3, 5332.0], [63.4, 5337.0], [63.5, 5339.0], [63.6, 5344.0], [63.7, 5345.0], [63.8, 5347.0], [63.9, 5349.0], [64.0, 5350.0], [64.1, 5353.0], [64.2, 5353.0], [64.3, 5365.0], [64.4, 5368.0], [64.5, 5369.0], [64.6, 5373.0], [64.7, 5376.0], [64.8, 5383.0], [64.9, 5384.0], [65.0, 5388.0], [65.1, 5395.0], [65.2, 5396.0], [65.3, 5398.0], [65.4, 5399.0], [65.5, 5400.0], [65.6, 5401.0], [65.7, 5404.0], [65.8, 5405.0], [65.9, 5406.0], [66.0, 5410.0], [66.1, 5416.0], [66.2, 5419.0], [66.3, 5422.0], [66.4, 5428.0], [66.5, 5432.0], [66.6, 5436.0], [66.7, 5450.0], [66.8, 5451.0], [66.9, 5460.0], [67.0, 5462.0], [67.1, 5462.0], [67.2, 5463.0], [67.3, 5465.0], [67.4, 5477.0], [67.5, 5478.0], [67.6, 5478.0], [67.7, 5481.0], [67.8, 5484.0], [67.9, 5485.0], [68.0, 5492.0], [68.1, 5493.0], [68.2, 5495.0], [68.3, 5504.0], [68.4, 5506.0], [68.5, 5507.0], [68.6, 5510.0], [68.7, 5512.0], [68.8, 5515.0], [68.9, 5516.0], [69.0, 5516.0], [69.1, 5523.0], [69.2, 5525.0], [69.3, 5529.0], [69.4, 5535.0], [69.5, 5538.0], [69.6, 5543.0], [69.7, 5547.0], [69.8, 5557.0], [69.9, 5560.0], [70.0, 5570.0], [70.1, 5571.0], [70.2, 5574.0], [70.3, 5576.0], [70.4, 5577.0], [70.5, 5581.0], [70.6, 5586.0], [70.7, 5588.0], [70.8, 5589.0], [70.9, 5595.0], [71.0, 5598.0], [71.1, 5601.0], [71.2, 5610.0], [71.3, 5610.0], [71.4, 5611.0], [71.5, 5612.0], [71.6, 5619.0], [71.7, 5621.0], [71.8, 5623.0], [71.9, 5625.0], [72.0, 5626.0], [72.1, 5626.0], [72.2, 5629.0], [72.3, 5630.0], [72.4, 5631.0], [72.5, 5633.0], [72.6, 5633.0], [72.7, 5638.0], [72.8, 5639.0], [72.9, 5639.0], [73.0, 5645.0], [73.1, 5648.0], [73.2, 5652.0], [73.3, 5653.0], [73.4, 5654.0], [73.5, 5654.0], [73.6, 5655.0], [73.7, 5655.0], [73.8, 5660.0], [73.9, 5661.0], [74.0, 5663.0], [74.1, 5665.0], [74.2, 5668.0], [74.3, 5672.0], [74.4, 5672.0], [74.5, 5675.0], [74.6, 5676.0], [74.7, 5680.0], [74.8, 5683.0], [74.9, 5687.0], [75.0, 5690.0], [75.1, 5690.0], [75.2, 5691.0], [75.3, 5692.0], [75.4, 5693.0], [75.5, 5694.0], [75.6, 5695.0], [75.7, 5695.0], [75.8, 5696.0], [75.9, 5700.0], [76.0, 5700.0], [76.1, 5700.0], [76.2, 5703.0], [76.3, 5704.0], [76.4, 5705.0], [76.5, 5707.0], [76.6, 5708.0], [76.7, 5708.0], [76.8, 5709.0], [76.9, 5710.0], [77.0, 5710.0], [77.1, 5713.0], [77.2, 5718.0], [77.3, 5719.0], [77.4, 5719.0], [77.5, 5719.0], [77.6, 5720.0], [77.7, 5723.0], [77.8, 5726.0], [77.9, 5731.0], [78.0, 5735.0], [78.1, 5739.0], [78.2, 5740.0], [78.3, 5741.0], [78.4, 5745.0], [78.5, 5746.0], [78.6, 5748.0], [78.7, 5748.0], [78.8, 5749.0], [78.9, 5750.0], [79.0, 5752.0], [79.1, 5752.0], [79.2, 5755.0], [79.3, 5756.0], [79.4, 5759.0], [79.5, 5759.0], [79.6, 5760.0], [79.7, 5760.0], [79.8, 5763.0], [79.9, 5765.0], [80.0, 5765.0], [80.1, 5768.0], [80.2, 5769.0], [80.3, 5769.0], [80.4, 5771.0], [80.5, 5775.0], [80.6, 5776.0], [80.7, 5778.0], [80.8, 5779.0], [80.9, 5780.0], [81.0, 5782.0], [81.1, 5783.0], [81.2, 5784.0], [81.3, 5789.0], [81.4, 5789.0], [81.5, 5789.0], [81.6, 5795.0], [81.7, 5798.0], [81.8, 5798.0], [81.9, 5798.0], [82.0, 5798.0], [82.1, 5798.0], [82.2, 5802.0], [82.3, 5803.0], [82.4, 5804.0], [82.5, 5805.0], [82.6, 5805.0], [82.7, 5805.0], [82.8, 5808.0], [82.9, 5809.0], [83.0, 5809.0], [83.1, 5810.0], [83.2, 5811.0], [83.3, 5812.0], [83.4, 5819.0], [83.5, 5820.0], [83.6, 5822.0], [83.7, 5823.0], [83.8, 5825.0], [83.9, 5827.0], [84.0, 5829.0], [84.1, 5831.0], [84.2, 5834.0], [84.3, 5837.0], [84.4, 5839.0], [84.5, 5839.0], [84.6, 5839.0], [84.7, 5840.0], [84.8, 5840.0], [84.9, 5841.0], [85.0, 5841.0], [85.1, 5843.0], [85.2, 5845.0], [85.3, 5846.0], [85.4, 5847.0], [85.5, 5847.0], [85.6, 5850.0], [85.7, 5852.0], [85.8, 5853.0], [85.9, 5855.0], [86.0, 5855.0], [86.1, 5855.0], [86.2, 5857.0], [86.3, 5861.0], [86.4, 5862.0], [86.5, 5864.0], [86.6, 5870.0], [86.7, 5871.0], [86.8, 5875.0], [86.9, 5876.0], [87.0, 5888.0], [87.1, 5890.0], [87.2, 5894.0], [87.3, 5895.0], [87.4, 5899.0], [87.5, 5899.0], [87.6, 5900.0], [87.7, 5906.0], [87.8, 5906.0], [87.9, 5908.0], [88.0, 5912.0], [88.1, 5912.0], [88.2, 5918.0], [88.3, 5920.0], [88.4, 5921.0], [88.5, 5921.0], [88.6, 5924.0], [88.7, 5926.0], [88.8, 5929.0], [88.9, 5930.0], [89.0, 5930.0], [89.1, 5931.0], [89.2, 5931.0], [89.3, 5932.0], [89.4, 5933.0], [89.5, 5933.0], [89.6, 5933.0], [89.7, 5933.0], [89.8, 5934.0], [89.9, 5935.0], [90.0, 5938.0], [90.1, 5938.0], [90.2, 5941.0], [90.3, 5942.0], [90.4, 5943.0], [90.5, 5944.0], [90.6, 5945.0], [90.7, 5945.0], [90.8, 5948.0], [90.9, 5948.0], [91.0, 5951.0], [91.1, 5955.0], [91.2, 5958.0], [91.3, 5961.0], [91.4, 5963.0], [91.5, 5966.0], [91.6, 5966.0], [91.7, 5968.0], [91.8, 5969.0], [91.9, 5970.0], [92.0, 5970.0], [92.1, 5970.0], [92.2, 5971.0], [92.3, 5971.0], [92.4, 5971.0], [92.5, 5972.0], [92.6, 5973.0], [92.7, 5974.0], [92.8, 5976.0], [92.9, 5980.0], [93.0, 5983.0], [93.1, 5984.0], [93.2, 5985.0], [93.3, 5988.0], [93.4, 5989.0], [93.5, 5990.0], [93.6, 5993.0], [93.7, 5996.0], [93.8, 5997.0], [93.9, 5999.0], [94.0, 6004.0], [94.1, 6007.0], [94.2, 6007.0], [94.3, 6007.0], [94.4, 6008.0], [94.5, 6008.0], [94.6, 6008.0], [94.7, 6009.0], [94.8, 6009.0], [94.9, 6011.0], [95.0, 6012.0], [95.1, 6013.0], [95.2, 6022.0], [95.3, 6023.0], [95.4, 6024.0], [95.5, 6026.0], [95.6, 6027.0], [95.7, 6031.0], [95.8, 6031.0], [95.9, 6034.0], [96.0, 6035.0], [96.1, 6036.0], [96.2, 6036.0], [96.3, 6036.0], [96.4, 6037.0], [96.5, 6040.0], [96.6, 6040.0], [96.7, 6043.0], [96.8, 6043.0], [96.9, 6043.0], [97.0, 6045.0], [97.1, 6046.0], [97.2, 6048.0], [97.3, 6056.0], [97.4, 6059.0], [97.5, 6066.0], [97.6, 6068.0], [97.7, 6077.0], [97.8, 6078.0], [97.9, 6079.0], [98.0, 6079.0], [98.1, 6081.0], [98.2, 6082.0], [98.3, 6084.0], [98.4, 6090.0], [98.5, 6094.0], [98.6, 6094.0], [98.7, 6095.0], [98.8, 6096.0], [98.9, 6096.0], [99.0, 6097.0], [99.1, 6097.0], [99.2, 6101.0], [99.3, 6103.0], [99.4, 6103.0], [99.5, 6107.0], [99.6, 6108.0], [99.7, 6116.0], [99.8, 6118.0], [99.9, 6125.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1000.0, "maxY": 64.0, "series": [{"data": [[1000.0, 1.0], [1200.0, 2.0], [1400.0, 1.0], [1500.0, 4.0], [1600.0, 1.0], [1800.0, 1.0], [2000.0, 3.0], [2100.0, 2.0], [2300.0, 5.0], [2200.0, 5.0], [2400.0, 4.0], [2500.0, 4.0], [2600.0, 4.0], [2800.0, 2.0], [2900.0, 9.0], [3000.0, 1.0], [3100.0, 11.0], [3200.0, 9.0], [3300.0, 16.0], [3400.0, 6.0], [3500.0, 6.0], [3600.0, 17.0], [3700.0, 24.0], [3800.0, 17.0], [3900.0, 21.0], [4000.0, 31.0], [4100.0, 32.0], [4200.0, 27.0], [4300.0, 34.0], [4400.0, 41.0], [4500.0, 50.0], [4600.0, 63.0], [4700.0, 42.0], [4800.0, 27.0], [4900.0, 22.0], [5000.0, 33.0], [5100.0, 21.0], [5200.0, 26.0], [5300.0, 29.0], [5400.0, 28.0], [5500.0, 28.0], [5600.0, 48.0], [5700.0, 64.0], [5800.0, 54.0], [5900.0, 64.0], [6000.0, 52.0], [6100.0, 8.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 996.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 996.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 504.7660000000002, "minX": 1.75566498E12, "maxY": 504.7660000000002, "series": [{"data": [[1.75566498E12, 504.7660000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566498E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1228.0, "minX": 1.0, "maxY": 6108.0, "series": [{"data": [[8.0, 5840.0], [9.0, 6049.333333333333], [10.0, 5644.6], [14.0, 5984.0], [16.0, 5983.4], [20.0, 5780.0], [24.0, 5810.0], [25.0, 5897.714285714285], [27.0, 5961.0], [28.0, 6034.5], [29.0, 5516.0], [32.0, 5888.0], [35.0, 5958.0], [36.0, 3791.0], [39.0, 4742.0], [42.0, 5822.75], [45.0, 5987.666666666667], [44.0, 6082.0], [47.0, 5615.5], [46.0, 5890.0], [52.0, 5736.0], [63.0, 5867.0], [67.0, 5820.666666666667], [66.0, 5123.666666666667], [65.0, 5807.0], [71.0, 3825.0], [70.0, 5672.333333333333], [69.0, 6030.333333333333], [68.0, 6079.0], [72.0, 5798.0], [76.0, 5843.0], [82.0, 4776.0], [81.0, 5672.0], [80.0, 5798.0], [85.0, 5778.833333333333], [91.0, 6096.0], [88.0, 5700.0], [95.0, 5861.0], [93.0, 5639.0], [92.0, 5970.0], [99.0, 5748.0], [98.0, 5633.0], [97.0, 5812.0], [102.0, 5401.5], [105.0, 5831.0], [111.0, 5557.0], [109.0, 5672.0], [114.0, 5470.6], [113.0, 6096.0], [112.0, 6036.0], [118.0, 5435.25], [117.0, 5943.0], [116.0, 6008.0], [120.0, 5386.333333333333], [127.0, 5771.0], [126.0, 5416.5], [125.0, 6097.0], [135.0, 5344.0], [134.0, 5846.0], [130.0, 5587.0], [128.0, 5047.0], [142.0, 6077.0], [141.0, 5521.0], [138.0, 5648.0], [137.0, 5709.0], [149.0, 5390.5], [148.0, 5935.0], [147.0, 4140.0], [146.0, 6094.0], [158.0, 5515.166666666667], [156.0, 4181.666666666667], [166.0, 5745.0], [165.0, 5450.0], [164.0, 5859.0], [160.0, 5261.0], [175.0, 5927.0], [173.0, 5000.0], [170.0, 5253.333333333333], [169.0, 6031.0], [183.0, 5417.5], [179.0, 5885.5], [188.0, 5451.0], [187.0, 4140.0], [186.0, 6043.0], [185.0, 5811.0], [199.0, 4685.0], [196.0, 5603.0], [193.0, 5933.0], [192.0, 4764.2], [207.0, 6012.0], [206.0, 5986.5], [205.0, 4628.0], [215.0, 4757.0], [214.0, 5452.0], [211.0, 4370.0], [210.0, 5928.0], [219.0, 5899.0], [218.0, 5839.5], [216.0, 5342.0], [230.0, 5889.0], [227.0, 5406.0], [226.0, 5921.0], [224.0, 5030.2], [239.0, 5971.0], [235.0, 5948.5], [246.0, 5751.75], [242.0, 5797.714285714286], [241.0, 6022.0], [240.0, 5866.5], [252.0, 5895.0], [251.0, 5819.333333333333], [270.0, 5933.0], [269.0, 5376.0], [267.0, 5618.0], [265.0, 4820.5], [259.0, 5205.0], [258.0, 5725.666666666667], [256.0, 3970.0], [285.0, 5811.0], [282.0, 4770.0], [280.0, 5717.0], [279.0, 5435.0], [275.0, 5854.0], [273.0, 5963.0], [272.0, 3699.0], [302.0, 5871.0], [298.0, 5983.0], [297.0, 4075.0], [296.0, 5225.333333333334], [293.0, 5696.0], [292.0, 4947.666666666667], [291.0, 4684.0], [319.0, 4712.0], [318.0, 5602.666666666667], [310.0, 5570.0], [309.0, 5360.5], [304.0, 5857.0], [334.0, 5649.5], [335.0, 4614.5], [332.0, 5980.0], [331.0, 5740.0], [329.0, 5926.0], [328.0, 5635.25], [324.0, 5419.0], [323.0, 5038.333333333333], [320.0, 5680.0], [351.0, 3632.0], [349.0, 5906.0], [347.0, 5820.2], [342.0, 5774.0], [340.0, 5888.0], [338.0, 5246.5], [367.0, 5724.0], [365.0, 5536.5], [362.0, 5798.0], [361.0, 5164.5], [357.0, 5610.0], [356.0, 5131.333333333333], [353.0, 5007.75], [380.0, 5872.5], [382.0, 4620.0], [383.0, 4557.0], [381.0, 5871.0], [378.0, 5181.0], [377.0, 5087.0], [375.0, 5615.0], [370.0, 5948.0], [369.0, 4454.0], [373.0, 5899.0], [372.0, 4104.5], [398.0, 5581.0], [399.0, 5705.0], [397.0, 5719.0], [396.0, 4870.666666666667], [395.0, 5683.0], [393.0, 4876.0], [392.0, 5589.0], [389.0, 5286.0], [388.0, 5083.2], [414.0, 5477.0], [415.0, 5094.0], [413.0, 5101.0], [412.0, 4467.0], [411.0, 5784.0], [410.0, 5760.0], [409.0, 5557.5], [407.0, 5523.0], [401.0, 5484.0], [400.0, 5227.0], [403.0, 5601.0], [402.0, 4872.0], [406.0, 5782.0], [405.0, 4450.0], [404.0, 5353.0], [419.0, 5405.0], [430.0, 5389.666666666667], [431.0, 4936.0], [429.0, 4377.0], [418.0, 5158.0], [417.0, 5302.0], [416.0, 4321.0], [425.0, 5353.0], [424.0, 5695.0], [423.0, 5119.0], [422.0, 5507.0], [421.0, 4667.0], [420.0, 5130.0], [446.0, 5499.5], [447.0, 5504.0], [444.0, 5595.0], [435.0, 5654.0], [434.0, 3957.0], [433.0, 5611.0], [432.0, 5347.0], [443.0, 5586.0], [442.0, 5241.0], [441.0, 5436.0], [440.0, 5493.0], [439.0, 3730.0], [437.0, 5464.5], [451.0, 5034.0], [461.0, 4592.0], [460.0, 5626.0], [459.0, 5233.5], [457.0, 5354.5], [455.0, 5631.0], [454.0, 5108.0], [453.0, 5625.0], [452.0, 3908.0], [450.0, 5237.0], [449.0, 5080.0], [467.0, 5054.0], [479.0, 5440.0], [476.0, 4960.0], [474.0, 5189.0], [473.0, 4338.0], [471.0, 5441.5], [470.0, 5465.0], [469.0, 4323.0], [466.0, 5097.0], [465.0, 5142.0], [483.0, 4214.0], [493.0, 5133.0], [494.0, 5008.0], [492.0, 5115.666666666667], [482.0, 4986.0], [481.0, 5463.0], [480.0, 5193.0], [489.0, 5145.0], [488.0, 5139.0], [487.0, 5200.0], [486.0, 4867.0], [485.0, 5067.0], [484.0, 5547.0], [510.0, 5050.0], [511.0, 4906.0], [509.0, 5125.5], [507.0, 3848.0], [506.0, 5290.0], [505.0, 5152.75], [501.0, 5276.0], [500.0, 5119.5], [498.0, 5506.0], [497.0, 5283.666666666667], [540.0, 4419.375], [532.0, 4889.0], [531.0, 4874.666666666667], [528.0, 4348.75], [524.0, 5365.0], [512.0, 5072.0], [514.0, 5172.0], [513.0, 5254.0], [523.0, 4528.0], [520.0, 4807.25], [516.0, 5388.0], [515.0, 4742.0], [570.0, 5162.0], [569.0, 4857.6], [564.0, 5071.0], [563.0, 4706.333333333333], [557.0, 5007.833333333333], [556.0, 4836.666666666667], [548.0, 4893.375], [599.0, 4916.875], [591.0, 4771.111111111111], [582.0, 5205.0], [581.0, 4889.25], [577.0, 4719.571428571428], [625.0, 4860.75], [638.0, 4502.5], [639.0, 4429.0], [624.0, 4898.0], [636.0, 4722.0], [635.0, 3701.0], [633.0, 4400.0], [620.0, 4593.5], [611.0, 4661.166666666667], [612.0, 4632.0], [630.0, 5050.5], [628.0, 4962.0], [627.0, 4701.0], [666.0, 4667.75], [662.0, 4194.5], [658.0, 4549.333333333333], [657.0, 4514.5], [653.0, 4631.333333333333], [650.0, 4467.8], [645.0, 4589.5], [697.0, 4592.111111111112], [688.0, 4552.888888888889], [685.0, 4131.0], [684.0, 4683.0], [677.0, 4439.363636363636], [711.0, 3417.0], [730.0, 3324.0], [729.0, 4713.0], [708.0, 4291.5], [704.0, 4492.0], [726.0, 4325.2], [722.0, 4135.0], [720.0, 4193.0], [719.0, 4714.5], [717.0, 4346.8], [715.0, 4723.0], [712.0, 4540.0], [738.0, 4566.666666666667], [796.0, 3127.5], [798.0, 4654.5], [795.0, 3406.0], [794.0, 4702.0], [793.0, 4357.0], [773.0, 4426.0], [775.0, 4386.666666666667], [770.0, 4296.0], [772.0, 4340.5], [789.0, 3661.0], [786.0, 4641.0], [785.0, 4275.5], [783.0, 4447.333333333333], [782.0, 4505.0], [781.0, 3583.5], [779.0, 3967.0], [776.0, 3907.5], [828.0, 4621.5], [831.0, 4257.375], [827.0, 4036.6666666666665], [826.0, 4044.75], [822.0, 4487.666666666667], [820.0, 3920.5], [819.0, 3690.0], [818.0, 4016.5], [813.0, 4508.5], [800.0, 3384.0], [802.0, 4091.8], [801.0, 4265.666666666667], [804.0, 4073.3333333333335], [803.0, 4330.0], [806.0, 4485.0], [805.0, 4491.0], [812.0, 4616.0], [811.0, 4060.0], [810.0, 4655.0], [808.0, 4645.0], [850.0, 4509.5], [863.0, 4419.0], [860.0, 4509.333333333333], [858.0, 4061.0], [857.0, 4631.0], [846.0, 4057.583333333333], [839.0, 4135.0], [845.0, 4533.0], [841.0, 3860.0], [855.0, 4161.5], [853.0, 4114.0], [852.0, 4296.0], [848.0, 4060.0], [890.0, 4484.0], [895.0, 3245.0], [894.0, 4243.307692307692], [891.0, 3981.0], [888.0, 4549.0], [867.0, 4475.0], [866.0, 3349.0], [865.0, 4235.0], [864.0, 4571.0], [878.0, 4263.000000000001], [877.0, 4085.0], [876.0, 4050.0], [874.0, 4063.0], [873.0, 4623.0], [914.0, 3905.0], [926.0, 4324.0], [925.0, 3801.5], [921.0, 4022.0], [903.0, 4568.0], [901.0, 3242.0], [900.0, 3677.0], [897.0, 4162.0], [917.0, 4011.0], [916.0, 4012.0], [915.0, 3921.0], [913.0, 3944.0], [909.0, 3884.5714285714284], [907.0, 4256.0], [906.0, 4222.0], [958.0, 2992.0], [959.0, 2251.0], [945.0, 3669.0], [944.0, 3340.0], [957.0, 3142.0], [956.0, 2212.0], [955.0, 3051.5], [954.0, 3140.5], [940.0, 3483.3333333333335], [935.0, 3910.5], [933.0, 3727.0], [932.0, 3709.0], [929.0, 3926.5], [928.0, 4184.0], [937.0, 4017.0], [951.0, 3353.5], [949.0, 3204.0], [948.0, 2226.0], [947.0, 3539.0], [988.0, 2477.0], [979.0, 2584.0], [990.0, 1228.0], [986.0, 2399.0], [985.0, 2057.5], [975.0, 3298.0], [960.0, 3095.0], [962.0, 2138.0], [961.0, 3372.0], [964.0, 2927.0], [963.0, 3468.0], [966.0, 3334.0], [965.0, 2105.0], [971.0, 2596.5], [969.0, 3126.0], [968.0, 2491.5], [983.0, 2432.0], [982.0, 1501.0], [981.0, 1558.5], [978.0, 2416.0], [977.0, 1677.0], [976.0, 2833.25], [1000.0, 2090.375], [993.0, 2439.5], [1.0, 6108.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[504.7649999999997, 4809.167000000007]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11533.333333333334, "minX": 1.75566498E12, "maxY": 7195238.783333333, "series": [{"data": [[1.75566498E12, 11533.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75566498E12, 7195238.783333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566498E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4809.167000000007, "minX": 1.75566498E12, "maxY": 4809.167000000007, "series": [{"data": [[1.75566498E12, 4809.167000000007]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566498E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4809.12, "minX": 1.75566498E12, "maxY": 4809.12, "series": [{"data": [[1.75566498E12, 4809.12]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566498E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1975.9800000000002, "minX": 1.75566498E12, "maxY": 1975.9800000000002, "series": [{"data": [[1.75566498E12, 1975.9800000000002]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566498E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1035.0, "minX": 1.75566498E12, "maxY": 6125.0, "series": [{"data": [[1.75566498E12, 6125.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75566498E12, 5937.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75566498E12, 6096.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75566498E12, 6011.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75566498E12, 1035.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75566498E12, 4810.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566498E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2344.5, "minX": 26.0, "maxY": 5519.5, "series": [{"data": [[37.0, 3142.0], [317.0, 4400.0], [620.0, 5519.5], [26.0, 2344.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 620.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2344.5, "minX": 26.0, "maxY": 5519.5, "series": [{"data": [[37.0, 3142.0], [317.0, 4400.0], [620.0, 5519.5], [26.0, 2344.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 620.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75566498E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75566498E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566498E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75566498E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75566498E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566498E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75566498E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75566498E12, 16.666666666666668]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566498E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75566498E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75566498E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566498E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

