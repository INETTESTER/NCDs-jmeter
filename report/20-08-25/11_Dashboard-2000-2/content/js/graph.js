/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 6384.0, "series": [{"data": [[0.0, 25.0], [0.1, 26.0], [0.2, 26.0], [0.3, 27.0], [0.4, 27.0], [0.5, 27.0], [0.6, 28.0], [0.7, 28.0], [0.8, 28.0], [0.9, 28.0], [1.0, 28.0], [1.1, 29.0], [1.2, 29.0], [1.3, 29.0], [1.4, 29.0], [1.5, 29.0], [1.6, 29.0], [1.7, 29.0], [1.8, 30.0], [1.9, 30.0], [2.0, 30.0], [2.1, 30.0], [2.2, 30.0], [2.3, 30.0], [2.4, 30.0], [2.5, 30.0], [2.6, 30.0], [2.7, 30.0], [2.8, 30.0], [2.9, 30.0], [3.0, 31.0], [3.1, 31.0], [3.2, 31.0], [3.3, 31.0], [3.4, 31.0], [3.5, 31.0], [3.6, 31.0], [3.7, 31.0], [3.8, 31.0], [3.9, 31.0], [4.0, 31.0], [4.1, 31.0], [4.2, 31.0], [4.3, 31.0], [4.4, 31.0], [4.5, 32.0], [4.6, 32.0], [4.7, 32.0], [4.8, 32.0], [4.9, 32.0], [5.0, 32.0], [5.1, 32.0], [5.2, 32.0], [5.3, 32.0], [5.4, 32.0], [5.5, 32.0], [5.6, 32.0], [5.7, 32.0], [5.8, 32.0], [5.9, 32.0], [6.0, 33.0], [6.1, 33.0], [6.2, 33.0], [6.3, 33.0], [6.4, 33.0], [6.5, 33.0], [6.6, 33.0], [6.7, 33.0], [6.8, 33.0], [6.9, 34.0], [7.0, 34.0], [7.1, 34.0], [7.2, 34.0], [7.3, 34.0], [7.4, 34.0], [7.5, 34.0], [7.6, 34.0], [7.7, 34.0], [7.8, 34.0], [7.9, 34.0], [8.0, 34.0], [8.1, 34.0], [8.2, 35.0], [8.3, 35.0], [8.4, 35.0], [8.5, 35.0], [8.6, 35.0], [8.7, 35.0], [8.8, 35.0], [8.9, 35.0], [9.0, 35.0], [9.1, 35.0], [9.2, 35.0], [9.3, 35.0], [9.4, 35.0], [9.5, 36.0], [9.6, 36.0], [9.7, 36.0], [9.8, 36.0], [9.9, 36.0], [10.0, 36.0], [10.1, 36.0], [10.2, 36.0], [10.3, 37.0], [10.4, 37.0], [10.5, 37.0], [10.6, 37.0], [10.7, 37.0], [10.8, 37.0], [10.9, 37.0], [11.0, 37.0], [11.1, 37.0], [11.2, 38.0], [11.3, 38.0], [11.4, 38.0], [11.5, 38.0], [11.6, 38.0], [11.7, 38.0], [11.8, 38.0], [11.9, 38.0], [12.0, 38.0], [12.1, 38.0], [12.2, 39.0], [12.3, 39.0], [12.4, 39.0], [12.5, 39.0], [12.6, 39.0], [12.7, 39.0], [12.8, 39.0], [12.9, 39.0], [13.0, 39.0], [13.1, 40.0], [13.2, 40.0], [13.3, 40.0], [13.4, 40.0], [13.5, 40.0], [13.6, 40.0], [13.7, 40.0], [13.8, 40.0], [13.9, 40.0], [14.0, 40.0], [14.1, 40.0], [14.2, 40.0], [14.3, 40.0], [14.4, 40.0], [14.5, 40.0], [14.6, 40.0], [14.7, 40.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 42.0], [16.5, 43.0], [16.6, 43.0], [16.7, 43.0], [16.8, 43.0], [16.9, 43.0], [17.0, 44.0], [17.1, 44.0], [17.2, 44.0], [17.3, 44.0], [17.4, 44.0], [17.5, 44.0], [17.6, 44.0], [17.7, 45.0], [17.8, 45.0], [17.9, 45.0], [18.0, 45.0], [18.1, 45.0], [18.2, 45.0], [18.3, 46.0], [18.4, 46.0], [18.5, 46.0], [18.6, 46.0], [18.7, 46.0], [18.8, 46.0], [18.9, 47.0], [19.0, 47.0], [19.1, 47.0], [19.2, 47.0], [19.3, 47.0], [19.4, 47.0], [19.5, 48.0], [19.6, 48.0], [19.7, 48.0], [19.8, 49.0], [19.9, 49.0], [20.0, 49.0], [20.1, 50.0], [20.2, 50.0], [20.3, 50.0], [20.4, 50.0], [20.5, 51.0], [20.6, 51.0], [20.7, 52.0], [20.8, 53.0], [20.9, 53.0], [21.0, 54.0], [21.1, 55.0], [21.2, 55.0], [21.3, 55.0], [21.4, 55.0], [21.5, 56.0], [21.6, 56.0], [21.7, 57.0], [21.8, 57.0], [21.9, 58.0], [22.0, 59.0], [22.1, 59.0], [22.2, 59.0], [22.3, 59.0], [22.4, 59.0], [22.5, 60.0], [22.6, 61.0], [22.7, 62.0], [22.8, 62.0], [22.9, 62.0], [23.0, 63.0], [23.1, 63.0], [23.2, 64.0], [23.3, 64.0], [23.4, 64.0], [23.5, 64.0], [23.6, 65.0], [23.7, 65.0], [23.8, 65.0], [23.9, 67.0], [24.0, 69.0], [24.1, 69.0], [24.2, 69.0], [24.3, 70.0], [24.4, 71.0], [24.5, 73.0], [24.6, 74.0], [24.7, 75.0], [24.8, 77.0], [24.9, 78.0], [25.0, 84.0], [25.1, 90.0], [25.2, 92.0], [25.3, 93.0], [25.4, 94.0], [25.5, 98.0], [25.6, 102.0], [25.7, 109.0], [25.8, 110.0], [25.9, 120.0], [26.0, 121.0], [26.1, 127.0], [26.2, 129.0], [26.3, 131.0], [26.4, 135.0], [26.5, 148.0], [26.6, 165.0], [26.7, 181.0], [26.8, 189.0], [26.9, 191.0], [27.0, 198.0], [27.1, 205.0], [27.2, 211.0], [27.3, 217.0], [27.4, 229.0], [27.5, 238.0], [27.6, 240.0], [27.7, 251.0], [27.8, 254.0], [27.9, 268.0], [28.0, 270.0], [28.1, 274.0], [28.2, 286.0], [28.3, 303.0], [28.4, 309.0], [28.5, 324.0], [28.6, 326.0], [28.7, 328.0], [28.8, 331.0], [28.9, 338.0], [29.0, 347.0], [29.1, 348.0], [29.2, 374.0], [29.3, 383.0], [29.4, 391.0], [29.5, 395.0], [29.6, 396.0], [29.7, 408.0], [29.8, 409.0], [29.9, 416.0], [30.0, 430.0], [30.1, 432.0], [30.2, 449.0], [30.3, 452.0], [30.4, 484.0], [30.5, 485.0], [30.6, 520.0], [30.7, 528.0], [30.8, 536.0], [30.9, 549.0], [31.0, 556.0], [31.1, 562.0], [31.2, 622.0], [31.3, 633.0], [31.4, 639.0], [31.5, 654.0], [31.6, 784.0], [31.7, 790.0], [31.8, 801.0], [31.9, 813.0], [32.0, 828.0], [32.1, 847.0], [32.2, 858.0], [32.3, 913.0], [32.4, 931.0], [32.5, 958.0], [32.6, 970.0], [32.7, 978.0], [32.8, 994.0], [32.9, 995.0], [33.0, 999.0], [33.1, 1004.0], [33.2, 1016.0], [33.3, 1025.0], [33.4, 1043.0], [33.5, 1050.0], [33.6, 1055.0], [33.7, 1060.0], [33.8, 1074.0], [33.9, 1098.0], [34.0, 1103.0], [34.1, 1120.0], [34.2, 1134.0], [34.3, 1144.0], [34.4, 1157.0], [34.5, 1182.0], [34.6, 1200.0], [34.7, 1202.0], [34.8, 1212.0], [34.9, 1216.0], [35.0, 1227.0], [35.1, 1237.0], [35.2, 1241.0], [35.3, 1244.0], [35.4, 1245.0], [35.5, 1248.0], [35.6, 1251.0], [35.7, 1257.0], [35.8, 1262.0], [35.9, 1266.0], [36.0, 1270.0], [36.1, 1273.0], [36.2, 1278.0], [36.3, 1282.0], [36.4, 1283.0], [36.5, 1287.0], [36.6, 1295.0], [36.7, 1297.0], [36.8, 1299.0], [36.9, 1302.0], [37.0, 1307.0], [37.1, 1312.0], [37.2, 1326.0], [37.3, 1332.0], [37.4, 1337.0], [37.5, 1338.0], [37.6, 1350.0], [37.7, 1362.0], [37.8, 1370.0], [37.9, 1380.0], [38.0, 1389.0], [38.1, 1430.0], [38.2, 1443.0], [38.3, 1495.0], [38.4, 1523.0], [38.5, 1570.0], [38.6, 1577.0], [38.7, 1591.0], [38.8, 1623.0], [38.9, 1626.0], [39.0, 1627.0], [39.1, 1642.0], [39.2, 1646.0], [39.3, 1655.0], [39.4, 1673.0], [39.5, 1699.0], [39.6, 1724.0], [39.7, 1732.0], [39.8, 1743.0], [39.9, 1745.0], [40.0, 1748.0], [40.1, 1763.0], [40.2, 1769.0], [40.3, 1772.0], [40.4, 1781.0], [40.5, 1795.0], [40.6, 1805.0], [40.7, 1813.0], [40.8, 1824.0], [40.9, 1829.0], [41.0, 1831.0], [41.1, 1836.0], [41.2, 1847.0], [41.3, 1850.0], [41.4, 1852.0], [41.5, 1855.0], [41.6, 1857.0], [41.7, 1871.0], [41.8, 1879.0], [41.9, 1881.0], [42.0, 1887.0], [42.1, 1889.0], [42.2, 1896.0], [42.3, 1901.0], [42.4, 1902.0], [42.5, 1902.0], [42.6, 1907.0], [42.7, 1909.0], [42.8, 1910.0], [42.9, 1915.0], [43.0, 1919.0], [43.1, 1928.0], [43.2, 1946.0], [43.3, 1953.0], [43.4, 1959.0], [43.5, 1965.0], [43.6, 1967.0], [43.7, 1970.0], [43.8, 1981.0], [43.9, 1983.0], [44.0, 1999.0], [44.1, 2009.0], [44.2, 2014.0], [44.3, 2025.0], [44.4, 2026.0], [44.5, 2050.0], [44.6, 2056.0], [44.7, 2059.0], [44.8, 2065.0], [44.9, 2082.0], [45.0, 2086.0], [45.1, 2089.0], [45.2, 2094.0], [45.3, 2095.0], [45.4, 2104.0], [45.5, 2110.0], [45.6, 2116.0], [45.7, 2166.0], [45.8, 2171.0], [45.9, 2176.0], [46.0, 2183.0], [46.1, 2197.0], [46.2, 2205.0], [46.3, 2210.0], [46.4, 2235.0], [46.5, 2257.0], [46.6, 2266.0], [46.7, 2273.0], [46.8, 2277.0], [46.9, 2287.0], [47.0, 2299.0], [47.1, 2311.0], [47.2, 2320.0], [47.3, 2352.0], [47.4, 2377.0], [47.5, 2395.0], [47.6, 2403.0], [47.7, 2407.0], [47.8, 2436.0], [47.9, 2462.0], [48.0, 2481.0], [48.1, 2492.0], [48.2, 2494.0], [48.3, 2497.0], [48.4, 2498.0], [48.5, 2503.0], [48.6, 2516.0], [48.7, 2523.0], [48.8, 2533.0], [48.9, 2534.0], [49.0, 2561.0], [49.1, 2594.0], [49.2, 2595.0], [49.3, 2597.0], [49.4, 2605.0], [49.5, 2608.0], [49.6, 2625.0], [49.7, 2633.0], [49.8, 2646.0], [49.9, 2656.0], [50.0, 2663.0], [50.1, 2666.0], [50.2, 2671.0], [50.3, 2676.0], [50.4, 2678.0], [50.5, 2693.0], [50.6, 2694.0], [50.7, 2698.0], [50.8, 2712.0], [50.9, 2723.0], [51.0, 2725.0], [51.1, 2741.0], [51.2, 2744.0], [51.3, 2760.0], [51.4, 2766.0], [51.5, 2777.0], [51.6, 2791.0], [51.7, 2798.0], [51.8, 2803.0], [51.9, 2811.0], [52.0, 2817.0], [52.1, 2826.0], [52.2, 2834.0], [52.3, 2836.0], [52.4, 2846.0], [52.5, 2847.0], [52.6, 2848.0], [52.7, 2858.0], [52.8, 2860.0], [52.9, 2864.0], [53.0, 2868.0], [53.1, 2874.0], [53.2, 2876.0], [53.3, 2878.0], [53.4, 2879.0], [53.5, 2882.0], [53.6, 2887.0], [53.7, 2890.0], [53.8, 2893.0], [53.9, 2897.0], [54.0, 2901.0], [54.1, 2911.0], [54.2, 2917.0], [54.3, 2918.0], [54.4, 2924.0], [54.5, 2925.0], [54.6, 2929.0], [54.7, 2932.0], [54.8, 2945.0], [54.9, 2951.0], [55.0, 2955.0], [55.1, 2957.0], [55.2, 2959.0], [55.3, 2962.0], [55.4, 2964.0], [55.5, 2966.0], [55.6, 2968.0], [55.7, 2976.0], [55.8, 2979.0], [55.9, 2994.0], [56.0, 2998.0], [56.1, 3000.0], [56.2, 3006.0], [56.3, 3009.0], [56.4, 3009.0], [56.5, 3010.0], [56.6, 3010.0], [56.7, 3016.0], [56.8, 3022.0], [56.9, 3026.0], [57.0, 3030.0], [57.1, 3031.0], [57.2, 3036.0], [57.3, 3037.0], [57.4, 3038.0], [57.5, 3039.0], [57.6, 3042.0], [57.7, 3045.0], [57.8, 3046.0], [57.9, 3048.0], [58.0, 3050.0], [58.1, 3051.0], [58.2, 3053.0], [58.3, 3057.0], [58.4, 3058.0], [58.5, 3061.0], [58.6, 3064.0], [58.7, 3067.0], [58.8, 3067.0], [58.9, 3073.0], [59.0, 3075.0], [59.1, 3076.0], [59.2, 3078.0], [59.3, 3079.0], [59.4, 3081.0], [59.5, 3083.0], [59.6, 3084.0], [59.7, 3087.0], [59.8, 3094.0], [59.9, 3095.0], [60.0, 3095.0], [60.1, 3104.0], [60.2, 3111.0], [60.3, 3115.0], [60.4, 3116.0], [60.5, 3116.0], [60.6, 3123.0], [60.7, 3125.0], [60.8, 3128.0], [60.9, 3130.0], [61.0, 3139.0], [61.1, 3142.0], [61.2, 3147.0], [61.3, 3149.0], [61.4, 3151.0], [61.5, 3162.0], [61.6, 3170.0], [61.7, 3185.0], [61.8, 3189.0], [61.9, 3195.0], [62.0, 3198.0], [62.1, 3202.0], [62.2, 3217.0], [62.3, 3221.0], [62.4, 3225.0], [62.5, 3231.0], [62.6, 3233.0], [62.7, 3238.0], [62.8, 3243.0], [62.9, 3252.0], [63.0, 3255.0], [63.1, 3257.0], [63.2, 3263.0], [63.3, 3271.0], [63.4, 3278.0], [63.5, 3281.0], [63.6, 3287.0], [63.7, 3296.0], [63.8, 3307.0], [63.9, 3311.0], [64.0, 3312.0], [64.1, 3316.0], [64.2, 3332.0], [64.3, 3336.0], [64.4, 3355.0], [64.5, 3376.0], [64.6, 3395.0], [64.7, 3396.0], [64.8, 3398.0], [64.9, 3406.0], [65.0, 3410.0], [65.1, 3414.0], [65.2, 3420.0], [65.3, 3427.0], [65.4, 3435.0], [65.5, 3442.0], [65.6, 3444.0], [65.7, 3458.0], [65.8, 3463.0], [65.9, 3465.0], [66.0, 3470.0], [66.1, 3470.0], [66.2, 3471.0], [66.3, 3471.0], [66.4, 3474.0], [66.5, 3476.0], [66.6, 3476.0], [66.7, 3478.0], [66.8, 3482.0], [66.9, 3483.0], [67.0, 3487.0], [67.1, 3488.0], [67.2, 3493.0], [67.3, 3494.0], [67.4, 3499.0], [67.5, 3503.0], [67.6, 3518.0], [67.7, 3535.0], [67.8, 3554.0], [67.9, 3580.0], [68.0, 3580.0], [68.1, 3588.0], [68.2, 3590.0], [68.3, 3598.0], [68.4, 3599.0], [68.5, 3601.0], [68.6, 3601.0], [68.7, 3602.0], [68.8, 3613.0], [68.9, 3635.0], [69.0, 3636.0], [69.1, 3636.0], [69.2, 3671.0], [69.3, 3674.0], [69.4, 3681.0], [69.5, 3696.0], [69.6, 3697.0], [69.7, 3713.0], [69.8, 3720.0], [69.9, 3729.0], [70.0, 3736.0], [70.1, 3739.0], [70.2, 3748.0], [70.3, 3751.0], [70.4, 3756.0], [70.5, 3758.0], [70.6, 3763.0], [70.7, 3767.0], [70.8, 3785.0], [70.9, 3807.0], [71.0, 3810.0], [71.1, 3817.0], [71.2, 3838.0], [71.3, 3840.0], [71.4, 3852.0], [71.5, 3857.0], [71.6, 3871.0], [71.7, 3879.0], [71.8, 3884.0], [71.9, 3901.0], [72.0, 3902.0], [72.1, 3903.0], [72.2, 3944.0], [72.3, 3952.0], [72.4, 3964.0], [72.5, 3966.0], [72.6, 3970.0], [72.7, 3998.0], [72.8, 4002.0], [72.9, 4007.0], [73.0, 4026.0], [73.1, 4049.0], [73.2, 4055.0], [73.3, 4064.0], [73.4, 4077.0], [73.5, 4081.0], [73.6, 4087.0], [73.7, 4093.0], [73.8, 4109.0], [73.9, 4125.0], [74.0, 4135.0], [74.1, 4141.0], [74.2, 4156.0], [74.3, 4161.0], [74.4, 4163.0], [74.5, 4166.0], [74.6, 4168.0], [74.7, 4176.0], [74.8, 4183.0], [74.9, 4192.0], [75.0, 4201.0], [75.1, 4207.0], [75.2, 4209.0], [75.3, 4214.0], [75.4, 4218.0], [75.5, 4228.0], [75.6, 4230.0], [75.7, 4245.0], [75.8, 4251.0], [75.9, 4270.0], [76.0, 4274.0], [76.1, 4279.0], [76.2, 4283.0], [76.3, 4284.0], [76.4, 4289.0], [76.5, 4295.0], [76.6, 4302.0], [76.7, 4307.0], [76.8, 4333.0], [76.9, 4344.0], [77.0, 4354.0], [77.1, 4359.0], [77.2, 4360.0], [77.3, 4364.0], [77.4, 4389.0], [77.5, 4401.0], [77.6, 4403.0], [77.7, 4404.0], [77.8, 4408.0], [77.9, 4413.0], [78.0, 4418.0], [78.1, 4418.0], [78.2, 4429.0], [78.3, 4439.0], [78.4, 4450.0], [78.5, 4450.0], [78.6, 4460.0], [78.7, 4463.0], [78.8, 4467.0], [78.9, 4468.0], [79.0, 4473.0], [79.1, 4476.0], [79.2, 4500.0], [79.3, 4507.0], [79.4, 4509.0], [79.5, 4517.0], [79.6, 4523.0], [79.7, 4531.0], [79.8, 4538.0], [79.9, 4546.0], [80.0, 4552.0], [80.1, 4557.0], [80.2, 4563.0], [80.3, 4564.0], [80.4, 4569.0], [80.5, 4574.0], [80.6, 4583.0], [80.7, 4595.0], [80.8, 4596.0], [80.9, 4603.0], [81.0, 4608.0], [81.1, 4621.0], [81.2, 4628.0], [81.3, 4641.0], [81.4, 4648.0], [81.5, 4658.0], [81.6, 4662.0], [81.7, 4676.0], [81.8, 4688.0], [81.9, 4689.0], [82.0, 4690.0], [82.1, 4703.0], [82.2, 4709.0], [82.3, 4722.0], [82.4, 4749.0], [82.5, 4776.0], [82.6, 4793.0], [82.7, 4817.0], [82.8, 4841.0], [82.9, 4842.0], [83.0, 4857.0], [83.1, 4868.0], [83.2, 4905.0], [83.3, 4909.0], [83.4, 4914.0], [83.5, 4917.0], [83.6, 4927.0], [83.7, 4937.0], [83.8, 4949.0], [83.9, 5013.0], [84.0, 5031.0], [84.1, 5062.0], [84.2, 5123.0], [84.3, 5157.0], [84.4, 5159.0], [84.5, 5161.0], [84.6, 5182.0], [84.7, 5187.0], [84.8, 5192.0], [84.9, 5197.0], [85.0, 5199.0], [85.1, 5205.0], [85.2, 5211.0], [85.3, 5214.0], [85.4, 5218.0], [85.5, 5229.0], [85.6, 5230.0], [85.7, 5237.0], [85.8, 5238.0], [85.9, 5240.0], [86.0, 5246.0], [86.1, 5249.0], [86.2, 5251.0], [86.3, 5254.0], [86.4, 5260.0], [86.5, 5261.0], [86.6, 5266.0], [86.7, 5274.0], [86.8, 5283.0], [86.9, 5286.0], [87.0, 5292.0], [87.1, 5292.0], [87.2, 5311.0], [87.3, 5313.0], [87.4, 5317.0], [87.5, 5322.0], [87.6, 5328.0], [87.7, 5330.0], [87.8, 5334.0], [87.9, 5336.0], [88.0, 5337.0], [88.1, 5345.0], [88.2, 5348.0], [88.3, 5354.0], [88.4, 5357.0], [88.5, 5369.0], [88.6, 5373.0], [88.7, 5379.0], [88.8, 5383.0], [88.9, 5396.0], [89.0, 5413.0], [89.1, 5420.0], [89.2, 5429.0], [89.3, 5441.0], [89.4, 5446.0], [89.5, 5450.0], [89.6, 5460.0], [89.7, 5464.0], [89.8, 5474.0], [89.9, 5478.0], [90.0, 5481.0], [90.1, 5502.0], [90.2, 5506.0], [90.3, 5535.0], [90.4, 5545.0], [90.5, 5558.0], [90.6, 5570.0], [90.7, 5573.0], [90.8, 5589.0], [90.9, 5591.0], [91.0, 5592.0], [91.1, 5595.0], [91.2, 5596.0], [91.3, 5599.0], [91.4, 5603.0], [91.5, 5609.0], [91.6, 5622.0], [91.7, 5632.0], [91.8, 5638.0], [91.9, 5644.0], [92.0, 5646.0], [92.1, 5648.0], [92.2, 5649.0], [92.3, 5650.0], [92.4, 5652.0], [92.5, 5652.0], [92.6, 5657.0], [92.7, 5660.0], [92.8, 5668.0], [92.9, 5670.0], [93.0, 5675.0], [93.1, 5687.0], [93.2, 5692.0], [93.3, 5698.0], [93.4, 5711.0], [93.5, 5712.0], [93.6, 5714.0], [93.7, 5715.0], [93.8, 5721.0], [93.9, 5723.0], [94.0, 5724.0], [94.1, 5729.0], [94.2, 5735.0], [94.3, 5737.0], [94.4, 5737.0], [94.5, 5738.0], [94.6, 5743.0], [94.7, 5746.0], [94.8, 5756.0], [94.9, 5765.0], [95.0, 5774.0], [95.1, 5778.0], [95.2, 5792.0], [95.3, 5796.0], [95.4, 5802.0], [95.5, 5816.0], [95.6, 5821.0], [95.7, 5825.0], [95.8, 5830.0], [95.9, 5837.0], [96.0, 5845.0], [96.1, 5845.0], [96.2, 5846.0], [96.3, 5862.0], [96.4, 5871.0], [96.5, 5880.0], [96.6, 5892.0], [96.7, 5895.0], [96.8, 5898.0], [96.9, 5900.0], [97.0, 5902.0], [97.1, 5918.0], [97.2, 5920.0], [97.3, 5927.0], [97.4, 5929.0], [97.5, 5932.0], [97.6, 5941.0], [97.7, 5944.0], [97.8, 5958.0], [97.9, 5985.0], [98.0, 5994.0], [98.1, 5999.0], [98.2, 6002.0], [98.3, 6007.0], [98.4, 6015.0], [98.5, 6017.0], [98.6, 6018.0], [98.7, 6027.0], [98.8, 6029.0], [98.9, 6037.0], [99.0, 6040.0], [99.1, 6048.0], [99.2, 6055.0], [99.3, 6059.0], [99.4, 6059.0], [99.5, 6066.0], [99.6, 6069.0], [99.7, 6082.0], [99.8, 6121.0], [99.9, 6305.0]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 511.0, "series": [{"data": [[0.0, 511.0], [600.0, 9.0], [700.0, 4.0], [800.0, 10.0], [900.0, 15.0], [1000.0, 19.0], [1100.0, 13.0], [1200.0, 45.0], [1300.0, 25.0], [1400.0, 5.0], [1500.0, 8.0], [1600.0, 16.0], [1700.0, 20.0], [1800.0, 35.0], [1900.0, 35.0], [2000.0, 27.0], [2100.0, 16.0], [2200.0, 17.0], [2300.0, 11.0], [2400.0, 17.0], [2500.0, 18.0], [2600.0, 28.0], [2700.0, 20.0], [2800.0, 45.0], [2900.0, 42.0], [3000.0, 79.0], [3100.0, 41.0], [3200.0, 33.0], [3300.0, 22.0], [3400.0, 52.0], [3500.0, 20.0], [3600.0, 24.0], [3700.0, 24.0], [3800.0, 21.0], [3900.0, 17.0], [4000.0, 21.0], [4100.0, 23.0], [4200.0, 33.0], [4300.0, 17.0], [4400.0, 35.0], [4500.0, 34.0], [4600.0, 24.0], [4700.0, 11.0], [4800.0, 10.0], [4900.0, 15.0], [5100.0, 18.0], [5000.0, 5.0], [5200.0, 43.0], [5300.0, 35.0], [5400.0, 23.0], [5600.0, 40.0], [5500.0, 25.0], [5700.0, 41.0], [5800.0, 29.0], [5900.0, 26.0], [6000.0, 33.0], [6100.0, 2.0], [6300.0, 2.0], [100.0, 29.0], [200.0, 25.0], [300.0, 27.0], [400.0, 18.0], [500.0, 12.0]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 157.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1233.0, "series": [{"data": [[0.0, 610.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 157.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1233.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 974.9484999999981, "minX": 1.75567596E12, "maxY": 974.9484999999981, "series": [{"data": [[1.75567596E12, 974.9484999999981]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567596E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.0, "maxY": 6305.0, "series": [{"data": [[3.0, 2963.5], [8.0, 3515.8], [9.0, 4287.0], [10.0, 4389.0], [11.0, 4476.0], [12.0, 5279.0], [13.0, 5292.0], [15.0, 5260.0], [16.0, 5261.0], [18.0, 5030.0], [19.0, 5257.0], [20.0, 5250.0], [21.0, 5251.0], [24.0, 5247.0], [25.0, 6305.0], [26.0, 5442.0], [27.0, 5240.0], [28.0, 5238.0], [30.0, 5452.0], [31.0, 5941.0], [32.0, 5902.0], [34.0, 5610.5], [36.0, 6060.0], [39.0, 5837.0], [38.0, 6072.5], [41.0, 5895.0], [40.0, 6129.0], [43.0, 5766.5], [45.0, 6058.0], [44.0, 6028.0], [49.0, 5965.666666666667], [48.0, 6059.0], [51.0, 5472.0], [50.0, 6023.0], [53.0, 6048.0], [52.0, 6017.0], [55.0, 6037.0], [54.0, 6039.0], [57.0, 6029.0], [56.0, 6006.0], [59.0, 6002.0], [58.0, 6007.0], [61.0, 5994.0], [60.0, 5999.0], [63.0, 5901.0], [62.0, 5898.0], [66.0, 5867.5], [64.0, 5880.0], [71.0, 6018.0], [70.0, 6121.0], [69.0, 5820.0], [68.0, 5894.0], [75.0, 5935.0], [74.0, 6040.0], [73.0, 6095.0], [72.0, 6015.0], [79.0, 6055.0], [78.0, 5912.0], [76.0, 5994.0], [82.0, 5737.0], [81.0, 6059.0], [80.0, 5741.0], [87.0, 5737.0], [84.0, 5860.0], [90.0, 5711.5], [88.0, 5737.0], [94.0, 5698.0], [93.0, 5711.0], [92.0, 5715.5], [99.0, 5665.333333333333], [102.0, 5788.0], [100.0, 5659.5], [107.0, 5648.0], [106.0, 5696.0], [105.0, 5649.25], [111.0, 5638.0], [110.0, 5644.0], [109.0, 5646.0], [108.0, 5648.0], [114.0, 5599.0], [113.0, 5605.0], [119.0, 5589.5], [117.0, 5595.0], [116.0, 5598.0], [123.0, 5900.0], [122.0, 5618.0], [121.0, 5983.0], [120.0, 5622.0], [125.0, 5598.0], [124.0, 5993.0], [134.0, 5946.0], [133.0, 5582.0], [132.0, 6017.0], [131.0, 5542.0], [130.0, 5900.0], [129.0, 5591.75], [141.0, 5570.0], [140.0, 5573.0], [139.0, 5881.0], [138.0, 6025.666666666667], [137.0, 5895.0], [151.0, 6010.0], [150.0, 5840.0], [149.0, 5662.5], [147.0, 5464.0], [146.0, 5845.0], [145.0, 5919.0], [144.0, 5779.333333333333], [159.0, 5451.0], [158.0, 5944.0], [157.0, 6018.0], [155.0, 5929.0], [154.0, 5774.0], [153.0, 4121.5], [167.0, 5917.0], [166.0, 5859.5], [164.0, 5695.0], [162.0, 5845.0], [160.0, 5846.0], [175.0, 4259.5], [172.0, 4836.0], [170.0, 4756.0], [168.0, 5876.0], [183.0, 5129.5], [181.0, 4712.5], [179.0, 4813.25], [177.0, 5765.0], [191.0, 5370.0], [189.0, 5591.0], [184.0, 5802.0], [199.0, 5744.5], [197.0, 5713.0], [196.0, 5723.5], [194.0, 5729.0], [193.0, 5192.0], [192.0, 5478.0], [206.0, 5660.0], [205.0, 5660.0], [204.0, 5737.0], [203.0, 5821.0], [202.0, 5675.0], [201.0, 5928.0], [200.0, 5780.0], [215.0, 5567.0], [214.0, 5602.4], [210.0, 5435.5], [209.0, 5760.0], [223.0, 5657.0], [222.0, 5743.0], [221.0, 5766.0], [220.0, 5693.25], [216.0, 5751.0], [231.0, 5756.0], [230.0, 5367.0], [228.0, 5062.0], [227.0, 5721.0], [226.0, 5675.0], [225.0, 5724.0], [224.0, 5687.0], [239.0, 5373.0], [238.0, 5379.0], [237.0, 5602.5], [235.0, 5386.0], [234.0, 5732.0], [233.0, 5642.0], [232.0, 5396.0], [247.0, 5357.0], [246.0, 5796.0], [245.0, 5343.0], [243.0, 5334.0], [242.0, 5366.0], [241.0, 5371.5], [255.0, 5403.0], [252.0, 5334.0], [251.0, 5328.0], [250.0, 5318.0], [249.0, 5348.0], [248.0, 5345.0], [258.0, 5264.0], [271.0, 5237.0], [269.0, 5436.0], [267.0, 5616.5], [265.0, 5609.0], [264.0, 5744.0], [263.0, 4951.0], [262.0, 5218.0], [261.0, 5257.333333333333], [257.0, 5237.0], [256.0, 5283.0], [285.0, 5106.0], [286.0, 5481.0], [284.0, 5669.0], [275.0, 5483.333333333333], [272.0, 4901.0], [283.0, 4868.0], [282.0, 5570.0], [281.0, 5211.0], [280.0, 5159.0], [279.0, 5187.5], [277.0, 5205.0], [276.0, 5712.0], [302.0, 5371.0], [303.0, 5545.0], [301.0, 4839.0], [300.0, 5348.0], [299.0, 5322.0], [298.0, 4729.0], [297.0, 5441.0], [296.0, 4856.0], [295.0, 5181.0], [289.0, 5410.666666666667], [291.0, 5460.0], [290.0, 5159.0], [293.0, 5413.0], [292.0, 5596.0], [318.0, 5329.0], [319.0, 5668.0], [317.0, 5337.0], [316.0, 5311.0], [315.0, 5420.0], [314.0, 5403.0], [313.0, 5336.0], [312.0, 5450.0], [311.0, 4700.0], [305.0, 5026.0], [307.0, 5322.0], [306.0, 5346.0], [309.0, 5317.0], [308.0, 4688.0], [332.0, 5253.0], [334.0, 5304.0], [335.0, 5242.0], [333.0, 5315.0], [329.0, 5268.0], [328.0, 5337.0], [327.0, 5253.0], [321.0, 5219.0], [320.0, 5283.0], [323.0, 5338.0], [322.0, 5213.0], [326.0, 4603.0], [325.0, 5446.0], [324.0, 5208.0], [350.0, 4871.5], [351.0, 5142.0], [348.0, 4557.0], [338.0, 5415.0], [337.0, 5192.0], [336.0, 4595.0], [347.0, 5286.0], [346.0, 4563.0], [345.0, 5214.0], [344.0, 4567.0], [343.0, 4574.0], [342.0, 5237.5], [340.0, 5306.0], [365.0, 4307.0], [364.0, 4357.0], [355.0, 4510.0], [354.0, 5157.0], [353.0, 4538.0], [352.0, 4542.0], [363.0, 4360.0], [362.0, 4364.0], [361.0, 5274.0], [360.0, 4450.0], [359.0, 4450.0], [358.0, 5161.0], [356.0, 5330.0], [382.0, 4173.0], [383.0, 4168.0], [381.0, 4475.0], [380.0, 4942.0], [379.0, 4200.0], [378.0, 4856.0], [376.0, 4205.0], [375.0, 4841.0], [369.0, 4289.0], [368.0, 4483.666666666667], [371.0, 4230.0], [370.0, 4910.0], [374.0, 4209.0], [373.0, 4214.0], [372.0, 4218.0], [398.0, 4091.0], [399.0, 4077.0], [397.0, 4093.0], [396.0, 4095.0], [395.0, 4862.0], [394.0, 4109.0], [393.0, 4413.0], [392.0, 4457.5], [390.0, 4125.0], [384.0, 4166.0], [386.0, 4162.0], [385.0, 4166.0], [389.0, 4841.0], [388.0, 4878.5], [402.0, 1570.0], [414.0, 4793.0], [413.0, 3095.6666666666665], [410.0, 4033.0], [408.0, 2323.0], [407.0, 1158.0], [405.0, 1959.0], [404.0, 3040.5], [401.0, 1514.0], [400.0, 1729.0], [429.0, 1655.0], [430.0, 1619.0], [428.0, 1673.0], [426.0, 2929.0], [425.0, 1018.0], [424.0, 990.0], [422.0, 994.0], [421.0, 1025.0], [419.0, 995.0], [418.0, 1016.0], [417.0, 4060.0], [416.0, 1764.5], [435.0, 2301.0], [447.0, 2496.0], [444.0, 3838.0], [443.0, 1600.25], [439.0, 5266.0], [438.0, 3699.0], [436.0, 3952.0], [434.0, 2923.0], [433.0, 2972.3333333333335], [451.0, 1296.0], [462.0, 4391.5], [460.0, 4690.0], [459.0, 1913.0], [457.0, 3327.5], [455.0, 2722.5], [453.0, 1888.5], [450.0, 2494.0], [449.0, 2516.0], [448.0, 2503.0], [478.0, 4097.0], [475.0, 3588.0], [474.0, 3588.0], [473.0, 3112.3333333333335], [470.0, 5199.0], [469.0, 2433.0], [465.0, 968.0], [464.0, 4660.0], [495.0, 3635.0], [494.0, 4927.0], [493.0, 3636.0], [491.0, 3681.0], [490.0, 3630.166666666667], [486.0, 3601.0], [485.0, 3857.0], [480.0, 3763.0], [511.0, 4006.5], [509.0, 4633.75], [505.0, 3847.5], [504.0, 4621.0], [502.0, 3598.0], [501.0, 3598.0], [500.0, 3786.5], [498.0, 4073.3333333333335], [497.0, 4929.0], [537.0, 4689.0], [542.0, 3884.0], [543.0, 4595.0], [528.0, 4344.0], [530.0, 4788.0], [529.0, 4596.0], [532.0, 3906.0], [531.0, 4354.0], [541.0, 4026.0], [540.0, 4228.5], [538.0, 4690.0], [536.0, 3901.5], [519.0, 4645.0], [518.0, 3995.0], [517.0, 4135.0], [515.0, 4668.0], [514.0, 4447.5], [513.0, 4007.0], [527.0, 4648.0], [526.0, 4343.0], [525.0, 3944.0], [524.0, 3868.0], [523.0, 3871.0], [522.0, 4284.5], [520.0, 4704.0], [535.0, 3903.0], [533.0, 4040.0], [572.0, 4556.0], [575.0, 4471.0], [560.0, 3736.0], [562.0, 3729.0], [561.0, 3733.0], [565.0, 4026.5], [564.0, 3720.0], [574.0, 4523.0], [573.0, 3840.0], [571.0, 4049.0], [570.0, 4438.0], [569.0, 4506.0], [568.0, 4688.0], [559.0, 3738.0], [547.0, 4596.0], [546.0, 4289.666666666667], [549.0, 4641.0], [548.0, 4523.0], [551.0, 4563.0], [550.0, 4460.0], [558.0, 3739.0], [557.0, 4711.0], [556.0, 4570.0], [555.0, 3752.0], [554.0, 4463.0], [553.0, 3758.0], [552.0, 3763.0], [567.0, 4052.0], [566.0, 4081.0], [603.0, 4081.5], [601.0, 4220.25], [579.0, 4495.0], [578.0, 4429.0], [577.0, 4462.5], [597.0, 4500.0], [596.0, 4454.0], [595.0, 4116.0], [592.0, 4057.5], [590.0, 4608.0], [589.0, 4401.0], [588.0, 4430.0], [638.0, 3477.0], [639.0, 3476.0], [624.0, 3493.0], [637.0, 3478.0], [636.0, 3483.0], [634.0, 3485.0], [633.0, 3610.25], [623.0, 3494.0], [610.0, 3643.0], [608.0, 3978.4], [613.0, 3805.0], [612.0, 4096.5], [615.0, 4627.0], [614.0, 4578.0], [622.0, 3785.6666666666665], [619.0, 4166.0], [618.0, 3518.0], [616.0, 4608.0], [629.0, 3969.5], [628.0, 3490.0], [626.0, 3692.0], [625.0, 4418.0], [664.0, 3463.0], [668.0, 3481.0], [671.0, 4444.0], [657.0, 3488.0], [656.0, 4295.0], [659.0, 3465.0], [658.0, 3476.0], [670.0, 4405.0], [669.0, 3444.0], [667.0, 3452.0], [666.0, 3463.0], [665.0, 3458.0], [655.0, 3396.0], [641.0, 3472.0], [640.0, 3474.0], [644.0, 3433.5], [642.0, 3406.0], [647.0, 3355.0], [646.0, 3471.0], [654.0, 3414.0], [653.0, 3400.0], [652.0, 3420.0], [651.0, 3410.0], [650.0, 3768.0], [649.0, 3580.0], [663.0, 3470.0], [662.0, 3468.6666666666665], [697.0, 3030.0], [691.0, 4404.0], [701.0, 3218.3333333333335], [703.0, 3221.0], [690.0, 4510.0], [698.0, 4585.0], [696.0, 3031.0], [678.0, 3095.0], [677.0, 4161.0], [676.0, 3106.0], [675.0, 4207.0], [674.0, 3442.0], [673.0, 3847.5], [687.0, 3062.0], [686.0, 3239.0], [685.0, 4408.0], [684.0, 3081.0], [683.0, 3087.0], [682.0, 4270.0], [681.0, 4373.666666666667], [695.0, 3035.0], [694.0, 3038.0], [693.0, 3730.0], [729.0, 3217.0], [733.0, 2962.0], [734.0, 4302.0], [721.0, 3151.0], [720.0, 3316.0], [725.0, 3137.5], [723.0, 3149.0], [732.0, 2962.0], [731.0, 2968.0], [730.0, 2968.0], [728.0, 2973.0], [711.0, 3016.0], [709.0, 3018.0], [708.0, 4641.0], [707.0, 3006.0], [706.0, 3131.0], [705.0, 3243.0], [719.0, 4531.0], [718.0, 4081.0], [717.0, 2994.0], [716.0, 2994.0], [715.0, 3010.0], [714.0, 2997.0], [713.0, 2998.0], [712.0, 3903.0], [727.0, 4319.0], [726.0, 3067.0], [764.0, 2874.0], [767.0, 2864.0], [752.0, 4552.0], [754.0, 2893.0], [753.0, 2890.0], [756.0, 2882.0], [755.0, 2884.0], [766.0, 2863.0], [765.0, 2868.0], [763.0, 2876.0], [762.0, 2875.0], [761.0, 2877.0], [760.0, 2878.0], [751.0, 2911.0], [737.0, 2951.0], [736.0, 2983.0], [740.0, 2932.0], [738.0, 2948.0], [750.0, 4280.0], [749.0, 4361.0], [747.0, 4284.0], [746.0, 3379.333333333333], [759.0, 2879.0], [757.0, 2881.0], [793.0, 2594.0], [797.0, 2807.0], [798.0, 66.0], [785.0, 2832.0], [784.0, 2834.0], [787.0, 2633.0], [786.0, 2493.0], [789.0, 73.0], [788.0, 2633.0], [796.0, 4201.0], [795.0, 2819.0], [794.0, 2811.0], [792.0, 2811.0], [774.0, 4536.0], [773.0, 3665.5], [771.0, 4509.0], [770.0, 4418.0], [769.0, 2859.0], [768.0, 2860.0], [783.0, 2841.0], [782.0, 2836.0], [781.0, 2847.0], [780.0, 2848.0], [779.0, 4403.0], [778.0, 2847.5], [776.0, 3651.0], [791.0, 4360.0], [790.0, 2266.0], [824.0, 2728.0], [830.0, 61.0], [831.0, 59.0], [817.0, 47.0], [816.0, 49.0], [819.0, 44.0], [818.0, 2744.0], [828.0, 2095.0], [826.0, 2099.0], [825.0, 2191.0], [815.0, 50.0], [801.0, 62.0], [800.0, 4309.0], [803.0, 4385.0], [802.0, 58.0], [805.0, 4188.0], [804.0, 4467.0], [807.0, 4183.0], [806.0, 4179.0], [814.0, 2220.0], [813.0, 4142.0], [812.0, 891.0], [809.0, 2235.0], [808.0, 2436.0], [823.0, 61.0], [822.0, 40.0], [821.0, 2299.0], [820.0, 41.0], [858.0, 30.0], [862.0, 4333.0], [863.0, 1919.0], [848.0, 1359.0], [850.0, 4350.0], [849.0, 4251.0], [852.0, 29.0], [851.0, 2059.0], [861.0, 1967.0], [860.0, 32.0], [859.0, 30.0], [857.0, 1364.6666666666667], [839.0, 4228.0], [838.0, 2053.5], [836.0, 2026.0], [835.0, 2362.0], [834.0, 60.0], [833.0, 2089.0], [832.0, 2090.0], [846.0, 2005.0], [845.0, 34.0], [844.0, 44.0], [843.0, 1056.5], [841.0, 2026.0], [840.0, 2027.0], [855.0, 2058.0], [853.0, 41.0], [888.0, 4279.0], [894.0, 1881.0], [895.0, 33.0], [881.0, 1879.0], [880.0, 34.0], [892.0, 31.0], [891.0, 30.5], [889.0, 34.0], [879.0, 1954.0], [864.0, 1953.0], [866.0, 38.0], [865.0, 40.0], [869.0, 37.0], [868.0, 974.5], [871.0, 1943.0], [870.0, 1901.0], [878.0, 32.0], [877.0, 4284.0], [876.0, 30.0], [875.0, 1887.0], [874.0, 1902.0], [873.0, 1889.0], [872.0, 4306.0], [887.0, 1882.0], [885.0, 1902.0], [884.0, 1903.5], [882.0, 1965.0], [920.0, 55.0], [925.0, 41.0], [927.0, 834.0], [912.0, 2934.5], [915.0, 2916.0], [913.0, 1872.0], [923.0, 1724.0], [922.0, 54.0], [921.0, 4192.0], [910.0, 34.0], [897.0, 32.0], [896.0, 31.0], [899.0, 1768.0], [898.0, 1769.0], [903.0, 614.0], [900.0, 1871.0], [909.0, 4274.0], [908.0, 42.0], [907.0, 34.0], [905.0, 1779.0], [904.0, 38.0], [919.0, 32.0], [918.0, 34.0], [917.0, 32.0], [916.0, 4208.0], [958.0, 35.0], [959.0, 1337.0], [944.0, 1370.0], [946.0, 1352.0], [945.0, 1368.0], [957.0, 1337.0], [956.0, 1337.5], [954.0, 31.0], [953.0, 692.0], [943.0, 2094.5], [930.0, 1488.5], [932.0, 35.0], [931.0, 1389.0], [934.0, 4085.0], [933.0, 1530.0], [941.0, 859.5], [939.0, 1380.0], [937.0, 1380.0], [936.0, 733.0], [951.0, 31.0], [950.0, 1349.0], [949.0, 2018.5], [947.0, 34.0], [990.0, 655.5], [980.0, 31.0], [991.0, 36.0], [977.0, 41.0], [976.0, 1297.0], [979.0, 33.0], [978.0, 38.0], [988.0, 41.5], [986.0, 654.0], [984.0, 1272.0], [967.0, 29.0], [966.0, 1310.0], [965.0, 34.0], [964.0, 34.0], [963.0, 1326.0], [961.0, 1329.0], [960.0, 30.0], [975.0, 1301.0], [974.0, 42.5], [972.0, 32.0], [971.0, 30.0], [970.0, 32.0], [969.0, 1307.0], [968.0, 40.0], [983.0, 1280.0], [982.0, 1283.0], [981.0, 1289.0], [1009.0, 1262.0], [1020.0, 1202.0], [1022.0, 828.6666666666666], [1008.0, 1249.3333333333333], [1018.0, 1215.0], [1017.0, 1216.0], [1016.0, 365.75], [998.0, 31.0], [997.0, 1246.0], [996.0, 30.5], [994.0, 1261.0], [993.0, 39.0], [1005.0, 844.6666666666666], [1002.0, 1237.0], [1001.0, 30.0], [1000.0, 634.5], [1012.0, 92.0], [1015.0, 62.0], [1010.0, 1250.0], [1078.0, 70.0], [1084.0, 1010.0], [1056.0, 31.0], [1060.0, 3850.0], [1062.0, 1051.0], [1064.0, 42.0], [1068.0, 1027.0], [1070.0, 40.0], [1082.0, 59.0], [1080.0, 1056.0], [1076.0, 3838.0], [1038.0, 1157.0], [1036.0, 1182.0], [1034.0, 42.0], [1032.0, 78.0], [1054.0, 1147.0], [1050.0, 32.0], [1048.0, 1139.0], [1046.0, 48.0], [1044.0, 603.5], [1042.0, 57.0], [1040.0, 64.5], [1148.0, 1890.0], [1128.0, 31.0], [1150.0, 35.0], [1120.0, 913.0], [1122.0, 44.0], [1124.0, 41.0], [1126.0, 38.0], [1130.0, 30.0], [1132.0, 54.0], [1134.0, 240.0], [1146.0, 229.0], [1144.0, 209.5], [1100.0, 39.5], [1098.0, 790.0], [1096.0, 43.0], [1094.0, 3711.0], [1090.0, 37.0], [1088.0, 1189.0], [1116.0, 36.0], [1112.0, 1898.0], [1110.0, 3749.0], [1108.0, 39.0], [1104.0, 784.0], [1212.0, 51.0], [1184.0, 98.0], [1186.0, 3442.0], [1188.0, 3435.0], [1190.0, 32.0], [1192.0, 3394.0], [1194.0, 3412.0], [1196.0, 3408.0], [1214.0, 3336.0], [1208.0, 3332.0], [1206.0, 3312.0], [1204.0, 47.0], [1200.0, 1172.0], [1152.0, 3622.0], [1154.0, 138.0], [1156.0, 3503.0], [1160.0, 1776.5], [1158.0, 3482.0], [1162.0, 34.0], [1164.0, 3476.0], [1166.0, 39.0], [1180.0, 3498.0], [1178.0, 148.0], [1176.0, 53.0], [1174.0, 3470.0], [1172.0, 36.0], [1170.0, 3475.0], [1270.0, 3263.0], [1274.0, 42.5], [1250.0, 60.0], [1252.0, 1630.5], [1256.0, 46.0], [1258.0, 47.0], [1260.0, 44.0], [1262.0, 40.0], [1278.0, 41.5], [1272.0, 3195.0], [1268.0, 3252.0], [1266.0, 3224.0], [1264.0, 3235.0], [1216.0, 44.0], [1218.0, 41.0], [1220.0, 3311.0], [1222.0, 1674.5], [1224.0, 35.0], [1226.0, 32.0], [1228.0, 29.0], [1230.0, 3257.0], [1240.0, 32.0], [1238.0, 35.0], [1236.0, 36.0], [1232.0, 3255.0], [1340.0, 3079.0], [1320.0, 1575.5], [1312.0, 3131.0], [1314.0, 3147.0], [1318.0, 3094.0], [1316.0, 1579.5], [1322.0, 32.0], [1324.0, 3067.0], [1326.0, 3130.0], [1338.0, 3081.0], [1336.0, 2084.0], [1330.0, 35.0], [1328.0, 3051.0], [1294.0, 3192.0], [1292.0, 3185.0], [1290.0, 35.0], [1288.0, 3193.0], [1286.0, 3189.0], [1284.0, 32.0], [1282.0, 41.0], [1280.0, 40.0], [1310.0, 33.0], [1308.0, 36.0], [1306.0, 29.0], [1304.0, 3142.0], [1300.0, 49.0], [1296.0, 3162.0], [1406.0, 31.0], [1376.0, 3064.0], [1378.0, 31.0], [1382.0, 29.0], [1388.0, 2048.3333333333335], [1390.0, 29.0], [1402.0, 3052.0], [1400.0, 29.0], [1398.0, 3043.0], [1396.0, 29.0], [1394.0, 3046.0], [1392.0, 3046.0], [1366.0, 31.0], [1346.0, 1557.5], [1348.0, 28.0], [1350.0, 46.0], [1354.0, 32.0], [1364.0, 3073.0], [1360.0, 37.0], [1434.0, 801.0], [1436.0, 475.33333333333337], [1432.0, 505.0], [1430.0, 34.5], [1428.0, 3022.0], [1424.0, 1479.0], [1452.0, 1565.0], [1450.0, 1046.5], [1448.0, 2088.0], [1444.0, 1365.0], [1456.0, 847.0], [1410.0, 38.0], [1412.0, 35.0], [1414.0, 44.0], [1416.0, 32.0], [1422.0, 40.0], [1460.0, 3078.6666666666665], [1466.0, 1160.6666666666667], [1498.0, 69.0], [1496.0, 2963.0], [1494.0, 1503.0], [1492.0, 77.5], [1488.0, 1190.3333333333335], [1502.0, 131.0], [1512.0, 1255.0], [1506.0, 71.0], [1534.0, 2671.0], [1532.0, 2826.0], [1530.0, 2712.0], [1528.0, 2817.0], [1518.0, 2940.0], [1516.0, 2945.0], [1514.0, 645.5], [1520.0, 1550.5], [1486.0, 187.5], [1484.0, 3124.0], [1524.0, 1154.3333333333333], [1526.0, 656.0], [1544.0, 2771.5], [1558.0, 37.714285714285715], [1560.0, 30.0], [1562.0, 2725.0], [1564.0, 2743.0], [1566.0, 32.0], [1546.0, 1387.5], [1540.0, 2779.0], [1538.0, 2798.0], [1536.0, 2666.0], [1556.0, 2246.0], [1554.0, 1295.8], [1552.0, 1380.0], [1584.0, 2534.0], [1586.0, 2698.0], [1588.0, 30.0], [1592.0, 46.0], [1594.0, 2646.0], [1582.0, 2673.0], [1580.0, 33.5], [1578.0, 33.0], [1576.0, 2668.6666666666665], [1572.0, 2693.0], [1568.0, 2713.0], [1596.0, 41.0], [1598.0, 36.0], [1550.0, 653.5], [1660.0, 862.0], [1632.0, 2606.5], [1634.0, 40.0], [1636.0, 38.0], [1638.0, 2597.0], [1640.0, 2593.0], [1642.0, 36.0], [1644.0, 33.0], [1646.0, 31.0], [1662.0, 2482.0], [1658.0, 40.0], [1656.0, 44.0], [1654.0, 1237.75], [1650.0, 2443.0], [1648.0, 2419.0], [1614.0, 1336.5], [1612.0, 42.0], [1606.0, 2475.0], [1604.0, 2656.0], [1602.0, 2671.0], [1600.0, 35.0], [1630.0, 2625.0], [1628.0, 32.0], [1626.0, 35.0], [1624.0, 59.0], [1620.0, 44.0], [1618.0, 33.0], [1616.0, 27.0], [1722.0, 2206.0], [1716.0, 606.5], [1702.0, 1168.5], [1696.0, 949.25], [1698.0, 845.6], [1700.0, 723.6666666666667], [1704.0, 1607.25], [1706.0, 1106.5], [1708.0, 573.3333333333333], [1710.0, 151.5], [1726.0, 1698.0], [1724.0, 130.0], [1720.0, 905.5], [1718.0, 1278.5], [1714.0, 2311.0], [1712.0, 254.0], [1678.0, 1603.0], [1674.0, 682.3333333333333], [1676.0, 1050.0], [1672.0, 288.125], [1670.0, 1233.75], [1668.0, 1613.6666666666667], [1666.0, 408.0], [1664.0, 25.0], [1694.0, 1005.0], [1692.0, 874.0], [1690.0, 871.6666666666667], [1688.0, 1056.25], [1684.0, 866.4285714285714], [1682.0, 52.0], [1680.0, 970.0], [1686.0, 885.8333333333333], [1752.0, 51.0], [1736.0, 1647.6], [1732.0, 1851.3333333333333], [1734.0, 1191.6666666666667], [1744.0, 2293.0], [1748.0, 562.0], [1750.0, 2197.0], [1756.0, 46.5], [1758.0, 45.0], [1730.0, 1244.0], [1742.0, 2264.0], [1762.0, 41.0], [1760.0, 44.0], [1764.0, 543.0], [1772.0, 520.5], [1738.0, 1840.5], [1081.0, 62.0], [1063.0, 36.0], [1057.0, 1098.0], [1059.0, 37.5], [1061.0, 3881.0], [1067.0, 534.5], [1065.0, 31.0], [1069.0, 39.0], [1071.0, 39.0], [1083.0, 59.0], [1079.0, 1075.0], [1077.0, 3807.0], [1075.0, 1943.0], [1073.0, 1948.5], [1037.0, 64.0], [1035.0, 42.0], [1033.0, 45.0], [1031.0, 623.0], [1029.0, 646.0], [1027.0, 525.4], [1055.0, 33.0], [1053.0, 2465.5], [1051.0, 1134.0], [1049.0, 46.0], [1047.0, 46.0], [1045.0, 1178.0], [1041.0, 57.0], [1147.0, 42.0], [1121.0, 42.0], [1123.0, 45.0], [1125.0, 40.0], [1127.0, 33.0], [1129.0, 43.0], [1131.0, 646.0], [1133.0, 36.0], [1135.0, 633.0], [1149.0, 38.0], [1145.0, 45.0], [1143.0, 46.0], [1141.0, 500.0], [1139.0, 3671.0], [1137.0, 344.0], [1103.0, 416.5], [1101.0, 795.0], [1097.0, 39.0], [1095.0, 65.0], [1093.0, 434.0], [1091.0, 807.0], [1089.0, 29.0], [1119.0, 46.5], [1117.0, 666.0], [1115.0, 1897.0], [1113.0, 31.0], [1109.0, 47.0], [1107.0, 40.0], [1105.0, 42.0], [1211.0, 45.0], [1203.0, 1689.0], [1215.0, 3296.0], [1185.0, 74.0], [1187.0, 3416.0], [1189.0, 3422.0], [1191.0, 3427.0], [1193.0, 70.0], [1197.0, 3396.0], [1213.0, 49.0], [1209.0, 3355.0], [1207.0, 3376.0], [1205.0, 3320.0], [1201.0, 3375.0], [1183.0, 1879.5], [1153.0, 3696.0], [1155.0, 45.0], [1157.0, 36.0], [1161.0, 129.0], [1165.0, 3493.0], [1167.0, 109.0], [1181.0, 3463.0], [1177.0, 84.0], [1175.0, 57.0], [1173.0, 65.5], [1169.0, 1684.5], [1271.0, 3231.0], [1269.0, 3197.0], [1255.0, 3262.5], [1279.0, 3199.0], [1249.0, 3279.0], [1253.0, 3260.0], [1257.0, 3221.0], [1259.0, 43.0], [1261.0, 27.0], [1275.0, 41.0], [1265.0, 3232.0], [1247.0, 59.5], [1217.0, 42.0], [1219.0, 40.0], [1223.0, 31.0], [1225.0, 3311.0], [1227.0, 3316.0], [1229.0, 3292.0], [1231.0, 3281.0], [1245.0, 38.5], [1243.0, 51.0], [1241.0, 59.0], [1239.0, 32.0], [1237.0, 35.0], [1235.0, 3293.0], [1233.0, 3290.5], [1333.0, 2015.3333333333335], [1339.0, 3036.0], [1343.0, 39.5], [1313.0, 26.0], [1321.0, 51.0], [1323.0, 31.0], [1325.0, 3128.0], [1327.0, 45.0], [1341.0, 34.0], [1337.0, 29.0], [1329.0, 39.0], [1295.0, 3153.0], [1291.0, 3176.0], [1289.0, 63.0], [1287.0, 3230.0], [1285.0, 30.0], [1283.0, 37.5], [1311.0, 3149.0], [1309.0, 33.0], [1307.0, 3083.0], [1305.0, 3141.0], [1303.0, 3139.0], [1301.0, 48.0], [1297.0, 65.0], [1407.0, 32.0], [1403.0, 27.0], [1379.0, 33.0], [1381.0, 3058.0], [1383.0, 35.0], [1389.0, 32.0], [1405.0, 33.0], [1401.0, 3048.0], [1393.0, 26.0], [1345.0, 40.0], [1347.0, 3026.0], [1349.0, 3073.0], [1351.0, 3095.0], [1355.0, 3057.0], [1359.0, 1556.5], [1357.0, 3084.0], [1365.0, 3065.0], [1363.0, 3075.0], [1361.0, 3079.0], [1413.0, 32.0], [1467.0, 3031.5], [1433.0, 401.0], [1435.0, 1378.6666666666665], [1431.0, 42.0], [1429.0, 34.0], [1425.0, 35.0], [1451.0, 931.0], [1455.0, 2188.8], [1453.0, 3125.0], [1449.0, 416.0], [1447.0, 943.0], [1445.0, 55.0], [1443.0, 65.0], [1437.0, 3004.5], [1409.0, 39.0], [1411.0, 3037.0], [1417.0, 47.0], [1457.0, 3073.0], [1463.0, 3076.0], [1521.0, 1466.5], [1531.0, 2607.0], [1497.0, 746.0], [1495.0, 2959.0], [1491.0, 2977.0], [1489.0, 1535.6304347826085], [1503.0, 1445.6], [1513.0, 1511.0], [1511.0, 97.0], [1509.0, 1966.0], [1505.0, 120.0], [1535.0, 2802.0], [1533.0, 2803.0], [1529.0, 2855.0], [1527.0, 632.6], [1515.0, 1530.5], [1519.0, 2846.0], [1517.0, 106.0], [1481.0, 157.75], [1477.0, 191.0], [1473.0, 1161.0], [1543.0, 2760.0], [1591.0, 1276.5], [1557.0, 1262.0], [1555.0, 752.5], [1559.0, 38.0], [1561.0, 30.0], [1563.0, 28.0], [1565.0, 33.0], [1549.0, 2272.3333333333335], [1547.0, 36.0], [1541.0, 198.0], [1539.0, 2791.0], [1537.0, 2792.0], [1567.0, 2678.0], [1553.0, 1026.25], [1551.0, 34.0], [1585.0, 2533.0], [1587.0, 2595.0], [1589.0, 31.0], [1593.0, 2677.0], [1583.0, 514.5], [1581.0, 2559.0], [1577.0, 2662.0], [1573.0, 32.0], [1571.0, 31.5], [1569.0, 31.0], [1597.0, 56.0], [1599.0, 35.0], [1595.0, 1768.0], [1661.0, 2377.0], [1639.0, 2594.0], [1663.0, 2352.0], [1633.0, 40.0], [1635.0, 38.0], [1637.0, 38.0], [1643.0, 34.0], [1645.0, 31.0], [1647.0, 2392.0], [1655.0, 2404.0], [1649.0, 2403.0], [1615.0, 30.0], [1613.0, 2481.0], [1611.0, 38.0], [1609.0, 50.5], [1607.0, 2497.0], [1605.0, 2407.0], [1629.0, 30.0], [1627.0, 28.0], [1623.0, 31.0], [1621.0, 28.0], [1619.0, 40.0], [1617.0, 37.0], [1725.0, 1671.5], [1697.0, 942.0], [1699.0, 1424.0], [1701.0, 706.6666666666667], [1703.0, 714.0], [1707.0, 1865.5], [1705.0, 245.0], [1709.0, 914.0], [1711.0, 623.6666666666667], [1727.0, 1284.1666666666665], [1721.0, 441.5], [1723.0, 2183.0], [1719.0, 1303.25], [1715.0, 114.0], [1713.0, 234.0], [1677.0, 818.3333333333333], [1675.0, 819.6666666666667], [1673.0, 784.0], [1671.0, 817.25], [1669.0, 1090.5], [1665.0, 416.0], [1679.0, 1060.0], [1695.0, 233.07692307692307], [1693.0, 129.33333333333334], [1689.0, 762.9285714285714], [1687.0, 328.25], [1685.0, 1968.0], [1683.0, 923.75], [1681.0, 1020.0], [1751.0, 2110.0], [1731.0, 1369.0], [1733.0, 2171.0], [1735.0, 2274.0], [1745.0, 1892.5], [1747.0, 555.5], [1749.0, 549.0], [1753.0, 49.0], [1729.0, 1100.8], [1743.0, 1997.5], [1763.0, 559.0], [1767.0, 1104.0], [1765.0, 536.0], [1771.0, 2094.3333333333335], [1769.0, 531.0], [1773.0, 515.0], [1741.0, 1106.25], [1739.0, 1597.5], [1.0, 2917.0]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}, {"data": [[974.9480000000009, 2486.952499999998]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1773.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 16833.333333333332, "minX": 1.75567596E12, "maxY": 153200.0, "series": [{"data": [[1.75567596E12, 153200.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75567596E12, 16833.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567596E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2486.952499999998, "minX": 1.75567596E12, "maxY": 2486.952499999998, "series": [{"data": [[1.75567596E12, 2486.952499999998]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567596E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2486.1314999999972, "minX": 1.75567596E12, "maxY": 2486.1314999999972, "series": [{"data": [[1.75567596E12, 2486.1314999999972]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567596E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2161.1420000000026, "minX": 1.75567596E12, "maxY": 2161.1420000000026, "series": [{"data": [[1.75567596E12, 2161.1420000000026]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567596E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75567596E12, "maxY": 6384.0, "series": [{"data": [[1.75567596E12, 6384.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75567596E12, 5480.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75567596E12, 6039.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75567596E12, 5773.5999999999985]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75567596E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75567596E12, 2662.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567596E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 98.0, "minX": 209.0, "maxY": 5694.0, "series": [{"data": [[262.0, 5694.0], [279.0, 4450.0], [350.0, 125.5], [209.0, 1098.0], [427.0, 3038.0], [473.0, 98.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 473.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 92.0, "minX": 209.0, "maxY": 5694.0, "series": [{"data": [[262.0, 5694.0], [279.0, 4450.0], [350.0, 125.5], [209.0, 1098.0], [427.0, 3038.0], [473.0, 92.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 473.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.8833333333333333, "minX": 1.7556759E12, "maxY": 29.45, "series": [{"data": [[1.75567596E12, 29.45], [1.7556759E12, 3.8833333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567596E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75567596E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75567596E12, 33.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75567596E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75567596E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75567596E12, 33.333333333333336]], "isOverall": false, "label": "Dashboard แสดงภาพรวมสุขภาพแต่ละแบบประเมิน-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567596E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.75567596E12, "maxY": 33.333333333333336, "series": [{"data": [[1.75567596E12, 33.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75567596E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

