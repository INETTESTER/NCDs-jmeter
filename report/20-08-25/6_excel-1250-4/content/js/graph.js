/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 118.0, "minX": 0.0, "maxY": 39118.0, "series": [{"data": [[0.0, 118.0], [0.1, 120.0], [0.2, 121.0], [0.3, 121.0], [0.4, 128.0], [0.5, 128.0], [0.6, 128.0], [0.7, 131.0], [0.8, 134.0], [0.9, 135.0], [1.0, 135.0], [1.1, 136.0], [1.2, 139.0], [1.3, 139.0], [1.4, 140.0], [1.5, 141.0], [1.6, 142.0], [1.7, 143.0], [1.8, 144.0], [1.9, 145.0], [2.0, 146.0], [2.1, 148.0], [2.2, 148.0], [2.3, 149.0], [2.4, 149.0], [2.5, 151.0], [2.6, 152.0], [2.7, 153.0], [2.8, 154.0], [2.9, 155.0], [3.0, 156.0], [3.1, 157.0], [3.2, 157.0], [3.3, 157.0], [3.4, 157.0], [3.5, 158.0], [3.6, 159.0], [3.7, 161.0], [3.8, 161.0], [3.9, 161.0], [4.0, 162.0], [4.1, 166.0], [4.2, 167.0], [4.3, 172.0], [4.4, 175.0], [4.5, 177.0], [4.6, 186.0], [4.7, 189.0], [4.8, 193.0], [4.9, 199.0], [5.0, 204.0], [5.1, 204.0], [5.2, 208.0], [5.3, 218.0], [5.4, 222.0], [5.5, 226.0], [5.6, 247.0], [5.7, 311.0], [5.8, 319.0], [5.9, 321.0], [6.0, 321.0], [6.1, 335.0], [6.2, 335.0], [6.3, 340.0], [6.4, 343.0], [6.5, 362.0], [6.6, 380.0], [6.7, 392.0], [6.8, 399.0], [6.9, 430.0], [7.0, 444.0], [7.1, 511.0], [7.2, 520.0], [7.3, 781.0], [7.4, 1177.0], [7.5, 1276.0], [7.6, 1280.0], [7.7, 1821.0], [7.8, 1821.0], [7.9, 1830.0], [8.0, 1998.0], [8.1, 2037.0], [8.2, 2038.0], [8.3, 2052.0], [8.4, 2061.0], [8.5, 2074.0], [8.6, 2078.0], [8.7, 2122.0], [8.8, 2136.0], [8.9, 2212.0], [9.0, 2213.0], [9.1, 2237.0], [9.2, 2255.0], [9.3, 2268.0], [9.4, 2273.0], [9.5, 2291.0], [9.6, 2302.0], [9.7, 2305.0], [9.8, 2310.0], [9.9, 2376.0], [10.0, 2397.0], [10.1, 2408.0], [10.2, 2408.0], [10.3, 2441.0], [10.4, 2461.0], [10.5, 2508.0], [10.6, 2549.0], [10.7, 2558.0], [10.8, 2576.0], [10.9, 2577.0], [11.0, 2587.0], [11.1, 2596.0], [11.2, 2604.0], [11.3, 2615.0], [11.4, 2617.0], [11.5, 2619.0], [11.6, 2634.0], [11.7, 2659.0], [11.8, 2671.0], [11.9, 2675.0], [12.0, 2698.0], [12.1, 2743.0], [12.2, 2746.0], [12.3, 2757.0], [12.4, 2773.0], [12.5, 2788.0], [12.6, 2792.0], [12.7, 2800.0], [12.8, 2805.0], [12.9, 2825.0], [13.0, 2889.0], [13.1, 2895.0], [13.2, 2905.0], [13.3, 2939.0], [13.4, 2941.0], [13.5, 2964.0], [13.6, 2969.0], [13.7, 3006.0], [13.8, 3022.0], [13.9, 3027.0], [14.0, 3045.0], [14.1, 3084.0], [14.2, 3098.0], [14.3, 3133.0], [14.4, 3146.0], [14.5, 3149.0], [14.6, 3150.0], [14.7, 3155.0], [14.8, 3166.0], [14.9, 3172.0], [15.0, 3175.0], [15.1, 3176.0], [15.2, 3178.0], [15.3, 3207.0], [15.4, 3210.0], [15.5, 3238.0], [15.6, 3243.0], [15.7, 3258.0], [15.8, 3261.0], [15.9, 3263.0], [16.0, 3281.0], [16.1, 3383.0], [16.2, 3386.0], [16.3, 3420.0], [16.4, 3420.0], [16.5, 3421.0], [16.6, 3426.0], [16.7, 3460.0], [16.8, 3468.0], [16.9, 3468.0], [17.0, 3492.0], [17.1, 3495.0], [17.2, 3545.0], [17.3, 3599.0], [17.4, 3605.0], [17.5, 3606.0], [17.6, 3632.0], [17.7, 3636.0], [17.8, 3643.0], [17.9, 3643.0], [18.0, 3651.0], [18.1, 3674.0], [18.2, 3675.0], [18.3, 3679.0], [18.4, 3680.0], [18.5, 3685.0], [18.6, 3689.0], [18.7, 3693.0], [18.8, 3695.0], [18.9, 3701.0], [19.0, 3702.0], [19.1, 3709.0], [19.2, 3729.0], [19.3, 3745.0], [19.4, 3749.0], [19.5, 3753.0], [19.6, 3850.0], [19.7, 3854.0], [19.8, 3879.0], [19.9, 3893.0], [20.0, 3928.0], [20.1, 3947.0], [20.2, 3958.0], [20.3, 3962.0], [20.4, 3994.0], [20.5, 3998.0], [20.6, 4015.0], [20.7, 4027.0], [20.8, 4032.0], [20.9, 4045.0], [21.0, 4066.0], [21.1, 4073.0], [21.2, 4146.0], [21.3, 4178.0], [21.4, 4182.0], [21.5, 4182.0], [21.6, 4203.0], [21.7, 4207.0], [21.8, 4224.0], [21.9, 4266.0], [22.0, 4302.0], [22.1, 4303.0], [22.2, 4343.0], [22.3, 4350.0], [22.4, 4384.0], [22.5, 4540.0], [22.6, 4652.0], [22.7, 4656.0], [22.8, 4660.0], [22.9, 4661.0], [23.0, 4673.0], [23.1, 4704.0], [23.2, 4811.0], [23.3, 4878.0], [23.4, 4929.0], [23.5, 4942.0], [23.6, 4968.0], [23.7, 4993.0], [23.8, 5020.0], [23.9, 5052.0], [24.0, 5084.0], [24.1, 5084.0], [24.2, 5109.0], [24.3, 5115.0], [24.4, 5116.0], [24.5, 5118.0], [24.6, 5133.0], [24.7, 5135.0], [24.8, 5164.0], [24.9, 5169.0], [25.0, 5172.0], [25.1, 5176.0], [25.2, 5201.0], [25.3, 5201.0], [25.4, 5205.0], [25.5, 5207.0], [25.6, 5219.0], [25.7, 5220.0], [25.8, 5226.0], [25.9, 5229.0], [26.0, 5244.0], [26.1, 5304.0], [26.2, 5410.0], [26.3, 5420.0], [26.4, 5470.0], [26.5, 5499.0], [26.6, 5517.0], [26.7, 5579.0], [26.8, 5791.0], [26.9, 5793.0], [27.0, 5816.0], [27.1, 5824.0], [27.2, 5869.0], [27.3, 5873.0], [27.4, 5875.0], [27.5, 5885.0], [27.6, 5892.0], [27.7, 5893.0], [27.8, 5901.0], [27.9, 5902.0], [28.0, 5946.0], [28.1, 6007.0], [28.2, 6014.0], [28.3, 6019.0], [28.4, 6068.0], [28.5, 6069.0], [28.6, 6069.0], [28.7, 6072.0], [28.8, 6090.0], [28.9, 6095.0], [29.0, 6107.0], [29.1, 6109.0], [29.2, 6112.0], [29.3, 6114.0], [29.4, 6124.0], [29.5, 6142.0], [29.6, 6151.0], [29.7, 6164.0], [29.8, 6168.0], [29.9, 6174.0], [30.0, 6179.0], [30.1, 6192.0], [30.2, 6193.0], [30.3, 6203.0], [30.4, 6205.0], [30.5, 6209.0], [30.6, 6210.0], [30.7, 6215.0], [30.8, 6224.0], [30.9, 6225.0], [31.0, 6228.0], [31.1, 6228.0], [31.2, 6238.0], [31.3, 6242.0], [31.4, 6246.0], [31.5, 6248.0], [31.6, 6248.0], [31.7, 6251.0], [31.8, 6254.0], [31.9, 6258.0], [32.0, 6273.0], [32.1, 6276.0], [32.2, 6280.0], [32.3, 6281.0], [32.4, 6283.0], [32.5, 6286.0], [32.6, 6289.0], [32.7, 6289.0], [32.8, 6297.0], [32.9, 6300.0], [33.0, 6304.0], [33.1, 6307.0], [33.2, 6310.0], [33.3, 6319.0], [33.4, 6320.0], [33.5, 6321.0], [33.6, 6323.0], [33.7, 6337.0], [33.8, 6341.0], [33.9, 6343.0], [34.0, 6345.0], [34.1, 6345.0], [34.2, 6345.0], [34.3, 6346.0], [34.4, 6351.0], [34.5, 6351.0], [34.6, 6351.0], [34.7, 6352.0], [34.8, 6361.0], [34.9, 6362.0], [35.0, 6364.0], [35.1, 6369.0], [35.2, 6380.0], [35.3, 6388.0], [35.4, 6400.0], [35.5, 6405.0], [35.6, 6424.0], [35.7, 6425.0], [35.8, 6445.0], [35.9, 6455.0], [36.0, 6463.0], [36.1, 6463.0], [36.2, 6465.0], [36.3, 6468.0], [36.4, 6471.0], [36.5, 6474.0], [36.6, 6479.0], [36.7, 6486.0], [36.8, 6489.0], [36.9, 6489.0], [37.0, 6492.0], [37.1, 6492.0], [37.2, 6494.0], [37.3, 6496.0], [37.4, 6497.0], [37.5, 6500.0], [37.6, 6501.0], [37.7, 6502.0], [37.8, 6503.0], [37.9, 6505.0], [38.0, 6510.0], [38.1, 6514.0], [38.2, 6515.0], [38.3, 6516.0], [38.4, 6519.0], [38.5, 6522.0], [38.6, 6523.0], [38.7, 6523.0], [38.8, 6524.0], [38.9, 6528.0], [39.0, 6529.0], [39.1, 6531.0], [39.2, 6534.0], [39.3, 6536.0], [39.4, 6542.0], [39.5, 6548.0], [39.6, 6551.0], [39.7, 6552.0], [39.8, 6553.0], [39.9, 6563.0], [40.0, 6583.0], [40.1, 6588.0], [40.2, 6598.0], [40.3, 6602.0], [40.4, 6617.0], [40.5, 6622.0], [40.6, 6623.0], [40.7, 6624.0], [40.8, 6626.0], [40.9, 6626.0], [41.0, 6629.0], [41.1, 6630.0], [41.2, 6639.0], [41.3, 6640.0], [41.4, 6644.0], [41.5, 6645.0], [41.6, 6648.0], [41.7, 6650.0], [41.8, 6664.0], [41.9, 6666.0], [42.0, 6667.0], [42.1, 6671.0], [42.2, 6680.0], [42.3, 6682.0], [42.4, 6686.0], [42.5, 6688.0], [42.6, 6689.0], [42.7, 6696.0], [42.8, 6702.0], [42.9, 6709.0], [43.0, 6713.0], [43.1, 6714.0], [43.2, 6715.0], [43.3, 6719.0], [43.4, 6719.0], [43.5, 6729.0], [43.6, 6730.0], [43.7, 6732.0], [43.8, 6733.0], [43.9, 6734.0], [44.0, 6736.0], [44.1, 6736.0], [44.2, 6736.0], [44.3, 6737.0], [44.4, 6740.0], [44.5, 6742.0], [44.6, 6746.0], [44.7, 6749.0], [44.8, 6751.0], [44.9, 6755.0], [45.0, 6760.0], [45.1, 6763.0], [45.2, 6770.0], [45.3, 6775.0], [45.4, 6775.0], [45.5, 6777.0], [45.6, 6780.0], [45.7, 6780.0], [45.8, 6799.0], [45.9, 6814.0], [46.0, 6827.0], [46.1, 6845.0], [46.2, 6848.0], [46.3, 6855.0], [46.4, 6861.0], [46.5, 6868.0], [46.6, 6868.0], [46.7, 6877.0], [46.8, 6883.0], [46.9, 6892.0], [47.0, 6900.0], [47.1, 6904.0], [47.2, 6907.0], [47.3, 6909.0], [47.4, 6920.0], [47.5, 6926.0], [47.6, 6927.0], [47.7, 6933.0], [47.8, 6937.0], [47.9, 6940.0], [48.0, 6945.0], [48.1, 6945.0], [48.2, 6953.0], [48.3, 6958.0], [48.4, 6960.0], [48.5, 6965.0], [48.6, 6976.0], [48.7, 6986.0], [48.8, 7008.0], [48.9, 7012.0], [49.0, 7017.0], [49.1, 7018.0], [49.2, 7019.0], [49.3, 7024.0], [49.4, 7028.0], [49.5, 7034.0], [49.6, 7036.0], [49.7, 7039.0], [49.8, 7043.0], [49.9, 7047.0], [50.0, 7053.0], [50.1, 7077.0], [50.2, 7078.0], [50.3, 7103.0], [50.4, 7155.0], [50.5, 7159.0], [50.6, 7164.0], [50.7, 7166.0], [50.8, 7181.0], [50.9, 7181.0], [51.0, 7182.0], [51.1, 7183.0], [51.2, 7207.0], [51.3, 7209.0], [51.4, 7238.0], [51.5, 7251.0], [51.6, 7265.0], [51.7, 7267.0], [51.8, 7268.0], [51.9, 7278.0], [52.0, 7362.0], [52.1, 7365.0], [52.2, 7380.0], [52.3, 7416.0], [52.4, 7435.0], [52.5, 7442.0], [52.6, 7443.0], [52.7, 7444.0], [52.8, 7453.0], [52.9, 7462.0], [53.0, 7467.0], [53.1, 7484.0], [53.2, 7538.0], [53.3, 7541.0], [53.4, 7558.0], [53.5, 7558.0], [53.6, 7637.0], [53.7, 7656.0], [53.8, 7661.0], [53.9, 7665.0], [54.0, 7678.0], [54.1, 7679.0], [54.2, 7687.0], [54.3, 7697.0], [54.4, 7706.0], [54.5, 7710.0], [54.6, 7713.0], [54.7, 7714.0], [54.8, 7720.0], [54.9, 7726.0], [55.0, 7735.0], [55.1, 7745.0], [55.2, 7746.0], [55.3, 7752.0], [55.4, 7759.0], [55.5, 7769.0], [55.6, 7771.0], [55.7, 7789.0], [55.8, 7839.0], [55.9, 7852.0], [56.0, 7882.0], [56.1, 7886.0], [56.2, 7891.0], [56.3, 7899.0], [56.4, 7906.0], [56.5, 7907.0], [56.6, 7917.0], [56.7, 7928.0], [56.8, 7940.0], [56.9, 7940.0], [57.0, 7947.0], [57.1, 7955.0], [57.2, 7958.0], [57.3, 7959.0], [57.4, 7962.0], [57.5, 7965.0], [57.6, 7970.0], [57.7, 7972.0], [57.8, 7979.0], [57.9, 7990.0], [58.0, 7992.0], [58.1, 7993.0], [58.2, 7994.0], [58.3, 8004.0], [58.4, 8036.0], [58.5, 8037.0], [58.6, 8038.0], [58.7, 8043.0], [58.8, 8046.0], [58.9, 8047.0], [59.0, 8056.0], [59.1, 8062.0], [59.2, 8064.0], [59.3, 8066.0], [59.4, 8067.0], [59.5, 8068.0], [59.6, 8069.0], [59.7, 8070.0], [59.8, 8071.0], [59.9, 8083.0], [60.0, 8085.0], [60.1, 8086.0], [60.2, 8090.0], [60.3, 8091.0], [60.4, 8100.0], [60.5, 8104.0], [60.6, 8106.0], [60.7, 8111.0], [60.8, 8116.0], [60.9, 8117.0], [61.0, 8128.0], [61.1, 8134.0], [61.2, 8143.0], [61.3, 8149.0], [61.4, 8162.0], [61.5, 8163.0], [61.6, 8192.0], [61.7, 8194.0], [61.8, 8196.0], [61.9, 8210.0], [62.0, 8218.0], [62.1, 8219.0], [62.2, 8241.0], [62.3, 8251.0], [62.4, 8263.0], [62.5, 8266.0], [62.6, 8284.0], [62.7, 8286.0], [62.8, 8331.0], [62.9, 8338.0], [63.0, 8355.0], [63.1, 8355.0], [63.2, 8361.0], [63.3, 8362.0], [63.4, 8363.0], [63.5, 8370.0], [63.6, 8382.0], [63.7, 8391.0], [63.8, 8392.0], [63.9, 8396.0], [64.0, 8400.0], [64.1, 8401.0], [64.2, 8401.0], [64.3, 8425.0], [64.4, 8430.0], [64.5, 8431.0], [64.6, 8432.0], [64.7, 8433.0], [64.8, 8447.0], [64.9, 8449.0], [65.0, 8473.0], [65.1, 8476.0], [65.2, 8486.0], [65.3, 8493.0], [65.4, 8504.0], [65.5, 8505.0], [65.6, 8510.0], [65.7, 8527.0], [65.8, 8533.0], [65.9, 8537.0], [66.0, 8539.0], [66.1, 8547.0], [66.2, 8551.0], [66.3, 8551.0], [66.4, 8571.0], [66.5, 8572.0], [66.6, 8577.0], [66.7, 8583.0], [66.8, 8612.0], [66.9, 8626.0], [67.0, 8633.0], [67.1, 8641.0], [67.2, 8660.0], [67.3, 8661.0], [67.4, 8664.0], [67.5, 8677.0], [67.6, 8738.0], [67.7, 8747.0], [67.8, 8752.0], [67.9, 8761.0], [68.0, 8810.0], [68.1, 8854.0], [68.2, 8869.0], [68.3, 8884.0], [68.4, 8963.0], [68.5, 8975.0], [68.6, 8977.0], [68.7, 8979.0], [68.8, 9018.0], [68.9, 9036.0], [69.0, 9037.0], [69.1, 9040.0], [69.2, 9046.0], [69.3, 9060.0], [69.4, 9066.0], [69.5, 9101.0], [69.6, 9158.0], [69.7, 9195.0], [69.8, 9196.0], [69.9, 9216.0], [70.0, 9244.0], [70.1, 9314.0], [70.2, 9349.0], [70.3, 9373.0], [70.4, 9404.0], [70.5, 9404.0], [70.6, 9405.0], [70.7, 9411.0], [70.8, 9429.0], [70.9, 9429.0], [71.0, 9431.0], [71.1, 9442.0], [71.2, 9473.0], [71.3, 9482.0], [71.4, 9486.0], [71.5, 9491.0], [71.6, 9510.0], [71.7, 9518.0], [71.8, 9534.0], [71.9, 9534.0], [72.0, 9561.0], [72.1, 9562.0], [72.2, 9567.0], [72.3, 9570.0], [72.4, 9578.0], [72.5, 9580.0], [72.6, 9580.0], [72.7, 9591.0], [72.8, 9598.0], [72.9, 9598.0], [73.0, 9599.0], [73.1, 9599.0], [73.2, 9604.0], [73.3, 9609.0], [73.4, 9610.0], [73.5, 9611.0], [73.6, 9625.0], [73.7, 9627.0], [73.8, 9642.0], [73.9, 9660.0], [74.0, 9695.0], [74.1, 9707.0], [74.2, 9718.0], [74.3, 9726.0], [74.4, 9732.0], [74.5, 9740.0], [74.6, 9743.0], [74.7, 9747.0], [74.8, 9752.0], [74.9, 9756.0], [75.0, 9760.0], [75.1, 9761.0], [75.2, 9776.0], [75.3, 9780.0], [75.4, 9784.0], [75.5, 9798.0], [75.6, 9832.0], [75.7, 9833.0], [75.8, 9836.0], [75.9, 9837.0], [76.0, 9867.0], [76.1, 9870.0], [76.2, 9871.0], [76.3, 9888.0], [76.4, 9917.0], [76.5, 9936.0], [76.6, 9936.0], [76.7, 9937.0], [76.8, 9948.0], [76.9, 9948.0], [77.0, 9954.0], [77.1, 9970.0], [77.2, 9985.0], [77.3, 9985.0], [77.4, 9986.0], [77.5, 9986.0], [77.6, 9994.0], [77.7, 9996.0], [77.8, 10009.0], [77.9, 10011.0], [78.0, 10026.0], [78.1, 10032.0], [78.2, 10035.0], [78.3, 10057.0], [78.4, 10070.0], [78.5, 10072.0], [78.6, 10074.0], [78.7, 10076.0], [78.8, 10087.0], [78.9, 10090.0], [79.0, 10090.0], [79.1, 10095.0], [79.2, 10110.0], [79.3, 10112.0], [79.4, 10117.0], [79.5, 10118.0], [79.6, 10120.0], [79.7, 10126.0], [79.8, 10126.0], [79.9, 10129.0], [80.0, 10133.0], [80.1, 10135.0], [80.2, 10139.0], [80.3, 10142.0], [80.4, 10152.0], [80.5, 10154.0], [80.6, 10154.0], [80.7, 10159.0], [80.8, 10166.0], [80.9, 10171.0], [81.0, 10172.0], [81.1, 10174.0], [81.2, 10180.0], [81.3, 10183.0], [81.4, 10183.0], [81.5, 10187.0], [81.6, 10197.0], [81.7, 10205.0], [81.8, 10205.0], [81.9, 10214.0], [82.0, 10239.0], [82.1, 10247.0], [82.2, 10255.0], [82.3, 10260.0], [82.4, 10270.0], [82.5, 10280.0], [82.6, 10282.0], [82.7, 10290.0], [82.8, 10297.0], [82.9, 10310.0], [83.0, 10313.0], [83.1, 10317.0], [83.2, 10324.0], [83.3, 10329.0], [83.4, 10335.0], [83.5, 10348.0], [83.6, 10373.0], [83.7, 10385.0], [83.8, 10392.0], [83.9, 10415.0], [84.0, 10421.0], [84.1, 10432.0], [84.2, 10435.0], [84.3, 10448.0], [84.4, 10450.0], [84.5, 10452.0], [84.6, 10461.0], [84.7, 10464.0], [84.8, 10501.0], [84.9, 10503.0], [85.0, 10509.0], [85.1, 10530.0], [85.2, 10543.0], [85.3, 10547.0], [85.4, 10555.0], [85.5, 10558.0], [85.6, 10577.0], [85.7, 10579.0], [85.8, 10590.0], [85.9, 10595.0], [86.0, 10600.0], [86.1, 10605.0], [86.2, 10611.0], [86.3, 10612.0], [86.4, 10621.0], [86.5, 10637.0], [86.6, 10646.0], [86.7, 10650.0], [86.8, 10673.0], [86.9, 10678.0], [87.0, 10679.0], [87.1, 10680.0], [87.2, 10685.0], [87.3, 10690.0], [87.4, 10694.0], [87.5, 10695.0], [87.6, 10705.0], [87.7, 10715.0], [87.8, 10720.0], [87.9, 10721.0], [88.0, 10729.0], [88.1, 10730.0], [88.2, 10732.0], [88.3, 10733.0], [88.4, 10750.0], [88.5, 10760.0], [88.6, 10772.0], [88.7, 10776.0], [88.8, 10786.0], [88.9, 10788.0], [89.0, 10799.0], [89.1, 10799.0], [89.2, 10807.0], [89.3, 10813.0], [89.4, 10817.0], [89.5, 10821.0], [89.6, 10834.0], [89.7, 10840.0], [89.8, 10840.0], [89.9, 10840.0], [90.0, 10843.0], [90.1, 10848.0], [90.2, 10857.0], [90.3, 10858.0], [90.4, 10866.0], [90.5, 10868.0], [90.6, 10873.0], [90.7, 10875.0], [90.8, 10887.0], [90.9, 10890.0], [91.0, 10890.0], [91.1, 10893.0], [91.2, 10899.0], [91.3, 10900.0], [91.4, 10913.0], [91.5, 10913.0], [91.6, 10918.0], [91.7, 10930.0], [91.8, 10937.0], [91.9, 10944.0], [92.0, 10948.0], [92.1, 10951.0], [92.2, 10955.0], [92.3, 10955.0], [92.4, 10966.0], [92.5, 10970.0], [92.6, 10992.0], [92.7, 11000.0], [92.8, 11005.0], [92.9, 11012.0], [93.0, 11023.0], [93.1, 11042.0], [93.2, 11062.0], [93.3, 11064.0], [93.4, 11068.0], [93.5, 11070.0], [93.6, 11088.0], [93.7, 11088.0], [93.8, 11093.0], [93.9, 11099.0], [94.0, 11133.0], [94.1, 11143.0], [94.2, 11150.0], [94.3, 11163.0], [94.4, 11174.0], [94.5, 11192.0], [94.6, 11225.0], [94.7, 11227.0], [94.8, 11272.0], [94.9, 11281.0], [95.0, 11286.0], [95.1, 11288.0], [95.2, 11315.0], [95.3, 11324.0], [95.4, 11329.0], [95.5, 11332.0], [95.6, 11350.0], [95.7, 11357.0], [95.8, 11364.0], [95.9, 11376.0], [96.0, 11393.0], [96.1, 11402.0], [96.2, 11404.0], [96.3, 11405.0], [96.4, 11430.0], [96.5, 11485.0], [96.6, 11488.0], [96.7, 11490.0], [96.8, 11521.0], [96.9, 11531.0], [97.0, 11551.0], [97.1, 11556.0], [97.2, 11582.0], [97.3, 11591.0], [97.4, 11594.0], [97.5, 11602.0], [97.6, 11628.0], [97.7, 11635.0], [97.8, 11641.0], [97.9, 11646.0], [98.0, 11668.0], [98.1, 11673.0], [98.2, 11683.0], [98.3, 11690.0], [98.4, 13775.0], [98.5, 13787.0], [98.6, 13800.0], [98.7, 13802.0], [98.8, 13822.0], [98.9, 13835.0], [99.0, 13945.0], [99.1, 13964.0], [99.2, 14292.0], [99.3, 14329.0], [99.4, 14569.0], [99.5, 14643.0], [99.6, 38673.0], [99.7, 38699.0], [99.8, 38701.0], [99.9, 38760.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 62.0, "series": [{"data": [[100.0, 62.0], [38700.0, 2.0], [39100.0, 1.0], [200.0, 9.0], [300.0, 14.0], [400.0, 3.0], [500.0, 2.0], [600.0, 1.0], [700.0, 1.0], [1100.0, 1.0], [1200.0, 2.0], [1300.0, 1.0], [1800.0, 3.0], [1900.0, 1.0], [2000.0, 8.0], [2100.0, 2.0], [2200.0, 9.0], [2300.0, 6.0], [2400.0, 6.0], [2500.0, 8.0], [2600.0, 11.0], [2700.0, 8.0], [2800.0, 6.0], [2900.0, 7.0], [3000.0, 7.0], [3100.0, 12.0], [3200.0, 10.0], [3300.0, 3.0], [3400.0, 11.0], [3500.0, 3.0], [3600.0, 19.0], [3700.0, 8.0], [3800.0, 5.0], [3900.0, 8.0], [4000.0, 7.0], [4100.0, 6.0], [4200.0, 5.0], [4300.0, 6.0], [4600.0, 6.0], [4500.0, 1.0], [4800.0, 3.0], [4700.0, 1.0], [4900.0, 5.0], [5000.0, 5.0], [5100.0, 13.0], [5200.0, 11.0], [5300.0, 1.0], [5400.0, 5.0], [5500.0, 2.0], [5600.0, 1.0], [5800.0, 10.0], [5700.0, 2.0], [6000.0, 11.0], [5900.0, 4.0], [6100.0, 16.0], [6300.0, 31.0], [6200.0, 33.0], [6500.0, 35.0], [6600.0, 32.0], [6400.0, 26.0], [6700.0, 38.0], [6900.0, 22.0], [6800.0, 14.0], [7000.0, 19.0], [7100.0, 11.0], [7200.0, 10.0], [7300.0, 4.0], [7400.0, 11.0], [7500.0, 5.0], [7600.0, 10.0], [7700.0, 18.0], [7800.0, 7.0], [7900.0, 24.0], [8000.0, 27.0], [8100.0, 18.0], [8200.0, 11.0], [8300.0, 16.0], [8400.0, 17.0], [8500.0, 18.0], [8600.0, 9.0], [8700.0, 6.0], [8800.0, 4.0], [8900.0, 5.0], [9000.0, 9.0], [9100.0, 5.0], [9200.0, 3.0], [9300.0, 4.0], [9400.0, 14.0], [9500.0, 20.0], [9600.0, 12.0], [9700.0, 18.0], [9800.0, 11.0], [9900.0, 17.0], [10000.0, 17.0], [10100.0, 32.0], [10200.0, 15.0], [10300.0, 12.0], [10400.0, 12.0], [10500.0, 15.0], [10600.0, 19.0], [10700.0, 20.0], [10800.0, 27.0], [10900.0, 17.0], [11000.0, 16.0], [11100.0, 8.0], [11200.0, 7.0], [11300.0, 12.0], [11400.0, 8.0], [11500.0, 9.0], [11600.0, 11.0], [12800.0, 1.0], [13800.0, 5.0], [13700.0, 2.0], [14200.0, 1.0], [14300.0, 1.0], [13900.0, 2.0], [14000.0, 1.0], [14600.0, 2.0], [14500.0, 1.0], [38600.0, 2.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 39100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1149.0, "series": [{"data": [[0.0, 88.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 8.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1149.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 626.8328000000005, "minX": 1.75566456E12, "maxY": 626.8328000000005, "series": [{"data": [[1.75566456E12, 626.8328000000005]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566456E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 118.0, "minX": 1.0, "maxY": 39118.0, "series": [{"data": [[5.0, 38708.25], [6.0, 13822.0], [7.0, 12808.0], [8.0, 13811.0], [9.0, 14569.0], [11.0, 14029.0], [13.0, 13787.0], [14.0, 14294.0], [15.0, 13800.0], [19.0, 14057.75], [20.0, 13802.0], [21.0, 14649.0], [22.0, 11660.0], [23.0, 11227.0], [26.0, 11068.333333333334], [27.0, 11023.0], [28.0, 10843.0], [29.0, 10873.0], [30.0, 11051.0], [31.0, 10841.0], [33.0, 10290.0], [32.0, 11605.0], [34.0, 11641.0], [37.0, 11364.0], [36.0, 11160.0], [39.0, 11690.0], [38.0, 10914.0], [41.0, 11265.5], [43.0, 11268.0], [45.0, 11673.0], [44.0, 11170.0], [47.0, 10893.0], [46.0, 11668.0], [49.0, 11329.0], [48.0, 10817.0], [50.0, 10162.0], [53.0, 11594.0], [52.0, 10981.5], [55.0, 10203.5], [57.0, 11005.0], [56.0, 9518.0], [59.0, 11635.0], [58.0, 11393.0], [61.0, 10799.0], [60.0, 10840.0], [63.0, 11068.0], [62.0, 11628.0], [67.0, 10733.0], [66.0, 10720.0], [65.0, 11602.0], [64.0, 10807.0], [71.0, 11430.0], [70.0, 11591.0], [69.0, 10834.0], [68.0, 11582.0], [75.0, 10776.0], [74.0, 11559.0], [73.0, 10868.0], [72.0, 8111.0], [79.0, 10715.0], [78.0, 10840.0], [77.0, 10857.0], [76.0, 11556.0], [81.0, 11531.0], [80.0, 11272.0], [87.0, 11225.0], [86.0, 11243.0], [85.0, 11490.0], [84.0, 11050.666666666666], [90.0, 10760.0], [89.0, 10951.5], [95.0, 11088.0], [94.0, 10680.0], [93.0, 10858.0], [92.0, 11330.0], [99.0, 10673.0], [98.0, 11521.0], [97.0, 10653.0], [96.0, 10705.0], [103.0, 11150.0], [102.0, 10577.0], [101.0, 10955.0], [100.0, 10813.0], [107.0, 11088.0], [106.0, 11135.5], [104.0, 11402.0], [111.0, 10824.0], [109.0, 9866.0], [115.0, 10650.0], [114.0, 11485.0], [113.0, 11421.0], [112.0, 10611.0], [119.0, 8738.0], [118.0, 11288.0], [117.0, 11070.0], [116.0, 10730.0], [123.0, 10116.5], [121.0, 10732.0], [120.0, 9562.0], [127.0, 10579.0], [126.0, 10706.0], [124.0, 11348.0], [135.0, 11315.0], [134.0, 9882.0], [132.0, 10599.0], [131.0, 11303.0], [130.0, 11385.0], [129.0, 10621.0], [128.0, 11404.0], [143.0, 10646.0], [142.0, 11350.0], [141.0, 11218.0], [139.0, 10875.0], [138.0, 10992.0], [137.0, 11286.0], [136.0, 7979.0], [151.0, 8217.0], [150.0, 11000.0], [149.0, 10062.0], [146.0, 11064.0], [145.0, 11332.0], [144.0, 11324.0], [159.0, 10575.0], [158.0, 10532.0], [157.0, 10970.0], [156.0, 11281.0], [155.0, 10605.0], [154.0, 10672.5], [152.0, 10600.0], [167.0, 10421.0], [166.0, 11192.0], [165.0, 8884.0], [164.0, 11099.0], [163.0, 11133.0], [162.0, 9740.0], [161.0, 10530.0], [160.0, 10621.0], [174.0, 10266.0], [173.0, 11042.0], [172.0, 10452.0], [171.0, 10432.0], [170.0, 10296.0], [169.0, 10799.0], [168.0, 10899.0], [181.0, 11062.0], [180.0, 11093.0], [179.0, 10297.0], [178.0, 10282.0], [177.0, 10685.0], [176.0, 10646.0], [191.0, 10555.0], [190.0, 10930.0], [189.0, 10329.0], [188.0, 10755.5], [186.0, 11005.0], [185.0, 10543.0], [184.0, 9483.666666666666], [199.0, 10955.0], [198.0, 10900.0], [197.0, 10541.5], [195.0, 10154.0], [194.0, 10482.0], [193.0, 10806.0], [192.0, 10348.0], [207.0, 10152.0], [206.0, 10702.0], [205.0, 10497.0], [203.0, 9985.0], [202.0, 10698.5], [200.0, 10415.0], [215.0, 10327.5], [213.0, 10866.0], [212.0, 10197.0], [211.0, 10944.0], [210.0, 10809.5], [208.0, 8286.0], [223.0, 10118.0], [222.0, 8116.0], [221.0, 9296.5], [219.0, 10811.5], [217.0, 10821.0], [216.0, 10112.0], [230.0, 10547.0], [229.0, 10159.0], [228.0, 9996.0], [227.0, 10082.0], [226.0, 10009.0], [225.0, 10894.0], [224.0, 10187.0], [239.0, 10180.0], [238.0, 10133.0], [237.0, 10032.0], [236.0, 9986.0], [235.0, 10464.0], [234.0, 10417.0], [233.0, 10373.0], [232.0, 10411.5], [247.0, 10120.0], [246.0, 10129.0], [245.0, 7891.0], [244.0, 10005.5], [242.0, 10165.5], [240.0, 10070.0], [255.0, 9836.0], [254.0, 10072.0], [253.0, 10637.0], [252.0, 9986.0], [251.0, 10772.0], [250.0, 10247.0], [249.0, 10694.0], [248.0, 10786.0], [270.0, 10509.0], [271.0, 9752.0], [269.0, 10448.0], [268.0, 9835.0], [266.0, 10590.0], [265.0, 8210.0], [264.0, 9867.0], [263.0, 10095.0], [256.0, 10205.0], [259.0, 10558.0], [258.0, 9378.5], [262.0, 9970.0], [261.0, 8004.0], [260.0, 9936.0], [287.0, 9962.75], [283.0, 9642.5], [281.0, 10142.0], [280.0, 10064.0], [279.0, 10280.5], [273.0, 9591.0], [272.0, 9599.0], [277.0, 9948.0], [276.0, 10450.0], [275.0, 10461.0], [274.0, 10355.0], [291.0, 9580.0], [303.0, 9747.0], [302.0, 10118.0], [299.0, 10090.0], [298.0, 9595.0], [297.0, 10167.5], [295.0, 10102.0], [294.0, 9604.5], [292.0, 9534.0], [290.0, 9821.5], [288.0, 9660.0], [307.0, 10090.0], [318.0, 10238.0], [317.0, 10026.5], [315.0, 9141.0], [313.0, 9917.0], [312.0, 9534.0], [311.0, 9623.0], [310.0, 9486.0], [309.0, 9506.0], [306.0, 10023.0], [305.0, 9746.0], [323.0, 10174.0], [334.0, 10260.0], [333.0, 9596.0], [331.0, 9937.0], [330.0, 9600.0], [329.0, 10013.0], [327.0, 9866.5], [325.0, 9429.0], [324.0, 9598.0], [322.0, 10110.0], [321.0, 10183.0], [320.0, 10115.0], [350.0, 10172.0], [351.0, 10171.0], [348.0, 10183.0], [339.0, 9842.0], [338.0, 9380.0], [337.0, 10255.0], [336.0, 9486.0], [347.0, 9815.0], [345.0, 9732.0], [344.0, 9429.0], [343.0, 10214.0], [342.0, 9897.0], [341.0, 9871.0], [340.0, 9570.0], [366.0, 10120.0], [367.0, 9610.0], [365.0, 7012.0], [364.0, 9562.5], [362.0, 9578.0], [361.0, 10126.0], [360.0, 8816.0], [358.0, 10035.0], [353.0, 9789.5], [352.0, 9609.0], [355.0, 10145.0], [354.0, 10135.0], [357.0, 10139.0], [356.0, 9780.0], [382.0, 9994.0], [383.0, 7759.0], [381.0, 9195.0], [380.0, 8134.0], [379.0, 9942.0], [378.0, 10057.0], [377.0, 9784.0], [376.0, 6689.0], [375.0, 9373.0], [371.0, 9569.666666666666], [368.0, 9954.0], [374.0, 8770.0], [386.0, 9454.0], [399.0, 9726.0], [398.0, 9290.0], [394.0, 9760.0], [393.0, 9482.0], [390.0, 9695.0], [389.0, 9798.0], [388.0, 9713.0], [385.0, 8396.0], [384.0, 9948.0], [402.0, 8761.0], [414.0, 9046.0], [413.0, 9197.666666666666], [410.0, 9006.0], [409.0, 9314.0], [408.0, 8310.0], [405.0, 6095.0], [404.0, 7428.0], [401.0, 9580.0], [400.0, 9642.0], [430.0, 8851.5], [428.0, 8594.0], [427.0, 8751.0], [426.0, 8910.0], [423.0, 8167.0], [421.0, 9101.0], [420.0, 8862.5], [417.0, 9060.0], [416.0, 8799.0], [447.0, 8475.333333333334], [444.0, 8612.0], [443.0, 8633.333333333334], [440.0, 8376.0], [438.0, 8392.0], [437.0, 8473.0], [436.0, 8836.333333333334], [434.0, 8854.0], [432.0, 8977.0], [462.0, 8116.0], [460.0, 8095.333333333333], [456.0, 8356.4], [454.0, 8401.0], [451.0, 8106.0], [449.0, 8608.0], [478.0, 8096.0], [474.0, 8067.0], [471.0, 8505.0], [468.0, 8316.333333333332], [466.0, 8527.0], [465.0, 8090.0], [488.0, 8067.0], [485.0, 8257.714285714284], [482.0, 8066.0], [480.0, 8435.4], [483.0, 8538.0], [509.0, 8218.0], [507.0, 8284.0], [504.0, 8362.0], [502.0, 8111.333333333333], [501.0, 8378.0], [499.0, 8483.0], [497.0, 8296.625], [496.0, 8069.0], [540.0, 8218.0], [541.0, 8128.0], [528.0, 8303.0], [539.0, 7771.0], [538.0, 7538.0], [537.0, 7558.0], [536.0, 8328.0], [527.0, 8169.166666666667], [517.0, 7992.0], [516.0, 8433.0], [526.0, 7710.0], [525.0, 7940.0], [523.0, 7992.0], [535.0, 8196.0], [534.0, 7817.0], [533.0, 7985.333333333333], [529.0, 8401.0], [571.0, 7722.0], [575.0, 7618.0], [569.0, 7182.0], [568.0, 7895.0], [565.0, 7674.5], [563.0, 7940.0], [560.0, 7942.0], [558.0, 7947.0], [545.0, 8193.0], [547.0, 8171.0], [546.0, 7878.0], [550.0, 7927.5], [548.0, 8036.0], [557.0, 8056.0], [556.0, 8083.0], [555.0, 7665.0], [554.0, 7994.0], [553.0, 8083.333333333333], [607.0, 7160.0], [605.0, 7574.666666666666], [599.0, 7338.333333333333], [598.0, 7745.0], [597.0, 7728.333333333333], [592.0, 7469.777777777777], [588.0, 7442.0], [584.0, 7561.0], [580.0, 7047.0], [579.0, 7744.5], [578.0, 7626.5], [634.0, 6909.0], [638.0, 6803.5], [636.0, 6926.0], [635.0, 6959.0], [633.0, 7078.666666666666], [615.0, 7297.0], [613.0, 7299.0], [610.0, 7420.5], [608.0, 6941.0], [627.0, 7205.8], [622.0, 6965.0], [621.0, 7207.0], [618.0, 6927.0], [617.0, 7159.0], [616.0, 7077.0], [667.0, 6765.0], [670.0, 6892.0], [666.0, 6752.0], [664.0, 7238.0], [663.0, 6568.0], [662.0, 6733.0], [661.0, 7265.0], [656.0, 6736.0], [655.0, 6890.166666666667], [642.0, 6971.75], [654.0, 6959.0], [701.0, 6515.0], [698.0, 6724.5], [674.0, 6742.0], [672.0, 6787.714285714286], [695.0, 6814.5], [692.0, 6892.333333333333], [691.0, 6751.0], [690.0, 6622.0], [689.0, 6715.0], [687.0, 6755.0], [685.0, 6903.5], [682.0, 6495.333333333333], [681.0, 6777.0], [680.0, 6528.333333333333], [733.0, 6708.8], [725.0, 6725.166666666667], [724.0, 6455.0], [723.0, 6405.0], [711.0, 6686.0], [710.0, 6792.799999999999], [704.0, 6659.5], [763.0, 6648.0], [765.0, 6364.0], [761.0, 6488.5], [760.0, 6308.0], [757.0, 6562.333333333332], [755.0, 6378.333333333333], [753.0, 6634.0], [744.0, 6547.5], [738.0, 6486.0], [736.0, 6664.0], [740.0, 6576.333333333333], [739.0, 6600.2], [798.0, 6497.0], [799.0, 6623.5], [796.0, 6283.0], [795.0, 6369.0], [794.0, 6527.333333333333], [792.0, 6345.0], [783.0, 6937.0], [768.0, 6457.5], [782.0, 6630.0], [781.0, 6515.0], [779.0, 6736.0], [778.0, 7043.0], [790.0, 6542.666666666667], [789.0, 6484.5], [785.0, 6586.0], [784.0, 6629.0], [826.0, 6671.5], [829.0, 6258.0], [825.0, 6820.5], [824.0, 6676.5], [820.0, 6508.0], [822.0, 6215.0], [819.0, 6221.0], [815.0, 6479.0], [802.0, 6289.4], [806.0, 6485.0], [804.0, 6540.4], [814.0, 6696.0], [813.0, 6421.5], [812.0, 6667.0], [811.0, 6248.0], [809.0, 6434.5], [847.0, 6272.0], [863.0, 6252.124999999999], [857.0, 6179.0], [854.0, 6553.0], [846.0, 6463.0], [845.0, 6639.0], [844.0, 6450.75], [842.0, 6321.0], [839.0, 6345.0], [838.0, 6366.5], [836.0, 6351.0], [833.0, 6475.6], [832.0, 6427.0], [894.0, 6091.5], [892.0, 6115.4], [870.0, 6215.0], [868.0, 6488.5], [866.0, 6763.0], [865.0, 6109.5], [887.0, 6120.0], [885.0, 5889.0], [884.0, 6392.0], [882.0, 5980.5], [878.0, 6002.666666666667], [874.0, 6014.0], [873.0, 6270.666666666667], [924.0, 4704.0], [927.0, 4716.0], [913.0, 5816.0], [912.0, 6320.0], [923.0, 5217.0], [922.0, 3252.0], [921.0, 5579.0], [920.0, 2584.0], [911.0, 6321.0], [899.0, 5981.666666666667], [896.0, 6195.5], [901.0, 6078.0], [900.0, 6300.0], [903.0, 6026.0], [902.0, 6205.0], [910.0, 5885.0], [909.0, 6351.0], [908.0, 6043.5], [906.0, 5854.333333333333], [918.0, 4929.0], [917.0, 3873.0], [915.0, 6090.0], [914.0, 5901.0], [956.0, 5043.0], [946.0, 5164.0], [958.0, 3210.0], [959.0, 5052.0], [945.0, 5205.0], [944.0, 5499.0], [957.0, 5517.0], [952.0, 4656.0], [935.0, 3680.0], [934.0, 3749.0], [933.0, 3702.0], [932.0, 3998.0], [931.0, 4182.0], [930.0, 4789.0], [928.0, 4673.0], [941.0, 5292.5], [939.0, 3659.5], [937.0, 3677.0], [951.0, 5054.0], [950.0, 4661.0], [949.0, 5133.0], [985.0, 2397.0], [990.0, 5201.0], [991.0, 5304.0], [976.0, 5084.0], [978.0, 5189.0], [977.0, 5172.0], [981.0, 4993.0], [980.0, 4072.5], [989.0, 2017.5], [987.0, 2302.0], [986.0, 2310.0], [984.0, 5429.0], [966.0, 4162.5], [964.0, 5207.0], [963.0, 3148.0], [962.0, 3162.5], [960.0, 5140.0], [975.0, 5247.0], [973.0, 5176.0], [972.0, 5219.5], [970.0, 2788.0], [969.0, 2964.0], [968.0, 2900.5], [983.0, 2576.0], [982.0, 2757.0], [1020.0, 3834.0], [1023.0, 3695.0], [1008.0, 4248.0], [1010.0, 4384.0], [1009.0, 4073.0], [1013.0, 4207.0], [1011.0, 4182.0], [1022.0, 3753.0], [1021.0, 3685.0], [1019.0, 3745.0], [1018.0, 4178.0], [1017.0, 4224.0], [1016.0, 3879.0], [1006.0, 4652.0], [994.0, 4811.0], [993.0, 5037.0], [996.0, 4968.0], [995.0, 4803.0], [999.0, 4947.0], [998.0, 5039.5], [1005.0, 4302.0], [1004.0, 3921.0], [1003.0, 4294.5], [1001.0, 4540.0], [1000.0, 4343.0], [1015.0, 4266.0], [1014.0, 4259.0], [1076.0, 2889.0], [1084.0, 3679.0], [1058.0, 3657.0], [1056.0, 3747.3333333333335], [1060.0, 3045.0], [1062.0, 1177.0], [1064.0, 3632.0], [1070.0, 3563.0], [1086.0, 2800.0], [1082.0, 3709.0], [1074.0, 3022.0], [1072.0, 3421.0], [1038.0, 4030.0], [1036.0, 3572.0], [1030.0, 3972.0], [1028.0, 3962.0], [1052.0, 3636.0], [1050.0, 3689.0], [1048.0, 3606.0], [1046.0, 3517.5], [1042.0, 3172.0], [1142.0, 2746.0], [1138.0, 781.0], [1120.0, 120.0], [1126.0, 149.5], [1128.0, 153.0], [1130.0, 148.0], [1132.0, 148.0], [1134.0, 289.0], [1148.0, 411.0], [1146.0, 520.0], [1144.0, 2805.0], [1136.0, 3084.0], [1088.0, 199.0], [1090.0, 161.0], [1094.0, 1632.0], [1092.0, 3133.0], [1096.0, 162.0], [1098.0, 3052.0], [1100.0, 145.0], [1118.0, 3205.0], [1116.0, 141.0], [1112.0, 135.0], [1110.0, 3207.0], [1108.0, 3238.0], [1106.0, 3155.0], [1104.0, 146.0], [1206.0, 204.0], [1212.0, 175.0], [1186.0, 2408.0], [1190.0, 2336.5], [1192.0, 2074.0], [1194.0, 193.0], [1196.0, 670.0], [1198.0, 2291.0], [1214.0, 2002.0], [1208.0, 247.0], [1204.0, 2303.0], [1200.0, 2273.0], [1152.0, 2599.5], [1154.0, 2505.5], [1158.0, 362.0], [1160.0, 2659.0], [1162.0, 430.0], [1166.0, 2671.0], [1182.0, 2587.0], [1180.0, 2576.0], [1178.0, 444.0], [1176.0, 311.0], [1174.0, 2607.0], [1172.0, 2577.0], [1170.0, 2748.5], [1168.0, 2675.0], [1220.0, 149.0], [1250.0, 135.0], [1246.0, 139.0], [1216.0, 216.0], [1218.0, 218.0], [1222.0, 163.0], [1224.0, 131.0], [1228.0, 145.0], [1230.0, 139.0], [1244.0, 128.0], [1242.0, 1276.0], [1238.0, 189.0], [1236.0, 321.0], [1234.0, 121.0], [1232.0, 344.0], [1081.0, 3339.5], [1061.0, 3850.0], [1087.0, 177.0], [1059.0, 3947.0], [1063.0, 3421.0], [1067.0, 3439.0], [1065.0, 3261.0], [1071.0, 3420.0], [1085.0, 3643.0], [1083.0, 3176.0], [1077.0, 3149.0], [1075.0, 3263.0], [1073.0, 3243.0], [1037.0, 3769.5], [1033.0, 3885.3333333333335], [1029.0, 3463.0], [1027.0, 3880.0], [1025.0, 3636.5], [1053.0, 3693.0], [1051.0, 3651.0], [1049.0, 3943.0], [1047.0, 3166.0], [1045.0, 3701.0], [1041.0, 3543.6666666666665], [1147.0, 2822.0], [1151.0, 2773.0], [1123.0, 148.5], [1121.0, 157.0], [1127.0, 154.5], [1129.0, 152.0], [1131.0, 141.0], [1133.0, 2604.0], [1135.0, 2617.0], [1149.0, 511.0], [1145.0, 334.0], [1143.0, 392.0], [1141.0, 2987.5], [1139.0, 1280.0], [1137.0, 399.0], [1119.0, 133.0], [1091.0, 157.0], [1095.0, 156.0], [1097.0, 157.0], [1099.0, 142.0], [1103.0, 1712.5], [1101.0, 154.0], [1117.0, 2698.0], [1115.0, 1663.0], [1113.0, 167.0], [1111.0, 140.0], [1109.0, 149.0], [1107.0, 2941.0], [1105.0, 158.0], [1211.0, 199.0], [1203.0, 2183.0], [1215.0, 208.0], [1185.0, 2382.5], [1187.0, 380.0], [1191.0, 2143.5], [1193.0, 2408.0], [1195.0, 2441.0], [1197.0, 1830.0], [1199.0, 1821.0], [1213.0, 157.0], [1209.0, 1377.0], [1207.0, 2052.0], [1205.0, 2213.0], [1201.0, 2071.0], [1183.0, 2376.0], [1155.0, 2825.0], [1157.0, 2435.0], [1159.0, 2720.0], [1161.0, 2788.0], [1165.0, 2435.5], [1163.0, 2996.0], [1167.0, 2650.0], [1181.0, 2273.0], [1177.0, 335.0], [1175.0, 2596.0], [1173.0, 319.0], [1171.0, 2122.0], [1221.0, 1821.0], [1245.0, 186.0], [1249.0, 292.25], [1217.0, 176.0], [1219.0, 155.0], [1223.0, 161.0], [1227.0, 174.0], [1225.0, 128.0], [1229.0, 134.0], [1231.0, 128.0], [1243.0, 118.0], [1241.0, 121.0], [1239.0, 204.0], [1237.0, 193.0], [1235.0, 321.0], [1233.0, 136.0], [1.0, 39118.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[626.8312000000013, 7134.090399999998]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14534.916666666666, "minX": 1.75566456E12, "maxY": 8958063.6, "series": [{"data": [[1.75566456E12, 14534.916666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75566456E12, 8958063.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566456E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7134.090399999998, "minX": 1.75566456E12, "maxY": 7134.090399999998, "series": [{"data": [[1.75566456E12, 7134.090399999998]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566456E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6978.8840000000055, "minX": 1.75566456E12, "maxY": 6978.8840000000055, "series": [{"data": [[1.75566456E12, 6978.8840000000055]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566456E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3708.3320000000035, "minX": 1.75566456E12, "maxY": 3708.3320000000035, "series": [{"data": [[1.75566456E12, 3708.3320000000035]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566456E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 118.0, "minX": 1.75566456E12, "maxY": 14649.0, "series": [{"data": [[1.75566456E12, 14649.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75566456E12, 10836.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75566456E12, 13801.08]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75566456E12, 11226.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75566456E12, 118.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75566456E12, 7043.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566456E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 151.0, "minX": 5.0, "maxY": 38701.0, "series": [{"data": [[16.0, 13890.0], [300.0, 6717.0], [84.0, 4935.5], [173.0, 9986.0], [23.0, 151.0], [190.0, 10870.5], [52.0, 4189.0], [53.0, 9040.0], [116.0, 2611.0], [60.0, 3907.0], [126.0, 8155.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 38701.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 300.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 5.0, "maxY": 13890.0, "series": [{"data": [[16.0, 13890.0], [300.0, 6717.0], [84.0, 4935.5], [173.0, 9986.0], [23.0, 151.0], [190.0, 10870.5], [52.0, 4189.0], [53.0, 9040.0], [116.0, 2610.5], [60.0, 3907.0], [126.0, 8155.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[5.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 300.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 20.833333333333332, "minX": 1.75566456E12, "maxY": 20.833333333333332, "series": [{"data": [[1.75566456E12, 20.833333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566456E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.75566456E12, "maxY": 20.75, "series": [{"data": [[1.75566456E12, 20.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75566456E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75566456E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.75566456E12, "maxY": 20.75, "series": [{"data": [[1.75566456E12, 20.75]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}, {"data": [[1.75566456E12, 0.08333333333333333]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566456E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.75566456E12, "maxY": 20.75, "series": [{"data": [[1.75566456E12, 20.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75566456E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75566456E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

