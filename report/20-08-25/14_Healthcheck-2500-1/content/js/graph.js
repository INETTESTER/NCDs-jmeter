/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "maxY": 10321.0, "series": [{"data": [[0.0, 29.0], [0.1, 30.0], [0.2, 31.0], [0.3, 32.0], [0.4, 32.0], [0.5, 32.0], [0.6, 33.0], [0.7, 33.0], [0.8, 33.0], [0.9, 33.0], [1.0, 34.0], [1.1, 34.0], [1.2, 34.0], [1.3, 34.0], [1.4, 35.0], [1.5, 35.0], [1.6, 35.0], [1.7, 35.0], [1.8, 35.0], [1.9, 36.0], [2.0, 36.0], [2.1, 36.0], [2.2, 37.0], [2.3, 37.0], [2.4, 37.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 38.0], [2.9, 38.0], [3.0, 39.0], [3.1, 39.0], [3.2, 40.0], [3.3, 40.0], [3.4, 40.0], [3.5, 40.0], [3.6, 40.0], [3.7, 42.0], [3.8, 43.0], [3.9, 43.0], [4.0, 43.0], [4.1, 44.0], [4.2, 44.0], [4.3, 44.0], [4.4, 46.0], [4.5, 47.0], [4.6, 47.0], [4.7, 48.0], [4.8, 49.0], [4.9, 50.0], [5.0, 50.0], [5.1, 50.0], [5.2, 51.0], [5.3, 52.0], [5.4, 52.0], [5.5, 52.0], [5.6, 53.0], [5.7, 54.0], [5.8, 55.0], [5.9, 56.0], [6.0, 58.0], [6.1, 61.0], [6.2, 63.0], [6.3, 66.0], [6.4, 69.0], [6.5, 73.0], [6.6, 79.0], [6.7, 83.0], [6.8, 88.0], [6.9, 98.0], [7.0, 102.0], [7.1, 124.0], [7.2, 129.0], [7.3, 237.0], [7.4, 273.0], [7.5, 285.0], [7.6, 299.0], [7.7, 1788.0], [7.8, 1831.0], [7.9, 1894.0], [8.0, 1913.0], [8.1, 1934.0], [8.2, 1977.0], [8.3, 2023.0], [8.4, 2097.0], [8.5, 2124.0], [8.6, 2136.0], [8.7, 2151.0], [8.8, 2170.0], [8.9, 2178.0], [9.0, 2207.0], [9.1, 2219.0], [9.2, 2256.0], [9.3, 2327.0], [9.4, 2346.0], [9.5, 2357.0], [9.6, 2364.0], [9.7, 2377.0], [9.8, 2382.0], [9.9, 2395.0], [10.0, 2425.0], [10.1, 2434.0], [10.2, 2476.0], [10.3, 2483.0], [10.4, 2498.0], [10.5, 2599.0], [10.6, 2628.0], [10.7, 2629.0], [10.8, 2661.0], [10.9, 2672.0], [11.0, 2715.0], [11.1, 2726.0], [11.2, 2778.0], [11.3, 2823.0], [11.4, 2839.0], [11.5, 2850.0], [11.6, 2866.0], [11.7, 2877.0], [11.8, 2906.0], [11.9, 2922.0], [12.0, 2933.0], [12.1, 2947.0], [12.2, 2953.0], [12.3, 2955.0], [12.4, 2968.0], [12.5, 2978.0], [12.6, 3025.0], [12.7, 3033.0], [12.8, 3048.0], [12.9, 3077.0], [13.0, 3097.0], [13.1, 3112.0], [13.2, 3119.0], [13.3, 3126.0], [13.4, 3144.0], [13.5, 3158.0], [13.6, 3198.0], [13.7, 3203.0], [13.8, 3227.0], [13.9, 3234.0], [14.0, 3242.0], [14.1, 3245.0], [14.2, 3253.0], [14.3, 3260.0], [14.4, 3269.0], [14.5, 3275.0], [14.6, 3283.0], [14.7, 3290.0], [14.8, 3318.0], [14.9, 3326.0], [15.0, 3342.0], [15.1, 3359.0], [15.2, 3365.0], [15.3, 3379.0], [15.4, 3397.0], [15.5, 3414.0], [15.6, 3417.0], [15.7, 3423.0], [15.8, 3430.0], [15.9, 3438.0], [16.0, 3488.0], [16.1, 3521.0], [16.2, 3541.0], [16.3, 3545.0], [16.4, 3572.0], [16.5, 3580.0], [16.6, 3644.0], [16.7, 3658.0], [16.8, 3661.0], [16.9, 3684.0], [17.0, 3691.0], [17.1, 3696.0], [17.2, 3701.0], [17.3, 3724.0], [17.4, 3739.0], [17.5, 3743.0], [17.6, 3759.0], [17.7, 3761.0], [17.8, 3774.0], [17.9, 3795.0], [18.0, 3807.0], [18.1, 3814.0], [18.2, 3827.0], [18.3, 3840.0], [18.4, 3857.0], [18.5, 3864.0], [18.6, 3903.0], [18.7, 3916.0], [18.8, 3958.0], [18.9, 3988.0], [19.0, 4022.0], [19.1, 4055.0], [19.2, 4079.0], [19.3, 4095.0], [19.4, 4115.0], [19.5, 4153.0], [19.6, 4170.0], [19.7, 4175.0], [19.8, 4180.0], [19.9, 4191.0], [20.0, 4205.0], [20.1, 4207.0], [20.2, 4210.0], [20.3, 4216.0], [20.4, 4217.0], [20.5, 4223.0], [20.6, 4223.0], [20.7, 4224.0], [20.8, 4235.0], [20.9, 4243.0], [21.0, 4267.0], [21.1, 4270.0], [21.2, 4280.0], [21.3, 4285.0], [21.4, 4296.0], [21.5, 4307.0], [21.6, 4312.0], [21.7, 4323.0], [21.8, 4362.0], [21.9, 4377.0], [22.0, 4397.0], [22.1, 4421.0], [22.2, 4447.0], [22.3, 4460.0], [22.4, 4470.0], [22.5, 4476.0], [22.6, 4487.0], [22.7, 4502.0], [22.8, 4536.0], [22.9, 4543.0], [23.0, 4547.0], [23.1, 4549.0], [23.2, 4565.0], [23.3, 4567.0], [23.4, 4586.0], [23.5, 4588.0], [23.6, 4599.0], [23.7, 4619.0], [23.8, 4634.0], [23.9, 4636.0], [24.0, 4643.0], [24.1, 4648.0], [24.2, 4668.0], [24.3, 4713.0], [24.4, 4739.0], [24.5, 4747.0], [24.6, 4764.0], [24.7, 4770.0], [24.8, 4782.0], [24.9, 4787.0], [25.0, 4826.0], [25.1, 4827.0], [25.2, 4833.0], [25.3, 4835.0], [25.4, 4841.0], [25.5, 4847.0], [25.6, 4867.0], [25.7, 4874.0], [25.8, 4906.0], [25.9, 4921.0], [26.0, 4935.0], [26.1, 4947.0], [26.2, 4971.0], [26.3, 5002.0], [26.4, 5020.0], [26.5, 5053.0], [26.6, 5076.0], [26.7, 5076.0], [26.8, 5094.0], [26.9, 5101.0], [27.0, 5121.0], [27.1, 5123.0], [27.2, 5157.0], [27.3, 5161.0], [27.4, 5171.0], [27.5, 5180.0], [27.6, 5198.0], [27.7, 5209.0], [27.8, 5215.0], [27.9, 5222.0], [28.0, 5237.0], [28.1, 5238.0], [28.2, 5261.0], [28.3, 5277.0], [28.4, 5284.0], [28.5, 5287.0], [28.6, 5296.0], [28.7, 5312.0], [28.8, 5322.0], [28.9, 5346.0], [29.0, 5357.0], [29.1, 5379.0], [29.2, 5405.0], [29.3, 5416.0], [29.4, 5430.0], [29.5, 5434.0], [29.6, 5462.0], [29.7, 5480.0], [29.8, 5499.0], [29.9, 5526.0], [30.0, 5546.0], [30.1, 5552.0], [30.2, 5558.0], [30.3, 5571.0], [30.4, 5592.0], [30.5, 5630.0], [30.6, 5636.0], [30.7, 5638.0], [30.8, 5643.0], [30.9, 5647.0], [31.0, 5654.0], [31.1, 5696.0], [31.2, 5704.0], [31.3, 5709.0], [31.4, 5713.0], [31.5, 5721.0], [31.6, 5744.0], [31.7, 5762.0], [31.8, 5784.0], [31.9, 5790.0], [32.0, 5809.0], [32.1, 5831.0], [32.2, 5843.0], [32.3, 5853.0], [32.4, 5885.0], [32.5, 5892.0], [32.6, 5915.0], [32.7, 5918.0], [32.8, 5950.0], [32.9, 5953.0], [33.0, 5980.0], [33.1, 5992.0], [33.2, 6008.0], [33.3, 6016.0], [33.4, 6017.0], [33.5, 6030.0], [33.6, 6037.0], [33.7, 6044.0], [33.8, 6054.0], [33.9, 6056.0], [34.0, 6078.0], [34.1, 6082.0], [34.2, 6095.0], [34.3, 6098.0], [34.4, 6118.0], [34.5, 6120.0], [34.6, 6124.0], [34.7, 6130.0], [34.8, 6139.0], [34.9, 6148.0], [35.0, 6164.0], [35.1, 6165.0], [35.2, 6169.0], [35.3, 6174.0], [35.4, 6179.0], [35.5, 6182.0], [35.6, 6184.0], [35.7, 6185.0], [35.8, 6194.0], [35.9, 6194.0], [36.0, 6198.0], [36.1, 6214.0], [36.2, 6218.0], [36.3, 6220.0], [36.4, 6224.0], [36.5, 6226.0], [36.6, 6233.0], [36.7, 6245.0], [36.8, 6261.0], [36.9, 6268.0], [37.0, 6279.0], [37.1, 6280.0], [37.2, 6285.0], [37.3, 6289.0], [37.4, 6292.0], [37.5, 6293.0], [37.6, 6298.0], [37.7, 6307.0], [37.8, 6314.0], [37.9, 6316.0], [38.0, 6324.0], [38.1, 6333.0], [38.2, 6335.0], [38.3, 6354.0], [38.4, 6361.0], [38.5, 6364.0], [38.6, 6368.0], [38.7, 6372.0], [38.8, 6377.0], [38.9, 6384.0], [39.0, 6387.0], [39.1, 6394.0], [39.2, 6406.0], [39.3, 6415.0], [39.4, 6419.0], [39.5, 6424.0], [39.6, 6435.0], [39.7, 6436.0], [39.8, 6440.0], [39.9, 6445.0], [40.0, 6450.0], [40.1, 6454.0], [40.2, 6457.0], [40.3, 6457.0], [40.4, 6458.0], [40.5, 6459.0], [40.6, 6460.0], [40.7, 6463.0], [40.8, 6467.0], [40.9, 6471.0], [41.0, 6481.0], [41.1, 6491.0], [41.2, 6494.0], [41.3, 6495.0], [41.4, 6509.0], [41.5, 6518.0], [41.6, 6522.0], [41.7, 6524.0], [41.8, 6531.0], [41.9, 6533.0], [42.0, 6540.0], [42.1, 6543.0], [42.2, 6549.0], [42.3, 6553.0], [42.4, 6556.0], [42.5, 6562.0], [42.6, 6576.0], [42.7, 6583.0], [42.8, 6586.0], [42.9, 6591.0], [43.0, 6597.0], [43.1, 6605.0], [43.2, 6611.0], [43.3, 6617.0], [43.4, 6622.0], [43.5, 6624.0], [43.6, 6632.0], [43.7, 6647.0], [43.8, 6652.0], [43.9, 6657.0], [44.0, 6683.0], [44.1, 6688.0], [44.2, 6708.0], [44.3, 6720.0], [44.4, 6727.0], [44.5, 6727.0], [44.6, 6746.0], [44.7, 6761.0], [44.8, 6793.0], [44.9, 6797.0], [45.0, 6808.0], [45.1, 6812.0], [45.2, 6829.0], [45.3, 6841.0], [45.4, 6849.0], [45.5, 6868.0], [45.6, 6888.0], [45.7, 6912.0], [45.8, 6916.0], [45.9, 6923.0], [46.0, 6929.0], [46.1, 6938.0], [46.2, 6943.0], [46.3, 6949.0], [46.4, 6957.0], [46.5, 6968.0], [46.6, 6996.0], [46.7, 7004.0], [46.8, 7018.0], [46.9, 7034.0], [47.0, 7054.0], [47.1, 7062.0], [47.2, 7076.0], [47.3, 7086.0], [47.4, 7107.0], [47.5, 7125.0], [47.6, 7129.0], [47.7, 7138.0], [47.8, 7149.0], [47.9, 7151.0], [48.0, 7154.0], [48.1, 7158.0], [48.2, 7160.0], [48.3, 7164.0], [48.4, 7171.0], [48.5, 7182.0], [48.6, 7184.0], [48.7, 7187.0], [48.8, 7192.0], [48.9, 7202.0], [49.0, 7216.0], [49.1, 7218.0], [49.2, 7247.0], [49.3, 7254.0], [49.4, 7267.0], [49.5, 7267.0], [49.6, 7268.0], [49.7, 7279.0], [49.8, 7287.0], [49.9, 7288.0], [50.0, 7298.0], [50.1, 7304.0], [50.2, 7320.0], [50.3, 7323.0], [50.4, 7331.0], [50.5, 7351.0], [50.6, 7362.0], [50.7, 7370.0], [50.8, 7375.0], [50.9, 7394.0], [51.0, 7398.0], [51.1, 7402.0], [51.2, 7411.0], [51.3, 7416.0], [51.4, 7418.0], [51.5, 7419.0], [51.6, 7453.0], [51.7, 7460.0], [51.8, 7474.0], [51.9, 7483.0], [52.0, 7495.0], [52.1, 7512.0], [52.2, 7522.0], [52.3, 7524.0], [52.4, 7552.0], [52.5, 7554.0], [52.6, 7580.0], [52.7, 7588.0], [52.8, 7602.0], [52.9, 7610.0], [53.0, 7619.0], [53.1, 7624.0], [53.2, 7630.0], [53.3, 7636.0], [53.4, 7639.0], [53.5, 7641.0], [53.6, 7641.0], [53.7, 7645.0], [53.8, 7646.0], [53.9, 7647.0], [54.0, 7651.0], [54.1, 7654.0], [54.2, 7658.0], [54.3, 7659.0], [54.4, 7663.0], [54.5, 7666.0], [54.6, 7669.0], [54.7, 7671.0], [54.8, 7672.0], [54.9, 7680.0], [55.0, 7683.0], [55.1, 7695.0], [55.2, 7701.0], [55.3, 7707.0], [55.4, 7709.0], [55.5, 7716.0], [55.6, 7721.0], [55.7, 7727.0], [55.8, 7738.0], [55.9, 7743.0], [56.0, 7759.0], [56.1, 7763.0], [56.2, 7784.0], [56.3, 7809.0], [56.4, 7813.0], [56.5, 7814.0], [56.6, 7856.0], [56.7, 7866.0], [56.8, 7874.0], [56.9, 7881.0], [57.0, 7906.0], [57.1, 7925.0], [57.2, 7932.0], [57.3, 7936.0], [57.4, 7959.0], [57.5, 7969.0], [57.6, 7978.0], [57.7, 7999.0], [57.8, 8025.0], [57.9, 8026.0], [58.0, 8030.0], [58.1, 8033.0], [58.2, 8038.0], [58.3, 8044.0], [58.4, 8069.0], [58.5, 8074.0], [58.6, 8081.0], [58.7, 8094.0], [58.8, 8135.0], [58.9, 8160.0], [59.0, 8216.0], [59.1, 8260.0], [59.2, 8275.0], [59.3, 8285.0], [59.4, 8302.0], [59.5, 8311.0], [59.6, 8314.0], [59.7, 8322.0], [59.8, 8327.0], [59.9, 8334.0], [60.0, 8344.0], [60.1, 8351.0], [60.2, 8360.0], [60.3, 8361.0], [60.4, 8381.0], [60.5, 8383.0], [60.6, 8394.0], [60.7, 8399.0], [60.8, 8412.0], [60.9, 8416.0], [61.0, 8418.0], [61.1, 8421.0], [61.2, 8448.0], [61.3, 8460.0], [61.4, 8480.0], [61.5, 8487.0], [61.6, 8491.0], [61.7, 8494.0], [61.8, 8503.0], [61.9, 8505.0], [62.0, 8520.0], [62.1, 8524.0], [62.2, 8529.0], [62.3, 8530.0], [62.4, 8541.0], [62.5, 8551.0], [62.6, 8561.0], [62.7, 8567.0], [62.8, 8582.0], [62.9, 8592.0], [63.0, 8606.0], [63.1, 8609.0], [63.2, 8624.0], [63.3, 8626.0], [63.4, 8640.0], [63.5, 8657.0], [63.6, 8696.0], [63.7, 8708.0], [63.8, 8714.0], [63.9, 8740.0], [64.0, 8764.0], [64.1, 8776.0], [64.2, 8817.0], [64.3, 8819.0], [64.4, 8847.0], [64.5, 8862.0], [64.6, 8882.0], [64.7, 8900.0], [64.8, 8948.0], [64.9, 8957.0], [65.0, 8984.0], [65.1, 8991.0], [65.2, 9003.0], [65.3, 9007.0], [65.4, 9014.0], [65.5, 9018.0], [65.6, 9024.0], [65.7, 9026.0], [65.8, 9033.0], [65.9, 9038.0], [66.0, 9045.0], [66.1, 9050.0], [66.2, 9056.0], [66.3, 9059.0], [66.4, 9063.0], [66.5, 9067.0], [66.6, 9070.0], [66.7, 9074.0], [66.8, 9076.0], [66.9, 9082.0], [67.0, 9087.0], [67.1, 9096.0], [67.2, 9100.0], [67.3, 9105.0], [67.4, 9108.0], [67.5, 9111.0], [67.6, 9125.0], [67.7, 9127.0], [67.8, 9129.0], [67.9, 9129.0], [68.0, 9131.0], [68.1, 9133.0], [68.2, 9138.0], [68.3, 9142.0], [68.4, 9143.0], [68.5, 9145.0], [68.6, 9146.0], [68.7, 9147.0], [68.8, 9149.0], [68.9, 9150.0], [69.0, 9154.0], [69.1, 9155.0], [69.2, 9157.0], [69.3, 9158.0], [69.4, 9159.0], [69.5, 9160.0], [69.6, 9161.0], [69.7, 9161.0], [69.8, 9163.0], [69.9, 9165.0], [70.0, 9168.0], [70.1, 9171.0], [70.2, 9172.0], [70.3, 9173.0], [70.4, 9174.0], [70.5, 9175.0], [70.6, 9177.0], [70.7, 9179.0], [70.8, 9184.0], [70.9, 9184.0], [71.0, 9186.0], [71.1, 9187.0], [71.2, 9189.0], [71.3, 9190.0], [71.4, 9192.0], [71.5, 9192.0], [71.6, 9194.0], [71.7, 9195.0], [71.8, 9196.0], [71.9, 9196.0], [72.0, 9199.0], [72.1, 9201.0], [72.2, 9202.0], [72.3, 9203.0], [72.4, 9204.0], [72.5, 9204.0], [72.6, 9209.0], [72.7, 9210.0], [72.8, 9211.0], [72.9, 9212.0], [73.0, 9212.0], [73.1, 9213.0], [73.2, 9217.0], [73.3, 9217.0], [73.4, 9221.0], [73.5, 9223.0], [73.6, 9225.0], [73.7, 9225.0], [73.8, 9227.0], [73.9, 9228.0], [74.0, 9230.0], [74.1, 9230.0], [74.2, 9231.0], [74.3, 9232.0], [74.4, 9233.0], [74.5, 9234.0], [74.6, 9235.0], [74.7, 9236.0], [74.8, 9238.0], [74.9, 9238.0], [75.0, 9240.0], [75.1, 9240.0], [75.2, 9240.0], [75.3, 9241.0], [75.4, 9242.0], [75.5, 9242.0], [75.6, 9243.0], [75.7, 9243.0], [75.8, 9244.0], [75.9, 9244.0], [76.0, 9245.0], [76.1, 9245.0], [76.2, 9246.0], [76.3, 9247.0], [76.4, 9247.0], [76.5, 9247.0], [76.6, 9248.0], [76.7, 9249.0], [76.8, 9250.0], [76.9, 9251.0], [77.0, 9252.0], [77.1, 9252.0], [77.2, 9254.0], [77.3, 9255.0], [77.4, 9256.0], [77.5, 9257.0], [77.6, 9258.0], [77.7, 9258.0], [77.8, 9259.0], [77.9, 9259.0], [78.0, 9260.0], [78.1, 9260.0], [78.2, 9261.0], [78.3, 9261.0], [78.4, 9261.0], [78.5, 9263.0], [78.6, 9265.0], [78.7, 9265.0], [78.8, 9266.0], [78.9, 9266.0], [79.0, 9268.0], [79.1, 9269.0], [79.2, 9270.0], [79.3, 9271.0], [79.4, 9272.0], [79.5, 9273.0], [79.6, 9275.0], [79.7, 9275.0], [79.8, 9278.0], [79.9, 9278.0], [80.0, 9279.0], [80.1, 9280.0], [80.2, 9281.0], [80.3, 9282.0], [80.4, 9283.0], [80.5, 9283.0], [80.6, 9283.0], [80.7, 9284.0], [80.8, 9285.0], [80.9, 9287.0], [81.0, 9288.0], [81.1, 9290.0], [81.2, 9291.0], [81.3, 9292.0], [81.4, 9294.0], [81.5, 9295.0], [81.6, 9297.0], [81.7, 9297.0], [81.8, 9297.0], [81.9, 9298.0], [82.0, 9299.0], [82.1, 9299.0], [82.2, 9302.0], [82.3, 9303.0], [82.4, 9305.0], [82.5, 9306.0], [82.6, 9308.0], [82.7, 9308.0], [82.8, 9309.0], [82.9, 9310.0], [83.0, 9311.0], [83.1, 9312.0], [83.2, 9313.0], [83.3, 9313.0], [83.4, 9316.0], [83.5, 9319.0], [83.6, 9322.0], [83.7, 9323.0], [83.8, 9326.0], [83.9, 9327.0], [84.0, 9327.0], [84.1, 9329.0], [84.2, 9330.0], [84.3, 9334.0], [84.4, 9336.0], [84.5, 9337.0], [84.6, 9338.0], [84.7, 9339.0], [84.8, 9343.0], [84.9, 9344.0], [85.0, 9346.0], [85.1, 9347.0], [85.2, 9348.0], [85.3, 9349.0], [85.4, 9352.0], [85.5, 9353.0], [85.6, 9358.0], [85.7, 9359.0], [85.8, 9361.0], [85.9, 9362.0], [86.0, 9364.0], [86.1, 9365.0], [86.2, 9369.0], [86.3, 9370.0], [86.4, 9373.0], [86.5, 9375.0], [86.6, 9378.0], [86.7, 9381.0], [86.8, 9383.0], [86.9, 9385.0], [87.0, 9390.0], [87.1, 9392.0], [87.2, 9396.0], [87.3, 9397.0], [87.4, 9402.0], [87.5, 9403.0], [87.6, 9406.0], [87.7, 9407.0], [87.8, 9408.0], [87.9, 9410.0], [88.0, 9414.0], [88.1, 9415.0], [88.2, 9417.0], [88.3, 9419.0], [88.4, 9423.0], [88.5, 9434.0], [88.6, 9438.0], [88.7, 9447.0], [88.8, 9453.0], [88.9, 9455.0], [89.0, 9458.0], [89.1, 9458.0], [89.2, 9469.0], [89.3, 9479.0], [89.4, 9489.0], [89.5, 9491.0], [89.6, 9499.0], [89.7, 9501.0], [89.8, 9508.0], [89.9, 9524.0], [90.0, 9535.0], [90.1, 9537.0], [90.2, 9542.0], [90.3, 9549.0], [90.4, 9551.0], [90.5, 9553.0], [90.6, 9554.0], [90.7, 9556.0], [90.8, 9557.0], [90.9, 9563.0], [91.0, 9577.0], [91.1, 9584.0], [91.2, 9587.0], [91.3, 9593.0], [91.4, 9601.0], [91.5, 9608.0], [91.6, 9611.0], [91.7, 9617.0], [91.8, 9621.0], [91.9, 9623.0], [92.0, 9628.0], [92.1, 9634.0], [92.2, 9636.0], [92.3, 9642.0], [92.4, 9647.0], [92.5, 9651.0], [92.6, 9654.0], [92.7, 9658.0], [92.8, 9659.0], [92.9, 9664.0], [93.0, 9668.0], [93.1, 9674.0], [93.2, 9680.0], [93.3, 9685.0], [93.4, 9687.0], [93.5, 9691.0], [93.6, 9694.0], [93.7, 9696.0], [93.8, 9697.0], [93.9, 9700.0], [94.0, 9705.0], [94.1, 9710.0], [94.2, 9717.0], [94.3, 9720.0], [94.4, 9720.0], [94.5, 9726.0], [94.6, 9727.0], [94.7, 9732.0], [94.8, 9733.0], [94.9, 9736.0], [95.0, 9738.0], [95.1, 9744.0], [95.2, 9746.0], [95.3, 9750.0], [95.4, 9751.0], [95.5, 9755.0], [95.6, 9758.0], [95.7, 9762.0], [95.8, 9762.0], [95.9, 9765.0], [96.0, 9767.0], [96.1, 9770.0], [96.2, 9771.0], [96.3, 9774.0], [96.4, 9777.0], [96.5, 9781.0], [96.6, 9781.0], [96.7, 9785.0], [96.8, 9786.0], [96.9, 9791.0], [97.0, 9792.0], [97.1, 9795.0], [97.2, 9798.0], [97.3, 9802.0], [97.4, 9809.0], [97.5, 9831.0], [97.6, 9834.0], [97.7, 9843.0], [97.8, 9848.0], [97.9, 9850.0], [98.0, 9851.0], [98.1, 9861.0], [98.2, 9866.0], [98.3, 9868.0], [98.4, 9869.0], [98.5, 9874.0], [98.6, 9883.0], [98.7, 9901.0], [98.8, 9919.0], [98.9, 9965.0], [99.0, 9969.0], [99.1, 10013.0], [99.2, 10086.0], [99.3, 10109.0], [99.4, 10145.0], [99.5, 10171.0], [99.6, 10174.0], [99.7, 10242.0], [99.8, 10265.0], [99.9, 10286.0], [100.0, 10321.0]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 251.0, "series": [{"data": [[0.0, 173.0], [1700.0, 1.0], [1800.0, 5.0], [1900.0, 8.0], [2000.0, 5.0], [2100.0, 14.0], [2200.0, 7.0], [2300.0, 17.0], [2400.0, 12.0], [2500.0, 2.0], [2600.0, 10.0], [2700.0, 8.0], [2800.0, 13.0], [2900.0, 20.0], [3000.0, 12.0], [3100.0, 15.0], [3200.0, 28.0], [3300.0, 17.0], [3400.0, 15.0], [3500.0, 13.0], [3600.0, 15.0], [3700.0, 20.0], [3800.0, 16.0], [3900.0, 8.0], [4000.0, 10.0], [4100.0, 15.0], [4200.0, 38.0], [4300.0, 15.0], [4500.0, 24.0], [4600.0, 16.0], [4400.0, 16.0], [4800.0, 22.0], [4700.0, 16.0], [4900.0, 12.0], [5000.0, 14.0], [5100.0, 21.0], [5200.0, 25.0], [5300.0, 12.0], [5500.0, 15.0], [5400.0, 17.0], [5600.0, 17.0], [5700.0, 22.0], [5800.0, 13.0], [6000.0, 30.0], [5900.0, 15.0], [6100.0, 43.0], [6200.0, 40.0], [6300.0, 39.0], [6400.0, 54.0], [6500.0, 43.0], [6600.0, 27.0], [6700.0, 19.0], [6800.0, 19.0], [6900.0, 24.0], [7000.0, 18.0], [7100.0, 38.0], [7200.0, 30.0], [7300.0, 24.0], [7400.0, 25.0], [7500.0, 19.0], [7600.0, 59.0], [7700.0, 27.0], [7800.0, 19.0], [7900.0, 18.0], [8000.0, 25.0], [8100.0, 7.0], [8300.0, 35.0], [8200.0, 9.0], [8500.0, 31.0], [8700.0, 14.0], [8400.0, 25.0], [8600.0, 16.0], [8800.0, 12.0], [8900.0, 13.0], [9000.0, 50.0], [9100.0, 122.0], [9200.0, 251.0], [9300.0, 131.0], [9500.0, 42.0], [9400.0, 58.0], [9600.0, 63.0], [9700.0, 83.0], [9800.0, 37.0], [9900.0, 10.0], [10000.0, 5.0], [10100.0, 9.0], [10200.0, 8.0], [10300.0, 1.0], [100.0, 8.0], [200.0, 9.0], [400.0, 2.0]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2301.0, "series": [{"data": [[0.0, 192.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2301.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 7.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1249.9667999999974, "minX": 1.7556624E12, "maxY": 1249.9667999999974, "series": [{"data": [[1.7556624E12, 1249.9667999999974]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556624E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 29.0, "minX": 2.0, "maxY": 10286.0, "series": [{"data": [[2.0, 9403.0], [3.0, 7416.0], [5.0, 9325.0], [6.0, 9410.5], [7.0, 9195.0], [10.0, 9300.0], [11.0, 9326.0], [13.0, 9271.4], [14.0, 9281.0], [15.0, 8119.0], [18.0, 9275.0], [19.0, 9271.5], [20.0, 9273.0], [23.0, 9271.666666666666], [24.0, 9271.0], [25.0, 9266.0], [27.0, 9266.5], [28.0, 9268.0], [29.0, 9261.0], [31.0, 9259.0], [33.0, 9256.0], [32.0, 9259.5], [37.0, 9257.666666666666], [36.0, 9248.0], [39.0, 9247.0], [41.0, 9246.666666666666], [43.0, 9249.0], [44.0, 9240.0], [47.0, 9245.0], [46.0, 9244.5], [48.0, 9244.0], [51.0, 9243.0], [52.0, 9238.0], [55.0, 9273.0], [57.0, 9217.0], [56.0, 9174.0], [59.0, 9172.0], [58.0, 9204.0], [63.0, 9161.0], [62.0, 9185.666666666666], [67.0, 9125.0], [66.0, 9132.0], [65.0, 9160.0], [64.0, 9151.0], [74.0, 9213.0], [73.0, 9352.0], [79.0, 9408.0], [76.0, 9196.6], [80.0, 9421.0], [86.0, 9382.666666666666], [84.0, 9193.666666666666], [91.0, 9287.2], [95.0, 9302.0], [94.0, 9299.0], [99.0, 9322.25], [97.0, 9335.0], [96.0, 9371.0], [107.0, 9303.0], [106.0, 9380.25], [104.0, 9385.0], [111.0, 9297.0], [109.0, 9339.0], [115.0, 9316.0], [118.0, 9329.0], [117.0, 9248.0], [123.0, 9338.0], [120.0, 9330.0], [126.0, 9312.0], [124.0, 9309.0], [134.0, 9327.0], [132.0, 9264.5], [129.0, 9410.0], [143.0, 9138.666666666666], [142.0, 9397.0], [141.0, 9357.0], [139.0, 9093.666666666666], [138.0, 9402.0], [137.0, 9096.0], [136.0, 9336.0], [148.0, 9260.0], [147.0, 9337.5], [145.0, 9247.0], [144.0, 9333.5], [157.0, 9307.0], [152.0, 9320.5], [167.0, 9327.0], [166.0, 9339.0], [165.0, 9402.0], [164.0, 9278.0], [163.0, 9412.0], [161.0, 9319.0], [160.0, 9329.0], [174.0, 9258.0], [171.0, 9187.0], [169.0, 9251.333333333334], [181.0, 9212.0], [180.0, 9305.5], [178.0, 9306.0], [177.0, 9338.0], [191.0, 9360.0], [189.0, 9264.666666666666], [188.0, 9332.0], [186.0, 9354.0], [184.0, 9313.8], [199.0, 9377.0], [198.0, 9380.0], [197.0, 9210.0], [196.0, 9278.5], [194.0, 9280.4], [205.0, 9085.0], [204.0, 9327.0], [202.0, 9378.0], [201.0, 9227.5], [215.0, 9294.0], [213.0, 9265.0], [212.0, 9279.5], [210.0, 9283.0], [209.0, 9294.5], [221.0, 9273.5], [217.0, 9296.333333333334], [231.0, 9283.0], [230.0, 9310.0], [229.0, 9273.0], [227.0, 9308.0], [226.0, 8851.666666666666], [224.0, 9318.0], [232.0, 8036.0], [246.0, 8033.0], [242.0, 9313.0], [253.0, 8687.5], [252.0, 9192.0], [251.0, 8033.0], [258.0, 9279.25], [271.0, 9294.0], [269.0, 9212.5], [266.0, 8741.0], [265.0, 8361.0], [264.0, 9239.0], [262.0, 8879.333333333334], [260.0, 8650.0], [257.0, 9304.0], [256.0, 9262.0], [284.0, 9229.0], [279.0, 9250.2], [275.0, 9234.0], [274.0, 9059.0], [273.0, 9244.0], [300.0, 9272.0], [299.0, 8984.8], [298.0, 9194.5], [297.0, 8563.0], [293.0, 8779.666666666666], [292.0, 9213.0], [291.0, 9237.0], [289.0, 9188.0], [288.0, 9314.0], [319.0, 8962.8], [316.0, 9190.0], [315.0, 7811.0], [314.0, 9265.0], [311.0, 7809.0], [310.0, 9264.75], [306.0, 8912.22222222222], [335.0, 9189.0], [333.0, 9246.0], [321.0, 9190.0], [330.0, 9283.0], [329.0, 9180.0], [328.0, 9179.0], [327.0, 9143.0], [326.0, 9279.0], [325.0, 9230.0], [324.0, 9235.75], [350.0, 9285.0], [351.0, 9224.0], [349.0, 8856.5], [346.0, 9174.0], [345.0, 9277.0], [343.0, 9163.0], [341.0, 9252.0], [340.0, 9215.0], [337.0, 9189.0], [366.0, 8462.5], [362.0, 9245.0], [361.0, 9246.0], [360.0, 9240.0], [359.0, 9203.5], [358.0, 9247.666666666666], [357.0, 9235.0], [356.0, 9189.333333333334], [354.0, 9162.0], [353.0, 9198.5], [382.0, 9281.0], [383.0, 8748.0], [380.0, 9250.0], [370.0, 9206.0], [369.0, 9211.0], [368.0, 9186.0], [379.0, 9281.0], [377.0, 9235.0], [376.0, 9317.5], [374.0, 7741.0], [373.0, 9171.0], [372.0, 8751.0], [399.0, 9206.0], [397.0, 9152.0], [392.0, 8702.333333333334], [390.0, 9243.0], [389.0, 9036.0], [387.0, 9199.0], [385.0, 9231.0], [384.0, 9230.0], [413.0, 9240.5], [412.0, 9255.0], [411.0, 9204.5], [410.0, 9254.0], [409.0, 9146.0], [403.0, 9179.0], [402.0, 8433.5], [430.0, 9133.0], [428.0, 9204.0], [427.0, 9209.333333333334], [426.0, 9265.0], [425.0, 9174.5], [423.0, 9261.0], [421.0, 9107.0], [420.0, 9230.0], [418.0, 8833.5], [416.0, 9190.0], [446.0, 8616.4], [445.0, 8459.5], [444.0, 9170.5], [442.0, 9258.0], [439.0, 9213.0], [437.0, 9141.5], [436.0, 9185.0], [434.0, 9266.0], [451.0, 7680.0], [461.0, 7672.0], [460.0, 7667.5], [458.0, 8457.0], [456.0, 9255.0], [455.0, 7668.0], [454.0, 8664.0], [450.0, 9168.0], [449.0, 8778.0], [448.0, 9241.0], [477.0, 8408.0], [475.0, 7651.0], [474.0, 8184.666666666667], [471.0, 8409.0], [469.0, 7660.0], [467.0, 7671.0], [466.0, 8296.8], [493.0, 9228.0], [495.0, 8387.0], [492.0, 8428.0], [490.0, 8419.0], [488.0, 9174.0], [487.0, 8675.0], [486.0, 7647.0], [485.0, 8401.5], [483.0, 8446.5], [482.0, 7645.5], [509.0, 9234.0], [511.0, 9232.0], [508.0, 8173.0], [499.0, 9164.5], [497.0, 8365.5], [506.0, 7196.0], [505.0, 9046.0], [504.0, 9082.0], [502.0, 9168.0], [501.0, 7629.0], [500.0, 7630.0], [516.0, 7206.5], [542.0, 9332.0], [528.0, 9203.0], [536.0, 9232.0], [512.0, 7260.0], [514.0, 7162.0], [518.0, 7150.0], [524.0, 9192.0], [520.0, 7149.0], [534.0, 8073.0], [532.0, 9076.0], [530.0, 9191.0], [546.0, 9364.0], [570.0, 10145.0], [544.0, 9342.0], [566.0, 9871.0], [564.0, 9690.0], [560.0, 9423.0], [558.0, 9744.333333333334], [556.0, 9477.0], [554.0, 9369.0], [600.0, 10109.0], [604.0, 9931.75], [582.0, 9891.0], [580.0, 9949.0], [578.0, 9933.0], [590.0, 9749.0], [598.0, 9659.0], [596.0, 9820.333333333334], [594.0, 10077.5], [612.0, 9919.0], [636.0, 9775.75], [610.0, 9922.5], [614.0, 10173.0], [622.0, 9856.0], [620.0, 9647.0], [618.0, 9868.0], [616.0, 10069.0], [626.0, 9856.0], [624.0, 9691.0], [664.0, 9697.0], [670.0, 9527.0], [656.0, 9717.0], [668.0, 9786.0], [642.0, 9797.0], [640.0, 9717.0], [646.0, 9607.0], [652.0, 9594.5], [648.0, 9726.0], [662.0, 9610.0], [658.0, 9802.0], [700.0, 9658.0], [702.0, 9762.0], [688.0, 9765.0], [690.0, 9798.0], [692.0, 9746.0], [698.0, 9777.0], [678.0, 9627.5], [676.0, 9844.0], [674.0, 9843.0], [672.0, 9851.0], [684.0, 9786.0], [682.0, 9677.0], [680.0, 9736.0], [694.0, 9745.0], [728.0, 9732.0], [734.0, 9407.0], [720.0, 9637.5], [722.0, 9621.0], [730.0, 9416.0], [718.0, 9723.5], [704.0, 9675.0], [708.0, 9929.5], [706.0, 9542.0], [710.0, 9539.5], [716.0, 9658.0], [714.0, 9611.0], [712.0, 9866.0], [724.0, 9617.0], [764.0, 9905.0], [766.0, 9469.0], [752.0, 9737.0], [754.0, 9834.0], [756.0, 9868.0], [762.0, 9561.0], [742.0, 9291.0], [736.0, 9699.0], [750.0, 9563.0], [748.0, 9611.6], [758.0, 9802.5], [794.0, 9671.0], [790.0, 9791.0], [788.0, 9498.0], [784.0, 9523.666666666666], [782.0, 9458.0], [768.0, 9353.0], [770.0, 9628.0], [774.0, 9305.333333333334], [778.0, 9688.0], [776.0, 9463.0], [806.0, 9553.0], [818.0, 9348.0], [828.0, 9508.333333333334], [824.0, 9718.0], [804.0, 9790.0], [816.0, 9732.5], [814.0, 9605.5], [812.0, 9440.0], [808.0, 9748.5], [860.0, 9392.0], [862.0, 9383.0], [848.0, 9770.0], [850.0, 9685.0], [852.0, 9762.0], [858.0, 9107.0], [856.0, 9254.0], [838.0, 9613.5], [836.0, 9445.0], [834.0, 9716.0], [832.0, 9435.0], [840.0, 9108.0], [854.0, 9087.0], [866.0, 9097.0], [884.0, 9537.0], [864.0, 9317.5], [868.0, 9229.0], [870.0, 9054.0], [876.0, 9288.0], [872.0, 9362.0], [886.0, 9422.0], [882.0, 9501.0], [922.0, 9257.0], [916.0, 9061.0], [926.0, 9143.0], [914.0, 9280.0], [920.0, 9042.0], [902.0, 9150.0], [900.0, 9018.0], [898.0, 9026.0], [896.0, 9636.0], [910.0, 9025.666666666666], [906.0, 9009.0], [904.0, 9463.0], [918.0, 9129.0], [956.0, 8606.0], [944.0, 9018.0], [946.0, 9356.0], [948.0, 9297.0], [958.0, 8714.0], [954.0, 9061.0], [952.0, 9312.0], [928.0, 9205.0], [932.0, 8981.0], [930.0, 9184.0], [940.0, 8984.0], [936.0, 9131.0], [950.0, 8847.0], [988.0, 8892.0], [984.0, 8566.0], [976.0, 8997.0], [980.0, 8603.5], [978.0, 8551.5], [990.0, 8978.0], [986.0, 8551.0], [960.0, 8584.0], [962.0, 8657.0], [964.0, 8582.0], [974.0, 8634.5], [972.0, 9053.0], [970.0, 8587.5], [1016.0, 8506.0], [1008.0, 8540.0], [1010.0, 8487.0], [1020.0, 8694.0], [998.0, 8657.5], [996.0, 8488.0], [1006.0, 8503.0], [1004.0, 9014.0], [1002.0, 8957.0], [1000.0, 8852.0], [1014.0, 8494.0], [1012.0, 8709.0], [1072.0, 8819.0], [1060.0, 8714.0], [1080.0, 8520.0], [1076.0, 8285.0], [1052.0, 8674.0], [1028.0, 8427.0], [1024.0, 8451.0], [1032.0, 8418.0], [1036.0, 8420.0], [1048.0, 8361.5], [1040.0, 8350.0], [1064.0, 8359.0], [1136.0, 7609.0], [1148.0, 7830.5], [1120.0, 7881.0], [1124.0, 7656.0], [1140.0, 8119.0], [1096.0, 8703.0], [1100.0, 8502.0], [1116.0, 7932.0], [1112.0, 7970.0], [1108.0, 8134.0], [1104.0, 8052.0], [1132.0, 7637.0], [1128.0, 7906.0], [1208.0, 7571.5], [1212.0, 7398.0], [1184.0, 7826.333333333333], [1192.0, 7411.0], [1204.0, 6624.0], [1200.0, 4764.0], [1164.0, 7969.0], [1156.0, 7686.0], [1172.0, 8074.0], [1168.0, 7565.0], [1196.0, 7514.0], [1268.0, 6749.333333333333], [1252.0, 6465.0], [1276.0, 6890.5], [1248.0, 7651.0], [1228.0, 6585.0], [1224.0, 6599.0], [1220.0, 4739.0], [1244.0, 6531.0], [1232.0, 6593.0], [1256.0, 6813.5], [1332.0, 7588.0], [1340.0, 7641.0], [1316.0, 6459.0], [1312.0, 6444.0], [1320.0, 7524.5], [1336.0, 7348.5], [1292.0, 7113.0], [1288.0, 7268.0], [1284.0, 7282.0], [1280.0, 7279.0], [1308.0, 7381.5], [1304.0, 6435.0], [1300.0, 7151.0], [1296.0, 7767.0], [1324.0, 7535.0], [1396.0, 4280.0], [1404.0, 4587.0], [1376.0, 7402.0], [1380.0, 7522.0], [1344.0, 6289.0], [1356.0, 7378.375], [1372.0, 6271.0], [1368.0, 6930.0], [1364.0, 7184.0], [1360.0, 6873.333333333333], [1388.0, 4370.0], [1384.0, 6230.0], [1464.0, 6082.0], [1444.0, 7184.0], [1412.0, 6184.0], [1416.0, 6888.0], [1432.0, 4178.0], [1428.0, 6842.0], [1424.0, 6148.0], [1448.0, 3285.0], [1440.0, 6943.0], [1524.0, 6289.0], [1532.0, 6326.0], [1508.0, 6683.5], [1504.0, 4726.5], [1528.0, 6304.0], [1520.0, 7253.0], [1500.0, 4731.0], [1472.0, 3260.0], [1480.0, 6054.0], [1484.0, 3532.0], [1492.0, 7154.0], [1488.0, 6224.0], [1592.0, 6933.0], [1568.0, 6812.0], [1572.0, 6734.0], [1576.0, 6583.0], [1580.0, 6684.0], [1596.0, 6518.0], [1588.0, 7034.0], [1536.0, 6644.5], [1540.0, 6713.5], [1544.0, 6755.5], [1548.0, 6437.0], [1564.0, 6478.0], [1556.0, 6780.0], [1656.0, 6727.0], [1632.0, 6841.0], [1636.0, 6702.0], [1640.0, 6569.666666666667], [1660.0, 6017.0], [1652.0, 6056.0], [1648.0, 6688.0], [1608.0, 6843.5], [1604.0, 6825.5], [1628.0, 6849.0], [1624.0, 6832.0], [1616.0, 6876.0], [1720.0, 5713.0], [1704.0, 5797.0], [1700.0, 6368.0], [1708.0, 6224.0], [1716.0, 6186.0], [1712.0, 6182.0], [1672.0, 6194.0], [1668.0, 6441.5], [1664.0, 6016.0], [1692.0, 6457.0], [1688.0, 6538.0], [1684.0, 5918.0], [1680.0, 6555.0], [1776.0, 5952.0], [1784.0, 6030.0], [1788.0, 5710.0], [1760.0, 6081.0], [1764.0, 6062.0], [1772.0, 5815.0], [1740.0, 6450.0], [1736.0, 6149.0], [1728.0, 6169.0], [1756.0, 6235.0], [1752.0, 6095.0], [1748.0, 6104.0], [1744.0, 5646.666666666667], [1848.0, 5495.0], [1844.0, 5568.0], [1852.0, 5047.0], [1824.0, 5236.0], [1828.0, 5212.0], [1836.0, 5171.0], [1840.0, 5153.0], [1796.0, 5885.0], [1800.0, 5387.0], [1804.0, 6046.0], [1820.0, 5240.0], [1816.0, 5285.0], [1808.0, 5313.0], [1912.0, 5349.0], [1908.0, 4777.0], [1916.0, 4713.0], [1888.0, 5222.5], [1892.0, 5164.0], [1896.0, 4841.0], [1900.0, 4826.0], [1904.0, 5638.0], [1856.0, 5546.0], [1864.0, 4992.0], [1868.0, 5702.0], [1880.0, 4883.0], [1872.0, 5368.0], [1976.0, 5216.0], [1980.0, 4837.0], [1960.0, 5094.0], [1952.0, 4536.0], [1964.0, 4476.0], [1972.0, 4750.0], [1932.0, 5094.5], [1928.0, 5499.0], [1920.0, 4696.0], [1948.0, 4543.0], [1944.0, 4605.0], [1940.0, 4582.0], [1936.0, 5313.0], [2040.0, 4022.0], [2016.0, 4279.0], [2020.0, 4246.0], [2024.0, 4217.0], [2044.0, 4538.666666666667], [2036.0, 4174.0], [2032.0, 4190.0], [1984.0, 4391.0], [1988.0, 4336.0], [1992.0, 4947.0], [1996.0, 4270.0], [2012.0, 4259.0], [2008.0, 4224.0], [2004.0, 4226.5], [2152.0, 3358.0], [2160.0, 47.0], [2120.0, 3519.0], [2112.0, 3580.0], [2136.0, 3423.0], [2144.0, 1715.5], [2056.0, 4008.0], [2064.0, 3863.0], [2072.0, 3827.0], [2104.0, 3660.5], [2088.0, 3724.0], [2280.0, 2857.0], [2296.0, 36.0], [2248.0, 2953.0], [2256.0, 2947.0], [2264.0, 2922.0], [2272.0, 2877.0], [2200.0, 3155.0], [2192.0, 3198.0], [2184.0, 3233.0], [2232.0, 106.0], [2224.0, 150.0], [2216.0, 1083.0], [2208.0, 1598.0], [2312.0, 44.0], [2400.0, 470.8], [2408.0, 37.0], [2304.0, 2778.0], [2320.0, 47.0], [2328.0, 38.0], [2360.0, 40.0], [2352.0, 83.0], [2344.0, 33.5], [2336.0, 34.0], [2416.0, 1280.0], [2424.0, 58.0], [2368.0, 48.0], [2376.0, 50.0], [2384.0, 2358.0], [2392.0, 1188.0], [2440.0, 1093.5], [2432.0, 73.0], [2153.0, 3364.0], [2169.0, 1693.0], [2113.0, 3575.0], [2121.0, 3488.0], [2049.0, 4040.0], [2057.0, 4066.0], [2073.0, 3816.0], [2105.0, 3654.0], [2097.0, 3693.5], [2289.0, 38.5], [2297.0, 52.0], [2241.0, 1507.0], [2249.0, 2955.0], [2257.0, 40.0], [2265.0, 50.0], [2281.0, 2853.0], [2273.0, 35.0], [2201.0, 82.0], [2193.0, 47.0], [2177.0, 1683.5], [2225.0, 124.0], [2217.0, 3124.0], [2209.0, 62.0], [2401.0, 1119.0], [2409.0, 1421.8571428571427], [2305.0, 38.0], [2313.0, 39.0], [2361.0, 33.0], [2353.0, 524.4], [2337.0, 2668.0], [2417.0, 2124.0], [2369.0, 45.0], [2385.0, 2354.0], [2393.0, 44.0], [2441.0, 1963.0], [2433.0, 1801.0], [1073.0, 8311.0], [1085.0, 8415.666666666666], [1057.0, 8580.5], [1077.0, 8404.5], [1029.0, 8460.0], [1033.0, 8393.0], [1037.0, 8361.0], [1053.0, 8316.0], [1049.0, 8374.0], [1045.0, 8628.5], [1041.0, 8640.5], [1069.0, 8361.333333333334], [1061.0, 8527.0], [1145.0, 7976.0], [1149.0, 7375.0], [1129.0, 7659.0], [1121.0, 8152.666666666667], [1141.0, 7649.0], [1097.0, 8580.0], [1093.0, 8304.666666666666], [1113.0, 7972.0], [1109.0, 7984.0], [1105.0, 8079.0], [1133.0, 7611.0], [1205.0, 6622.0], [1209.0, 6615.0], [1185.0, 7550.5], [1189.0, 7645.0], [1201.0, 7362.0], [1165.0, 7858.0], [1161.0, 7798.5], [1157.0, 7925.0], [1153.0, 7658.5], [1177.0, 7656.0], [1173.0, 7709.0], [1169.0, 7872.0], [1193.0, 4783.0], [1269.0, 6383.0], [1265.0, 6906.0], [1277.0, 7640.0], [1249.0, 6488.0], [1253.0, 7487.0], [1273.0, 7191.0], [1221.0, 6683.0], [1225.0, 6492.0], [1245.0, 7701.0], [1241.0, 6751.8], [1237.0, 7554.0], [1233.0, 6586.0], [1261.0, 6432.5], [1257.0, 6424.0], [1333.0, 7565.0], [1317.0, 7717.0], [1313.0, 6296.0], [1337.0, 4971.0], [1293.0, 7344.0], [1289.0, 7370.0], [1285.0, 7721.0], [1281.0, 7759.0], [1297.0, 7707.0], [1325.0, 6431.0], [1321.0, 7705.0], [1397.0, 7414.0], [1405.0, 6179.0], [1377.0, 6314.0], [1381.0, 6914.0], [1393.0, 4395.5], [1345.0, 7287.0], [1357.0, 7025.0], [1373.0, 6280.0], [1369.0, 7218.0], [1365.0, 7418.0], [1389.0, 6281.0], [1385.0, 6285.0], [1465.0, 6111.0], [1469.0, 6665.5], [1441.0, 7351.0], [1445.0, 6596.0], [1449.0, 3290.0], [1461.0, 6119.0], [1457.0, 5348.0], [1421.0, 4223.0], [1417.0, 6271.0], [1413.0, 4547.0], [1437.0, 6792.5], [1433.0, 6635.0], [1429.0, 6829.0], [1425.0, 6165.0], [1453.0, 3270.6666666666665], [1533.0, 6809.0], [1509.0, 6522.0], [1505.0, 3245.0], [1513.0, 6474.0], [1517.0, 6524.0], [1521.0, 6512.0], [1477.0, 4229.0], [1481.0, 3234.0], [1485.0, 6225.0], [1497.0, 7102.333333333333], [1493.0, 6220.0], [1597.0, 7086.0], [1569.0, 6611.0], [1573.0, 7188.0], [1577.0, 6740.0], [1581.0, 7164.0], [1593.0, 6695.0], [1589.0, 7018.0], [1541.0, 6445.0], [1549.0, 7222.0], [1565.0, 7247.0], [1661.0, 6651.0], [1633.0, 6121.0], [1637.0, 6128.0], [1641.0, 6820.0], [1645.0, 6308.0], [1657.0, 6808.0], [1653.0, 6543.0], [1649.0, 6647.0], [1613.0, 6352.0], [1609.0, 6553.0], [1605.0, 6795.0], [1601.0, 7009.5], [1629.0, 6139.0], [1625.0, 6923.0], [1621.0, 6478.666666666667], [1713.0, 6429.0], [1717.0, 6185.0], [1721.0, 5918.0], [1697.0, 6361.5], [1705.0, 6098.0], [1709.0, 6342.0], [1673.0, 6557.0], [1669.0, 6622.0], [1693.0, 6457.0], [1689.0, 6194.0], [1685.0, 5901.0], [1681.0, 6365.0], [1785.0, 5431.0], [1769.0, 5916.0], [1773.0, 6164.0], [1789.0, 5425.0], [1781.0, 5826.5], [1777.0, 5990.0], [1741.0, 5654.0], [1737.0, 6197.0], [1733.0, 6132.375], [1753.0, 6124.0], [1749.0, 5636.0], [1745.0, 5643.0], [1849.0, 5076.0], [1825.0, 5237.0], [1829.0, 5874.0], [1833.0, 5581.333333333333], [1837.0, 5157.0], [1853.0, 5020.0], [1845.0, 5108.0], [1841.0, 5161.0], [1793.0, 5793.5], [1801.0, 5379.0], [1805.0, 5831.0], [1817.0, 5774.0], [1813.0, 5296.5], [1913.0, 5480.0], [1917.0, 5587.0], [1889.0, 5546.0], [1897.0, 4835.0], [1901.0, 4827.0], [1909.0, 5648.0], [1905.0, 5578.0], [1857.0, 5853.0], [1861.0, 5341.5], [1865.0, 5485.0], [1869.0, 4955.0], [1885.0, 5438.333333333333], [1881.0, 4883.0], [1877.0, 5276.5], [1873.0, 5642.0], [1977.0, 5076.0], [1981.0, 5180.0], [1953.0, 4536.0], [1957.0, 4933.0], [1961.0, 4487.0], [1965.0, 5296.0], [1969.0, 4460.0], [1933.0, 5357.0], [1929.0, 4636.0], [1925.0, 5317.0], [1921.0, 5283.0], [1949.0, 4599.0], [1945.0, 4571.0], [1941.0, 4664.0], [1937.0, 4601.0], [2037.0, 4158.0], [2041.0, 4643.0], [2017.0, 4747.0], [2021.0, 4243.0], [2025.0, 4208.0], [2029.0, 4093.5], [2033.0, 4180.0], [1985.0, 4362.0], [1989.0, 5101.0], [1993.0, 4952.0], [1997.0, 4436.0], [2013.0, 4201.0], [2005.0, 4216.0], [2001.0, 4244.0], [2162.0, 1688.0], [2114.0, 3572.0], [2122.0, 3521.0], [2130.0, 2591.75], [2138.0, 3427.0], [2170.0, 3322.0], [2146.0, 2282.666666666667], [2050.0, 4022.0], [2066.0, 3857.0], [2074.0, 3824.0], [2106.0, 3814.0], [2098.0, 3697.0], [2090.0, 3728.5], [2082.0, 3765.6666666666665], [2290.0, 38.0], [2274.0, 35.0], [2242.0, 30.0], [2266.0, 2905.0], [2298.0, 51.0], [2202.0, 33.0], [2194.0, 3187.0], [2186.0, 64.0], [2234.0, 3045.0], [2226.0, 3097.0], [2218.0, 49.0], [2322.0, 2716.5], [2402.0, 681.0], [2314.0, 40.0], [2330.0, 40.0], [2362.0, 32.0], [2354.0, 1974.75], [2346.0, 2640.0], [2338.0, 2661.0], [2410.0, 1100.5], [2418.0, 2122.0], [2370.0, 1227.5], [2378.0, 2383.0], [2386.0, 2357.0], [2394.0, 40.0], [2426.0, 54.0], [2163.0, 3334.0], [2115.0, 3571.0], [2123.0, 3541.0], [2131.0, 3434.0], [2139.0, 3416.6666666666665], [2147.0, 37.0], [2051.0, 3954.0], [2059.0, 4055.0], [2067.0, 3852.0], [2075.0, 3807.0], [2107.0, 3631.0], [2099.0, 3690.0], [2091.0, 3742.0], [2291.0, 37.0], [2251.0, 2946.5], [2259.0, 2930.0], [2299.0, 52.0], [2275.0, 32.0], [2203.0, 38.0], [2195.0, 3189.0], [2187.0, 46.0], [2179.0, 43.5], [2235.0, 3048.0], [2219.0, 3113.0], [2211.0, 55.0], [2315.0, 36.0], [2403.0, 1344.2], [2411.0, 1405.6666666666667], [2307.0, 1417.5], [2323.0, 2713.0], [2331.0, 31.0], [2363.0, 43.0], [2355.0, 1692.6666666666665], [2347.0, 898.6666666666667], [2339.0, 35.0], [2419.0, 2061.0], [2379.0, 2379.0], [2387.0, 2346.0], [2395.0, 35.0], [2427.0, 66.0], [2443.0, 29.0], [2435.0, 88.0], [513.0, 9218.0], [531.0, 9201.0], [543.0, 9358.5], [537.0, 9320.0], [527.0, 8031.5], [517.0, 7154.0], [525.0, 9232.0], [523.0, 9194.5], [521.0, 7138.0], [535.0, 6727.0], [529.0, 7004.0], [571.0, 10093.0], [569.0, 9749.0], [549.0, 9378.5], [547.0, 9489.0], [567.0, 10065.5], [553.0, 9444.0], [605.0, 10286.0], [595.0, 9843.0], [583.0, 9781.0], [581.0, 9795.0], [579.0, 10141.0], [591.0, 9782.0], [587.0, 10256.0], [597.0, 10086.0], [593.0, 9762.5], [635.0, 9790.0], [625.0, 9643.0], [639.0, 9657.5], [637.0, 9773.0], [623.0, 9642.0], [613.0, 9995.5], [615.0, 9651.0], [619.0, 9601.0], [617.0, 9869.0], [631.0, 9739.75], [627.0, 9684.0], [665.0, 9739.5], [671.0, 9727.5], [657.0, 9763.0], [669.0, 9605.0], [655.0, 9720.0], [645.0, 9646.5], [643.0, 9786.0], [647.0, 9655.0], [653.0, 9578.0], [651.0, 9881.0], [649.0, 9585.0], [661.0, 9629.5], [659.0, 9755.0], [701.0, 9681.0], [703.0, 9735.0], [689.0, 9750.0], [691.0, 9796.0], [699.0, 9731.0], [697.0, 9645.0], [679.0, 9563.0], [677.0, 9524.0], [687.0, 9761.666666666666], [693.0, 9763.0], [733.0, 9475.5], [721.0, 9367.0], [731.0, 9554.0], [729.0, 9623.0], [711.0, 9659.0], [715.0, 9491.0], [713.0, 9535.0], [727.0, 9738.5], [725.0, 9746.0], [723.0, 9755.0], [765.0, 9775.0], [767.0, 9203.0], [753.0, 9733.0], [757.0, 9751.0], [763.0, 9800.0], [761.0, 9651.0], [743.0, 9694.0], [741.0, 9695.5], [739.0, 9499.0], [737.0, 9698.0], [751.0, 9901.0], [749.0, 9785.0], [759.0, 9771.0], [797.0, 9707.0], [799.0, 9489.0], [795.0, 9529.2], [785.0, 9647.5], [771.0, 9313.0], [775.0, 9165.0], [779.0, 9158.0], [807.0, 9551.0], [827.0, 9758.0], [803.0, 9540.5], [801.0, 9454.0], [823.0, 9649.0], [821.0, 9780.5], [819.0, 9555.0], [859.0, 9584.0], [861.0, 9105.0], [849.0, 9101.0], [851.0, 9098.0], [857.0, 9668.0], [839.0, 9747.0], [833.0, 9481.0], [847.0, 9433.57142857143], [853.0, 9175.0], [891.0, 9127.5], [893.0, 9044.0], [895.0, 9195.5], [881.0, 9217.0], [889.0, 9414.5], [879.0, 9101.0], [865.0, 9726.0], [869.0, 9494.0], [871.0, 9242.0], [875.0, 9346.5], [873.0, 9524.0], [887.0, 9045.0], [885.0, 9423.0], [883.0, 9021.0], [921.0, 9590.0], [923.0, 9438.0], [913.0, 9093.5], [915.0, 9438.0], [903.0, 9306.0], [901.0, 9211.0], [899.0, 9184.0], [897.0, 9261.0], [911.0, 9225.0], [907.0, 9608.0], [905.0, 9495.0], [919.0, 9023.0], [917.0, 9442.0], [957.0, 8609.0], [959.0, 9081.0], [945.0, 9212.0], [947.0, 9336.0], [949.0, 9148.0], [955.0, 9166.0], [953.0, 8936.0], [943.0, 9424.0], [929.0, 9185.0], [935.0, 9242.5], [933.0, 9127.0], [941.0, 9024.0], [939.0, 9185.5], [937.0, 8831.0], [951.0, 8817.0], [985.0, 8327.0], [991.0, 8598.0], [989.0, 8503.0], [987.0, 9068.0], [975.0, 9075.0], [961.0, 8626.0], [963.0, 8627.0], [967.0, 8915.0], [965.0, 8982.0], [983.0, 8804.0], [981.0, 8624.0], [1019.0, 8460.0], [1021.0, 8489.0], [1023.0, 8641.0], [1009.0, 8505.0], [1011.0, 8708.0], [1017.0, 8569.0], [1007.0, 8418.0], [995.0, 8529.5], [1005.0, 8691.0], [1003.0, 8862.0], [1001.0, 8620.0], [1015.0, 8530.0], [1013.0, 8522.0], [1082.0, 8579.5], [1086.0, 8408.0], [1074.0, 8286.0], [1034.0, 8632.0], [1038.0, 8882.0], [1046.0, 8499.0], [1042.0, 8448.0], [1070.0, 8399.0], [1066.0, 8416.0], [1062.0, 8422.0], [1138.0, 7828.5], [1146.0, 7398.0], [1122.0, 8019.0], [1142.0, 8089.0], [1118.0, 7931.0], [1094.0, 8313.0], [1098.0, 8187.0], [1102.0, 8334.0], [1114.0, 7940.0], [1110.0, 7959.0], [1106.0, 8044.0], [1134.0, 7716.0], [1130.0, 8025.0], [1202.0, 6629.0], [1214.0, 6233.75], [1190.0, 7600.666666666667], [1206.0, 6618.0], [1166.0, 7891.0], [1162.0, 8051.0], [1158.0, 7932.0], [1154.0, 7936.0], [1174.0, 7483.0], [1194.0, 4770.0], [1270.0, 7267.0], [1278.0, 6549.0], [1250.0, 7504.0], [1274.0, 7317.0], [1230.0, 6590.0], [1218.0, 5390.666666666667], [1246.0, 6521.0], [1242.0, 6539.0], [1234.0, 7695.0], [1262.0, 6387.0], [1258.0, 6460.0], [1334.0, 6419.0], [1342.0, 7428.5], [1318.0, 6491.0], [1338.0, 6280.0], [1330.0, 5813.25], [1294.0, 6591.0], [1290.0, 6365.0], [1286.0, 7298.0], [1282.0, 7416.0], [1306.0, 7659.5], [1326.0, 5215.0], [1398.0, 4289.0], [1394.0, 4296.0], [1406.0, 6120.0], [1378.0, 4807.0], [1402.0, 5494.333333333333], [1374.0, 6279.0], [1346.0, 7054.0], [1370.0, 7070.0], [1366.0, 7018.0], [1362.0, 7295.0], [1386.0, 4619.0], [1382.0, 7135.0], [1466.0, 7325.0], [1470.0, 6139.0], [1462.0, 6130.0], [1434.0, 4191.0], [1414.0, 4375.0], [1430.0, 4207.0], [1426.0, 6167.0], [1454.0, 3269.0], [1450.0, 3743.0], [1442.0, 4173.0], [1530.0, 6295.0], [1534.0, 6467.0], [1510.0, 6522.0], [1518.0, 6980.75], [1526.0, 6286.0], [1522.0, 6198.0], [1478.0, 6123.0], [1474.0, 3137.5], [1482.0, 3025.0], [1486.0, 6226.0], [1498.0, 7267.0], [1494.0, 6226.0], [1490.0, 6547.0], [1594.0, 6940.0], [1574.0, 7173.0], [1570.0, 6805.0], [1578.0, 7192.0], [1586.0, 7115.333333333333], [1538.0, 6482.5], [1542.0, 6375.0], [1546.0, 6643.5], [1566.0, 7216.0], [1562.0, 6758.0], [1558.0, 6922.0], [1554.0, 6551.4], [1658.0, 6716.0], [1634.0, 6720.0], [1642.0, 6597.0], [1646.0, 6708.0], [1654.0, 6540.0], [1650.0, 6388.0], [1614.0, 6727.0], [1610.0, 6765.0], [1606.0, 6761.0], [1602.0, 6996.0], [1630.0, 6872.0], [1626.0, 6566.0], [1622.0, 6957.0], [1618.0, 6877.0], [1718.0, 6481.0], [1698.0, 6419.0], [1702.0, 6262.0], [1706.0, 6415.0], [1710.0, 6080.0], [1722.0, 5709.0], [1714.0, 6368.0], [1678.0, 6308.333333333333], [1674.0, 6323.0], [1670.0, 6495.0], [1694.0, 6265.0], [1690.0, 6531.0], [1682.0, 5934.0], [1790.0, 5892.0], [1762.0, 6037.0], [1770.0, 6317.0], [1774.0, 5957.0], [1786.0, 5923.0], [1782.0, 5915.0], [1778.0, 5462.0], [1738.0, 6386.0], [1758.0, 6072.0], [1854.0, 5438.0], [1826.0, 5230.0], [1830.0, 5213.0], [1834.0, 5171.0], [1838.0, 5161.0], [1850.0, 5762.0], [1846.0, 5117.0], [1842.0, 5784.0], [1794.0, 5886.0], [1798.0, 5402.0], [1802.0, 6035.0], [1822.0, 5238.0], [1818.0, 5277.0], [1814.0, 5287.0], [1918.0, 5261.0], [1890.0, 4867.0], [1894.0, 4847.5], [1898.0, 4834.0], [1902.0, 4827.0], [1914.0, 5322.0], [1910.0, 5543.0], [1906.0, 4782.0], [1886.0, 5434.0], [1858.0, 5529.0], [1862.0, 5003.0], [1870.0, 4935.0], [1882.0, 5723.0], [1878.0, 4917.0], [1874.0, 4929.0], [1982.0, 5184.0], [1954.0, 5121.0], [1958.0, 4497.0], [1962.0, 4470.0], [1966.0, 5056.0], [1978.0, 4419.0], [1974.0, 4547.5], [1970.0, 5088.0], [1934.0, 4633.0], [1930.0, 4646.0], [1926.0, 4648.0], [1950.0, 4549.0], [1942.0, 5193.0], [1938.0, 4599.0], [2046.0, 4004.5], [2018.0, 4115.0], [2022.0, 4100.0], [2026.0, 4208.0], [2030.0, 4200.0], [2038.0, 4668.0], [1986.0, 5288.0], [1990.0, 4323.0], [1994.0, 5076.0], [1998.0, 4267.0], [2014.0, 4308.0], [2010.0, 4285.0], [2006.0, 4211.0], [2002.0, 4216.0], [2156.0, 37.333333333333336], [2116.0, 3558.0], [2124.0, 48.0], [2132.0, 33.0], [2140.0, 3410.0], [2172.0, 3294.0], [2148.0, 3384.0], [2052.0, 4071.0], [2068.0, 3875.0], [2076.0, 3801.0], [2100.0, 3686.0], [2092.0, 3739.0], [2084.0, 3762.0], [2300.0, 50.0], [2284.0, 1911.3333333333335], [2252.0, 33.0], [2244.0, 2966.0], [2260.0, 35.0], [2268.0, 1473.5], [2276.0, 44.0], [2204.0, 69.0], [2196.0, 3201.0], [2188.0, 3225.0], [2180.0, 3253.0], [2236.0, 3009.0], [2228.0, 1594.5], [2220.0, 3109.0], [2212.0, 91.5], [2324.0, 2708.0], [2428.0, 76.33333333333333], [2404.0, 2215.0], [2308.0, 70.0], [2332.0, 43.0], [2364.0, 2435.0], [2356.0, 2526.0], [2348.0, 1795.6666666666667], [2412.0, 273.0], [2420.0, 1253.0], [2372.0, 2395.5], [2380.0, 2377.0], [2388.0, 2341.0], [2396.0, 36.0], [2444.0, 2003.0], [2436.0, 298.0], [2149.0, 37.0], [2165.0, 102.0], [2117.0, 3545.0], [2133.0, 3430.0], [2141.0, 3414.0], [2157.0, 3362.0], [2053.0, 4906.0], [2061.0, 4111.333333333333], [2069.0, 3864.0], [2077.0, 3795.0], [2109.0, 3728.5], [2101.0, 3693.0], [2093.0, 3729.0], [2293.0, 1445.5], [2245.0, 2968.0], [2253.0, 2950.0], [2261.0, 35.0], [2269.0, 39.0], [2301.0, 40.0], [2285.0, 2835.0], [2205.0, 32.0], [2197.0, 37.0], [2189.0, 3210.0], [2237.0, 2985.0], [2229.0, 3091.0], [2213.0, 3126.0], [2317.0, 40.0], [2405.0, 2173.0], [2309.0, 2764.0], [2325.0, 52.0], [2333.0, 38.0], [2365.0, 2434.0], [2357.0, 43.0], [2349.0, 40.0], [2341.0, 1342.0], [2413.0, 1089.5], [2373.0, 53.0], [2381.0, 2369.0], [2389.0, 2340.0], [2397.0, 47.25], [2429.0, 63.0], [1079.0, 8366.0], [1087.0, 8414.0], [1075.0, 8322.0], [1055.0, 8527.0], [1027.0, 8633.333333333334], [1031.0, 8426.0], [1035.0, 8389.0], [1051.0, 8323.0], [1043.0, 8480.0], [1063.0, 8644.5], [1059.0, 8529.0], [1139.0, 7619.0], [1151.0, 7619.0], [1127.0, 7848.333333333333], [1123.0, 7784.0], [1103.0, 8360.0], [1099.0, 8277.0], [1095.0, 8262.0], [1115.0, 8022.0], [1111.0, 7978.0], [1135.0, 7825.0], [1131.0, 7856.0], [1203.0, 4867.0], [1191.0, 7512.0], [1215.0, 4833.0], [1187.0, 7682.0], [1167.0, 7619.0], [1163.0, 7734.0], [1159.0, 7919.0], [1155.0, 8072.0], [1179.0, 7846.5], [1171.0, 7872.0], [1199.0, 4400.0], [1195.0, 4769.0], [1271.0, 7374.0], [1279.0, 6535.0], [1251.0, 6470.0], [1255.0, 6462.0], [1247.0, 6509.0], [1223.0, 6874.5], [1231.0, 6966.5], [1227.0, 6583.0], [1243.0, 6541.0], [1235.0, 7723.0], [1263.0, 7322.0], [1259.0, 6456.0], [1331.0, 7522.0], [1339.0, 6386.0], [1343.0, 6372.0], [1315.0, 6457.0], [1287.0, 7277.0], [1283.0, 7610.0], [1311.0, 7334.666666666667], [1303.0, 7291.333333333334], [1323.0, 6888.0], [1407.0, 6308.0], [1379.0, 6245.0], [1399.0, 4286.0], [1395.0, 4285.0], [1375.0, 6307.0], [1355.0, 7251.5], [1363.0, 6364.0], [1391.0, 4307.5], [1383.0, 4757.0], [1459.0, 5269.5], [1471.0, 7282.0], [1443.0, 3958.0], [1447.0, 7049.0], [1463.0, 3263.0], [1423.0, 4423.5], [1419.0, 4223.0], [1415.0, 7076.0], [1411.0, 7334.75], [1439.0, 6170.0], [1431.0, 6797.0], [1427.0, 4277.0], [1455.0, 3275.0], [1527.0, 6291.666666666667], [1531.0, 6315.0], [1507.0, 6355.0], [1515.0, 6916.0], [1519.0, 3203.0], [1503.0, 5203.0], [1479.0, 6118.0], [1483.0, 6197.0], [1487.0, 3067.0], [1491.0, 4725.0], [1591.0, 6739.5], [1595.0, 6335.0], [1599.0, 6329.0], [1571.0, 7231.0], [1575.0, 7125.0], [1583.0, 7080.0], [1587.0, 6868.0], [1567.0, 6800.0], [1547.0, 6976.0], [1563.0, 6746.0], [1559.0, 7053.0], [1615.0, 6851.0], [1655.0, 6141.0], [1651.0, 6652.0], [1659.0, 6652.0], [1663.0, 6016.0], [1647.0, 6169.0], [1611.0, 6255.0], [1631.0, 6620.0], [1627.0, 6652.0], [1623.0, 6192.0], [1723.0, 6220.0], [1727.0, 5733.0], [1699.0, 6250.0], [1703.0, 6363.0], [1707.0, 5785.0], [1711.0, 6008.0], [1719.0, 5711.0], [1715.0, 5744.0], [1679.0, 6563.0], [1675.0, 6184.0], [1671.0, 6494.0], [1695.0, 6453.0], [1691.0, 6527.0], [1683.0, 6657.0], [1787.0, 5416.0], [1791.0, 5953.0], [1763.0, 6032.0], [1771.0, 5521.0], [1775.0, 5838.0], [1783.0, 5914.0], [1779.0, 5950.0], [1739.0, 6298.0], [1735.0, 6178.5], [1755.0, 5917.5], [1751.0, 5633.0], [1747.0, 5806.0], [1851.0, 5704.0], [1855.0, 5055.0], [1827.0, 5209.0], [1835.0, 5853.0], [1847.0, 5100.0], [1843.0, 5123.0], [1823.0, 5240.0], [1799.0, 5860.0], [1803.0, 5980.0], [1807.0, 5589.5], [1819.0, 5266.0], [1815.0, 5284.0], [1811.0, 5482.0], [1915.0, 5601.0], [1919.0, 5592.0], [1891.0, 5279.0], [1895.0, 4844.0], [1899.0, 4833.0], [1903.0, 4824.0], [1911.0, 5351.0], [1907.0, 4787.0], [1859.0, 5526.0], [1863.0, 5749.0], [1867.0, 5632.5], [1879.0, 5423.0], [1875.0, 4921.0], [1979.0, 5080.0], [1983.0, 4377.0], [1955.0, 4533.0], [1959.0, 5122.0], [1963.0, 4470.0], [1967.0, 4464.0], [1975.0, 4565.0], [1935.0, 4625.0], [1927.0, 4642.0], [1923.0, 5494.0], [1951.0, 4545.0], [1947.0, 4546.0], [1939.0, 4588.0], [2047.0, 3988.0], [2039.0, 4153.0], [2023.0, 4217.0], [2019.0, 4743.0], [2027.0, 4205.0], [2031.0, 4210.0], [2035.0, 4169.0], [2015.0, 4175.0], [1987.0, 5006.0], [1991.0, 4306.0], [1995.0, 4421.0], [1999.0, 4236.0], [2007.0, 4223.0], [2150.0, 3379.0], [2126.0, 49.0], [2134.0, 3424.0], [2158.0, 3359.0], [2054.0, 4567.0], [2062.0, 3876.0], [2070.0, 3840.0], [2078.0, 3836.0], [2110.0, 3658.0], [2102.0, 3684.0], [2094.0, 3700.0], [2086.0, 3758.0], [2294.0, 2808.0], [2286.0, 2839.0], [2246.0, 2964.0], [2270.0, 2891.0], [2302.0, 34.0], [2278.0, 2870.5], [2206.0, 3139.0], [2198.0, 3158.0], [2190.0, 38.0], [2182.0, 3281.5], [2238.0, 32.0], [2230.0, 114.0], [2222.0, 3119.0], [2326.0, 40.0], [2382.0, 2364.0], [2406.0, 37.5], [2310.0, 58.0], [2334.0, 52.0], [2366.0, 2429.0], [2358.0, 38.0], [2350.0, 1263.0], [2342.0, 44.0], [2414.0, 2131.0], [2422.0, 2015.5], [2374.0, 50.0], [2390.0, 50.0], [2398.0, 1129.0], [2430.0, 80.0], [2446.0, 272.0], [2438.0, 1872.0], [2159.0, 40.0], [2151.0, 3377.0], [2175.0, 53.333333333333336], [2119.0, 3540.5], [2167.0, 1695.0], [2111.0, 3581.0], [2063.0, 3903.0], [2071.0, 3814.0], [2079.0, 3775.0], [2095.0, 3701.0], [2087.0, 3753.0], [2295.0, 43.0], [2303.0, 40.0], [2247.0, 33.0], [2255.0, 2943.0], [2263.0, 1477.5], [2271.0, 43.0], [2287.0, 2831.0], [2279.0, 33.0], [2199.0, 38.0], [2191.0, 44.0], [2183.0, 3243.0], [2239.0, 32.0], [2231.0, 3077.0], [2223.0, 3114.0], [2407.0, 2170.0], [2319.0, 1380.5], [2423.0, 1894.0], [2367.0, 2425.0], [2311.0, 44.0], [2327.0, 40.0], [2335.0, 2672.0], [2359.0, 2460.0], [2351.0, 2485.0], [2431.0, 2023.0], [2375.0, 2381.0], [2399.0, 36.0], [2447.0, 960.2]], "isOverall": false, "label": "Healthcheck", "isController": false}, {"data": [[1249.9667999999974, 6659.785999999994]], "isOverall": false, "label": "Healthcheck-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2447.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20525.7, "minX": 1.7556624E12, "maxY": 30195.216666666667, "series": [{"data": [[1.7556624E12, 30195.216666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7556624E12, 20525.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556624E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6659.785999999994, "minX": 1.7556624E12, "maxY": 6659.785999999994, "series": [{"data": [[1.7556624E12, 6659.785999999994]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556624E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6641.706399999992, "minX": 1.7556624E12, "maxY": 6641.706399999992, "series": [{"data": [[1.7556624E12, 6641.706399999992]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556624E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5329.892000000009, "minX": 1.7556624E12, "maxY": 5329.892000000009, "series": [{"data": [[1.7556624E12, 5329.892000000009]], "isOverall": false, "label": "Healthcheck", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556624E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.7556624E12, "maxY": 10321.0, "series": [{"data": [[1.7556624E12, 10321.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7556624E12, 9535.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7556624E12, 9986.779999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7556624E12, 9740.499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7556624E12, 29.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7556624E12, 7304.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556624E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 83.0, "minX": 28.0, "maxY": 9490.0, "series": [{"data": [[273.0, 9490.0], [682.0, 9264.0], [181.0, 8460.0], [199.0, 5108.0], [216.0, 6222.0], [28.0, 1043.5], [228.0, 3564.5], [450.0, 6734.0], [243.0, 83.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[450.0, 6460.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 682.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 28.0, "maxY": 9490.0, "series": [{"data": [[273.0, 9490.0], [682.0, 9264.0], [181.0, 8460.0], [199.0, 5108.0], [216.0, 6222.0], [28.0, 1043.5], [228.0, 3564.5], [450.0, 6734.0], [243.0, 83.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[450.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 682.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7556624E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7556624E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556624E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.7556624E12, "maxY": 41.55, "series": [{"data": [[1.7556624E12, 0.11666666666666667]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.7556624E12, 41.55]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7556624E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.7556624E12, "maxY": 41.55, "series": [{"data": [[1.7556624E12, 41.55]], "isOverall": false, "label": "Healthcheck-success", "isController": false}, {"data": [[1.7556624E12, 0.11666666666666667]], "isOverall": false, "label": "Healthcheck-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556624E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.7556624E12, "maxY": 41.55, "series": [{"data": [[1.7556624E12, 41.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7556624E12, 0.11666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7556624E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

