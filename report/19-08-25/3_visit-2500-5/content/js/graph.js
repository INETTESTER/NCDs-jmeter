/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2277.0, "minX": 0.0, "maxY": 12384.0, "series": [{"data": [[0.0, 2277.0], [0.1, 2300.0], [0.2, 2434.0], [0.3, 2467.0], [0.4, 2486.0], [0.5, 2501.0], [0.6, 2548.0], [0.7, 2569.0], [0.8, 2589.0], [0.9, 2591.0], [1.0, 2644.0], [1.1, 2693.0], [1.2, 2697.0], [1.3, 2720.0], [1.4, 2724.0], [1.5, 2774.0], [1.6, 2790.0], [1.7, 2813.0], [1.8, 2814.0], [1.9, 2840.0], [2.0, 2844.0], [2.1, 2855.0], [2.2, 2900.0], [2.3, 2905.0], [2.4, 2918.0], [2.5, 2937.0], [2.6, 2942.0], [2.7, 2950.0], [2.8, 2964.0], [2.9, 2970.0], [3.0, 2977.0], [3.1, 2982.0], [3.2, 2983.0], [3.3, 3017.0], [3.4, 3046.0], [3.5, 3054.0], [3.6, 3078.0], [3.7, 3096.0], [3.8, 3099.0], [3.9, 3101.0], [4.0, 3115.0], [4.1, 3124.0], [4.2, 3128.0], [4.3, 3138.0], [4.4, 3143.0], [4.5, 3149.0], [4.6, 3155.0], [4.7, 3165.0], [4.8, 3175.0], [4.9, 3184.0], [5.0, 3185.0], [5.1, 3188.0], [5.2, 3194.0], [5.3, 3197.0], [5.4, 3198.0], [5.5, 3204.0], [5.6, 3206.0], [5.7, 3216.0], [5.8, 3219.0], [5.9, 3227.0], [6.0, 3234.0], [6.1, 3246.0], [6.2, 3256.0], [6.3, 3268.0], [6.4, 3269.0], [6.5, 3276.0], [6.6, 3281.0], [6.7, 3289.0], [6.8, 3291.0], [6.9, 3300.0], [7.0, 3302.0], [7.1, 3308.0], [7.2, 3316.0], [7.3, 3329.0], [7.4, 3347.0], [7.5, 3352.0], [7.6, 3359.0], [7.7, 3380.0], [7.8, 3403.0], [7.9, 3416.0], [8.0, 3426.0], [8.1, 3440.0], [8.2, 3445.0], [8.3, 3456.0], [8.4, 3459.0], [8.5, 3468.0], [8.6, 3478.0], [8.7, 3485.0], [8.8, 3507.0], [8.9, 3514.0], [9.0, 3529.0], [9.1, 3543.0], [9.2, 3564.0], [9.3, 3570.0], [9.4, 3578.0], [9.5, 3584.0], [9.6, 3594.0], [9.7, 3603.0], [9.8, 3614.0], [9.9, 3615.0], [10.0, 3631.0], [10.1, 3631.0], [10.2, 3639.0], [10.3, 3645.0], [10.4, 3658.0], [10.5, 3664.0], [10.6, 3672.0], [10.7, 3681.0], [10.8, 3694.0], [10.9, 3697.0], [11.0, 3707.0], [11.1, 3709.0], [11.2, 3714.0], [11.3, 3716.0], [11.4, 3725.0], [11.5, 3728.0], [11.6, 3738.0], [11.7, 3739.0], [11.8, 3743.0], [11.9, 3747.0], [12.0, 3761.0], [12.1, 3762.0], [12.2, 3770.0], [12.3, 3771.0], [12.4, 3781.0], [12.5, 3786.0], [12.6, 3794.0], [12.7, 3798.0], [12.8, 3804.0], [12.9, 3807.0], [13.0, 3808.0], [13.1, 3809.0], [13.2, 3814.0], [13.3, 3818.0], [13.4, 3827.0], [13.5, 3833.0], [13.6, 3843.0], [13.7, 3852.0], [13.8, 3864.0], [13.9, 3876.0], [14.0, 3883.0], [14.1, 3884.0], [14.2, 3898.0], [14.3, 3909.0], [14.4, 3915.0], [14.5, 3917.0], [14.6, 3920.0], [14.7, 3921.0], [14.8, 3928.0], [14.9, 3929.0], [15.0, 3944.0], [15.1, 3948.0], [15.2, 3959.0], [15.3, 3962.0], [15.4, 3987.0], [15.5, 3998.0], [15.6, 4016.0], [15.7, 4018.0], [15.8, 4039.0], [15.9, 4056.0], [16.0, 4066.0], [16.1, 4076.0], [16.2, 4092.0], [16.3, 4099.0], [16.4, 4121.0], [16.5, 4122.0], [16.6, 4127.0], [16.7, 4132.0], [16.8, 4139.0], [16.9, 4147.0], [17.0, 4156.0], [17.1, 4159.0], [17.2, 4195.0], [17.3, 4200.0], [17.4, 4205.0], [17.5, 4213.0], [17.6, 4226.0], [17.7, 4231.0], [17.8, 4248.0], [17.9, 4268.0], [18.0, 4283.0], [18.1, 4283.0], [18.2, 4293.0], [18.3, 4306.0], [18.4, 4309.0], [18.5, 4314.0], [18.6, 4355.0], [18.7, 4360.0], [18.8, 4380.0], [18.9, 4393.0], [19.0, 4415.0], [19.1, 4425.0], [19.2, 4427.0], [19.3, 4430.0], [19.4, 4440.0], [19.5, 4447.0], [19.6, 4469.0], [19.7, 4478.0], [19.8, 4484.0], [19.9, 4489.0], [20.0, 4526.0], [20.1, 4533.0], [20.2, 4547.0], [20.3, 4564.0], [20.4, 4579.0], [20.5, 4583.0], [20.6, 4591.0], [20.7, 4609.0], [20.8, 4614.0], [20.9, 4621.0], [21.0, 4627.0], [21.1, 4630.0], [21.2, 4648.0], [21.3, 4662.0], [21.4, 4677.0], [21.5, 4679.0], [21.6, 4685.0], [21.7, 4695.0], [21.8, 4710.0], [21.9, 4712.0], [22.0, 4729.0], [22.1, 4734.0], [22.2, 4758.0], [22.3, 4780.0], [22.4, 4795.0], [22.5, 4807.0], [22.6, 4841.0], [22.7, 4855.0], [22.8, 4868.0], [22.9, 4870.0], [23.0, 4896.0], [23.1, 4904.0], [23.2, 4920.0], [23.3, 4925.0], [23.4, 4961.0], [23.5, 4996.0], [23.6, 5005.0], [23.7, 5025.0], [23.8, 5044.0], [23.9, 5056.0], [24.0, 5080.0], [24.1, 5100.0], [24.2, 5109.0], [24.3, 5118.0], [24.4, 5149.0], [24.5, 5156.0], [24.6, 5172.0], [24.7, 5179.0], [24.8, 5191.0], [24.9, 5211.0], [25.0, 5236.0], [25.1, 5241.0], [25.2, 5248.0], [25.3, 5252.0], [25.4, 5258.0], [25.5, 5270.0], [25.6, 5277.0], [25.7, 5293.0], [25.8, 5298.0], [25.9, 5304.0], [26.0, 5310.0], [26.1, 5321.0], [26.2, 5330.0], [26.3, 5333.0], [26.4, 5337.0], [26.5, 5345.0], [26.6, 5356.0], [26.7, 5359.0], [26.8, 5368.0], [26.9, 5370.0], [27.0, 5380.0], [27.1, 5390.0], [27.2, 5406.0], [27.3, 5412.0], [27.4, 5416.0], [27.5, 5418.0], [27.6, 5431.0], [27.7, 5457.0], [27.8, 5482.0], [27.9, 5504.0], [28.0, 5519.0], [28.1, 5526.0], [28.2, 5546.0], [28.3, 5549.0], [28.4, 5566.0], [28.5, 5577.0], [28.6, 5587.0], [28.7, 5595.0], [28.8, 5606.0], [28.9, 5628.0], [29.0, 5642.0], [29.1, 5644.0], [29.2, 5662.0], [29.3, 5669.0], [29.4, 5685.0], [29.5, 5698.0], [29.6, 5717.0], [29.7, 5738.0], [29.8, 5743.0], [29.9, 5752.0], [30.0, 5760.0], [30.1, 5769.0], [30.2, 5780.0], [30.3, 5808.0], [30.4, 5826.0], [30.5, 5851.0], [30.6, 5862.0], [30.7, 5896.0], [30.8, 5914.0], [30.9, 5921.0], [31.0, 5965.0], [31.1, 5969.0], [31.2, 5995.0], [31.3, 6012.0], [31.4, 6020.0], [31.5, 6030.0], [31.6, 6053.0], [31.7, 6064.0], [31.8, 6088.0], [31.9, 6098.0], [32.0, 6109.0], [32.1, 6124.0], [32.2, 6131.0], [32.3, 6134.0], [32.4, 6174.0], [32.5, 6190.0], [32.6, 6223.0], [32.7, 6234.0], [32.8, 6239.0], [32.9, 6258.0], [33.0, 6260.0], [33.1, 6267.0], [33.2, 6274.0], [33.3, 6288.0], [33.4, 6308.0], [33.5, 6327.0], [33.6, 6332.0], [33.7, 6341.0], [33.8, 6353.0], [33.9, 6371.0], [34.0, 6380.0], [34.1, 6386.0], [34.2, 6418.0], [34.3, 6423.0], [34.4, 6449.0], [34.5, 6455.0], [34.6, 6470.0], [34.7, 6474.0], [34.8, 6478.0], [34.9, 6494.0], [35.0, 6496.0], [35.1, 6509.0], [35.2, 6511.0], [35.3, 6525.0], [35.4, 6542.0], [35.5, 6546.0], [35.6, 6567.0], [35.7, 6572.0], [35.8, 6587.0], [35.9, 6591.0], [36.0, 6610.0], [36.1, 6618.0], [36.2, 6627.0], [36.3, 6651.0], [36.4, 6655.0], [36.5, 6670.0], [36.6, 6677.0], [36.7, 6686.0], [36.8, 6699.0], [36.9, 6702.0], [37.0, 6715.0], [37.1, 6722.0], [37.2, 6733.0], [37.3, 6741.0], [37.4, 6763.0], [37.5, 6766.0], [37.6, 6772.0], [37.7, 6773.0], [37.8, 6781.0], [37.9, 6789.0], [38.0, 6798.0], [38.1, 6809.0], [38.2, 6827.0], [38.3, 6841.0], [38.4, 6856.0], [38.5, 6859.0], [38.6, 6875.0], [38.7, 6892.0], [38.8, 6908.0], [38.9, 6946.0], [39.0, 6954.0], [39.1, 6960.0], [39.2, 6981.0], [39.3, 6986.0], [39.4, 6995.0], [39.5, 7004.0], [39.6, 7022.0], [39.7, 7044.0], [39.8, 7065.0], [39.9, 7093.0], [40.0, 7129.0], [40.1, 7168.0], [40.2, 7179.0], [40.3, 7191.0], [40.4, 7225.0], [40.5, 7239.0], [40.6, 7285.0], [40.7, 7297.0], [40.8, 7313.0], [40.9, 7345.0], [41.0, 7389.0], [41.1, 7413.0], [41.2, 7476.0], [41.3, 7493.0], [41.4, 7508.0], [41.5, 7542.0], [41.6, 7589.0], [41.7, 7598.0], [41.8, 7630.0], [41.9, 7654.0], [42.0, 7705.0], [42.1, 7719.0], [42.2, 7768.0], [42.3, 7778.0], [42.4, 7836.0], [42.5, 7867.0], [42.6, 7884.0], [42.7, 7905.0], [42.8, 7975.0], [42.9, 7995.0], [43.0, 8062.0], [43.1, 8131.0], [43.2, 8158.0], [43.3, 8179.0], [43.4, 8201.0], [43.5, 8210.0], [43.6, 8224.0], [43.7, 8266.0], [43.8, 8288.0], [43.9, 8299.0], [44.0, 8303.0], [44.1, 8315.0], [44.2, 8346.0], [44.3, 8363.0], [44.4, 8399.0], [44.5, 8423.0], [44.6, 8429.0], [44.7, 8431.0], [44.8, 8447.0], [44.9, 8451.0], [45.0, 8495.0], [45.1, 8512.0], [45.2, 8522.0], [45.3, 8528.0], [45.4, 8537.0], [45.5, 8548.0], [45.6, 8581.0], [45.7, 8582.0], [45.8, 8599.0], [45.9, 8605.0], [46.0, 8628.0], [46.1, 8659.0], [46.2, 8697.0], [46.3, 8719.0], [46.4, 8742.0], [46.5, 8756.0], [46.6, 8782.0], [46.7, 8789.0], [46.8, 8800.0], [46.9, 8829.0], [47.0, 8850.0], [47.1, 8856.0], [47.2, 8920.0], [47.3, 8931.0], [47.4, 8990.0], [47.5, 9003.0], [47.6, 9013.0], [47.7, 9044.0], [47.8, 9069.0], [47.9, 9076.0], [48.0, 9098.0], [48.1, 9115.0], [48.2, 9138.0], [48.3, 9150.0], [48.4, 9181.0], [48.5, 9199.0], [48.6, 9225.0], [48.7, 9226.0], [48.8, 9239.0], [48.9, 9240.0], [49.0, 9259.0], [49.1, 9271.0], [49.2, 9293.0], [49.3, 9303.0], [49.4, 9307.0], [49.5, 9308.0], [49.6, 9318.0], [49.7, 9335.0], [49.8, 9362.0], [49.9, 9364.0], [50.0, 9376.0], [50.1, 9380.0], [50.2, 9388.0], [50.3, 9407.0], [50.4, 9422.0], [50.5, 9434.0], [50.6, 9480.0], [50.7, 9494.0], [50.8, 9529.0], [50.9, 9539.0], [51.0, 9600.0], [51.1, 9617.0], [51.2, 9633.0], [51.3, 9643.0], [51.4, 9655.0], [51.5, 9661.0], [51.6, 9678.0], [51.7, 9681.0], [51.8, 9707.0], [51.9, 9730.0], [52.0, 9738.0], [52.1, 9754.0], [52.2, 9765.0], [52.3, 9778.0], [52.4, 9787.0], [52.5, 9800.0], [52.6, 9822.0], [52.7, 9872.0], [52.8, 9880.0], [52.9, 9887.0], [53.0, 9890.0], [53.1, 9896.0], [53.2, 9923.0], [53.3, 9927.0], [53.4, 9944.0], [53.5, 9950.0], [53.6, 9970.0], [53.7, 9973.0], [53.8, 9976.0], [53.9, 9979.0], [54.0, 9981.0], [54.1, 9987.0], [54.2, 10011.0], [54.3, 10017.0], [54.4, 10041.0], [54.5, 10046.0], [54.6, 10062.0], [54.7, 10068.0], [54.8, 10080.0], [54.9, 10090.0], [55.0, 10101.0], [55.1, 10103.0], [55.2, 10119.0], [55.3, 10134.0], [55.4, 10142.0], [55.5, 10158.0], [55.6, 10173.0], [55.7, 10178.0], [55.8, 10209.0], [55.9, 10213.0], [56.0, 10228.0], [56.1, 10232.0], [56.2, 10235.0], [56.3, 10243.0], [56.4, 10254.0], [56.5, 10261.0], [56.6, 10294.0], [56.7, 10296.0], [56.8, 10309.0], [56.9, 10316.0], [57.0, 10326.0], [57.1, 10330.0], [57.2, 10337.0], [57.3, 10338.0], [57.4, 10344.0], [57.5, 10346.0], [57.6, 10358.0], [57.7, 10375.0], [57.8, 10385.0], [57.9, 10387.0], [58.0, 10394.0], [58.1, 10402.0], [58.2, 10412.0], [58.3, 10420.0], [58.4, 10433.0], [58.5, 10435.0], [58.6, 10453.0], [58.7, 10455.0], [58.8, 10460.0], [58.9, 10462.0], [59.0, 10464.0], [59.1, 10471.0], [59.2, 10475.0], [59.3, 10487.0], [59.4, 10492.0], [59.5, 10500.0], [59.6, 10508.0], [59.7, 10512.0], [59.8, 10515.0], [59.9, 10521.0], [60.0, 10529.0], [60.1, 10534.0], [60.2, 10541.0], [60.3, 10546.0], [60.4, 10549.0], [60.5, 10553.0], [60.6, 10559.0], [60.7, 10565.0], [60.8, 10577.0], [60.9, 10586.0], [61.0, 10590.0], [61.1, 10596.0], [61.2, 10603.0], [61.3, 10604.0], [61.4, 10628.0], [61.5, 10629.0], [61.6, 10654.0], [61.7, 10656.0], [61.8, 10670.0], [61.9, 10673.0], [62.0, 10677.0], [62.1, 10682.0], [62.2, 10685.0], [62.3, 10689.0], [62.4, 10702.0], [62.5, 10704.0], [62.6, 10713.0], [62.7, 10716.0], [62.8, 10726.0], [62.9, 10730.0], [63.0, 10733.0], [63.1, 10738.0], [63.2, 10743.0], [63.3, 10757.0], [63.4, 10761.0], [63.5, 10765.0], [63.6, 10768.0], [63.7, 10770.0], [63.8, 10772.0], [63.9, 10775.0], [64.0, 10786.0], [64.1, 10789.0], [64.2, 10790.0], [64.3, 10800.0], [64.4, 10808.0], [64.5, 10815.0], [64.6, 10821.0], [64.7, 10824.0], [64.8, 10829.0], [64.9, 10834.0], [65.0, 10838.0], [65.1, 10839.0], [65.2, 10845.0], [65.3, 10846.0], [65.4, 10853.0], [65.5, 10856.0], [65.6, 10858.0], [65.7, 10861.0], [65.8, 10867.0], [65.9, 10871.0], [66.0, 10873.0], [66.1, 10879.0], [66.2, 10880.0], [66.3, 10890.0], [66.4, 10892.0], [66.5, 10897.0], [66.6, 10903.0], [66.7, 10905.0], [66.8, 10908.0], [66.9, 10910.0], [67.0, 10914.0], [67.1, 10918.0], [67.2, 10919.0], [67.3, 10926.0], [67.4, 10934.0], [67.5, 10937.0], [67.6, 10939.0], [67.7, 10942.0], [67.8, 10947.0], [67.9, 10950.0], [68.0, 10954.0], [68.1, 10957.0], [68.2, 10961.0], [68.3, 10965.0], [68.4, 10976.0], [68.5, 10985.0], [68.6, 10987.0], [68.7, 10990.0], [68.8, 10996.0], [68.9, 11000.0], [69.0, 11001.0], [69.1, 11002.0], [69.2, 11005.0], [69.3, 11007.0], [69.4, 11009.0], [69.5, 11013.0], [69.6, 11021.0], [69.7, 11025.0], [69.8, 11030.0], [69.9, 11035.0], [70.0, 11040.0], [70.1, 11040.0], [70.2, 11042.0], [70.3, 11044.0], [70.4, 11046.0], [70.5, 11049.0], [70.6, 11055.0], [70.7, 11060.0], [70.8, 11066.0], [70.9, 11068.0], [71.0, 11071.0], [71.1, 11074.0], [71.2, 11077.0], [71.3, 11083.0], [71.4, 11083.0], [71.5, 11084.0], [71.6, 11086.0], [71.7, 11088.0], [71.8, 11093.0], [71.9, 11094.0], [72.0, 11098.0], [72.1, 11102.0], [72.2, 11106.0], [72.3, 11107.0], [72.4, 11110.0], [72.5, 11111.0], [72.6, 11114.0], [72.7, 11119.0], [72.8, 11123.0], [72.9, 11128.0], [73.0, 11130.0], [73.1, 11130.0], [73.2, 11135.0], [73.3, 11138.0], [73.4, 11140.0], [73.5, 11142.0], [73.6, 11146.0], [73.7, 11149.0], [73.8, 11150.0], [73.9, 11156.0], [74.0, 11160.0], [74.1, 11161.0], [74.2, 11163.0], [74.3, 11164.0], [74.4, 11166.0], [74.5, 11168.0], [74.6, 11175.0], [74.7, 11176.0], [74.8, 11179.0], [74.9, 11181.0], [75.0, 11184.0], [75.1, 11186.0], [75.2, 11189.0], [75.3, 11194.0], [75.4, 11199.0], [75.5, 11199.0], [75.6, 11201.0], [75.7, 11203.0], [75.8, 11204.0], [75.9, 11208.0], [76.0, 11214.0], [76.1, 11215.0], [76.2, 11218.0], [76.3, 11219.0], [76.4, 11224.0], [76.5, 11227.0], [76.6, 11228.0], [76.7, 11229.0], [76.8, 11230.0], [76.9, 11231.0], [77.0, 11237.0], [77.1, 11239.0], [77.2, 11241.0], [77.3, 11242.0], [77.4, 11244.0], [77.5, 11245.0], [77.6, 11246.0], [77.7, 11249.0], [77.8, 11251.0], [77.9, 11254.0], [78.0, 11255.0], [78.1, 11256.0], [78.2, 11258.0], [78.3, 11261.0], [78.4, 11263.0], [78.5, 11264.0], [78.6, 11268.0], [78.7, 11271.0], [78.8, 11276.0], [78.9, 11279.0], [79.0, 11280.0], [79.1, 11285.0], [79.2, 11286.0], [79.3, 11286.0], [79.4, 11289.0], [79.5, 11289.0], [79.6, 11292.0], [79.7, 11294.0], [79.8, 11295.0], [79.9, 11298.0], [80.0, 11299.0], [80.1, 11300.0], [80.2, 11304.0], [80.3, 11305.0], [80.4, 11307.0], [80.5, 11308.0], [80.6, 11310.0], [80.7, 11319.0], [80.8, 11321.0], [80.9, 11322.0], [81.0, 11325.0], [81.1, 11326.0], [81.2, 11328.0], [81.3, 11328.0], [81.4, 11332.0], [81.5, 11333.0], [81.6, 11335.0], [81.7, 11336.0], [81.8, 11337.0], [81.9, 11339.0], [82.0, 11342.0], [82.1, 11342.0], [82.2, 11349.0], [82.3, 11350.0], [82.4, 11352.0], [82.5, 11353.0], [82.6, 11355.0], [82.7, 11357.0], [82.8, 11362.0], [82.9, 11364.0], [83.0, 11365.0], [83.1, 11369.0], [83.2, 11370.0], [83.3, 11374.0], [83.4, 11375.0], [83.5, 11377.0], [83.6, 11378.0], [83.7, 11379.0], [83.8, 11380.0], [83.9, 11384.0], [84.0, 11384.0], [84.1, 11388.0], [84.2, 11388.0], [84.3, 11393.0], [84.4, 11396.0], [84.5, 11399.0], [84.6, 11401.0], [84.7, 11403.0], [84.8, 11403.0], [84.9, 11405.0], [85.0, 11408.0], [85.1, 11411.0], [85.2, 11412.0], [85.3, 11413.0], [85.4, 11417.0], [85.5, 11418.0], [85.6, 11423.0], [85.7, 11427.0], [85.8, 11429.0], [85.9, 11433.0], [86.0, 11436.0], [86.1, 11444.0], [86.2, 11445.0], [86.3, 11448.0], [86.4, 11452.0], [86.5, 11454.0], [86.6, 11456.0], [86.7, 11457.0], [86.8, 11457.0], [86.9, 11461.0], [87.0, 11462.0], [87.1, 11465.0], [87.2, 11468.0], [87.3, 11474.0], [87.4, 11476.0], [87.5, 11483.0], [87.6, 11485.0], [87.7, 11489.0], [87.8, 11492.0], [87.9, 11494.0], [88.0, 11497.0], [88.1, 11499.0], [88.2, 11501.0], [88.3, 11506.0], [88.4, 11509.0], [88.5, 11512.0], [88.6, 11516.0], [88.7, 11518.0], [88.8, 11518.0], [88.9, 11521.0], [89.0, 11522.0], [89.1, 11526.0], [89.2, 11530.0], [89.3, 11532.0], [89.4, 11533.0], [89.5, 11535.0], [89.6, 11537.0], [89.7, 11539.0], [89.8, 11540.0], [89.9, 11540.0], [90.0, 11545.0], [90.1, 11551.0], [90.2, 11555.0], [90.3, 11560.0], [90.4, 11561.0], [90.5, 11562.0], [90.6, 11564.0], [90.7, 11570.0], [90.8, 11575.0], [90.9, 11577.0], [91.0, 11581.0], [91.1, 11583.0], [91.2, 11587.0], [91.3, 11591.0], [91.4, 11591.0], [91.5, 11593.0], [91.6, 11596.0], [91.7, 11600.0], [91.8, 11603.0], [91.9, 11605.0], [92.0, 11606.0], [92.1, 11611.0], [92.2, 11615.0], [92.3, 11622.0], [92.4, 11624.0], [92.5, 11627.0], [92.6, 11631.0], [92.7, 11642.0], [92.8, 11643.0], [92.9, 11650.0], [93.0, 11650.0], [93.1, 11656.0], [93.2, 11660.0], [93.3, 11667.0], [93.4, 11671.0], [93.5, 11673.0], [93.6, 11676.0], [93.7, 11684.0], [93.8, 11685.0], [93.9, 11694.0], [94.0, 11698.0], [94.1, 11700.0], [94.2, 11703.0], [94.3, 11705.0], [94.4, 11709.0], [94.5, 11720.0], [94.6, 11730.0], [94.7, 11735.0], [94.8, 11736.0], [94.9, 11739.0], [95.0, 11743.0], [95.1, 11747.0], [95.2, 11747.0], [95.3, 11758.0], [95.4, 11761.0], [95.5, 11769.0], [95.6, 11772.0], [95.7, 11775.0], [95.8, 11787.0], [95.9, 11792.0], [96.0, 11793.0], [96.1, 11802.0], [96.2, 11804.0], [96.3, 11806.0], [96.4, 11818.0], [96.5, 11822.0], [96.6, 11835.0], [96.7, 11839.0], [96.8, 11842.0], [96.9, 11846.0], [97.0, 11854.0], [97.1, 11878.0], [97.2, 11884.0], [97.3, 11901.0], [97.4, 11918.0], [97.5, 11924.0], [97.6, 11928.0], [97.7, 11945.0], [97.8, 11957.0], [97.9, 11974.0], [98.0, 11976.0], [98.1, 11984.0], [98.2, 11986.0], [98.3, 12000.0], [98.4, 12024.0], [98.5, 12042.0], [98.6, 12047.0], [98.7, 12074.0], [98.8, 12093.0], [98.9, 12099.0], [99.0, 12101.0], [99.1, 12121.0], [99.2, 12133.0], [99.3, 12167.0], [99.4, 12187.0], [99.5, 12224.0], [99.6, 12233.0], [99.7, 12245.0], [99.8, 12284.0], [99.9, 12352.0], [100.0, 12384.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2200.0, "maxY": 113.0, "series": [{"data": [[2200.0, 2.0], [2300.0, 1.0], [2400.0, 9.0], [2500.0, 11.0], [2600.0, 7.0], [2700.0, 12.0], [2800.0, 12.0], [2900.0, 27.0], [3000.0, 14.0], [3100.0, 40.0], [3300.0, 21.0], [3200.0, 37.0], [3400.0, 26.0], [3500.0, 23.0], [3600.0, 32.0], [3700.0, 45.0], [3800.0, 37.0], [3900.0, 32.0], [4000.0, 20.0], [4100.0, 24.0], [4300.0, 17.0], [4200.0, 24.0], [4400.0, 26.0], [4500.0, 18.0], [4600.0, 28.0], [4700.0, 16.0], [4800.0, 16.0], [4900.0, 12.0], [5100.0, 20.0], [5000.0, 12.0], [5200.0, 25.0], [5300.0, 34.0], [5400.0, 17.0], [5500.0, 21.0], [5600.0, 20.0], [5700.0, 19.0], [5800.0, 12.0], [5900.0, 12.0], [6000.0, 17.0], [6100.0, 16.0], [6200.0, 20.0], [6300.0, 19.0], [6400.0, 23.0], [6500.0, 23.0], [6600.0, 22.0], [6700.0, 30.0], [6800.0, 18.0], [6900.0, 17.0], [7000.0, 13.0], [7100.0, 10.0], [7200.0, 9.0], [7300.0, 8.0], [7400.0, 8.0], [7500.0, 9.0], [7600.0, 7.0], [7700.0, 8.0], [7800.0, 9.0], [7900.0, 6.0], [8100.0, 9.0], [8000.0, 3.0], [8200.0, 15.0], [8400.0, 15.0], [8300.0, 11.0], [8500.0, 21.0], [8600.0, 9.0], [8700.0, 14.0], [8800.0, 9.0], [8900.0, 7.0], [9000.0, 15.0], [9200.0, 19.0], [9100.0, 12.0], [9300.0, 25.0], [9400.0, 11.0], [9500.0, 7.0], [9600.0, 20.0], [9700.0, 17.0], [9800.0, 17.0], [9900.0, 26.0], [10000.0, 20.0], [10100.0, 19.0], [10200.0, 25.0], [10300.0, 33.0], [10400.0, 35.0], [10500.0, 42.0], [10600.0, 31.0], [10700.0, 47.0], [10800.0, 56.0], [10900.0, 59.0], [11000.0, 79.0], [11100.0, 87.0], [11200.0, 113.0], [11300.0, 112.0], [11400.0, 91.0], [11500.0, 88.0], [11600.0, 60.0], [11700.0, 50.0], [11800.0, 30.0], [11900.0, 25.0], [12000.0, 16.0], [12100.0, 12.0], [12200.0, 10.0], [12300.0, 5.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.5831999999953, "minX": 1.75558848E12, "maxY": 1251.5831999999953, "series": [{"data": [[1.75558848E12, 1251.5831999999953]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558848E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2427.0, "minX": 1.0, "maxY": 12187.0, "series": [{"data": [[2.0, 11735.0], [3.0, 11790.0], [6.0, 11782.0], [7.0, 11734.0], [8.0, 11593.0], [9.0, 11587.0], [11.0, 11761.0], [12.0, 11772.0], [13.0, 11985.0], [15.0, 11700.5], [17.0, 11836.0], [18.0, 12060.0], [21.0, 11568.333333333334], [22.0, 12093.0], [24.0, 11989.5], [26.0, 11633.5], [28.0, 12088.5], [29.0, 11298.0], [30.0, 11660.0], [31.0, 11667.0], [33.0, 11601.5], [35.0, 11802.0], [34.0, 11528.0], [39.0, 11642.0], [38.0, 11692.333333333334], [41.0, 11932.0], [43.0, 11582.0], [42.0, 11822.0], [45.0, 11924.0], [44.0, 11928.0], [46.0, 11599.0], [51.0, 11713.8], [52.0, 11569.0], [54.0, 11746.5], [57.0, 11685.0], [56.0, 11621.0], [58.0, 12099.0], [61.0, 11777.333333333334], [63.0, 11742.0], [62.0, 11606.0], [67.0, 12016.5], [65.0, 11663.5], [73.0, 11561.0], [78.0, 11620.0], [77.0, 12187.0], [76.0, 11792.166666666666], [83.0, 11984.8], [86.0, 11968.0], [85.0, 11612.0], [84.0, 11570.0], [91.0, 11916.0], [95.0, 11759.75], [93.0, 11457.0], [92.0, 11561.0], [99.0, 11662.0], [102.0, 11622.0], [101.0, 11861.5], [106.0, 11166.0], [105.0, 11741.0], [111.0, 11566.0], [110.0, 11591.0], [113.0, 11488.5], [118.0, 11507.5], [116.0, 11595.0], [123.0, 11847.666666666666], [121.0, 11671.0], [120.0, 11650.0], [127.0, 11523.5], [125.0, 11574.5], [132.0, 11766.0], [131.0, 11707.666666666666], [128.0, 11149.0], [142.0, 11494.0], [138.0, 12101.0], [137.0, 11617.75], [136.0, 11497.0], [151.0, 11361.0], [150.0, 11609.0], [149.0, 11885.5], [148.0, 11631.0], [146.0, 11501.4], [144.0, 11862.5], [158.0, 11450.0], [157.0, 11592.0], [156.0, 11545.0], [155.0, 11420.5], [153.0, 11401.0], [152.0, 11492.0], [164.0, 11526.5], [163.0, 11596.0], [161.0, 11422.666666666666], [174.0, 11581.0], [168.0, 11461.75], [180.0, 11495.0], [179.0, 11520.0], [178.0, 11873.0], [190.0, 11456.0], [189.0, 12123.0], [187.0, 11457.0], [184.0, 11787.0], [198.0, 11234.5], [196.0, 11310.0], [195.0, 11305.0], [193.0, 11441.0], [192.0, 11617.76923076923], [207.0, 11590.0], [206.0, 11399.0], [205.0, 11332.0], [203.0, 11444.5], [201.0, 11495.666666666666], [215.0, 11537.0], [213.0, 11533.0], [212.0, 11560.0], [211.0, 11289.0], [210.0, 11522.5], [209.0, 11562.0], [221.0, 11463.833333333334], [220.0, 12121.0], [231.0, 11793.0], [230.0, 11410.0], [229.0, 11609.5], [227.0, 11045.0], [226.0, 11409.0], [224.0, 11397.0], [236.0, 11707.0], [234.0, 11280.0], [232.0, 12062.0], [246.0, 11403.0], [245.0, 12009.0], [244.0, 11509.0], [243.0, 11525.0], [242.0, 11296.0], [240.0, 11447.0], [255.0, 11380.0], [254.0, 11263.0], [253.0, 11544.0], [251.0, 11515.0], [248.0, 11445.0], [270.0, 11674.5], [268.0, 11242.0], [267.0, 11521.0], [266.0, 11328.124999999998], [258.0, 11986.0], [257.0, 11377.0], [256.0, 11393.0], [286.0, 11309.0], [284.0, 12089.0], [283.0, 11512.0], [282.0, 12074.0], [281.0, 11426.5], [279.0, 11241.0], [278.0, 11588.8], [273.0, 11517.666666666666], [300.0, 11529.0], [302.0, 11353.0], [303.0, 11342.0], [301.0, 11763.0], [298.0, 11504.0], [296.0, 11545.5], [294.0, 11444.0], [290.0, 11373.8], [293.0, 12098.0], [292.0, 11299.0], [318.0, 12113.0], [317.0, 11676.333333333334], [316.0, 11463.0], [313.0, 11358.25], [311.0, 11602.5], [308.0, 11969.0], [307.0, 11447.333333333334], [334.0, 11429.25], [330.0, 11468.0], [329.0, 11719.0], [328.0, 11338.666666666666], [326.0, 11554.0], [323.0, 11334.0], [322.0, 11457.0], [321.0, 11210.0], [320.0, 11261.0], [350.0, 11289.0], [349.0, 11712.0], [347.0, 11458.666666666666], [344.0, 11283.25], [343.0, 11459.0], [339.0, 11526.666666666666], [336.0, 11315.5], [367.0, 11776.0], [362.0, 11319.5], [360.0, 11299.0], [357.0, 11652.0], [355.0, 11450.0], [352.0, 11275.5], [383.0, 11516.0], [381.0, 11279.0], [379.0, 11226.5], [376.0, 11522.0], [375.0, 11371.0], [373.0, 11483.0], [368.0, 11407.666666666666], [399.0, 11410.714285714286], [392.0, 11121.666666666666], [391.0, 11304.666666666666], [386.0, 11322.0], [384.0, 11273.0], [413.0, 11694.0], [411.0, 11418.0], [410.0, 11157.0], [409.0, 11401.0], [406.0, 11286.0], [405.0, 11242.5], [404.0, 11948.0], [402.0, 11258.0], [401.0, 11383.0], [430.0, 11868.0], [427.0, 11191.333333333334], [424.0, 11230.714285714286], [420.0, 11365.0], [419.0, 11693.0], [434.0, 11132.0], [445.0, 11256.0], [444.0, 11685.0], [441.0, 11249.0], [440.0, 11854.0], [437.0, 11250.0], [436.0, 12007.0], [433.0, 11130.0], [432.0, 11567.0], [460.0, 11355.0], [459.0, 11188.57142857143], [456.0, 11214.0], [451.0, 11388.0], [450.0, 11326.2], [478.0, 11548.0], [476.0, 11189.666666666666], [474.0, 11170.0], [473.0, 11363.0], [471.0, 11476.333333333334], [468.0, 11352.0], [467.0, 11307.0], [465.0, 11227.4], [494.0, 11265.5], [493.0, 11332.0], [491.0, 11179.0], [487.0, 11419.0], [485.0, 11184.0], [483.0, 11211.5], [481.0, 11343.0], [480.0, 11579.5], [504.0, 11606.0], [502.0, 10855.0], [501.0, 11389.333333333334], [498.0, 11297.0], [496.0, 11302.5], [542.0, 11460.0], [520.0, 11092.0], [518.0, 11487.5], [514.0, 11279.3], [564.0, 11138.0], [568.0, 11660.666666666666], [566.0, 11150.0], [562.0, 11176.0], [560.0, 11272.0], [600.0, 10985.0], [606.0, 11050.0], [604.0, 11136.0], [602.0, 11470.0], [582.0, 11108.0], [576.0, 11247.333333333334], [590.0, 11515.25], [586.0, 11215.0], [598.0, 11578.5], [596.0, 11111.0], [632.0, 11372.0], [638.0, 10931.0], [608.0, 11293.5], [612.0, 11118.75], [622.0, 11086.0], [620.0, 11084.0], [616.0, 10960.0], [630.0, 10961.0], [624.0, 10905.5], [666.0, 11222.5], [644.0, 11076.0], [642.0, 11747.0], [656.0, 11720.0], [652.0, 11004.5], [698.0, 11142.0], [696.0, 11022.0], [692.0, 11002.333333333334], [688.0, 11265.0], [686.0, 11254.0], [684.0, 11115.0], [680.0, 11258.0], [732.0, 11124.0], [734.0, 11345.0], [728.0, 10974.0], [710.0, 11158.0], [708.0, 11164.5], [706.0, 10897.0], [718.0, 11009.0], [742.0, 10918.0], [766.0, 10872.0], [762.0, 10937.0], [760.0, 11232.666666666666], [740.0, 11026.0], [736.0, 11672.0], [748.0, 11142.5], [744.0, 10957.5], [756.0, 10955.0], [754.0, 10991.5], [752.0, 11015.75], [792.0, 11555.0], [794.0, 10800.0], [788.0, 10908.0], [796.0, 10730.0], [784.0, 11134.0], [772.0, 10903.0], [770.0, 11211.5], [768.0, 11068.5], [780.0, 10982.5], [778.0, 11071.0], [776.0, 11211.333333333334], [790.0, 10805.0], [826.0, 11501.0], [830.0, 11386.0], [806.0, 11476.0], [804.0, 10846.0], [800.0, 10954.0], [812.0, 10964.0], [810.0, 10918.0], [822.0, 11086.5], [820.0, 10880.0], [836.0, 10927.0], [858.0, 10741.5], [856.0, 11350.0], [838.0, 10681.0], [834.0, 10791.0], [846.0, 10677.0], [844.0, 10808.0], [842.0, 10748.0], [854.0, 10919.0], [850.0, 10792.75], [894.0, 10535.0], [882.0, 10824.0], [892.0, 11008.5], [890.0, 10635.25], [866.0, 10921.666666666666], [876.0, 10772.0], [872.0, 10364.0], [886.0, 11133.5], [884.0, 11285.0], [880.0, 10343.0], [922.0, 10619.0], [926.0, 10234.0], [914.0, 10487.0], [924.0, 10876.0], [920.0, 10845.5], [902.0, 10949.5], [896.0, 11006.5], [910.0, 10596.0], [908.0, 10478.0], [906.0, 10783.0], [918.0, 11369.0], [954.0, 10816.0], [948.0, 10568.5], [944.0, 10549.0], [956.0, 11166.0], [952.0, 11304.0], [934.0, 10992.0], [932.0, 11227.0], [930.0, 11246.0], [928.0, 11234.0], [942.0, 10629.0], [940.0, 10503.0], [938.0, 10773.5], [936.0, 10587.0], [986.0, 10316.0], [990.0, 10475.0], [978.0, 10435.0], [988.0, 10713.5], [962.0, 10706.0], [966.0, 11124.5], [964.0, 10375.0], [972.0, 10460.0], [970.0, 10628.0], [968.0, 11144.0], [982.0, 10420.5], [980.0, 10309.0], [1020.0, 10330.0], [1022.0, 10891.0], [1008.0, 10947.0], [1010.0, 10563.0], [1012.0, 10692.0], [1018.0, 10335.0], [1016.0, 10117.5], [998.0, 10383.0], [996.0, 11002.0], [994.0, 10371.0], [992.0, 10684.0], [1006.0, 10337.0], [1004.0, 11007.0], [1002.0, 10196.0], [1000.0, 10958.0], [1014.0, 10942.0], [1080.0, 10434.6], [1084.0, 10346.0], [1036.0, 9978.0], [1032.0, 10101.0], [1028.0, 10101.0], [1064.0, 9943.666666666666], [1060.0, 10757.0], [1056.0, 10224.0], [1048.0, 10815.0], [1044.0, 9879.0], [1040.0, 10329.0], [1140.0, 10155.0], [1148.0, 10409.5], [1128.0, 10555.0], [1120.0, 10212.0], [1124.0, 10139.0], [1100.0, 10396.333333333334], [1096.0, 10673.0], [1088.0, 10316.0], [1116.0, 10524.0], [1112.0, 9730.0], [1108.0, 10637.0], [1132.0, 10106.0], [1204.0, 10290.0], [1212.0, 9303.0], [1184.0, 9661.0], [1188.0, 10169.0], [1192.0, 10098.0], [1208.0, 10178.0], [1200.0, 9364.0], [1160.0, 10261.333333333334], [1152.0, 10460.0], [1180.0, 10367.0], [1176.0, 10011.0], [1172.0, 9664.0], [1168.0, 10017.0], [1196.0, 10177.0], [1272.0, 9434.0], [1248.0, 9762.0], [1252.0, 9271.0], [1256.0, 9041.5], [1276.0, 9527.0], [1268.0, 9199.0], [1264.0, 9376.0], [1220.0, 9277.0], [1224.0, 10045.0], [1228.0, 9944.0], [1244.0, 9565.0], [1240.0, 9778.0], [1236.0, 9897.0], [1232.0, 9987.0], [1260.0, 9195.0], [1336.0, 8333.0], [1312.0, 9259.0], [1316.0, 8850.0], [1320.0, 9236.0], [1340.0, 9108.0], [1332.0, 9098.0], [1328.0, 8742.0], [1280.0, 9356.0], [1284.0, 8990.0], [1288.0, 9364.0], [1292.0, 9367.5], [1308.0, 8548.0], [1304.0, 8931.0], [1300.0, 9010.0], [1324.0, 9120.5], [1396.0, 8550.0], [1404.0, 8652.0], [1376.0, 8479.0], [1380.0, 8005.0], [1384.0, 7905.0], [1400.0, 8659.0], [1392.0, 8774.0], [1356.0, 8823.0], [1352.0, 9041.0], [1348.0, 8299.0], [1344.0, 8349.0], [1372.0, 8131.0], [1364.0, 8119.0], [1360.0, 8218.0], [1388.0, 8537.0], [1464.0, 7917.0], [1444.0, 7765.0], [1448.0, 7705.0], [1468.0, 7413.0], [1460.0, 7089.0], [1456.0, 7239.0], [1408.0, 8615.0], [1420.0, 7707.0], [1436.0, 8313.0], [1432.0, 8042.5], [1428.0, 8346.0], [1424.0, 8398.0], [1452.0, 7365.0], [1520.0, 6496.0], [1508.0, 6856.0], [1504.0, 7312.0], [1512.0, 7009.0], [1516.0, 6782.0], [1484.0, 7372.0], [1480.0, 7345.0], [1476.0, 7328.0], [1472.0, 7430.0], [1500.0, 6652.0], [1496.0, 7129.0], [1492.0, 7530.0], [1584.0, 6570.0], [1596.0, 6957.0], [1572.0, 6992.0], [1580.0, 6761.0], [1588.0, 6712.666666666667], [1548.0, 6805.0], [1544.0, 6448.5], [1536.0, 6538.0], [1564.0, 6573.0], [1556.0, 6705.0], [1552.0, 6470.0], [1656.0, 6423.0], [1660.0, 6288.0], [1640.0, 6901.0], [1632.0, 6352.5], [1636.0, 6478.0], [1644.0, 6500.0], [1652.0, 5942.0], [1648.0, 6796.0], [1600.0, 7004.0], [1604.0, 6871.5], [1608.0, 6479.5], [1612.0, 6988.0], [1628.0, 6134.0], [1624.0, 6772.0], [1620.0, 6995.0], [1616.0, 6966.0], [1720.0, 5976.0], [1724.0, 6327.0], [1696.0, 5642.0], [1704.0, 6550.0], [1708.0, 5738.0], [1716.0, 6380.0], [1712.0, 5989.5], [1676.0, 6590.0], [1672.0, 6655.0], [1668.0, 6673.0], [1664.0, 6254.0], [1692.0, 5930.0], [1688.0, 5700.0], [1788.0, 5149.0], [1760.0, 5293.0], [1764.0, 5439.0], [1768.0, 5769.0], [1772.0, 5606.0], [1784.0, 6030.0], [1780.0, 5816.333333333333], [1728.0, 5896.0], [1732.0, 6272.0], [1736.0, 5853.5], [1740.0, 6259.0], [1756.0, 5659.5], [1748.0, 6239.0], [1744.0, 5826.0], [1848.0, 5193.5], [1824.0, 5337.0], [1828.0, 5758.0], [1852.0, 5698.0], [1844.0, 4870.0], [1840.0, 4868.0], [1792.0, 5353.0], [1800.0, 5717.0], [1820.0, 5862.0], [1816.0, 5914.0], [1812.0, 5920.0], [1916.0, 4682.0], [1888.0, 5120.857142857143], [1892.0, 4806.0], [1896.0, 5240.5], [1900.0, 5509.0], [1912.0, 5457.0], [1908.0, 4443.0], [1904.0, 5243.0], [1856.0, 5301.5], [1860.0, 5175.0], [1868.0, 4712.0], [1880.0, 5548.0], [1876.0, 4917.0], [1872.0, 5113.0], [1976.0, 5252.0], [1952.0, 5101.0], [1956.0, 4547.0], [1980.0, 5294.0], [1972.0, 4639.0], [1968.0, 4627.0], [1932.0, 5032.5], [1928.0, 4369.0], [1924.0, 5404.5], [1920.0, 4997.0], [1948.0, 4680.0], [1944.0, 5073.0], [1940.0, 5369.0], [1936.0, 5260.5], [2040.0, 4835.0], [2016.0, 4372.0], [2024.0, 4151.0], [2044.0, 4272.0], [2036.0, 4090.3333333333335], [2032.0, 4609.0], [1984.0, 4374.5], [1988.0, 4609.0], [1996.0, 4420.0], [2012.0, 4587.0], [2008.0, 4132.0], [2000.0, 4309.0], [2160.0, 3747.0], [2152.0, 4564.0], [2112.0, 3915.0], [2120.0, 4226.0], [2136.0, 3777.0], [2168.0, 3749.0], [2144.0, 3884.0], [2072.0, 4231.0], [2104.0, 3926.0], [2096.0, 4030.0], [2088.0, 4097.0], [2080.0, 4083.0], [2280.0, 3316.0], [2248.0, 3599.571428571429], [2296.0, 3115.0], [2288.0, 3285.0], [2272.0, 3507.0], [2176.0, 3941.0], [2184.0, 3709.0], [2192.0, 3799.5], [2232.0, 3625.0], [2224.0, 3529.0], [2216.0, 4308.0], [2208.0, 3635.0], [2416.0, 2901.0], [2368.0, 3302.0], [2376.0, 3198.0], [2384.0, 3289.0], [2392.0, 3804.0], [2424.0, 2942.0], [2408.0, 3046.0], [2304.0, 3246.0], [2312.0, 3227.0], [2328.0, 3185.0], [2360.0, 3269.3333333333335], [2352.0, 3187.5], [2344.0, 3614.0], [2336.0, 3253.5], [2440.0, 2720.0], [2448.0, 2486.0], [2432.0, 2918.0], [2488.0, 2548.0], [2480.0, 2459.0], [2472.0, 2792.0], [2464.0, 3374.0], [2145.0, 3754.0], [2161.0, 3985.0], [2113.0, 3872.0], [2121.0, 4067.0], [2137.0, 4534.0], [2153.0, 3720.0], [2073.0, 3987.0], [2065.0, 4166.5], [2057.0, 4402.0], [2105.0, 4122.0], [2097.0, 3914.0], [2089.0, 4308.0], [2081.0, 3962.0], [2281.0, 3308.0], [2273.0, 3485.0], [2241.0, 3442.0], [2257.0, 3206.5], [2265.0, 3508.5], [2289.0, 4064.0], [2177.0, 3797.0], [2193.0, 3645.0], [2201.0, 4045.0], [2225.0, 3543.0], [2217.0, 3846.0], [2209.0, 3584.0], [2417.0, 3099.0], [2377.0, 2976.0], [2369.0, 3770.0], [2393.0, 3096.0], [2409.0, 2902.0], [2401.0, 2856.6666666666665], [2321.0, 3385.0], [2329.0, 3303.0], [2353.0, 3218.0], [2345.0, 3151.0], [2489.0, 2427.0], [2457.0, 2888.0], [2433.0, 2965.0], [2473.0, 2813.0], [1037.0, 10063.0], [1081.0, 10310.0], [1085.0, 10459.0], [1057.0, 10232.0], [1033.0, 10470.0], [1029.0, 10420.0], [1049.0, 10334.0], [1045.0, 10085.0], [1069.0, 10252.333333333334], [1065.0, 9969.0], [1137.0, 9730.0], [1141.0, 9661.0], [1129.0, 10062.0], [1145.0, 10230.0], [1121.0, 9765.0], [1089.0, 9887.0], [1093.0, 10706.5], [1097.0, 10130.0], [1117.0, 10161.0], [1113.0, 10068.0], [1109.0, 9807.0], [1105.0, 10021.5], [1133.0, 10471.0], [1125.0, 9786.0], [1201.0, 10219.0], [1209.0, 9994.0], [1185.0, 9925.0], [1193.0, 9890.0], [1213.0, 9298.0], [1205.0, 9367.0], [1153.0, 10065.0], [1161.0, 10444.0], [1157.0, 10112.0], [1181.0, 9980.0], [1177.0, 9888.0], [1173.0, 10547.0], [1169.0, 10498.0], [1197.0, 9878.0], [1273.0, 9213.0], [1249.0, 9681.0], [1253.0, 9304.0], [1257.0, 9230.0], [1277.0, 8966.0], [1269.0, 9327.0], [1265.0, 9553.0], [1225.0, 9181.0], [1229.0, 9973.0], [1245.0, 9013.0], [1241.0, 9003.0], [1261.0, 9250.0], [1285.0, 8589.0], [1337.0, 9145.0], [1313.0, 8880.0], [1281.0, 8599.0], [1289.0, 9416.0], [1293.0, 9392.0], [1309.0, 8506.0], [1301.0, 9318.0], [1297.0, 9308.5], [1325.0, 9225.0], [1321.0, 8835.0], [1317.0, 9335.0], [1393.0, 8722.0], [1401.0, 7867.0], [1377.0, 8625.0], [1405.0, 8159.0], [1397.0, 8447.0], [1345.0, 9225.0], [1349.0, 8218.0], [1357.0, 8628.0], [1373.0, 8515.0], [1369.0, 8716.0], [1361.0, 8201.0], [1389.0, 8278.0], [1465.0, 7975.0], [1469.0, 7485.0], [1441.0, 8362.5], [1445.0, 7813.0], [1449.0, 7768.0], [1457.0, 7594.0], [1421.0, 7682.0], [1417.0, 8254.666666666666], [1413.0, 8134.5], [1409.0, 8605.0], [1433.0, 8424.0], [1429.0, 8495.0], [1425.0, 8423.0], [1453.0, 7884.0], [1485.0, 7609.0], [1521.0, 6494.0], [1505.0, 6827.0], [1529.0, 6525.0], [1509.0, 6781.0], [1517.0, 6773.0], [1481.0, 7476.0], [1477.0, 7576.0], [1473.0, 6935.0], [1501.0, 7201.0], [1497.0, 7055.0], [1493.0, 7476.0], [1489.0, 7469.0], [1597.0, 6376.0], [1569.0, 6803.5], [1573.0, 6854.333333333333], [1577.0, 6929.5], [1581.0, 6739.0], [1589.0, 6982.0], [1541.0, 6461.0], [1565.0, 7282.0], [1561.0, 6494.0], [1557.0, 6947.0], [1661.0, 5921.0], [1633.0, 6859.0], [1641.0, 6853.0], [1645.0, 5995.0], [1657.0, 6789.0], [1601.0, 6289.0], [1605.0, 7096.0], [1609.0, 6651.0], [1613.0, 6225.0], [1629.0, 6960.0], [1625.0, 6889.0], [1621.0, 6107.0], [1725.0, 5748.0], [1701.0, 6310.0], [1705.0, 6190.0], [1709.0, 5583.0], [1721.0, 6020.0], [1717.0, 5965.0], [1713.0, 6260.0], [1677.0, 6135.0], [1673.0, 6611.0], [1669.0, 6704.0], [1665.0, 6274.0], [1693.0, 5808.0], [1689.0, 5752.0], [1781.0, 6037.0], [1785.0, 5156.0], [1761.0, 6100.0], [1765.0, 6261.0], [1769.0, 6194.0], [1773.0, 5554.0], [1733.0, 5566.0], [1757.0, 5359.0], [1753.0, 5634.0], [1749.0, 6064.0], [1745.0, 6206.0], [1849.0, 5211.0], [1845.0, 4841.0], [1825.0, 5004.0], [1829.0, 5861.0], [1833.0, 5474.333333333333], [1853.0, 5241.0], [1841.0, 5816.0], [1793.0, 5191.0], [1797.0, 5187.5], [1801.0, 5413.0], [1821.0, 5109.0], [1817.0, 5372.0], [1813.0, 5020.0], [1909.0, 4589.0], [1901.0, 4749.0], [1905.0, 4729.0], [1881.0, 5569.0], [1861.0, 4942.0], [1865.0, 5223.0], [1869.0, 5591.0], [1877.0, 4677.0], [1873.0, 5036.0], [1977.0, 4616.0], [1953.0, 5310.0], [1957.0, 4476.0], [1981.0, 4480.0], [1973.0, 4427.0], [1969.0, 5345.0], [1933.0, 4734.0], [1929.0, 5334.0], [1925.0, 4872.0], [1921.0, 5049.0], [1949.0, 5333.0], [1945.0, 4695.0], [1941.0, 5345.0], [1937.0, 4591.0], [2045.0, 3813.0], [2021.0, 4358.5], [2017.0, 4360.0], [2025.0, 3894.0], [2029.0, 4123.0], [2041.0, 4306.0], [2037.0, 3837.0], [2033.0, 4085.5], [1985.0, 4741.0], [1993.0, 4678.5], [1997.0, 4763.0], [2009.0, 4987.0], [2005.0, 4253.0], [2001.0, 5118.0], [2170.0, 4214.0], [2114.0, 4203.0], [2122.0, 3998.0], [2138.0, 4629.0], [2154.0, 4076.0], [2146.0, 4139.0], [2074.0, 4092.0], [2066.0, 3799.0], [2050.0, 4284.0], [2106.0, 4119.0], [2098.0, 4259.0], [2090.0, 4021.5], [2082.0, 3957.0], [2290.0, 3129.0], [2282.0, 3308.0], [2250.0, 3351.0], [2258.0, 4039.0], [2266.0, 3592.0], [2298.0, 3417.0], [2274.0, 3631.0], [2178.0, 3794.0], [2186.0, 3599.6666666666665], [2194.0, 3643.0], [2202.0, 4349.0], [2226.0, 3550.0], [2218.0, 3578.0], [2210.0, 3578.0], [2418.0, 3604.0], [2410.0, 3155.0], [2370.0, 3268.0], [2378.0, 3014.0], [2394.0, 2968.0], [2426.0, 2950.0], [2306.0, 3257.0], [2314.0, 3221.0], [2322.0, 3189.0], [2330.0, 3299.0], [2362.0, 3231.0], [2354.0, 3350.0], [2346.0, 3440.0], [2338.0, 3367.5], [2450.0, 2882.6666666666665], [2458.0, 3017.0], [2442.0, 2711.0], [2434.0, 2931.0], [2490.0, 2507.0], [2482.0, 3105.5], [2466.0, 2862.5], [2155.0, 3843.0], [2171.0, 3707.0], [2115.0, 3907.0], [2123.0, 4494.0], [2139.0, 3889.0], [2147.0, 3785.0], [2075.0, 4714.0], [2059.0, 4210.0], [2099.0, 4293.0], [2083.0, 4195.0], [2283.0, 3456.0], [2291.0, 3277.0], [2299.0, 3483.0], [2251.0, 3766.0], [2259.0, 4052.0], [2267.0, 3184.0], [2275.0, 3329.0], [2187.0, 3702.0], [2195.0, 3743.0], [2219.0, 3852.0], [2211.0, 3639.0], [2419.0, 3128.0], [2427.0, 3054.0], [2371.0, 3194.0], [2379.0, 2982.0], [2387.0, 3208.0], [2395.0, 2693.0], [2403.0, 3547.5], [2307.0, 3293.0], [2315.0, 3216.0], [2331.0, 3162.0], [2363.0, 3352.0], [2443.0, 2914.0], [2451.0, 2982.0], [2435.0, 3197.0], [2491.0, 2580.0], [2475.0, 2546.0], [2467.0, 2712.0], [543.0, 11460.0], [527.0, 11575.0], [523.0, 11200.25], [521.0, 11383.5], [569.0, 11212.25], [575.0, 11295.444444444443], [559.0, 11244.0], [567.0, 11325.0], [565.0, 11462.0], [563.0, 11187.0], [561.0, 11181.0], [583.0, 11365.0], [607.0, 11226.0], [581.0, 11246.5], [579.0, 11033.0], [591.0, 11820.0], [585.0, 11206.0], [599.0, 11107.0], [595.0, 11484.75], [637.0, 11677.0], [627.0, 11033.0], [635.0, 11084.5], [623.0, 10990.0], [613.0, 11001.0], [617.0, 10846.0], [631.0, 11206.0], [629.0, 11138.0], [665.0, 11055.0], [667.0, 10926.0], [643.0, 11805.0], [641.0, 11341.333333333334], [663.0, 11189.0], [661.0, 11222.0], [659.0, 11253.0], [655.0, 10901.5], [651.0, 11146.0], [699.0, 11645.0], [701.0, 11122.0], [689.0, 11102.0], [685.0, 11128.0], [683.0, 10926.0], [681.0, 11133.8], [729.0, 11650.0], [731.0, 11103.0], [709.0, 11002.0], [705.0, 11151.5], [727.0, 11102.5], [725.0, 10926.0], [723.0, 11006.0], [719.0, 11698.0], [717.0, 11382.142857142857], [761.0, 10936.0], [765.0, 11209.0], [739.0, 10985.0], [737.0, 11378.0], [747.0, 11116.0], [745.0, 11684.0], [759.0, 11638.0], [775.0, 11100.0], [797.0, 11005.0], [787.0, 10631.333333333334], [795.0, 10906.0], [771.0, 10559.0], [783.0, 10917.0], [781.0, 10829.0], [777.0, 11046.0], [791.0, 11627.0], [789.0, 10916.0], [805.0, 10728.0], [829.0, 11036.5], [827.0, 10986.0], [825.0, 10817.666666666666], [803.0, 11218.0], [801.0, 10775.0], [815.0, 10897.666666666666], [809.0, 10937.333333333334], [819.0, 11259.5], [817.0, 11006.5], [837.0, 10861.0], [861.0, 10587.5], [863.0, 10984.0], [859.0, 11375.0], [835.0, 10820.0], [833.0, 10716.666666666666], [845.0, 10772.0], [843.0, 10740.0], [841.0, 11000.666666666666], [855.0, 10387.0], [853.0, 11421.0], [867.0, 11367.0], [893.0, 11398.0], [879.0, 10881.5], [871.0, 10559.0], [869.0, 10806.0], [877.0, 10867.0], [875.0, 10693.666666666666], [883.0, 10577.0], [881.0, 10455.0], [923.0, 11271.0], [925.0, 10738.0], [913.0, 10641.0], [915.0, 10851.0], [921.0, 10839.0], [901.0, 10656.0], [897.0, 11308.0], [911.0, 11271.0], [909.0, 10828.0], [905.0, 10655.333333333334], [917.0, 11044.0], [953.0, 10173.0], [957.0, 10394.0], [959.0, 11176.0], [955.0, 10426.0], [935.0, 10482.0], [933.0, 10449.0], [931.0, 10471.0], [929.0, 10861.0], [943.0, 10569.0], [941.0, 10839.0], [939.0, 10434.0], [951.0, 10534.0], [949.0, 10629.0], [985.0, 10811.0], [991.0, 10623.0], [977.0, 10677.5], [989.0, 10474.0], [975.0, 10387.0], [961.0, 10517.0], [963.0, 10508.0], [971.0, 11135.0], [969.0, 10525.0], [983.0, 11078.0], [979.0, 11204.0], [1017.0, 10529.0], [1023.0, 10901.5], [1009.0, 10986.0], [1011.0, 10543.0], [1019.0, 10800.0], [999.0, 10209.0], [997.0, 10761.0], [995.0, 10041.0], [1007.0, 10090.0], [1005.0, 10346.0], [1003.0, 10587.0], [1001.0, 10946.0], [1013.0, 10934.0], [1034.0, 10821.0], [1038.0, 10834.0], [1030.0, 10856.0], [1026.0, 10618.0], [1070.0, 10157.5], [1054.0, 10157.0], [1042.0, 10456.5], [1146.0, 9688.0], [1150.0, 9679.5], [1122.0, 10158.0], [1126.0, 9950.0], [1142.0, 9655.0], [1094.0, 10770.0], [1090.0, 9982.0], [1118.0, 10677.0], [1114.0, 10713.0], [1106.0, 9940.0], [1134.0, 10139.0], [1130.0, 9730.0], [1210.0, 9981.0], [1214.0, 9765.0], [1186.0, 10309.0], [1190.0, 9671.0], [1194.0, 9889.0], [1206.0, 9388.0], [1162.0, 9798.0], [1182.0, 9606.0], [1178.0, 10402.0], [1170.0, 10014.0], [1198.0, 9435.0], [1274.0, 8581.0], [1278.0, 8575.0], [1250.0, 8856.0], [1254.0, 9617.0], [1258.0, 9646.0], [1270.0, 9308.0], [1266.0, 9315.0], [1246.0, 9407.0], [1218.0, 9919.333333333334], [1226.0, 9293.0], [1230.0, 9981.0], [1238.0, 9589.0], [1234.0, 9298.5], [1262.0, 9633.0], [1338.0, 9082.0], [1342.0, 8910.0], [1314.0, 8854.0], [1318.0, 8411.0], [1322.0, 9226.0], [1334.0, 8712.5], [1330.0, 8838.5], [1310.0, 9269.0], [1282.0, 8597.0], [1290.0, 8919.0], [1294.0, 9115.0], [1306.0, 8955.0], [1302.0, 8541.0], [1298.0, 9387.0], [1326.0, 9166.0], [1402.0, 8660.0], [1406.0, 8581.0], [1378.0, 8039.0], [1382.0, 8756.0], [1386.0, 8774.5], [1398.0, 8209.0], [1354.0, 9077.0], [1350.0, 8659.0], [1346.0, 8288.0], [1374.0, 8438.0], [1370.0, 9010.0], [1366.0, 8770.5], [1362.0, 8756.0], [1390.0, 8338.0], [1466.0, 7041.0], [1470.0, 7498.0], [1442.0, 7493.0], [1446.0, 8259.0], [1450.0, 7311.0], [1462.0, 7168.5], [1458.0, 7589.0], [1438.0, 7507.0], [1414.0, 7656.0], [1410.0, 8179.0], [1418.0, 7719.0], [1434.0, 7542.0], [1430.0, 8436.0], [1426.0, 8210.0], [1454.0, 7884.0], [1486.0, 7643.0], [1522.0, 6857.0], [1510.0, 6773.0], [1534.0, 6576.125], [1506.0, 7057.0], [1514.0, 6682.0], [1482.0, 7625.0], [1478.0, 7777.0], [1474.0, 7828.0], [1502.0, 7285.0], [1498.0, 7010.0], [1494.0, 6619.0], [1490.0, 6809.0], [1518.0, 6892.0], [1586.0, 6681.0], [1582.0, 6948.0], [1598.0, 6769.0], [1594.0, 7195.333333333333], [1550.0, 6366.0], [1546.0, 6510.5], [1542.0, 6546.5], [1538.0, 6405.5], [1562.0, 6461.5], [1558.0, 6331.0], [1554.0, 6811.25], [1658.0, 6368.0], [1662.0, 6002.0], [1634.0, 6875.0], [1638.0, 6386.0], [1642.0, 6860.0], [1646.0, 6666.0], [1654.0, 6769.666666666667], [1650.0, 6586.5], [1630.0, 6453.0], [1602.0, 7102.0], [1606.0, 6267.0], [1610.0, 7022.0], [1614.0, 6541.0], [1626.0, 6536.0], [1622.0, 6966.0], [1618.0, 6373.5], [1726.0, 6436.0], [1698.0, 6045.5], [1702.0, 5606.0], [1706.0, 6318.0], [1710.0, 6455.0], [1722.0, 5646.0], [1714.0, 5643.0], [1678.0, 6475.0], [1674.0, 6686.0], [1670.0, 6234.0], [1666.0, 6234.0], [1694.0, 6029.0], [1686.0, 6151.0], [1786.0, 5236.0], [1790.0, 5709.0], [1762.0, 5725.0], [1766.0, 5417.0], [1770.0, 5504.0], [1774.0, 5324.0], [1782.0, 5172.0], [1778.0, 5650.333333333333], [1730.0, 6089.0], [1734.0, 5431.0], [1738.0, 5531.0], [1742.0, 5904.0], [1754.0, 5354.0], [1750.0, 5367.0], [1850.0, 5628.0], [1842.0, 5250.0], [1854.0, 5587.0], [1826.0, 5862.0], [1830.0, 5409.0], [1834.0, 4961.0], [1838.0, 5114.666666666667], [1846.0, 5333.0], [1794.0, 6085.0], [1798.0, 5975.0], [1802.0, 5245.0], [1806.0, 5512.333333333333], [1818.0, 5471.0], [1814.0, 5524.0], [1810.0, 5438.5], [1914.0, 4782.0], [1890.0, 5009.0], [1898.0, 5174.5], [1902.0, 5248.0], [1918.0, 4623.5], [1910.0, 5413.0], [1906.0, 5100.0], [1858.0, 5065.5], [1862.0, 5635.0], [1866.0, 4630.0], [1870.0, 5368.0], [1878.0, 4898.0], [1874.0, 5595.0], [1978.0, 4467.0], [1982.0, 4648.0], [1954.0, 4677.0], [1958.0, 5309.0], [1962.0, 5303.0], [1966.0, 5331.0], [1974.0, 4484.0], [1970.0, 5241.0], [1934.0, 4624.0], [1930.0, 5374.0], [1926.0, 4734.0], [1922.0, 4758.0], [1946.0, 4624.0], [1942.0, 5370.0], [1938.0, 4864.0], [2042.0, 3818.0], [2038.0, 3833.0], [2046.0, 4300.0], [2018.0, 4285.0], [2022.0, 4908.0], [2026.0, 4097.0], [2030.0, 3876.0], [2014.0, 4502.5], [1986.0, 5179.0], [1990.0, 4323.0], [1994.0, 4530.0], [1998.0, 4635.0], [2010.0, 4478.0], [2002.0, 4393.0], [2164.0, 3792.3333333333335], [2148.0, 3916.0], [2172.0, 3853.0], [2068.0, 4451.5], [2060.0, 4159.0], [2052.0, 4290.0], [2084.0, 4213.0], [2292.0, 3431.0], [2284.0, 3358.0], [2252.0, 3708.0], [2260.0, 3694.0], [2268.0, 3348.0], [2300.0, 3418.0], [2276.0, 3478.0], [2180.0, 3819.0], [2188.0, 3935.0], [2204.0, 3762.0], [2228.0, 3723.0], [2220.0, 3613.0], [2212.0, 3827.0], [2412.0, 3162.5], [2372.0, 3140.0], [2396.0, 3122.0], [2428.0, 3149.0], [2404.0, 2900.0], [2308.0, 3800.0], [2316.0, 3515.0], [2324.0, 3188.0], [2332.0, 3788.0], [2364.0, 3198.0], [2356.0, 3068.0], [2348.0, 3685.0], [2340.0, 2941.5], [2436.0, 3527.0], [2484.0, 2470.0], [2500.0, 2441.2222222222217], [2460.0, 2942.0], [2452.0, 3553.0], [2468.0, 2795.0], [2157.0, 3781.0], [2165.0, 3816.0], [2117.0, 3981.0], [2173.0, 3709.0], [2069.0, 4415.0], [2053.0, 3978.0], [2109.0, 4094.0], [2093.0, 3889.3333333333335], [2285.0, 3304.0], [2253.0, 3458.0], [2269.0, 3412.0], [2293.0, 3272.0], [2181.0, 3672.0], [2189.0, 4411.0], [2197.0, 3773.0], [2205.0, 4016.0], [2229.0, 3564.0], [2221.0, 3697.0], [2213.0, 3716.0], [2405.0, 3165.0], [2389.0, 3113.0], [2429.0, 3093.0], [2421.0, 3076.5], [2309.0, 3235.0], [2317.0, 3508.0], [2325.0, 3187.0], [2357.0, 3155.0], [2349.0, 3138.0], [2341.0, 3147.0], [2437.0, 2591.0], [2461.0, 2894.0], [2453.0, 2964.0], [2477.0, 2467.0], [2469.0, 2844.0], [1083.0, 10739.0], [1063.0, 9976.0], [1087.0, 10680.0], [1059.0, 10212.0], [1075.0, 10312.0], [1039.0, 10845.0], [1031.0, 10901.0], [1027.0, 10103.0], [1055.0, 9970.0], [1051.0, 10025.5], [1047.0, 10509.0], [1043.0, 10213.0], [1071.0, 10853.0], [1091.0, 10672.0], [1123.0, 9754.0], [1139.0, 10533.5], [1119.0, 9872.0], [1095.0, 10028.0], [1103.0, 10604.666666666666], [1115.0, 9880.0], [1111.0, 10243.0], [1107.0, 10254.0], [1135.0, 10488.0], [1131.0, 9633.0], [1127.0, 9643.0], [1211.0, 9380.0], [1215.0, 9422.0], [1187.0, 9480.0], [1191.0, 10297.0], [1207.0, 10173.0], [1203.0, 9549.5], [1183.0, 9600.0], [1155.0, 10226.0], [1167.0, 10084.0], [1163.0, 10386.0], [1175.0, 9941.0], [1171.0, 9539.0], [1199.0, 9423.0], [1275.0, 9277.0], [1279.0, 9002.0], [1251.0, 9653.0], [1259.0, 9253.0], [1271.0, 8703.0], [1267.0, 9538.0], [1247.0, 9362.0], [1223.0, 9647.666666666666], [1219.0, 10080.0], [1227.0, 9138.0], [1231.0, 9976.0], [1243.0, 9417.5], [1239.0, 9950.0], [1235.0, 9529.0], [1263.0, 9367.0], [1331.0, 8351.0], [1319.0, 8447.0], [1339.0, 8315.0], [1335.0, 8743.0], [1311.0, 8428.0], [1283.0, 8599.0], [1287.0, 9306.5], [1295.0, 8967.0], [1307.0, 9307.0], [1303.0, 8535.0], [1327.0, 8369.0], [1315.0, 9240.0], [1403.0, 8182.0], [1407.0, 8158.0], [1379.0, 8795.0], [1387.0, 7990.0], [1383.0, 8363.0], [1399.0, 8451.0], [1395.0, 8338.0], [1375.0, 8829.0], [1347.0, 9044.0], [1355.0, 9063.0], [1351.0, 9072.0], [1359.0, 8506.5], [1371.0, 8926.0], [1367.0, 8528.0], [1363.0, 8582.0], [1391.0, 7869.0], [1463.0, 7836.0], [1459.0, 7191.0], [1471.0, 7849.0], [1443.0, 7405.0], [1447.0, 7971.0], [1451.0, 8149.0], [1467.0, 7093.0], [1423.0, 8348.0], [1419.0, 8275.0], [1411.0, 8299.0], [1439.0, 7828.0], [1435.0, 7598.0], [1427.0, 7995.0], [1455.0, 7630.0], [1523.0, 6483.0], [1507.0, 6420.0], [1511.0, 6779.0], [1527.0, 6762.0], [1487.0, 6813.0], [1483.0, 7296.0], [1479.0, 6954.0], [1475.0, 7778.0], [1503.0, 6986.0], [1499.0, 6715.0], [1495.0, 6787.0], [1491.0, 6766.0], [1519.0, 7003.0], [1591.0, 6956.0], [1599.0, 6371.0], [1575.0, 7076.0], [1579.0, 6409.0], [1595.0, 6384.0], [1539.0, 6607.0], [1567.0, 6986.0], [1563.0, 6572.0], [1559.0, 6496.0], [1555.0, 7199.0], [1655.0, 6721.0], [1659.0, 6377.0], [1635.0, 6134.0], [1639.0, 6908.0], [1643.0, 6014.0], [1647.0, 6341.0], [1611.0, 6627.0], [1615.0, 6647.0], [1627.0, 6702.0], [1623.0, 6946.0], [1619.0, 6109.0], [1723.0, 5549.0], [1715.0, 5603.0], [1727.0, 6302.0], [1699.0, 6013.0], [1703.0, 6239.0], [1707.0, 6012.0], [1719.0, 5550.0], [1679.0, 5994.5], [1671.0, 5851.0], [1667.0, 6677.0], [1695.0, 6328.0], [1691.0, 6311.5], [1687.0, 6088.0], [1783.0, 5605.0], [1787.0, 5531.0], [1767.0, 5276.0], [1791.0, 5969.0], [1763.0, 5670.0], [1771.0, 5669.0], [1759.0, 5301.0], [1731.0, 5668.0], [1739.0, 5412.0], [1743.0, 5775.0], [1751.0, 5357.0], [1747.0, 5572.0], [1843.0, 4712.0], [1851.0, 5662.0], [1827.0, 5039.0], [1835.0, 5741.0], [1839.0, 4936.0], [1823.0, 5779.0], [1795.0, 5256.0], [1799.0, 5546.0], [1803.0, 5330.0], [1819.0, 5577.0], [1815.0, 5105.0], [1811.0, 5304.0], [1915.0, 5390.0], [1907.0, 4710.0], [1919.0, 4896.0], [1891.0, 4807.0], [1895.0, 5000.5], [1899.0, 5526.0], [1903.0, 4621.0], [1911.0, 4695.0], [1859.0, 5258.0], [1863.0, 4850.0], [1867.0, 5560.0], [1879.0, 4614.0], [1875.0, 5062.0], [1971.0, 5258.0], [1979.0, 4489.0], [1955.0, 4577.0], [1959.0, 5282.0], [1967.0, 4816.5], [1975.0, 4611.0], [1927.0, 4869.0], [1951.0, 5041.0], [1947.0, 5391.0], [1943.0, 4685.0], [1939.0, 4925.0], [1999.0, 4376.0], [2039.0, 4447.0], [2019.0, 4233.0], [2023.0, 4579.0], [1991.0, 4426.0], [2011.0, 4201.0], [2007.0, 4540.0], [2003.0, 4484.0], [2158.0, 3762.0], [2174.0, 3807.0], [2118.0, 4197.0], [2142.0, 4007.3333333333335], [2166.0, 4434.0], [2150.0, 3739.0], [2070.0, 4113.0], [2062.0, 4429.5], [2110.0, 4177.5], [2102.0, 3846.6666666666665], [2094.0, 3921.0], [2294.0, 3100.0], [2246.0, 3617.5], [2254.0, 3694.0], [2262.0, 3907.0], [2302.0, 3207.5], [2278.0, 3631.0], [2182.0, 3715.0], [2190.0, 3764.0], [2198.0, 3788.0], [2206.0, 3953.0], [2238.0, 3608.75], [2230.0, 3514.0], [2222.0, 3603.0], [2406.0, 2695.0], [2422.0, 3183.0], [2374.0, 3086.5], [2382.0, 3762.0], [2390.0, 3148.0], [2398.0, 3094.5], [2310.0, 3229.0], [2318.0, 3573.0], [2326.0, 3282.5], [2334.0, 3633.5], [2366.0, 3202.5], [2358.0, 3078.0], [2350.0, 3416.0], [2342.0, 3195.0], [2454.0, 3426.0], [2462.0, 2649.0], [2446.0, 2845.3333333333335], [2438.0, 3017.0], [2486.0, 2653.5], [2478.0, 2739.5], [2470.0, 2838.0], [2151.0, 3933.0], [2159.0, 3746.0], [2119.0, 4690.0], [2135.0, 3835.8181818181815], [2127.0, 4013.0], [2143.0, 3883.0], [2079.0, 4270.5], [2063.0, 4357.0], [2055.0, 4293.0], [2111.0, 3929.0], [2103.0, 3664.0], [2095.0, 3697.0], [2287.0, 3454.0], [2279.0, 3473.0], [2303.0, 4038.0], [2255.0, 3494.0], [2263.0, 3633.0], [2271.0, 3900.5], [2295.0, 3536.0], [2239.0, 3626.0], [2199.0, 3864.0], [2207.0, 3882.0], [2231.0, 3747.0], [2223.0, 3579.0], [2215.0, 3655.5], [2415.0, 3007.6666666666665], [2423.0, 3168.0], [2431.0, 2966.5], [2375.0, 3204.0], [2383.0, 3135.5], [2391.0, 3805.0], [2407.0, 3124.0], [2367.0, 3132.0], [2311.0, 3080.0], [2319.0, 3283.0], [2327.0, 3453.0], [2463.0, 2590.0], [2455.0, 2855.0], [2439.0, 2927.0], [2487.0, 2952.5], [2479.0, 2555.0], [2471.0, 2589.0], [1.0, 12133.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}, {"data": [[1251.5820000000015, 8243.052400000006]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18833.333333333332, "minX": 1.75558848E12, "maxY": 241416.66666666666, "series": [{"data": [[1.75558848E12, 241416.66666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75558848E12, 18833.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558848E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8243.052400000006, "minX": 1.75558848E12, "maxY": 8243.052400000006, "series": [{"data": [[1.75558848E12, 8243.052400000006]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558848E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8243.001600000012, "minX": 1.75558848E12, "maxY": 8243.001600000012, "series": [{"data": [[1.75558848E12, 8243.001600000012]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558848E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5943.206399999994, "minX": 1.75558848E12, "maxY": 5943.206399999994, "series": [{"data": [[1.75558848E12, 5943.206399999994]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558848E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2277.0, "minX": 1.75558848E12, "maxY": 12384.0, "series": [{"data": [[1.75558848E12, 12384.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75558848E12, 11546.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75558848E12, 12112.879999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75558848E12, 11743.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75558848E12, 2277.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75558848E12, 9371.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558848E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2484.0, "minX": 11.0, "maxY": 11682.5, "series": [{"data": [[263.0, 3918.0], [151.0, 6855.0], [156.0, 6252.0], [11.0, 2484.0], [835.0, 11263.0], [229.0, 3185.0], [119.0, 9303.0], [241.0, 5211.0], [122.0, 8426.5], [249.0, 10309.0], [124.0, 11682.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 835.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2470.0, "minX": 11.0, "maxY": 11682.5, "series": [{"data": [[263.0, 3918.0], [151.0, 6855.0], [156.0, 6252.0], [11.0, 2470.0], [835.0, 11263.0], [229.0, 3185.0], [119.0, 9303.0], [241.0, 5211.0], [122.0, 8426.5], [249.0, 10309.0], [124.0, 11682.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 835.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558848E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558848E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558848E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558848E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558848E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558848E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558848E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558848E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558848E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558848E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558848E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558848E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

