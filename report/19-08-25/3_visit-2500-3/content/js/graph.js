/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 851.0, "minX": 0.0, "maxY": 6660.0, "series": [{"data": [[0.0, 851.0], [0.1, 860.0], [0.2, 884.0], [0.3, 934.0], [0.4, 952.0], [0.5, 967.0], [0.6, 973.0], [0.7, 990.0], [0.8, 1002.0], [0.9, 1016.0], [1.0, 1028.0], [1.1, 1065.0], [1.2, 1067.0], [1.3, 1106.0], [1.4, 1127.0], [1.5, 1158.0], [1.6, 1163.0], [1.7, 1165.0], [1.8, 1177.0], [1.9, 1189.0], [2.0, 1195.0], [2.1, 1200.0], [2.2, 1205.0], [2.3, 1210.0], [2.4, 1221.0], [2.5, 1226.0], [2.6, 1231.0], [2.7, 1251.0], [2.8, 1274.0], [2.9, 1282.0], [3.0, 1292.0], [3.1, 1313.0], [3.2, 1323.0], [3.3, 1333.0], [3.4, 1345.0], [3.5, 1361.0], [3.6, 1372.0], [3.7, 1381.0], [3.8, 1384.0], [3.9, 1389.0], [4.0, 1398.0], [4.1, 1418.0], [4.2, 1420.0], [4.3, 1427.0], [4.4, 1431.0], [4.5, 1446.0], [4.6, 1448.0], [4.7, 1468.0], [4.8, 1472.0], [4.9, 1486.0], [5.0, 1493.0], [5.1, 1501.0], [5.2, 1512.0], [5.3, 1522.0], [5.4, 1526.0], [5.5, 1539.0], [5.6, 1543.0], [5.7, 1559.0], [5.8, 1562.0], [5.9, 1572.0], [6.0, 1575.0], [6.1, 1590.0], [6.2, 1601.0], [6.3, 1612.0], [6.4, 1614.0], [6.5, 1622.0], [6.6, 1625.0], [6.7, 1631.0], [6.8, 1637.0], [6.9, 1640.0], [7.0, 1647.0], [7.1, 1662.0], [7.2, 1670.0], [7.3, 1691.0], [7.4, 1697.0], [7.5, 1709.0], [7.6, 1711.0], [7.7, 1728.0], [7.8, 1733.0], [7.9, 1751.0], [8.0, 1753.0], [8.1, 1757.0], [8.2, 1769.0], [8.3, 1776.0], [8.4, 1788.0], [8.5, 1800.0], [8.6, 1809.0], [8.7, 1819.0], [8.8, 1829.0], [8.9, 1844.0], [9.0, 1858.0], [9.1, 1862.0], [9.2, 1874.0], [9.3, 1876.0], [9.4, 1889.0], [9.5, 1892.0], [9.6, 1900.0], [9.7, 1900.0], [9.8, 1908.0], [9.9, 1914.0], [10.0, 1925.0], [10.1, 1928.0], [10.2, 1934.0], [10.3, 1937.0], [10.4, 1944.0], [10.5, 1947.0], [10.6, 1953.0], [10.7, 1956.0], [10.8, 1961.0], [10.9, 1961.0], [11.0, 1970.0], [11.1, 1977.0], [11.2, 1978.0], [11.3, 1985.0], [11.4, 1990.0], [11.5, 1995.0], [11.6, 2001.0], [11.7, 2007.0], [11.8, 2018.0], [11.9, 2020.0], [12.0, 2028.0], [12.1, 2036.0], [12.2, 2040.0], [12.3, 2046.0], [12.4, 2052.0], [12.5, 2058.0], [12.6, 2063.0], [12.7, 2067.0], [12.8, 2075.0], [12.9, 2083.0], [13.0, 2094.0], [13.1, 2101.0], [13.2, 2107.0], [13.3, 2113.0], [13.4, 2128.0], [13.5, 2139.0], [13.6, 2147.0], [13.7, 2152.0], [13.8, 2163.0], [13.9, 2169.0], [14.0, 2175.0], [14.1, 2178.0], [14.2, 2183.0], [14.3, 2190.0], [14.4, 2201.0], [14.5, 2206.0], [14.6, 2224.0], [14.7, 2228.0], [14.8, 2232.0], [14.9, 2232.0], [15.0, 2240.0], [15.1, 2242.0], [15.2, 2244.0], [15.3, 2245.0], [15.4, 2251.0], [15.5, 2256.0], [15.6, 2267.0], [15.7, 2276.0], [15.8, 2304.0], [15.9, 2312.0], [16.0, 2318.0], [16.1, 2322.0], [16.2, 2324.0], [16.3, 2325.0], [16.4, 2345.0], [16.5, 2349.0], [16.6, 2359.0], [16.7, 2363.0], [16.8, 2369.0], [16.9, 2371.0], [17.0, 2388.0], [17.1, 2395.0], [17.2, 2397.0], [17.3, 2401.0], [17.4, 2407.0], [17.5, 2413.0], [17.6, 2419.0], [17.7, 2423.0], [17.8, 2435.0], [17.9, 2438.0], [18.0, 2443.0], [18.1, 2453.0], [18.2, 2466.0], [18.3, 2469.0], [18.4, 2478.0], [18.5, 2483.0], [18.6, 2485.0], [18.7, 2488.0], [18.8, 2495.0], [18.9, 2506.0], [19.0, 2514.0], [19.1, 2520.0], [19.2, 2525.0], [19.3, 2531.0], [19.4, 2534.0], [19.5, 2535.0], [19.6, 2540.0], [19.7, 2545.0], [19.8, 2548.0], [19.9, 2551.0], [20.0, 2554.0], [20.1, 2556.0], [20.2, 2560.0], [20.3, 2569.0], [20.4, 2577.0], [20.5, 2578.0], [20.6, 2581.0], [20.7, 2593.0], [20.8, 2596.0], [20.9, 2597.0], [21.0, 2601.0], [21.1, 2603.0], [21.2, 2630.0], [21.3, 2634.0], [21.4, 2642.0], [21.5, 2642.0], [21.6, 2649.0], [21.7, 2664.0], [21.8, 2669.0], [21.9, 2677.0], [22.0, 2678.0], [22.1, 2679.0], [22.2, 2683.0], [22.3, 2683.0], [22.4, 2684.0], [22.5, 2688.0], [22.6, 2695.0], [22.7, 2697.0], [22.8, 2700.0], [22.9, 2705.0], [23.0, 2708.0], [23.1, 2714.0], [23.2, 2722.0], [23.3, 2729.0], [23.4, 2736.0], [23.5, 2742.0], [23.6, 2747.0], [23.7, 2752.0], [23.8, 2754.0], [23.9, 2759.0], [24.0, 2768.0], [24.1, 2769.0], [24.2, 2770.0], [24.3, 2771.0], [24.4, 2775.0], [24.5, 2781.0], [24.6, 2787.0], [24.7, 2791.0], [24.8, 2809.0], [24.9, 2812.0], [25.0, 2817.0], [25.1, 2820.0], [25.2, 2821.0], [25.3, 2835.0], [25.4, 2838.0], [25.5, 2841.0], [25.6, 2843.0], [25.7, 2844.0], [25.8, 2849.0], [25.9, 2851.0], [26.0, 2862.0], [26.1, 2863.0], [26.2, 2869.0], [26.3, 2870.0], [26.4, 2877.0], [26.5, 2880.0], [26.6, 2882.0], [26.7, 2883.0], [26.8, 2895.0], [26.9, 2900.0], [27.0, 2912.0], [27.1, 2917.0], [27.2, 2919.0], [27.3, 2922.0], [27.4, 2931.0], [27.5, 2932.0], [27.6, 2938.0], [27.7, 2941.0], [27.8, 2948.0], [27.9, 2950.0], [28.0, 2966.0], [28.1, 2970.0], [28.2, 2974.0], [28.3, 2975.0], [28.4, 2989.0], [28.5, 3005.0], [28.6, 3009.0], [28.7, 3011.0], [28.8, 3019.0], [28.9, 3025.0], [29.0, 3037.0], [29.1, 3038.0], [29.2, 3040.0], [29.3, 3047.0], [29.4, 3054.0], [29.5, 3055.0], [29.6, 3069.0], [29.7, 3074.0], [29.8, 3077.0], [29.9, 3079.0], [30.0, 3084.0], [30.1, 3085.0], [30.2, 3097.0], [30.3, 3100.0], [30.4, 3110.0], [30.5, 3112.0], [30.6, 3121.0], [30.7, 3124.0], [30.8, 3132.0], [30.9, 3135.0], [31.0, 3140.0], [31.1, 3142.0], [31.2, 3152.0], [31.3, 3155.0], [31.4, 3156.0], [31.5, 3160.0], [31.6, 3164.0], [31.7, 3173.0], [31.8, 3180.0], [31.9, 3183.0], [32.0, 3187.0], [32.1, 3187.0], [32.2, 3194.0], [32.3, 3196.0], [32.4, 3205.0], [32.5, 3208.0], [32.6, 3210.0], [32.7, 3211.0], [32.8, 3236.0], [32.9, 3245.0], [33.0, 3248.0], [33.1, 3249.0], [33.2, 3251.0], [33.3, 3251.0], [33.4, 3254.0], [33.5, 3256.0], [33.6, 3258.0], [33.7, 3259.0], [33.8, 3261.0], [33.9, 3263.0], [34.0, 3267.0], [34.1, 3268.0], [34.2, 3271.0], [34.3, 3272.0], [34.4, 3276.0], [34.5, 3278.0], [34.6, 3283.0], [34.7, 3286.0], [34.8, 3290.0], [34.9, 3301.0], [35.0, 3306.0], [35.1, 3311.0], [35.2, 3323.0], [35.3, 3326.0], [35.4, 3332.0], [35.5, 3338.0], [35.6, 3351.0], [35.7, 3368.0], [35.8, 3370.0], [35.9, 3380.0], [36.0, 3382.0], [36.1, 3384.0], [36.2, 3393.0], [36.3, 3396.0], [36.4, 3400.0], [36.5, 3404.0], [36.6, 3408.0], [36.7, 3424.0], [36.8, 3429.0], [36.9, 3432.0], [37.0, 3447.0], [37.1, 3448.0], [37.2, 3453.0], [37.3, 3464.0], [37.4, 3479.0], [37.5, 3481.0], [37.6, 3491.0], [37.7, 3494.0], [37.8, 3497.0], [37.9, 3500.0], [38.0, 3502.0], [38.1, 3503.0], [38.2, 3520.0], [38.3, 3531.0], [38.4, 3535.0], [38.5, 3551.0], [38.6, 3554.0], [38.7, 3563.0], [38.8, 3569.0], [38.9, 3577.0], [39.0, 3589.0], [39.1, 3594.0], [39.2, 3605.0], [39.3, 3612.0], [39.4, 3617.0], [39.5, 3618.0], [39.6, 3628.0], [39.7, 3633.0], [39.8, 3660.0], [39.9, 3665.0], [40.0, 3680.0], [40.1, 3684.0], [40.2, 3689.0], [40.3, 3692.0], [40.4, 3695.0], [40.5, 3701.0], [40.6, 3708.0], [40.7, 3711.0], [40.8, 3725.0], [40.9, 3726.0], [41.0, 3730.0], [41.1, 3731.0], [41.2, 3740.0], [41.3, 3744.0], [41.4, 3749.0], [41.5, 3752.0], [41.6, 3756.0], [41.7, 3757.0], [41.8, 3762.0], [41.9, 3766.0], [42.0, 3779.0], [42.1, 3781.0], [42.2, 3788.0], [42.3, 3795.0], [42.4, 3799.0], [42.5, 3800.0], [42.6, 3801.0], [42.7, 3809.0], [42.8, 3812.0], [42.9, 3814.0], [43.0, 3827.0], [43.1, 3830.0], [43.2, 3843.0], [43.3, 3849.0], [43.4, 3856.0], [43.5, 3859.0], [43.6, 3867.0], [43.7, 3869.0], [43.8, 3870.0], [43.9, 3875.0], [44.0, 3883.0], [44.1, 3884.0], [44.2, 3890.0], [44.3, 3897.0], [44.4, 3906.0], [44.5, 3911.0], [44.6, 3923.0], [44.7, 3924.0], [44.8, 3930.0], [44.9, 3932.0], [45.0, 3938.0], [45.1, 3941.0], [45.2, 3946.0], [45.3, 3953.0], [45.4, 3958.0], [45.5, 3963.0], [45.6, 3973.0], [45.7, 3984.0], [45.8, 3987.0], [45.9, 3990.0], [46.0, 3999.0], [46.1, 4015.0], [46.2, 4029.0], [46.3, 4032.0], [46.4, 4047.0], [46.5, 4051.0], [46.6, 4060.0], [46.7, 4086.0], [46.8, 4098.0], [46.9, 4101.0], [47.0, 4113.0], [47.1, 4125.0], [47.2, 4129.0], [47.3, 4131.0], [47.4, 4133.0], [47.5, 4139.0], [47.6, 4147.0], [47.7, 4149.0], [47.8, 4155.0], [47.9, 4168.0], [48.0, 4175.0], [48.1, 4183.0], [48.2, 4199.0], [48.3, 4202.0], [48.4, 4208.0], [48.5, 4214.0], [48.6, 4217.0], [48.7, 4232.0], [48.8, 4235.0], [48.9, 4241.0], [49.0, 4262.0], [49.1, 4268.0], [49.2, 4273.0], [49.3, 4276.0], [49.4, 4284.0], [49.5, 4290.0], [49.6, 4301.0], [49.7, 4302.0], [49.8, 4307.0], [49.9, 4311.0], [50.0, 4317.0], [50.1, 4322.0], [50.2, 4330.0], [50.3, 4331.0], [50.4, 4334.0], [50.5, 4334.0], [50.6, 4335.0], [50.7, 4338.0], [50.8, 4346.0], [50.9, 4349.0], [51.0, 4352.0], [51.1, 4356.0], [51.2, 4364.0], [51.3, 4365.0], [51.4, 4378.0], [51.5, 4379.0], [51.6, 4385.0], [51.7, 4389.0], [51.8, 4391.0], [51.9, 4395.0], [52.0, 4397.0], [52.1, 4401.0], [52.2, 4411.0], [52.3, 4414.0], [52.4, 4419.0], [52.5, 4424.0], [52.6, 4427.0], [52.7, 4430.0], [52.8, 4433.0], [52.9, 4438.0], [53.0, 4442.0], [53.1, 4444.0], [53.2, 4447.0], [53.3, 4460.0], [53.4, 4462.0], [53.5, 4464.0], [53.6, 4468.0], [53.7, 4470.0], [53.8, 4473.0], [53.9, 4474.0], [54.0, 4476.0], [54.1, 4477.0], [54.2, 4480.0], [54.3, 4497.0], [54.4, 4499.0], [54.5, 4505.0], [54.6, 4510.0], [54.7, 4512.0], [54.8, 4516.0], [54.9, 4517.0], [55.0, 4518.0], [55.1, 4519.0], [55.2, 4521.0], [55.3, 4523.0], [55.4, 4528.0], [55.5, 4531.0], [55.6, 4535.0], [55.7, 4536.0], [55.8, 4536.0], [55.9, 4538.0], [56.0, 4543.0], [56.1, 4553.0], [56.2, 4557.0], [56.3, 4557.0], [56.4, 4561.0], [56.5, 4562.0], [56.6, 4564.0], [56.7, 4566.0], [56.8, 4574.0], [56.9, 4576.0], [57.0, 4579.0], [57.1, 4582.0], [57.2, 4589.0], [57.3, 4591.0], [57.4, 4597.0], [57.5, 4606.0], [57.6, 4611.0], [57.7, 4614.0], [57.8, 4616.0], [57.9, 4618.0], [58.0, 4621.0], [58.1, 4623.0], [58.2, 4629.0], [58.3, 4632.0], [58.4, 4634.0], [58.5, 4643.0], [58.6, 4647.0], [58.7, 4649.0], [58.8, 4662.0], [58.9, 4667.0], [59.0, 4679.0], [59.1, 4679.0], [59.2, 4684.0], [59.3, 4688.0], [59.4, 4700.0], [59.5, 4701.0], [59.6, 4706.0], [59.7, 4708.0], [59.8, 4712.0], [59.9, 4715.0], [60.0, 4716.0], [60.1, 4717.0], [60.2, 4728.0], [60.3, 4733.0], [60.4, 4737.0], [60.5, 4737.0], [60.6, 4740.0], [60.7, 4744.0], [60.8, 4749.0], [60.9, 4751.0], [61.0, 4753.0], [61.1, 4755.0], [61.2, 4759.0], [61.3, 4761.0], [61.4, 4764.0], [61.5, 4765.0], [61.6, 4767.0], [61.7, 4768.0], [61.8, 4776.0], [61.9, 4780.0], [62.0, 4786.0], [62.1, 4794.0], [62.2, 4798.0], [62.3, 4801.0], [62.4, 4808.0], [62.5, 4809.0], [62.6, 4813.0], [62.7, 4814.0], [62.8, 4817.0], [62.9, 4818.0], [63.0, 4826.0], [63.1, 4832.0], [63.2, 4834.0], [63.3, 4840.0], [63.4, 4858.0], [63.5, 4860.0], [63.6, 4867.0], [63.7, 4868.0], [63.8, 4870.0], [63.9, 4873.0], [64.0, 4882.0], [64.1, 4885.0], [64.2, 4901.0], [64.3, 4907.0], [64.4, 4918.0], [64.5, 4924.0], [64.6, 4930.0], [64.7, 4934.0], [64.8, 4940.0], [64.9, 4945.0], [65.0, 4947.0], [65.1, 4955.0], [65.2, 4959.0], [65.3, 4963.0], [65.4, 4971.0], [65.5, 4973.0], [65.6, 4978.0], [65.7, 4982.0], [65.8, 4990.0], [65.9, 4992.0], [66.0, 4994.0], [66.1, 4997.0], [66.2, 5003.0], [66.3, 5006.0], [66.4, 5012.0], [66.5, 5013.0], [66.6, 5022.0], [66.7, 5023.0], [66.8, 5031.0], [66.9, 5032.0], [67.0, 5037.0], [67.1, 5040.0], [67.2, 5046.0], [67.3, 5049.0], [67.4, 5053.0], [67.5, 5055.0], [67.6, 5056.0], [67.7, 5059.0], [67.8, 5060.0], [67.9, 5063.0], [68.0, 5064.0], [68.1, 5065.0], [68.2, 5070.0], [68.3, 5077.0], [68.4, 5079.0], [68.5, 5082.0], [68.6, 5090.0], [68.7, 5092.0], [68.8, 5093.0], [68.9, 5095.0], [69.0, 5097.0], [69.1, 5098.0], [69.2, 5105.0], [69.3, 5107.0], [69.4, 5112.0], [69.5, 5116.0], [69.6, 5124.0], [69.7, 5126.0], [69.8, 5134.0], [69.9, 5139.0], [70.0, 5142.0], [70.1, 5147.0], [70.2, 5151.0], [70.3, 5151.0], [70.4, 5156.0], [70.5, 5157.0], [70.6, 5163.0], [70.7, 5165.0], [70.8, 5173.0], [70.9, 5173.0], [71.0, 5176.0], [71.1, 5178.0], [71.2, 5180.0], [71.3, 5181.0], [71.4, 5185.0], [71.5, 5187.0], [71.6, 5198.0], [71.7, 5202.0], [71.8, 5204.0], [71.9, 5209.0], [72.0, 5213.0], [72.1, 5216.0], [72.2, 5218.0], [72.3, 5221.0], [72.4, 5223.0], [72.5, 5227.0], [72.6, 5232.0], [72.7, 5233.0], [72.8, 5240.0], [72.9, 5245.0], [73.0, 5251.0], [73.1, 5252.0], [73.2, 5256.0], [73.3, 5260.0], [73.4, 5266.0], [73.5, 5268.0], [73.6, 5271.0], [73.7, 5277.0], [73.8, 5279.0], [73.9, 5280.0], [74.0, 5284.0], [74.1, 5285.0], [74.2, 5288.0], [74.3, 5290.0], [74.4, 5294.0], [74.5, 5298.0], [74.6, 5299.0], [74.7, 5301.0], [74.8, 5305.0], [74.9, 5306.0], [75.0, 5309.0], [75.1, 5312.0], [75.2, 5316.0], [75.3, 5319.0], [75.4, 5323.0], [75.5, 5324.0], [75.6, 5326.0], [75.7, 5330.0], [75.8, 5335.0], [75.9, 5336.0], [76.0, 5339.0], [76.1, 5342.0], [76.2, 5347.0], [76.3, 5347.0], [76.4, 5352.0], [76.5, 5355.0], [76.6, 5360.0], [76.7, 5361.0], [76.8, 5365.0], [76.9, 5370.0], [77.0, 5372.0], [77.1, 5373.0], [77.2, 5379.0], [77.3, 5380.0], [77.4, 5383.0], [77.5, 5387.0], [77.6, 5389.0], [77.7, 5392.0], [77.8, 5395.0], [77.9, 5395.0], [78.0, 5397.0], [78.1, 5400.0], [78.2, 5404.0], [78.3, 5406.0], [78.4, 5408.0], [78.5, 5409.0], [78.6, 5412.0], [78.7, 5418.0], [78.8, 5421.0], [78.9, 5422.0], [79.0, 5427.0], [79.1, 5428.0], [79.2, 5432.0], [79.3, 5434.0], [79.4, 5436.0], [79.5, 5443.0], [79.6, 5447.0], [79.7, 5453.0], [79.8, 5455.0], [79.9, 5462.0], [80.0, 5463.0], [80.1, 5467.0], [80.2, 5473.0], [80.3, 5479.0], [80.4, 5483.0], [80.5, 5488.0], [80.6, 5490.0], [80.7, 5504.0], [80.8, 5506.0], [80.9, 5511.0], [81.0, 5513.0], [81.1, 5522.0], [81.2, 5525.0], [81.3, 5535.0], [81.4, 5536.0], [81.5, 5541.0], [81.6, 5548.0], [81.7, 5554.0], [81.8, 5555.0], [81.9, 5570.0], [82.0, 5579.0], [82.1, 5588.0], [82.2, 5594.0], [82.3, 5596.0], [82.4, 5600.0], [82.5, 5608.0], [82.6, 5608.0], [82.7, 5610.0], [82.8, 5612.0], [82.9, 5624.0], [83.0, 5631.0], [83.1, 5637.0], [83.2, 5638.0], [83.3, 5645.0], [83.4, 5648.0], [83.5, 5649.0], [83.6, 5651.0], [83.7, 5658.0], [83.8, 5658.0], [83.9, 5663.0], [84.0, 5668.0], [84.1, 5673.0], [84.2, 5677.0], [84.3, 5680.0], [84.4, 5680.0], [84.5, 5685.0], [84.6, 5687.0], [84.7, 5696.0], [84.8, 5699.0], [84.9, 5713.0], [85.0, 5718.0], [85.1, 5719.0], [85.2, 5723.0], [85.3, 5727.0], [85.4, 5733.0], [85.5, 5736.0], [85.6, 5741.0], [85.7, 5743.0], [85.8, 5747.0], [85.9, 5749.0], [86.0, 5751.0], [86.1, 5752.0], [86.2, 5756.0], [86.3, 5757.0], [86.4, 5758.0], [86.5, 5761.0], [86.6, 5762.0], [86.7, 5763.0], [86.8, 5764.0], [86.9, 5766.0], [87.0, 5768.0], [87.1, 5769.0], [87.2, 5773.0], [87.3, 5777.0], [87.4, 5780.0], [87.5, 5782.0], [87.6, 5783.0], [87.7, 5784.0], [87.8, 5785.0], [87.9, 5789.0], [88.0, 5790.0], [88.1, 5792.0], [88.2, 5793.0], [88.3, 5795.0], [88.4, 5798.0], [88.5, 5802.0], [88.6, 5803.0], [88.7, 5806.0], [88.8, 5814.0], [88.9, 5815.0], [89.0, 5817.0], [89.1, 5823.0], [89.2, 5826.0], [89.3, 5831.0], [89.4, 5832.0], [89.5, 5835.0], [89.6, 5837.0], [89.7, 5844.0], [89.8, 5851.0], [89.9, 5867.0], [90.0, 5878.0], [90.1, 5883.0], [90.2, 5887.0], [90.3, 5891.0], [90.4, 5891.0], [90.5, 5898.0], [90.6, 5904.0], [90.7, 5909.0], [90.8, 5912.0], [90.9, 5920.0], [91.0, 5929.0], [91.1, 5933.0], [91.2, 5936.0], [91.3, 5942.0], [91.4, 5945.0], [91.5, 5952.0], [91.6, 5954.0], [91.7, 5958.0], [91.8, 5959.0], [91.9, 5962.0], [92.0, 5966.0], [92.1, 5971.0], [92.2, 5972.0], [92.3, 5977.0], [92.4, 5978.0], [92.5, 5983.0], [92.6, 5988.0], [92.7, 6006.0], [92.8, 6009.0], [92.9, 6016.0], [93.0, 6019.0], [93.1, 6033.0], [93.2, 6035.0], [93.3, 6040.0], [93.4, 6056.0], [93.5, 6090.0], [93.6, 6093.0], [93.7, 6109.0], [93.8, 6113.0], [93.9, 6119.0], [94.0, 6127.0], [94.1, 6134.0], [94.2, 6146.0], [94.3, 6148.0], [94.4, 6164.0], [94.5, 6176.0], [94.6, 6178.0], [94.7, 6184.0], [94.8, 6185.0], [94.9, 6188.0], [95.0, 6202.0], [95.1, 6206.0], [95.2, 6209.0], [95.3, 6211.0], [95.4, 6217.0], [95.5, 6219.0], [95.6, 6224.0], [95.7, 6229.0], [95.8, 6230.0], [95.9, 6237.0], [96.0, 6244.0], [96.1, 6247.0], [96.2, 6252.0], [96.3, 6262.0], [96.4, 6267.0], [96.5, 6276.0], [96.6, 6296.0], [96.7, 6305.0], [96.8, 6309.0], [96.9, 6321.0], [97.0, 6329.0], [97.1, 6338.0], [97.2, 6348.0], [97.3, 6354.0], [97.4, 6355.0], [97.5, 6359.0], [97.6, 6361.0], [97.7, 6363.0], [97.8, 6366.0], [97.9, 6371.0], [98.0, 6376.0], [98.1, 6382.0], [98.2, 6391.0], [98.3, 6393.0], [98.4, 6401.0], [98.5, 6406.0], [98.6, 6408.0], [98.7, 6415.0], [98.8, 6421.0], [98.9, 6427.0], [99.0, 6449.0], [99.1, 6458.0], [99.2, 6493.0], [99.3, 6503.0], [99.4, 6508.0], [99.5, 6554.0], [99.6, 6569.0], [99.7, 6592.0], [99.8, 6616.0], [99.9, 6639.0], [100.0, 6660.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 800.0, "maxY": 92.0, "series": [{"data": [[800.0, 6.0], [900.0, 13.0], [1000.0, 13.0], [1100.0, 20.0], [1200.0, 23.0], [1300.0, 25.0], [1400.0, 26.0], [1500.0, 28.0], [1600.0, 31.0], [1700.0, 27.0], [1800.0, 28.0], [1900.0, 50.0], [2000.0, 37.0], [2100.0, 33.0], [2300.0, 36.0], [2200.0, 35.0], [2400.0, 40.0], [2500.0, 54.0], [2600.0, 45.0], [2700.0, 49.0], [2800.0, 53.0], [2900.0, 40.0], [3000.0, 45.0], [3100.0, 53.0], [3200.0, 62.0], [3300.0, 38.0], [3400.0, 37.0], [3500.0, 32.0], [3600.0, 33.0], [3700.0, 50.0], [3800.0, 46.0], [3900.0, 43.0], [4000.0, 21.0], [4100.0, 34.0], [4300.0, 61.0], [4200.0, 34.0], [4400.0, 60.0], [4500.0, 75.0], [4600.0, 48.0], [4700.0, 72.0], [4800.0, 48.0], [4900.0, 50.0], [5000.0, 74.0], [5100.0, 63.0], [5200.0, 75.0], [5300.0, 86.0], [5400.0, 65.0], [5500.0, 42.0], [5600.0, 61.0], [5700.0, 92.0], [5800.0, 51.0], [5900.0, 52.0], [6000.0, 25.0], [6100.0, 34.0], [6200.0, 42.0], [6300.0, 43.0], [6400.0, 22.0], [6500.0, 13.0], [6600.0, 6.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2359.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 127.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2359.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 14.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.4668000000029, "minX": 1.75558734E12, "maxY": 1251.4668000000029, "series": [{"data": [[1.75558734E12, 1251.4668000000029]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558734E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 858.0, "minX": 2.0, "maxY": 6626.0, "series": [{"data": [[2.0, 6016.0], [3.0, 5977.0], [4.0, 5838.0], [6.0, 5916.0], [8.0, 6267.5], [9.0, 6421.0], [13.0, 5902.0], [15.0, 5873.4], [17.0, 5824.0], [18.0, 5749.0], [19.0, 5957.0], [20.0, 5736.0], [25.0, 5861.0], [27.0, 6124.0], [28.0, 6260.25], [33.0, 6587.0], [35.0, 5839.666666666667], [37.0, 5954.0], [39.0, 6514.0], [38.0, 5868.4], [41.0, 5814.0], [40.0, 5891.0], [43.0, 5816.0], [42.0, 6038.0], [44.0, 6008.0], [47.0, 6415.0], [46.0, 5958.0], [51.0, 6256.333333333333], [50.0, 6396.0], [53.0, 6315.0], [52.0, 6035.0], [55.0, 6237.0], [56.0, 6406.0], [59.0, 5743.0], [58.0, 6520.5], [61.0, 6062.5], [63.0, 5942.0], [62.0, 6409.0], [67.0, 6391.0], [66.0, 6623.0], [65.0, 5909.0], [64.0, 6626.0], [70.0, 6219.0], [68.0, 6009.0], [74.0, 6365.0], [73.0, 6300.0], [72.0, 6224.0], [78.0, 6213.0], [77.0, 6371.0], [76.0, 6420.5], [83.0, 6320.5], [81.0, 6028.666666666667], [87.0, 6024.0], [85.0, 5832.0], [84.0, 5929.0], [89.0, 6000.0], [88.0, 6363.0], [92.0, 5794.333333333333], [98.0, 6134.0], [97.0, 6358.0], [100.0, 5879.75], [106.0, 6183.333333333333], [111.0, 6035.5], [110.0, 6354.0], [108.0, 6207.75], [114.0, 5908.333333333333], [113.0, 5907.0], [119.0, 5852.5], [116.0, 6053.0], [123.0, 5751.0], [122.0, 6373.0], [125.0, 5999.25], [124.0, 5631.0], [135.0, 5777.0], [134.0, 6043.0], [131.0, 5780.0], [130.0, 6362.0], [129.0, 5673.0], [128.0, 6152.0], [143.0, 6338.0], [142.0, 5680.0], [141.0, 5971.0], [138.0, 5775.5], [136.0, 5785.0], [151.0, 5773.0], [150.0, 5891.0], [149.0, 6121.0], [147.0, 5934.333333333333], [144.0, 6076.0], [159.0, 5766.0], [158.0, 5802.0], [157.0, 5786.0], [155.0, 5770.0], [166.0, 5844.0], [165.0, 5687.0], [164.0, 5798.0], [163.0, 5798.0], [161.0, 6193.0], [175.0, 5994.5], [174.0, 6569.0], [173.0, 5794.0], [172.0, 5817.0], [171.0, 6329.0], [170.0, 6095.5], [169.0, 6095.0], [183.0, 5801.5], [181.0, 5792.0], [180.0, 6014.666666666667], [178.0, 5782.0], [191.0, 5932.0], [190.0, 5757.0], [188.0, 5977.0], [186.0, 6190.666666666667], [198.0, 5793.0], [196.0, 5913.0], [195.0, 5908.5], [194.0, 5963.0], [192.0, 5961.0], [207.0, 5927.5], [205.0, 6334.0], [204.0, 6147.0], [203.0, 6288.5], [202.0, 5785.0], [200.0, 6268.0], [214.0, 6317.5], [213.0, 6447.0], [212.0, 6338.0], [210.0, 6315.0], [209.0, 6131.0], [221.0, 5743.5], [219.0, 5725.0], [218.0, 5758.0], [217.0, 5769.0], [216.0, 6147.0], [230.0, 6267.0], [229.0, 5736.0], [228.0, 6177.0], [226.0, 6503.0], [225.0, 5736.0], [224.0, 5988.666666666667], [237.0, 6354.0], [234.0, 6300.0], [233.0, 6373.0], [247.0, 6276.0], [246.0, 6234.0], [245.0, 5990.0], [243.0, 6307.0], [242.0, 6369.5], [255.0, 6286.666666666667], [252.0, 6294.5], [250.0, 6366.0], [249.0, 6210.0], [248.0, 6219.0], [269.0, 5727.0], [270.0, 5815.0], [268.0, 6353.0], [259.0, 6289.0], [257.0, 6408.0], [267.0, 6177.0], [266.0, 6187.0], [264.0, 5955.0], [262.0, 5631.0], [261.0, 6264.0], [260.0, 6208.0], [286.0, 6131.0], [287.0, 6230.0], [284.0, 5637.0], [275.0, 5934.5], [273.0, 6185.0], [272.0, 5912.0], [283.0, 5890.5], [281.0, 6176.0], [280.0, 6179.0], [279.0, 6184.0], [278.0, 6184.0], [277.0, 5713.0], [276.0, 6185.0], [302.0, 6119.0], [303.0, 5658.0], [301.0, 6134.0], [300.0, 6109.0], [299.0, 6312.0], [297.0, 6164.0], [296.0, 5596.0], [295.0, 6254.0], [290.0, 5606.0], [289.0, 5608.0], [288.0, 6188.0], [294.0, 5949.25], [317.0, 5680.0], [319.0, 5645.0], [316.0, 5670.0], [307.0, 6104.0], [305.0, 5733.0], [304.0, 6090.0], [315.0, 5662.0], [314.0, 5921.0], [313.0, 6245.0], [312.0, 5685.0], [311.0, 6321.0], [310.0, 6093.0], [309.0, 6224.0], [308.0, 6090.0], [323.0, 5699.0], [335.0, 5658.0], [332.0, 5657.0], [331.0, 6040.0], [330.0, 6118.0], [329.0, 5799.0], [326.0, 5645.0], [325.0, 5668.0], [324.0, 5648.0], [322.0, 6305.0], [321.0, 6268.0], [320.0, 5678.0], [350.0, 5790.0], [351.0, 6084.0], [349.0, 6049.0], [348.0, 5987.0], [347.0, 6009.0], [345.0, 6019.0], [344.0, 6116.0], [343.0, 6013.0], [336.0, 5755.0], [338.0, 5478.0], [337.0, 5834.0], [342.0, 5826.0], [341.0, 6004.0], [340.0, 5978.0], [365.0, 5978.0], [367.0, 5845.333333333333], [364.0, 5783.0], [363.0, 5974.0], [362.0, 5791.0], [360.0, 5898.5], [358.0, 5948.0], [357.0, 6112.0], [353.0, 5775.0], [352.0, 6185.0], [380.0, 6056.0], [379.0, 5748.0], [378.0, 6017.0], [377.0, 5611.0], [375.0, 5756.0], [368.0, 5768.0], [374.0, 5980.0], [373.0, 5980.0], [372.0, 5761.0], [371.0, 5962.0], [369.0, 5957.0], [398.0, 5522.0], [399.0, 5536.0], [397.0, 5509.0], [387.0, 5815.666666666667], [386.0, 5756.0], [385.0, 5942.5], [384.0, 5404.0], [395.0, 5513.0], [394.0, 5541.0], [393.0, 6043.5], [391.0, 5749.0], [390.0, 5522.0], [389.0, 5909.0], [388.0, 5933.0], [414.0, 5505.0], [415.0, 5422.0], [413.0, 5428.0], [412.0, 5432.0], [411.0, 5434.0], [410.0, 5443.0], [409.0, 5440.5], [407.0, 5719.0], [401.0, 5887.0], [400.0, 5536.0], [403.0, 5919.0], [402.0, 6027.0], [406.0, 5468.0], [404.0, 5522.0], [419.0, 5487.0], [429.0, 5383.0], [428.0, 5394.0], [427.0, 5615.0], [426.0, 5479.0], [425.0, 5400.0], [423.0, 5395.0], [422.0, 5400.5], [420.0, 5983.0], [418.0, 5488.0], [417.0, 5415.0], [416.0, 5425.0], [445.0, 5525.0], [447.0, 5395.0], [444.0, 5372.0], [435.0, 5435.0], [434.0, 5461.0], [433.0, 5705.666666666667], [432.0, 5867.0], [443.0, 5372.0], [442.0, 5372.0], [441.0, 5455.0], [440.0, 5380.0], [439.0, 5456.0], [438.0, 5409.0], [437.0, 5462.0], [436.0, 5383.0], [450.0, 5361.0], [463.0, 5527.0], [460.0, 5391.0], [459.0, 5347.0], [458.0, 5531.666666666667], [455.0, 5401.0], [454.0, 5792.0], [453.0, 5361.0], [452.0, 5384.0], [449.0, 5359.0], [448.0, 5418.5], [479.0, 5616.333333333333], [476.0, 5446.5], [475.0, 5303.0], [474.0, 5292.0], [473.0, 5387.0], [472.0, 5887.0], [470.0, 5494.0], [468.0, 5595.0], [467.0, 5609.0], [466.0, 5371.0], [465.0, 5326.0], [464.0, 5608.0], [488.0, 5764.0], [495.0, 5293.0], [491.0, 5339.0], [490.0, 5798.0], [489.0, 5945.0], [487.0, 5312.0], [486.0, 5723.0], [485.0, 5869.0], [483.0, 5342.0], [482.0, 5792.0], [481.0, 5483.5], [510.0, 5312.0], [509.0, 5276.0], [508.0, 5696.0], [507.0, 5294.0], [506.0, 5294.0], [505.0, 5459.666666666667], [503.0, 5835.0], [501.0, 5305.0], [540.0, 5181.5], [542.0, 5203.0], [528.0, 5267.0], [530.0, 5121.0], [538.0, 5674.0], [516.0, 5648.666666666667], [512.0, 5500.0], [526.0, 5259.0], [524.0, 5325.333333333333], [520.0, 5306.0], [534.0, 5204.0], [532.0, 5788.0], [568.0, 5433.0], [574.0, 5059.0], [560.0, 5260.0], [562.0, 5661.0], [570.0, 5065.0], [546.0, 5203.0], [548.0, 5245.0], [550.0, 5340.5], [558.0, 5266.0], [554.0, 5683.0], [552.0, 5096.0], [566.0, 5851.0], [564.0, 5077.0], [600.0, 5163.0], [604.0, 5783.0], [606.0, 5012.5], [602.0, 5379.0], [590.0, 5468.0], [576.0, 5430.0], [578.0, 5142.0], [580.0, 5137.0], [588.0, 5240.0], [584.0, 5595.0], [598.0, 5208.333333333333], [592.0, 5406.0], [632.0, 5062.0], [638.0, 5553.0], [624.0, 4966.0], [636.0, 5554.0], [622.0, 5153.625000000001], [608.0, 5178.0], [610.0, 5050.5], [614.0, 5172.0], [642.0, 4971.0], [670.0, 5004.333333333333], [664.0, 5648.0], [662.0, 5080.5], [658.0, 5649.0], [640.0, 4978.0], [644.0, 5495.0], [646.0, 5420.0], [654.0, 5309.0], [652.0, 5028.5], [648.0, 5331.0], [702.0, 5042.5], [690.0, 4957.0], [700.0, 4800.0], [696.0, 4947.0], [674.0, 5288.0], [672.0, 5290.0], [684.0, 5063.272727272727], [694.0, 5473.0], [706.0, 4884.0], [730.0, 5177.0], [734.0, 4866.0], [704.0, 5504.0], [708.0, 4805.0], [710.0, 5541.0], [718.0, 4562.0], [716.0, 4644.0], [714.0, 5447.0], [712.0, 5223.0], [726.0, 5256.5], [724.0, 5129.0], [760.0, 4519.0], [766.0, 5134.0], [752.0, 5212.0], [754.0, 4907.0], [764.0, 5277.0], [736.0, 5301.0], [738.0, 4543.0], [740.0, 5232.0], [750.0, 5370.0], [748.0, 5202.0], [746.0, 5397.0], [744.0, 5133.5], [758.0, 5447.5], [792.0, 4867.0], [786.0, 4737.0], [796.0, 5504.0], [794.0, 4834.0], [768.0, 5184.0], [770.0, 4601.0], [772.0, 4870.0], [774.0, 4597.0], [780.0, 5349.0], [790.0, 4869.0], [806.0, 4608.0], [828.0, 5048.5], [824.0, 4967.5], [818.0, 5303.0], [816.0, 5075.0], [814.0, 4701.0], [812.0, 5308.0], [810.0, 5346.0], [808.0, 5217.0], [858.0, 5070.0], [860.0, 5284.0], [856.0, 4776.0], [836.0, 5324.0], [834.0, 5279.285714285715], [838.0, 5233.0], [854.0, 4553.0], [852.0, 4863.8], [888.0, 5051.0], [894.0, 5119.666666666667], [880.0, 4743.0], [890.0, 4497.0], [866.0, 4631.0], [868.0, 4739.0], [878.0, 5311.0], [876.0, 5230.5], [874.0, 4764.0], [872.0, 4748.0], [886.0, 4728.0], [882.0, 4744.0], [922.0, 5410.0], [924.0, 4442.0], [926.0, 4454.0], [912.0, 5248.0], [920.0, 5174.0], [910.0, 4581.666666666667], [896.0, 5040.0], [900.0, 4874.0], [902.0, 5216.0], [906.0, 4585.5], [904.0, 4497.0], [918.0, 4576.0], [916.0, 5051.0], [954.0, 4530.5], [952.0, 4373.0], [944.0, 5185.0], [946.0, 4557.0], [956.0, 4517.0], [928.0, 4857.0], [932.0, 4727.0], [934.0, 5181.0], [940.0, 4337.0], [938.0, 4469.0], [936.0, 5298.0], [950.0, 4433.0], [948.0, 4624.0], [986.0, 4735.0], [990.0, 5139.0], [966.0, 5349.5], [964.0, 5347.0], [960.0, 4842.0], [974.0, 4952.0], [968.0, 5346.0], [982.0, 4870.0], [980.0, 4829.25], [976.0, 4807.0], [1022.0, 5148.0], [1008.0, 4779.0], [1018.0, 4385.0], [1004.0, 5060.0], [992.0, 5319.0], [994.0, 4612.0], [996.0, 4426.0], [1000.0, 4731.75], [1014.0, 4358.5], [1012.0, 4444.0], [1010.0, 4649.5], [1036.0, 5285.0], [1080.0, 4925.0], [1056.0, 4535.0], [1072.0, 5101.5], [1032.0, 4574.0], [1028.0, 4591.0], [1052.0, 4548.0], [1044.0, 4584.0], [1068.0, 4689.0], [1064.0, 5258.0], [1060.0, 4457.5], [1140.0, 5064.0], [1144.0, 5158.0], [1128.0, 5003.0], [1148.0, 5156.0], [1120.0, 4675.333333333333], [1136.0, 4963.0], [1096.0, 4985.0], [1092.0, 4330.0], [1088.0, 4629.0], [1116.0, 4505.0], [1104.0, 4572.75], [1132.0, 4199.0], [1208.0, 4479.35294117647], [1212.0, 4217.0], [1204.0, 4206.0], [1156.0, 4504.0], [1152.0, 4844.0], [1196.0, 4815.5], [1176.0, 4343.0], [1172.0, 4098.0], [1264.0, 4052.0], [1272.0, 4370.5], [1276.0, 4319.0], [1248.0, 4139.0], [1252.0, 4761.0], [1268.0, 4859.0], [1244.0, 3904.0], [1216.0, 4183.0], [1220.0, 4840.0], [1224.0, 4816.0], [1228.0, 4111.0], [1240.0, 4189.5], [1260.0, 4717.0], [1256.0, 4338.0], [1340.0, 3970.0], [1332.0, 3927.0], [1320.0, 3870.0], [1280.0, 4319.0], [1284.0, 4051.0], [1288.0, 3933.0], [1292.0, 3870.0], [1308.0, 4153.0], [1304.0, 4614.0], [1400.0, 3746.0], [1404.0, 3999.0], [1376.0, 3780.0], [1380.0, 4478.0], [1396.0, 3757.0], [1392.0, 3707.0], [1356.0, 3749.0], [1348.0, 4385.0], [1344.0, 4189.666666666667], [1372.0, 4161.0], [1368.0, 3833.0], [1364.0, 4056.3333333333335], [1388.0, 4129.0], [1464.0, 3695.0], [1444.0, 3532.0], [1440.0, 3925.5], [1448.0, 3670.0], [1412.0, 3781.0], [1416.0, 3768.0], [1420.0, 3884.0], [1432.0, 3582.0], [1424.0, 4459.0], [1524.0, 3273.0], [1528.0, 3388.5], [1532.0, 3503.0], [1504.0, 3424.0], [1512.0, 3531.0], [1516.0, 3384.0], [1520.0, 3381.0], [1472.0, 3697.0], [1476.0, 3954.0], [1480.0, 4124.0], [1484.0, 4335.0], [1500.0, 3427.6666666666665], [1588.0, 3867.0], [1592.0, 3875.0], [1568.0, 3305.5], [1572.0, 3198.0], [1576.0, 3401.0], [1580.0, 3278.0], [1544.0, 3351.0], [1560.0, 3447.0], [1556.0, 3260.5], [1552.0, 3951.0], [1656.0, 3124.0], [1640.0, 3154.0], [1632.0, 3121.0], [1636.0, 3292.0], [1644.0, 3079.0], [1648.0, 3609.0], [1604.0, 3251.0], [1608.0, 3858.0], [1612.0, 3173.0], [1628.0, 3110.25], [1624.0, 3185.3333333333335], [1616.0, 3183.0], [1720.0, 3624.0], [1716.0, 3024.5], [1704.0, 3303.0], [1708.0, 3041.0], [1724.0, 3464.0], [1712.0, 3140.0], [1676.0, 2874.0], [1672.0, 3709.0], [1664.0, 3138.0], [1692.0, 3085.0], [1688.0, 3090.0], [1684.0, 3470.0], [1680.0, 3692.0], [1788.0, 2864.0], [1760.0, 3579.0], [1764.0, 2880.0], [1768.0, 2851.0], [1772.0, 2684.0], [1784.0, 2842.5], [1776.0, 2769.0], [1732.0, 3127.5], [1736.0, 3737.0], [1740.0, 3554.0], [1752.0, 3744.0], [1748.0, 2971.0], [1744.0, 3084.0], [1844.0, 2531.0], [1828.0, 3311.0], [1832.0, 2774.0], [1836.0, 2935.0], [1852.0, 3221.0], [1840.0, 2545.0], [1804.0, 2839.5], [1800.0, 2752.0], [1796.0, 2848.0], [1792.0, 2839.0], [1820.0, 2690.0], [1816.0, 2635.0], [1812.0, 2679.0], [1808.0, 2685.0], [1912.0, 2562.0], [1888.0, 3250.0], [1896.0, 2634.0], [1916.0, 2873.5], [1908.0, 2514.0], [1904.0, 3074.0], [1864.0, 2593.0], [1868.0, 2583.0], [1884.0, 2520.0], [1880.0, 3133.0], [1872.0, 2560.0], [1976.0, 2599.5], [1964.0, 3264.0], [1972.0, 2380.0], [1920.0, 2705.5], [1928.0, 2481.0], [1932.0, 2466.0], [1948.0, 3119.0], [1936.0, 2554.0], [2036.0, 3125.0], [2016.0, 2471.0], [2024.0, 3152.0], [2040.0, 2648.0], [2032.0, 2367.0], [1996.0, 3208.0], [1992.0, 2147.0], [1988.0, 2248.0], [1984.0, 2853.5], [2012.0, 2581.5], [2008.0, 2241.0], [2000.0, 3052.0], [2160.0, 1947.0], [2168.0, 1985.6666666666667], [2112.0, 2642.0], [2120.0, 2166.0], [2136.0, 2863.0], [2152.0, 2319.5], [2144.0, 1819.0], [2056.0, 2699.0], [2104.0, 2734.0], [2096.0, 2578.0], [2088.0, 2019.0], [2272.0, 1501.0], [2240.0, 2116.0], [2248.0, 2396.0], [2256.0, 1893.5], [2176.0, 1958.0], [2184.0, 2021.0], [2200.0, 1953.0], [2232.0, 2203.0], [2216.0, 1977.0], [2208.0, 2323.0], [2328.0, 1647.0], [2408.0, 1240.0], [2368.0, 1590.0], [2376.0, 1323.6666666666667], [2320.0, 1426.0], [2312.0, 2272.5], [2304.0, 1522.0], [2360.0, 1396.0], [2352.0, 1978.0], [2336.0, 1610.0], [2448.0, 924.0], [2496.0, 1274.0], [2432.0, 1167.0], [2472.0, 1068.5], [2480.0, 952.0], [2161.0, 2419.0], [2153.0, 1805.0], [2113.0, 2707.0], [2121.0, 1958.0], [2129.0, 1944.0], [2137.0, 1927.0], [2169.0, 2057.0], [2073.0, 2413.0], [2065.0, 2683.0], [2057.0, 2350.0], [2105.0, 2722.0], [2097.0, 2758.0], [2089.0, 2371.0], [2281.0, 1631.0], [2297.0, 1852.5], [2249.0, 1640.0], [2241.0, 1928.0], [2257.0, 2377.0], [2265.0, 2224.0], [2273.0, 2158.0], [2185.0, 1771.0], [2193.0, 1835.5], [2201.0, 1800.0], [2225.0, 2209.0], [2217.0, 1876.0], [2209.0, 2697.0], [2417.0, 1475.5], [2369.0, 1486.0], [2377.0, 1934.0], [2385.0, 1678.5], [2393.0, 1620.5], [2409.0, 1402.0], [2401.0, 1578.0], [2305.0, 1617.0], [2361.0, 1990.0], [2353.0, 1572.0], [2337.0, 1662.0], [2449.0, 1066.0], [2497.0, 860.0], [2457.0, 973.0], [2441.0, 1488.6666666666667], [2481.0, 867.0], [2465.0, 1195.0], [1077.0, 4663.0], [1085.0, 4686.5], [1061.0, 4427.0], [1081.0, 4925.0], [1073.0, 4787.5], [1037.0, 5055.0], [1029.0, 4840.0], [1025.0, 4793.0], [1053.0, 4441.0], [1049.0, 4582.8], [1041.0, 4202.0], [1137.0, 5179.0], [1145.0, 4331.0], [1149.0, 4316.5], [1121.0, 4519.0], [1117.0, 4765.0], [1093.0, 4832.0], [1101.0, 4270.0], [1097.0, 5042.0], [1113.0, 4268.0], [1129.0, 5200.0], [1125.0, 4448.5], [1165.0, 4460.0], [1209.0, 4332.0], [1213.0, 4800.0], [1201.0, 4108.0], [1161.0, 4712.5], [1153.0, 4268.8], [1197.0, 4813.0], [1181.0, 4815.0], [1177.0, 4214.0], [1173.0, 4365.0], [1169.0, 4261.0], [1225.0, 4431.0], [1265.0, 3958.0], [1273.0, 4737.0], [1269.0, 4786.0], [1217.0, 4821.0], [1221.0, 4614.0], [1229.0, 4310.0], [1245.0, 4579.0], [1241.0, 4791.0], [1237.0, 4752.5], [1233.0, 4624.333333333333], [1261.0, 4233.0], [1253.0, 4160.5], [1289.0, 3883.0], [1333.0, 3843.0], [1341.0, 3799.0], [1317.0, 3828.0], [1285.0, 3941.0], [1281.0, 3892.0], [1309.0, 4606.0], [1305.0, 3906.0], [1301.0, 4047.0], [1297.0, 4159.0], [1325.0, 4307.0], [1321.0, 3752.0], [1401.0, 3959.0], [1405.0, 3985.0], [1377.0, 4580.0], [1385.0, 4547.666666666667], [1397.0, 4472.0], [1393.0, 4473.0], [1353.0, 3936.0], [1349.0, 4589.0], [1345.0, 3781.0], [1373.0, 3740.0], [1369.0, 3854.0], [1361.0, 4075.0], [1389.0, 3753.0], [1465.0, 4195.0], [1461.0, 3817.125], [1445.0, 3809.0], [1409.0, 4085.3333333333335], [1413.0, 3953.0], [1421.0, 4349.0], [1437.0, 4395.0], [1429.0, 3724.0], [1453.0, 3686.5], [1529.0, 3462.0], [1533.0, 3983.0], [1505.0, 3404.0], [1509.0, 3409.0], [1513.0, 3486.0], [1517.0, 3278.0], [1525.0, 3396.0], [1521.0, 3518.0], [1473.0, 3473.0], [1481.0, 4031.0], [1501.0, 3946.0], [1489.0, 3824.0], [1549.0, 3357.5], [1581.0, 3193.0], [1597.0, 4060.0], [1593.0, 3159.0], [1541.0, 3371.5], [1561.0, 3447.0], [1557.0, 3448.0], [1553.0, 3345.0], [1661.0, 3030.0], [1633.0, 3304.0], [1641.0, 3038.0], [1645.0, 3164.0], [1653.0, 3328.5], [1601.0, 3225.5], [1605.0, 3249.0], [1609.0, 3271.0], [1629.0, 3164.0], [1621.0, 3324.0], [1617.0, 3132.0], [1725.0, 2878.0], [1701.0, 3072.5], [1705.0, 2919.0], [1709.0, 3054.0], [1721.0, 2761.0], [1717.0, 3593.0], [1669.0, 3141.5], [1665.0, 2989.0], [1689.0, 2957.0], [1685.0, 3084.0], [1681.0, 3102.0], [1789.0, 2736.0], [1765.0, 2919.0], [1761.0, 3626.0], [1769.0, 2791.0], [1785.0, 2843.0], [1781.0, 3118.75], [1777.0, 2770.0], [1737.0, 2974.0], [1741.0, 2838.0], [1757.0, 2976.0], [1749.0, 2880.0], [1845.0, 3408.0], [1829.0, 2710.0], [1849.0, 2662.6666666666665], [1853.0, 2979.0], [1825.0, 2854.3333333333335], [1833.0, 2770.0], [1841.0, 2787.0], [1805.0, 3660.0], [1801.0, 2841.0], [1797.0, 2700.0], [1793.0, 2733.0], [1821.0, 2554.0], [1817.0, 2817.0], [1813.0, 2579.0], [1809.0, 2684.0], [1865.0, 2821.0], [1889.0, 3257.0], [1897.0, 2507.0], [1917.0, 2581.0], [1861.0, 2858.25], [1869.0, 2598.0], [1881.0, 3261.0], [1877.0, 2616.5], [1873.0, 2531.0], [1977.0, 2304.0], [1973.0, 2196.0], [1953.0, 2716.5], [1961.0, 2895.6], [1965.0, 3069.0], [1981.0, 2446.0], [1969.0, 2877.0], [1921.0, 3180.0], [1925.0, 2779.6666666666665], [1929.0, 3156.0], [1933.0, 2545.0], [1949.0, 2596.0], [1945.0, 2511.0], [1941.0, 2437.5], [1937.0, 2555.0], [2045.0, 2463.5], [2021.0, 2648.6666666666665], [2017.0, 2094.0], [2029.0, 2464.75], [2025.0, 2082.0], [2041.0, 2754.0], [2037.0, 3129.0], [2033.0, 2931.0], [1997.0, 3005.0], [1993.0, 2487.0], [1985.0, 2163.0], [2009.0, 2113.0], [2005.0, 2362.0], [2001.0, 2128.0], [2154.0, 1896.0], [2162.0, 2080.6666666666665], [2114.0, 2233.0], [2122.0, 1858.0], [2130.0, 2450.5], [2074.0, 2052.0], [2066.0, 2449.333333333333], [2058.0, 2346.0], [2098.0, 2059.0], [2090.0, 2759.0], [2082.0, 2370.0], [2242.0, 1704.0], [2282.0, 1733.0], [2250.0, 2171.0], [2258.0, 2495.0], [2178.0, 2401.0], [2186.0, 2423.0], [2194.0, 1756.0], [2202.0, 2483.0], [2226.0, 1961.0], [2210.0, 1860.0], [2418.0, 1162.0], [2330.0, 1444.0], [2426.0, 1305.0], [2370.0, 1542.0], [2378.0, 1333.0], [2386.0, 1146.0], [2394.0, 1210.0], [2322.0, 1676.5], [2314.0, 1448.0], [2354.0, 1942.0], [2346.0, 1638.5], [2338.0, 1978.0], [2442.0, 1028.0], [2458.0, 1029.0], [2450.0, 1226.0], [2434.0, 1136.5], [2490.0, 1697.0], [2474.0, 1017.0], [2155.0, 2175.0], [2163.0, 2093.0], [2123.0, 2695.0], [2131.0, 1848.0], [2139.0, 2061.0], [2147.0, 2218.0], [2075.0, 2107.0], [2059.0, 2257.0], [2051.0, 2806.25], [2099.0, 1904.0], [2091.0, 1996.0], [2299.0, 1511.5], [2243.0, 2245.0], [2251.0, 2231.0], [2267.0, 1748.0], [2283.0, 1626.0], [2179.0, 2175.5], [2203.0, 2483.0], [2235.0, 1936.0], [2227.0, 2360.0], [2219.0, 1813.5], [2411.0, 1228.0], [2371.0, 1361.0], [2379.0, 1871.0], [2387.0, 1446.0], [2403.0, 1468.0], [2331.0, 1329.0], [2323.0, 1488.0], [2307.0, 1500.0], [2363.0, 1355.5], [2355.0, 1345.0], [2347.0, 1754.5], [2339.0, 2040.0], [2451.0, 1754.0], [2443.0, 1237.0], [2435.0, 970.0], [2467.0, 925.5], [537.0, 5278.0], [541.0, 5280.0], [531.0, 5663.0], [529.0, 5211.0], [519.0, 5400.5], [517.0, 5687.0], [513.0, 5262.0], [527.0, 5758.0], [521.0, 5685.0], [533.0, 5889.0], [569.0, 5153.0], [575.0, 5178.0], [563.0, 5452.0], [573.0, 5184.333333333333], [559.0, 5098.0], [545.0, 5412.0], [547.0, 5251.0], [551.0, 5271.0], [557.0, 5231.0], [553.0, 5665.0], [567.0, 5592.0], [565.0, 5090.0], [601.0, 5609.0], [603.0, 5023.0], [577.0, 5222.0], [579.0, 5047.0], [587.0, 5190.0], [595.0, 5066.5], [593.0, 5512.0], [637.0, 4976.0], [639.0, 5355.0], [627.0, 5100.0], [625.0, 4936.0], [635.0, 5160.666666666667], [633.0, 5060.0], [609.0, 5570.0], [613.0, 5401.333333333333], [631.0, 4990.0], [629.0, 5239.0], [645.0, 5339.0], [667.0, 4802.0], [665.0, 5124.0], [659.0, 5306.0], [655.0, 5421.0], [641.0, 4667.0], [643.0, 5639.0], [647.0, 5034.0], [653.0, 5539.0], [689.0, 4945.25], [691.0, 4972.0], [703.0, 5252.0], [699.0, 5000.0], [675.0, 5421.333333333333], [673.0, 5587.0], [685.0, 4682.0], [695.0, 4829.0], [693.0, 4901.0], [709.0, 4715.0], [723.0, 5624.0], [733.0, 5130.0], [731.0, 5402.0], [719.0, 4932.0], [705.0, 4945.0], [707.0, 4720.0], [711.0, 5279.0], [717.0, 4939.0], [715.0, 4989.5], [727.0, 4868.0], [721.0, 4976.5], [761.0, 4518.0], [767.0, 5375.0], [753.0, 4887.0], [763.0, 5069.0], [751.0, 4973.0], [737.0, 4867.0], [739.0, 4924.0], [743.0, 4798.0], [741.0, 4860.0], [749.0, 4621.0], [747.0, 5360.0], [745.0, 5209.0], [759.0, 5562.0], [757.0, 4903.0], [755.0, 4765.0], [793.0, 4740.0], [797.0, 4667.0], [799.0, 5132.0], [785.0, 4703.0], [783.0, 5172.0], [769.0, 4507.0], [771.0, 5334.0], [775.0, 4882.0], [781.0, 5157.0], [779.0, 5170.666666666667], [777.0, 4996.5], [791.0, 4675.0], [789.0, 5324.0], [787.0, 4749.0], [803.0, 4945.0], [829.0, 4785.0], [827.0, 4914.5], [817.0, 4444.0], [815.0, 4918.0], [801.0, 5238.0], [805.0, 5233.0], [813.0, 5467.0], [811.0, 5055.5], [809.0, 4470.0], [861.0, 5156.0], [859.0, 4649.0], [857.0, 4953.0], [847.0, 4840.125], [839.0, 5169.0], [855.0, 5240.0], [871.0, 4568.5], [895.0, 5251.0], [891.0, 4528.0], [889.0, 4468.0], [879.0, 5233.0], [865.0, 4829.666666666667], [867.0, 4658.5], [869.0, 4537.0], [877.0, 4391.0], [873.0, 5147.0], [887.0, 4616.0], [885.0, 4868.333333333333], [921.0, 4503.0], [915.0, 4752.0], [913.0, 4655.0], [923.0, 4578.0], [897.0, 5430.0], [901.0, 4966.0], [903.0, 5324.0], [907.0, 4728.0], [919.0, 5064.0], [917.0, 4475.0], [955.0, 4519.0], [957.0, 4643.0], [959.0, 4464.0], [945.0, 4701.0], [943.0, 4932.0], [931.0, 4722.0], [933.0, 5314.0], [935.0, 5330.0], [941.0, 4633.0], [939.0, 4997.0], [937.0, 5256.0], [949.0, 4412.0], [947.0, 4559.0], [989.0, 4728.0], [991.0, 4632.0], [987.0, 4423.0], [963.0, 4677.5], [961.0, 4505.0], [971.0, 5025.5], [969.0, 4810.5], [983.0, 5097.0], [1019.0, 4331.0], [1023.0, 4444.0], [1009.0, 4608.0], [1021.0, 5205.5], [1017.0, 5045.0], [993.0, 4474.0], [995.0, 5316.0], [1003.0, 4400.0], [1001.0, 4623.0], [1013.0, 5092.0], [1062.0, 4411.0], [1074.0, 4414.0], [1034.0, 4694.5], [1054.0, 4378.0], [1066.0, 4787.5], [1058.0, 4374.5], [1098.0, 4284.0], [1126.0, 5173.0], [1122.0, 5209.0], [1138.0, 4101.0], [1094.0, 4510.0], [1090.0, 4707.0], [1114.0, 4423.5], [1110.0, 4266.0], [1106.0, 4743.0], [1134.0, 4399.5], [1130.0, 4275.0], [1210.0, 4997.0], [1214.0, 4311.0], [1166.0, 4770.0], [1158.0, 4737.0], [1154.0, 4110.0], [1194.0, 4254.0], [1174.0, 5089.0], [1266.0, 3955.0], [1250.0, 4501.0], [1254.0, 4783.0], [1270.0, 4254.0], [1218.0, 4127.0], [1226.0, 4769.0], [1230.0, 4307.0], [1242.0, 4132.0], [1238.0, 4992.0], [1262.0, 4002.0], [1258.0, 4016.5], [1338.0, 4582.0], [1330.0, 4121.0], [1322.0, 3827.0], [1318.0, 3878.0], [1314.0, 3923.3333333333335], [1310.0, 4744.0], [1286.0, 3933.0], [1290.0, 4634.0], [1294.0, 3865.0], [1306.0, 4647.0], [1394.0, 3749.0], [1406.0, 3731.0], [1378.0, 3798.0], [1382.0, 4102.5], [1402.0, 3708.0], [1358.0, 3865.5], [1350.0, 3692.0], [1374.0, 3728.0], [1370.0, 3782.0], [1386.0, 4716.0], [1462.0, 4210.0], [1466.0, 3685.0], [1442.0, 3554.0], [1446.0, 3485.0], [1434.0, 3625.3333333333335], [1410.0, 3849.0], [1414.0, 3730.0], [1418.0, 4597.0], [1422.0, 3765.0], [1430.0, 3612.0], [1426.0, 4365.0], [1454.0, 4390.0], [1530.0, 3495.0], [1510.0, 3248.0], [1518.0, 3986.0], [1534.0, 3450.0], [1526.0, 3988.0], [1522.0, 3334.0], [1474.0, 3400.0], [1478.0, 3656.0], [1482.0, 3629.0], [1486.0, 3416.5], [1502.0, 3407.0], [1498.0, 3851.5], [1494.0, 3458.0], [1590.0, 3263.0], [1574.0, 3586.0], [1570.0, 3390.5], [1578.0, 4014.0], [1582.0, 3274.0], [1598.0, 3269.0], [1586.0, 3733.0], [1538.0, 3686.0], [1542.0, 3963.0], [1546.0, 3312.5], [1550.0, 3236.0], [1566.0, 3173.0], [1562.0, 3430.0], [1658.0, 3502.5], [1662.0, 3248.0], [1634.0, 3047.0], [1638.0, 3856.0], [1642.0, 3160.0], [1646.0, 3160.0], [1654.0, 2912.0], [1650.0, 2988.0], [1630.0, 3100.0], [1606.0, 3268.0], [1610.0, 3123.0], [1614.0, 3316.0], [1626.0, 3187.0], [1622.0, 3380.0], [1722.0, 2925.0], [1698.0, 3001.5], [1706.0, 2886.0], [1710.0, 3684.0], [1718.0, 3604.0], [1714.0, 3048.5], [1678.0, 3017.5], [1674.0, 3938.0], [1670.0, 2882.0], [1666.0, 3726.0], [1694.0, 2912.0], [1686.0, 2859.0], [1682.0, 3547.0], [1738.0, 2849.0], [1782.0, 2844.0], [1762.0, 2809.0], [1770.0, 2846.0], [1758.0, 3531.0], [1730.0, 2925.0], [1734.0, 3812.0], [1742.0, 3556.0], [1754.0, 3246.5], [1746.0, 2885.0], [1846.0, 2530.0], [1826.0, 3551.0], [1830.0, 2538.0], [1838.0, 2547.5], [1842.0, 2828.0], [1806.0, 2578.0], [1802.0, 2819.0], [1798.0, 2603.0], [1794.0, 2837.0], [1822.0, 3187.0], [1818.0, 3491.0], [1814.0, 3566.0], [1810.0, 3278.0], [1906.0, 3173.0], [1914.0, 2623.0], [1894.0, 2662.0], [1902.0, 2998.3333333333335], [1910.0, 3205.0], [1870.0, 2900.0], [1886.0, 2887.0], [1882.0, 3256.0], [1878.0, 2525.0], [1874.0, 2510.0], [1974.0, 2535.0], [1982.0, 2560.0], [1954.0, 3077.0], [1958.0, 3098.0], [1962.0, 2551.0], [1970.0, 2792.5], [1922.0, 2469.0], [1930.0, 2659.0], [1934.0, 3138.0], [1950.0, 2276.0], [2042.0, 2893.0], [2038.0, 2369.0], [2018.0, 2190.0], [2022.0, 2184.0], [2030.0, 2324.0], [2046.0, 2401.0], [1998.0, 2232.0], [1994.0, 3211.0], [1990.0, 2858.0], [1986.0, 2292.0], [2014.0, 2590.5], [2010.0, 2261.0], [2006.0, 2411.0], [2002.0, 2124.0], [2148.0, 2643.0], [2156.0, 1949.0], [2124.0, 2702.0], [2116.0, 2417.5], [2132.0, 2145.0], [2140.0, 2064.0], [2076.0, 3019.0], [2052.0, 2183.0], [2100.0, 2738.0], [2084.0, 2750.0], [2196.0, 1890.5], [2276.0, 1680.5], [2300.0, 1472.0], [2260.0, 1830.0], [2180.0, 1696.0], [2204.0, 2382.0], [2236.0, 1830.5], [2228.0, 1751.0], [2220.0, 2441.0], [2212.0, 2149.5], [2420.0, 1602.5], [2332.0, 1402.0], [2380.0, 1431.0], [2388.0, 1282.0], [2396.0, 1285.5], [2428.0, 1169.5], [2412.0, 1392.0], [2404.0, 1592.5], [2316.0, 1493.5], [2308.0, 2260.0], [2348.0, 1968.0], [2340.0, 1383.0], [2444.0, 1172.0], [2500.0, 1227.8636363636365], [2460.0, 1626.0], [2436.0, 1197.0], [2117.0, 1961.0], [2077.0, 2975.0], [2125.0, 2007.0], [2141.0, 2461.5], [2053.0, 2245.0], [2109.0, 2175.3333333333335], [2101.0, 2238.0], [2085.0, 2770.0], [2285.0, 1613.0], [2245.0, 2341.5], [2253.0, 1908.5], [2261.0, 1614.0], [2269.0, 1869.75], [2301.0, 2225.0], [2277.0, 1766.5], [2181.0, 2515.0], [2189.0, 2077.3333333333335], [2205.0, 1892.0], [2229.0, 1728.0], [2221.0, 1867.0], [2213.0, 1862.0], [2421.0, 1206.0], [2429.0, 1313.0], [2381.0, 1475.0], [2373.0, 1528.0], [2389.0, 1221.0], [2397.0, 1114.0], [2413.0, 1947.0], [2405.0, 1336.0], [2333.0, 1771.0], [2325.0, 1720.0], [2309.0, 2049.0], [2357.0, 1752.0], [2349.0, 1581.0], [2341.0, 1375.0], [2453.0, 1187.5], [2437.0, 1631.0], [2485.0, 858.0], [2469.0, 1559.0], [1039.0, 4448.0], [1087.0, 4646.0], [1083.0, 4643.0], [1079.0, 4515.0], [1035.0, 4208.0], [1031.0, 4912.333333333333], [1055.0, 4556.0], [1051.0, 4791.5], [1047.0, 5063.0], [1043.0, 4656.5], [1071.0, 4536.0], [1063.0, 4978.0], [1139.0, 4463.0], [1127.0, 4960.0], [1091.0, 4311.0], [1095.0, 4538.0], [1111.0, 4603.75], [1135.0, 4186.0], [1131.0, 4511.0], [1123.0, 4762.0], [1163.0, 4885.0], [1215.0, 4021.0], [1211.0, 4797.0], [1167.0, 5037.0], [1159.0, 4430.0], [1183.0, 4896.5], [1179.0, 4374.0], [1175.0, 4359.0], [1171.0, 4689.0], [1267.0, 4688.0], [1255.0, 4576.0], [1247.0, 4092.0], [1219.0, 4201.0], [1227.0, 4769.0], [1243.0, 4353.0], [1235.0, 4128.5], [1263.0, 4709.0], [1259.0, 4269.0], [1335.0, 3791.5], [1319.0, 3884.0], [1339.0, 4325.333333333333], [1315.0, 4441.0], [1331.0, 3859.0], [1295.0, 3875.0], [1291.0, 3994.0], [1287.0, 3929.0], [1283.0, 4430.0], [1311.0, 4138.0], [1307.0, 4780.0], [1303.0, 4124.333333333333], [1299.0, 4656.0], [1323.0, 4126.0], [1395.0, 3711.0], [1403.0, 4301.0], [1379.0, 3897.0], [1399.0, 4105.0], [1355.0, 3800.5], [1351.0, 3815.0], [1347.0, 3811.5], [1375.0, 4351.0], [1367.0, 3842.3333333333335], [1391.0, 3892.5], [1467.0, 3323.0], [1471.0, 3804.75], [1443.0, 3738.0], [1447.0, 3759.0], [1451.0, 4068.0], [1463.0, 3479.0], [1439.0, 3683.0], [1415.0, 3714.0], [1419.0, 3744.0], [1435.0, 3731.0], [1431.0, 4350.0], [1427.0, 3923.0], [1523.0, 3618.0], [1535.0, 3448.0], [1507.0, 3511.5], [1511.0, 3286.0], [1515.0, 4022.0], [1519.0, 3828.0], [1503.0, 3406.0], [1475.0, 3605.0], [1479.0, 3526.0], [1483.0, 3494.0], [1487.0, 3370.0], [1495.0, 3429.0], [1491.0, 3873.0], [1591.0, 3252.3333333333335], [1595.0, 3860.0], [1599.0, 3496.0], [1575.0, 3166.0], [1583.0, 3247.0], [1567.0, 3307.0], [1539.0, 3382.0], [1543.0, 3382.0], [1547.0, 3502.0], [1551.0, 3195.0], [1563.0, 3207.0], [1559.0, 3255.0], [1555.0, 3259.0], [1663.0, 3135.0], [1659.0, 3011.0], [1635.0, 3393.0], [1639.0, 3212.5], [1643.0, 3671.0], [1647.0, 3009.0], [1655.0, 2898.0], [1651.0, 3973.0], [1603.0, 3225.0], [1607.0, 3272.0], [1611.0, 3263.0], [1619.0, 3215.5], [1723.0, 2768.0], [1719.0, 3594.0], [1727.0, 2915.5], [1699.0, 2955.5], [1707.0, 2922.0], [1711.0, 3848.0], [1679.0, 3695.0], [1675.0, 3363.5], [1671.0, 3944.0], [1667.0, 2868.0], [1691.0, 2952.5], [1687.0, 3007.0], [1683.0, 3687.0], [1739.0, 3701.0], [1787.0, 2807.3333333333335], [1791.0, 2689.0], [1767.0, 3268.0], [1771.0, 3055.0], [1775.0, 3074.0], [1735.0, 3719.5], [1743.0, 2838.0], [1755.0, 3424.0], [1751.0, 2928.0], [1747.0, 3255.0], [1843.0, 3196.0], [1827.0, 2563.0], [1831.0, 2863.0], [1839.0, 2664.0], [1851.0, 3313.5], [1799.0, 2601.0], [1795.0, 2706.0], [1819.0, 2725.0], [1811.0, 2574.0], [1907.0, 2850.5], [1919.0, 2579.0], [1891.0, 2825.0], [1895.0, 2638.0], [1899.0, 2554.0], [1903.0, 2465.0], [1887.0, 2669.0], [1859.0, 2801.25], [1863.0, 3142.0], [1867.0, 3055.5], [1883.0, 3254.0], [1879.0, 3260.0], [1875.0, 2771.0], [1979.0, 2512.5], [1955.0, 2395.0], [1963.0, 2556.0], [1967.0, 2629.5], [1951.0, 2945.0], [1927.0, 2557.5], [1931.0, 3384.0], [1935.0, 3370.0], [1947.0, 2478.5], [1943.0, 2591.5], [1939.0, 2544.0], [2035.0, 2401.5], [2043.0, 2870.0], [2047.0, 2141.0], [2023.0, 2174.0], [2031.0, 3142.0], [1999.0, 2363.0], [1995.0, 2975.0], [1991.0, 2197.0], [1987.0, 2996.0], [2015.0, 2781.0], [2007.0, 2950.0], [2003.0, 2976.0], [2174.0, 2187.0], [2118.0, 2101.0], [2134.0, 2324.0], [2142.0, 2075.0], [2166.0, 1891.5], [2150.0, 2096.5], [2078.0, 2242.0], [2070.0, 2573.75], [2054.0, 2256.0], [2110.0, 2307.0], [2094.0, 2096.6666666666665], [2086.0, 1932.0], [2302.0, 2071.0], [2246.0, 2015.0], [2254.0, 2413.0], [2270.0, 1663.0], [2286.0, 2228.0], [2238.0, 1998.6666666666667], [2182.0, 2750.0], [2190.0, 1985.0], [2206.0, 2325.0], [2230.0, 1822.0], [2222.0, 2483.0], [2214.0, 1776.0], [2422.0, 1204.0], [2430.0, 1283.0], [2382.0, 1995.0], [2390.0, 1449.0], [2398.0, 1388.0], [2326.0, 1598.0], [2318.0, 1353.0], [2310.0, 1753.0], [2366.0, 1410.6666666666667], [2358.0, 1954.0], [2350.0, 2018.0], [2342.0, 1429.0], [2494.0, 1444.0], [2446.0, 1186.0], [2438.0, 1090.0], [2478.0, 1016.0], [2159.0, 2631.0], [2175.0, 2001.0], [2119.0, 2159.0], [2127.0, 1993.5], [2135.0, 2697.0], [2143.0, 2128.0], [2079.0, 2281.0], [2071.0, 2883.0], [2055.0, 2106.0], [2111.0, 2599.0], [2103.0, 2359.5], [2095.0, 2268.0], [2087.0, 2031.0], [2295.0, 2157.375], [2287.0, 2178.0], [2303.0, 1704.0], [2247.0, 1786.0], [2263.0, 2245.5], [2271.0, 1601.0], [2279.0, 2022.5], [2183.0, 2520.0], [2191.0, 2043.0], [2199.0, 2160.6666666666665], [2207.0, 1769.0], [2231.0, 2443.0], [2223.0, 2677.0], [2215.0, 1624.0], [2415.0, 1348.5], [2407.0, 1326.0], [2383.0, 1389.0], [2391.0, 1217.0], [2399.0, 1925.0], [2423.0, 1065.0], [2335.0, 1531.5], [2327.0, 1425.0], [2319.0, 1579.0], [2367.0, 1323.0], [2359.0, 1608.0], [2351.0, 1269.0], [2343.0, 1548.0], [2447.0, 1067.0], [2463.0, 1549.0], [2455.0, 1361.3333333333333], [2479.0, 1216.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}, {"data": [[1251.4652000000024, 4046.299200000001]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18727.866666666665, "minX": 1.75558734E12, "maxY": 241038.66666666666, "series": [{"data": [[1.75558734E12, 241038.66666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75558734E12, 18727.866666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558734E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4046.299200000001, "minX": 1.75558734E12, "maxY": 4046.299200000001, "series": [{"data": [[1.75558734E12, 4046.299200000001]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558734E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4028.8719999999976, "minX": 1.75558734E12, "maxY": 4028.8719999999976, "series": [{"data": [[1.75558734E12, 4028.8719999999976]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558734E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3904.4424000000017, "minX": 1.75558734E12, "maxY": 3904.4424000000017, "series": [{"data": [[1.75558734E12, 3904.4424000000017]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558734E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 851.0, "minX": 1.75558734E12, "maxY": 6660.0, "series": [{"data": [[1.75558734E12, 6660.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75558734E12, 5882.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75558734E12, 6450.52]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75558734E12, 6204.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75558734E12, 851.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75558734E12, 4330.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558734E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1168.5, "minX": 72.0, "maxY": 5954.0, "series": [{"data": [[72.0, 1168.5], [374.0, 1943.0], [753.0, 5065.0], [421.0, 5954.0], [444.0, 2880.5], [436.0, 3889.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[374.0, 1903.0], [753.0, 4616.0], [444.0, 2818.0], [436.0, 4144.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 753.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 72.0, "maxY": 5954.0, "series": [{"data": [[72.0, 1156.0], [374.0, 1943.0], [753.0, 5065.0], [421.0, 5954.0], [444.0, 2880.5], [436.0, 3889.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[374.0, 0.0], [753.0, 0.0], [444.0, 0.0], [436.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 753.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558734E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558734E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558734E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.75558734E12, "maxY": 41.43333333333333, "series": [{"data": [[1.75558734E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.75558734E12, 41.43333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558734E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.75558734E12, "maxY": 41.43333333333333, "series": [{"data": [[1.75558734E12, 0.23333333333333334]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-failure", "isController": false}, {"data": [[1.75558734E12, 41.43333333333333]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558734E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.75558734E12, "maxY": 41.43333333333333, "series": [{"data": [[1.75558734E12, 41.43333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75558734E12, 0.23333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558734E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

