/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1733.0, "minX": 0.0, "maxY": 10529.0, "series": [{"data": [[0.0, 1733.0], [0.1, 1790.0], [0.2, 1860.0], [0.3, 1918.0], [0.4, 1935.0], [0.5, 1950.0], [0.6, 1967.0], [0.7, 1993.0], [0.8, 2005.0], [0.9, 2013.0], [1.0, 2025.0], [1.1, 2066.0], [1.2, 2087.0], [1.3, 2107.0], [1.4, 2116.0], [1.5, 2139.0], [1.6, 2155.0], [1.7, 2164.0], [1.8, 2170.0], [1.9, 2172.0], [2.0, 2185.0], [2.1, 2246.0], [2.2, 2257.0], [2.3, 2267.0], [2.4, 2284.0], [2.5, 2296.0], [2.6, 2302.0], [2.7, 2316.0], [2.8, 2321.0], [2.9, 2339.0], [3.0, 2355.0], [3.1, 2380.0], [3.2, 2386.0], [3.3, 2400.0], [3.4, 2415.0], [3.5, 2437.0], [3.6, 2452.0], [3.7, 2485.0], [3.8, 2488.0], [3.9, 2500.0], [4.0, 2509.0], [4.1, 2563.0], [4.2, 2565.0], [4.3, 2587.0], [4.4, 2590.0], [4.5, 2599.0], [4.6, 2608.0], [4.7, 2618.0], [4.8, 2623.0], [4.9, 2642.0], [5.0, 2652.0], [5.1, 2661.0], [5.2, 2665.0], [5.3, 2679.0], [5.4, 2683.0], [5.5, 2694.0], [5.6, 2701.0], [5.7, 2715.0], [5.8, 2723.0], [5.9, 2736.0], [6.0, 2745.0], [6.1, 2757.0], [6.2, 2760.0], [6.3, 2776.0], [6.4, 2780.0], [6.5, 2785.0], [6.6, 2796.0], [6.7, 2804.0], [6.8, 2811.0], [6.9, 2815.0], [7.0, 2829.0], [7.1, 2837.0], [7.2, 2846.0], [7.3, 2852.0], [7.4, 2868.0], [7.5, 2871.0], [7.6, 2873.0], [7.7, 2885.0], [7.8, 2889.0], [7.9, 2897.0], [8.0, 2900.0], [8.1, 2912.0], [8.2, 2916.0], [8.3, 2920.0], [8.4, 2925.0], [8.5, 2933.0], [8.6, 2940.0], [8.7, 2945.0], [8.8, 2958.0], [8.9, 2960.0], [9.0, 2972.0], [9.1, 2973.0], [9.2, 2984.0], [9.3, 2991.0], [9.4, 3003.0], [9.5, 3006.0], [9.6, 3016.0], [9.7, 3031.0], [9.8, 3043.0], [9.9, 3046.0], [10.0, 3057.0], [10.1, 3061.0], [10.2, 3070.0], [10.3, 3071.0], [10.4, 3078.0], [10.5, 3087.0], [10.6, 3096.0], [10.7, 3100.0], [10.8, 3102.0], [10.9, 3114.0], [11.0, 3116.0], [11.1, 3121.0], [11.2, 3128.0], [11.3, 3131.0], [11.4, 3152.0], [11.5, 3160.0], [11.6, 3168.0], [11.7, 3183.0], [11.8, 3194.0], [11.9, 3203.0], [12.0, 3211.0], [12.1, 3215.0], [12.2, 3224.0], [12.3, 3234.0], [12.4, 3244.0], [12.5, 3251.0], [12.6, 3261.0], [12.7, 3269.0], [12.8, 3275.0], [12.9, 3282.0], [13.0, 3285.0], [13.1, 3292.0], [13.2, 3297.0], [13.3, 3309.0], [13.4, 3319.0], [13.5, 3321.0], [13.6, 3331.0], [13.7, 3338.0], [13.8, 3345.0], [13.9, 3354.0], [14.0, 3363.0], [14.1, 3371.0], [14.2, 3378.0], [14.3, 3381.0], [14.4, 3386.0], [14.5, 3395.0], [14.6, 3418.0], [14.7, 3424.0], [14.8, 3435.0], [14.9, 3455.0], [15.0, 3461.0], [15.1, 3464.0], [15.2, 3465.0], [15.3, 3471.0], [15.4, 3498.0], [15.5, 3505.0], [15.6, 3512.0], [15.7, 3513.0], [15.8, 3520.0], [15.9, 3526.0], [16.0, 3533.0], [16.1, 3535.0], [16.2, 3547.0], [16.3, 3558.0], [16.4, 3573.0], [16.5, 3574.0], [16.6, 3578.0], [16.7, 3579.0], [16.8, 3582.0], [16.9, 3589.0], [17.0, 3603.0], [17.1, 3606.0], [17.2, 3631.0], [17.3, 3634.0], [17.4, 3641.0], [17.5, 3647.0], [17.6, 3658.0], [17.7, 3662.0], [17.8, 3673.0], [17.9, 3680.0], [18.0, 3701.0], [18.1, 3702.0], [18.2, 3705.0], [18.3, 3716.0], [18.4, 3727.0], [18.5, 3728.0], [18.6, 3738.0], [18.7, 3744.0], [18.8, 3749.0], [18.9, 3750.0], [19.0, 3756.0], [19.1, 3759.0], [19.2, 3766.0], [19.3, 3769.0], [19.4, 3771.0], [19.5, 3775.0], [19.6, 3789.0], [19.7, 3790.0], [19.8, 3791.0], [19.9, 3800.0], [20.0, 3810.0], [20.1, 3818.0], [20.2, 3827.0], [20.3, 3830.0], [20.4, 3847.0], [20.5, 3848.0], [20.6, 3857.0], [20.7, 3860.0], [20.8, 3865.0], [20.9, 3880.0], [21.0, 3882.0], [21.1, 3885.0], [21.2, 3892.0], [21.3, 3893.0], [21.4, 3903.0], [21.5, 3918.0], [21.6, 3926.0], [21.7, 3931.0], [21.8, 3949.0], [21.9, 3963.0], [22.0, 3968.0], [22.1, 3971.0], [22.2, 3985.0], [22.3, 3988.0], [22.4, 4006.0], [22.5, 4020.0], [22.6, 4028.0], [22.7, 4033.0], [22.8, 4040.0], [22.9, 4052.0], [23.0, 4057.0], [23.1, 4063.0], [23.2, 4069.0], [23.3, 4076.0], [23.4, 4092.0], [23.5, 4098.0], [23.6, 4104.0], [23.7, 4112.0], [23.8, 4126.0], [23.9, 4137.0], [24.0, 4143.0], [24.1, 4147.0], [24.2, 4155.0], [24.3, 4155.0], [24.4, 4162.0], [24.5, 4169.0], [24.6, 4183.0], [24.7, 4186.0], [24.8, 4190.0], [24.9, 4201.0], [25.0, 4226.0], [25.1, 4229.0], [25.2, 4239.0], [25.3, 4248.0], [25.4, 4260.0], [25.5, 4269.0], [25.6, 4278.0], [25.7, 4278.0], [25.8, 4287.0], [25.9, 4296.0], [26.0, 4304.0], [26.1, 4307.0], [26.2, 4319.0], [26.3, 4324.0], [26.4, 4331.0], [26.5, 4336.0], [26.6, 4345.0], [26.7, 4350.0], [26.8, 4353.0], [26.9, 4357.0], [27.0, 4371.0], [27.1, 4377.0], [27.2, 4384.0], [27.3, 4392.0], [27.4, 4405.0], [27.5, 4415.0], [27.6, 4422.0], [27.7, 4424.0], [27.8, 4435.0], [27.9, 4438.0], [28.0, 4462.0], [28.1, 4464.0], [28.2, 4469.0], [28.3, 4471.0], [28.4, 4473.0], [28.5, 4479.0], [28.6, 4486.0], [28.7, 4493.0], [28.8, 4517.0], [28.9, 4526.0], [29.0, 4537.0], [29.1, 4547.0], [29.2, 4553.0], [29.3, 4555.0], [29.4, 4563.0], [29.5, 4570.0], [29.6, 4577.0], [29.7, 4582.0], [29.8, 4592.0], [29.9, 4606.0], [30.0, 4613.0], [30.1, 4616.0], [30.2, 4619.0], [30.3, 4621.0], [30.4, 4637.0], [30.5, 4639.0], [30.6, 4644.0], [30.7, 4646.0], [30.8, 4666.0], [30.9, 4668.0], [31.0, 4670.0], [31.1, 4681.0], [31.2, 4686.0], [31.3, 4687.0], [31.4, 4690.0], [31.5, 4696.0], [31.6, 4703.0], [31.7, 4713.0], [31.8, 4721.0], [31.9, 4726.0], [32.0, 4731.0], [32.1, 4735.0], [32.2, 4758.0], [32.3, 4761.0], [32.4, 4775.0], [32.5, 4788.0], [32.6, 4792.0], [32.7, 4799.0], [32.8, 4808.0], [32.9, 4812.0], [33.0, 4820.0], [33.1, 4821.0], [33.2, 4827.0], [33.3, 4838.0], [33.4, 4845.0], [33.5, 4863.0], [33.6, 4871.0], [33.7, 4877.0], [33.8, 4900.0], [33.9, 4911.0], [34.0, 4923.0], [34.1, 4931.0], [34.2, 4946.0], [34.3, 4949.0], [34.4, 4953.0], [34.5, 4964.0], [34.6, 4970.0], [34.7, 4975.0], [34.8, 4980.0], [34.9, 4984.0], [35.0, 4991.0], [35.1, 4997.0], [35.2, 5002.0], [35.3, 5004.0], [35.4, 5011.0], [35.5, 5019.0], [35.6, 5028.0], [35.7, 5037.0], [35.8, 5053.0], [35.9, 5055.0], [36.0, 5071.0], [36.1, 5076.0], [36.2, 5083.0], [36.3, 5087.0], [36.4, 5105.0], [36.5, 5107.0], [36.6, 5117.0], [36.7, 5124.0], [36.8, 5150.0], [36.9, 5157.0], [37.0, 5165.0], [37.1, 5167.0], [37.2, 5197.0], [37.3, 5218.0], [37.4, 5234.0], [37.5, 5238.0], [37.6, 5259.0], [37.7, 5265.0], [37.8, 5267.0], [37.9, 5273.0], [38.0, 5284.0], [38.1, 5291.0], [38.2, 5303.0], [38.3, 5310.0], [38.4, 5320.0], [38.5, 5323.0], [38.6, 5329.0], [38.7, 5332.0], [38.8, 5344.0], [38.9, 5360.0], [39.0, 5380.0], [39.1, 5381.0], [39.2, 5388.0], [39.3, 5395.0], [39.4, 5411.0], [39.5, 5416.0], [39.6, 5418.0], [39.7, 5419.0], [39.8, 5422.0], [39.9, 5425.0], [40.0, 5429.0], [40.1, 5432.0], [40.2, 5434.0], [40.3, 5435.0], [40.4, 5443.0], [40.5, 5445.0], [40.6, 5468.0], [40.7, 5469.0], [40.8, 5492.0], [40.9, 5506.0], [41.0, 5511.0], [41.1, 5520.0], [41.2, 5547.0], [41.3, 5553.0], [41.4, 5557.0], [41.5, 5560.0], [41.6, 5565.0], [41.7, 5570.0], [41.8, 5578.0], [41.9, 5591.0], [42.0, 5606.0], [42.1, 5618.0], [42.2, 5623.0], [42.3, 5628.0], [42.4, 5640.0], [42.5, 5645.0], [42.6, 5653.0], [42.7, 5670.0], [42.8, 5685.0], [42.9, 5691.0], [43.0, 5708.0], [43.1, 5722.0], [43.2, 5730.0], [43.3, 5741.0], [43.4, 5747.0], [43.5, 5752.0], [43.6, 5766.0], [43.7, 5773.0], [43.8, 5781.0], [43.9, 5788.0], [44.0, 5802.0], [44.1, 5824.0], [44.2, 5831.0], [44.3, 5847.0], [44.4, 5853.0], [44.5, 5859.0], [44.6, 5862.0], [44.7, 5865.0], [44.8, 5869.0], [44.9, 5877.0], [45.0, 5897.0], [45.1, 5899.0], [45.2, 5907.0], [45.3, 5928.0], [45.4, 5934.0], [45.5, 5938.0], [45.6, 5950.0], [45.7, 5955.0], [45.8, 5964.0], [45.9, 5972.0], [46.0, 5985.0], [46.1, 5993.0], [46.2, 6000.0], [46.3, 6007.0], [46.4, 6013.0], [46.5, 6016.0], [46.6, 6023.0], [46.7, 6027.0], [46.8, 6035.0], [46.9, 6043.0], [47.0, 6049.0], [47.1, 6050.0], [47.2, 6056.0], [47.3, 6061.0], [47.4, 6066.0], [47.5, 6071.0], [47.6, 6080.0], [47.7, 6092.0], [47.8, 6102.0], [47.9, 6103.0], [48.0, 6110.0], [48.1, 6112.0], [48.2, 6118.0], [48.3, 6122.0], [48.4, 6127.0], [48.5, 6132.0], [48.6, 6133.0], [48.7, 6134.0], [48.8, 6139.0], [48.9, 6140.0], [49.0, 6147.0], [49.1, 6152.0], [49.2, 6161.0], [49.3, 6164.0], [49.4, 6170.0], [49.5, 6170.0], [49.6, 6175.0], [49.7, 6178.0], [49.8, 6184.0], [49.9, 6187.0], [50.0, 6191.0], [50.1, 6196.0], [50.2, 6200.0], [50.3, 6204.0], [50.4, 6223.0], [50.5, 6225.0], [50.6, 6228.0], [50.7, 6231.0], [50.8, 6233.0], [50.9, 6244.0], [51.0, 6250.0], [51.1, 6256.0], [51.2, 6264.0], [51.3, 6266.0], [51.4, 6277.0], [51.5, 6278.0], [51.6, 6279.0], [51.7, 6287.0], [51.8, 6291.0], [51.9, 6291.0], [52.0, 6301.0], [52.1, 6302.0], [52.2, 6306.0], [52.3, 6310.0], [52.4, 6323.0], [52.5, 6331.0], [52.6, 6343.0], [52.7, 6346.0], [52.8, 6352.0], [52.9, 6367.0], [53.0, 6378.0], [53.1, 6380.0], [53.2, 6389.0], [53.3, 6393.0], [53.4, 6414.0], [53.5, 6417.0], [53.6, 6421.0], [53.7, 6425.0], [53.8, 6431.0], [53.9, 6432.0], [54.0, 6438.0], [54.1, 6450.0], [54.2, 6457.0], [54.3, 6459.0], [54.4, 6466.0], [54.5, 6468.0], [54.6, 6483.0], [54.7, 6488.0], [54.8, 6494.0], [54.9, 6502.0], [55.0, 6505.0], [55.1, 6538.0], [55.2, 6550.0], [55.3, 6559.0], [55.4, 6567.0], [55.5, 6570.0], [55.6, 6584.0], [55.7, 6606.0], [55.8, 6613.0], [55.9, 6618.0], [56.0, 6623.0], [56.1, 6627.0], [56.2, 6639.0], [56.3, 6647.0], [56.4, 6649.0], [56.5, 6657.0], [56.6, 6659.0], [56.7, 6661.0], [56.8, 6672.0], [56.9, 6680.0], [57.0, 6691.0], [57.1, 6694.0], [57.2, 6698.0], [57.3, 6704.0], [57.4, 6722.0], [57.5, 6727.0], [57.6, 6737.0], [57.7, 6745.0], [57.8, 6757.0], [57.9, 6761.0], [58.0, 6770.0], [58.1, 6783.0], [58.2, 6798.0], [58.3, 6800.0], [58.4, 6811.0], [58.5, 6826.0], [58.6, 6832.0], [58.7, 6839.0], [58.8, 6840.0], [58.9, 6843.0], [59.0, 6845.0], [59.1, 6851.0], [59.2, 6854.0], [59.3, 6854.0], [59.4, 6867.0], [59.5, 6874.0], [59.6, 6879.0], [59.7, 6884.0], [59.8, 6888.0], [59.9, 6890.0], [60.0, 6896.0], [60.1, 6897.0], [60.2, 6898.0], [60.3, 6901.0], [60.4, 6908.0], [60.5, 6912.0], [60.6, 6923.0], [60.7, 6925.0], [60.8, 6931.0], [60.9, 6935.0], [61.0, 6938.0], [61.1, 6943.0], [61.2, 6949.0], [61.3, 6963.0], [61.4, 6975.0], [61.5, 6977.0], [61.6, 6985.0], [61.7, 6988.0], [61.8, 7003.0], [61.9, 7008.0], [62.0, 7019.0], [62.1, 7022.0], [62.2, 7024.0], [62.3, 7031.0], [62.4, 7041.0], [62.5, 7042.0], [62.6, 7051.0], [62.7, 7052.0], [62.8, 7064.0], [62.9, 7069.0], [63.0, 7079.0], [63.1, 7081.0], [63.2, 7097.0], [63.3, 7102.0], [63.4, 7113.0], [63.5, 7126.0], [63.6, 7143.0], [63.7, 7146.0], [63.8, 7149.0], [63.9, 7161.0], [64.0, 7168.0], [64.1, 7179.0], [64.2, 7203.0], [64.3, 7209.0], [64.4, 7216.0], [64.5, 7227.0], [64.6, 7249.0], [64.7, 7257.0], [64.8, 7262.0], [64.9, 7267.0], [65.0, 7270.0], [65.1, 7276.0], [65.2, 7284.0], [65.3, 7288.0], [65.4, 7297.0], [65.5, 7300.0], [65.6, 7307.0], [65.7, 7323.0], [65.8, 7335.0], [65.9, 7342.0], [66.0, 7353.0], [66.1, 7356.0], [66.2, 7359.0], [66.3, 7367.0], [66.4, 7370.0], [66.5, 7373.0], [66.6, 7380.0], [66.7, 7389.0], [66.8, 7395.0], [66.9, 7399.0], [67.0, 7408.0], [67.1, 7409.0], [67.2, 7415.0], [67.3, 7418.0], [67.4, 7421.0], [67.5, 7423.0], [67.6, 7428.0], [67.7, 7431.0], [67.8, 7441.0], [67.9, 7442.0], [68.0, 7445.0], [68.1, 7453.0], [68.2, 7456.0], [68.3, 7457.0], [68.4, 7464.0], [68.5, 7466.0], [68.6, 7473.0], [68.7, 7478.0], [68.8, 7482.0], [68.9, 7492.0], [69.0, 7494.0], [69.1, 7498.0], [69.2, 7502.0], [69.3, 7503.0], [69.4, 7507.0], [69.5, 7508.0], [69.6, 7513.0], [69.7, 7525.0], [69.8, 7532.0], [69.9, 7541.0], [70.0, 7543.0], [70.1, 7556.0], [70.2, 7564.0], [70.3, 7580.0], [70.4, 7582.0], [70.5, 7583.0], [70.6, 7593.0], [70.7, 7594.0], [70.8, 7597.0], [70.9, 7597.0], [71.0, 7603.0], [71.1, 7606.0], [71.2, 7632.0], [71.3, 7643.0], [71.4, 7650.0], [71.5, 7654.0], [71.6, 7666.0], [71.7, 7667.0], [71.8, 7676.0], [71.9, 7691.0], [72.0, 7700.0], [72.1, 7709.0], [72.2, 7712.0], [72.3, 7716.0], [72.4, 7725.0], [72.5, 7726.0], [72.6, 7744.0], [72.7, 7755.0], [72.8, 7760.0], [72.9, 7770.0], [73.0, 7774.0], [73.1, 7780.0], [73.2, 7788.0], [73.3, 7796.0], [73.4, 7799.0], [73.5, 7813.0], [73.6, 7827.0], [73.7, 7830.0], [73.8, 7839.0], [73.9, 7840.0], [74.0, 7846.0], [74.1, 7847.0], [74.2, 7863.0], [74.3, 7867.0], [74.4, 7871.0], [74.5, 7880.0], [74.6, 7885.0], [74.7, 7891.0], [74.8, 7894.0], [74.9, 7901.0], [75.0, 7927.0], [75.1, 7936.0], [75.2, 7944.0], [75.3, 7952.0], [75.4, 7960.0], [75.5, 7971.0], [75.6, 7973.0], [75.7, 7990.0], [75.8, 7998.0], [75.9, 8007.0], [76.0, 8012.0], [76.1, 8024.0], [76.2, 8026.0], [76.3, 8033.0], [76.4, 8047.0], [76.5, 8055.0], [76.6, 8057.0], [76.7, 8060.0], [76.8, 8060.0], [76.9, 8063.0], [77.0, 8065.0], [77.1, 8069.0], [77.2, 8070.0], [77.3, 8080.0], [77.4, 8083.0], [77.5, 8097.0], [77.6, 8100.0], [77.7, 8103.0], [77.8, 8105.0], [77.9, 8107.0], [78.0, 8108.0], [78.1, 8111.0], [78.2, 8113.0], [78.3, 8121.0], [78.4, 8126.0], [78.5, 8131.0], [78.6, 8135.0], [78.7, 8141.0], [78.8, 8144.0], [78.9, 8146.0], [79.0, 8148.0], [79.1, 8154.0], [79.2, 8159.0], [79.3, 8160.0], [79.4, 8164.0], [79.5, 8166.0], [79.6, 8170.0], [79.7, 8172.0], [79.8, 8181.0], [79.9, 8184.0], [80.0, 8187.0], [80.1, 8189.0], [80.2, 8193.0], [80.3, 8196.0], [80.4, 8211.0], [80.5, 8215.0], [80.6, 8223.0], [80.7, 8225.0], [80.8, 8231.0], [80.9, 8238.0], [81.0, 8244.0], [81.1, 8245.0], [81.2, 8255.0], [81.3, 8262.0], [81.4, 8265.0], [81.5, 8273.0], [81.6, 8281.0], [81.7, 8295.0], [81.8, 8309.0], [81.9, 8316.0], [82.0, 8326.0], [82.1, 8336.0], [82.2, 8348.0], [82.3, 8357.0], [82.4, 8372.0], [82.5, 8380.0], [82.6, 8388.0], [82.7, 8401.0], [82.8, 8403.0], [82.9, 8406.0], [83.0, 8408.0], [83.1, 8411.0], [83.2, 8414.0], [83.3, 8416.0], [83.4, 8418.0], [83.5, 8426.0], [83.6, 8430.0], [83.7, 8442.0], [83.8, 8456.0], [83.9, 8457.0], [84.0, 8463.0], [84.1, 8482.0], [84.2, 8487.0], [84.3, 8496.0], [84.4, 8500.0], [84.5, 8509.0], [84.6, 8518.0], [84.7, 8542.0], [84.8, 8546.0], [84.9, 8555.0], [85.0, 8563.0], [85.1, 8576.0], [85.2, 8580.0], [85.3, 8593.0], [85.4, 8596.0], [85.5, 8603.0], [85.6, 8610.0], [85.7, 8612.0], [85.8, 8626.0], [85.9, 8654.0], [86.0, 8664.0], [86.1, 8675.0], [86.2, 8679.0], [86.3, 8693.0], [86.4, 8698.0], [86.5, 8702.0], [86.6, 8706.0], [86.7, 8719.0], [86.8, 8723.0], [86.9, 8740.0], [87.0, 8749.0], [87.1, 8754.0], [87.2, 8759.0], [87.3, 8762.0], [87.4, 8769.0], [87.5, 8779.0], [87.6, 8787.0], [87.7, 8818.0], [87.8, 8830.0], [87.9, 8844.0], [88.0, 8850.0], [88.1, 8853.0], [88.2, 8855.0], [88.3, 8865.0], [88.4, 8868.0], [88.5, 8871.0], [88.6, 8878.0], [88.7, 8883.0], [88.8, 8885.0], [88.9, 8893.0], [89.0, 8896.0], [89.1, 8900.0], [89.2, 8904.0], [89.3, 8909.0], [89.4, 8912.0], [89.5, 8914.0], [89.6, 8920.0], [89.7, 8929.0], [89.8, 8933.0], [89.9, 8962.0], [90.0, 8979.0], [90.1, 8991.0], [90.2, 9001.0], [90.3, 9033.0], [90.4, 9042.0], [90.5, 9048.0], [90.6, 9068.0], [90.7, 9093.0], [90.8, 9110.0], [90.9, 9123.0], [91.0, 9131.0], [91.1, 9141.0], [91.2, 9146.0], [91.3, 9147.0], [91.4, 9153.0], [91.5, 9178.0], [91.6, 9240.0], [91.7, 9261.0], [91.8, 9271.0], [91.9, 9298.0], [92.0, 9302.0], [92.1, 9340.0], [92.2, 9352.0], [92.3, 9397.0], [92.4, 9403.0], [92.5, 9424.0], [92.6, 9428.0], [92.7, 9446.0], [92.8, 9478.0], [92.9, 9514.0], [93.0, 9533.0], [93.1, 9545.0], [93.2, 9550.0], [93.3, 9554.0], [93.4, 9555.0], [93.5, 9567.0], [93.6, 9589.0], [93.7, 9667.0], [93.8, 9688.0], [93.9, 9712.0], [94.0, 9733.0], [94.1, 9763.0], [94.2, 9769.0], [94.3, 9776.0], [94.4, 9792.0], [94.5, 9815.0], [94.6, 9826.0], [94.7, 9850.0], [94.8, 9866.0], [94.9, 9887.0], [95.0, 9895.0], [95.1, 9896.0], [95.2, 9899.0], [95.3, 9913.0], [95.4, 9916.0], [95.5, 9923.0], [95.6, 9927.0], [95.7, 9942.0], [95.8, 9943.0], [95.9, 9950.0], [96.0, 9951.0], [96.1, 9954.0], [96.2, 9972.0], [96.3, 9972.0], [96.4, 9976.0], [96.5, 9981.0], [96.6, 9987.0], [96.7, 9997.0], [96.8, 9999.0], [96.9, 10011.0], [97.0, 10016.0], [97.1, 10022.0], [97.2, 10029.0], [97.3, 10040.0], [97.4, 10049.0], [97.5, 10053.0], [97.6, 10064.0], [97.7, 10068.0], [97.8, 10074.0], [97.9, 10081.0], [98.0, 10084.0], [98.1, 10105.0], [98.2, 10107.0], [98.3, 10124.0], [98.4, 10142.0], [98.5, 10159.0], [98.6, 10181.0], [98.7, 10185.0], [98.8, 10197.0], [98.9, 10199.0], [99.0, 10206.0], [99.1, 10228.0], [99.2, 10249.0], [99.3, 10261.0], [99.4, 10264.0], [99.5, 10289.0], [99.6, 10328.0], [99.7, 10355.0], [99.8, 10384.0], [99.9, 10419.0], [100.0, 10529.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1700.0, "maxY": 70.0, "series": [{"data": [[1700.0, 3.0], [1800.0, 3.0], [1900.0, 13.0], [2000.0, 11.0], [2100.0, 20.0], [2200.0, 14.0], [2300.0, 18.0], [2400.0, 15.0], [2500.0, 16.0], [2600.0, 26.0], [2700.0, 26.0], [2800.0, 34.0], [2900.0, 36.0], [3000.0, 32.0], [3100.0, 30.0], [3200.0, 34.0], [3300.0, 32.0], [3400.0, 23.0], [3500.0, 38.0], [3600.0, 25.0], [3700.0, 48.0], [3800.0, 37.0], [3900.0, 26.0], [4000.0, 28.0], [4100.0, 34.0], [4200.0, 27.0], [4300.0, 36.0], [4400.0, 33.0], [4500.0, 28.0], [4600.0, 42.0], [4700.0, 30.0], [4800.0, 27.0], [4900.0, 33.0], [5000.0, 31.0], [5100.0, 22.0], [5200.0, 24.0], [5300.0, 29.0], [5400.0, 38.0], [5500.0, 27.0], [5600.0, 25.0], [5700.0, 24.0], [5800.0, 30.0], [6000.0, 39.0], [5900.0, 27.0], [6100.0, 61.0], [6200.0, 44.0], [6300.0, 35.0], [6400.0, 38.0], [6500.0, 20.0], [6600.0, 39.0], [6700.0, 26.0], [6800.0, 49.0], [6900.0, 37.0], [7000.0, 39.0], [7100.0, 23.0], [7200.0, 32.0], [7300.0, 36.0], [7400.0, 55.0], [7500.0, 46.0], [7600.0, 26.0], [7700.0, 36.0], [7800.0, 36.0], [7900.0, 23.0], [8000.0, 43.0], [8100.0, 70.0], [8200.0, 36.0], [8300.0, 23.0], [8400.0, 42.0], [8500.0, 26.0], [8600.0, 27.0], [8700.0, 28.0], [8800.0, 37.0], [9100.0, 19.0], [9200.0, 10.0], [9000.0, 15.0], [8900.0, 27.0], [9500.0, 18.0], [9300.0, 10.0], [9700.0, 14.0], [9400.0, 14.0], [9600.0, 6.0], [9800.0, 20.0], [9900.0, 40.0], [10000.0, 32.0], [10100.0, 21.0], [10200.0, 15.0], [10300.0, 9.0], [10400.0, 2.0], [10500.0, 1.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.0583999999983, "minX": 1.75558632E12, "maxY": 1251.0583999999983, "series": [{"data": [[1.75558632E12, 1251.0583999999983]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558632E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1776.0, "minX": 1.0, "maxY": 10529.0, "series": [{"data": [[2.0, 10529.0], [3.0, 9987.0], [4.0, 10159.0], [5.0, 10355.0], [6.0, 9270.0], [7.0, 9284.0], [8.0, 10236.0], [9.0, 9464.0], [11.0, 9729.0], [12.0, 9261.0], [14.0, 9570.0], [15.0, 10484.0], [16.0, 10123.0], [17.0, 10419.0], [18.0, 10289.0], [19.0, 9245.0], [20.0, 10261.0], [21.0, 9343.0], [23.0, 9800.5], [24.0, 9866.0], [25.0, 9550.0], [26.0, 10022.0], [27.0, 10216.0], [28.0, 9137.0], [29.0, 10209.0], [31.0, 10020.0], [33.0, 9947.0], [32.0, 10384.0], [35.0, 10346.0], [34.0, 10197.0], [37.0, 10042.5], [39.0, 10186.0], [38.0, 10335.0], [41.0, 9141.0], [40.0, 10397.0], [43.0, 10384.0], [42.0, 9812.0], [45.0, 9177.0], [44.0, 10197.0], [46.0, 9924.0], [49.0, 9174.0], [48.0, 9663.5], [51.0, 10105.0], [50.0, 9110.0], [53.0, 10256.0], [54.0, 9244.0], [59.0, 9240.0], [58.0, 10114.0], [61.0, 10199.0], [60.0, 9769.0], [63.0, 10142.0], [62.0, 9088.0], [66.0, 9219.5], [64.0, 9096.0], [69.0, 9763.0], [68.0, 9622.5], [74.0, 9942.0], [73.0, 10007.0], [72.0, 9675.0], [79.0, 9885.0], [77.0, 10267.0], [76.0, 9068.0], [83.0, 9450.0], [82.0, 10276.0], [87.0, 9567.0], [86.0, 10065.0], [85.0, 9042.0], [84.0, 10274.0], [91.0, 9050.0], [90.0, 10264.0], [89.0, 9619.5], [93.0, 10249.0], [92.0, 10260.0], [99.0, 9495.0], [98.0, 10105.0], [97.0, 9236.0], [96.0, 9441.333333333334], [103.0, 9131.0], [102.0, 10184.0], [101.0, 9685.0], [100.0, 9895.0], [107.0, 9553.5], [105.0, 10262.0], [104.0, 9135.0], [111.0, 10043.0], [110.0, 9024.0], [109.0, 9564.0], [115.0, 10185.0], [114.0, 10022.0], [113.0, 9123.0], [112.0, 9121.0], [119.0, 9997.0], [118.0, 9001.0], [117.0, 10102.5], [123.0, 9860.0], [122.0, 10039.5], [120.0, 9492.0], [127.0, 9992.0], [124.0, 8962.0], [135.0, 10032.0], [134.0, 9478.0], [133.0, 9610.0], [132.0, 9754.0], [131.0, 8981.0], [130.0, 9998.0], [129.0, 8975.0], [143.0, 9804.5], [141.0, 10012.0], [140.0, 8958.0], [139.0, 9826.0], [138.0, 8878.0], [137.0, 8885.0], [136.0, 8949.0], [151.0, 10062.5], [149.0, 8909.0], [148.0, 9472.0], [146.0, 9921.0], [145.0, 10049.0], [144.0, 8914.0], [156.0, 10082.0], [155.0, 9596.333333333334], [153.0, 9042.0], [167.0, 9600.0], [166.0, 9963.5], [165.0, 9418.0], [163.0, 9832.5], [161.0, 8901.0], [160.0, 9649.0], [175.0, 9636.0], [173.0, 9242.0], [171.0, 9416.0], [170.0, 9769.0], [169.0, 9432.0], [183.0, 9976.0], [182.0, 9992.0], [181.0, 9601.666666666666], [178.0, 9754.0], [177.0, 8898.0], [191.0, 9731.5], [189.0, 9972.0], [188.0, 8906.0], [187.0, 10131.0], [186.0, 9972.0], [185.0, 8922.0], [184.0, 9933.0], [198.0, 9153.666666666666], [196.0, 8901.5], [193.0, 9495.0], [207.0, 8868.0], [205.0, 9148.5], [203.0, 8874.0], [202.0, 9920.0], [200.0, 9254.5], [215.0, 8883.0], [214.0, 9676.5], [212.0, 9219.5], [210.0, 9438.0], [208.0, 9537.0], [223.0, 9401.0], [221.0, 8897.0], [220.0, 9740.25], [219.0, 8868.0], [230.0, 8847.0], [229.0, 9976.0], [228.0, 9943.0], [227.0, 9403.5], [226.0, 10049.0], [224.0, 9902.5], [239.0, 9468.5], [235.0, 9397.0], [233.0, 9210.5], [232.0, 9772.0], [244.0, 9914.0], [243.0, 9266.0], [240.0, 9394.0], [255.0, 8859.0], [254.0, 10073.0], [252.0, 9895.0], [250.0, 8879.0], [249.0, 9733.0], [259.0, 9920.0], [270.0, 10084.0], [269.0, 9497.333333333334], [266.0, 9537.0], [265.0, 9470.5], [263.0, 9972.5], [261.0, 8850.0], [260.0, 8868.0], [258.0, 8855.0], [257.0, 9942.0], [286.0, 8950.333333333334], [283.0, 9112.5], [281.0, 8929.0], [280.0, 9767.0], [279.0, 8869.0], [273.0, 8835.0], [272.0, 8858.0], [277.0, 9689.0], [276.0, 8830.0], [275.0, 10040.0], [274.0, 8818.0], [290.0, 8762.0], [300.0, 9555.0], [297.0, 8739.0], [295.0, 8787.0], [294.0, 8720.0], [293.0, 9053.0], [291.0, 9720.0], [289.0, 9301.0], [288.0, 9443.0], [318.0, 8700.0], [319.0, 8704.0], [317.0, 8729.0], [307.0, 8751.0], [306.0, 8755.0], [305.0, 8989.0], [304.0, 8861.666666666666], [315.0, 8850.0], [314.0, 8709.5], [312.0, 8723.0], [311.0, 8748.0], [310.0, 8762.0], [309.0, 9815.0], [308.0, 9427.0], [334.0, 9318.0], [335.0, 8636.0], [333.0, 8678.0], [332.0, 8687.0], [331.0, 8693.0], [330.0, 9340.0], [329.0, 8682.0], [326.0, 9352.0], [321.0, 9712.0], [320.0, 8739.0], [323.0, 9756.0], [322.0, 8707.0], [325.0, 8675.0], [324.0, 9361.0], [350.0, 8606.5], [351.0, 8603.0], [348.0, 8595.0], [338.0, 8660.0], [337.0, 8664.0], [336.0, 8774.0], [347.0, 9588.0], [346.0, 8626.0], [345.0, 8878.5], [343.0, 8610.0], [342.0, 8588.0], [341.0, 9298.0], [340.0, 8880.5], [365.0, 8487.0], [366.0, 8498.0], [364.0, 8795.0], [355.0, 8576.0], [354.0, 8580.0], [353.0, 8568.0], [352.0, 8528.0], [362.0, 8529.0], [361.0, 8543.0], [360.0, 8562.0], [359.0, 8555.0], [358.0, 8550.0], [357.0, 8563.5], [382.0, 8434.0], [383.0, 8415.0], [380.0, 8460.0], [371.0, 8500.0], [370.0, 8521.0], [368.0, 8513.5], [379.0, 8447.0], [378.0, 8437.0], [377.0, 8501.0], [376.0, 8463.0], [375.0, 8456.0], [374.0, 8482.0], [373.0, 8457.0], [372.0, 8511.0], [398.0, 8261.0], [399.0, 8225.0], [397.0, 8236.0], [396.0, 8347.0], [395.0, 8356.0], [394.0, 8372.0], [393.0, 8348.0], [392.0, 8387.0], [391.0, 8402.0], [385.0, 8418.0], [384.0, 8403.0], [387.0, 8408.0], [386.0, 8425.0], [390.0, 8426.0], [389.0, 8412.0], [414.0, 8164.0], [415.0, 8188.0], [413.0, 8155.0], [412.0, 8181.0], [410.0, 8195.0], [409.0, 8171.0], [408.0, 8215.0], [407.0, 8729.0], [401.0, 8223.0], [400.0, 8223.0], [403.0, 8187.0], [402.0, 8181.0], [405.0, 8217.0], [404.0, 8166.0], [429.0, 8109.0], [430.0, 8102.0], [428.0, 8117.0], [426.0, 8148.0], [425.0, 8135.0], [424.0, 8146.0], [421.0, 8129.0], [420.0, 8148.0], [418.0, 8147.0], [417.0, 8147.5], [446.0, 8153.5], [447.0, 7963.0], [444.0, 8047.0], [434.0, 8102.0], [433.0, 8100.0], [432.0, 8110.5], [443.0, 8053.0], [442.0, 8057.0], [441.0, 9152.0], [440.0, 8072.0], [438.0, 8057.0], [437.0, 8066.0], [436.0, 8096.5], [462.0, 7664.0], [463.0, 7847.0], [461.0, 8192.0], [460.0, 7712.0], [459.0, 7712.0], [458.0, 7729.0], [456.0, 8250.0], [455.0, 7774.0], [448.0, 7971.0], [451.0, 8553.5], [449.0, 7973.0], [454.0, 7770.0], [452.0, 8336.0], [477.0, 7534.0], [479.0, 7941.0], [476.0, 8573.0], [475.0, 7541.0], [474.0, 7563.0], [472.0, 8191.5], [470.0, 8478.0], [469.0, 7595.5], [467.0, 7597.0], [466.0, 7606.0], [465.0, 7597.0], [464.0, 7645.0], [494.0, 8172.0], [495.0, 7462.0], [493.0, 8130.5], [491.0, 7481.0], [489.0, 7494.0], [488.0, 7504.5], [486.0, 7820.666666666667], [480.0, 7660.5], [483.0, 8754.0], [482.0, 7503.0], [481.0, 7504.0], [499.0, 7453.0], [509.0, 8706.0], [511.0, 7563.5], [508.0, 7866.5], [506.0, 7441.0], [504.0, 7426.666666666667], [501.0, 7950.0], [500.0, 7423.0], [498.0, 8506.5], [496.0, 7456.0], [536.0, 8612.0], [540.0, 8408.0], [528.0, 7354.0], [538.0, 8292.5], [514.0, 7398.0], [516.0, 7393.0], [518.0, 8665.0], [526.0, 7880.0], [524.0, 8103.0], [522.0, 7370.0], [520.0, 8106.0], [534.0, 7542.0], [530.0, 8482.0], [570.0, 8297.0], [574.0, 8267.0], [560.0, 7725.0], [572.0, 7588.0], [544.0, 8610.5], [550.0, 8210.5], [556.0, 7596.0], [554.0, 7216.0], [552.0, 8404.0], [564.0, 8033.0], [562.0, 8366.0], [578.0, 7581.0], [604.0, 7659.0], [606.0, 8307.5], [602.0, 7711.4], [596.0, 7907.0], [592.0, 7788.0], [590.0, 8295.0], [580.0, 7491.5], [582.0, 7667.0], [588.0, 8405.0], [586.0, 7884.0], [584.0, 8121.0], [634.0, 7303.0], [636.0, 8340.5], [628.0, 8243.0], [638.0, 7825.0], [610.0, 7593.0], [614.0, 8245.0], [618.0, 8325.0], [616.0, 7590.0], [630.0, 7080.0], [626.0, 7813.0], [670.0, 8185.0], [656.0, 7284.0], [664.0, 8070.0], [642.0, 7983.5], [648.0, 7473.0], [658.0, 7464.0], [696.0, 8060.0], [690.0, 7802.0], [676.0, 7064.0], [674.0, 7369.0], [672.0, 7393.5], [688.0, 8111.0], [682.0, 7508.0], [680.0, 8183.0], [728.0, 7722.333333333333], [734.0, 8064.5], [732.0, 7661.0], [730.0, 7904.0], [706.0, 7784.75], [710.0, 7939.666666666667], [718.0, 7958.25], [714.0, 8255.0], [720.0, 8196.0], [762.0, 7616.0], [742.0, 7148.0], [740.0, 7632.0], [756.0, 7404.0], [754.0, 8166.0], [744.0, 7795.0], [774.0, 7726.0], [786.0, 8124.0], [798.0, 7439.5], [792.0, 7602.0], [772.0, 7638.25], [768.0, 7945.25], [780.0, 7811.0], [776.0, 7837.0], [826.0, 7819.5], [830.0, 7927.0], [818.0, 7415.0], [828.0, 8071.0], [824.0, 7972.5], [804.0, 7918.5], [800.0, 6896.0], [814.0, 8144.0], [812.0, 7763.5], [808.0, 8160.0], [820.0, 7667.0], [858.0, 7113.0], [862.0, 7952.0], [850.0, 7511.5], [848.0, 7137.0], [852.0, 7695.0], [856.0, 7529.5], [838.0, 7294.0], [836.0, 7507.0], [834.0, 7920.0], [846.0, 7270.0], [854.0, 6935.0], [892.0, 7716.0], [894.0, 7100.0], [880.0, 7148.0], [884.0, 7492.0], [890.0, 7811.0], [888.0, 7691.0], [870.0, 7286.5], [868.0, 7191.0], [866.0, 7885.0], [864.0, 7378.0], [878.0, 7161.0], [876.0, 7880.0], [874.0, 7839.0], [872.0, 7179.0], [886.0, 7151.0], [898.0, 7666.0], [926.0, 6419.0], [924.0, 6489.0], [922.0, 6494.0], [896.0, 7052.0], [900.0, 7249.0], [902.0, 7770.0], [910.0, 7018.0], [908.0, 7179.5], [906.0, 7770.0], [904.0, 6722.0], [918.0, 6959.666666666667], [912.0, 7300.0], [952.0, 6202.0], [956.0, 7216.0], [958.0, 6639.0], [944.0, 7394.0], [946.0, 6618.0], [954.0, 7280.0], [928.0, 6875.0], [930.0, 7482.0], [932.0, 6571.0], [934.0, 6819.0], [942.0, 6270.0], [940.0, 6587.0], [938.0, 7395.0], [936.0, 7119.5], [950.0, 6505.0], [948.0, 6677.0], [988.0, 6071.0], [990.0, 6053.0], [976.0, 6639.0], [978.0, 6134.0], [986.0, 6102.5], [984.0, 6298.333333333333], [964.0, 6843.0], [962.0, 6808.0], [960.0, 7260.0], [974.0, 6140.0], [972.0, 6895.5], [968.0, 7389.0], [982.0, 6133.333333333333], [1020.0, 7002.0], [1008.0, 7042.0], [1010.0, 5914.0], [1022.0, 6879.0], [1018.0, 6938.0], [1016.0, 6393.0], [998.0, 7126.0], [996.0, 6381.0], [992.0, 6049.0], [1000.0, 7225.0], [1014.0, 7207.0], [1056.0, 6911.0], [1064.0, 6949.0], [1084.0, 6730.0], [1048.0, 6170.0], [1024.0, 7140.0], [1028.0, 6279.0], [1032.0, 6953.0], [1044.0, 6250.0], [1040.0, 7078.0], [1068.0, 6782.5], [1060.0, 6914.0], [1144.0, 6190.0], [1148.0, 6146.0], [1140.0, 6647.0], [1092.0, 6963.5], [1100.0, 6347.0], [1108.0, 6851.0], [1104.0, 6886.0], [1132.0, 6875.5], [1124.0, 6282.333333333333], [1208.0, 6772.0], [1212.0, 6183.0], [1184.0, 6874.0], [1188.0, 6543.0], [1192.0, 6231.0], [1204.0, 6770.0], [1160.0, 6227.0], [1152.0, 6554.0], [1180.0, 6244.0], [1176.0, 6450.0], [1172.0, 6744.0], [1196.0, 6929.5], [1268.0, 6844.0], [1276.0, 6691.0], [1248.0, 6139.0], [1256.0, 6271.666666666667], [1264.0, 6291.0], [1224.0, 6323.0], [1220.0, 6929.5], [1216.0, 6613.0], [1232.0, 5906.0], [1260.0, 5828.0], [1328.0, 5591.0], [1336.0, 5747.0], [1312.0, 6641.0], [1316.0, 5933.5], [1332.0, 5553.0], [1280.0, 6736.0], [1292.0, 6227.0], [1308.0, 5938.0], [1304.0, 6305.5], [1300.0, 6389.5], [1296.0, 6007.0], [1320.0, 6482.0], [1396.0, 5528.0], [1404.0, 5419.0], [1380.0, 5468.0], [1384.0, 6352.0], [1392.0, 5440.0], [1356.0, 6432.0], [1348.0, 6347.0], [1344.0, 5741.0], [1372.0, 6130.0], [1368.0, 6424.0], [1360.0, 5646.0], [1388.0, 5808.0], [1464.0, 5075.5], [1440.0, 6092.0], [1444.0, 5585.666666666667], [1448.0, 5320.0], [1452.0, 5711.0], [1468.0, 5808.0], [1460.0, 5653.0], [1416.0, 5337.0], [1412.0, 6077.0], [1408.0, 5469.0], [1420.0, 5834.0], [1432.0, 5422.0], [1428.0, 5432.0], [1424.0, 5348.333333333333], [1520.0, 5615.0], [1528.0, 4997.0], [1532.0, 5570.0], [1504.0, 5877.0], [1508.0, 5639.0], [1484.0, 5561.0], [1480.0, 5461.5], [1476.0, 5233.0], [1472.0, 5294.666666666667], [1500.0, 5860.0], [1496.0, 5855.0], [1492.0, 5453.5], [1592.0, 5393.0], [1568.0, 4830.5], [1572.0, 4687.0], [1576.0, 5131.5], [1580.0, 4729.0], [1596.0, 4768.0], [1588.0, 5432.0], [1584.0, 5559.0], [1544.0, 4900.0], [1548.0, 4808.0], [1564.0, 5280.0], [1556.0, 5136.5], [1652.0, 4639.0], [1656.0, 5395.0], [1644.0, 4353.0], [1660.0, 4974.666666666667], [1648.0, 5037.0], [1604.0, 4992.5], [1612.0, 4924.0], [1624.0, 4670.0], [1620.0, 5310.0], [1616.0, 4646.0], [1716.0, 4424.0], [1704.0, 5026.0], [1724.0, 4578.0], [1696.0, 5107.0], [1708.0, 4646.0], [1676.0, 4990.0], [1672.0, 5051.0], [1692.0, 4871.0], [1688.0, 5267.0], [1684.0, 4518.0], [1784.0, 4027.0], [1764.0, 4453.0], [1768.0, 4236.0], [1772.0, 4148.0], [1740.0, 4555.0], [1756.0, 5079.0], [1752.0, 4958.0], [1744.0, 5116.0], [1804.0, 4727.0], [1844.0, 3933.0], [1840.0, 4577.0], [1824.0, 4713.0], [1836.0, 4761.0], [1848.0, 3885.0], [1800.0, 4102.0], [1820.0, 4715.0], [1816.0, 4716.0], [1812.0, 3830.0], [1808.0, 4028.0], [1908.0, 3722.5], [1916.0, 4144.5], [1892.0, 3746.3333333333335], [1896.0, 4140.333333333333], [1900.0, 4046.5], [1912.0, 4151.0], [1860.0, 4671.0], [1864.0, 4695.0], [1884.0, 3862.0], [1876.0, 4203.0], [1872.0, 3847.5], [1976.0, 3926.0], [1980.0, 3887.5], [1952.0, 3424.0], [1956.0, 3954.5], [1960.0, 3963.0], [1972.0, 3435.0], [1968.0, 4156.0], [1932.0, 3655.3333333333335], [1928.0, 4107.5], [1948.0, 3919.5], [1940.0, 4051.5], [1936.0, 3905.0], [2040.0, 4157.0], [2032.0, 4034.0], [2016.0, 4186.0], [2028.0, 3648.0], [2044.0, 3762.5], [2036.0, 3850.0], [1984.0, 4331.0], [1988.0, 3921.6666666666665], [1996.0, 4074.0], [2012.0, 3461.0], [2004.0, 3730.0], [2000.0, 4304.0], [2056.0, 3071.0], [2144.0, 3282.5], [2152.0, 3027.0], [2128.0, 3535.0], [2136.0, 3756.0], [2160.0, 3265.0], [2048.0, 3773.0], [2064.0, 3971.0], [2072.0, 3339.0], [2104.0, 3662.0], [2096.0, 3284.5], [2088.0, 3115.0], [2080.0, 3237.5], [2296.0, 3257.0], [2240.0, 2804.0], [2248.0, 2756.0], [2256.0, 2960.0], [2288.0, 2665.0], [2280.0, 2362.0], [2272.0, 2715.0], [2192.0, 3750.0], [2184.0, 2900.0], [2232.0, 3179.0], [2224.0, 2779.0], [2216.0, 3638.0], [2416.0, 2171.0], [2368.0, 2807.5], [2376.0, 2565.0], [2384.0, 2316.0], [2392.0, 3057.0], [2424.0, 2386.0], [2408.0, 2248.0], [2400.0, 2172.0], [2328.0, 2492.0], [2312.0, 3382.0], [2304.0, 3194.0], [2352.0, 3078.0], [2344.0, 3218.5], [2456.0, 2851.0], [2448.0, 2750.0], [2440.0, 2255.5], [2480.0, 2443.0], [2472.0, 2425.0], [2464.0, 2811.0], [2161.0, 2909.0], [2169.0, 3726.0], [2113.0, 3291.0], [2121.0, 3087.0], [2129.0, 3770.0], [2057.0, 3142.0], [2065.0, 2995.0], [2073.0, 3936.0], [2105.0, 4023.0], [2097.0, 3430.0], [2089.0, 3115.0], [2081.0, 3152.0], [2281.0, 3273.0], [2249.0, 3388.0], [2257.0, 2663.0], [2265.0, 2689.0], [2289.0, 3090.0], [2273.0, 2623.0], [2201.0, 3174.6666666666665], [2185.0, 3717.0], [2177.0, 3042.6666666666665], [2233.0, 2871.0], [2225.0, 2597.0], [2209.0, 3225.0], [2417.0, 2109.0], [2401.0, 2171.0], [2369.0, 2266.0], [2385.0, 2151.0], [2393.0, 2139.0], [2425.0, 2185.0], [2329.0, 2920.0], [2321.0, 2964.5], [2313.0, 2990.0], [2305.0, 3337.0], [2361.0, 2615.0], [2353.0, 3064.0], [2337.0, 3123.0], [2441.0, 2868.0], [2449.0, 2004.0], [2457.0, 2701.0], [2433.0, 2933.0], [2489.0, 2369.0], [2465.0, 2485.0], [1029.0, 7019.0], [1077.0, 6796.0], [1037.0, 6580.5], [1033.0, 6939.0], [1025.0, 7042.0], [1049.0, 6931.0], [1045.0, 6308.0], [1041.0, 6260.0], [1069.0, 6232.0], [1065.0, 6175.0], [1061.0, 6989.0], [1057.0, 6659.0], [1145.0, 6063.0], [1149.0, 6277.0], [1137.0, 6320.5], [1101.0, 6279.0], [1097.0, 6290.5], [1089.0, 6771.0], [1133.0, 6100.0], [1129.0, 6735.333333333333], [1121.0, 6544.75], [1161.0, 7031.0], [1205.0, 5902.0], [1213.0, 6093.0], [1209.0, 6839.0], [1157.0, 6457.0], [1181.0, 6194.0], [1177.0, 6140.0], [1173.0, 6657.0], [1169.0, 6765.4], [1265.0, 6112.0], [1277.0, 5950.0], [1249.0, 6854.0], [1273.0, 6310.5], [1217.0, 6377.0], [1221.0, 6806.0], [1225.0, 5899.0], [1229.0, 6491.5], [1245.0, 6383.5], [1241.0, 6554.0], [1237.0, 6253.0], [1233.0, 6737.0], [1253.0, 6711.5], [1337.0, 6367.0], [1341.0, 6278.5], [1313.0, 6505.0], [1321.0, 5860.0], [1329.0, 6415.0], [1293.0, 6114.0], [1289.0, 6027.0], [1281.0, 6048.0], [1309.0, 5719.0], [1305.0, 5980.0], [1297.0, 6378.0], [1325.0, 5792.5], [1397.0, 5508.0], [1405.0, 6291.0], [1381.0, 6356.0], [1385.0, 6161.0], [1393.0, 5535.0], [1357.0, 5578.0], [1349.0, 6466.0], [1345.0, 6337.0], [1361.0, 5640.0], [1389.0, 6352.0], [1461.0, 5083.0], [1469.0, 5256.0], [1465.0, 5165.0], [1441.0, 5324.0], [1409.0, 6244.0], [1413.0, 5427.0], [1417.0, 5420.0], [1437.0, 5581.5], [1433.0, 5651.0], [1525.0, 5282.0], [1505.0, 5085.0], [1533.0, 4696.0], [1529.0, 5784.0], [1521.0, 4799.0], [1477.0, 5955.0], [1473.0, 5974.0], [1497.0, 5865.0], [1585.0, 4820.0], [1569.0, 4839.0], [1581.0, 4806.0], [1589.0, 5560.0], [1537.0, 5279.5], [1541.0, 5388.333333333333], [1545.0, 4947.0], [1565.0, 5068.0], [1561.0, 5058.6], [1557.0, 4792.0], [1553.0, 5195.0], [1657.0, 5332.0], [1637.0, 5416.0], [1633.0, 4915.333333333333], [1645.0, 5381.0], [1661.0, 4806.0], [1601.0, 5196.0], [1605.0, 5434.0], [1613.0, 5267.0], [1629.0, 4951.0], [1625.0, 5291.0], [1617.0, 5100.0], [1721.0, 5026.0], [1725.0, 4542.5], [1697.0, 4377.0], [1701.0, 4976.5], [1705.0, 5235.0], [1709.0, 5218.0], [1717.0, 4870.0], [1713.0, 4677.5], [1677.0, 5150.0], [1673.0, 4472.0], [1669.0, 4536.0], [1665.0, 4866.0], [1689.0, 4297.0], [1685.0, 4662.25], [1785.0, 4090.0], [1769.0, 4253.0], [1773.0, 4624.0], [1789.0, 4661.666666666667], [1781.0, 4874.0], [1777.0, 4532.5], [1741.0, 4563.0], [1737.0, 4778.666666666667], [1757.0, 4951.0], [1749.0, 4575.5], [1745.0, 4355.0], [1853.0, 4251.0], [1825.0, 3727.0], [1829.0, 4347.0], [1837.0, 3756.0], [1849.0, 4735.0], [1841.0, 4660.0], [1793.0, 4985.0], [1801.0, 4151.0], [1817.0, 4098.0], [1813.0, 4319.0], [1809.0, 4008.0], [1909.0, 4467.0], [1917.0, 4360.0], [1889.0, 4470.0], [1893.0, 4517.0], [1905.0, 3842.0], [1861.0, 3848.0], [1865.0, 4493.0], [1869.0, 4289.0], [1881.0, 4595.0], [1877.0, 3880.0], [1977.0, 4201.0], [1957.0, 3627.0], [1965.0, 3579.5], [1981.0, 3790.0], [1973.0, 3282.0], [1933.0, 4296.0], [1929.0, 4345.0], [1925.0, 3946.5], [1921.0, 4371.0], [1949.0, 3848.0], [1945.0, 3891.0], [1941.0, 4271.0], [1937.0, 3665.0], [2041.0, 3905.0], [2037.0, 3081.0], [2017.0, 4094.0], [2029.0, 3641.0], [2045.0, 4162.0], [1985.0, 3547.0], [1989.0, 4326.0], [1993.0, 3841.0], [1997.0, 4186.0], [2013.0, 3847.0], [2005.0, 3418.0], [2001.0, 4283.0], [2154.0, 3402.5], [2170.0, 3749.0], [2130.0, 3466.0], [2138.0, 3394.0], [2162.0, 3245.0], [2146.0, 3395.0], [2058.0, 2804.0], [2066.0, 3211.0], [2074.0, 4053.0], [2106.0, 3129.0], [2098.0, 2912.0], [2090.0, 4020.0], [2082.0, 3705.0], [2298.0, 2918.0], [2242.0, 3203.6666666666665], [2250.0, 3363.0], [2258.0, 3510.0], [2266.0, 2415.0], [2290.0, 3292.0], [2274.0, 2702.0], [2202.0, 3579.0], [2194.0, 3160.0], [2186.0, 2947.0], [2178.0, 3647.0], [2218.0, 3430.5], [2426.0, 2958.0], [2370.0, 2400.0], [2378.0, 2659.5], [2394.0, 2203.0], [2410.0, 2107.0], [2314.0, 3338.0], [2306.0, 2302.0], [2362.0, 2983.0], [2354.0, 2654.0], [2346.0, 3167.5], [2338.0, 3138.0], [2450.0, 2871.0], [2458.0, 2649.0], [2434.0, 2480.0], [2482.0, 2599.0], [2474.0, 2001.5], [2466.0, 2652.0], [2163.0, 3379.0], [2115.0, 3800.0], [2123.0, 3486.8333333333335], [2131.0, 2801.0], [2139.0, 3293.0], [2147.0, 3827.0], [2051.0, 3835.3333333333335], [2059.0, 3229.0], [2067.0, 3749.0], [2075.0, 2978.0], [2099.0, 3579.0], [2091.0, 3986.0], [2083.0, 2970.0], [2283.0, 3333.5], [2291.0, 2874.0], [2299.0, 3252.0], [2243.0, 2731.0], [2259.0, 2660.0], [2267.0, 3513.0], [2275.0, 3116.0], [2203.0, 3733.0], [2187.0, 2889.0], [2179.0, 3006.0], [2235.0, 3545.5], [2227.0, 3209.0], [2219.0, 2923.0], [2211.0, 3094.5], [2419.0, 2982.0], [2371.0, 2399.0], [2379.0, 2566.0], [2387.0, 2627.5], [2395.0, 2734.0], [2411.0, 2590.0], [2403.0, 2588.5], [2331.0, 3158.0], [2315.0, 2818.0], [2307.0, 3193.0], [2355.0, 2339.0], [2347.0, 2246.0], [2339.0, 2164.0], [2451.0, 2066.0], [2483.0, 1950.5], [2459.0, 1912.0], [2435.0, 2119.0], [2475.0, 2620.0], [513.0, 8502.5], [539.0, 8416.0], [531.0, 8082.0], [527.0, 7783.0], [515.0, 7923.0], [517.0, 8698.0], [525.0, 8278.0], [523.0, 7739.0], [521.0, 7895.0], [535.0, 7857.0], [533.0, 7916.5], [529.0, 7780.0], [547.0, 8127.5], [569.0, 8027.5], [573.0, 8107.0], [571.0, 8357.0], [559.0, 7570.0], [545.0, 8596.0], [551.0, 8436.5], [557.0, 8348.0], [555.0, 7938.0], [553.0, 7756.0], [565.0, 7373.0], [563.0, 8484.0], [601.0, 7988.0], [595.0, 8425.0], [577.0, 7727.333333333333], [581.0, 8326.0], [583.0, 8389.0], [589.0, 7346.0], [585.0, 8244.0], [633.0, 7558.0], [625.0, 8272.0], [621.0, 7665.5], [609.0, 7963.666666666667], [613.0, 8318.5], [611.0, 8405.0], [615.0, 8408.0], [619.0, 8031.0], [631.0, 8003.0], [629.0, 7799.0], [627.0, 7332.0], [665.0, 8285.0], [657.0, 7543.0], [671.0, 7902.0], [667.0, 7743.0], [647.0, 8182.25], [643.0, 8171.0], [641.0, 7273.0], [655.0, 7731.5], [653.0, 8245.0], [651.0, 7934.0], [649.0, 8316.0], [661.0, 7732.5], [659.0, 7755.0], [699.0, 7776.666666666667], [679.0, 7830.0], [701.0, 8091.0], [677.0, 8106.0], [675.0, 7257.0], [673.0, 7442.0], [695.0, 7525.5], [693.0, 8035.0], [691.0, 7503.0], [687.0, 8108.0], [685.0, 7387.5], [681.0, 7052.0], [731.0, 7891.0], [735.0, 7166.0], [719.0, 7679.0], [705.0, 7495.0], [707.0, 7185.0], [713.0, 7876.0], [725.0, 8141.5], [723.0, 7818.5], [721.0, 7353.0], [761.0, 7288.0], [765.0, 8019.0], [767.0, 7605.0], [763.0, 7297.0], [743.0, 7844.0], [741.0, 7988.0], [739.0, 8122.0], [737.0, 7707.0], [755.0, 8006.666666666667], [751.0, 7722.5], [747.0, 7751.666666666667], [797.0, 8164.0], [785.0, 7418.0], [795.0, 7557.75], [793.0, 7347.0], [783.0, 7578.333333333333], [777.0, 7667.333333333333], [791.0, 7456.0], [789.0, 7535.0], [787.0, 8146.0], [805.0, 7114.0], [819.0, 8108.0], [829.0, 7638.0], [817.0, 7703.5], [803.0, 7699.0], [801.0, 6897.0], [815.0, 7380.0], [813.0, 7420.0], [811.0, 7443.0], [809.0, 7850.0], [823.0, 7367.0], [821.0, 7512.0], [859.0, 7936.0], [857.0, 7265.0], [863.0, 7256.0], [851.0, 6967.0], [861.0, 7532.5], [839.0, 7889.0], [837.0, 7867.0], [835.0, 8063.0], [833.0, 7746.333333333333], [845.0, 7576.5], [843.0, 7745.5], [841.0, 7147.5], [853.0, 7580.0], [889.0, 7827.0], [895.0, 7052.0], [881.0, 7146.0], [891.0, 7267.0], [871.0, 7152.0], [867.0, 7203.0], [865.0, 7840.0], [879.0, 6854.0], [877.0, 7464.0], [875.0, 7758.0], [873.0, 7168.0], [887.0, 7676.0], [901.0, 7342.0], [921.0, 7627.5], [927.0, 6884.0], [925.0, 7672.0], [911.0, 7620.0], [897.0, 7644.0], [899.0, 7051.0], [903.0, 6584.0], [909.0, 7700.0], [905.0, 7612.0], [919.0, 6667.0], [929.0, 6867.0], [945.0, 6740.0], [955.0, 6610.0], [953.0, 6199.0], [943.0, 6727.0], [931.0, 6694.0], [933.0, 7466.0], [941.0, 7532.0], [939.0, 6735.0], [937.0, 6686.0], [949.0, 6901.0], [947.0, 6567.0], [987.0, 6418.0], [991.0, 6046.0], [977.0, 6133.0], [989.0, 6383.0], [967.0, 6523.0], [965.0, 7410.0], [963.0, 6452.0], [973.0, 6963.333333333333], [979.0, 6135.0], [1021.0, 6431.0], [1023.0, 6422.0], [1009.0, 6481.714285714286], [1013.0, 6494.0], [1011.0, 7023.0], [1019.0, 6398.0], [1017.0, 6826.0], [1001.0, 6867.0], [997.0, 7323.0], [995.0, 6869.0], [993.0, 6049.0], [1015.0, 7008.0], [1078.0, 6898.0], [1082.0, 6626.25], [1074.0, 6459.333333333333], [1026.0, 6283.0], [1030.0, 7143.0], [1034.0, 7149.0], [1042.0, 6944.0], [1070.0, 7086.0], [1066.0, 6306.0], [1058.0, 6985.0], [1142.0, 6631.0], [1126.0, 6671.0], [1118.0, 6890.0], [1090.0, 6948.0], [1094.0, 6774.0], [1098.0, 7081.0], [1110.0, 6897.0], [1106.0, 6913.0], [1134.0, 6862.0], [1130.0, 6264.0], [1210.0, 6086.0], [1214.0, 6695.0], [1186.0, 6977.5], [1190.0, 6317.0], [1194.0, 6486.5], [1206.0, 6218.0], [1202.0, 6223.0], [1162.0, 7022.0], [1178.0, 6745.0], [1174.0, 6817.5], [1170.0, 6852.0], [1198.0, 6504.5], [1274.0, 6831.0], [1278.0, 5928.0], [1250.0, 6750.0], [1258.0, 6122.0], [1270.0, 6382.5], [1266.0, 6318.0], [1226.0, 6134.0], [1218.0, 6152.0], [1246.0, 6110.0], [1238.0, 6164.0], [1234.0, 6124.0], [1262.0, 5913.0], [1330.0, 6479.0], [1338.0, 5760.0], [1314.0, 6550.0], [1334.0, 6187.5], [1310.0, 5806.0], [1282.0, 6066.0], [1286.0, 6325.0], [1306.0, 6016.0], [1302.0, 5871.0], [1298.0, 6798.0], [1326.0, 5849.0], [1322.0, 6450.0], [1318.0, 6042.0], [1398.0, 6112.0], [1394.0, 6302.0], [1406.0, 5329.0], [1382.0, 5623.0], [1386.0, 6322.0], [1402.0, 6115.666666666667], [1358.0, 6425.0], [1354.0, 5854.6], [1374.0, 6148.5], [1366.0, 6377.0], [1390.0, 5775.0], [1462.0, 5224.0], [1450.0, 5699.0], [1454.0, 5590.0], [1466.0, 5964.0], [1458.0, 5380.666666666667], [1414.0, 5165.0], [1410.0, 5429.0], [1418.0, 6170.0], [1422.0, 6076.0], [1438.0, 5847.0], [1434.0, 6020.0], [1430.0, 6120.5], [1534.0, 4690.0], [1506.0, 5704.0], [1510.0, 5158.0], [1518.0, 5397.428571428572], [1530.0, 4946.0], [1526.0, 5730.0], [1522.0, 5005.0], [1478.0, 5964.0], [1474.0, 5967.0], [1502.0, 5856.5], [1494.0, 5776.5], [1490.0, 5090.333333333333], [1590.0, 5380.0], [1598.0, 5113.0], [1570.0, 5493.0], [1574.0, 5631.5], [1566.0, 5618.0], [1538.0, 4687.0], [1542.0, 5547.0], [1546.0, 5553.0], [1550.0, 5546.0], [1562.0, 4877.0], [1654.0, 5007.0], [1638.0, 4867.0], [1630.0, 4383.0], [1602.0, 4681.0], [1606.0, 5303.0], [1614.0, 4701.0], [1622.0, 4998.0], [1618.0, 4487.0], [1722.0, 5053.0], [1718.0, 5133.0], [1698.0, 4423.0], [1706.0, 4435.0], [1710.0, 5197.0], [1726.0, 4789.0], [1714.0, 5017.0], [1678.0, 4978.0], [1674.0, 5323.0], [1670.0, 4953.0], [1666.0, 4565.0], [1694.0, 4397.5], [1690.0, 4387.0], [1686.0, 4471.0], [1742.0, 4811.0], [1790.0, 4415.0], [1770.0, 4837.75], [1782.0, 4826.0], [1734.0, 4831.333333333333], [1730.0, 4735.0], [1758.0, 4942.0], [1754.0, 4832.0], [1750.0, 5117.0], [1746.0, 4924.0], [1854.0, 3768.0], [1826.0, 4816.0], [1834.0, 4668.0], [1830.0, 4036.0], [1850.0, 4638.0], [1842.0, 4414.0], [1794.0, 4768.0], [1798.0, 4393.0], [1802.0, 4758.0], [1806.0, 4718.0], [1822.0, 4389.0], [1814.0, 4686.0], [1810.0, 4686.0], [1906.0, 3774.0], [1902.0, 4252.0], [1918.0, 4364.0], [1910.0, 4438.0], [1858.0, 4271.666666666667], [1862.0, 4464.0], [1866.0, 4689.0], [1870.0, 4670.0], [1886.0, 4386.5], [1882.0, 4473.0], [1874.0, 4103.0], [1982.0, 4190.0], [1954.0, 3935.0], [1958.0, 4392.0], [1962.0, 4147.0], [1966.0, 4351.0], [1978.0, 3769.0], [1974.0, 3921.0], [1934.0, 4307.0], [1926.0, 3926.0], [1946.0, 3649.0], [1942.0, 4063.0], [1938.0, 4307.0], [2034.0, 3264.0], [2042.0, 4143.0], [2022.0, 3578.6], [2026.0, 3876.6666666666665], [2030.0, 4060.0], [2038.0, 4033.0], [1990.0, 4064.0], [1994.0, 3502.0], [2014.0, 4258.0], [2010.0, 3161.0], [2006.0, 4269.0], [2002.0, 3418.0], [2164.0, 3796.0], [2156.0, 3615.0], [2116.0, 3867.0], [2124.0, 3775.0], [2132.0, 3458.0], [2172.0, 3096.0], [2052.0, 4169.0], [2060.0, 3316.0], [2076.0, 3297.0], [2092.0, 3892.0], [2084.0, 3488.0], [2292.0, 3285.0], [2284.0, 2679.0], [2252.0, 2779.0], [2260.0, 3325.0], [2268.0, 3277.0], [2300.0, 2298.0], [2204.0, 3701.0], [2196.0, 3159.5], [2236.0, 2815.0], [2220.0, 3136.0], [2404.0, 1953.0], [2412.0, 2882.0], [2380.0, 2157.0], [2428.0, 2785.0], [2388.0, 2103.0], [2396.0, 2618.0], [2324.0, 2876.6666666666665], [2316.0, 2789.0], [2308.0, 3367.0], [2364.0, 2205.0], [2356.0, 2334.0], [2348.0, 2873.0], [2452.0, 2009.0], [2500.0, 2319.2307692307695], [2460.0, 2045.0], [2444.0, 2373.5], [2436.0, 2121.0], [2468.0, 1921.5], [2173.0, 3790.0], [2125.0, 3331.0], [2117.0, 3382.0], [2133.0, 3087.0], [2141.0, 3162.5], [2165.0, 3039.0], [2157.0, 3057.0], [2149.0, 3114.5], [2053.0, 3048.0], [2061.0, 3540.0], [2069.0, 3769.0], [2077.0, 3928.0], [2109.0, 3606.6666666666665], [2101.0, 3865.0], [2093.0, 3102.0], [2085.0, 3269.0], [2277.0, 3223.0], [2253.0, 2993.0], [2245.0, 3032.5], [2261.0, 2743.0], [2269.0, 3330.0], [2205.0, 3589.0], [2189.0, 3293.0], [2229.0, 3315.5], [2213.0, 3175.5], [2413.0, 2238.0], [2373.0, 2478.0], [2389.0, 1790.0], [2429.0, 1860.0], [2333.0, 2581.5], [2325.0, 3043.0], [2317.0, 3359.0], [2309.0, 2486.0], [2365.0, 2846.0], [2357.0, 2757.0], [2349.0, 3114.0], [2341.0, 2736.0], [2437.0, 2155.0], [2461.0, 2681.0], [2453.0, 2162.0], [2477.0, 1993.0], [2469.0, 2780.0], [1039.0, 6633.5], [1063.0, 6628.5], [1087.0, 6601.333333333333], [1075.0, 6223.0], [1035.0, 7146.0], [1031.0, 6331.0], [1027.0, 6127.0], [1055.0, 6601.5], [1051.0, 6621.5], [1047.0, 6203.5], [1043.0, 6344.0], [1071.0, 6762.0], [1095.0, 6928.0], [1147.0, 6768.5], [1139.0, 6675.5], [1103.0, 6662.5], [1119.0, 6102.0], [1115.0, 6846.0], [1111.0, 6563.0], [1107.0, 6310.0], [1135.0, 6172.0], [1207.0, 6783.0], [1215.0, 6191.0], [1187.0, 6566.0], [1211.0, 5886.0], [1203.0, 6632.0], [1159.0, 6498.0], [1155.0, 6525.666666666667], [1183.0, 6088.0], [1179.0, 6013.0], [1171.0, 6517.5], [1199.0, 6185.0], [1191.0, 6228.0], [1223.0, 6184.0], [1275.0, 5958.0], [1271.0, 6854.0], [1267.0, 6056.0], [1247.0, 6145.0], [1227.0, 6489.0], [1231.0, 6297.0], [1243.0, 6248.0], [1239.0, 6389.0], [1235.0, 6761.0], [1263.0, 6053.0], [1259.0, 6118.0], [1251.0, 5907.0], [1339.0, 5762.0], [1343.0, 6104.0], [1319.0, 6552.0], [1323.0, 5688.0], [1335.0, 5781.0], [1331.0, 6567.0], [1295.0, 6088.5], [1291.0, 6396.0], [1307.0, 6716.0], [1327.0, 5802.0], [1403.0, 5425.0], [1407.0, 6278.0], [1379.0, 5791.4], [1383.0, 5800.0], [1399.0, 5862.0], [1395.0, 5344.0], [1359.0, 5573.0], [1355.0, 6244.0], [1347.0, 5504.5], [1367.0, 5669.0], [1363.0, 5969.5], [1391.0, 6203.0], [1459.0, 5284.0], [1447.0, 5197.0], [1451.0, 5028.0], [1455.0, 5866.0], [1439.0, 5257.0], [1411.0, 5435.0], [1415.0, 6031.0], [1435.0, 6178.0], [1427.0, 5649.666666666667], [1531.0, 5568.0], [1535.0, 5685.0], [1507.0, 4913.0], [1511.0, 5766.0], [1519.0, 5419.0], [1527.0, 4882.0], [1523.0, 5636.0], [1487.0, 5567.0], [1475.0, 5184.0], [1503.0, 4827.0], [1499.0, 5411.0], [1495.0, 5492.0], [1571.0, 4606.0], [1595.0, 5144.666666666667], [1579.0, 5486.666666666667], [1583.0, 5298.5], [1587.0, 5018.0], [1543.0, 5708.0], [1547.0, 5506.0], [1563.0, 5628.0], [1655.0, 4418.0], [1663.0, 4502.5], [1639.0, 4613.0], [1643.0, 4859.0], [1647.0, 4579.0], [1651.0, 4970.666666666667], [1611.0, 4722.0], [1615.0, 5468.0], [1623.0, 5087.0], [1619.0, 5259.0], [1723.0, 5166.0], [1727.0, 4395.0], [1699.0, 5090.0], [1703.0, 4716.5], [1707.0, 4316.0], [1711.0, 4183.0], [1715.0, 4668.0], [1679.0, 4979.0], [1675.0, 4573.0], [1667.0, 4471.0], [1695.0, 5234.0], [1687.0, 4975.0], [1779.0, 4201.0], [1787.0, 4422.0], [1791.0, 4641.0], [1771.0, 4229.0], [1783.0, 4228.0], [1743.0, 4072.0], [1739.0, 4229.0], [1731.0, 4091.0], [1759.0, 5068.0], [1755.0, 5049.0], [1747.0, 4334.0], [1803.0, 4721.0], [1847.0, 4114.666666666667], [1851.0, 4546.0], [1855.0, 4549.0], [1835.0, 4294.8], [1839.0, 4187.5], [1823.0, 3966.0], [1795.0, 4006.0], [1799.0, 4138.0], [1807.0, 3931.0], [1819.0, 4832.5], [1815.0, 4104.0], [1811.0, 3603.0], [1859.0, 4588.0], [1919.0, 3625.0], [1887.0, 3567.0], [1863.0, 4731.0], [1867.0, 3818.0], [1883.0, 4464.0], [1879.0, 3647.5], [1983.0, 3990.0], [1971.0, 3925.6666666666665], [1959.0, 4278.0], [1963.0, 3526.0], [1975.0, 3578.0], [1923.0, 3995.0], [1951.0, 4292.0], [1943.0, 3851.0], [2035.0, 3774.0], [2047.0, 3287.0], [2023.0, 3745.5], [2027.0, 3395.0], [2031.0, 3319.0], [2015.0, 4209.0], [1991.0, 4164.0], [1999.0, 3654.0], [2011.0, 3795.0], [2007.0, 3903.0], [2003.0, 4137.0], [2158.0, 3705.0], [2174.0, 2491.0], [2126.0, 3046.0], [2134.0, 3121.0], [2142.0, 2911.0], [2150.0, 3606.0], [2054.0, 3789.0], [2062.0, 3512.0], [2070.0, 3128.0], [2078.0, 3771.0], [2110.0, 3123.0], [2094.0, 3582.0], [2086.0, 3893.0], [2294.0, 2782.5], [2246.0, 2284.0], [2254.0, 2678.0], [2302.0, 2944.0], [2286.0, 3294.0], [2278.0, 2893.0], [2206.0, 2940.0], [2198.0, 3226.0], [2182.0, 3714.0], [2238.0, 2848.0], [2230.0, 3096.0], [2222.0, 3230.5], [2422.0, 2194.0], [2374.0, 3119.0], [2382.0, 2999.5], [2398.0, 2957.5], [2430.0, 2173.0], [2414.0, 2552.0], [2406.0, 2933.5], [2334.0, 2479.0], [2318.0, 3275.0], [2366.0, 2623.0], [2358.0, 2385.0], [2342.0, 2661.0], [2438.0, 2594.0], [2478.0, 2421.0], [2462.0, 2355.0], [2454.0, 1776.0], [2446.0, 2142.3333333333335], [2470.0, 2723.0], [2159.0, 3728.0], [2151.0, 3860.0], [2127.0, 3769.0], [2135.0, 3308.0], [2167.0, 3711.5], [2111.0, 3835.0], [2055.0, 3347.0], [2063.0, 3759.0], [2103.0, 3606.0], [2087.0, 3784.0], [2287.0, 3287.0], [2303.0, 3100.0], [2247.0, 3238.0], [2255.0, 2762.0], [2263.0, 3212.0], [2271.0, 3098.0], [2279.0, 3031.0], [2207.0, 2941.0], [2191.0, 3438.0], [2183.0, 3573.0], [2223.0, 2810.0], [2215.0, 3558.0], [2423.0, 2837.0], [2415.0, 2839.0], [2431.0, 2170.0], [2375.0, 3131.0], [2383.0, 3042.0], [2391.0, 2284.5], [2399.0, 2116.0], [2407.0, 2898.0], [2335.0, 2437.0], [2327.0, 2785.0], [2319.0, 3198.0], [2311.0, 2834.0], [2359.0, 2100.0], [2351.0, 3065.0], [2463.0, 2672.0], [2455.0, 1941.0], [2447.0, 2861.0], [2487.0, 2411.0], [2479.0, 2563.0], [1.0, 10011.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}, {"data": [[1251.0571999999972, 6109.47880000001]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19000.0, "minX": 1.75558632E12, "maxY": 246750.0, "series": [{"data": [[1.75558632E12, 246750.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75558632E12, 19000.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558632E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6109.47880000001, "minX": 1.75558632E12, "maxY": 6109.47880000001, "series": [{"data": [[1.75558632E12, 6109.47880000001]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558632E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6109.427600000004, "minX": 1.75558632E12, "maxY": 6109.427600000004, "series": [{"data": [[1.75558632E12, 6109.427600000004]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558632E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5431.84360000001, "minX": 1.75558632E12, "maxY": 5431.84360000001, "series": [{"data": [[1.75558632E12, 5431.84360000001]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558632E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1733.0, "minX": 1.75558632E12, "maxY": 10529.0, "series": [{"data": [[1.75558632E12, 10529.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75558632E12, 8980.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75558632E12, 10208.97]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75558632E12, 9895.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75558632E12, 1733.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75558632E12, 6191.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558632E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2398.0, "minX": 65.0, "maxY": 9567.0, "series": [{"data": [[65.0, 2398.0], [139.0, 8403.0], [313.0, 2973.0], [314.0, 4969.0], [328.0, 3929.5], [323.0, 9567.0], [366.0, 6737.5], [403.0, 7816.0], [249.0, 5993.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 403.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2398.0, "minX": 65.0, "maxY": 9567.0, "series": [{"data": [[65.0, 2398.0], [139.0, 8403.0], [313.0, 2973.0], [314.0, 4969.0], [328.0, 3929.5], [323.0, 9567.0], [366.0, 6737.5], [403.0, 7816.0], [249.0, 5993.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 403.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558632E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558632E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558632E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558632E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558632E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558632E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558632E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558632E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558632E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558632E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558632E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558632E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

