/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 37.0, "minX": 0.0, "maxY": 2413.0, "series": [{"data": [[0.0, 37.0], [0.1, 37.0], [0.2, 37.0], [0.3, 37.0], [0.4, 38.0], [0.5, 38.0], [0.6, 38.0], [0.7, 39.0], [0.8, 39.0], [0.9, 39.0], [1.0, 39.0], [1.1, 39.0], [1.2, 40.0], [1.3, 40.0], [1.4, 40.0], [1.5, 40.0], [1.6, 40.0], [1.7, 40.0], [1.8, 40.0], [1.9, 40.0], [2.0, 40.0], [2.1, 40.0], [2.2, 40.0], [2.3, 40.0], [2.4, 40.0], [2.5, 41.0], [2.6, 41.0], [2.7, 41.0], [2.8, 41.0], [2.9, 42.0], [3.0, 42.0], [3.1, 43.0], [3.2, 43.0], [3.3, 43.0], [3.4, 43.0], [3.5, 43.0], [3.6, 44.0], [3.7, 44.0], [3.8, 44.0], [3.9, 44.0], [4.0, 44.0], [4.1, 44.0], [4.2, 44.0], [4.3, 44.0], [4.4, 44.0], [4.5, 45.0], [4.6, 45.0], [4.7, 45.0], [4.8, 45.0], [4.9, 45.0], [5.0, 45.0], [5.1, 45.0], [5.2, 45.0], [5.3, 46.0], [5.4, 46.0], [5.5, 47.0], [5.6, 47.0], [5.7, 47.0], [5.8, 47.0], [5.9, 47.0], [6.0, 47.0], [6.1, 47.0], [6.2, 47.0], [6.3, 47.0], [6.4, 47.0], [6.5, 47.0], [6.6, 48.0], [6.7, 48.0], [6.8, 48.0], [6.9, 48.0], [7.0, 48.0], [7.1, 48.0], [7.2, 48.0], [7.3, 48.0], [7.4, 48.0], [7.5, 48.0], [7.6, 48.0], [7.7, 49.0], [7.8, 49.0], [7.9, 49.0], [8.0, 49.0], [8.1, 49.0], [8.2, 50.0], [8.3, 50.0], [8.4, 50.0], [8.5, 50.0], [8.6, 50.0], [8.7, 50.0], [8.8, 50.0], [8.9, 50.0], [9.0, 51.0], [9.1, 51.0], [9.2, 51.0], [9.3, 51.0], [9.4, 51.0], [9.5, 52.0], [9.6, 52.0], [9.7, 52.0], [9.8, 52.0], [9.9, 52.0], [10.0, 52.0], [10.1, 52.0], [10.2, 52.0], [10.3, 52.0], [10.4, 52.0], [10.5, 52.0], [10.6, 53.0], [10.7, 53.0], [10.8, 53.0], [10.9, 53.0], [11.0, 53.0], [11.1, 54.0], [11.2, 54.0], [11.3, 54.0], [11.4, 54.0], [11.5, 54.0], [11.6, 55.0], [11.7, 56.0], [11.8, 56.0], [11.9, 56.0], [12.0, 56.0], [12.1, 57.0], [12.2, 57.0], [12.3, 57.0], [12.4, 57.0], [12.5, 57.0], [12.6, 57.0], [12.7, 57.0], [12.8, 57.0], [12.9, 58.0], [13.0, 58.0], [13.1, 58.0], [13.2, 58.0], [13.3, 59.0], [13.4, 59.0], [13.5, 59.0], [13.6, 59.0], [13.7, 59.0], [13.8, 59.0], [13.9, 59.0], [14.0, 59.0], [14.1, 59.0], [14.2, 59.0], [14.3, 60.0], [14.4, 60.0], [14.5, 60.0], [14.6, 60.0], [14.7, 60.0], [14.8, 60.0], [14.9, 60.0], [15.0, 60.0], [15.1, 61.0], [15.2, 61.0], [15.3, 61.0], [15.4, 61.0], [15.5, 61.0], [15.6, 61.0], [15.7, 62.0], [15.8, 62.0], [15.9, 62.0], [16.0, 62.0], [16.1, 62.0], [16.2, 62.0], [16.3, 62.0], [16.4, 63.0], [16.5, 63.0], [16.6, 63.0], [16.7, 63.0], [16.8, 63.0], [16.9, 63.0], [17.0, 63.0], [17.1, 63.0], [17.2, 63.0], [17.3, 64.0], [17.4, 64.0], [17.5, 64.0], [17.6, 64.0], [17.7, 64.0], [17.8, 64.0], [17.9, 64.0], [18.0, 65.0], [18.1, 65.0], [18.2, 65.0], [18.3, 65.0], [18.4, 65.0], [18.5, 65.0], [18.6, 65.0], [18.7, 65.0], [18.8, 66.0], [18.9, 66.0], [19.0, 66.0], [19.1, 66.0], [19.2, 66.0], [19.3, 66.0], [19.4, 67.0], [19.5, 67.0], [19.6, 68.0], [19.7, 70.0], [19.8, 70.0], [19.9, 70.0], [20.0, 70.0], [20.1, 71.0], [20.2, 72.0], [20.3, 72.0], [20.4, 73.0], [20.5, 75.0], [20.6, 75.0], [20.7, 76.0], [20.8, 76.0], [20.9, 77.0], [21.0, 77.0], [21.1, 77.0], [21.2, 78.0], [21.3, 78.0], [21.4, 78.0], [21.5, 79.0], [21.6, 79.0], [21.7, 80.0], [21.8, 84.0], [21.9, 84.0], [22.0, 92.0], [22.1, 93.0], [22.2, 93.0], [22.3, 100.0], [22.4, 100.0], [22.5, 101.0], [22.6, 103.0], [22.7, 103.0], [22.8, 131.0], [22.9, 131.0], [23.0, 131.0], [23.1, 143.0], [23.2, 143.0], [23.3, 144.0], [23.4, 144.0], [23.5, 144.0], [23.6, 145.0], [23.7, 149.0], [23.8, 149.0], [23.9, 150.0], [24.0, 150.0], [24.1, 150.0], [24.2, 155.0], [24.3, 155.0], [24.4, 155.0], [24.5, 157.0], [24.6, 157.0], [24.7, 162.0], [24.8, 162.0], [24.9, 168.0], [25.0, 169.0], [25.1, 169.0], [25.2, 172.0], [25.3, 173.0], [25.4, 173.0], [25.5, 176.0], [25.6, 176.0], [25.7, 180.0], [25.8, 182.0], [25.9, 182.0], [26.0, 187.0], [26.1, 191.0], [26.2, 191.0], [26.3, 192.0], [26.4, 192.0], [26.5, 192.0], [26.6, 195.0], [26.7, 195.0], [26.8, 220.0], [26.9, 222.0], [27.0, 222.0], [27.1, 224.0], [27.2, 224.0], [27.3, 226.0], [27.4, 234.0], [27.5, 234.0], [27.6, 237.0], [27.7, 247.0], [27.8, 247.0], [27.9, 265.0], [28.0, 265.0], [28.1, 266.0], [28.2, 267.0], [28.3, 267.0], [28.4, 273.0], [28.5, 274.0], [28.6, 274.0], [28.7, 276.0], [28.8, 276.0], [28.9, 277.0], [29.0, 277.0], [29.1, 277.0], [29.2, 281.0], [29.3, 285.0], [29.4, 285.0], [29.5, 286.0], [29.6, 286.0], [29.7, 288.0], [29.8, 288.0], [29.9, 288.0], [30.0, 293.0], [30.1, 294.0], [30.2, 294.0], [30.3, 295.0], [30.4, 295.0], [30.5, 297.0], [30.6, 298.0], [30.7, 298.0], [30.8, 303.0], [30.9, 310.0], [31.0, 310.0], [31.1, 315.0], [31.2, 315.0], [31.3, 316.0], [31.4, 326.0], [31.5, 326.0], [31.6, 336.0], [31.7, 339.0], [31.8, 339.0], [31.9, 340.0], [32.0, 340.0], [32.1, 345.0], [32.2, 346.0], [32.3, 346.0], [32.4, 347.0], [32.5, 347.0], [32.6, 347.0], [32.7, 348.0], [32.8, 348.0], [32.9, 349.0], [33.0, 351.0], [33.1, 351.0], [33.2, 354.0], [33.3, 354.0], [33.4, 354.0], [33.5, 360.0], [33.6, 367.0], [33.7, 367.0], [33.8, 367.0], [33.9, 367.0], [34.0, 381.0], [34.1, 381.0], [34.2, 381.0], [34.3, 384.0], [34.4, 384.0], [34.5, 384.0], [34.6, 390.0], [34.7, 390.0], [34.8, 392.0], [34.9, 396.0], [35.0, 396.0], [35.1, 397.0], [35.2, 398.0], [35.3, 398.0], [35.4, 409.0], [35.5, 409.0], [35.6, 411.0], [35.7, 415.0], [35.8, 415.0], [35.9, 424.0], [36.0, 429.0], [36.1, 429.0], [36.2, 430.0], [36.3, 430.0], [36.4, 431.0], [36.5, 431.0], [36.6, 431.0], [36.7, 432.0], [36.8, 434.0], [36.9, 434.0], [37.0, 436.0], [37.1, 436.0], [37.2, 438.0], [37.3, 445.0], [37.4, 445.0], [37.5, 447.0], [37.6, 447.0], [37.7, 447.0], [37.8, 448.0], [37.9, 448.0], [38.0, 448.0], [38.1, 451.0], [38.2, 451.0], [38.3, 451.0], [38.4, 454.0], [38.5, 454.0], [38.6, 455.0], [38.7, 455.0], [38.8, 456.0], [38.9, 458.0], [39.0, 458.0], [39.1, 463.0], [39.2, 470.0], [39.3, 470.0], [39.4, 473.0], [39.5, 473.0], [39.6, 473.0], [39.7, 480.0], [39.8, 480.0], [39.9, 481.0], [40.0, 491.0], [40.1, 491.0], [40.2, 493.0], [40.3, 493.0], [40.4, 498.0], [40.5, 498.0], [40.6, 498.0], [40.7, 500.0], [40.8, 500.0], [40.9, 500.0], [41.0, 500.0], [41.1, 500.0], [41.2, 506.0], [41.3, 509.0], [41.4, 509.0], [41.5, 513.0], [41.6, 520.0], [41.7, 520.0], [41.8, 525.0], [41.9, 525.0], [42.0, 526.0], [42.1, 527.0], [42.2, 527.0], [42.3, 535.0], [42.4, 539.0], [42.5, 539.0], [42.6, 540.0], [42.7, 540.0], [42.8, 542.0], [42.9, 545.0], [43.0, 545.0], [43.1, 566.0], [43.2, 592.0], [43.3, 592.0], [43.4, 600.0], [43.5, 600.0], [43.6, 603.0], [43.7, 620.0], [43.8, 620.0], [43.9, 626.0], [44.0, 668.0], [44.1, 668.0], [44.2, 674.0], [44.3, 674.0], [44.4, 677.0], [44.5, 680.0], [44.6, 680.0], [44.7, 682.0], [44.8, 688.0], [44.9, 688.0], [45.0, 689.0], [45.1, 689.0], [45.2, 699.0], [45.3, 712.0], [45.4, 712.0], [45.5, 727.0], [45.6, 732.0], [45.7, 732.0], [45.8, 733.0], [45.9, 733.0], [46.0, 740.0], [46.1, 742.0], [46.2, 742.0], [46.3, 749.0], [46.4, 751.0], [46.5, 751.0], [46.6, 752.0], [46.7, 752.0], [46.8, 759.0], [46.9, 762.0], [47.0, 762.0], [47.1, 764.0], [47.2, 788.0], [47.3, 788.0], [47.4, 807.0], [47.5, 807.0], [47.6, 811.0], [47.7, 814.0], [47.8, 814.0], [47.9, 826.0], [48.0, 831.0], [48.1, 831.0], [48.2, 839.0], [48.3, 839.0], [48.4, 840.0], [48.5, 859.0], [48.6, 859.0], [48.7, 860.0], [48.8, 860.0], [48.9, 860.0], [49.0, 863.0], [49.1, 863.0], [49.2, 869.0], [49.3, 872.0], [49.4, 872.0], [49.5, 877.0], [49.6, 886.0], [49.7, 886.0], [49.8, 886.0], [49.9, 886.0], [50.0, 895.0], [50.1, 898.0], [50.2, 898.0], [50.3, 901.0], [50.4, 912.0], [50.5, 912.0], [50.6, 932.0], [50.7, 932.0], [50.8, 936.0], [50.9, 938.0], [51.0, 938.0], [51.1, 947.0], [51.2, 952.0], [51.3, 952.0], [51.4, 957.0], [51.5, 957.0], [51.6, 961.0], [51.7, 964.0], [51.8, 964.0], [51.9, 973.0], [52.0, 974.0], [52.1, 974.0], [52.2, 977.0], [52.3, 977.0], [52.4, 981.0], [52.5, 987.0], [52.6, 987.0], [52.7, 987.0], [52.8, 988.0], [52.9, 988.0], [53.0, 989.0], [53.1, 989.0], [53.2, 991.0], [53.3, 991.0], [53.4, 991.0], [53.5, 993.0], [53.6, 994.0], [53.7, 994.0], [53.8, 995.0], [53.9, 995.0], [54.0, 997.0], [54.1, 1001.0], [54.2, 1001.0], [54.3, 1002.0], [54.4, 1014.0], [54.5, 1014.0], [54.6, 1015.0], [54.7, 1015.0], [54.8, 1022.0], [54.9, 1031.0], [55.0, 1031.0], [55.1, 1034.0], [55.2, 1035.0], [55.3, 1035.0], [55.4, 1037.0], [55.5, 1037.0], [55.6, 1039.0], [55.7, 1041.0], [55.8, 1041.0], [55.9, 1041.0], [56.0, 1044.0], [56.1, 1044.0], [56.2, 1048.0], [56.3, 1048.0], [56.4, 1052.0], [56.5, 1055.0], [56.6, 1055.0], [56.7, 1060.0], [56.8, 1064.0], [56.9, 1064.0], [57.0, 1080.0], [57.1, 1080.0], [57.2, 1087.0], [57.3, 1092.0], [57.4, 1092.0], [57.5, 1092.0], [57.6, 1118.0], [57.7, 1118.0], [57.8, 1122.0], [57.9, 1122.0], [58.0, 1126.0], [58.1, 1144.0], [58.2, 1144.0], [58.3, 1167.0], [58.4, 1168.0], [58.5, 1168.0], [58.6, 1173.0], [58.7, 1173.0], [58.8, 1178.0], [58.9, 1211.0], [59.0, 1211.0], [59.1, 1226.0], [59.2, 1234.0], [59.3, 1234.0], [59.4, 1240.0], [59.5, 1240.0], [59.6, 1247.0], [59.7, 1248.0], [59.8, 1248.0], [59.9, 1259.0], [60.0, 1263.0], [60.1, 1263.0], [60.2, 1269.0], [60.3, 1269.0], [60.4, 1269.0], [60.5, 1284.0], [60.6, 1284.0], [60.7, 1286.0], [60.8, 1360.0], [60.9, 1360.0], [61.0, 1364.0], [61.1, 1364.0], [61.2, 1365.0], [61.3, 1366.0], [61.4, 1366.0], [61.5, 1370.0], [61.6, 1375.0], [61.7, 1375.0], [61.8, 1377.0], [61.9, 1377.0], [62.0, 1386.0], [62.1, 1397.0], [62.2, 1397.0], [62.3, 1398.0], [62.4, 1408.0], [62.5, 1408.0], [62.6, 1410.0], [62.7, 1410.0], [62.8, 1410.0], [62.9, 1412.0], [63.0, 1412.0], [63.1, 1412.0], [63.2, 1428.0], [63.3, 1428.0], [63.4, 1437.0], [63.5, 1437.0], [63.6, 1443.0], [63.7, 1450.0], [63.8, 1450.0], [63.9, 1451.0], [64.0, 1451.0], [64.1, 1451.0], [64.2, 1452.0], [64.3, 1452.0], [64.4, 1453.0], [64.5, 1455.0], [64.6, 1455.0], [64.7, 1455.0], [64.8, 1455.0], [64.9, 1455.0], [65.0, 1459.0], [65.1, 1459.0], [65.2, 1464.0], [65.3, 1464.0], [65.4, 1464.0], [65.5, 1476.0], [65.6, 1476.0], [65.7, 1476.0], [65.8, 1477.0], [65.9, 1477.0], [66.0, 1481.0], [66.1, 1484.0], [66.2, 1484.0], [66.3, 1485.0], [66.4, 1489.0], [66.5, 1489.0], [66.6, 1494.0], [66.7, 1494.0], [66.8, 1494.0], [66.9, 1504.0], [67.0, 1504.0], [67.1, 1515.0], [67.2, 1516.0], [67.3, 1516.0], [67.4, 1519.0], [67.5, 1519.0], [67.6, 1522.0], [67.7, 1537.0], [67.8, 1537.0], [67.9, 1545.0], [68.0, 1546.0], [68.1, 1546.0], [68.2, 1557.0], [68.3, 1557.0], [68.4, 1567.0], [68.5, 1570.0], [68.6, 1570.0], [68.7, 1578.0], [68.8, 1583.0], [68.9, 1583.0], [69.0, 1585.0], [69.1, 1585.0], [69.2, 1586.0], [69.3, 1609.0], [69.4, 1609.0], [69.5, 1609.0], [69.6, 1611.0], [69.7, 1611.0], [69.8, 1619.0], [69.9, 1619.0], [70.0, 1619.0], [70.1, 1620.0], [70.2, 1620.0], [70.3, 1623.0], [70.4, 1636.0], [70.5, 1636.0], [70.6, 1642.0], [70.7, 1642.0], [70.8, 1647.0], [70.9, 1649.0], [71.0, 1649.0], [71.1, 1649.0], [71.2, 1652.0], [71.3, 1652.0], [71.4, 1655.0], [71.5, 1655.0], [71.6, 1656.0], [71.7, 1657.0], [71.8, 1657.0], [71.9, 1661.0], [72.0, 1664.0], [72.1, 1664.0], [72.2, 1665.0], [72.3, 1665.0], [72.4, 1667.0], [72.5, 1671.0], [72.6, 1671.0], [72.7, 1682.0], [72.8, 1690.0], [72.9, 1690.0], [73.0, 1698.0], [73.1, 1698.0], [73.2, 1715.0], [73.3, 1720.0], [73.4, 1720.0], [73.5, 1724.0], [73.6, 1725.0], [73.7, 1725.0], [73.8, 1733.0], [73.9, 1733.0], [74.0, 1735.0], [74.1, 1741.0], [74.2, 1741.0], [74.3, 1743.0], [74.4, 1744.0], [74.5, 1744.0], [74.6, 1744.0], [74.7, 1744.0], [74.8, 1749.0], [74.9, 1753.0], [75.0, 1753.0], [75.1, 1758.0], [75.2, 1765.0], [75.3, 1765.0], [75.4, 1766.0], [75.5, 1766.0], [75.6, 1767.0], [75.7, 1773.0], [75.8, 1773.0], [75.9, 1775.0], [76.0, 1777.0], [76.1, 1777.0], [76.2, 1783.0], [76.3, 1783.0], [76.4, 1784.0], [76.5, 1788.0], [76.6, 1788.0], [76.7, 1789.0], [76.8, 1789.0], [76.9, 1789.0], [77.0, 1799.0], [77.1, 1799.0], [77.2, 1801.0], [77.3, 1802.0], [77.4, 1802.0], [77.5, 1802.0], [77.6, 1816.0], [77.7, 1816.0], [77.8, 1816.0], [77.9, 1816.0], [78.0, 1820.0], [78.1, 1820.0], [78.2, 1820.0], [78.3, 1824.0], [78.4, 1825.0], [78.5, 1825.0], [78.6, 1826.0], [78.7, 1826.0], [78.8, 1827.0], [78.9, 1828.0], [79.0, 1828.0], [79.1, 1829.0], [79.2, 1831.0], [79.3, 1831.0], [79.4, 1836.0], [79.5, 1836.0], [79.6, 1840.0], [79.7, 1843.0], [79.8, 1843.0], [79.9, 1847.0], [80.0, 1849.0], [80.1, 1849.0], [80.2, 1853.0], [80.3, 1853.0], [80.4, 1854.0], [80.5, 1856.0], [80.6, 1856.0], [80.7, 1867.0], [80.8, 1873.0], [80.9, 1873.0], [81.0, 1873.0], [81.1, 1873.0], [81.2, 1882.0], [81.3, 1883.0], [81.4, 1883.0], [81.5, 1885.0], [81.6, 1886.0], [81.7, 1886.0], [81.8, 1887.0], [81.9, 1887.0], [82.0, 1887.0], [82.1, 1887.0], [82.2, 1887.0], [82.3, 1887.0], [82.4, 1888.0], [82.5, 1888.0], [82.6, 1888.0], [82.7, 1888.0], [82.8, 1889.0], [82.9, 1890.0], [83.0, 1890.0], [83.1, 1891.0], [83.2, 1895.0], [83.3, 1895.0], [83.4, 1896.0], [83.5, 1896.0], [83.6, 1902.0], [83.7, 1915.0], [83.8, 1915.0], [83.9, 1919.0], [84.0, 1924.0], [84.1, 1924.0], [84.2, 1931.0], [84.3, 1931.0], [84.4, 1933.0], [84.5, 1936.0], [84.6, 1936.0], [84.7, 1938.0], [84.8, 1945.0], [84.9, 1945.0], [85.0, 1948.0], [85.1, 1948.0], [85.2, 1955.0], [85.3, 1961.0], [85.4, 1961.0], [85.5, 1962.0], [85.6, 1963.0], [85.7, 1963.0], [85.8, 1964.0], [85.9, 1964.0], [86.0, 1967.0], [86.1, 1968.0], [86.2, 1968.0], [86.3, 1969.0], [86.4, 1978.0], [86.5, 1978.0], [86.6, 1978.0], [86.7, 1978.0], [86.8, 1989.0], [86.9, 1990.0], [87.0, 1990.0], [87.1, 1992.0], [87.2, 1996.0], [87.3, 1996.0], [87.4, 2002.0], [87.5, 2002.0], [87.6, 2006.0], [87.7, 2008.0], [87.8, 2008.0], [87.9, 2018.0], [88.0, 2018.0], [88.1, 2018.0], [88.2, 2026.0], [88.3, 2026.0], [88.4, 2028.0], [88.5, 2030.0], [88.6, 2030.0], [88.7, 2034.0], [88.8, 2038.0], [88.9, 2038.0], [89.0, 2044.0], [89.1, 2044.0], [89.2, 2045.0], [89.3, 2049.0], [89.4, 2049.0], [89.5, 2075.0], [89.6, 2079.0], [89.7, 2079.0], [89.8, 2083.0], [89.9, 2083.0], [90.0, 2111.0], [90.1, 2111.0], [90.2, 2111.0], [90.3, 2115.0], [90.4, 2116.0], [90.5, 2116.0], [90.6, 2117.0], [90.7, 2117.0], [90.8, 2118.0], [90.9, 2123.0], [91.0, 2123.0], [91.1, 2126.0], [91.2, 2128.0], [91.3, 2128.0], [91.4, 2129.0], [91.5, 2129.0], [91.6, 2129.0], [91.7, 2130.0], [91.8, 2130.0], [91.9, 2131.0], [92.0, 2138.0], [92.1, 2138.0], [92.2, 2148.0], [92.3, 2148.0], [92.4, 2149.0], [92.5, 2153.0], [92.6, 2153.0], [92.7, 2158.0], [92.8, 2165.0], [92.9, 2165.0], [93.0, 2167.0], [93.1, 2167.0], [93.2, 2173.0], [93.3, 2175.0], [93.4, 2175.0], [93.5, 2181.0], [93.6, 2181.0], [93.7, 2181.0], [93.8, 2185.0], [93.9, 2185.0], [94.0, 2189.0], [94.1, 2195.0], [94.2, 2195.0], [94.3, 2205.0], [94.4, 2206.0], [94.5, 2206.0], [94.6, 2208.0], [94.7, 2208.0], [94.8, 2209.0], [94.9, 2212.0], [95.0, 2212.0], [95.1, 2213.0], [95.2, 2213.0], [95.3, 2213.0], [95.4, 2216.0], [95.5, 2216.0], [95.6, 2219.0], [95.7, 2220.0], [95.8, 2220.0], [95.9, 2228.0], [96.0, 2234.0], [96.1, 2234.0], [96.2, 2237.0], [96.3, 2237.0], [96.4, 2238.0], [96.5, 2242.0], [96.6, 2242.0], [96.7, 2244.0], [96.8, 2244.0], [96.9, 2244.0], [97.0, 2248.0], [97.1, 2248.0], [97.2, 2253.0], [97.3, 2258.0], [97.4, 2258.0], [97.5, 2263.0], [97.6, 2264.0], [97.7, 2264.0], [97.8, 2283.0], [97.9, 2283.0], [98.0, 2293.0], [98.1, 2299.0], [98.2, 2299.0], [98.3, 2307.0], [98.4, 2318.0], [98.5, 2318.0], [98.6, 2320.0], [98.7, 2320.0], [98.8, 2320.0], [98.9, 2322.0], [99.0, 2322.0], [99.1, 2325.0], [99.2, 2336.0], [99.3, 2336.0], [99.4, 2339.0], [99.5, 2339.0], [99.6, 2360.0], [99.7, 2385.0], [99.8, 2385.0], [99.9, 2413.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 139.0, "series": [{"data": [[0.0, 139.0], [600.0, 12.0], [700.0, 13.0], [800.0, 18.0], [900.0, 24.0], [1000.0, 22.0], [1100.0, 8.0], [1200.0, 12.0], [1300.0, 10.0], [1400.0, 28.0], [1500.0, 15.0], [100.0, 28.0], [1600.0, 24.0], [1700.0, 25.0], [1800.0, 40.0], [1900.0, 24.0], [2000.0, 16.0], [2100.0, 27.0], [2200.0, 25.0], [2300.0, 10.0], [2400.0, 1.0], [200.0, 25.0], [300.0, 29.0], [400.0, 33.0], [500.0, 17.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 161.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 257.0, "series": [{"data": [[0.0, 257.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 161.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 207.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 287.0911999999999, "minX": 1.75557576E12, "maxY": 287.0911999999999, "series": [{"data": [[1.75557576E12, 287.0911999999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557576E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 38.0, "minX": 1.0, "maxY": 2385.0, "series": [{"data": [[2.0, 54.0], [3.0, 53.0], [4.0, 52.0], [5.0, 52.0], [6.0, 50.0], [7.0, 49.0], [8.0, 49.0], [9.0, 48.0], [10.0, 48.0], [11.0, 47.0], [13.0, 43.5], [14.0, 40.0], [15.0, 38.0], [16.0, 71.0], [17.0, 47.0], [18.0, 45.0], [19.0, 40.0], [22.0, 66.0], [25.0, 63.0], [26.0, 64.5], [27.0, 64.0], [29.0, 63.0], [30.0, 62.0], [31.0, 62.0], [32.0, 59.5], [35.0, 59.0], [34.0, 58.0], [37.0, 55.0], [39.0, 39.0], [38.0, 57.0], [41.0, 65.0], [43.0, 62.0], [45.0, 76.5], [48.0, 62.25], [50.0, 60.0], [53.0, 58.0], [52.0, 59.0], [55.0, 51.0], [54.0, 53.0], [57.0, 75.0], [56.0, 80.0], [59.0, 68.5], [61.0, 78.0], [60.0, 70.0], [62.0, 52.0], [64.0, 52.0], [71.0, 1992.0], [70.0, 1183.0], [68.0, 1754.75], [74.0, 2385.0], [73.0, 1120.0], [79.0, 57.0], [78.0, 39.0], [77.0, 40.0], [76.0, 51.5], [82.0, 47.5], [80.0, 40.0], [87.0, 1175.0], [85.0, 43.0], [84.0, 48.0], [91.0, 2283.0], [90.0, 1936.0], [89.0, 2208.5], [95.0, 2220.0], [94.0, 2253.0], [93.0, 2217.5], [99.0, 2111.0], [98.0, 2189.0], [97.0, 2118.0], [96.0, 1996.0], [103.0, 2208.0], [102.0, 2132.5], [100.0, 2325.0], [106.0, 1180.5], [104.0, 2322.0], [109.0, 2339.0], [115.0, 2234.0], [114.0, 1126.0], [113.0, 2299.0], [112.0, 2145.8], [119.0, 1961.0], [118.0, 2111.0], [117.0, 40.0], [116.0, 1888.0], [122.0, 2185.0], [121.0, 1867.0], [120.0, 2213.0], [127.0, 2116.0], [126.0, 2243.0], [124.0, 2247.5], [135.0, 2263.0], [134.0, 1902.0], [133.0, 2242.0], [132.0, 2065.5], [130.0, 2158.0], [129.0, 1636.5], [143.0, 1992.5], [141.0, 2244.0], [140.0, 2205.0], [139.0, 2119.0], [137.0, 1087.0], [136.0, 2149.0], [151.0, 2006.0], [150.0, 1052.0], [149.0, 1944.5], [147.0, 2213.0], [146.0, 2228.0], [145.0, 2209.0], [144.0, 1055.0], [158.0, 1836.0], [157.0, 1037.0], [156.0, 2079.0], [155.0, 1897.0], [153.0, 1820.0], [152.0, 1827.0], [167.0, 1955.0], [166.0, 1826.0], [165.0, 1843.0], [164.0, 1890.0], [163.0, 1844.5], [161.0, 2049.0], [160.0, 2029.5], [174.0, 2151.5], [172.0, 2181.0], [171.0, 1022.0], [170.0, 1931.0], [169.0, 2001.5], [183.0, 2167.0], [182.0, 997.0], [181.0, 1802.0], [180.0, 1784.0], [179.0, 2173.0], [178.0, 1002.0], [177.0, 2129.0], [176.0, 1419.0], [191.0, 1546.5], [190.0, 989.0], [189.0, 991.0], [187.0, 1512.5], [185.0, 991.0], [184.0, 988.0], [197.0, 2130.0], [195.0, 2148.0], [194.0, 1765.0], [193.0, 2131.0], [192.0, 2117.0], [207.0, 1741.0], [206.0, 1922.0], [204.0, 2126.0], [203.0, 1775.75], [201.0, 1961.5], [214.0, 1896.0], [213.0, 886.0], [212.0, 1801.0], [211.0, 2044.0], [210.0, 1886.0], [209.0, 1883.0], [208.0, 895.0], [223.0, 2031.0], [221.0, 1873.0], [220.0, 869.0], [219.0, 1849.0], [218.0, 1758.0], [217.0, 1873.0], [216.0, 1852.5], [231.0, 2030.0], [230.0, 1856.0], [229.0, 2018.0], [228.0, 1924.5], [226.0, 1749.0], [225.0, 860.0], [224.0, 863.0], [239.0, 1642.0], [238.0, 814.0], [237.0, 1816.0], [236.0, 1989.0], [235.0, 826.0], [234.0, 849.5], [232.0, 1847.0], [247.0, 1968.0], [246.0, 1848.6666666666667], [245.0, 1690.0], [243.0, 1948.0], [241.0, 1933.0], [240.0, 1724.0], [255.0, 1647.0], [254.0, 840.0], [253.0, 1744.0], [252.0, 1743.5], [250.0, 1938.0], [249.0, 40.0], [248.0, 1964.0], [270.0, 984.0], [271.0, 1820.0], [268.0, 1766.0], [259.0, 752.0], [258.0, 1623.0], [257.0, 1657.0], [256.0, 1799.0], [267.0, 1777.0], [266.0, 1649.0], [265.0, 1665.0], [264.0, 1792.0], [262.0, 1203.5], [260.0, 1516.0], [286.0, 1683.0], [287.0, 1885.0], [284.0, 740.0], [274.0, 1645.5], [273.0, 764.0], [283.0, 1494.0], [282.0, 1753.0], [281.0, 751.0], [279.0, 1682.0], [278.0, 1888.0], [277.0, 759.0], [276.0, 1808.0], [303.0, 525.0], [301.0, 1184.0], [299.0, 680.0], [298.0, 1854.0], [297.0, 727.0], [296.0, 1830.0], [294.0, 1455.0], [293.0, 1233.0], [291.0, 1237.5], [290.0, 742.0], [288.0, 1882.0], [317.0, 1504.0], [319.0, 1788.0], [316.0, 1557.0], [307.0, 688.0], [306.0, 689.0], [305.0, 1625.0], [304.0, 1773.0], [315.0, 668.0], [314.0, 1825.0], [313.0, 1481.0], [312.0, 1789.0], [311.0, 1567.0], [310.0, 677.0], [309.0, 682.0], [308.0, 674.0], [334.0, 1485.0], [335.0, 1464.0], [333.0, 1365.0], [332.0, 1452.0], [331.0, 600.0], [330.0, 620.0], [329.0, 1522.0], [328.0, 1460.5], [326.0, 1775.0], [323.0, 1578.0], [322.0, 44.0], [321.0, 1476.0], [320.0, 934.0], [325.0, 1196.5], [350.0, 779.0], [351.0, 532.8], [349.0, 790.0], [346.0, 1036.25], [345.0, 52.0], [344.0, 54.0], [343.0, 729.0], [342.0, 47.0], [341.0, 1459.0], [340.0, 1519.0], [348.0, 1017.6666666666666], [339.0, 603.0], [338.0, 1455.0], [337.0, 1701.5], [355.0, 520.625], [366.0, 794.25], [364.0, 873.6666666666667], [365.0, 1667.0], [362.0, 687.4], [363.0, 689.5], [360.0, 543.6], [367.0, 513.0], [361.0, 1015.0], [358.0, 457.1666666666667], [357.0, 757.0], [359.0, 166.75], [356.0, 606.8571428571429], [353.0, 646.75], [354.0, 714.5], [352.0, 761.5], [382.0, 1076.0], [369.0, 223.66666666666666], [375.0, 56.666666666666664], [383.0, 498.0], [380.0, 1269.0], [371.0, 747.6666666666667], [378.0, 506.0], [377.0, 1661.0], [376.0, 536.0], [374.0, 1611.0], [373.0, 1370.0], [372.0, 539.0], [398.0, 500.0], [399.0, 347.0], [397.0, 481.0], [396.0, 372.0], [394.0, 1537.0], [393.0, 491.0], [392.0, 1515.0], [390.0, 1619.0], [387.0, 493.0], [386.0, 742.3333333333334], [388.0, 38.0], [403.0, 456.0], [414.0, 297.3333333333333], [411.0, 438.0], [409.0, 453.0], [407.0, 226.5], [405.0, 451.0], [404.0, 451.0], [402.0, 473.0], [401.0, 192.0], [400.0, 1609.0], [419.0, 987.0], [430.0, 1211.0], [428.0, 424.0], [417.0, 432.0], [416.0, 447.5], [427.0, 1489.0], [426.0, 431.0], [425.0, 1570.0], [423.0, 463.0], [422.0, 445.0], [421.0, 430.0], [420.0, 1583.0], [445.0, 370.5], [447.0, 354.0], [440.0, 58.0], [446.0, 351.0], [443.0, 381.0], [442.0, 384.3333333333333], [439.0, 739.3333333333334], [432.0, 433.5], [434.0, 409.0], [433.0, 434.0], [438.0, 406.5], [437.0, 397.0], [460.0, 274.0], [454.0, 61.5], [462.0, 237.33333333333334], [459.0, 238.0], [457.0, 316.0], [456.0, 149.0], [455.0, 339.5], [449.0, 348.0], [448.0, 354.0], [451.0, 349.0], [450.0, 367.0], [453.0, 345.0], [452.0, 346.0], [476.0, 173.0], [465.0, 764.0], [464.0, 40.5], [466.0, 303.0], [473.0, 1068.0], [475.0, 1170.5], [477.0, 1178.0], [472.0, 295.0], [471.0, 1428.0], [470.0, 40.0], [469.0, 1029.6666666666667], [494.0, 995.0], [495.0, 220.0], [493.0, 237.0], [492.0, 272.5], [490.0, 267.0], [489.0, 101.0], [488.0, 293.0], [487.0, 293.0], [483.0, 298.0], [482.0, 1397.0], [481.0, 120.0], [485.0, 285.5], [498.0, 1173.0], [499.0, 789.5], [497.0, 254.5], [496.0, 266.0], [511.0, 1286.0], [510.0, 1234.0], [509.0, 187.0], [507.0, 191.0], [504.0, 195.0], [503.0, 234.0], [502.0, 192.0], [501.0, 1360.0], [500.0, 1105.3333333333333], [539.0, 131.0], [514.0, 660.0], [527.0, 46.0], [525.0, 155.0], [523.0, 157.0], [522.0, 44.0], [521.0, 104.5], [515.0, 353.6666666666667], [543.0, 76.0], [530.0, 987.0], [529.0, 529.5], [532.0, 150.0], [531.0, 993.0], [542.0, 1263.0], [541.0, 700.0], [538.0, 602.0], [537.0, 1118.0], [519.0, 1080.0], [518.0, 88.0], [535.0, 714.0], [533.0, 1248.0], [547.0, 1240.0], [546.0, 1259.0], [545.0, 145.0], [544.0, 1226.0], [1.0, 66.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}, {"data": [[287.0911999999999, 977.5264000000006]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 547.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4750.0, "minX": 1.75557576E12, "maxY": 61687.5, "series": [{"data": [[1.75557576E12, 61687.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75557576E12, 4750.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557576E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 977.5264000000006, "minX": 1.75557576E12, "maxY": 977.5264000000006, "series": [{"data": [[1.75557576E12, 977.5264000000006]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557576E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 970.4768000000006, "minX": 1.75557576E12, "maxY": 970.4768000000006, "series": [{"data": [[1.75557576E12, 970.4768000000006]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557576E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 941.3023999999996, "minX": 1.75557576E12, "maxY": 941.3023999999996, "series": [{"data": [[1.75557576E12, 941.3023999999996]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557576E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 37.0, "minX": 1.75557576E12, "maxY": 2413.0, "series": [{"data": [[1.75557576E12, 2413.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75557576E12, 2111.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75557576E12, 2324.2200000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75557576E12, 2212.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75557576E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75557576E12, 895.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557576E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 349.0, "minX": 227.0, "maxY": 1529.5, "series": [{"data": [[398.0, 1529.5], [227.0, 349.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 398.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 326.0, "minX": 227.0, "maxY": 1529.5, "series": [{"data": [[398.0, 1529.5], [227.0, 326.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 398.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.416666666666666, "minX": 1.75557576E12, "maxY": 10.416666666666666, "series": [{"data": [[1.75557576E12, 10.416666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557576E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 10.416666666666666, "minX": 1.75557576E12, "maxY": 10.416666666666666, "series": [{"data": [[1.75557576E12, 10.416666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557576E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 10.416666666666666, "minX": 1.75557576E12, "maxY": 10.416666666666666, "series": [{"data": [[1.75557576E12, 10.416666666666666]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557576E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 10.416666666666666, "minX": 1.75557576E12, "maxY": 10.416666666666666, "series": [{"data": [[1.75557576E12, 10.416666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557576E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

