/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "maxY": 5852.0, "series": [{"data": [[0.0, 24.0], [0.1, 25.0], [0.2, 28.0], [0.3, 28.0], [0.4, 29.0], [0.5, 31.0], [0.6, 31.0], [0.7, 32.0], [0.8, 32.0], [0.9, 33.0], [1.0, 33.0], [1.1, 33.0], [1.2, 34.0], [1.3, 34.0], [1.4, 35.0], [1.5, 35.0], [1.6, 36.0], [1.7, 36.0], [1.8, 37.0], [1.9, 38.0], [2.0, 40.0], [2.1, 44.0], [2.2, 48.0], [2.3, 58.0], [2.4, 59.0], [2.5, 59.0], [2.6, 62.0], [2.7, 65.0], [2.8, 65.0], [2.9, 67.0], [3.0, 71.0], [3.1, 74.0], [3.2, 83.0], [3.3, 107.0], [3.4, 114.0], [3.5, 130.0], [3.6, 132.0], [3.7, 134.0], [3.8, 141.0], [3.9, 149.0], [4.0, 158.0], [4.1, 163.0], [4.2, 165.0], [4.3, 170.0], [4.4, 175.0], [4.5, 186.0], [4.6, 188.0], [4.7, 193.0], [4.8, 195.0], [4.9, 200.0], [5.0, 210.0], [5.1, 229.0], [5.2, 236.0], [5.3, 252.0], [5.4, 261.0], [5.5, 263.0], [5.6, 269.0], [5.7, 330.0], [5.8, 335.0], [5.9, 345.0], [6.0, 367.0], [6.1, 394.0], [6.2, 420.0], [6.3, 423.0], [6.4, 425.0], [6.5, 427.0], [6.6, 433.0], [6.7, 439.0], [6.8, 456.0], [6.9, 465.0], [7.0, 467.0], [7.1, 470.0], [7.2, 470.0], [7.3, 471.0], [7.4, 476.0], [7.5, 481.0], [7.6, 482.0], [7.7, 486.0], [7.8, 490.0], [7.9, 544.0], [8.0, 592.0], [8.1, 805.0], [8.2, 875.0], [8.3, 895.0], [8.4, 916.0], [8.5, 925.0], [8.6, 936.0], [8.7, 977.0], [8.8, 979.0], [8.9, 982.0], [9.0, 982.0], [9.1, 986.0], [9.2, 988.0], [9.3, 989.0], [9.4, 994.0], [9.5, 995.0], [9.6, 996.0], [9.7, 999.0], [9.8, 1001.0], [9.9, 1003.0], [10.0, 1009.0], [10.1, 1015.0], [10.2, 1025.0], [10.3, 1062.0], [10.4, 1089.0], [10.5, 1096.0], [10.6, 1146.0], [10.7, 1153.0], [10.8, 1217.0], [10.9, 1224.0], [11.0, 1260.0], [11.1, 1261.0], [11.2, 1270.0], [11.3, 1273.0], [11.4, 1296.0], [11.5, 1306.0], [11.6, 1310.0], [11.7, 1319.0], [11.8, 1361.0], [11.9, 1367.0], [12.0, 1373.0], [12.1, 1377.0], [12.2, 1378.0], [12.3, 1396.0], [12.4, 1399.0], [12.5, 1405.0], [12.6, 1432.0], [12.7, 1434.0], [12.8, 1460.0], [12.9, 1461.0], [13.0, 1475.0], [13.1, 1497.0], [13.2, 1500.0], [13.3, 1526.0], [13.4, 1528.0], [13.5, 1571.0], [13.6, 1609.0], [13.7, 1641.0], [13.8, 1651.0], [13.9, 1661.0], [14.0, 1663.0], [14.1, 1667.0], [14.2, 1668.0], [14.3, 1675.0], [14.4, 1679.0], [14.5, 1682.0], [14.6, 1689.0], [14.7, 1695.0], [14.8, 1697.0], [14.9, 1699.0], [15.0, 1700.0], [15.1, 1701.0], [15.2, 1701.0], [15.3, 1702.0], [15.4, 1702.0], [15.5, 1710.0], [15.6, 1713.0], [15.7, 1718.0], [15.8, 1724.0], [15.9, 1728.0], [16.0, 1740.0], [16.1, 1771.0], [16.2, 1836.0], [16.3, 1837.0], [16.4, 1848.0], [16.5, 1850.0], [16.6, 1882.0], [16.7, 1904.0], [16.8, 1911.0], [16.9, 1917.0], [17.0, 1926.0], [17.1, 1928.0], [17.2, 1928.0], [17.3, 1932.0], [17.4, 1933.0], [17.5, 1935.0], [17.6, 1937.0], [17.7, 1937.0], [17.8, 1949.0], [17.9, 1976.0], [18.0, 1996.0], [18.1, 2016.0], [18.2, 2020.0], [18.3, 2046.0], [18.4, 2056.0], [18.5, 2061.0], [18.6, 2071.0], [18.7, 2073.0], [18.8, 2075.0], [18.9, 2085.0], [19.0, 2092.0], [19.1, 2093.0], [19.2, 2095.0], [19.3, 2097.0], [19.4, 2098.0], [19.5, 2111.0], [19.6, 2114.0], [19.7, 2115.0], [19.8, 2122.0], [19.9, 2133.0], [20.0, 2138.0], [20.1, 2160.0], [20.2, 2163.0], [20.3, 2169.0], [20.4, 2184.0], [20.5, 2203.0], [20.6, 2219.0], [20.7, 2242.0], [20.8, 2259.0], [20.9, 2290.0], [21.0, 2299.0], [21.1, 2302.0], [21.2, 2315.0], [21.3, 2318.0], [21.4, 2319.0], [21.5, 2321.0], [21.6, 2322.0], [21.7, 2324.0], [21.8, 2325.0], [21.9, 2329.0], [22.0, 2333.0], [22.1, 2336.0], [22.2, 2339.0], [22.3, 2342.0], [22.4, 2344.0], [22.5, 2349.0], [22.6, 2352.0], [22.7, 2353.0], [22.8, 2358.0], [22.9, 2371.0], [23.0, 2388.0], [23.1, 2410.0], [23.2, 2412.0], [23.3, 2418.0], [23.4, 2425.0], [23.5, 2439.0], [23.6, 2457.0], [23.7, 2465.0], [23.8, 2475.0], [23.9, 2490.0], [24.0, 2492.0], [24.1, 2494.0], [24.2, 2505.0], [24.3, 2514.0], [24.4, 2518.0], [24.5, 2521.0], [24.6, 2527.0], [24.7, 2535.0], [24.8, 2538.0], [24.9, 2540.0], [25.0, 2545.0], [25.1, 2552.0], [25.2, 2554.0], [25.3, 2559.0], [25.4, 2563.0], [25.5, 2577.0], [25.6, 2578.0], [25.7, 2579.0], [25.8, 2581.0], [25.9, 2582.0], [26.0, 2594.0], [26.1, 2599.0], [26.2, 2613.0], [26.3, 2618.0], [26.4, 2618.0], [26.5, 2624.0], [26.6, 2632.0], [26.7, 2635.0], [26.8, 2637.0], [26.9, 2645.0], [27.0, 2652.0], [27.1, 2664.0], [27.2, 2664.0], [27.3, 2668.0], [27.4, 2673.0], [27.5, 2688.0], [27.6, 2690.0], [27.7, 2693.0], [27.8, 2695.0], [27.9, 2696.0], [28.0, 2698.0], [28.1, 2705.0], [28.2, 2709.0], [28.3, 2717.0], [28.4, 2726.0], [28.5, 2729.0], [28.6, 2734.0], [28.7, 2739.0], [28.8, 2739.0], [28.9, 2741.0], [29.0, 2742.0], [29.1, 2743.0], [29.2, 2747.0], [29.3, 2752.0], [29.4, 2759.0], [29.5, 2761.0], [29.6, 2763.0], [29.7, 2768.0], [29.8, 2771.0], [29.9, 2778.0], [30.0, 2781.0], [30.1, 2784.0], [30.2, 2787.0], [30.3, 2789.0], [30.4, 2791.0], [30.5, 2793.0], [30.6, 2795.0], [30.7, 2795.0], [30.8, 2798.0], [30.9, 2801.0], [31.0, 2806.0], [31.1, 2808.0], [31.2, 2810.0], [31.3, 2817.0], [31.4, 2818.0], [31.5, 2824.0], [31.6, 2825.0], [31.7, 2827.0], [31.8, 2833.0], [31.9, 2835.0], [32.0, 2836.0], [32.1, 2843.0], [32.2, 2846.0], [32.3, 2850.0], [32.4, 2850.0], [32.5, 2852.0], [32.6, 2853.0], [32.7, 2855.0], [32.8, 2856.0], [32.9, 2858.0], [33.0, 2859.0], [33.1, 2867.0], [33.2, 2874.0], [33.3, 2878.0], [33.4, 2882.0], [33.5, 2893.0], [33.6, 2894.0], [33.7, 2894.0], [33.8, 2897.0], [33.9, 2898.0], [34.0, 2898.0], [34.1, 2900.0], [34.2, 2901.0], [34.3, 2903.0], [34.4, 2907.0], [34.5, 2911.0], [34.6, 2915.0], [34.7, 2927.0], [34.8, 2930.0], [34.9, 2942.0], [35.0, 2944.0], [35.1, 2945.0], [35.2, 2948.0], [35.3, 2952.0], [35.4, 2954.0], [35.5, 2956.0], [35.6, 2964.0], [35.7, 2981.0], [35.8, 2983.0], [35.9, 2985.0], [36.0, 2986.0], [36.1, 2993.0], [36.2, 2998.0], [36.3, 2999.0], [36.4, 3001.0], [36.5, 3002.0], [36.6, 3005.0], [36.7, 3012.0], [36.8, 3012.0], [36.9, 3016.0], [37.0, 3017.0], [37.1, 3023.0], [37.2, 3024.0], [37.3, 3024.0], [37.4, 3027.0], [37.5, 3030.0], [37.6, 3031.0], [37.7, 3032.0], [37.8, 3035.0], [37.9, 3037.0], [38.0, 3040.0], [38.1, 3043.0], [38.2, 3046.0], [38.3, 3047.0], [38.4, 3051.0], [38.5, 3054.0], [38.6, 3059.0], [38.7, 3065.0], [38.8, 3066.0], [38.9, 3067.0], [39.0, 3067.0], [39.1, 3068.0], [39.2, 3069.0], [39.3, 3071.0], [39.4, 3074.0], [39.5, 3076.0], [39.6, 3077.0], [39.7, 3079.0], [39.8, 3080.0], [39.9, 3081.0], [40.0, 3083.0], [40.1, 3084.0], [40.2, 3085.0], [40.3, 3089.0], [40.4, 3089.0], [40.5, 3093.0], [40.6, 3097.0], [40.7, 3104.0], [40.8, 3106.0], [40.9, 3114.0], [41.0, 3127.0], [41.1, 3132.0], [41.2, 3150.0], [41.3, 3156.0], [41.4, 3162.0], [41.5, 3164.0], [41.6, 3168.0], [41.7, 3171.0], [41.8, 3175.0], [41.9, 3189.0], [42.0, 3196.0], [42.1, 3203.0], [42.2, 3211.0], [42.3, 3212.0], [42.4, 3216.0], [42.5, 3223.0], [42.6, 3224.0], [42.7, 3232.0], [42.8, 3237.0], [42.9, 3240.0], [43.0, 3243.0], [43.1, 3247.0], [43.2, 3248.0], [43.3, 3249.0], [43.4, 3250.0], [43.5, 3254.0], [43.6, 3257.0], [43.7, 3262.0], [43.8, 3266.0], [43.9, 3270.0], [44.0, 3272.0], [44.1, 3277.0], [44.2, 3280.0], [44.3, 3281.0], [44.4, 3282.0], [44.5, 3286.0], [44.6, 3287.0], [44.7, 3291.0], [44.8, 3291.0], [44.9, 3294.0], [45.0, 3295.0], [45.1, 3299.0], [45.2, 3305.0], [45.3, 3314.0], [45.4, 3315.0], [45.5, 3323.0], [45.6, 3323.0], [45.7, 3325.0], [45.8, 3327.0], [45.9, 3331.0], [46.0, 3338.0], [46.1, 3346.0], [46.2, 3348.0], [46.3, 3354.0], [46.4, 3354.0], [46.5, 3357.0], [46.6, 3360.0], [46.7, 3361.0], [46.8, 3361.0], [46.9, 3370.0], [47.0, 3377.0], [47.1, 3383.0], [47.2, 3385.0], [47.3, 3392.0], [47.4, 3393.0], [47.5, 3394.0], [47.6, 3396.0], [47.7, 3396.0], [47.8, 3397.0], [47.9, 3398.0], [48.0, 3398.0], [48.1, 3399.0], [48.2, 3400.0], [48.3, 3402.0], [48.4, 3403.0], [48.5, 3404.0], [48.6, 3406.0], [48.7, 3409.0], [48.8, 3410.0], [48.9, 3412.0], [49.0, 3413.0], [49.1, 3416.0], [49.2, 3421.0], [49.3, 3422.0], [49.4, 3425.0], [49.5, 3431.0], [49.6, 3432.0], [49.7, 3436.0], [49.8, 3444.0], [49.9, 3446.0], [50.0, 3447.0], [50.1, 3448.0], [50.2, 3448.0], [50.3, 3451.0], [50.4, 3451.0], [50.5, 3453.0], [50.6, 3453.0], [50.7, 3455.0], [50.8, 3457.0], [50.9, 3460.0], [51.0, 3462.0], [51.1, 3463.0], [51.2, 3464.0], [51.3, 3470.0], [51.4, 3473.0], [51.5, 3477.0], [51.6, 3486.0], [51.7, 3486.0], [51.8, 3489.0], [51.9, 3492.0], [52.0, 3493.0], [52.1, 3499.0], [52.2, 3501.0], [52.3, 3502.0], [52.4, 3504.0], [52.5, 3505.0], [52.6, 3509.0], [52.7, 3516.0], [52.8, 3518.0], [52.9, 3520.0], [53.0, 3521.0], [53.1, 3523.0], [53.2, 3524.0], [53.3, 3525.0], [53.4, 3526.0], [53.5, 3528.0], [53.6, 3529.0], [53.7, 3530.0], [53.8, 3533.0], [53.9, 3535.0], [54.0, 3536.0], [54.1, 3538.0], [54.2, 3539.0], [54.3, 3542.0], [54.4, 3545.0], [54.5, 3549.0], [54.6, 3551.0], [54.7, 3555.0], [54.8, 3556.0], [54.9, 3557.0], [55.0, 3559.0], [55.1, 3561.0], [55.2, 3562.0], [55.3, 3563.0], [55.4, 3564.0], [55.5, 3565.0], [55.6, 3565.0], [55.7, 3569.0], [55.8, 3579.0], [55.9, 3579.0], [56.0, 3580.0], [56.1, 3585.0], [56.2, 3589.0], [56.3, 3593.0], [56.4, 3595.0], [56.5, 3605.0], [56.6, 3610.0], [56.7, 3621.0], [56.8, 3622.0], [56.9, 3631.0], [57.0, 3632.0], [57.1, 3633.0], [57.2, 3637.0], [57.3, 3642.0], [57.4, 3648.0], [57.5, 3650.0], [57.6, 3655.0], [57.7, 3659.0], [57.8, 3661.0], [57.9, 3666.0], [58.0, 3672.0], [58.1, 3680.0], [58.2, 3687.0], [58.3, 3689.0], [58.4, 3697.0], [58.5, 3698.0], [58.6, 3704.0], [58.7, 3705.0], [58.8, 3708.0], [58.9, 3710.0], [59.0, 3713.0], [59.1, 3716.0], [59.2, 3720.0], [59.3, 3723.0], [59.4, 3724.0], [59.5, 3730.0], [59.6, 3731.0], [59.7, 3733.0], [59.8, 3733.0], [59.9, 3739.0], [60.0, 3740.0], [60.1, 3746.0], [60.2, 3753.0], [60.3, 3763.0], [60.4, 3765.0], [60.5, 3772.0], [60.6, 3776.0], [60.7, 3786.0], [60.8, 3787.0], [60.9, 3788.0], [61.0, 3790.0], [61.1, 3793.0], [61.2, 3795.0], [61.3, 3803.0], [61.4, 3810.0], [61.5, 3813.0], [61.6, 3813.0], [61.7, 3816.0], [61.8, 3817.0], [61.9, 3822.0], [62.0, 3824.0], [62.1, 3824.0], [62.2, 3825.0], [62.3, 3836.0], [62.4, 3837.0], [62.5, 3837.0], [62.6, 3841.0], [62.7, 3844.0], [62.8, 3849.0], [62.9, 3850.0], [63.0, 3854.0], [63.1, 3855.0], [63.2, 3857.0], [63.3, 3858.0], [63.4, 3859.0], [63.5, 3862.0], [63.6, 3864.0], [63.7, 3868.0], [63.8, 3869.0], [63.9, 3874.0], [64.0, 3875.0], [64.1, 3876.0], [64.2, 3879.0], [64.3, 3881.0], [64.4, 3884.0], [64.5, 3886.0], [64.6, 3891.0], [64.7, 3897.0], [64.8, 3897.0], [64.9, 3903.0], [65.0, 3907.0], [65.1, 3908.0], [65.2, 3915.0], [65.3, 3918.0], [65.4, 3922.0], [65.5, 3930.0], [65.6, 3931.0], [65.7, 3936.0], [65.8, 3942.0], [65.9, 3944.0], [66.0, 3946.0], [66.1, 3947.0], [66.2, 3948.0], [66.3, 3948.0], [66.4, 3948.0], [66.5, 3950.0], [66.6, 3953.0], [66.7, 3955.0], [66.8, 3956.0], [66.9, 3963.0], [67.0, 3964.0], [67.1, 3968.0], [67.2, 3970.0], [67.3, 3971.0], [67.4, 3975.0], [67.5, 3987.0], [67.6, 3987.0], [67.7, 3988.0], [67.8, 3988.0], [67.9, 3991.0], [68.0, 3992.0], [68.1, 3999.0], [68.2, 4001.0], [68.3, 4002.0], [68.4, 4004.0], [68.5, 4006.0], [68.6, 4007.0], [68.7, 4012.0], [68.8, 4013.0], [68.9, 4017.0], [69.0, 4022.0], [69.1, 4026.0], [69.2, 4027.0], [69.3, 4029.0], [69.4, 4036.0], [69.5, 4038.0], [69.6, 4039.0], [69.7, 4044.0], [69.8, 4050.0], [69.9, 4053.0], [70.0, 4058.0], [70.1, 4060.0], [70.2, 4066.0], [70.3, 4072.0], [70.4, 4076.0], [70.5, 4079.0], [70.6, 4096.0], [70.7, 4102.0], [70.8, 4103.0], [70.9, 4107.0], [71.0, 4121.0], [71.1, 4128.0], [71.2, 4131.0], [71.3, 4144.0], [71.4, 4145.0], [71.5, 4146.0], [71.6, 4148.0], [71.7, 4152.0], [71.8, 4158.0], [71.9, 4173.0], [72.0, 4173.0], [72.1, 4180.0], [72.2, 4185.0], [72.3, 4191.0], [72.4, 4192.0], [72.5, 4200.0], [72.6, 4203.0], [72.7, 4212.0], [72.8, 4213.0], [72.9, 4216.0], [73.0, 4217.0], [73.1, 4219.0], [73.2, 4230.0], [73.3, 4232.0], [73.4, 4233.0], [73.5, 4236.0], [73.6, 4237.0], [73.7, 4239.0], [73.8, 4243.0], [73.9, 4245.0], [74.0, 4247.0], [74.1, 4248.0], [74.2, 4251.0], [74.3, 4252.0], [74.4, 4253.0], [74.5, 4256.0], [74.6, 4257.0], [74.7, 4258.0], [74.8, 4259.0], [74.9, 4260.0], [75.0, 4260.0], [75.1, 4263.0], [75.2, 4264.0], [75.3, 4267.0], [75.4, 4269.0], [75.5, 4274.0], [75.6, 4275.0], [75.7, 4275.0], [75.8, 4276.0], [75.9, 4283.0], [76.0, 4284.0], [76.1, 4288.0], [76.2, 4289.0], [76.3, 4290.0], [76.4, 4291.0], [76.5, 4292.0], [76.6, 4294.0], [76.7, 4294.0], [76.8, 4296.0], [76.9, 4297.0], [77.0, 4300.0], [77.1, 4304.0], [77.2, 4307.0], [77.3, 4310.0], [77.4, 4315.0], [77.5, 4323.0], [77.6, 4323.0], [77.7, 4335.0], [77.8, 4337.0], [77.9, 4348.0], [78.0, 4353.0], [78.1, 4359.0], [78.2, 4364.0], [78.3, 4378.0], [78.4, 4382.0], [78.5, 4385.0], [78.6, 4388.0], [78.7, 4389.0], [78.8, 4390.0], [78.9, 4396.0], [79.0, 4398.0], [79.1, 4402.0], [79.2, 4403.0], [79.3, 4409.0], [79.4, 4417.0], [79.5, 4428.0], [79.6, 4430.0], [79.7, 4432.0], [79.8, 4432.0], [79.9, 4435.0], [80.0, 4439.0], [80.1, 4440.0], [80.2, 4440.0], [80.3, 4441.0], [80.4, 4443.0], [80.5, 4447.0], [80.6, 4449.0], [80.7, 4450.0], [80.8, 4454.0], [80.9, 4454.0], [81.0, 4459.0], [81.1, 4460.0], [81.2, 4461.0], [81.3, 4467.0], [81.4, 4467.0], [81.5, 4470.0], [81.6, 4474.0], [81.7, 4474.0], [81.8, 4475.0], [81.9, 4476.0], [82.0, 4477.0], [82.1, 4478.0], [82.2, 4482.0], [82.3, 4486.0], [82.4, 4488.0], [82.5, 4488.0], [82.6, 4488.0], [82.7, 4491.0], [82.8, 4493.0], [82.9, 4495.0], [83.0, 4496.0], [83.1, 4497.0], [83.2, 4498.0], [83.3, 4498.0], [83.4, 4501.0], [83.5, 4503.0], [83.6, 4504.0], [83.7, 4507.0], [83.8, 4510.0], [83.9, 4514.0], [84.0, 4518.0], [84.1, 4518.0], [84.2, 4520.0], [84.3, 4522.0], [84.4, 4525.0], [84.5, 4527.0], [84.6, 4529.0], [84.7, 4529.0], [84.8, 4531.0], [84.9, 4532.0], [85.0, 4534.0], [85.1, 4536.0], [85.2, 4542.0], [85.3, 4546.0], [85.4, 4551.0], [85.5, 4555.0], [85.6, 4560.0], [85.7, 4561.0], [85.8, 4563.0], [85.9, 4567.0], [86.0, 4569.0], [86.1, 4571.0], [86.2, 4572.0], [86.3, 4572.0], [86.4, 4576.0], [86.5, 4576.0], [86.6, 4579.0], [86.7, 4586.0], [86.8, 4588.0], [86.9, 4591.0], [87.0, 4595.0], [87.1, 4596.0], [87.2, 4601.0], [87.3, 4602.0], [87.4, 4606.0], [87.5, 4607.0], [87.6, 4608.0], [87.7, 4614.0], [87.8, 4615.0], [87.9, 4619.0], [88.0, 4623.0], [88.1, 4624.0], [88.2, 4632.0], [88.3, 4641.0], [88.4, 4649.0], [88.5, 4657.0], [88.6, 4664.0], [88.7, 4674.0], [88.8, 4677.0], [88.9, 4678.0], [89.0, 4686.0], [89.1, 4690.0], [89.2, 4694.0], [89.3, 4708.0], [89.4, 4708.0], [89.5, 4709.0], [89.6, 4719.0], [89.7, 4724.0], [89.8, 4727.0], [89.9, 4729.0], [90.0, 4735.0], [90.1, 4740.0], [90.2, 4746.0], [90.3, 4754.0], [90.4, 4757.0], [90.5, 4760.0], [90.6, 4763.0], [90.7, 4769.0], [90.8, 4774.0], [90.9, 4780.0], [91.0, 4783.0], [91.1, 4820.0], [91.2, 4822.0], [91.3, 4829.0], [91.4, 4831.0], [91.5, 4838.0], [91.6, 4842.0], [91.7, 4848.0], [91.8, 4850.0], [91.9, 4857.0], [92.0, 4863.0], [92.1, 4865.0], [92.2, 4876.0], [92.3, 4891.0], [92.4, 4897.0], [92.5, 4905.0], [92.6, 4914.0], [92.7, 4916.0], [92.8, 4920.0], [92.9, 4922.0], [93.0, 4928.0], [93.1, 4931.0], [93.2, 4941.0], [93.3, 4945.0], [93.4, 4957.0], [93.5, 4961.0], [93.6, 4964.0], [93.7, 4965.0], [93.8, 4968.0], [93.9, 4971.0], [94.0, 4989.0], [94.1, 4996.0], [94.2, 5002.0], [94.3, 5014.0], [94.4, 5047.0], [94.5, 5049.0], [94.6, 5058.0], [94.7, 5066.0], [94.8, 5070.0], [94.9, 5077.0], [95.0, 5097.0], [95.1, 5111.0], [95.2, 5114.0], [95.3, 5129.0], [95.4, 5145.0], [95.5, 5148.0], [95.6, 5155.0], [95.7, 5165.0], [95.8, 5205.0], [95.9, 5208.0], [96.0, 5212.0], [96.1, 5215.0], [96.2, 5224.0], [96.3, 5270.0], [96.4, 5291.0], [96.5, 5301.0], [96.6, 5316.0], [96.7, 5355.0], [96.8, 5369.0], [96.9, 5380.0], [97.0, 5401.0], [97.1, 5406.0], [97.2, 5441.0], [97.3, 5459.0], [97.4, 5501.0], [97.5, 5510.0], [97.6, 5541.0], [97.7, 5649.0], [97.8, 5652.0], [97.9, 5664.0], [98.0, 5672.0], [98.1, 5688.0], [98.2, 5689.0], [98.3, 5701.0], [98.4, 5701.0], [98.5, 5712.0], [98.6, 5728.0], [98.7, 5731.0], [98.8, 5732.0], [98.9, 5743.0], [99.0, 5760.0], [99.1, 5761.0], [99.2, 5764.0], [99.3, 5771.0], [99.4, 5779.0], [99.5, 5782.0], [99.6, 5796.0], [99.7, 5801.0], [99.8, 5829.0], [99.9, 5840.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 84.0, "series": [{"data": [[0.0, 61.0], [600.0, 1.0], [800.0, 5.0], [900.0, 26.0], [1000.0, 15.0], [1100.0, 5.0], [1200.0, 13.0], [1300.0, 18.0], [1400.0, 14.0], [1500.0, 8.0], [1600.0, 25.0], [1700.0, 22.0], [1800.0, 11.0], [1900.0, 26.0], [2000.0, 25.0], [2100.0, 20.0], [2200.0, 10.0], [2300.0, 38.0], [2400.0, 21.0], [2500.0, 37.0], [2600.0, 35.0], [2700.0, 53.0], [2800.0, 61.0], [2900.0, 42.0], [3000.0, 81.0], [3100.0, 27.0], [3200.0, 57.0], [3300.0, 57.0], [3400.0, 74.0], [3500.0, 81.0], [3600.0, 40.0], [3700.0, 51.0], [3800.0, 67.0], [3900.0, 61.0], [4000.0, 47.0], [4100.0, 35.0], [4200.0, 84.0], [4300.0, 39.0], [4400.0, 81.0], [4500.0, 71.0], [4600.0, 39.0], [4700.0, 34.0], [4800.0, 26.0], [4900.0, 32.0], [5000.0, 18.0], [5100.0, 12.0], [5200.0, 14.0], [5300.0, 9.0], [5400.0, 8.0], [5600.0, 12.0], [5500.0, 5.0], [5700.0, 26.0], [5800.0, 6.0], [100.0, 30.0], [200.0, 15.0], [300.0, 9.0], [400.0, 32.0], [500.0, 3.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1627.0, "series": [{"data": [[0.0, 146.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 100.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1627.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 938.0448000000002, "minX": 1.75559316E12, "maxY": 938.0448000000002, "series": [{"data": [[1.75559316E12, 938.0448000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559316E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 24.0, "minX": 3.0, "maxY": 5852.0, "series": [{"data": [[3.0, 5631.0], [4.0, 5760.0], [7.0, 4569.0], [10.0, 5727.333333333333], [11.0, 5852.0], [12.0, 5694.0], [13.0, 2850.0], [14.0, 5301.0], [17.0, 4288.0], [18.0, 3037.0], [19.0, 5364.0], [24.0, 4636.75], [25.0, 2835.0], [27.0, 3897.0], [28.0, 4207.0], [29.0, 4552.5], [30.0, 4036.0], [33.0, 4163.0], [32.0, 4850.0], [35.0, 4915.0], [37.0, 5349.5], [36.0, 4543.0], [39.0, 5058.0], [38.0, 4009.0], [40.0, 4897.0], [44.0, 4510.0], [47.0, 5771.0], [46.0, 5414.5], [51.0, 4463.4], [52.0, 5811.0], [55.0, 5682.0], [54.0, 4539.0], [56.0, 5094.0], [59.0, 3941.5], [58.0, 5664.0], [62.0, 4016.5], [66.0, 4371.333333333333], [64.0, 5224.0], [71.0, 4108.0], [70.0, 5369.0], [69.0, 5319.333333333333], [75.0, 2641.0], [74.0, 5291.0], [73.0, 5143.5], [78.0, 5204.0], [77.0, 4315.0], [81.0, 4950.666666666667], [87.0, 4731.333333333333], [85.0, 5070.0], [84.0, 3323.0], [90.0, 5103.5], [95.0, 5541.0], [94.0, 5782.0], [93.0, 4942.0], [92.0, 4248.5], [99.0, 5731.0], [98.0, 4478.0], [97.0, 3837.0], [96.0, 3280.0], [102.0, 4919.0], [101.0, 4773.0], [107.0, 5725.0], [106.0, 5510.0], [105.0, 5020.333333333333], [104.0, 4474.0], [111.0, 4223.0], [108.0, 5511.0], [115.0, 5111.0], [114.0, 5022.0], [113.0, 5098.0], [119.0, 3970.3333333333335], [118.0, 5732.0], [117.0, 4928.0], [121.0, 3936.0], [127.0, 3987.5], [126.0, 3987.0], [125.0, 3972.0], [124.0, 5614.5], [135.0, 4527.0], [133.0, 4776.5], [132.0, 4066.0], [131.0, 4812.0], [130.0, 4065.0], [128.0, 3987.0], [142.0, 4708.0], [140.0, 5101.0], [138.0, 4591.0], [136.0, 4459.0], [151.0, 4608.0], [148.0, 4576.0], [147.0, 4765.5], [146.0, 5198.0], [158.0, 4783.0], [157.0, 4678.0], [156.0, 4681.5], [154.0, 4687.0], [153.0, 4470.0], [152.0, 4440.0], [166.0, 5745.0], [165.0, 4774.0], [164.0, 4891.0], [163.0, 4664.0], [162.0, 4665.0], [161.0, 4722.5], [160.0, 5355.0], [175.0, 4607.0], [174.0, 4608.0], [173.0, 4614.0], [172.0, 4614.0], [171.0, 4618.0], [170.0, 4622.0], [168.0, 5251.5], [183.0, 4595.0], [181.0, 5665.0], [180.0, 4601.0], [179.0, 4602.0], [178.0, 4600.0], [177.0, 5159.5], [191.0, 4657.0], [189.0, 4839.0], [188.0, 4586.0], [187.0, 4587.0], [186.0, 4588.5], [184.0, 4593.0], [198.0, 4725.0], [197.0, 4571.0], [196.0, 5301.0], [195.0, 4754.0], [194.0, 4757.0], [193.0, 4575.0], [192.0, 5002.0], [207.0, 5122.0], [205.0, 4932.0], [203.0, 4528.0], [202.0, 4639.0], [200.0, 4562.0], [215.0, 4755.0], [213.0, 4759.5], [211.0, 4527.0], [210.0, 5688.0], [209.0, 4569.0], [208.0, 4529.0], [223.0, 4497.5], [221.0, 4502.0], [220.0, 4515.0], [219.0, 5663.0], [218.0, 4613.0], [216.0, 4518.0], [231.0, 4485.0], [230.0, 4488.0], [229.0, 4488.0], [228.0, 4493.0], [227.0, 4495.0], [226.0, 4496.666666666667], [239.0, 4460.0], [238.0, 4461.0], [237.0, 4476.5], [235.0, 4476.0], [234.0, 4470.0], [233.0, 5071.5], [247.0, 4440.5], [245.0, 4440.0], [244.0, 4443.0], [243.0, 4447.0], [242.0, 4448.5], [240.0, 4451.0], [255.0, 4432.0], [254.0, 4432.0], [253.0, 5215.0], [252.0, 4433.0], [251.0, 4435.0], [250.0, 5220.0], [249.0, 4432.0], [248.0, 4439.0], [269.0, 4291.0], [270.0, 4291.0], [268.0, 4291.0], [259.0, 4530.0], [257.0, 4323.0], [256.0, 4430.0], [267.0, 4292.0], [266.0, 4294.0], [265.0, 4296.0], [264.0, 4298.0], [263.0, 4300.0], [262.0, 4307.0], [261.0, 4421.0], [260.0, 5208.0], [285.0, 4258.0], [286.0, 4256.0], [284.0, 4258.0], [283.0, 4258.5], [281.0, 4260.0], [280.0, 4274.0], [278.0, 4275.0], [277.0, 4275.666666666667], [274.0, 4287.0], [273.0, 4288.0], [272.0, 4289.5], [300.0, 4701.5], [302.0, 5201.0], [303.0, 4615.0], [301.0, 4076.5], [299.0, 4293.0], [296.0, 4297.0], [295.0, 4168.0], [291.0, 4233.0], [290.0, 4284.75], [294.0, 4307.0], [293.0, 4185.0], [292.0, 4232.0], [318.0, 4243.0], [316.0, 3766.0], [307.0, 5049.0], [306.0, 3988.0], [305.0, 3992.0], [304.0, 4076.0], [315.0, 3865.0], [314.0, 3943.0], [313.0, 3946.0], [312.0, 3950.0], [311.0, 3875.5], [310.0, 3955.0], [308.0, 3955.0], [334.0, 3878.0], [335.0, 5145.0], [333.0, 4462.0], [332.0, 4235.0], [331.0, 3740.0], [330.0, 3742.0], [329.0, 4101.0], [328.0, 4102.0], [327.0, 4980.0], [323.0, 4239.0], [322.0, 4852.0], [320.0, 4182.0], [325.0, 4304.0], [339.0, 4922.0], [349.0, 4624.0], [351.0, 3725.0], [348.0, 3730.0], [347.0, 3753.0], [345.0, 4138.5], [343.0, 4529.0], [342.0, 3733.0], [338.0, 3772.5], [336.0, 4647.0], [366.0, 4964.0], [367.0, 4180.0], [365.0, 4080.5], [354.0, 3720.0], [353.0, 4190.0], [352.0, 3724.0], [363.0, 5002.0], [362.0, 4970.0], [361.0, 4417.0], [360.0, 3704.0], [358.0, 3705.0], [356.0, 4413.5], [383.0, 3952.0], [378.0, 4081.5], [376.0, 3633.0], [375.0, 4727.5], [373.0, 4672.0], [371.0, 3787.0], [368.0, 4495.0], [397.0, 3530.0], [398.0, 3568.0], [396.0, 4475.0], [387.0, 3615.0], [386.0, 3841.0], [385.0, 4533.75], [395.0, 3538.0], [394.0, 4965.0], [393.0, 3988.0], [392.0, 4488.0], [391.0, 4709.0], [389.0, 5320.0], [388.0, 5316.0], [408.0, 3810.0], [415.0, 3502.5], [403.0, 3565.0], [402.0, 3526.0], [401.0, 3539.6666666666665], [411.0, 3505.0], [410.0, 3505.0], [409.0, 3507.0], [407.0, 3516.0], [406.0, 3932.0], [405.0, 4498.0], [404.0, 3525.0], [429.0, 3462.0], [428.0, 3463.0], [427.0, 3473.0], [426.0, 3520.0], [425.0, 3520.0], [424.0, 3486.5], [422.0, 3489.0], [416.0, 4727.0], [419.0, 3492.0], [418.0, 4931.0], [417.0, 4604.0], [446.0, 4382.0], [447.0, 3533.0], [445.0, 5229.0], [444.0, 4306.0], [443.0, 3448.0], [442.0, 3453.0], [440.0, 3685.0], [439.0, 4563.0], [433.0, 3580.0], [432.0, 3462.6666666666665], [435.0, 4765.0], [434.0, 3457.0], [438.0, 3450.0], [436.0, 3502.0], [451.0, 3418.0], [463.0, 4093.75], [460.0, 3411.0], [459.0, 3412.0], [458.0, 3399.0], [456.0, 3407.0], [454.0, 3413.0], [452.0, 5212.0], [450.0, 4949.0], [449.0, 3945.5], [478.0, 4386.5], [476.0, 5004.0], [474.0, 5165.0], [473.0, 4566.5], [472.0, 4475.0], [470.0, 4128.0], [469.0, 4533.0], [468.0, 3394.0], [467.0, 4299.0], [483.0, 4503.0], [493.0, 4865.0], [495.0, 4616.5], [492.0, 4689.0], [482.0, 4431.0], [481.0, 4390.0], [480.0, 4791.5], [489.0, 3383.0], [488.0, 3398.0], [487.0, 4510.0], [486.0, 5147.0], [485.0, 5076.0], [484.0, 4857.0], [499.0, 3621.0], [510.0, 4060.0], [511.0, 4842.0], [508.0, 4305.666666666667], [505.0, 4722.5], [503.0, 4294.0], [502.0, 5161.0], [501.0, 3795.0], [500.0, 3451.0], [498.0, 3624.0], [497.0, 4486.0], [496.0, 4837.0], [538.0, 4388.5], [542.0, 4323.0], [543.0, 3257.0], [529.0, 4272.0], [531.0, 4218.0], [530.0, 4034.5], [533.0, 4394.0], [532.0, 4401.0], [541.0, 5077.0], [540.0, 4219.0], [539.0, 3259.0], [537.0, 4247.0], [519.0, 5129.0], [518.0, 4584.0], [516.0, 4284.0], [515.0, 4831.0], [514.0, 3282.0], [513.0, 5004.0], [512.0, 5151.0], [527.0, 3294.0], [526.0, 3775.5], [524.0, 3295.0], [523.0, 4197.0], [521.0, 3322.0], [535.0, 4760.0], [534.0, 4335.0], [568.0, 4848.0], [574.0, 4867.0], [575.0, 4941.0], [562.0, 4763.0], [560.0, 4216.0], [573.0, 3662.0], [571.0, 4848.0], [570.0, 4746.0], [559.0, 4146.0], [545.0, 3249.0], [544.0, 4353.0], [549.0, 4653.0], [547.0, 3998.5], [551.0, 3171.0], [550.0, 3242.0], [558.0, 4428.0], [557.0, 4507.0], [555.0, 3164.0], [554.0, 3203.5], [552.0, 3240.0], [567.0, 4962.0], [566.0, 4084.0], [564.0, 4213.0], [563.0, 4472.0], [600.0, 3151.0], [604.0, 3012.0], [607.0, 3000.0], [593.0, 4296.0], [592.0, 4798.5], [595.0, 4253.0], [594.0, 4914.0], [606.0, 4245.0], [605.0, 3005.0], [603.0, 4649.0], [602.0, 4262.0], [601.0, 3067.0], [590.0, 4961.0], [577.0, 3073.0], [576.0, 4246.0], [579.0, 4905.0], [578.0, 4335.0], [581.0, 3025.0], [580.0, 3027.0], [583.0, 3031.0], [582.0, 4724.0], [589.0, 4240.0], [587.0, 4708.0], [586.0, 4971.0], [585.0, 4980.0], [584.0, 3179.0], [599.0, 3578.5], [597.0, 4510.0], [632.0, 3123.0], [638.0, 2897.0], [639.0, 4124.0], [624.0, 4608.0], [626.0, 3067.0], [625.0, 3068.0], [637.0, 4143.0], [635.0, 2898.5], [633.0, 3054.0], [623.0, 3070.0], [610.0, 2983.0], [609.0, 2998.5], [612.0, 2950.0], [611.0, 2955.0], [614.0, 4191.0], [613.0, 4619.0], [622.0, 3077.0], [621.0, 3080.0], [620.0, 4145.0], [619.0, 3083.0], [618.0, 3084.0], [617.0, 3091.0], [616.0, 3018.0], [631.0, 3059.0], [630.0, 2945.0], [629.0, 3066.0], [627.0, 3067.0], [665.0, 4454.0], [669.0, 2903.0], [670.0, 2652.0], [657.0, 3766.0], [659.0, 4348.0], [658.0, 3850.0], [661.0, 2929.0], [660.0, 4055.0], [668.0, 4570.0], [667.0, 2795.0], [666.0, 4441.0], [664.0, 2795.0], [647.0, 4754.0], [645.0, 4486.0], [644.0, 4719.0], [643.0, 2852.0], [642.0, 4102.0], [641.0, 4378.5], [655.0, 4743.0], [654.0, 3763.5], [652.0, 2817.0], [651.0, 4703.0], [650.0, 2713.0], [649.0, 2717.0], [648.0, 4482.0], [663.0, 2805.0], [662.0, 2927.0], [696.0, 3897.0], [700.0, 4521.0], [703.0, 3881.0], [689.0, 3562.0], [693.0, 3844.3333333333335], [690.0, 3835.0], [702.0, 2695.0], [701.0, 2843.0], [699.0, 2696.0], [698.0, 2579.0], [697.0, 2850.0], [687.0, 3653.5], [673.0, 2859.0], [675.0, 4674.0], [674.0, 4411.0], [679.0, 3822.3333333333335], [676.0, 2869.0], [686.0, 4583.0], [684.0, 3988.5], [682.0, 3996.0], [681.0, 4694.0], [680.0, 2741.0], [695.0, 2705.0], [694.0, 2709.0], [729.0, 4559.0], [733.0, 2096.0], [734.0, 2226.0], [721.0, 3916.6666666666665], [724.0, 4586.5], [722.0, 4301.0], [732.0, 2098.0], [731.0, 4477.0], [730.0, 4200.0], [728.0, 4491.0], [710.0, 4291.0], [708.0, 3702.5], [706.0, 4392.0], [718.0, 4608.0], [717.0, 3716.0], [716.0, 2729.0], [715.0, 3948.0], [714.0, 3950.0], [713.0, 2823.0], [712.0, 2701.0], [726.0, 4542.0], [725.0, 4467.0], [761.0, 4244.0], [765.0, 3868.0], [766.0, 3657.0], [752.0, 2074.0], [754.0, 3917.0], [753.0, 2073.0], [756.0, 3790.0], [755.0, 3915.0], [764.0, 4555.0], [763.0, 4248.0], [762.0, 4236.0], [760.0, 4560.0], [742.0, 3836.0], [741.0, 3803.0], [740.0, 4535.0], [739.0, 3809.0], [738.0, 2122.0], [737.0, 2668.0], [736.0, 2417.5], [751.0, 4207.5], [749.0, 3169.5], [746.0, 4294.0], [745.0, 3841.0], [744.0, 3485.0], [759.0, 4407.0], [757.0, 2061.0], [798.0, 4009.3333333333335], [787.0, 3749.0], [799.0, 3780.0], [784.0, 4561.0], [786.0, 4480.0], [785.0, 4275.0], [795.0, 1976.0], [794.0, 4184.5], [792.0, 2597.0], [775.0, 3854.0], [774.0, 4106.0], [772.0, 4263.0], [770.0, 4267.0], [769.0, 3921.5], [768.0, 3824.0], [783.0, 3822.0], [782.0, 4542.0], [781.0, 4563.0], [780.0, 3849.0], [779.0, 4260.0], [778.0, 4489.0], [777.0, 4507.0], [776.0, 3816.0], [791.0, 3753.0], [790.0, 4532.5], [788.0, 4529.0], [830.0, 4478.0], [831.0, 4438.0], [829.0, 3822.0], [828.0, 4236.2], [825.0, 4003.0], [824.0, 4507.333333333333], [815.0, 4183.75], [802.0, 4000.5], [800.0, 4233.0], [804.0, 3858.0], [803.0, 3734.0], [813.0, 3765.0], [812.0, 4217.0], [811.0, 3799.0], [810.0, 3948.0], [808.0, 4353.0], [820.0, 4349.0], [819.0, 3605.0], [818.0, 3824.0], [856.0, 3549.0], [860.0, 3710.0], [863.0, 4428.0], [849.0, 3529.0], [848.0, 4403.0], [852.0, 4398.0], [851.0, 4104.0], [862.0, 4388.0], [861.0, 4389.0], [859.0, 4304.0], [858.0, 4158.0], [857.0, 4132.0], [847.0, 3579.0], [832.0, 3772.0], [834.0, 1917.0], [833.0, 3817.0], [837.0, 3589.0], [836.0, 4082.5], [839.0, 3722.0], [838.0, 3763.0], [846.0, 4434.5], [844.0, 3941.5], [842.0, 3564.0], [841.0, 4195.0], [840.0, 3689.0], [855.0, 4322.5], [853.0, 4397.0], [891.0, 1682.0], [882.0, 1688.0], [893.0, 1698.5], [895.0, 2079.5], [880.0, 1709.0], [892.0, 1702.0], [888.0, 1702.0], [871.0, 3672.0], [870.0, 1731.0], [868.0, 2519.0], [867.0, 3688.0], [866.0, 2528.0], [865.0, 2540.0], [864.0, 3545.0], [879.0, 1700.0], [878.0, 1713.0], [876.0, 1715.0], [875.0, 1718.0], [874.0, 1721.0], [873.0, 1724.0], [872.0, 1724.0], [886.0, 1702.5], [884.0, 4029.0], [883.0, 1689.0], [926.0, 3610.0], [925.0, 3817.0], [927.0, 1526.0], [913.0, 4237.0], [912.0, 1661.0], [915.0, 1654.0], [914.0, 1668.0], [923.0, 1528.0], [921.0, 4339.0], [920.0, 3708.0], [911.0, 3835.5], [897.0, 1696.5], [901.0, 1679.0], [900.0, 3259.0], [909.0, 3580.0], [908.0, 1667.0], [907.0, 2922.5], [905.0, 1609.0], [904.0, 3242.3333333333335], [919.0, 1571.0], [918.0, 3501.0], [917.0, 3595.0], [916.0, 3633.0], [955.0, 2404.5], [948.0, 3879.0], [957.0, 3340.0], [945.0, 2484.5], [953.0, 1379.0], [952.0, 1423.0], [943.0, 3393.0], [931.0, 1501.0], [930.0, 3380.0], [933.0, 3639.0], [932.0, 1500.0], [942.0, 2887.5], [940.0, 3571.0], [939.0, 3579.0], [938.0, 3521.0], [937.0, 3902.5], [936.0, 2511.5], [951.0, 1319.0], [950.0, 1378.0], [949.0, 3511.0], [947.0, 1469.0], [946.0, 4037.0], [990.0, 3659.0], [980.0, 3448.0], [991.0, 3654.6666666666665], [977.0, 3569.0], [976.0, 1217.0], [979.0, 1270.0], [978.0, 3672.0], [988.0, 3655.0], [987.0, 2708.5], [984.0, 3864.0], [967.0, 1260.0], [966.0, 4260.0], [965.0, 1296.0], [964.0, 3903.0], [963.0, 1273.0], [962.0, 1302.5], [961.0, 3713.0], [960.0, 3140.6666666666665], [975.0, 1281.0], [974.0, 1220.0], [972.0, 3680.0], [971.0, 1224.0], [970.0, 1325.0], [969.0, 3687.0], [968.0, 1367.0], [983.0, 3444.0], [982.0, 4087.0], [981.0, 3630.0], [1021.0, 2371.0], [1011.0, 4173.0], [1022.0, 995.0], [1008.0, 987.0], [1010.0, 1003.0], [1009.0, 1009.0], [1020.0, 3565.0], [1018.0, 2321.0], [1016.0, 4181.0], [999.0, 994.0], [998.0, 994.0], [997.0, 3815.0], [995.0, 3824.0], [994.0, 2064.0], [1006.0, 1007.0], [1005.0, 1015.0], [1004.0, 3550.0], [1003.0, 1017.0], [1002.0, 3869.0], [1001.0, 3850.0], [1015.0, 1002.0], [1013.0, 1000.0], [1012.0, 4173.0], [1082.0, 3670.0], [1078.0, 3837.0], [1062.0, 916.0], [1056.0, 4060.0], [1058.0, 895.0], [1060.0, 4072.0], [1064.0, 3698.0], [1066.0, 3579.0], [1068.0, 4058.0], [1086.0, 3666.0], [1076.0, 3453.0], [1074.0, 2290.5], [1072.0, 3531.5], [1024.0, 4121.0], [1030.0, 3595.3333333333335], [1034.0, 2700.3333333333335], [1036.0, 4038.0], [1038.0, 989.0], [1054.0, 2014.0], [1050.0, 982.0], [1044.0, 988.0], [1042.0, 980.0], [1040.0, 996.0], [1124.0, 3908.0], [1122.0, 439.0], [1126.0, 4059.0], [1128.0, 4027.0], [1130.0, 3888.0], [1132.0, 3787.0], [1134.0, 4012.0], [1150.0, 3849.0], [1148.0, 3087.0], [1146.0, 3868.0], [1138.0, 4006.0], [1136.0, 4007.0], [1088.0, 3443.0], [1092.0, 3504.5], [1090.0, 4029.0], [1096.0, 4029.0], [1094.0, 2215.0], [1118.0, 4076.0], [1114.0, 3983.0], [1110.0, 4004.0], [1108.0, 1939.5], [1210.0, 3030.0], [1184.0, 3668.5], [1186.0, 3767.5], [1190.0, 3541.0], [1192.0, 3538.0], [1194.0, 3676.0], [1196.0, 3453.0], [1198.0, 3536.0], [1212.0, 3396.0], [1208.0, 3594.0], [1206.0, 3314.0], [1204.0, 3403.0], [1202.0, 3406.0], [1200.0, 3899.0], [1166.0, 3855.0], [1164.0, 3084.0], [1158.0, 3947.0], [1156.0, 3371.3333333333335], [1152.0, 3648.0], [1176.0, 3999.0], [1170.0, 1847.0], [1168.0, 3907.5], [1270.0, 3046.0], [1254.0, 3080.0], [1274.0, 3294.0], [1248.0, 3215.5], [1250.0, 3377.0], [1252.0, 3323.0], [1256.0, 3222.0], [1258.0, 3361.0], [1260.0, 3348.0], [1262.0, 3352.5], [1268.0, 3327.0], [1266.0, 3316.0], [1228.0, 3417.0], [1226.0, 3434.0], [1224.0, 3453.5], [1222.0, 3436.0], [1218.0, 3421.0], [1244.0, 3104.0], [1242.0, 3401.0], [1240.0, 3397.0], [1238.0, 3385.0], [1236.0, 3404.0], [1234.0, 3379.0], [1336.0, 2095.0], [1318.0, 1836.0], [1340.0, 2827.0], [1314.0, 3190.3333333333335], [1316.0, 3565.0], [1322.0, 1848.5], [1320.0, 1838.0], [1326.0, 3281.0], [1342.0, 2115.0], [1338.0, 2381.0], [1332.0, 1935.0], [1330.0, 3661.0], [1328.0, 1949.0], [1294.0, 3302.0], [1292.0, 28.0], [1290.0, 3235.0], [1288.0, 3211.0], [1286.0, 3243.0], [1284.0, 2993.0], [1282.0, 3277.0], [1280.0, 32.0], [1308.0, 32.0], [1306.0, 3075.0], [1304.0, 29.0], [1302.0, 3287.0], [1300.0, 33.0], [1298.0, 3196.0], [1296.0, 3196.0], [1402.0, 31.0], [1406.0, 468.0], [1378.0, 2191.3333333333335], [1382.0, 3077.0], [1380.0, 2944.0], [1384.0, 33.0], [1388.0, 3408.0], [1390.0, 3484.0], [1404.0, 1663.0], [1400.0, 975.0], [1398.0, 481.0], [1394.0, 1931.0], [1392.0, 3150.0], [1344.0, 1926.0], [1346.0, 1932.0], [1352.0, 3132.0], [1358.0, 3175.0], [1372.0, 3029.0], [1366.0, 3416.0], [1364.0, 3097.0], [1362.0, 3097.0], [1360.0, 2085.0], [1462.0, 162.0], [1468.0, 2796.0], [1470.0, 3001.0], [1464.0, 1497.0], [1460.0, 164.0], [1456.0, 2792.0], [1408.0, 369.5], [1412.0, 359.5], [1410.0, 481.0], [1414.0, 468.0], [1416.0, 210.0], [1422.0, 456.0], [1420.0, 2628.0], [1438.0, 425.0], [1434.0, 420.0], [1430.0, 433.0], [1428.0, 1661.0], [1426.0, 263.0], [1424.0, 245.0], [1504.0, 2954.0], [1508.0, 1432.0], [1530.0, 2664.0], [1506.0, 2824.0], [1514.0, 2900.0], [1512.0, 2917.0], [1518.0, 295.0], [1528.0, 2894.0], [1526.0, 2769.0], [1524.0, 2915.0], [1522.0, 2900.0], [1520.0, 2898.0], [1472.0, 2859.0], [1474.0, 1074.6666666666667], [1478.0, 326.5], [1476.0, 1651.0], [1482.0, 198.5], [1502.0, 2835.0], [1498.0, 158.0], [1490.0, 44.0], [1590.0, 1449.0], [1598.0, 195.0], [1568.0, 3024.0], [1570.0, 2518.0], [1572.0, 139.0], [1574.0, 471.0], [1576.0, 2413.0], [1580.0, 1608.0], [1582.0, 2827.0], [1588.0, 121.0], [1586.0, 3002.5], [1548.0, 1908.0], [1544.0, 231.0], [1542.0, 2878.0], [1540.0, 1460.0], [1538.0, 3266.0], [1536.0, 1361.0], [1566.0, 2791.0], [1564.0, 3199.0], [1562.0, 1062.0], [1558.0, 1611.0], [1556.0, 2490.0], [1552.0, 2974.6666666666665], [1654.0, 3071.0], [1660.0, 2673.5], [1662.0, 165.0], [1658.0, 2525.0], [1652.0, 3077.0], [1614.0, 2337.0], [1612.0, 2371.0], [1606.0, 2369.0], [1604.0, 2581.5], [1602.0, 2476.5], [1600.0, 2552.5], [1626.0, 1242.0], [1622.0, 36.0], [1620.0, 2892.5], [1618.0, 2578.0], [1616.0, 2982.0], [1716.0, 2930.0], [1696.0, 2998.0], [1698.0, 74.0], [1700.0, 64.0], [1706.0, 2290.0], [1710.0, 2055.0], [1724.0, 2613.0], [1720.0, 2866.0], [1718.0, 1628.0], [1664.0, 2768.0], [1666.0, 2342.0], [1672.0, 83.0], [1674.0, 2964.0], [1676.0, 2344.0], [1678.0, 2613.0], [1694.0, 59.5], [1692.0, 74.0], [1690.0, 3001.0], [1688.0, 2319.0], [1684.0, 62.5], [1682.0, 59.0], [1680.0, 2386.0], [1782.0, 1602.3333333333335], [1786.0, 1953.5], [1788.0, 2186.5], [1784.0, 2504.6], [1778.0, 1933.0], [1776.0, 2130.0], [1728.0, 1616.0], [1732.0, 1089.5], [1730.0, 2554.0], [1736.0, 2738.5], [1740.0, 525.0], [1738.0, 2648.0], [1742.0, 2511.0], [1758.0, 33.0], [1752.0, 2763.0], [1750.0, 40.0], [1746.0, 2827.0], [1774.0, 2418.0], [1772.0, 26.0], [1770.0, 35.0], [1768.0, 28.0], [1766.0, 2169.0], [1764.0, 2450.5], [1762.0, 2877.0], [1760.0, 31.0], [1800.0, 2543.5], [1814.0, 2334.0], [1808.0, 44.0], [1806.0, 1660.3333333333333], [1804.0, 2418.4], [1802.0, 969.5], [1798.0, 2159.0], [1796.0, 1923.0], [1794.0, 1817.0], [1792.0, 2410.0], [1083.0, 3506.0], [1087.0, 3563.0], [1059.0, 925.0], [1061.0, 2252.5], [1065.0, 2447.0], [1067.0, 3477.0], [1071.0, 4107.0], [1069.0, 3476.0], [1085.0, 3563.0], [1081.0, 1089.0], [1079.0, 1146.0], [1075.0, 3493.0], [1055.0, 3525.0], [1027.0, 3542.0], [1025.0, 3394.0], [1031.0, 3559.0], [1035.0, 3518.0], [1037.0, 3552.0], [1039.0, 3520.0], [1051.0, 3491.0], [1049.0, 982.0], [1047.0, 987.0], [1045.0, 988.0], [1043.0, 986.0], [1041.0, 979.0], [1145.0, 3977.0], [1127.0, 3959.0], [1147.0, 3864.0], [1151.0, 4004.0], [1121.0, 3795.5], [1123.0, 4053.0], [1125.0, 486.0], [1129.0, 470.0], [1133.0, 3536.0], [1135.0, 3953.0], [1143.0, 3937.0], [1141.0, 3930.0], [1139.0, 3968.0], [1137.0, 3875.0], [1119.0, 3986.0], [1117.0, 2666.0], [1113.0, 3280.0], [1111.0, 3455.0], [1109.0, 3759.75], [1105.0, 3235.222222222222], [1205.0, 3910.0], [1191.0, 3813.0], [1215.0, 3626.6666666666665], [1187.0, 3364.0], [1189.0, 3588.5], [1195.0, 3538.0], [1197.0, 3963.0], [1199.0, 3323.0], [1211.0, 3428.0], [1209.0, 3156.0], [1203.0, 3315.0], [1201.0, 3533.0], [1165.0, 3891.5], [1163.0, 345.0], [1161.0, 3286.0], [1159.0, 3360.0], [1153.0, 3918.0], [1183.0, 3062.0], [1181.0, 3758.5], [1179.0, 3781.0], [1177.0, 330.0], [1175.0, 334.5], [1173.0, 3721.0], [1171.0, 3081.0], [1273.0, 3288.5], [1279.0, 3241.0], [1249.0, 3791.0], [1253.0, 3371.0], [1257.0, 3361.0], [1259.0, 3347.0], [1263.0, 3359.0], [1277.0, 3121.0], [1275.0, 3262.0], [1271.0, 3323.0], [1269.0, 3046.0], [1267.0, 3326.0], [1231.0, 3336.0], [1229.0, 3421.0], [1225.0, 3437.0], [1219.0, 3460.0], [1217.0, 3636.5], [1247.0, 3389.0], [1245.0, 3356.0], [1243.0, 3414.0], [1237.0, 3405.0], [1235.0, 3410.0], [1233.0, 3397.0], [1335.0, 3642.0], [1333.0, 1932.0], [1343.0, 1928.0], [1315.0, 3549.0], [1317.0, 1837.0], [1319.0, 1837.0], [1325.0, 2435.0], [1323.0, 3285.0], [1327.0, 2995.0], [1341.0, 2114.0], [1331.0, 3280.0], [1329.0, 3277.0], [1295.0, 2942.0], [1293.0, 3224.0], [1291.0, 28.0], [1289.0, 34.0], [1287.0, 3216.0], [1285.0, 3286.0], [1283.0, 3272.0], [1281.0, 48.0], [1311.0, 3383.0], [1309.0, 3649.0], [1307.0, 3207.0], [1305.0, 24.0], [1303.0, 3078.0], [1301.0, 3211.0], [1299.0, 3246.0], [1297.0, 34.0], [1397.0, 1733.0], [1383.0, 3024.0], [1379.0, 2948.0], [1387.0, 2663.5], [1385.0, 2907.0], [1389.0, 31.0], [1391.0, 32.0], [1403.0, 1651.0], [1401.0, 488.0], [1395.0, 29.0], [1393.0, 34.0], [1375.0, 2937.0], [1345.0, 1926.0], [1347.0, 3255.0], [1351.0, 3162.0], [1349.0, 2122.5], [1355.0, 2678.5], [1357.0, 2913.5], [1371.0, 3024.0], [1369.0, 3020.5], [1367.0, 3029.0], [1365.0, 2785.5], [1463.0, 141.0], [1471.0, 130.0], [1445.0, 2002.4], [1441.0, 2406.6666666666665], [1451.0, 2795.0], [1449.0, 2914.0], [1455.0, 183.5], [1453.0, 2119.0], [1469.0, 251.0], [1467.0, 3076.0], [1459.0, 180.0], [1457.0, 2787.0], [1439.0, 35.0], [1409.0, 3106.0], [1413.0, 33.0], [1415.0, 465.0], [1419.0, 2679.0], [1417.0, 2952.0], [1437.0, 427.0], [1435.0, 423.0], [1433.0, 431.0], [1431.0, 2846.0], [1427.0, 2632.0], [1425.0, 261.0], [1505.0, 2577.0], [1535.0, 1377.0], [1507.0, 1433.0], [1511.0, 2466.0], [1517.0, 2660.0], [1515.0, 2898.0], [1519.0, 2895.0], [1533.0, 3029.0], [1531.0, 2764.0], [1529.0, 2910.0], [1527.0, 2808.5], [1525.0, 3081.5], [1503.0, 2963.0], [1475.0, 2754.0], [1485.0, 2985.0], [1501.0, 175.0], [1497.0, 280.5], [1495.0, 190.5], [1587.0, 2608.5], [1573.0, 1434.0], [1593.0, 2679.0], [1569.0, 2471.0], [1571.0, 2794.0], [1577.0, 3172.0], [1579.0, 2719.5], [1583.0, 2761.0], [1597.0, 1565.5], [1595.0, 2951.5], [1591.0, 134.0], [1547.0, 2854.0], [1545.0, 2125.5], [1541.0, 2494.0], [1539.0, 1461.0], [1537.0, 1373.0], [1567.0, 3203.0], [1565.0, 2349.0], [1563.0, 2810.0], [1561.0, 1397.0], [1559.0, 3162.0], [1557.0, 2461.1666666666665], [1555.0, 2303.4545454545455], [1553.0, 3253.0], [1657.0, 2787.0], [1663.0, 3016.0], [1661.0, 2986.0], [1659.0, 2685.5], [1653.0, 2953.0], [1651.0, 2541.791666666667], [1605.0, 133.0], [1627.0, 69.0], [1625.0, 1151.0], [1623.0, 114.0], [1621.0, 2216.75], [1723.0, 2863.0], [1701.0, 66.0], [1727.0, 2020.0], [1697.0, 2726.0], [1699.0, 71.0], [1703.0, 1121.5], [1705.0, 2599.5], [1709.0, 1552.0], [1707.0, 2944.0], [1711.0, 2056.0], [1725.0, 2103.0], [1721.0, 2346.5], [1715.0, 2079.0], [1713.0, 2798.5], [1695.0, 2842.0], [1665.0, 2800.0], [1667.0, 2259.0], [1671.0, 1721.0], [1669.0, 2629.0], [1673.0, 3012.0], [1675.0, 1124.0], [1677.0, 2315.0], [1679.0, 2388.0], [1691.0, 65.0], [1689.0, 2851.0], [1687.0, 1902.0], [1681.0, 58.0], [1785.0, 2319.3333333333335], [1791.0, 2780.0], [1789.0, 1905.8333333333335], [1787.0, 2417.0], [1783.0, 1970.5], [1779.0, 431.0], [1777.0, 2098.0], [1759.0, 33.0], [1729.0, 2358.0], [1737.0, 2735.0], [1741.0, 59.0], [1757.0, 35.5], [1755.0, 40.5], [1753.0, 36.0], [1751.0, 335.0], [1749.0, 2089.5], [1747.0, 2882.0], [1745.0, 2495.0], [1775.0, 2020.0], [1773.0, 936.0], [1771.0, 2853.0], [1769.0, 25.0], [1767.0, 2203.0], [1765.0, 36.0], [1761.0, 40.0], [1801.0, 2304.3333333333335], [1815.0, 2092.428571428571], [1807.0, 2128.5], [1809.0, 1574.0], [1811.0, 367.0], [1805.0, 2097.0], [1803.0, 2353.0], [1799.0, 2739.5], [1797.0, 2239.5], [1795.0, 2031.1666666666665], [1793.0, 2214.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}, {"data": [[938.0442666666677, 3227.9866666666653]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1815.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15421.033333333333, "minX": 1.75559316E12, "maxY": 22396.616666666665, "series": [{"data": [[1.75559316E12, 22396.616666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75559316E12, 15421.033333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559316E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3227.9866666666653, "minX": 1.75559316E12, "maxY": 3227.9866666666653, "series": [{"data": [[1.75559316E12, 3227.9866666666653]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559316E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3227.1311999999975, "minX": 1.75559316E12, "maxY": 3227.1311999999975, "series": [{"data": [[1.75559316E12, 3227.1311999999975]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559316E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2860.007999999996, "minX": 1.75559316E12, "maxY": 2860.007999999996, "series": [{"data": [[1.75559316E12, 2860.007999999996]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559316E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.75559316E12, "maxY": 5852.0, "series": [{"data": [[1.75559316E12, 5852.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75559316E12, 4736.200000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75559316E12, 5760.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75559316E12, 5097.3]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75559316E12, 24.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75559316E12, 3447.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559316E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 200.0, "minX": 361.0, "maxY": 4496.0, "series": [{"data": [[528.0, 3845.0], [571.0, 3201.5], [361.0, 2347.5], [415.0, 4496.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[571.0, 1281.0], [361.0, 200.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 571.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 361.0, "maxY": 4496.0, "series": [{"data": [[528.0, 3845.0], [571.0, 3201.5], [361.0, 2347.5], [415.0, 4496.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[571.0, 0.0], [361.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 571.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559316E12, "maxY": 31.25, "series": [{"data": [[1.75559316E12, 31.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559316E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75559316E12, "maxY": 31.216666666666665, "series": [{"data": [[1.75559316E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.75559316E12, 31.216666666666665]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559316E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75559316E12, "maxY": 31.216666666666665, "series": [{"data": [[1.75559316E12, 31.216666666666665]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-success", "isController": false}, {"data": [[1.75559316E12, 0.03333333333333333]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559316E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75559316E12, "maxY": 31.216666666666665, "series": [{"data": [[1.75559316E12, 31.216666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75559316E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559316E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

