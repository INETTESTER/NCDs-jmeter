/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 285.0, "minX": 0.0, "maxY": 10811.0, "series": [{"data": [[0.0, 285.0], [0.1, 353.0], [0.2, 395.0], [0.3, 507.0], [0.4, 614.0], [0.5, 805.0], [0.6, 856.0], [0.7, 1005.0], [0.8, 1045.0], [0.9, 1079.0], [1.0, 1166.0], [1.1, 1216.0], [1.2, 1346.0], [1.3, 1371.0], [1.4, 1429.0], [1.5, 1563.0], [1.6, 1577.0], [1.7, 1579.0], [1.8, 1627.0], [1.9, 1657.0], [2.0, 1669.0], [2.1, 1697.0], [2.2, 1770.0], [2.3, 1799.0], [2.4, 1848.0], [2.5, 1860.0], [2.6, 1977.0], [2.7, 1997.0], [2.8, 2008.0], [2.9, 2079.0], [3.0, 2108.0], [3.1, 2179.0], [3.2, 2212.0], [3.3, 2252.0], [3.4, 2270.0], [3.5, 2292.0], [3.6, 2319.0], [3.7, 2362.0], [3.8, 2413.0], [3.9, 2473.0], [4.0, 2510.0], [4.1, 2537.0], [4.2, 2576.0], [4.3, 2631.0], [4.4, 2632.0], [4.5, 2708.0], [4.6, 2765.0], [4.7, 2841.0], [4.8, 2948.0], [4.9, 2970.0], [5.0, 3030.0], [5.1, 3089.0], [5.2, 3110.0], [5.3, 3128.0], [5.4, 3145.0], [5.5, 3190.0], [5.6, 3191.0], [5.7, 3207.0], [5.8, 3218.0], [5.9, 3244.0], [6.0, 3273.0], [6.1, 3296.0], [6.2, 3310.0], [6.3, 3339.0], [6.4, 3354.0], [6.5, 3379.0], [6.6, 3408.0], [6.7, 3420.0], [6.8, 3473.0], [6.9, 3496.0], [7.0, 3623.0], [7.1, 3652.0], [7.2, 3666.0], [7.3, 3674.0], [7.4, 3694.0], [7.5, 3762.0], [7.6, 3803.0], [7.7, 3833.0], [7.8, 3858.0], [7.9, 3903.0], [8.0, 3908.0], [8.1, 3957.0], [8.2, 3962.0], [8.3, 4006.0], [8.4, 4059.0], [8.5, 4087.0], [8.6, 4131.0], [8.7, 4140.0], [8.8, 4140.0], [8.9, 4159.0], [9.0, 4191.0], [9.1, 4218.0], [9.2, 4258.0], [9.3, 4381.0], [9.4, 4412.0], [9.5, 4461.0], [9.6, 4465.0], [9.7, 4473.0], [9.8, 4481.0], [9.9, 4502.0], [10.0, 4518.0], [10.1, 4541.0], [10.2, 4565.0], [10.3, 4601.0], [10.4, 4639.0], [10.5, 4654.0], [10.6, 4687.0], [10.7, 4689.0], [10.8, 4703.0], [10.9, 4727.0], [11.0, 4742.0], [11.1, 4750.0], [11.2, 4762.0], [11.3, 4762.0], [11.4, 4771.0], [11.5, 4796.0], [11.6, 4813.0], [11.7, 4833.0], [11.8, 4840.0], [11.9, 4846.0], [12.0, 4850.0], [12.1, 4853.0], [12.2, 4863.0], [12.3, 4868.0], [12.4, 4888.0], [12.5, 4892.0], [12.6, 4902.0], [12.7, 4905.0], [12.8, 4911.0], [12.9, 4916.0], [13.0, 4918.0], [13.1, 4923.0], [13.2, 4925.0], [13.3, 4929.0], [13.4, 4935.0], [13.5, 4949.0], [13.6, 4953.0], [13.7, 4955.0], [13.8, 4973.0], [13.9, 4981.0], [14.0, 4982.0], [14.1, 4992.0], [14.2, 5000.0], [14.3, 5004.0], [14.4, 5008.0], [14.5, 5014.0], [14.6, 5017.0], [14.7, 5029.0], [14.8, 5032.0], [14.9, 5041.0], [15.0, 5047.0], [15.1, 5056.0], [15.2, 5067.0], [15.3, 5073.0], [15.4, 5081.0], [15.5, 5083.0], [15.6, 5088.0], [15.7, 5091.0], [15.8, 5100.0], [15.9, 5101.0], [16.0, 5106.0], [16.1, 5111.0], [16.2, 5117.0], [16.3, 5118.0], [16.4, 5136.0], [16.5, 5137.0], [16.6, 5142.0], [16.7, 5149.0], [16.8, 5150.0], [16.9, 5153.0], [17.0, 5157.0], [17.1, 5162.0], [17.2, 5168.0], [17.3, 5171.0], [17.4, 5175.0], [17.5, 5179.0], [17.6, 5182.0], [17.7, 5184.0], [17.8, 5197.0], [17.9, 5200.0], [18.0, 5202.0], [18.1, 5204.0], [18.2, 5208.0], [18.3, 5210.0], [18.4, 5212.0], [18.5, 5213.0], [18.6, 5216.0], [18.7, 5219.0], [18.8, 5219.0], [18.9, 5220.0], [19.0, 5221.0], [19.1, 5222.0], [19.2, 5225.0], [19.3, 5226.0], [19.4, 5228.0], [19.5, 5233.0], [19.6, 5233.0], [19.7, 5240.0], [19.8, 5247.0], [19.9, 5254.0], [20.0, 5254.0], [20.1, 5255.0], [20.2, 5264.0], [20.3, 5269.0], [20.4, 5272.0], [20.5, 5278.0], [20.6, 5287.0], [20.7, 5291.0], [20.8, 5292.0], [20.9, 5294.0], [21.0, 5297.0], [21.1, 5301.0], [21.2, 5303.0], [21.3, 5311.0], [21.4, 5315.0], [21.5, 5317.0], [21.6, 5321.0], [21.7, 5324.0], [21.8, 5329.0], [21.9, 5333.0], [22.0, 5335.0], [22.1, 5340.0], [22.2, 5343.0], [22.3, 5345.0], [22.4, 5349.0], [22.5, 5358.0], [22.6, 5361.0], [22.7, 5365.0], [22.8, 5367.0], [22.9, 5371.0], [23.0, 5375.0], [23.1, 5381.0], [23.2, 5381.0], [23.3, 5384.0], [23.4, 5387.0], [23.5, 5396.0], [23.6, 5400.0], [23.7, 5401.0], [23.8, 5405.0], [23.9, 5408.0], [24.0, 5411.0], [24.1, 5416.0], [24.2, 5418.0], [24.3, 5422.0], [24.4, 5427.0], [24.5, 5432.0], [24.6, 5437.0], [24.7, 5438.0], [24.8, 5439.0], [24.9, 5445.0], [25.0, 5447.0], [25.1, 5450.0], [25.2, 5461.0], [25.3, 5462.0], [25.4, 5465.0], [25.5, 5470.0], [25.6, 5470.0], [25.7, 5477.0], [25.8, 5484.0], [25.9, 5490.0], [26.0, 5495.0], [26.1, 5497.0], [26.2, 5501.0], [26.3, 5514.0], [26.4, 5517.0], [26.5, 5518.0], [26.6, 5522.0], [26.7, 5529.0], [26.8, 5531.0], [26.9, 5536.0], [27.0, 5537.0], [27.1, 5540.0], [27.2, 5541.0], [27.3, 5544.0], [27.4, 5546.0], [27.5, 5561.0], [27.6, 5567.0], [27.7, 5571.0], [27.8, 5580.0], [27.9, 5581.0], [28.0, 5588.0], [28.1, 5596.0], [28.2, 5600.0], [28.3, 5607.0], [28.4, 5610.0], [28.5, 5614.0], [28.6, 5615.0], [28.7, 5618.0], [28.8, 5620.0], [28.9, 5624.0], [29.0, 5627.0], [29.1, 5634.0], [29.2, 5637.0], [29.3, 5640.0], [29.4, 5644.0], [29.5, 5645.0], [29.6, 5647.0], [29.7, 5651.0], [29.8, 5653.0], [29.9, 5655.0], [30.0, 5659.0], [30.1, 5664.0], [30.2, 5666.0], [30.3, 5671.0], [30.4, 5673.0], [30.5, 5676.0], [30.6, 5677.0], [30.7, 5680.0], [30.8, 5681.0], [30.9, 5686.0], [31.0, 5694.0], [31.1, 5703.0], [31.2, 5707.0], [31.3, 5709.0], [31.4, 5711.0], [31.5, 5713.0], [31.6, 5717.0], [31.7, 5721.0], [31.8, 5726.0], [31.9, 5730.0], [32.0, 5732.0], [32.1, 5733.0], [32.2, 5735.0], [32.3, 5744.0], [32.4, 5748.0], [32.5, 5756.0], [32.6, 5761.0], [32.7, 5766.0], [32.8, 5766.0], [32.9, 5775.0], [33.0, 5777.0], [33.1, 5780.0], [33.2, 5786.0], [33.3, 5790.0], [33.4, 5791.0], [33.5, 5794.0], [33.6, 5794.0], [33.7, 5797.0], [33.8, 5802.0], [33.9, 5805.0], [34.0, 5815.0], [34.1, 5820.0], [34.2, 5822.0], [34.3, 5827.0], [34.4, 5827.0], [34.5, 5836.0], [34.6, 5849.0], [34.7, 5857.0], [34.8, 5863.0], [34.9, 5868.0], [35.0, 5878.0], [35.1, 5880.0], [35.2, 5881.0], [35.3, 5882.0], [35.4, 5886.0], [35.5, 5890.0], [35.6, 5892.0], [35.7, 5897.0], [35.8, 5900.0], [35.9, 5904.0], [36.0, 5906.0], [36.1, 5921.0], [36.2, 5924.0], [36.3, 5930.0], [36.4, 5944.0], [36.5, 5952.0], [36.6, 5960.0], [36.7, 5970.0], [36.8, 5981.0], [36.9, 5989.0], [37.0, 5992.0], [37.1, 5995.0], [37.2, 6004.0], [37.3, 6008.0], [37.4, 6022.0], [37.5, 6044.0], [37.6, 6048.0], [37.7, 6050.0], [37.8, 6057.0], [37.9, 6066.0], [38.0, 6070.0], [38.1, 6076.0], [38.2, 6093.0], [38.3, 6102.0], [38.4, 6105.0], [38.5, 6111.0], [38.6, 6119.0], [38.7, 6130.0], [38.8, 6141.0], [38.9, 6167.0], [39.0, 6188.0], [39.1, 6205.0], [39.2, 6210.0], [39.3, 6213.0], [39.4, 6226.0], [39.5, 6243.0], [39.6, 6251.0], [39.7, 6254.0], [39.8, 6259.0], [39.9, 6259.0], [40.0, 6260.0], [40.1, 6296.0], [40.2, 6317.0], [40.3, 6324.0], [40.4, 6341.0], [40.5, 6363.0], [40.6, 6374.0], [40.7, 6407.0], [40.8, 6412.0], [40.9, 6416.0], [41.0, 6432.0], [41.1, 6438.0], [41.2, 6439.0], [41.3, 6443.0], [41.4, 6446.0], [41.5, 6450.0], [41.6, 6455.0], [41.7, 6462.0], [41.8, 6479.0], [41.9, 6515.0], [42.0, 6537.0], [42.1, 6547.0], [42.2, 6607.0], [42.3, 6621.0], [42.4, 6626.0], [42.5, 6644.0], [42.6, 6657.0], [42.7, 6680.0], [42.8, 6708.0], [42.9, 6734.0], [43.0, 6743.0], [43.1, 6762.0], [43.2, 6764.0], [43.3, 6804.0], [43.4, 6818.0], [43.5, 6836.0], [43.6, 6872.0], [43.7, 6894.0], [43.8, 6896.0], [43.9, 6911.0], [44.0, 6913.0], [44.1, 6938.0], [44.2, 6957.0], [44.3, 6971.0], [44.4, 6992.0], [44.5, 7005.0], [44.6, 7019.0], [44.7, 7022.0], [44.8, 7026.0], [44.9, 7069.0], [45.0, 7085.0], [45.1, 7105.0], [45.2, 7161.0], [45.3, 7200.0], [45.4, 7232.0], [45.5, 7247.0], [45.6, 7252.0], [45.7, 7272.0], [45.8, 7274.0], [45.9, 7296.0], [46.0, 7310.0], [46.1, 7321.0], [46.2, 7331.0], [46.3, 7349.0], [46.4, 7357.0], [46.5, 7379.0], [46.6, 7408.0], [46.7, 7456.0], [46.8, 7476.0], [46.9, 7486.0], [47.0, 7498.0], [47.1, 7519.0], [47.2, 7524.0], [47.3, 7534.0], [47.4, 7545.0], [47.5, 7554.0], [47.6, 7578.0], [47.7, 7593.0], [47.8, 7637.0], [47.9, 7656.0], [48.0, 7661.0], [48.1, 7692.0], [48.2, 7738.0], [48.3, 7748.0], [48.4, 7754.0], [48.5, 7787.0], [48.6, 7796.0], [48.7, 7835.0], [48.8, 7849.0], [48.9, 7854.0], [49.0, 7855.0], [49.1, 7863.0], [49.2, 7869.0], [49.3, 7877.0], [49.4, 7884.0], [49.5, 7895.0], [49.6, 7895.0], [49.7, 7899.0], [49.8, 7905.0], [49.9, 7907.0], [50.0, 7912.0], [50.1, 7938.0], [50.2, 7943.0], [50.3, 7949.0], [50.4, 7951.0], [50.5, 7952.0], [50.6, 7963.0], [50.7, 7977.0], [50.8, 7984.0], [50.9, 7999.0], [51.0, 8004.0], [51.1, 8011.0], [51.2, 8014.0], [51.3, 8022.0], [51.4, 8034.0], [51.5, 8043.0], [51.6, 8045.0], [51.7, 8048.0], [51.8, 8056.0], [51.9, 8063.0], [52.0, 8064.0], [52.1, 8066.0], [52.2, 8072.0], [52.3, 8077.0], [52.4, 8084.0], [52.5, 8100.0], [52.6, 8108.0], [52.7, 8119.0], [52.8, 8124.0], [52.9, 8130.0], [53.0, 8138.0], [53.1, 8145.0], [53.2, 8153.0], [53.3, 8164.0], [53.4, 8184.0], [53.5, 8191.0], [53.6, 8193.0], [53.7, 8196.0], [53.8, 8202.0], [53.9, 8205.0], [54.0, 8231.0], [54.1, 8241.0], [54.2, 8244.0], [54.3, 8275.0], [54.4, 8279.0], [54.5, 8285.0], [54.6, 8294.0], [54.7, 8305.0], [54.8, 8307.0], [54.9, 8315.0], [55.0, 8317.0], [55.1, 8329.0], [55.2, 8332.0], [55.3, 8335.0], [55.4, 8346.0], [55.5, 8364.0], [55.6, 8375.0], [55.7, 8383.0], [55.8, 8390.0], [55.9, 8396.0], [56.0, 8403.0], [56.1, 8410.0], [56.2, 8415.0], [56.3, 8418.0], [56.4, 8421.0], [56.5, 8436.0], [56.6, 8449.0], [56.7, 8452.0], [56.8, 8453.0], [56.9, 8459.0], [57.0, 8465.0], [57.1, 8465.0], [57.2, 8468.0], [57.3, 8479.0], [57.4, 8485.0], [57.5, 8492.0], [57.6, 8501.0], [57.7, 8504.0], [57.8, 8509.0], [57.9, 8532.0], [58.0, 8552.0], [58.1, 8561.0], [58.2, 8563.0], [58.3, 8576.0], [58.4, 8586.0], [58.5, 8590.0], [58.6, 8599.0], [58.7, 8611.0], [58.8, 8616.0], [58.9, 8624.0], [59.0, 8632.0], [59.1, 8646.0], [59.2, 8661.0], [59.3, 8670.0], [59.4, 8683.0], [59.5, 8685.0], [59.6, 8694.0], [59.7, 8708.0], [59.8, 8725.0], [59.9, 8734.0], [60.0, 8742.0], [60.1, 8744.0], [60.2, 8779.0], [60.3, 8783.0], [60.4, 8786.0], [60.5, 8791.0], [60.6, 8806.0], [60.7, 8813.0], [60.8, 8813.0], [60.9, 8828.0], [61.0, 8838.0], [61.1, 8842.0], [61.2, 8850.0], [61.3, 8868.0], [61.4, 8877.0], [61.5, 8882.0], [61.6, 8892.0], [61.7, 8900.0], [61.8, 8918.0], [61.9, 8929.0], [62.0, 8946.0], [62.1, 8950.0], [62.2, 8957.0], [62.3, 8964.0], [62.4, 8966.0], [62.5, 8969.0], [62.6, 8970.0], [62.7, 8977.0], [62.8, 8984.0], [62.9, 8986.0], [63.0, 8991.0], [63.1, 8995.0], [63.2, 8996.0], [63.3, 9004.0], [63.4, 9028.0], [63.5, 9045.0], [63.6, 9056.0], [63.7, 9060.0], [63.8, 9062.0], [63.9, 9064.0], [64.0, 9065.0], [64.1, 9066.0], [64.2, 9080.0], [64.3, 9091.0], [64.4, 9097.0], [64.5, 9111.0], [64.6, 9121.0], [64.7, 9126.0], [64.8, 9128.0], [64.9, 9135.0], [65.0, 9142.0], [65.1, 9147.0], [65.2, 9150.0], [65.3, 9152.0], [65.4, 9157.0], [65.5, 9162.0], [65.6, 9165.0], [65.7, 9174.0], [65.8, 9178.0], [65.9, 9194.0], [66.0, 9202.0], [66.1, 9208.0], [66.2, 9230.0], [66.3, 9237.0], [66.4, 9244.0], [66.5, 9246.0], [66.6, 9255.0], [66.7, 9257.0], [66.8, 9270.0], [66.9, 9273.0], [67.0, 9280.0], [67.1, 9283.0], [67.2, 9298.0], [67.3, 9301.0], [67.4, 9311.0], [67.5, 9317.0], [67.6, 9325.0], [67.7, 9328.0], [67.8, 9332.0], [67.9, 9349.0], [68.0, 9356.0], [68.1, 9368.0], [68.2, 9385.0], [68.3, 9387.0], [68.4, 9391.0], [68.5, 9396.0], [68.6, 9398.0], [68.7, 9399.0], [68.8, 9402.0], [68.9, 9405.0], [69.0, 9408.0], [69.1, 9411.0], [69.2, 9415.0], [69.3, 9422.0], [69.4, 9429.0], [69.5, 9434.0], [69.6, 9437.0], [69.7, 9444.0], [69.8, 9453.0], [69.9, 9456.0], [70.0, 9459.0], [70.1, 9467.0], [70.2, 9480.0], [70.3, 9482.0], [70.4, 9485.0], [70.5, 9493.0], [70.6, 9497.0], [70.7, 9500.0], [70.8, 9506.0], [70.9, 9511.0], [71.0, 9513.0], [71.1, 9516.0], [71.2, 9518.0], [71.3, 9522.0], [71.4, 9525.0], [71.5, 9532.0], [71.6, 9546.0], [71.7, 9549.0], [71.8, 9554.0], [71.9, 9573.0], [72.0, 9573.0], [72.1, 9575.0], [72.2, 9577.0], [72.3, 9585.0], [72.4, 9590.0], [72.5, 9592.0], [72.6, 9599.0], [72.7, 9603.0], [72.8, 9606.0], [72.9, 9618.0], [73.0, 9620.0], [73.1, 9624.0], [73.2, 9626.0], [73.3, 9629.0], [73.4, 9637.0], [73.5, 9645.0], [73.6, 9651.0], [73.7, 9655.0], [73.8, 9659.0], [73.9, 9661.0], [74.0, 9663.0], [74.1, 9664.0], [74.2, 9666.0], [74.3, 9667.0], [74.4, 9669.0], [74.5, 9672.0], [74.6, 9674.0], [74.7, 9676.0], [74.8, 9680.0], [74.9, 9686.0], [75.0, 9688.0], [75.1, 9692.0], [75.2, 9693.0], [75.3, 9696.0], [75.4, 9699.0], [75.5, 9702.0], [75.6, 9705.0], [75.7, 9708.0], [75.8, 9711.0], [75.9, 9712.0], [76.0, 9714.0], [76.1, 9715.0], [76.2, 9721.0], [76.3, 9723.0], [76.4, 9727.0], [76.5, 9734.0], [76.6, 9737.0], [76.7, 9739.0], [76.8, 9741.0], [76.9, 9743.0], [77.0, 9744.0], [77.1, 9747.0], [77.2, 9750.0], [77.3, 9755.0], [77.4, 9756.0], [77.5, 9758.0], [77.6, 9764.0], [77.7, 9764.0], [77.8, 9765.0], [77.9, 9767.0], [78.0, 9769.0], [78.1, 9772.0], [78.2, 9772.0], [78.3, 9773.0], [78.4, 9774.0], [78.5, 9775.0], [78.6, 9782.0], [78.7, 9785.0], [78.8, 9787.0], [78.9, 9792.0], [79.0, 9796.0], [79.1, 9797.0], [79.2, 9798.0], [79.3, 9799.0], [79.4, 9800.0], [79.5, 9805.0], [79.6, 9808.0], [79.7, 9810.0], [79.8, 9811.0], [79.9, 9813.0], [80.0, 9816.0], [80.1, 9820.0], [80.2, 9826.0], [80.3, 9827.0], [80.4, 9829.0], [80.5, 9834.0], [80.6, 9840.0], [80.7, 9847.0], [80.8, 9849.0], [80.9, 9849.0], [81.0, 9856.0], [81.1, 9857.0], [81.2, 9860.0], [81.3, 9865.0], [81.4, 9868.0], [81.5, 9876.0], [81.6, 9880.0], [81.7, 9882.0], [81.8, 9886.0], [81.9, 9888.0], [82.0, 9893.0], [82.1, 9894.0], [82.2, 9895.0], [82.3, 9897.0], [82.4, 9898.0], [82.5, 9899.0], [82.6, 9901.0], [82.7, 9904.0], [82.8, 9905.0], [82.9, 9906.0], [83.0, 9909.0], [83.1, 9912.0], [83.2, 9914.0], [83.3, 9917.0], [83.4, 9920.0], [83.5, 9923.0], [83.6, 9925.0], [83.7, 9926.0], [83.8, 9927.0], [83.9, 9929.0], [84.0, 9934.0], [84.1, 9935.0], [84.2, 9941.0], [84.3, 9943.0], [84.4, 9947.0], [84.5, 9948.0], [84.6, 9950.0], [84.7, 9956.0], [84.8, 9958.0], [84.9, 9958.0], [85.0, 9959.0], [85.1, 9960.0], [85.2, 9961.0], [85.3, 9971.0], [85.4, 9976.0], [85.5, 9981.0], [85.6, 9981.0], [85.7, 9983.0], [85.8, 9989.0], [85.9, 9989.0], [86.0, 9991.0], [86.1, 9993.0], [86.2, 9999.0], [86.3, 9999.0], [86.4, 10009.0], [86.5, 10010.0], [86.6, 10011.0], [86.7, 10016.0], [86.8, 10020.0], [86.9, 10027.0], [87.0, 10029.0], [87.1, 10033.0], [87.2, 10035.0], [87.3, 10036.0], [87.4, 10040.0], [87.5, 10042.0], [87.6, 10043.0], [87.7, 10049.0], [87.8, 10051.0], [87.9, 10057.0], [88.0, 10060.0], [88.1, 10063.0], [88.2, 10070.0], [88.3, 10076.0], [88.4, 10076.0], [88.5, 10081.0], [88.6, 10084.0], [88.7, 10085.0], [88.8, 10088.0], [88.9, 10088.0], [89.0, 10092.0], [89.1, 10096.0], [89.2, 10099.0], [89.3, 10103.0], [89.4, 10104.0], [89.5, 10113.0], [89.6, 10123.0], [89.7, 10124.0], [89.8, 10131.0], [89.9, 10132.0], [90.0, 10137.0], [90.1, 10138.0], [90.2, 10139.0], [90.3, 10141.0], [90.4, 10150.0], [90.5, 10152.0], [90.6, 10155.0], [90.7, 10158.0], [90.8, 10158.0], [90.9, 10161.0], [91.0, 10165.0], [91.1, 10174.0], [91.2, 10176.0], [91.3, 10177.0], [91.4, 10180.0], [91.5, 10183.0], [91.6, 10184.0], [91.7, 10186.0], [91.8, 10190.0], [91.9, 10195.0], [92.0, 10197.0], [92.1, 10199.0], [92.2, 10203.0], [92.3, 10216.0], [92.4, 10217.0], [92.5, 10235.0], [92.6, 10239.0], [92.7, 10247.0], [92.8, 10252.0], [92.9, 10254.0], [93.0, 10255.0], [93.1, 10258.0], [93.2, 10267.0], [93.3, 10280.0], [93.4, 10281.0], [93.5, 10287.0], [93.6, 10292.0], [93.7, 10293.0], [93.8, 10298.0], [93.9, 10313.0], [94.0, 10315.0], [94.1, 10319.0], [94.2, 10324.0], [94.3, 10327.0], [94.4, 10336.0], [94.5, 10343.0], [94.6, 10344.0], [94.7, 10349.0], [94.8, 10370.0], [94.9, 10379.0], [95.0, 10387.0], [95.1, 10398.0], [95.2, 10407.0], [95.3, 10409.0], [95.4, 10411.0], [95.5, 10412.0], [95.6, 10415.0], [95.7, 10429.0], [95.8, 10437.0], [95.9, 10443.0], [96.0, 10444.0], [96.1, 10446.0], [96.2, 10457.0], [96.3, 10463.0], [96.4, 10465.0], [96.5, 10468.0], [96.6, 10470.0], [96.7, 10473.0], [96.8, 10475.0], [96.9, 10482.0], [97.0, 10487.0], [97.1, 10489.0], [97.2, 10500.0], [97.3, 10504.0], [97.4, 10511.0], [97.5, 10514.0], [97.6, 10525.0], [97.7, 10525.0], [97.8, 10546.0], [97.9, 10551.0], [98.0, 10572.0], [98.1, 10582.0], [98.2, 10598.0], [98.3, 10605.0], [98.4, 10609.0], [98.5, 10618.0], [98.6, 10621.0], [98.7, 10622.0], [98.8, 10627.0], [98.9, 10648.0], [99.0, 10657.0], [99.1, 10672.0], [99.2, 10690.0], [99.3, 10691.0], [99.4, 10736.0], [99.5, 10739.0], [99.6, 10745.0], [99.7, 10753.0], [99.8, 10765.0], [99.9, 10801.0]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 73.0, "series": [{"data": [[200.0, 1.0], [300.0, 3.0], [500.0, 3.0], [600.0, 2.0], [800.0, 4.0], [1000.0, 4.0], [1100.0, 3.0], [1200.0, 2.0], [1300.0, 4.0], [1400.0, 2.0], [1500.0, 5.0], [1600.0, 7.0], [1700.0, 4.0], [1800.0, 4.0], [1900.0, 4.0], [2000.0, 4.0], [2100.0, 3.0], [2200.0, 7.0], [2300.0, 5.0], [2400.0, 3.0], [2500.0, 5.0], [2600.0, 5.0], [2800.0, 2.0], [2700.0, 4.0], [2900.0, 3.0], [3000.0, 4.0], [3100.0, 9.0], [3300.0, 8.0], [3200.0, 9.0], [3400.0, 7.0], [3500.0, 1.0], [3600.0, 8.0], [3700.0, 3.0], [3800.0, 5.0], [3900.0, 8.0], [4000.0, 5.0], [4200.0, 3.0], [4100.0, 10.0], [4300.0, 3.0], [4400.0, 9.0], [4500.0, 8.0], [4600.0, 9.0], [4700.0, 15.0], [4800.0, 18.0], [4900.0, 31.0], [5000.0, 30.0], [5100.0, 39.0], [5200.0, 59.0], [5300.0, 48.0], [5400.0, 49.0], [5500.0, 37.0], [5600.0, 55.0], [5700.0, 50.0], [5800.0, 38.0], [5900.0, 25.0], [6100.0, 16.0], [6000.0, 21.0], [6200.0, 20.0], [6300.0, 10.0], [6400.0, 22.0], [6500.0, 6.0], [6600.0, 10.0], [6700.0, 9.0], [6800.0, 12.0], [6900.0, 11.0], [7000.0, 12.0], [7100.0, 4.0], [7200.0, 12.0], [7300.0, 12.0], [7400.0, 10.0], [7500.0, 12.0], [7600.0, 7.0], [7700.0, 10.0], [7800.0, 20.0], [7900.0, 23.0], [8000.0, 29.0], [8100.0, 24.0], [8300.0, 24.0], [8200.0, 17.0], [8400.0, 30.0], [8500.0, 20.0], [8600.0, 19.0], [8700.0, 17.0], [8800.0, 20.0], [8900.0, 31.0], [9000.0, 22.0], [9100.0, 28.0], [9200.0, 24.0], [9300.0, 29.0], [9400.0, 36.0], [9500.0, 37.0], [9600.0, 52.0], [9700.0, 73.0], [9800.0, 61.0], [9900.0, 71.0], [10000.0, 55.0], [10100.0, 53.0], [10200.0, 32.0], [10300.0, 25.0], [10400.0, 38.0], [10500.0, 20.0], [10600.0, 20.0], [10700.0, 11.0], [10800.0, 2.0]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1847.0, "series": [{"data": [[0.0, 4.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 24.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1847.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 938.6469333333345, "minX": 1.75559142E12, "maxY": 938.6469333333345, "series": [{"data": [[1.75559142E12, 938.6469333333345]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559142E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 353.0, "minX": 1.0, "maxY": 10811.0, "series": [{"data": [[2.0, 10607.0], [3.0, 10753.0], [4.0, 5379.0], [5.0, 10180.0], [6.0, 8485.0], [7.0, 10801.0], [9.0, 10027.0], [10.0, 5923.0], [11.0, 6341.0], [12.0, 10217.0], [13.0, 10150.0], [14.0, 8410.0], [15.0, 5995.0], [16.0, 10065.0], [17.0, 10811.0], [28.0, 8390.0], [30.0, 9906.0], [33.0, 8129.0], [35.0, 8604.5], [39.0, 5657.5], [42.0, 5381.0], [45.0, 10104.0], [44.0, 9275.875], [46.0, 8145.333333333334], [48.0, 10081.0], [50.0, 9731.5], [53.0, 8507.0], [52.0, 9985.5], [54.0, 10049.0], [57.0, 5861.0], [56.0, 9791.0], [62.0, 8349.2], [71.0, 10302.666666666666], [74.0, 10754.0], [72.0, 10767.0], [78.0, 10765.0], [82.0, 9614.9], [81.0, 9228.0], [87.0, 7932.5], [86.0, 10033.0], [84.0, 7551.0], [91.0, 6710.5], [89.0, 9235.0], [95.0, 9814.0], [94.0, 9300.5], [92.0, 8835.0], [98.0, 10609.0], [97.0, 8501.0], [101.0, 10482.0], [100.0, 9351.0], [106.0, 5640.0], [104.0, 8367.666666666666], [109.0, 7899.0], [115.0, 6727.0], [113.0, 7540.5], [119.0, 8335.0], [118.0, 10035.0], [117.0, 7379.0], [122.0, 7198.0], [121.0, 10598.0], [120.0, 10738.0], [127.0, 10690.0], [126.0, 9867.0], [125.0, 10678.0], [124.0, 8485.0], [132.0, 10123.5], [130.0, 10677.0], [129.0, 5255.0], [141.0, 9094.5], [139.0, 9082.2], [137.0, 6414.0], [136.0, 5805.0], [151.0, 5462.0], [149.0, 5400.0], [148.0, 8072.0], [146.0, 9958.0], [145.0, 8396.0], [144.0, 6574.0], [159.0, 10056.0], [158.0, 10632.0], [156.0, 7981.333333333333], [153.0, 5264.0], [152.0, 10153.0], [167.0, 10006.5], [165.0, 8307.0], [164.0, 6707.0], [163.0, 6657.0], [161.0, 6545.0], [175.0, 8140.0], [174.0, 9226.0], [172.0, 6972.5], [170.0, 10469.0], [169.0, 8509.0], [168.0, 9132.0], [183.0, 9399.5], [182.0, 5743.0], [180.0, 9774.0], [179.0, 5645.0], [178.0, 5160.0], [177.0, 5203.0], [176.0, 5529.0], [191.0, 5142.0], [190.0, 5526.0], [189.0, 9795.0], [188.0, 10305.5], [186.0, 7799.0], [184.0, 5522.0], [199.0, 10201.0], [198.0, 5139.0], [197.0, 9050.0], [196.0, 9933.0], [195.0, 5879.0], [192.0, 5616.0], [206.0, 10029.0], [205.0, 10506.0], [204.0, 6352.666666666667], [201.0, 9065.0], [200.0, 5665.0], [215.0, 9482.0], [214.0, 7226.0], [213.0, 10151.0], [212.0, 10475.0], [209.0, 10627.0], [208.0, 10468.0], [223.0, 5156.0], [221.0, 5624.666666666667], [220.0, 10365.5], [219.0, 5897.0], [231.0, 5744.0], [230.0, 5501.0], [229.0, 10196.0], [228.0, 5601.0], [227.0, 7384.5], [226.0, 10273.0], [224.0, 6645.0], [239.0, 5827.0], [238.0, 5345.0], [237.0, 8237.666666666666], [234.0, 8414.0], [233.0, 10264.5], [247.0, 6947.0], [246.0, 8018.5], [244.0, 9857.0], [243.0, 8030.5], [242.0, 6455.0], [240.0, 9927.0], [255.0, 10437.0], [253.0, 5638.0], [252.0, 7764.0], [251.0, 10158.0], [249.0, 7814.0], [270.0, 9940.5], [271.0, 10132.0], [268.0, 8786.0], [259.0, 9756.0], [258.0, 5695.0], [257.0, 7921.0], [256.0, 10489.0], [267.0, 6050.0], [266.0, 6119.0], [265.0, 8231.0], [264.0, 5766.0], [263.0, 5634.0], [262.0, 10443.0], [261.0, 5882.0], [260.0, 5890.0], [275.0, 6652.0], [286.0, 5673.0], [287.0, 10622.0], [285.0, 9972.0], [282.0, 9560.5], [280.0, 7796.0], [278.0, 9863.0], [277.0, 8780.0], [276.0, 5149.0], [274.0, 9741.0], [273.0, 5731.5], [302.0, 8995.0], [303.0, 10500.0], [301.0, 7060.0], [290.0, 10545.0], [289.0, 6474.0], [288.0, 10464.0], [299.0, 5826.0], [297.0, 5904.0], [296.0, 5345.0], [295.0, 9957.0], [294.0, 7534.333333333333], [292.0, 10572.0], [315.0, 8456.666666666666], [313.0, 9757.0], [312.0, 8655.25], [311.0, 10216.0], [307.0, 5358.0], [305.0, 10161.5], [333.0, 9899.0], [335.0, 9623.5], [332.0, 7391.666666666667], [321.0, 8415.0], [320.0, 9150.0], [330.0, 10443.0], [328.0, 6224.0], [327.0, 10605.0], [326.0, 9332.0], [325.0, 9543.25], [324.0, 8202.0], [349.0, 6140.0], [350.0, 8970.0], [348.0, 7442.0], [345.0, 8191.0], [344.0, 9928.0], [343.0, 7958.0], [341.0, 10602.0], [340.0, 9529.666666666666], [339.0, 9983.0], [336.0, 10463.0], [364.0, 10370.0], [367.0, 10099.0], [366.0, 9976.0], [365.0, 9945.5], [362.0, 7817.666666666667], [359.0, 7759.5], [357.0, 9981.0], [356.0, 8427.666666666666], [354.0, 5580.0], [352.0, 6140.0], [376.0, 10030.5], [383.0, 8772.0], [379.0, 8022.0], [378.0, 6448.0], [377.0, 9892.0], [375.0, 8334.0], [373.0, 9978.0], [371.0, 10240.0], [370.0, 10132.5], [368.0, 8946.0], [399.0, 5575.0], [397.0, 5545.0], [395.0, 10213.5], [390.0, 9110.5], [388.0, 5531.0], [387.0, 10126.5], [385.0, 9770.0], [384.0, 10412.0], [402.0, 7748.0], [414.0, 5240.0], [413.0, 6814.75], [410.0, 10099.0], [408.0, 5537.0], [407.0, 9334.5], [406.0, 5204.0], [404.0, 9153.0], [401.0, 9583.0], [400.0, 9608.5], [429.0, 9401.5], [427.0, 8305.0], [426.0, 8709.666666666666], [423.0, 10036.5], [421.0, 5425.0], [420.0, 10444.0], [419.0, 7574.5], [417.0, 6395.333333333333], [435.0, 9813.0], [445.0, 5688.0], [444.0, 10398.0], [443.0, 5100.0], [442.0, 7799.5], [440.0, 9383.5], [438.0, 10042.0], [437.0, 10224.5], [434.0, 9882.0], [433.0, 10546.0], [432.0, 8360.0], [462.0, 7686.0], [463.0, 10264.0], [461.0, 6461.0], [459.0, 9769.0], [458.0, 10190.333333333334], [457.0, 9886.5], [456.0, 9860.0], [454.0, 7734.0], [449.0, 8053.0], [450.0, 10313.0], [477.0, 7943.0], [479.0, 9833.0], [476.0, 9964.5], [466.0, 10051.0], [465.0, 10165.5], [475.0, 6324.0], [473.0, 10011.0], [471.0, 8034.0], [470.0, 9801.0], [469.0, 10041.0], [468.0, 8450.5], [494.0, 10407.0], [495.0, 5614.0], [493.0, 8249.5], [491.0, 7524.0], [490.0, 9899.0], [488.0, 8930.0], [486.0, 9146.5], [483.0, 9591.0], [482.0, 10034.0], [481.0, 7392.5], [511.0, 10413.5], [510.0, 7642.0], [507.0, 5653.0], [506.0, 10396.0], [505.0, 8047.0], [503.0, 8132.0], [502.0, 9156.5], [501.0, 9792.0], [499.0, 9627.25], [532.0, 9796.0], [541.0, 8932.0], [539.0, 7951.0], [538.0, 9187.0], [518.0, 7820.0], [515.0, 5432.0], [514.0, 9292.5], [512.0, 8661.0], [527.0, 5709.0], [526.0, 5546.0], [525.0, 7634.0], [523.0, 10027.0], [522.0, 5676.0], [521.0, 9663.5], [520.0, 6770.5], [535.0, 5729.0], [534.0, 6141.0], [533.0, 8072.0], [531.0, 7175.0], [528.0, 10076.0], [571.0, 8539.666666666666], [568.0, 10237.0], [551.0, 8322.333333333334], [550.0, 9764.0], [547.0, 7640.0], [545.0, 7173.0], [544.0, 4982.0], [567.0, 9026.5], [565.0, 5492.0], [564.0, 10308.5], [563.0, 5653.0], [562.0, 10255.0], [558.0, 5333.0], [557.0, 9522.0], [556.0, 9708.0], [555.0, 5451.0], [554.0, 8089.5], [552.0, 9958.0], [606.0, 6122.0], [595.0, 10180.0], [607.0, 5881.0], [592.0, 5375.0], [594.0, 8045.0], [593.0, 5646.5], [604.0, 8028.0], [602.0, 8196.0], [601.0, 9675.666666666666], [583.0, 10220.666666666666], [582.0, 6004.0], [579.0, 10317.0], [578.0, 9999.5], [577.0, 9993.0], [576.0, 8002.75], [590.0, 10103.0], [589.0, 9620.0], [588.0, 7936.0], [586.0, 6844.5], [585.0, 10158.0], [598.0, 5814.0], [597.0, 10327.0], [596.0, 9838.0], [627.0, 5111.0], [637.0, 5091.0], [639.0, 10253.5], [624.0, 8002.0], [626.0, 9660.0], [625.0, 4929.0], [636.0, 9196.5], [635.0, 5179.0], [633.0, 9815.5], [612.0, 10042.75], [609.0, 10429.0], [623.0, 5418.0], [622.0, 10177.0], [621.0, 5093.0], [618.0, 4978.0], [617.0, 10195.0], [616.0, 6573.0], [631.0, 9991.0], [630.0, 6725.5], [628.0, 10414.0], [668.0, 6009.0], [670.0, 10376.0], [667.0, 4973.0], [645.0, 7081.333333333333], [642.0, 5222.0], [641.0, 4955.0], [640.0, 10258.0], [661.0, 9030.5], [659.0, 5220.0], [658.0, 9989.0], [657.0, 7848.0], [655.0, 9721.0], [654.0, 8651.333333333334], [653.0, 10281.0], [652.0, 9842.666666666666], [650.0, 7984.0], [648.0, 9669.0], [696.0, 9999.0], [702.0, 9999.0], [703.0, 9837.5], [690.0, 8704.0], [688.0, 8841.0], [700.0, 5588.0], [699.0, 8431.5], [697.0, 5137.0], [687.0, 10174.0], [675.0, 10382.0], [672.0, 6561.666666666667], [677.0, 9459.0], [676.0, 9916.0], [679.0, 8465.0], [678.0, 4833.0], [685.0, 5371.0], [684.0, 9895.0], [683.0, 10141.0], [681.0, 5368.0], [680.0, 9918.0], [695.0, 10315.0], [694.0, 9971.0], [693.0, 4916.0], [692.0, 9669.0], [734.0, 9733.0], [735.0, 7526.0], [720.0, 5315.0], [733.0, 7674.0], [732.0, 8927.0], [730.0, 10233.5], [728.0, 8436.0], [718.0, 7581.0], [706.0, 9692.0], [705.0, 4984.5], [709.0, 5757.0], [707.0, 10256.0], [716.0, 4999.0], [715.0, 6433.5], [713.0, 9897.0], [712.0, 8410.0], [725.0, 9995.0], [724.0, 7705.5], [723.0, 10086.0], [721.0, 8881.0], [761.0, 6610.0], [765.0, 6212.0], [767.0, 10280.0], [752.0, 9399.0], [754.0, 10020.0], [753.0, 5517.0], [764.0, 10314.0], [763.0, 10081.0], [762.0, 5367.0], [751.0, 4796.0], [738.0, 5495.0], [736.0, 5387.0], [740.0, 5615.0], [739.0, 7418.0], [742.0, 9399.0], [741.0, 8421.0], [750.0, 4771.0], [749.0, 10288.0], [748.0, 9797.0], [746.0, 9493.0], [745.0, 6762.0], [759.0, 9865.0], [758.0, 6167.0], [757.0, 9868.0], [756.0, 5719.5], [797.0, 9898.0], [799.0, 7647.0], [784.0, 9230.0], [787.0, 10011.0], [786.0, 7550.5], [796.0, 8938.0], [794.0, 5580.0], [793.0, 9692.0], [792.0, 5644.0], [783.0, 8085.0], [769.0, 9810.0], [768.0, 5217.5], [775.0, 8408.2], [770.0, 7907.0], [781.0, 9914.0], [780.0, 8479.0], [779.0, 9887.0], [778.0, 8583.5], [791.0, 7897.0], [790.0, 8389.0], [789.0, 5219.0], [788.0, 4920.0], [829.0, 9466.0], [831.0, 7429.5], [816.0, 5952.0], [828.0, 9811.0], [827.0, 5017.0], [826.0, 5610.0], [825.0, 7373.5], [815.0, 5538.0], [801.0, 4743.0], [800.0, 10158.0], [803.0, 5197.0], [802.0, 8375.0], [807.0, 10196.5], [805.0, 10084.0], [814.0, 7986.666666666667], [811.0, 5216.0], [810.0, 7792.5], [808.0, 5779.0], [822.0, 7761.0], [821.0, 9680.0], [818.0, 5789.0], [817.0, 9767.0], [856.0, 9827.0], [860.0, 5567.0], [863.0, 5289.0], [851.0, 5767.0], [849.0, 5304.5], [853.0, 9840.0], [852.0, 7780.5], [862.0, 5301.0], [861.0, 6022.0], [859.0, 9723.0], [858.0, 5343.0], [857.0, 5658.0], [847.0, 9968.5], [832.0, 9785.0], [834.0, 4762.0], [833.0, 9847.0], [836.0, 5233.0], [835.0, 10037.0], [839.0, 9738.5], [837.0, 10197.0], [845.0, 6093.0], [844.0, 5775.0], [843.0, 5866.0], [841.0, 9751.0], [840.0, 6066.0], [855.0, 9827.0], [854.0, 5881.0], [888.0, 9711.0], [894.0, 9667.0], [895.0, 5780.0], [881.0, 9765.5], [892.0, 9607.0], [890.0, 6111.0], [889.0, 9991.0], [879.0, 9981.0], [864.0, 5184.0], [867.0, 5804.0], [865.0, 5709.0], [869.0, 9799.0], [868.0, 7385.0], [871.0, 5381.0], [870.0, 9750.0], [878.0, 9539.0], [876.0, 9270.0], [875.0, 9927.0], [873.0, 5087.0], [872.0, 9706.0], [887.0, 9736.0], [885.0, 9703.0], [884.0, 9688.0], [882.0, 9734.0], [924.0, 9789.0], [926.0, 9833.0], [913.0, 6051.0], [912.0, 9765.0], [923.0, 6044.0], [922.0, 5287.0], [921.0, 9667.0], [920.0, 5480.5], [911.0, 5802.0], [896.0, 9705.0], [903.0, 9096.333333333334], [897.0, 5427.0], [910.0, 6259.0], [909.0, 9529.5], [908.0, 9594.5], [905.0, 4858.0], [904.0, 6074.0], [919.0, 9741.5], [916.0, 5744.0], [915.0, 9693.0], [914.0, 5219.0], [954.0, 9524.0], [947.0, 5360.0], [957.0, 5755.0], [959.0, 10075.5], [946.0, 9860.0], [945.0, 7442.5], [956.0, 9671.5], [952.0, 6102.0], [935.0, 9926.0], [934.0, 5735.0], [933.0, 5990.0], [932.0, 9739.0], [931.0, 7815.5], [929.0, 9846.0], [943.0, 5952.0], [942.0, 9604.5], [940.0, 10057.0], [939.0, 9805.0], [938.0, 7479.0], [936.0, 9712.0], [951.0, 5894.0], [950.0, 7932.5], [948.0, 6009.0], [985.0, 8197.666666666666], [990.0, 5342.0], [991.0, 10018.0], [977.0, 9824.0], [989.0, 5820.0], [988.0, 7854.0], [986.0, 9826.0], [975.0, 9771.5], [962.0, 7799.0], [961.0, 5710.0], [965.0, 9142.0], [964.0, 7545.0], [967.0, 9596.0], [966.0, 5797.0], [974.0, 5581.0], [972.0, 7790.5], [970.0, 9808.0], [969.0, 9637.0], [968.0, 5552.0], [982.0, 5266.0], [981.0, 5933.0], [980.0, 7610.5], [978.0, 5871.5], [1016.0, 9679.5], [1022.0, 5875.0], [1023.0, 5361.0], [1009.0, 9603.5], [1021.0, 5254.0], [1020.0, 9520.333333333334], [1017.0, 9471.0], [1007.0, 5263.0], [994.0, 7576.5], [992.0, 9808.0], [996.0, 5654.0], [995.0, 5596.0], [998.0, 9800.0], [997.0, 9816.0], [1006.0, 9677.5], [1004.0, 9743.0], [1003.0, 5880.0], [1002.0, 9585.0], [1001.0, 8094.333333333333], [1014.0, 9459.0], [1013.0, 9956.0], [1012.0, 9775.0], [1011.0, 9514.5], [1084.0, 5703.0], [1064.0, 9652.0], [1058.0, 9083.0], [1060.0, 9550.0], [1062.0, 9456.0], [1066.0, 9532.0], [1068.0, 9655.0], [1070.0, 9434.0], [1086.0, 6107.0], [1080.0, 9796.0], [1078.0, 9446.0], [1074.0, 9505.0], [1072.0, 5477.0], [1038.0, 9727.0], [1036.0, 9245.0], [1034.0, 9522.0], [1032.0, 9870.0], [1030.0, 9686.0], [1028.0, 9629.0], [1026.0, 9749.0], [1054.0, 9593.5], [1052.0, 9406.0], [1048.0, 7457.5], [1046.0, 9493.0], [1044.0, 9405.0], [1042.0, 5212.0], [1040.0, 9685.0], [1148.0, 9404.0], [1120.0, 9064.0], [1122.0, 9308.0], [1124.0, 8734.0], [1126.0, 8843.0], [1128.0, 8708.0], [1130.0, 9626.0], [1132.0, 5230.0], [1134.0, 5300.0], [1150.0, 9525.0], [1142.0, 9237.0], [1140.0, 9398.0], [1136.0, 9420.0], [1102.0, 7435.0], [1100.0, 5647.0], [1098.0, 9739.0], [1096.0, 6213.0], [1094.0, 9311.0], [1092.0, 9178.0], [1090.0, 9599.0], [1088.0, 8868.0], [1116.0, 5732.0], [1112.0, 5365.0], [1110.0, 9406.0], [1108.0, 9701.0], [1104.0, 9488.0], [1206.0, 5406.0], [1202.0, 8452.0], [1212.0, 9037.5], [1184.0, 5208.0], [1188.0, 7426.0], [1186.0, 9415.0], [1190.0, 5408.0], [1192.0, 8850.0], [1194.0, 9126.0], [1196.0, 9057.0], [1198.0, 8590.0], [1214.0, 5220.0], [1210.0, 5439.0], [1204.0, 9066.0], [1200.0, 9386.0], [1152.0, 8972.0], [1154.0, 9506.0], [1158.0, 9257.0], [1160.0, 8742.0], [1162.0, 9349.0], [1164.0, 9485.0], [1166.0, 9232.0], [1182.0, 5418.0], [1176.0, 9497.0], [1174.0, 9203.0], [1172.0, 7128.5], [1170.0, 7036.5], [1168.0, 5438.0], [1276.0, 8868.5], [1256.0, 8409.0], [1248.0, 5225.0], [1250.0, 8950.0], [1252.0, 8465.0], [1254.0, 8586.0], [1258.0, 9165.0], [1260.0, 8229.0], [1262.0, 5321.0], [1278.0, 8504.0], [1274.0, 8998.0], [1272.0, 8416.0], [1270.0, 8559.666666666666], [1266.0, 9135.0], [1216.0, 9011.0], [1218.0, 9209.0], [1220.0, 9248.0], [1222.0, 8383.0], [1224.0, 9101.0], [1226.0, 8694.0], [1228.0, 5340.0], [1230.0, 8969.0], [1246.0, 8616.0], [1244.0, 9174.0], [1242.0, 8436.0], [1240.0, 9008.0], [1238.0, 8821.666666666666], [1234.0, 9066.0], [1232.0, 9255.0], [1336.0, 8073.0], [1340.0, 5169.0], [1312.0, 8590.0], [1314.0, 5089.0], [1316.0, 8838.0], [1318.0, 8877.0], [1322.0, 8867.0], [1324.0, 8551.0], [1326.0, 8769.0], [1342.0, 4875.0], [1338.0, 7869.0], [1332.0, 6822.5], [1330.0, 8360.5], [1294.0, 5221.0], [1292.0, 9004.0], [1290.0, 8986.0], [1288.0, 8989.0], [1286.0, 8876.0], [1284.0, 8882.0], [1282.0, 8904.0], [1280.0, 5177.0], [1310.0, 8393.0], [1308.0, 5338.0], [1306.0, 8929.0], [1304.0, 5399.0], [1302.0, 8813.0], [1300.0, 8046.0], [1298.0, 8615.0], [1296.0, 8977.0], [1400.0, 7552.0], [1396.0, 7578.0], [1404.0, 7545.0], [1376.0, 7795.0], [1378.0, 7796.0], [1382.0, 8248.333333333334], [1384.0, 8286.0], [1386.0, 7832.0], [1388.0, 7656.0], [1390.0, 7715.0], [1406.0, 7346.0], [1402.0, 7524.0], [1398.0, 4769.0], [1394.0, 8342.0], [1392.0, 8138.0], [1344.0, 8064.0], [1346.0, 5162.0], [1348.0, 8426.5], [1350.0, 8011.0], [1354.0, 8538.5], [1352.0, 8560.0], [1356.0, 8332.0], [1358.0, 5106.0], [1374.0, 8196.0], [1372.0, 7905.0], [1370.0, 5198.0], [1368.0, 7853.0], [1366.0, 8456.0], [1364.0, 7912.0], [1360.0, 6387.0], [1468.0, 7267.0], [1448.0, 7899.0], [1440.0, 7349.0], [1442.0, 7691.5], [1444.0, 7357.0], [1446.0, 4684.0], [1450.0, 7082.0], [1452.0, 7274.0], [1454.0, 7069.0], [1470.0, 7661.0], [1466.0, 7085.0], [1460.0, 7098.0], [1458.0, 7498.0], [1456.0, 7019.0], [1422.0, 7408.0], [1420.0, 6061.0], [1418.0, 7481.0], [1416.0, 6056.5], [1414.0, 7905.0], [1412.0, 8107.0], [1410.0, 4928.0], [1408.0, 7952.0], [1438.0, 7976.0], [1436.0, 8056.0], [1434.0, 8014.0], [1432.0, 7273.0], [1430.0, 4905.0], [1428.0, 4473.0], [1426.0, 6208.0], [1424.0, 7486.0], [1528.0, 6438.0], [1524.0, 6446.0], [1532.0, 6841.0], [1504.0, 6621.0], [1508.0, 4140.0], [1510.0, 7200.0], [1512.0, 6703.0], [1516.0, 6640.0], [1518.0, 7321.0], [1534.0, 6443.0], [1530.0, 6256.0], [1526.0, 6587.0], [1522.0, 7026.0], [1520.0, 4162.0], [1472.0, 6927.0], [1480.0, 5955.333333333333], [1482.0, 6834.0], [1484.0, 4087.0], [1486.0, 7554.0], [1502.0, 6818.0], [1500.0, 6743.0], [1498.0, 4140.0], [1494.0, 7234.0], [1492.0, 4344.0], [1490.0, 6816.0], [1596.0, 5822.0], [1568.0, 6076.0], [1572.0, 6607.0], [1574.0, 5921.0], [1576.0, 5992.0], [1578.0, 5857.0], [1580.0, 5450.0], [1582.0, 5863.0], [1598.0, 3504.0], [1592.0, 5794.0], [1590.0, 5890.0], [1588.0, 5900.0], [1586.0, 6265.0], [1584.0, 6297.0], [1550.0, 6913.0], [1548.0, 6259.0], [1546.0, 6957.0], [1544.0, 6124.0], [1540.0, 3635.0], [1538.0, 6243.0], [1536.0, 6800.0], [1566.0, 3666.0], [1564.0, 6710.0], [1562.0, 6764.0], [1560.0, 6836.0], [1558.0, 6110.0], [1556.0, 3681.0], [1554.0, 6669.0], [1552.0, 6259.0], [1662.0, 5596.0], [1632.0, 5421.0], [1634.0, 5815.0], [1636.0, 3273.0], [1638.0, 5892.0], [1640.0, 3030.0], [1642.0, 5329.0], [1644.0, 5944.0], [1646.0, 5841.0], [1658.0, 5791.0], [1656.0, 5288.0], [1652.0, 5624.0], [1650.0, 5219.0], [1648.0, 5032.0], [1610.0, 5686.0], [1608.0, 5758.0], [1606.0, 5711.0], [1604.0, 6439.0], [1600.0, 6358.0], [1630.0, 5430.0], [1628.0, 5333.0], [1626.0, 6226.0], [1624.0, 4888.5], [1622.0, 5627.0], [1620.0, 5609.0], [1618.0, 3843.0], [1616.0, 5569.0], [1724.0, 4813.0], [1698.0, 4594.666666666667], [1700.0, 4427.5], [1702.0, 3183.0], [1704.0, 4892.0], [1706.0, 3310.0], [1708.0, 3304.0], [1710.0, 3191.0], [1726.0, 5373.0], [1722.0, 2502.0], [1720.0, 5536.0], [1718.0, 3709.5], [1716.0, 4727.0], [1714.0, 4271.5], [1712.0, 4687.0], [1664.0, 5518.0], [1666.0, 4924.0], [1670.0, 5167.0], [1668.0, 3068.0], [1672.0, 5655.0], [1676.0, 5694.0], [1678.0, 2717.0], [1694.0, 5281.0], [1686.0, 3408.0], [1684.0, 5416.0], [1682.0, 5041.0], [1680.0, 3128.0], [1784.0, 3908.0], [1780.0, 1983.0], [1788.0, 4238.0], [1760.0, 2084.0], [1762.0, 2576.0], [1764.0, 4742.0], [1768.0, 4687.0], [1770.0, 2319.0], [1772.0, 2079.0], [1774.0, 4059.0], [1790.0, 3777.0], [1786.0, 1661.0], [1782.0, 3957.0], [1778.0, 3962.0], [1776.0, 4518.0], [1728.0, 4863.0], [1730.0, 4565.0], [1732.0, 5244.0], [1736.0, 5227.0], [1738.0, 4465.5], [1740.0, 2841.0], [1742.0, 4504.0], [1758.0, 4196.0], [1754.0, 4953.0], [1752.0, 4492.0], [1750.0, 4849.0], [1748.0, 4739.5], [1746.0, 2309.0], [1744.0, 5094.0], [1850.0, 856.0], [1832.0, 1216.0], [1824.0, 1166.0], [1826.0, 2948.0], [1828.0, 2970.0], [1830.0, 1151.0], [1834.0, 1005.0], [1836.0, 1371.0], [1838.0, 1013.0], [1852.0, 596.0], [1846.0, 3116.0], [1844.0, 867.0], [1842.0, 3354.0], [1840.0, 1079.0], [1798.0, 4258.0], [1796.0, 1657.0], [1794.0, 3694.0], [1792.0, 3762.0], [1822.0, 3858.0], [1820.0, 2678.0], [1818.0, 3410.0], [1816.0, 1770.0], [1814.0, 1357.0], [1812.0, 1799.0], [1810.0, 3496.0], [1866.0, 1307.3333333333333], [1868.0, 507.0], [1864.0, 501.0], [1862.0, 1998.0], [1860.0, 353.0], [1858.0, 2782.0], [1856.0, 678.0], [1085.0, 9577.0], [1087.0, 9785.0], [1057.0, 7586.5], [1059.0, 9665.0], [1061.0, 5411.0], [1063.0, 9659.0], [1065.0, 9368.0], [1067.0, 5182.0], [1069.0, 9618.0], [1071.0, 9589.0], [1083.0, 5494.5], [1081.0, 5272.0], [1079.0, 6105.0], [1075.0, 9220.0], [1073.0, 9624.0], [1039.0, 9893.0], [1037.0, 9317.0], [1035.0, 9603.0], [1033.0, 9125.0], [1031.0, 5219.0], [1029.0, 5901.0], [1027.0, 9387.5], [1025.0, 9467.0], [1055.0, 9524.0], [1049.0, 9410.0], [1045.0, 9094.0], [1043.0, 9485.5], [1149.0, 9534.0], [1127.0, 9385.0], [1151.0, 9156.0], [1121.0, 5497.0], [1123.0, 9453.0], [1125.0, 5355.0], [1129.0, 5644.0], [1131.0, 9324.0], [1133.0, 5926.0], [1147.0, 9096.5], [1145.0, 8983.5], [1143.0, 9592.0], [1141.0, 9176.0], [1139.0, 8983.5], [1137.0, 8670.0], [1099.0, 9511.0], [1097.0, 5797.0], [1095.0, 9518.0], [1093.0, 9772.0], [1091.0, 9362.0], [1089.0, 9391.0], [1119.0, 9232.0], [1117.0, 5519.0], [1115.0, 9405.0], [1113.0, 8788.0], [1111.0, 9276.0], [1109.0, 9394.0], [1107.0, 7524.5], [1105.0, 5761.0], [1207.0, 9332.0], [1215.0, 9326.0], [1185.0, 8877.0], [1189.0, 9273.0], [1191.0, 9056.0], [1193.0, 5470.0], [1197.0, 5482.0], [1199.0, 9194.0], [1213.0, 5303.0], [1209.0, 7409.0], [1205.0, 9298.0], [1203.0, 9246.0], [1201.0, 9060.0], [1183.0, 9437.0], [1153.0, 8646.0], [1157.0, 7382.5], [1155.0, 9152.0], [1159.0, 8947.0], [1161.0, 8621.0], [1163.0, 9332.0], [1165.0, 8611.0], [1167.0, 9514.0], [1181.0, 9000.5], [1179.0, 7816.666666666667], [1175.0, 9507.0], [1173.0, 5643.0], [1277.0, 5561.0], [1279.0, 5614.0], [1249.0, 9097.0], [1251.0, 9147.0], [1253.0, 8900.0], [1255.0, 9185.0], [1257.0, 9168.0], [1259.0, 9111.0], [1261.0, 8233.0], [1263.0, 8957.0], [1273.0, 8203.0], [1271.0, 8532.0], [1267.0, 5301.0], [1265.0, 7186.0], [1247.0, 5437.0], [1219.0, 5711.0], [1221.0, 9301.0], [1223.0, 8838.0], [1225.0, 8379.0], [1227.0, 8986.0], [1229.0, 9091.0], [1231.0, 5153.0], [1245.0, 9045.0], [1243.0, 8632.0], [1241.0, 8642.0], [1235.0, 9244.0], [1233.0, 5468.0], [1337.0, 4866.0], [1317.0, 5100.0], [1343.0, 4720.0], [1313.0, 5304.0], [1315.0, 5115.0], [1321.0, 8093.666666666667], [1323.0, 8791.0], [1325.0, 8784.0], [1341.0, 8480.0], [1339.0, 8779.0], [1335.0, 8661.0], [1333.0, 5283.0], [1329.0, 5076.5], [1295.0, 8576.0], [1293.0, 8099.0], [1291.0, 8725.0], [1289.0, 8445.0], [1287.0, 9062.0], [1285.0, 9072.0], [1283.0, 8465.0], [1281.0, 8804.0], [1311.0, 7999.0], [1307.0, 8011.0], [1305.0, 5384.0], [1303.0, 8328.0], [1301.0, 5251.0], [1299.0, 8963.0], [1401.0, 7499.0], [1407.0, 7961.0], [1377.0, 7884.0], [1379.0, 7877.0], [1383.0, 7861.0], [1385.0, 8155.0], [1387.0, 8285.0], [1391.0, 7605.0], [1405.0, 7331.0], [1403.0, 7456.0], [1399.0, 4853.0], [1397.0, 7582.0], [1395.0, 7854.0], [1393.0, 4703.0], [1375.0, 7888.0], [1345.0, 8685.0], [1349.0, 8084.0], [1351.0, 8561.0], [1355.0, 8459.0], [1357.0, 4762.0], [1373.0, 4689.0], [1371.0, 8451.0], [1369.0, 4902.0], [1367.0, 7754.0], [1365.0, 7768.0], [1363.0, 8476.5], [1361.0, 4699.0], [1469.0, 6971.0], [1471.0, 6911.0], [1443.0, 7982.0], [1445.0, 7306.0], [1447.0, 4381.0], [1449.0, 7296.0], [1451.0, 7787.0], [1453.0, 7105.0], [1455.0, 7252.0], [1465.0, 4508.0], [1463.0, 7306.5], [1461.0, 6904.0], [1459.0, 7637.0], [1457.0, 4502.0], [1423.0, 5014.0], [1421.0, 4601.0], [1417.0, 7476.0], [1413.0, 4821.0], [1411.0, 7534.0], [1409.0, 8042.0], [1439.0, 7321.0], [1437.0, 7232.0], [1435.0, 7317.0], [1433.0, 8077.0], [1431.0, 4758.0], [1429.0, 7310.0], [1427.0, 4486.0], [1533.0, 6992.0], [1535.0, 6374.0], [1505.0, 6804.0], [1507.0, 7072.5], [1509.0, 4191.0], [1511.0, 6644.0], [1515.0, 5316.0], [1513.0, 3960.0], [1517.0, 7161.0], [1519.0, 6708.0], [1531.0, 6296.0], [1529.0, 6495.0], [1527.0, 7131.0], [1525.0, 7230.0], [1523.0, 7001.0], [1521.0, 7296.0], [1503.0, 6734.0], [1473.0, 7022.0], [1477.0, 6971.5], [1475.0, 5992.0], [1481.0, 4135.0], [1483.0, 7593.0], [1485.0, 6872.0], [1487.0, 7256.0], [1501.0, 7433.0], [1499.0, 4159.0], [1497.0, 7039.5], [1495.0, 6762.0], [1493.0, 7374.0], [1491.0, 4105.0], [1489.0, 6707.5], [1595.0, 6310.0], [1587.0, 6530.0], [1599.0, 5791.0], [1571.0, 6303.5], [1569.0, 5985.0], [1573.0, 3244.0], [1575.0, 6434.0], [1577.0, 3803.0], [1579.0, 3652.0], [1581.0, 6515.0], [1583.0, 3674.0], [1597.0, 5721.0], [1593.0, 3259.0], [1591.0, 5600.0], [1589.0, 5726.0], [1585.0, 5924.0], [1551.0, 3833.0], [1549.0, 3670.0], [1547.0, 6885.0], [1545.0, 6388.0], [1543.0, 6699.0], [1541.0, 6896.0], [1539.0, 6989.0], [1537.0, 7022.0], [1567.0, 6117.0], [1565.0, 6061.0], [1563.0, 6008.0], [1561.0, 6168.0], [1559.0, 5707.0], [1555.0, 4387.0], [1553.0, 6048.0], [1659.0, 5792.0], [1639.0, 5238.0], [1663.0, 5618.0], [1633.0, 6100.0], [1635.0, 5349.0], [1637.0, 5775.0], [1641.0, 3196.0], [1645.0, 5211.0], [1647.0, 5324.0], [1661.0, 5111.5], [1657.0, 5659.0], [1653.0, 5762.0], [1651.0, 5849.0], [1649.0, 5777.0], [1615.0, 5906.0], [1613.0, 6078.333333333333], [1609.0, 3395.0], [1607.0, 3110.0], [1605.0, 6319.0], [1603.0, 4905.0], [1601.0, 3095.0], [1631.0, 5367.0], [1629.0, 3208.0], [1627.0, 5470.0], [1625.0, 5543.0], [1621.0, 6130.0], [1619.0, 6049.0], [1617.0, 6339.0], [1723.0, 4738.0], [1715.0, 4892.0], [1727.0, 5313.0], [1701.0, 3131.0], [1703.0, 3296.0], [1705.0, 4923.0], [1707.0, 5335.0], [1709.0, 4935.0], [1711.0, 3218.0], [1725.0, 4789.0], [1721.0, 5381.0], [1719.0, 2537.0], [1695.0, 5449.666666666667], [1665.0, 5137.0], [1667.0, 4888.0], [1671.0, 5634.0], [1675.0, 5053.0], [1673.0, 2708.0], [1677.0, 5063.0], [1679.0, 5722.0], [1693.0, 4992.0], [1689.0, 4809.0], [1687.0, 3339.0], [1685.0, 5016.0], [1683.0, 5082.0], [1681.0, 5008.0], [1789.0, 2008.0], [1791.0, 4475.0], [1761.0, 2252.0], [1763.0, 2108.0], [1767.0, 4485.5], [1765.0, 2473.0], [1769.0, 2379.0], [1771.0, 4796.0], [1773.0, 2362.0], [1775.0, 3901.0], [1787.0, 2179.0], [1785.0, 1848.0], [1783.0, 1860.0], [1781.0, 1651.0], [1779.0, 3826.0], [1777.0, 2270.0], [1759.0, 1977.0], [1729.0, 5412.0], [1731.0, 4639.0], [1733.0, 5202.0], [1735.0, 3728.0], [1739.0, 2448.0], [1741.0, 2285.0], [1743.0, 4412.0], [1757.0, 3551.5], [1755.0, 2510.0], [1753.0, 4951.0], [1749.0, 1868.0], [1745.0, 4218.0], [1851.0, 2260.0], [1855.0, 2651.3333333333335], [1825.0, 3493.0], [1827.0, 1346.0], [1829.0, 2631.0], [1831.0, 2631.0], [1833.0, 1185.0], [1835.0, 1235.0], [1837.0, 1045.0], [1839.0, 805.0], [1849.0, 2814.5], [1847.0, 3190.0], [1845.0, 855.0], [1843.0, 2657.0], [1841.0, 3145.0], [1797.0, 1997.0], [1795.0, 1563.0], [1793.0, 3722.0], [1823.0, 3286.0], [1821.0, 1390.0], [1817.0, 3310.0], [1815.0, 3903.0], [1813.0, 3473.0], [1811.0, 3420.0], [1809.0, 2266.272727272727], [1863.0, 1683.0], [1859.0, 2536.0], [1867.0, 1396.5], [1861.0, 1697.0], [1857.0, 614.0], [1.0, 8473.0]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}, {"data": [[938.6469333333345, 7376.421866666664]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1868.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14250.0, "minX": 1.75559142E12, "maxY": 120580.68333333333, "series": [{"data": [[1.75559142E12, 120580.68333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75559142E12, 14250.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559142E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7376.421866666664, "minX": 1.75559142E12, "maxY": 7376.421866666664, "series": [{"data": [[1.75559142E12, 7376.421866666664]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559142E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7376.387200000006, "minX": 1.75559142E12, "maxY": 7376.387200000006, "series": [{"data": [[1.75559142E12, 7376.387200000006]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559142E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2671.8917333333325, "minX": 1.75559142E12, "maxY": 2671.8917333333325, "series": [{"data": [[1.75559142E12, 2671.8917333333325]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559142E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 285.0, "minX": 1.75559142E12, "maxY": 10811.0, "series": [{"data": [[1.75559142E12, 10811.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75559142E12, 10137.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75559142E12, 10657.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75559142E12, 10388.8]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75559142E12, 285.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75559142E12, 7912.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559142E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1662.0, "minX": 6.0, "maxY": 9459.0, "series": [{"data": [[16.0, 1662.0], [133.0, 7738.0], [259.0, 8929.0], [1057.0, 9459.0], [34.0, 1815.5], [98.0, 5776.0], [6.0, 9332.5], [103.0, 6762.0], [106.0, 4878.0], [63.0, 3286.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1057.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1661.5, "minX": 6.0, "maxY": 9458.0, "series": [{"data": [[16.0, 1661.5], [133.0, 7738.0], [259.0, 8929.0], [1057.0, 9458.0], [34.0, 1815.5], [98.0, 5776.0], [6.0, 9332.5], [103.0, 6762.0], [106.0, 4878.0], [63.0, 3286.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1057.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559142E12, "maxY": 31.25, "series": [{"data": [[1.75559142E12, 31.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559142E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559142E12, "maxY": 31.25, "series": [{"data": [[1.75559142E12, 31.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559142E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559142E12, "maxY": 31.25, "series": [{"data": [[1.75559142E12, 31.25]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559142E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559142E12, "maxY": 31.25, "series": [{"data": [[1.75559142E12, 31.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559142E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

