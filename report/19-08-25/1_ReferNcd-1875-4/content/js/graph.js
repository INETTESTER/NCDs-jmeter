/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 35.0, "minX": 0.0, "maxY": 6417.0, "series": [{"data": [[0.0, 35.0], [0.1, 38.0], [0.2, 39.0], [0.3, 39.0], [0.4, 41.0], [0.5, 41.0], [0.6, 41.0], [0.7, 41.0], [0.8, 41.0], [0.9, 42.0], [1.0, 42.0], [1.1, 42.0], [1.2, 42.0], [1.3, 42.0], [1.4, 43.0], [1.5, 43.0], [1.6, 43.0], [1.7, 43.0], [1.8, 43.0], [1.9, 44.0], [2.0, 44.0], [2.1, 44.0], [2.2, 44.0], [2.3, 44.0], [2.4, 45.0], [2.5, 45.0], [2.6, 45.0], [2.7, 45.0], [2.8, 45.0], [2.9, 45.0], [3.0, 45.0], [3.1, 46.0], [3.2, 46.0], [3.3, 46.0], [3.4, 46.0], [3.5, 46.0], [3.6, 46.0], [3.7, 46.0], [3.8, 47.0], [3.9, 47.0], [4.0, 47.0], [4.1, 47.0], [4.2, 47.0], [4.3, 47.0], [4.4, 47.0], [4.5, 48.0], [4.6, 48.0], [4.7, 48.0], [4.8, 48.0], [4.9, 48.0], [5.0, 48.0], [5.1, 48.0], [5.2, 49.0], [5.3, 49.0], [5.4, 49.0], [5.5, 49.0], [5.6, 49.0], [5.7, 49.0], [5.8, 49.0], [5.9, 50.0], [6.0, 50.0], [6.1, 50.0], [6.2, 50.0], [6.3, 50.0], [6.4, 50.0], [6.5, 50.0], [6.6, 50.0], [6.7, 51.0], [6.8, 51.0], [6.9, 51.0], [7.0, 51.0], [7.1, 51.0], [7.2, 51.0], [7.3, 51.0], [7.4, 52.0], [7.5, 52.0], [7.6, 52.0], [7.7, 52.0], [7.8, 52.0], [7.9, 52.0], [8.0, 52.0], [8.1, 52.0], [8.2, 52.0], [8.3, 53.0], [8.4, 53.0], [8.5, 53.0], [8.6, 53.0], [8.7, 54.0], [8.8, 54.0], [8.9, 54.0], [9.0, 54.0], [9.1, 54.0], [9.2, 54.0], [9.3, 54.0], [9.4, 55.0], [9.5, 55.0], [9.6, 55.0], [9.7, 55.0], [9.8, 55.0], [9.9, 56.0], [10.0, 56.0], [10.1, 56.0], [10.2, 56.0], [10.3, 56.0], [10.4, 56.0], [10.5, 56.0], [10.6, 56.0], [10.7, 57.0], [10.8, 57.0], [10.9, 57.0], [11.0, 57.0], [11.1, 57.0], [11.2, 57.0], [11.3, 57.0], [11.4, 57.0], [11.5, 58.0], [11.6, 58.0], [11.7, 59.0], [11.8, 59.0], [11.9, 59.0], [12.0, 59.0], [12.1, 59.0], [12.2, 59.0], [12.3, 60.0], [12.4, 60.0], [12.5, 60.0], [12.6, 60.0], [12.7, 60.0], [12.8, 61.0], [12.9, 61.0], [13.0, 61.0], [13.1, 61.0], [13.2, 62.0], [13.3, 62.0], [13.4, 62.0], [13.5, 62.0], [13.6, 63.0], [13.7, 63.0], [13.8, 63.0], [13.9, 64.0], [14.0, 64.0], [14.1, 64.0], [14.2, 64.0], [14.3, 64.0], [14.4, 64.0], [14.5, 64.0], [14.6, 64.0], [14.7, 65.0], [14.8, 65.0], [14.9, 65.0], [15.0, 66.0], [15.1, 66.0], [15.2, 66.0], [15.3, 66.0], [15.4, 66.0], [15.5, 67.0], [15.6, 67.0], [15.7, 67.0], [15.8, 67.0], [15.9, 67.0], [16.0, 68.0], [16.1, 68.0], [16.2, 68.0], [16.3, 68.0], [16.4, 68.0], [16.5, 69.0], [16.6, 69.0], [16.7, 69.0], [16.8, 69.0], [16.9, 69.0], [17.0, 71.0], [17.1, 71.0], [17.2, 71.0], [17.3, 71.0], [17.4, 72.0], [17.5, 72.0], [17.6, 72.0], [17.7, 73.0], [17.8, 73.0], [17.9, 73.0], [18.0, 74.0], [18.1, 75.0], [18.2, 76.0], [18.3, 76.0], [18.4, 76.0], [18.5, 76.0], [18.6, 77.0], [18.7, 77.0], [18.8, 78.0], [18.9, 78.0], [19.0, 78.0], [19.1, 79.0], [19.2, 79.0], [19.3, 79.0], [19.4, 80.0], [19.5, 80.0], [19.6, 80.0], [19.7, 81.0], [19.8, 81.0], [19.9, 81.0], [20.0, 82.0], [20.1, 82.0], [20.2, 82.0], [20.3, 82.0], [20.4, 82.0], [20.5, 83.0], [20.6, 83.0], [20.7, 84.0], [20.8, 84.0], [20.9, 84.0], [21.0, 86.0], [21.1, 86.0], [21.2, 87.0], [21.3, 87.0], [21.4, 88.0], [21.5, 88.0], [21.6, 90.0], [21.7, 91.0], [21.8, 91.0], [21.9, 93.0], [22.0, 93.0], [22.1, 93.0], [22.2, 94.0], [22.3, 97.0], [22.4, 98.0], [22.5, 102.0], [22.6, 104.0], [22.7, 105.0], [22.8, 108.0], [22.9, 109.0], [23.0, 110.0], [23.1, 113.0], [23.2, 114.0], [23.3, 114.0], [23.4, 115.0], [23.5, 117.0], [23.6, 118.0], [23.7, 118.0], [23.8, 118.0], [23.9, 119.0], [24.0, 122.0], [24.1, 126.0], [24.2, 127.0], [24.3, 128.0], [24.4, 128.0], [24.5, 129.0], [24.6, 129.0], [24.7, 130.0], [24.8, 130.0], [24.9, 130.0], [25.0, 130.0], [25.1, 132.0], [25.2, 133.0], [25.3, 134.0], [25.4, 136.0], [25.5, 137.0], [25.6, 137.0], [25.7, 137.0], [25.8, 138.0], [25.9, 140.0], [26.0, 140.0], [26.1, 143.0], [26.2, 143.0], [26.3, 145.0], [26.4, 145.0], [26.5, 146.0], [26.6, 148.0], [26.7, 151.0], [26.8, 151.0], [26.9, 155.0], [27.0, 156.0], [27.1, 158.0], [27.2, 159.0], [27.3, 160.0], [27.4, 161.0], [27.5, 164.0], [27.6, 164.0], [27.7, 166.0], [27.8, 167.0], [27.9, 167.0], [28.0, 169.0], [28.1, 171.0], [28.2, 172.0], [28.3, 173.0], [28.4, 175.0], [28.5, 176.0], [28.6, 178.0], [28.7, 180.0], [28.8, 180.0], [28.9, 181.0], [29.0, 181.0], [29.1, 184.0], [29.2, 186.0], [29.3, 187.0], [29.4, 190.0], [29.5, 192.0], [29.6, 192.0], [29.7, 193.0], [29.8, 194.0], [29.9, 195.0], [30.0, 195.0], [30.1, 197.0], [30.2, 197.0], [30.3, 198.0], [30.4, 199.0], [30.5, 201.0], [30.6, 202.0], [30.7, 203.0], [30.8, 208.0], [30.9, 209.0], [31.0, 209.0], [31.1, 212.0], [31.2, 213.0], [31.3, 214.0], [31.4, 220.0], [31.5, 221.0], [31.6, 223.0], [31.7, 225.0], [31.8, 233.0], [31.9, 234.0], [32.0, 238.0], [32.1, 242.0], [32.2, 242.0], [32.3, 246.0], [32.4, 248.0], [32.5, 250.0], [32.6, 250.0], [32.7, 252.0], [32.8, 255.0], [32.9, 255.0], [33.0, 259.0], [33.1, 261.0], [33.2, 262.0], [33.3, 275.0], [33.4, 276.0], [33.5, 277.0], [33.6, 285.0], [33.7, 286.0], [33.8, 291.0], [33.9, 292.0], [34.0, 295.0], [34.1, 296.0], [34.2, 298.0], [34.3, 299.0], [34.4, 300.0], [34.5, 302.0], [34.6, 303.0], [34.7, 320.0], [34.8, 324.0], [34.9, 324.0], [35.0, 326.0], [35.1, 326.0], [35.2, 333.0], [35.3, 339.0], [35.4, 343.0], [35.5, 362.0], [35.6, 366.0], [35.7, 376.0], [35.8, 383.0], [35.9, 393.0], [36.0, 394.0], [36.1, 401.0], [36.2, 407.0], [36.3, 411.0], [36.4, 414.0], [36.5, 453.0], [36.6, 472.0], [36.7, 489.0], [36.8, 495.0], [36.9, 519.0], [37.0, 522.0], [37.1, 585.0], [37.2, 839.0], [37.3, 867.0], [37.4, 1004.0], [37.5, 1145.0], [37.6, 1167.0], [37.7, 1271.0], [37.8, 1295.0], [37.9, 1306.0], [38.0, 1382.0], [38.1, 1392.0], [38.2, 1416.0], [38.3, 1428.0], [38.4, 1483.0], [38.5, 1534.0], [38.6, 1590.0], [38.7, 1648.0], [38.8, 1675.0], [38.9, 1687.0], [39.0, 1734.0], [39.1, 1777.0], [39.2, 1825.0], [39.3, 1874.0], [39.4, 1879.0], [39.5, 1904.0], [39.6, 1954.0], [39.7, 1995.0], [39.8, 2039.0], [39.9, 2057.0], [40.0, 2072.0], [40.1, 2074.0], [40.2, 2080.0], [40.3, 2089.0], [40.4, 2105.0], [40.5, 2116.0], [40.6, 2129.0], [40.7, 2137.0], [40.8, 2143.0], [40.9, 2170.0], [41.0, 2222.0], [41.1, 2224.0], [41.2, 2273.0], [41.3, 2286.0], [41.4, 2295.0], [41.5, 2313.0], [41.6, 2341.0], [41.7, 2347.0], [41.8, 2370.0], [41.9, 2381.0], [42.0, 2416.0], [42.1, 2428.0], [42.2, 2445.0], [42.3, 2459.0], [42.4, 2478.0], [42.5, 2540.0], [42.6, 2579.0], [42.7, 2591.0], [42.8, 2608.0], [42.9, 2660.0], [43.0, 2681.0], [43.1, 2688.0], [43.2, 2701.0], [43.3, 2755.0], [43.4, 2772.0], [43.5, 2787.0], [43.6, 2817.0], [43.7, 2822.0], [43.8, 2831.0], [43.9, 2853.0], [44.0, 2860.0], [44.1, 2863.0], [44.2, 2871.0], [44.3, 2875.0], [44.4, 2906.0], [44.5, 2912.0], [44.6, 2928.0], [44.7, 2932.0], [44.8, 2933.0], [44.9, 2948.0], [45.0, 2951.0], [45.1, 2956.0], [45.2, 2964.0], [45.3, 2974.0], [45.4, 2977.0], [45.5, 2980.0], [45.6, 2982.0], [45.7, 2994.0], [45.8, 3007.0], [45.9, 3008.0], [46.0, 3014.0], [46.1, 3021.0], [46.2, 3023.0], [46.3, 3032.0], [46.4, 3033.0], [46.5, 3036.0], [46.6, 3038.0], [46.7, 3040.0], [46.8, 3047.0], [46.9, 3052.0], [47.0, 3058.0], [47.1, 3062.0], [47.2, 3067.0], [47.3, 3070.0], [47.4, 3073.0], [47.5, 3076.0], [47.6, 3080.0], [47.7, 3089.0], [47.8, 3090.0], [47.9, 3095.0], [48.0, 3097.0], [48.1, 3105.0], [48.2, 3110.0], [48.3, 3118.0], [48.4, 3127.0], [48.5, 3133.0], [48.6, 3136.0], [48.7, 3141.0], [48.8, 3142.0], [48.9, 3144.0], [49.0, 3151.0], [49.1, 3162.0], [49.2, 3170.0], [49.3, 3172.0], [49.4, 3187.0], [49.5, 3198.0], [49.6, 3204.0], [49.7, 3216.0], [49.8, 3229.0], [49.9, 3231.0], [50.0, 3233.0], [50.1, 3237.0], [50.2, 3243.0], [50.3, 3245.0], [50.4, 3245.0], [50.5, 3250.0], [50.6, 3257.0], [50.7, 3261.0], [50.8, 3264.0], [50.9, 3269.0], [51.0, 3272.0], [51.1, 3272.0], [51.2, 3273.0], [51.3, 3274.0], [51.4, 3280.0], [51.5, 3283.0], [51.6, 3288.0], [51.7, 3295.0], [51.8, 3307.0], [51.9, 3308.0], [52.0, 3309.0], [52.1, 3314.0], [52.2, 3322.0], [52.3, 3325.0], [52.4, 3330.0], [52.5, 3334.0], [52.6, 3336.0], [52.7, 3338.0], [52.8, 3338.0], [52.9, 3340.0], [53.0, 3345.0], [53.1, 3346.0], [53.2, 3352.0], [53.3, 3354.0], [53.4, 3357.0], [53.5, 3357.0], [53.6, 3359.0], [53.7, 3360.0], [53.8, 3362.0], [53.9, 3365.0], [54.0, 3369.0], [54.1, 3372.0], [54.2, 3374.0], [54.3, 3381.0], [54.4, 3382.0], [54.5, 3390.0], [54.6, 3392.0], [54.7, 3395.0], [54.8, 3397.0], [54.9, 3398.0], [55.0, 3400.0], [55.1, 3412.0], [55.2, 3412.0], [55.3, 3417.0], [55.4, 3421.0], [55.5, 3423.0], [55.6, 3425.0], [55.7, 3432.0], [55.8, 3442.0], [55.9, 3448.0], [56.0, 3448.0], [56.1, 3452.0], [56.2, 3462.0], [56.3, 3482.0], [56.4, 3489.0], [56.5, 3490.0], [56.6, 3496.0], [56.7, 3502.0], [56.8, 3505.0], [56.9, 3514.0], [57.0, 3517.0], [57.1, 3526.0], [57.2, 3540.0], [57.3, 3557.0], [57.4, 3566.0], [57.5, 3571.0], [57.6, 3578.0], [57.7, 3582.0], [57.8, 3593.0], [57.9, 3595.0], [58.0, 3600.0], [58.1, 3601.0], [58.2, 3617.0], [58.3, 3619.0], [58.4, 3620.0], [58.5, 3624.0], [58.6, 3631.0], [58.7, 3636.0], [58.8, 3640.0], [58.9, 3657.0], [59.0, 3662.0], [59.1, 3669.0], [59.2, 3670.0], [59.3, 3685.0], [59.4, 3707.0], [59.5, 3726.0], [59.6, 3736.0], [59.7, 3751.0], [59.8, 3770.0], [59.9, 3776.0], [60.0, 3789.0], [60.1, 3808.0], [60.2, 3823.0], [60.3, 3831.0], [60.4, 3832.0], [60.5, 3835.0], [60.6, 3851.0], [60.7, 3868.0], [60.8, 3870.0], [60.9, 3881.0], [61.0, 3882.0], [61.1, 3886.0], [61.2, 3893.0], [61.3, 3897.0], [61.4, 3910.0], [61.5, 3915.0], [61.6, 3917.0], [61.7, 3930.0], [61.8, 3933.0], [61.9, 3940.0], [62.0, 3944.0], [62.1, 3958.0], [62.2, 3965.0], [62.3, 3974.0], [62.4, 3985.0], [62.5, 3998.0], [62.6, 3999.0], [62.7, 4016.0], [62.8, 4019.0], [62.9, 4029.0], [63.0, 4035.0], [63.1, 4046.0], [63.2, 4049.0], [63.3, 4050.0], [63.4, 4051.0], [63.5, 4055.0], [63.6, 4063.0], [63.7, 4079.0], [63.8, 4087.0], [63.9, 4089.0], [64.0, 4090.0], [64.1, 4095.0], [64.2, 4099.0], [64.3, 4103.0], [64.4, 4112.0], [64.5, 4122.0], [64.6, 4127.0], [64.7, 4138.0], [64.8, 4147.0], [64.9, 4158.0], [65.0, 4164.0], [65.1, 4166.0], [65.2, 4170.0], [65.3, 4170.0], [65.4, 4174.0], [65.5, 4188.0], [65.6, 4192.0], [65.7, 4202.0], [65.8, 4209.0], [65.9, 4212.0], [66.0, 4219.0], [66.1, 4224.0], [66.2, 4235.0], [66.3, 4239.0], [66.4, 4246.0], [66.5, 4250.0], [66.6, 4257.0], [66.7, 4262.0], [66.8, 4266.0], [66.9, 4268.0], [67.0, 4279.0], [67.1, 4283.0], [67.2, 4285.0], [67.3, 4286.0], [67.4, 4291.0], [67.5, 4292.0], [67.6, 4295.0], [67.7, 4306.0], [67.8, 4317.0], [67.9, 4320.0], [68.0, 4323.0], [68.1, 4325.0], [68.2, 4329.0], [68.3, 4332.0], [68.4, 4339.0], [68.5, 4341.0], [68.6, 4348.0], [68.7, 4354.0], [68.8, 4357.0], [68.9, 4361.0], [69.0, 4364.0], [69.1, 4365.0], [69.2, 4369.0], [69.3, 4371.0], [69.4, 4373.0], [69.5, 4377.0], [69.6, 4379.0], [69.7, 4385.0], [69.8, 4387.0], [69.9, 4394.0], [70.0, 4396.0], [70.1, 4402.0], [70.2, 4402.0], [70.3, 4404.0], [70.4, 4414.0], [70.5, 4427.0], [70.6, 4428.0], [70.7, 4435.0], [70.8, 4438.0], [70.9, 4441.0], [71.0, 4446.0], [71.1, 4448.0], [71.2, 4453.0], [71.3, 4455.0], [71.4, 4457.0], [71.5, 4465.0], [71.6, 4469.0], [71.7, 4472.0], [71.8, 4475.0], [71.9, 4480.0], [72.0, 4481.0], [72.1, 4495.0], [72.2, 4496.0], [72.3, 4500.0], [72.4, 4503.0], [72.5, 4506.0], [72.6, 4510.0], [72.7, 4516.0], [72.8, 4519.0], [72.9, 4528.0], [73.0, 4528.0], [73.1, 4537.0], [73.2, 4542.0], [73.3, 4544.0], [73.4, 4546.0], [73.5, 4549.0], [73.6, 4549.0], [73.7, 4552.0], [73.8, 4553.0], [73.9, 4555.0], [74.0, 4564.0], [74.1, 4568.0], [74.2, 4572.0], [74.3, 4580.0], [74.4, 4581.0], [74.5, 4586.0], [74.6, 4603.0], [74.7, 4605.0], [74.8, 4613.0], [74.9, 4617.0], [75.0, 4621.0], [75.1, 4621.0], [75.2, 4622.0], [75.3, 4622.0], [75.4, 4623.0], [75.5, 4625.0], [75.6, 4626.0], [75.7, 4629.0], [75.8, 4631.0], [75.9, 4636.0], [76.0, 4637.0], [76.1, 4640.0], [76.2, 4644.0], [76.3, 4658.0], [76.4, 4662.0], [76.5, 4664.0], [76.6, 4666.0], [76.7, 4670.0], [76.8, 4675.0], [76.9, 4679.0], [77.0, 4680.0], [77.1, 4691.0], [77.2, 4693.0], [77.3, 4697.0], [77.4, 4700.0], [77.5, 4707.0], [77.6, 4707.0], [77.7, 4708.0], [77.8, 4712.0], [77.9, 4715.0], [78.0, 4717.0], [78.1, 4722.0], [78.2, 4724.0], [78.3, 4729.0], [78.4, 4733.0], [78.5, 4733.0], [78.6, 4736.0], [78.7, 4746.0], [78.8, 4756.0], [78.9, 4759.0], [79.0, 4763.0], [79.1, 4767.0], [79.2, 4771.0], [79.3, 4771.0], [79.4, 4775.0], [79.5, 4786.0], [79.6, 4790.0], [79.7, 4792.0], [79.8, 4805.0], [79.9, 4807.0], [80.0, 4813.0], [80.1, 4819.0], [80.2, 4822.0], [80.3, 4827.0], [80.4, 4830.0], [80.5, 4833.0], [80.6, 4838.0], [80.7, 4844.0], [80.8, 4851.0], [80.9, 4854.0], [81.0, 4855.0], [81.1, 4857.0], [81.2, 4865.0], [81.3, 4892.0], [81.4, 4898.0], [81.5, 4905.0], [81.6, 4925.0], [81.7, 4926.0], [81.8, 4930.0], [81.9, 4953.0], [82.0, 4962.0], [82.1, 4975.0], [82.2, 4979.0], [82.3, 4994.0], [82.4, 5000.0], [82.5, 5002.0], [82.6, 5007.0], [82.7, 5020.0], [82.8, 5023.0], [82.9, 5027.0], [83.0, 5035.0], [83.1, 5038.0], [83.2, 5044.0], [83.3, 5047.0], [83.4, 5053.0], [83.5, 5060.0], [83.6, 5067.0], [83.7, 5071.0], [83.8, 5081.0], [83.9, 5087.0], [84.0, 5092.0], [84.1, 5092.0], [84.2, 5095.0], [84.3, 5103.0], [84.4, 5108.0], [84.5, 5110.0], [84.6, 5123.0], [84.7, 5124.0], [84.8, 5132.0], [84.9, 5134.0], [85.0, 5138.0], [85.1, 5142.0], [85.2, 5144.0], [85.3, 5152.0], [85.4, 5166.0], [85.5, 5174.0], [85.6, 5178.0], [85.7, 5179.0], [85.8, 5192.0], [85.9, 5201.0], [86.0, 5209.0], [86.1, 5210.0], [86.2, 5213.0], [86.3, 5219.0], [86.4, 5227.0], [86.5, 5236.0], [86.6, 5239.0], [86.7, 5243.0], [86.8, 5246.0], [86.9, 5254.0], [87.0, 5259.0], [87.1, 5267.0], [87.2, 5269.0], [87.3, 5270.0], [87.4, 5276.0], [87.5, 5278.0], [87.6, 5280.0], [87.7, 5284.0], [87.8, 5286.0], [87.9, 5291.0], [88.0, 5301.0], [88.1, 5310.0], [88.2, 5313.0], [88.3, 5315.0], [88.4, 5325.0], [88.5, 5328.0], [88.6, 5335.0], [88.7, 5336.0], [88.8, 5337.0], [88.9, 5341.0], [89.0, 5346.0], [89.1, 5350.0], [89.2, 5351.0], [89.3, 5354.0], [89.4, 5357.0], [89.5, 5358.0], [89.6, 5360.0], [89.7, 5363.0], [89.8, 5370.0], [89.9, 5376.0], [90.0, 5383.0], [90.1, 5387.0], [90.2, 5395.0], [90.3, 5397.0], [90.4, 5400.0], [90.5, 5403.0], [90.6, 5405.0], [90.7, 5410.0], [90.8, 5419.0], [90.9, 5422.0], [91.0, 5426.0], [91.1, 5437.0], [91.2, 5445.0], [91.3, 5447.0], [91.4, 5458.0], [91.5, 5467.0], [91.6, 5470.0], [91.7, 5471.0], [91.8, 5472.0], [91.9, 5473.0], [92.0, 5476.0], [92.1, 5481.0], [92.2, 5484.0], [92.3, 5490.0], [92.4, 5494.0], [92.5, 5496.0], [92.6, 5499.0], [92.7, 5506.0], [92.8, 5509.0], [92.9, 5510.0], [93.0, 5517.0], [93.1, 5525.0], [93.2, 5528.0], [93.3, 5533.0], [93.4, 5540.0], [93.5, 5547.0], [93.6, 5555.0], [93.7, 5560.0], [93.8, 5564.0], [93.9, 5575.0], [94.0, 5579.0], [94.1, 5581.0], [94.2, 5584.0], [94.3, 5590.0], [94.4, 5592.0], [94.5, 5592.0], [94.6, 5594.0], [94.7, 5603.0], [94.8, 5608.0], [94.9, 5610.0], [95.0, 5617.0], [95.1, 5622.0], [95.2, 5625.0], [95.3, 5626.0], [95.4, 5630.0], [95.5, 5634.0], [95.6, 5644.0], [95.7, 5651.0], [95.8, 5656.0], [95.9, 5657.0], [96.0, 5664.0], [96.1, 5665.0], [96.2, 5667.0], [96.3, 5674.0], [96.4, 5677.0], [96.5, 5679.0], [96.6, 5687.0], [96.7, 5687.0], [96.8, 5700.0], [96.9, 5702.0], [97.0, 5705.0], [97.1, 5719.0], [97.2, 5727.0], [97.3, 5727.0], [97.4, 5733.0], [97.5, 5735.0], [97.6, 5743.0], [97.7, 5743.0], [97.8, 5748.0], [97.9, 5752.0], [98.0, 5758.0], [98.1, 5763.0], [98.2, 5765.0], [98.3, 5767.0], [98.4, 5772.0], [98.5, 5773.0], [98.6, 5793.0], [98.7, 5817.0], [98.8, 5836.0], [98.9, 5912.0], [99.0, 5978.0], [99.1, 6028.0], [99.2, 6061.0], [99.3, 6068.0], [99.4, 6115.0], [99.5, 6174.0], [99.6, 6182.0], [99.7, 6254.0], [99.8, 6334.0], [99.9, 6399.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 421.0, "series": [{"data": [[0.0, 421.0], [600.0, 1.0], [800.0, 3.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 3.0], [1200.0, 3.0], [1300.0, 7.0], [1400.0, 5.0], [1500.0, 4.0], [1600.0, 5.0], [1700.0, 4.0], [1800.0, 6.0], [1900.0, 6.0], [2000.0, 10.0], [2100.0, 12.0], [2200.0, 9.0], [2300.0, 10.0], [2400.0, 9.0], [2500.0, 5.0], [2600.0, 8.0], [2800.0, 16.0], [2700.0, 7.0], [2900.0, 25.0], [3000.0, 44.0], [3100.0, 28.0], [3200.0, 41.0], [3300.0, 60.0], [3400.0, 33.0], [3500.0, 24.0], [3600.0, 26.0], [3700.0, 12.0], [3800.0, 25.0], [3900.0, 24.0], [4000.0, 31.0], [4100.0, 25.0], [4200.0, 38.0], [4300.0, 46.0], [4400.0, 41.0], [4600.0, 53.0], [4500.0, 43.0], [4700.0, 45.0], [4800.0, 31.0], [4900.0, 18.0], [5000.0, 35.0], [5100.0, 30.0], [5200.0, 40.0], [5300.0, 45.0], [5400.0, 42.0], [5500.0, 38.0], [5600.0, 40.0], [5700.0, 35.0], [5800.0, 4.0], [5900.0, 3.0], [6000.0, 6.0], [6100.0, 6.0], [6200.0, 2.0], [6300.0, 3.0], [6400.0, 1.0], [100.0, 150.0], [200.0, 73.0], [300.0, 32.0], [400.0, 14.0], [500.0, 6.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1154.0, "series": [{"data": [[0.0, 690.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 31.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1154.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 774.1861333333346, "minX": 1.75557702E12, "maxY": 774.1861333333346, "series": [{"data": [[1.75557702E12, 774.1861333333346]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557702E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 35.0, "minX": 2.0, "maxY": 6399.0, "series": [{"data": [[2.0, 51.0], [3.0, 49.0], [4.0, 49.0], [6.0, 46.5], [7.0, 45.0], [8.0, 45.0], [9.0, 41.0], [10.0, 54.0], [11.0, 52.0], [12.0, 51.0], [13.0, 49.0], [14.0, 50.0], [15.0, 47.0], [16.0, 5686.0], [17.0, 46.0], [18.0, 45.0], [20.0, 96.0], [22.0, 2938.0], [24.0, 96.0], [25.0, 5817.0], [26.0, 52.0], [27.0, 51.0], [28.0, 44.0], [29.0, 48.0], [31.0, 2904.0], [32.0, 5656.0], [37.0, 2342.0], [39.0, 5750.0], [38.0, 5766.0], [41.0, 56.0], [40.0, 5650.0], [42.0, 5704.0], [44.0, 5752.0], [47.0, 3828.666666666667], [49.0, 5579.0], [48.0, 5793.0], [50.0, 5773.0], [53.0, 5789.0], [52.0, 48.0], [55.0, 59.0], [54.0, 5857.0], [56.0, 5679.0], [59.0, 5765.0], [58.0, 4081.333333333333], [60.0, 5679.0], [63.0, 5677.0], [62.0, 5687.0], [67.0, 6399.0], [66.0, 5625.0], [65.0, 5752.0], [64.0, 5626.0], [71.0, 5564.0], [70.0, 5667.0], [69.0, 5767.0], [68.0, 39.0], [75.0, 5734.0], [74.0, 5735.0], [73.0, 5754.0], [72.0, 5656.0], [77.0, 5582.0], [76.0, 5721.0], [83.0, 2827.5], [82.0, 71.33333333333333], [81.0, 82.0], [87.0, 3219.0], [85.0, 5727.0], [84.0, 50.0], [91.0, 5603.0], [90.0, 5494.0], [89.0, 5599.0], [88.0, 56.0], [95.0, 2861.5], [93.0, 54.0], [92.0, 5591.0], [98.0, 5531.0], [97.0, 76.0], [102.0, 61.0], [101.0, 3980.0], [107.0, 5484.0], [106.0, 4456.0], [110.0, 61.0], [109.0, 5528.0], [108.0, 6334.0], [114.0, 2946.0], [113.0, 5575.0], [112.0, 5741.0], [119.0, 45.0], [118.0, 51.0], [117.0, 57.666666666666664], [123.0, 35.0], [135.0, 5439.5], [134.0, 42.0], [133.0, 5472.0], [132.0, 5445.0], [131.0, 5471.0], [128.0, 42.0], [139.0, 53.0], [138.0, 5509.0], [137.0, 5542.0], [136.0, 5419.0], [150.0, 5503.0], [149.0, 5592.0], [158.0, 41.0], [157.0, 2777.0], [155.0, 5824.0], [154.0, 64.0], [153.0, 5405.0], [152.0, 2782.0], [165.0, 5659.0], [164.0, 6254.0], [163.0, 65.0], [161.0, 5581.0], [175.0, 5774.0], [173.0, 5520.0], [169.0, 5745.0], [183.0, 72.0], [180.0, 5733.0], [179.0, 5313.0], [178.0, 5715.0], [177.0, 5476.0], [191.0, 5978.0], [190.0, 55.0], [189.0, 2922.5], [188.0, 4488.2], [185.0, 5355.0], [199.0, 6182.0], [196.0, 61.0], [195.0, 5700.0], [194.0, 5473.0], [193.0, 5397.0], [192.0, 5525.0], [207.0, 46.0], [206.0, 50.0], [204.0, 6185.0], [201.0, 2868.5], [200.0, 5687.0], [215.0, 71.0], [214.0, 44.0], [213.0, 5410.0], [212.0, 48.0], [223.0, 4151.0], [220.0, 6174.0], [219.0, 5541.0], [217.0, 2822.0], [231.0, 5654.0], [230.0, 5426.0], [227.0, 5403.0], [225.0, 5422.0], [224.0, 5727.0], [239.0, 44.0], [238.0, 5665.0], [233.0, 5422.0], [247.0, 5664.0], [246.0, 5622.0], [243.0, 45.0], [242.0, 5392.0], [241.0, 5657.0], [255.0, 43.0], [254.0, 2839.5], [252.0, 5451.5], [249.0, 5259.0], [248.0, 41.0], [269.0, 5369.0], [270.0, 6080.0], [268.0, 2692.0], [266.0, 5644.0], [265.0, 5396.0], [264.0, 5360.0], [263.0, 5715.0], [260.0, 5378.0], [259.0, 5632.0], [257.0, 5621.0], [256.0, 5301.0], [285.0, 5651.0], [283.0, 5461.0], [281.0, 1842.0], [278.0, 6061.0], [277.0, 5385.0], [275.0, 5440.0], [273.0, 5640.0], [272.0, 5513.5], [303.0, 5912.0], [302.0, 2806.5], [300.0, 5336.0], [299.0, 5553.0], [293.0, 5608.0], [292.0, 5608.0], [288.0, 5617.0], [317.0, 5610.0], [316.0, 5429.166666666667], [313.0, 5352.666666666667], [310.0, 5243.0], [309.0, 3056.5], [307.0, 5350.0], [306.0, 5320.0], [334.0, 5560.0], [335.0, 5540.0], [333.0, 5592.0], [332.0, 46.0], [331.0, 5294.5], [329.0, 5807.0], [327.0, 47.0], [321.0, 5276.0], [320.0, 3646.0], [350.0, 5343.5], [351.0, 5134.0], [348.0, 42.0], [345.0, 2643.5], [344.0, 2661.5], [343.0, 6011.0], [342.0, 5452.0], [338.0, 47.0], [337.0, 5315.0], [366.0, 5345.0], [367.0, 5494.0], [365.0, 5488.0], [355.0, 46.0], [353.0, 5269.0], [352.0, 5560.0], [362.0, 5490.0], [361.0, 39.0], [360.0, 5280.0], [359.0, 5236.0], [357.0, 5284.0], [356.0, 5240.0], [370.0, 5493.0], [382.0, 5472.0], [380.0, 5213.0], [378.0, 5574.5], [376.0, 5499.0], [375.0, 5458.0], [374.0, 5496.0], [373.0, 5533.0], [369.0, 5508.0], [368.0, 5166.0], [392.0, 5246.0], [395.0, 5095.0], [394.0, 5138.0], [393.0, 5038.0], [391.0, 5193.0], [385.0, 69.0], [384.0, 2631.5], [390.0, 5510.0], [388.0, 5253.0], [387.0, 69.0], [386.0, 5555.0], [403.0, 5202.5], [414.0, 5066.5], [412.0, 5142.0], [411.0, 4965.0], [409.0, 42.0], [407.0, 5212.666666666666], [405.0, 5447.0], [404.0, 2634.5], [402.0, 68.0], [401.0, 69.0], [400.0, 5152.0], [419.0, 5437.0], [430.0, 5419.0], [431.0, 5053.0], [428.0, 5371.0], [426.0, 5346.0], [425.0, 5376.0], [423.0, 5370.0], [422.0, 2712.0], [420.0, 5405.0], [418.0, 2720.0], [416.0, 38.0], [446.0, 5123.0], [445.0, 5354.0], [435.0, 5408.0], [434.0, 2537.0], [432.0, 5351.0], [443.0, 164.0], [442.0, 5135.0], [441.0, 5238.0], [440.0, 5143.5], [439.0, 5095.0], [438.0, 5100.5], [436.0, 5341.0], [462.0, 5035.0], [463.0, 5328.0], [461.0, 4994.0], [460.0, 104.0], [459.0, 43.0], [458.0, 5082.0], [457.0, 5047.0], [455.0, 38.0], [450.0, 1843.6666666666665], [448.0, 5124.0], [453.0, 40.0], [452.0, 45.0], [479.0, 3335.6666666666665], [477.0, 69.0], [467.0, 5207.5], [465.0, 5359.0], [464.0, 5106.0], [475.0, 72.0], [474.0, 71.0], [473.0, 117.0], [472.0, 77.0], [471.0, 82.0], [470.0, 5092.0], [469.0, 3406.0], [493.0, 4975.0], [494.0, 5062.0], [495.0, 5325.0], [492.0, 5103.5], [483.0, 3367.333333333333], [482.0, 3378.0], [481.0, 2866.5555555555557], [480.0, 3352.222222222222], [491.0, 5108.5], [490.0, 4160.4], [489.0, 5368.5], [488.0, 5000.666666666667], [487.0, 5120.0], [486.0, 3763.75], [484.0, 4994.5], [485.0, 5269.0], [510.0, 2573.5], [511.0, 1020.8], [509.0, 2628.0], [508.0, 189.0], [507.0, 84.0], [506.0, 2597.0], [504.0, 2649.0], [503.0, 1226.75], [499.0, 3251.333333333333], [498.0, 2436.5], [497.0, 2444.5], [496.0, 5145.0], [502.0, 4866.0], [501.0, 5008.6], [500.0, 4933.5], [538.0, 2418.5], [542.0, 5027.0], [543.0, 5023.0], [528.0, 158.0], [530.0, 159.0], [529.0, 151.0], [532.0, 4715.0], [531.0, 4577.0], [541.0, 130.0], [540.0, 138.0], [539.0, 4957.0], [536.0, 4685.0], [518.0, 2548.3333333333335], [517.0, 3288.0], [516.0, 48.0], [515.0, 130.5], [514.0, 55.0], [513.0, 60.0], [512.0, 5044.0], [519.0, 3666.0], [527.0, 4756.0], [526.0, 156.0], [525.0, 2419.5], [524.0, 4674.0], [523.0, 232.0], [522.0, 1355.5], [520.0, 194.5], [521.0, 2519.375], [535.0, 2426.5], [533.0, 4808.5], [569.0, 1177.0], [573.0, 4855.0], [574.0, 4855.0], [561.0, 1250.75], [560.0, 1690.1666666666665], [572.0, 45.0], [571.0, 47.0], [570.0, 4565.0], [558.0, 158.0], [545.0, 138.0], [544.0, 140.0], [547.0, 4666.0], [546.0, 172.0], [549.0, 129.0], [548.0, 132.0], [551.0, 118.0], [550.0, 130.0], [557.0, 160.0], [556.0, 161.0], [555.0, 137.0], [554.0, 2421.0], [553.0, 4500.0], [552.0, 129.5], [566.0, 4361.0], [565.0, 4581.0], [564.0, 4531.666666666667], [563.0, 69.5], [562.0, 72.5], [600.0, 66.0], [604.0, 3304.75], [607.0, 42.0], [594.0, 4832.0], [592.0, 4826.0], [596.0, 2343.0], [595.0, 73.0], [606.0, 4600.666666666667], [605.0, 4611.333333333333], [603.0, 60.0], [602.0, 62.0], [601.0, 3799.8235294117644], [591.0, 2286.0], [577.0, 4502.0], [576.0, 4597.5], [579.0, 41.0], [578.0, 4329.0], [581.0, 4435.0], [580.0, 4545.0], [583.0, 4844.0], [582.0, 54.0], [590.0, 4833.0], [589.0, 4832.0], [588.0, 2438.5], [587.0, 4833.0], [586.0, 2307.5], [584.0, 51.0], [599.0, 4613.0], [597.0, 4542.0], [636.0, 3175.0], [627.0, 4722.0], [639.0, 2951.333333333333], [624.0, 4441.0], [632.0, 4592.0], [615.0, 4446.0], [614.0, 48.0], [613.0, 4201.0], [612.0, 4528.0], [611.0, 4455.0], [610.0, 4536.0], [609.0, 1619.3333333333335], [623.0, 4729.0], [622.0, 49.0], [621.0, 4734.0], [620.0, 2570.0], [619.0, 4455.0], [618.0, 4736.0], [617.0, 4819.0], [616.0, 4528.0], [630.0, 4715.0], [629.0, 46.0], [628.0, 46.0], [626.0, 4724.0], [625.0, 45.0], [666.0, 4348.0], [657.0, 4675.0], [668.0, 4724.0], [670.0, 2095.0], [656.0, 4717.0], [667.0, 4499.5], [664.0, 65.0], [647.0, 47.0], [646.0, 4170.0], [645.0, 4732.0], [644.0, 4697.0], [643.0, 4393.0], [641.0, 4395.0], [640.0, 4394.0], [655.0, 50.0], [654.0, 4680.0], [653.0, 4733.5], [652.0, 4962.0], [648.0, 48.0], [663.0, 4095.0], [659.0, 4667.0], [658.0, 4370.0], [702.0, 4632.0], [703.0, 4622.0], [688.0, 2199.0], [701.0, 4535.0], [699.0, 4693.0], [698.0, 2566.0], [697.0, 2487.0], [686.0, 4641.0], [681.0, 4642.0], [695.0, 519.0], [693.0, 4807.5], [691.0, 4637.0], [689.0, 4700.0], [728.0, 4268.0], [732.0, 4257.0], [733.0, 4617.0], [720.0, 4035.0], [731.0, 4552.0], [730.0, 4554.0], [729.0, 410.0], [719.0, 4166.0], [704.0, 4625.333333333333], [709.0, 4621.0], [707.0, 2554.5], [711.0, 4549.333333333333], [710.0, 4621.0], [718.0, 522.0], [716.0, 90.0], [715.0, 4670.0], [714.0, 3376.0], [713.0, 4253.0], [712.0, 2606.0], [726.0, 4286.0], [725.0, 66.0], [724.0, 4293.0], [722.0, 4622.0], [765.0, 4210.0], [767.0, 4209.0], [762.0, 2460.5], [743.0, 4295.0], [741.0, 4544.0], [740.0, 4552.0], [739.0, 4581.0], [738.0, 4551.0], [737.0, 4555.0], [736.0, 4372.0], [758.0, 3575.75], [754.0, 364.0], [753.0, 3319.5], [752.0, 4603.0], [751.0, 1827.6666666666667], [748.0, 4246.0], [747.0, 4262.0], [746.0, 4555.5], [745.0, 4250.0], [798.0, 3985.0], [799.0, 276.0], [796.0, 1739.0], [792.0, 4794.0], [791.0, 4453.0], [785.0, 392.0], [784.0, 4479.0], [783.0, 4481.0], [770.0, 4496.0], [769.0, 4519.0], [775.0, 352.3333333333333], [773.0, 4549.0], [781.0, 4188.0], [780.0, 4549.0], [779.0, 93.0], [778.0, 394.0], [777.0, 2254.0], [826.0, 4385.0], [817.0, 2257.0], [828.0, 4127.0], [831.0, 4249.5], [816.0, 4707.0], [827.0, 4090.0], [824.0, 338.0], [807.0, 2354.0], [806.0, 343.0], [805.0, 369.0], [804.0, 297.0], [803.0, 325.0], [802.0, 313.5], [801.0, 362.0], [800.0, 2292.5], [815.0, 4396.0], [814.0, 4664.0], [813.0, 339.0], [812.0, 4510.0], [811.0, 2389.0], [810.0, 366.0], [809.0, 56.0], [823.0, 4245.0], [819.0, 4138.0], [818.0, 4396.0], [856.0, 2307.0], [861.0, 4099.0], [862.0, 178.0], [849.0, 4363.0], [848.0, 3823.0], [860.0, 2297.5], [858.0, 292.0], [857.0, 4354.0], [847.0, 4365.0], [832.0, 4377.0], [836.0, 3954.5], [834.0, 2472.5], [839.0, 4372.0], [838.0, 4373.0], [846.0, 2301.0], [844.0, 221.0], [843.0, 2339.0], [841.0, 343.0], [840.0, 224.0], [854.0, 4667.0], [853.0, 275.0], [851.0, 187.0], [850.0, 4384.0], [890.0, 4626.0], [894.0, 3284.4], [895.0, 4396.666666666667], [881.0, 250.0], [884.0, 630.0], [883.0, 1587.0], [893.0, 2042.0], [892.0, 4257.0], [891.0, 4004.0], [889.0, 3238.5], [871.0, 166.0], [870.0, 206.5], [868.0, 4370.0], [866.0, 173.0], [865.0, 299.0], [864.0, 4092.0], [879.0, 2370.5], [877.0, 160.0], [876.0, 165.0], [875.0, 298.0], [874.0, 4358.0], [872.0, 4082.0], [887.0, 221.0], [886.0, 151.0], [920.0, 1707.2857142857142], [924.0, 65.0], [927.0, 2811.6666666666665], [913.0, 4161.0], [914.0, 171.0], [912.0, 2375.2], [917.0, 2608.4444444444443], [916.0, 932.0], [915.0, 47.5], [926.0, 2754.0], [925.0, 2041.0], [923.0, 2243.75], [922.0, 1592.0], [921.0, 1556.375], [910.0, 2315.285714285714], [896.0, 4157.285714285715], [898.0, 4339.0], [897.0, 2507.6], [901.0, 2526.1428571428573], [900.0, 220.0], [899.0, 1400.5], [903.0, 3649.166666666667], [902.0, 1508.6666666666667], [909.0, 4189.0], [908.0, 1099.25], [907.0, 3293.25], [906.0, 2399.8571428571427], [904.0, 2181.1666666666665], [905.0, 4242.666666666667], [919.0, 146.4], [918.0, 1156.0], [952.0, 1438.0], [956.0, 2674.3333333333335], [959.0, 3973.5], [946.0, 125.0], [945.0, 202.0], [944.0, 3931.5], [949.0, 2052.5], [948.0, 2986.4], [958.0, 3966.5], [957.0, 2729.3333333333335], [955.0, 1210.6666666666667], [954.0, 2176.6666666666665], [953.0, 1944.0], [943.0, 2016.5], [928.0, 1446.3333333333333], [930.0, 2632.3333333333335], [929.0, 2938.6666666666665], [932.0, 3026.0], [933.0, 57.0], [931.0, 4060.571428571429], [935.0, 2487.3333333333335], [934.0, 1353.3333333333333], [942.0, 2070.5], [941.0, 2069.0], [940.0, 148.5], [939.0, 3666.0], [938.0, 1304.3333333333335], [936.0, 59.666666666666664], [937.0, 4055.0], [951.0, 1658.8], [950.0, 158.25], [985.0, 2011.5], [989.0, 3734.0], [991.0, 3553.3333333333335], [976.0, 1022.7499999999999], [978.0, 1805.0], [977.0, 724.6666666666666], [980.0, 3475.3333333333335], [979.0, 1317.3333333333335], [988.0, 1075.25], [987.0, 2056.5], [986.0, 3809.5], [984.0, 3646.3333333333335], [967.0, 2976.5], [966.0, 2180.545454545455], [965.0, 3272.0], [964.0, 4168.0], [963.0, 3646.0], [962.0, 3869.75], [960.0, 2017.5], [961.0, 4164.5], [975.0, 1200.142857142857], [973.0, 707.3333333333335], [974.0, 112.66666666666667], [972.0, 1914.3333333333335], [971.0, 2131.5], [970.0, 1596.0], [969.0, 2503.1666666666665], [968.0, 106.5], [982.0, 59.0], [983.0, 118.5], [981.0, 1363.3333333333333], [1020.0, 3631.0], [1023.0, 3502.0], [1008.0, 1855.0], [1010.0, 3639.0], [1009.0, 3102.5], [1012.0, 3640.0], [1011.0, 71.0], [1022.0, 88.0], [1021.0, 1756.5], [1019.0, 3619.0], [1018.0, 3517.0], [1017.0, 71.5], [1016.0, 3381.0], [1006.0, 77.0], [992.0, 46.5], [995.0, 3726.0], [994.0, 61.333333333333336], [997.0, 3496.0], [996.0, 58.0], [999.0, 3685.0], [998.0, 3670.0], [1005.0, 3617.0], [1004.0, 78.0], [1003.0, 80.0], [1002.0, 82.0], [1001.0, 1791.5], [1000.0, 3612.5], [1015.0, 3523.0], [1013.0, 60.0], [1078.0, 3330.0], [1060.0, 80.0], [1086.0, 3256.0], [1058.0, 82.5], [1062.0, 78.0], [1064.0, 1049.6666666666667], [1070.0, 3246.5], [1082.0, 3425.0], [1080.0, 3421.0], [1074.0, 43.0], [1072.0, 2339.833333333333], [1038.0, 3472.0], [1036.0, 3582.0], [1034.0, 3595.0], [1032.0, 3600.0], [1030.0, 3482.5], [1028.0, 2440.6666666666665], [1024.0, 47.0], [1054.0, 3245.0], [1052.0, 3386.0], [1050.0, 3402.3333333333335], [1046.0, 3516.0], [1044.0, 46.0], [1140.0, 2445.0], [1126.0, 3328.5], [1150.0, 3309.0], [1122.0, 3361.0], [1124.0, 3032.0], [1128.0, 3275.0], [1130.0, 3277.0], [1132.0, 3140.25], [1148.0, 3074.0], [1144.0, 3314.5], [1138.0, 3341.0], [1088.0, 3188.0], [1092.0, 3398.0], [1096.0, 3387.0], [1100.0, 3372.0], [1102.0, 3322.0], [1118.0, 3372.0], [1116.0, 3346.0], [1114.0, 3357.0], [1112.0, 3245.0], [1108.0, 2605.0], [1106.0, 3136.0], [1166.0, 1631.076923076923], [1184.0, 2302.3333333333335], [1200.0, 2994.0], [1202.0, 48.0], [1206.0, 3099.0], [1190.0, 2749.5], [1186.0, 3099.666666666667], [1188.0, 3101.0], [1192.0, 3133.0], [1194.0, 3115.0], [1198.0, 3082.0], [1196.0, 2875.0], [1164.0, 850.8181818181819], [1162.0, 857.0], [1160.0, 2556.5], [1158.0, 3261.0], [1154.0, 3290.0], [1152.0, 3246.0], [1182.0, 970.0], [1180.0, 2396.3333333333335], [1178.0, 1583.0], [1176.0, 1671.2857142857142], [1174.0, 627.1111111111111], [1172.0, 1575.8], [1170.0, 1735.4545454545455], [1168.0, 1292.1666666666667], [1224.0, 2223.0], [1252.0, 3047.0], [1270.0, 1509.0], [1244.0, 2912.0], [1218.0, 2951.0], [1222.0, 2970.0], [1226.0, 2222.0], [1230.0, 1548.5], [1246.0, 3056.0], [1266.0, 2893.0], [1264.0, 118.0], [1260.0, 54.0], [1258.0, 2814.0], [1256.0, 2787.0], [1254.0, 3070.0], [1250.0, 114.0], [1248.0, 3076.0], [1276.0, 472.0], [1268.0, 3037.0], [1288.0, 71.0], [1304.0, 221.0], [1294.0, 785.5094339622639], [1292.0, 186.0], [1290.0, 2928.0], [1284.0, 1133.5], [1296.0, 920.25], [1298.0, 1157.3333333333335], [1300.0, 1448.0], [1312.0, 2821.0], [1314.0, 2860.0], [1316.0, 325.0], [1306.0, 257.0], [1310.0, 2545.3333333333335], [1280.0, 2406.6], [1308.0, 2908.0], [1302.0, 291.0], [1075.0, 3395.0], [1081.0, 3413.0], [1057.0, 1788.0], [1059.0, 3245.0], [1063.0, 1735.5], [1067.0, 77.0], [1065.0, 1926.8], [1071.0, 1185.0], [1069.0, 3467.0], [1085.0, 3255.5], [1079.0, 3432.0], [1073.0, 3400.0], [1039.0, 3616.0], [1037.0, 3597.0], [1035.0, 67.5], [1033.0, 50.0], [1031.0, 54.0], [1025.0, 3646.0], [1055.0, 83.0], [1049.0, 3460.6666666666665], [1047.0, 50.0], [1045.0, 1813.0], [1043.0, 3455.5], [1041.0, 3474.0], [1141.0, 3326.5], [1147.0, 3191.0], [1121.0, 2491.0], [1125.0, 3284.0], [1129.0, 3357.0], [1131.0, 3351.5], [1135.0, 2944.3333333333335], [1133.0, 3352.0], [1149.0, 3058.0], [1143.0, 3021.6666666666665], [1137.0, 3157.0], [1119.0, 3110.0], [1089.0, 3216.0], [1091.0, 3400.0], [1093.0, 2641.0], [1097.0, 3149.0], [1101.0, 3330.0], [1115.0, 3327.0], [1113.0, 3395.0], [1109.0, 3395.0], [1107.0, 3374.0], [1105.0, 3250.0], [1165.0, 856.8181818181818], [1181.0, 1326.5], [1201.0, 1598.0], [1203.0, 45.0], [1205.0, 2347.0], [1207.0, 1585.0], [1211.0, 2979.0], [1191.0, 2273.0], [1189.0, 2794.6666666666665], [1187.0, 3131.0], [1185.0, 2836.5], [1193.0, 3089.0], [1195.0, 2370.0], [1167.0, 1554.4], [1163.0, 694.0], [1161.0, 1643.0], [1159.0, 3283.0], [1157.0, 2491.0], [1155.0, 3151.0], [1153.0, 3070.0], [1183.0, 2123.0], [1179.0, 2398.0], [1177.0, 1027.2], [1175.0, 2005.111111111111], [1173.0, 2063.375], [1171.0, 2367.1111111111113], [1169.0, 704.2333333333333], [1247.0, 2822.0], [1243.0, 1529.0], [1235.0, 3079.0], [1245.0, 3052.0], [1219.0, 2932.0], [1223.0, 56.0], [1229.0, 1452.5], [1227.0, 52.0], [1231.0, 3067.0], [1253.0, 2932.0], [1251.0, 2932.0], [1249.0, 3080.0], [1263.0, 2863.5], [1261.0, 3044.0], [1277.0, 2974.0], [1275.0, 1550.5], [1271.0, 2950.0], [1267.0, 3035.0], [1291.0, 48.0], [1309.0, 2583.0], [1283.0, 51.0], [1293.0, 580.0], [1289.0, 2959.0], [1287.0, 195.0], [1299.0, 175.0], [1301.0, 1612.5], [1295.0, 1536.0], [1313.0, 2599.6666666666665], [1315.0, 2825.0], [1305.0, 915.5], [1281.0, 2948.0], [1307.0, 102.0], [1303.0, 285.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}, {"data": [[774.185066666666, 2668.344000000004]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1316.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14250.0, "minX": 1.75557702E12, "maxY": 185062.5, "series": [{"data": [[1.75557702E12, 185062.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75557702E12, 14250.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557702E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2668.344000000004, "minX": 1.75557702E12, "maxY": 2668.344000000004, "series": [{"data": [[1.75557702E12, 2668.344000000004]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557702E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2668.252799999996, "minX": 1.75557702E12, "maxY": 2668.252799999996, "series": [{"data": [[1.75557702E12, 2668.252799999996]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557702E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2627.0394666666666, "minX": 1.75557702E12, "maxY": 2627.0394666666666, "series": [{"data": [[1.75557702E12, 2627.0394666666666]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557702E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.75557702E12, "maxY": 6417.0, "series": [{"data": [[1.75557702E12, 6417.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75557702E12, 5383.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75557702E12, 5985.92]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75557702E12, 5617.799999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75557702E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75557702E12, 3233.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557702E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 333.0, "minX": 49.0, "maxY": 5472.0, "series": [{"data": [[271.0, 333.0], [49.0, 983.0], [197.0, 5472.0], [426.0, 3232.5], [461.0, 4882.0], [471.0, 4127.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 471.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 333.0, "minX": 49.0, "maxY": 5472.0, "series": [{"data": [[271.0, 333.0], [49.0, 983.0], [197.0, 5472.0], [426.0, 3232.5], [461.0, 4882.0], [471.0, 4127.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 471.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75557702E12, "maxY": 31.25, "series": [{"data": [[1.75557702E12, 31.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557702E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75557702E12, "maxY": 31.25, "series": [{"data": [[1.75557702E12, 31.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557702E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75557702E12, "maxY": 31.25, "series": [{"data": [[1.75557702E12, 31.25]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557702E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75557702E12, "maxY": 31.25, "series": [{"data": [[1.75557702E12, 31.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557702E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

