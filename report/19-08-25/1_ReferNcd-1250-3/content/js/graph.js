/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 600.0, "minX": 0.0, "maxY": 6285.0, "series": [{"data": [[0.0, 600.0], [0.1, 671.0], [0.2, 693.0], [0.3, 733.0], [0.4, 894.0], [0.5, 941.0], [0.6, 1053.0], [0.7, 1056.0], [0.8, 1103.0], [0.9, 1122.0], [1.0, 1139.0], [1.1, 1141.0], [1.2, 1198.0], [1.3, 1202.0], [1.4, 1224.0], [1.5, 1234.0], [1.6, 1238.0], [1.7, 1267.0], [1.8, 1274.0], [1.9, 1280.0], [2.0, 1280.0], [2.1, 1295.0], [2.2, 1298.0], [2.3, 1300.0], [2.4, 1305.0], [2.5, 1312.0], [2.6, 1331.0], [2.7, 1337.0], [2.8, 1340.0], [2.9, 1358.0], [3.0, 1358.0], [3.1, 1360.0], [3.2, 1362.0], [3.3, 1384.0], [3.4, 1407.0], [3.5, 1422.0], [3.6, 1462.0], [3.7, 1478.0], [3.8, 1482.0], [3.9, 1491.0], [4.0, 1496.0], [4.1, 1513.0], [4.2, 1522.0], [4.3, 1523.0], [4.4, 1523.0], [4.5, 1539.0], [4.6, 1541.0], [4.7, 1545.0], [4.8, 1551.0], [4.9, 1560.0], [5.0, 1571.0], [5.1, 1576.0], [5.2, 1576.0], [5.3, 1582.0], [5.4, 1585.0], [5.5, 1586.0], [5.6, 1587.0], [5.7, 1604.0], [5.8, 1609.0], [5.9, 1611.0], [6.0, 1615.0], [6.1, 1627.0], [6.2, 1637.0], [6.3, 1642.0], [6.4, 1652.0], [6.5, 1666.0], [6.6, 1668.0], [6.7, 1672.0], [6.8, 1677.0], [6.9, 1693.0], [7.0, 1699.0], [7.1, 1701.0], [7.2, 1716.0], [7.3, 1763.0], [7.4, 1763.0], [7.5, 1764.0], [7.6, 1774.0], [7.7, 1814.0], [7.8, 1817.0], [7.9, 1820.0], [8.0, 1821.0], [8.1, 1846.0], [8.2, 1851.0], [8.3, 1855.0], [8.4, 1863.0], [8.5, 1867.0], [8.6, 1868.0], [8.7, 1879.0], [8.8, 1888.0], [8.9, 1890.0], [9.0, 1894.0], [9.1, 1905.0], [9.2, 1908.0], [9.3, 1920.0], [9.4, 1927.0], [9.5, 1928.0], [9.6, 1947.0], [9.7, 1952.0], [9.8, 1962.0], [9.9, 1964.0], [10.0, 1971.0], [10.1, 2023.0], [10.2, 2025.0], [10.3, 2027.0], [10.4, 2028.0], [10.5, 2040.0], [10.6, 2058.0], [10.7, 2060.0], [10.8, 2061.0], [10.9, 2099.0], [11.0, 2115.0], [11.1, 2134.0], [11.2, 2146.0], [11.3, 2194.0], [11.4, 2222.0], [11.5, 2228.0], [11.6, 2229.0], [11.7, 2249.0], [11.8, 2254.0], [11.9, 2270.0], [12.0, 2278.0], [12.1, 2280.0], [12.2, 2284.0], [12.3, 2288.0], [12.4, 2291.0], [12.5, 2322.0], [12.6, 2330.0], [12.7, 2368.0], [12.8, 2382.0], [12.9, 2403.0], [13.0, 2408.0], [13.1, 2410.0], [13.2, 2449.0], [13.3, 2473.0], [13.4, 2474.0], [13.5, 2485.0], [13.6, 2491.0], [13.7, 2512.0], [13.8, 2521.0], [13.9, 2522.0], [14.0, 2525.0], [14.1, 2547.0], [14.2, 2554.0], [14.3, 2588.0], [14.4, 2590.0], [14.5, 2598.0], [14.6, 2614.0], [14.7, 2663.0], [14.8, 2673.0], [14.9, 2683.0], [15.0, 2692.0], [15.1, 2693.0], [15.2, 2729.0], [15.3, 2778.0], [15.4, 2779.0], [15.5, 2780.0], [15.6, 2782.0], [15.7, 2785.0], [15.8, 2793.0], [15.9, 2801.0], [16.0, 2802.0], [16.1, 2822.0], [16.2, 2832.0], [16.3, 2840.0], [16.4, 2840.0], [16.5, 2851.0], [16.6, 2866.0], [16.7, 2894.0], [16.8, 2932.0], [16.9, 2938.0], [17.0, 2952.0], [17.1, 2967.0], [17.2, 3009.0], [17.3, 3012.0], [17.4, 3019.0], [17.5, 3028.0], [17.6, 3036.0], [17.7, 3082.0], [17.8, 3090.0], [17.9, 3118.0], [18.0, 3175.0], [18.1, 3178.0], [18.2, 3188.0], [18.3, 3212.0], [18.4, 3247.0], [18.5, 3268.0], [18.6, 3272.0], [18.7, 3284.0], [18.8, 3314.0], [18.9, 3318.0], [19.0, 3321.0], [19.1, 3324.0], [19.2, 3355.0], [19.3, 3359.0], [19.4, 3372.0], [19.5, 3393.0], [19.6, 3462.0], [19.7, 3467.0], [19.8, 3474.0], [19.9, 3483.0], [20.0, 3488.0], [20.1, 3491.0], [20.2, 3500.0], [20.3, 3502.0], [20.4, 3518.0], [20.5, 3520.0], [20.6, 3530.0], [20.7, 3539.0], [20.8, 3564.0], [20.9, 3569.0], [21.0, 3569.0], [21.1, 3578.0], [21.2, 3585.0], [21.3, 3589.0], [21.4, 3589.0], [21.5, 3593.0], [21.6, 3619.0], [21.7, 3622.0], [21.8, 3623.0], [21.9, 3623.0], [22.0, 3655.0], [22.1, 3656.0], [22.2, 3669.0], [22.3, 3676.0], [22.4, 3704.0], [22.5, 3712.0], [22.6, 3713.0], [22.7, 3743.0], [22.8, 3753.0], [22.9, 3756.0], [23.0, 3785.0], [23.1, 3786.0], [23.2, 3808.0], [23.3, 3810.0], [23.4, 3825.0], [23.5, 3833.0], [23.6, 3851.0], [23.7, 3860.0], [23.8, 3866.0], [23.9, 3866.0], [24.0, 3882.0], [24.1, 3884.0], [24.2, 3885.0], [24.3, 3885.0], [24.4, 3893.0], [24.5, 3893.0], [24.6, 3918.0], [24.7, 3921.0], [24.8, 3935.0], [24.9, 3936.0], [25.0, 3937.0], [25.1, 3941.0], [25.2, 3958.0], [25.3, 3972.0], [25.4, 3974.0], [25.5, 3975.0], [25.6, 3992.0], [25.7, 3993.0], [25.8, 3994.0], [25.9, 4008.0], [26.0, 4026.0], [26.1, 4037.0], [26.2, 4039.0], [26.3, 4042.0], [26.4, 4057.0], [26.5, 4057.0], [26.6, 4060.0], [26.7, 4061.0], [26.8, 4067.0], [26.9, 4069.0], [27.0, 4072.0], [27.1, 4074.0], [27.2, 4082.0], [27.3, 4086.0], [27.4, 4088.0], [27.5, 4088.0], [27.6, 4098.0], [27.7, 4099.0], [27.8, 4111.0], [27.9, 4112.0], [28.0, 4121.0], [28.1, 4123.0], [28.2, 4131.0], [28.3, 4131.0], [28.4, 4140.0], [28.5, 4147.0], [28.6, 4148.0], [28.7, 4154.0], [28.8, 4160.0], [28.9, 4161.0], [29.0, 4162.0], [29.1, 4167.0], [29.2, 4175.0], [29.3, 4181.0], [29.4, 4181.0], [29.5, 4197.0], [29.6, 4198.0], [29.7, 4200.0], [29.8, 4201.0], [29.9, 4202.0], [30.0, 4211.0], [30.1, 4216.0], [30.2, 4217.0], [30.3, 4221.0], [30.4, 4224.0], [30.5, 4234.0], [30.6, 4235.0], [30.7, 4235.0], [30.8, 4243.0], [30.9, 4244.0], [31.0, 4248.0], [31.1, 4255.0], [31.2, 4264.0], [31.3, 4266.0], [31.4, 4275.0], [31.5, 4275.0], [31.6, 4279.0], [31.7, 4281.0], [31.8, 4296.0], [31.9, 4298.0], [32.0, 4300.0], [32.1, 4303.0], [32.2, 4307.0], [32.3, 4308.0], [32.4, 4309.0], [32.5, 4313.0], [32.6, 4317.0], [32.7, 4323.0], [32.8, 4331.0], [32.9, 4332.0], [33.0, 4334.0], [33.1, 4334.0], [33.2, 4340.0], [33.3, 4343.0], [33.4, 4343.0], [33.5, 4346.0], [33.6, 4348.0], [33.7, 4355.0], [33.8, 4361.0], [33.9, 4362.0], [34.0, 4367.0], [34.1, 4368.0], [34.2, 4370.0], [34.3, 4370.0], [34.4, 4376.0], [34.5, 4381.0], [34.6, 4389.0], [34.7, 4390.0], [34.8, 4396.0], [34.9, 4399.0], [35.0, 4402.0], [35.1, 4408.0], [35.2, 4417.0], [35.3, 4420.0], [35.4, 4422.0], [35.5, 4422.0], [35.6, 4426.0], [35.7, 4426.0], [35.8, 4428.0], [35.9, 4429.0], [36.0, 4437.0], [36.1, 4438.0], [36.2, 4440.0], [36.3, 4442.0], [36.4, 4451.0], [36.5, 4456.0], [36.6, 4456.0], [36.7, 4457.0], [36.8, 4459.0], [36.9, 4459.0], [37.0, 4462.0], [37.1, 4463.0], [37.2, 4468.0], [37.3, 4471.0], [37.4, 4475.0], [37.5, 4478.0], [37.6, 4486.0], [37.7, 4489.0], [37.8, 4491.0], [37.9, 4507.0], [38.0, 4514.0], [38.1, 4517.0], [38.2, 4518.0], [38.3, 4520.0], [38.4, 4527.0], [38.5, 4531.0], [38.6, 4538.0], [38.7, 4538.0], [38.8, 4555.0], [38.9, 4561.0], [39.0, 4562.0], [39.1, 4562.0], [39.2, 4566.0], [39.3, 4567.0], [39.4, 4568.0], [39.5, 4569.0], [39.6, 4575.0], [39.7, 4581.0], [39.8, 4581.0], [39.9, 4582.0], [40.0, 4586.0], [40.1, 4587.0], [40.2, 4587.0], [40.3, 4588.0], [40.4, 4592.0], [40.5, 4593.0], [40.6, 4593.0], [40.7, 4600.0], [40.8, 4602.0], [40.9, 4604.0], [41.0, 4604.0], [41.1, 4609.0], [41.2, 4617.0], [41.3, 4622.0], [41.4, 4624.0], [41.5, 4627.0], [41.6, 4633.0], [41.7, 4633.0], [41.8, 4634.0], [41.9, 4640.0], [42.0, 4654.0], [42.1, 4657.0], [42.2, 4657.0], [42.3, 4660.0], [42.4, 4664.0], [42.5, 4665.0], [42.6, 4666.0], [42.7, 4667.0], [42.8, 4670.0], [42.9, 4670.0], [43.0, 4671.0], [43.1, 4672.0], [43.2, 4673.0], [43.3, 4674.0], [43.4, 4674.0], [43.5, 4676.0], [43.6, 4681.0], [43.7, 4681.0], [43.8, 4682.0], [43.9, 4684.0], [44.0, 4690.0], [44.1, 4691.0], [44.2, 4691.0], [44.3, 4692.0], [44.4, 4696.0], [44.5, 4697.0], [44.6, 4699.0], [44.7, 4701.0], [44.8, 4704.0], [44.9, 4704.0], [45.0, 4707.0], [45.1, 4711.0], [45.2, 4719.0], [45.3, 4725.0], [45.4, 4726.0], [45.5, 4728.0], [45.6, 4736.0], [45.7, 4739.0], [45.8, 4741.0], [45.9, 4743.0], [46.0, 4746.0], [46.1, 4748.0], [46.2, 4748.0], [46.3, 4751.0], [46.4, 4763.0], [46.5, 4767.0], [46.6, 4768.0], [46.7, 4771.0], [46.8, 4784.0], [46.9, 4785.0], [47.0, 4785.0], [47.1, 4785.0], [47.2, 4787.0], [47.3, 4789.0], [47.4, 4790.0], [47.5, 4792.0], [47.6, 4798.0], [47.7, 4802.0], [47.8, 4802.0], [47.9, 4803.0], [48.0, 4810.0], [48.1, 4812.0], [48.2, 4812.0], [48.3, 4815.0], [48.4, 4817.0], [48.5, 4817.0], [48.6, 4817.0], [48.7, 4819.0], [48.8, 4823.0], [48.9, 4825.0], [49.0, 4828.0], [49.1, 4829.0], [49.2, 4831.0], [49.3, 4832.0], [49.4, 4835.0], [49.5, 4843.0], [49.6, 4844.0], [49.7, 4845.0], [49.8, 4845.0], [49.9, 4853.0], [50.0, 4858.0], [50.1, 4867.0], [50.2, 4870.0], [50.3, 4879.0], [50.4, 4881.0], [50.5, 4883.0], [50.6, 4884.0], [50.7, 4886.0], [50.8, 4889.0], [50.9, 4890.0], [51.0, 4893.0], [51.1, 4895.0], [51.2, 4901.0], [51.3, 4901.0], [51.4, 4902.0], [51.5, 4903.0], [51.6, 4904.0], [51.7, 4905.0], [51.8, 4906.0], [51.9, 4907.0], [52.0, 4914.0], [52.1, 4914.0], [52.2, 4916.0], [52.3, 4917.0], [52.4, 4919.0], [52.5, 4920.0], [52.6, 4925.0], [52.7, 4931.0], [52.8, 4935.0], [52.9, 4938.0], [53.0, 4939.0], [53.1, 4940.0], [53.2, 4943.0], [53.3, 4944.0], [53.4, 4945.0], [53.5, 4946.0], [53.6, 4952.0], [53.7, 4958.0], [53.8, 4961.0], [53.9, 4962.0], [54.0, 4963.0], [54.1, 4965.0], [54.2, 4965.0], [54.3, 4966.0], [54.4, 4970.0], [54.5, 4973.0], [54.6, 4977.0], [54.7, 4979.0], [54.8, 4980.0], [54.9, 4980.0], [55.0, 4981.0], [55.1, 4981.0], [55.2, 4990.0], [55.3, 4994.0], [55.4, 4995.0], [55.5, 4995.0], [55.6, 4999.0], [55.7, 5000.0], [55.8, 5005.0], [55.9, 5006.0], [56.0, 5012.0], [56.1, 5012.0], [56.2, 5013.0], [56.3, 5013.0], [56.4, 5016.0], [56.5, 5016.0], [56.6, 5017.0], [56.7, 5018.0], [56.8, 5019.0], [56.9, 5021.0], [57.0, 5024.0], [57.1, 5024.0], [57.2, 5030.0], [57.3, 5031.0], [57.4, 5032.0], [57.5, 5032.0], [57.6, 5039.0], [57.7, 5040.0], [57.8, 5041.0], [57.9, 5043.0], [58.0, 5045.0], [58.1, 5047.0], [58.2, 5047.0], [58.3, 5048.0], [58.4, 5053.0], [58.5, 5054.0], [58.6, 5055.0], [58.7, 5056.0], [58.8, 5057.0], [58.9, 5057.0], [59.0, 5058.0], [59.1, 5059.0], [59.2, 5059.0], [59.3, 5060.0], [59.4, 5061.0], [59.5, 5061.0], [59.6, 5064.0], [59.7, 5065.0], [59.8, 5066.0], [59.9, 5066.0], [60.0, 5069.0], [60.1, 5072.0], [60.2, 5073.0], [60.3, 5076.0], [60.4, 5079.0], [60.5, 5079.0], [60.6, 5083.0], [60.7, 5085.0], [60.8, 5087.0], [60.9, 5090.0], [61.0, 5092.0], [61.1, 5092.0], [61.2, 5094.0], [61.3, 5097.0], [61.4, 5098.0], [61.5, 5100.0], [61.6, 5102.0], [61.7, 5103.0], [61.8, 5104.0], [61.9, 5104.0], [62.0, 5108.0], [62.1, 5108.0], [62.2, 5111.0], [62.3, 5111.0], [62.4, 5113.0], [62.5, 5115.0], [62.6, 5116.0], [62.7, 5118.0], [62.8, 5122.0], [62.9, 5123.0], [63.0, 5123.0], [63.1, 5126.0], [63.2, 5127.0], [63.3, 5129.0], [63.4, 5130.0], [63.5, 5130.0], [63.6, 5132.0], [63.7, 5133.0], [63.8, 5134.0], [63.9, 5134.0], [64.0, 5137.0], [64.1, 5137.0], [64.2, 5139.0], [64.3, 5139.0], [64.4, 5142.0], [64.5, 5144.0], [64.6, 5144.0], [64.7, 5150.0], [64.8, 5150.0], [64.9, 5152.0], [65.0, 5154.0], [65.1, 5154.0], [65.2, 5155.0], [65.3, 5158.0], [65.4, 5158.0], [65.5, 5160.0], [65.6, 5164.0], [65.7, 5164.0], [65.8, 5168.0], [65.9, 5169.0], [66.0, 5172.0], [66.1, 5172.0], [66.2, 5174.0], [66.3, 5174.0], [66.4, 5179.0], [66.5, 5179.0], [66.6, 5180.0], [66.7, 5183.0], [66.8, 5184.0], [66.9, 5190.0], [67.0, 5197.0], [67.1, 5199.0], [67.2, 5199.0], [67.3, 5202.0], [67.4, 5203.0], [67.5, 5203.0], [67.6, 5203.0], [67.7, 5204.0], [67.8, 5205.0], [67.9, 5206.0], [68.0, 5210.0], [68.1, 5211.0], [68.2, 5211.0], [68.3, 5212.0], [68.4, 5213.0], [68.5, 5215.0], [68.6, 5218.0], [68.7, 5219.0], [68.8, 5220.0], [68.9, 5220.0], [69.0, 5221.0], [69.1, 5222.0], [69.2, 5224.0], [69.3, 5224.0], [69.4, 5227.0], [69.5, 5227.0], [69.6, 5230.0], [69.7, 5230.0], [69.8, 5237.0], [69.9, 5237.0], [70.0, 5239.0], [70.1, 5240.0], [70.2, 5240.0], [70.3, 5241.0], [70.4, 5245.0], [70.5, 5245.0], [70.6, 5248.0], [70.7, 5250.0], [70.8, 5254.0], [70.9, 5254.0], [71.0, 5255.0], [71.1, 5255.0], [71.2, 5257.0], [71.3, 5258.0], [71.4, 5260.0], [71.5, 5260.0], [71.6, 5265.0], [71.7, 5266.0], [71.8, 5267.0], [71.9, 5268.0], [72.0, 5274.0], [72.1, 5276.0], [72.2, 5278.0], [72.3, 5278.0], [72.4, 5281.0], [72.5, 5282.0], [72.6, 5284.0], [72.7, 5284.0], [72.8, 5286.0], [72.9, 5287.0], [73.0, 5287.0], [73.1, 5289.0], [73.2, 5289.0], [73.3, 5293.0], [73.4, 5294.0], [73.5, 5294.0], [73.6, 5296.0], [73.7, 5297.0], [73.8, 5298.0], [73.9, 5298.0], [74.0, 5300.0], [74.1, 5302.0], [74.2, 5304.0], [74.3, 5306.0], [74.4, 5313.0], [74.5, 5314.0], [74.6, 5315.0], [74.7, 5316.0], [74.8, 5317.0], [74.9, 5319.0], [75.0, 5322.0], [75.1, 5326.0], [75.2, 5330.0], [75.3, 5334.0], [75.4, 5335.0], [75.5, 5337.0], [75.6, 5340.0], [75.7, 5340.0], [75.8, 5340.0], [75.9, 5341.0], [76.0, 5343.0], [76.1, 5344.0], [76.2, 5344.0], [76.3, 5345.0], [76.4, 5349.0], [76.5, 5349.0], [76.6, 5349.0], [76.7, 5349.0], [76.8, 5357.0], [76.9, 5365.0], [77.0, 5368.0], [77.1, 5369.0], [77.2, 5373.0], [77.3, 5373.0], [77.4, 5374.0], [77.5, 5375.0], [77.6, 5378.0], [77.7, 5379.0], [77.8, 5379.0], [77.9, 5382.0], [78.0, 5387.0], [78.1, 5393.0], [78.2, 5397.0], [78.3, 5398.0], [78.4, 5401.0], [78.5, 5409.0], [78.6, 5410.0], [78.7, 5410.0], [78.8, 5411.0], [78.9, 5413.0], [79.0, 5414.0], [79.1, 5414.0], [79.2, 5415.0], [79.3, 5416.0], [79.4, 5416.0], [79.5, 5416.0], [79.6, 5417.0], [79.7, 5419.0], [79.8, 5419.0], [79.9, 5419.0], [80.0, 5420.0], [80.1, 5421.0], [80.2, 5422.0], [80.3, 5422.0], [80.4, 5424.0], [80.5, 5424.0], [80.6, 5424.0], [80.7, 5426.0], [80.8, 5428.0], [80.9, 5430.0], [81.0, 5431.0], [81.1, 5433.0], [81.2, 5435.0], [81.3, 5436.0], [81.4, 5437.0], [81.5, 5438.0], [81.6, 5443.0], [81.7, 5447.0], [81.8, 5450.0], [81.9, 5452.0], [82.0, 5455.0], [82.1, 5457.0], [82.2, 5461.0], [82.3, 5464.0], [82.4, 5468.0], [82.5, 5471.0], [82.6, 5477.0], [82.7, 5477.0], [82.8, 5486.0], [82.9, 5486.0], [83.0, 5489.0], [83.1, 5490.0], [83.2, 5490.0], [83.3, 5491.0], [83.4, 5493.0], [83.5, 5493.0], [83.6, 5495.0], [83.7, 5495.0], [83.8, 5497.0], [83.9, 5497.0], [84.0, 5499.0], [84.1, 5501.0], [84.2, 5503.0], [84.3, 5503.0], [84.4, 5508.0], [84.5, 5510.0], [84.6, 5510.0], [84.7, 5510.0], [84.8, 5516.0], [84.9, 5518.0], [85.0, 5522.0], [85.1, 5524.0], [85.2, 5528.0], [85.3, 5528.0], [85.4, 5530.0], [85.5, 5530.0], [85.6, 5533.0], [85.7, 5533.0], [85.8, 5548.0], [85.9, 5552.0], [86.0, 5573.0], [86.1, 5574.0], [86.2, 5576.0], [86.3, 5578.0], [86.4, 5579.0], [86.5, 5580.0], [86.6, 5580.0], [86.7, 5584.0], [86.8, 5585.0], [86.9, 5585.0], [87.0, 5586.0], [87.1, 5588.0], [87.2, 5589.0], [87.3, 5594.0], [87.4, 5599.0], [87.5, 5600.0], [87.6, 5603.0], [87.7, 5607.0], [87.8, 5607.0], [87.9, 5615.0], [88.0, 5616.0], [88.1, 5618.0], [88.2, 5619.0], [88.3, 5624.0], [88.4, 5630.0], [88.5, 5633.0], [88.6, 5633.0], [88.7, 5639.0], [88.8, 5641.0], [88.9, 5641.0], [89.0, 5644.0], [89.1, 5646.0], [89.2, 5649.0], [89.3, 5650.0], [89.4, 5655.0], [89.5, 5658.0], [89.6, 5669.0], [89.7, 5670.0], [89.8, 5678.0], [89.9, 5679.0], [90.0, 5684.0], [90.1, 5684.0], [90.2, 5692.0], [90.3, 5703.0], [90.4, 5705.0], [90.5, 5705.0], [90.6, 5705.0], [90.7, 5706.0], [90.8, 5713.0], [90.9, 5713.0], [91.0, 5715.0], [91.1, 5721.0], [91.2, 5727.0], [91.3, 5728.0], [91.4, 5728.0], [91.5, 5729.0], [91.6, 5729.0], [91.7, 5731.0], [91.8, 5732.0], [91.9, 5733.0], [92.0, 5740.0], [92.1, 5740.0], [92.2, 5741.0], [92.3, 5746.0], [92.4, 5754.0], [92.5, 5755.0], [92.6, 5756.0], [92.7, 5758.0], [92.8, 5764.0], [92.9, 5764.0], [93.0, 5766.0], [93.1, 5775.0], [93.2, 5780.0], [93.3, 5781.0], [93.4, 5785.0], [93.5, 5787.0], [93.6, 5790.0], [93.7, 5790.0], [93.8, 5794.0], [93.9, 5797.0], [94.0, 5800.0], [94.1, 5802.0], [94.2, 5805.0], [94.3, 5805.0], [94.4, 5810.0], [94.5, 5818.0], [94.6, 5823.0], [94.7, 5823.0], [94.8, 5828.0], [94.9, 5830.0], [95.0, 5834.0], [95.1, 5835.0], [95.2, 5847.0], [95.3, 5849.0], [95.4, 5849.0], [95.5, 5849.0], [95.6, 5855.0], [95.7, 5858.0], [95.8, 5864.0], [95.9, 5876.0], [96.0, 5881.0], [96.1, 5884.0], [96.2, 5888.0], [96.3, 5895.0], [96.4, 5911.0], [96.5, 5914.0], [96.6, 5923.0], [96.7, 5923.0], [96.8, 5929.0], [96.9, 5933.0], [97.0, 5937.0], [97.1, 5939.0], [97.2, 5951.0], [97.3, 5958.0], [97.4, 5962.0], [97.5, 5970.0], [97.6, 5977.0], [97.7, 5979.0], [97.8, 5985.0], [97.9, 5989.0], [98.0, 5999.0], [98.1, 6007.0], [98.2, 6010.0], [98.3, 6019.0], [98.4, 6054.0], [98.5, 6066.0], [98.6, 6070.0], [98.7, 6089.0], [98.8, 6092.0], [98.9, 6100.0], [99.0, 6116.0], [99.1, 6120.0], [99.2, 6142.0], [99.3, 6153.0], [99.4, 6157.0], [99.5, 6165.0], [99.6, 6200.0], [99.7, 6230.0], [99.8, 6237.0], [99.9, 6258.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 83.0, "series": [{"data": [[600.0, 3.0], [700.0, 2.0], [800.0, 1.0], [900.0, 1.0], [1000.0, 3.0], [1100.0, 6.0], [1200.0, 12.0], [1300.0, 14.0], [1400.0, 8.0], [1500.0, 20.0], [1600.0, 18.0], [1700.0, 8.0], [1800.0, 17.0], [1900.0, 13.0], [2000.0, 11.0], [2100.0, 5.0], [2200.0, 13.0], [2300.0, 5.0], [2400.0, 10.0], [2500.0, 12.0], [2600.0, 7.0], [2800.0, 11.0], [2700.0, 9.0], [2900.0, 6.0], [3000.0, 8.0], [3100.0, 5.0], [3200.0, 6.0], [3300.0, 10.0], [3400.0, 8.0], [3500.0, 17.0], [3700.0, 10.0], [3600.0, 11.0], [3800.0, 17.0], [3900.0, 16.0], [4000.0, 24.0], [4200.0, 29.0], [4100.0, 24.0], [4300.0, 37.0], [4400.0, 36.0], [4500.0, 35.0], [4600.0, 50.0], [4700.0, 38.0], [4800.0, 44.0], [4900.0, 56.0], [5000.0, 72.0], [5100.0, 73.0], [5200.0, 83.0], [5300.0, 56.0], [5400.0, 71.0], [5500.0, 42.0], [5600.0, 35.0], [5700.0, 47.0], [5800.0, 29.0], [5900.0, 22.0], [6000.0, 10.0], [6100.0, 9.0], [6200.0, 5.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1200.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 50.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1200.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 626.6984000000001, "minX": 1.75557666E12, "maxY": 626.6984000000001, "series": [{"data": [[1.75557666E12, 626.6984000000001]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557666E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 600.0, "minX": 1.0, "maxY": 6285.0, "series": [{"data": [[2.0, 6066.0], [3.0, 5580.0], [4.0, 6237.0], [5.0, 6258.0], [6.0, 5644.0], [7.0, 5599.0], [8.0, 5584.0], [9.0, 5842.0], [10.0, 5335.0], [11.0, 5585.0], [12.0, 6285.0], [13.0, 5503.0], [14.0, 5516.0], [16.0, 5820.5], [18.0, 5447.0], [19.0, 5624.5], [20.0, 5493.0], [22.0, 5803.0], [23.0, 5491.0], [24.0, 5548.0], [27.0, 5483.0], [29.0, 5916.666666666667], [33.0, 5833.5], [32.0, 5581.5], [35.0, 5691.333333333333], [37.0, 6089.0], [36.0, 6230.0], [39.0, 5399.0], [38.0, 5530.0], [41.0, 6070.0], [42.0, 5651.5], [45.0, 5437.0], [44.0, 5583.0], [49.0, 5808.0], [48.0, 5459.5], [51.0, 5415.0], [50.0, 6142.0], [53.0, 5498.0], [52.0, 5633.0], [54.0, 5424.0], [57.0, 5659.0], [56.0, 5237.0], [58.0, 5414.0], [60.0, 5403.0], [63.0, 5784.666666666667], [67.0, 5107.0], [66.0, 5783.0], [65.0, 5387.0], [70.0, 5310.0], [68.0, 5828.0], [74.0, 5437.0], [72.0, 5687.5], [79.0, 5496.5], [77.0, 5649.0], [83.0, 5924.333333333333], [80.0, 5416.0], [86.0, 5587.5], [84.0, 5435.0], [91.0, 5349.0], [90.0, 5562.25], [95.0, 5443.0], [94.0, 5564.666666666667], [99.0, 5582.0], [97.0, 5939.0], [96.0, 5578.0], [103.0, 6124.5], [101.0, 5715.0], [100.0, 5818.0], [107.0, 5383.0], [106.0, 5721.0], [105.0, 5365.0], [104.0, 5349.0], [111.0, 5319.5], [109.0, 5557.0], [108.0, 5755.0], [115.0, 5830.0], [113.0, 5218.5], [117.0, 5334.0], [123.0, 5333.0], [120.0, 5462.333333333333], [127.0, 5314.0], [126.0, 5812.0], [124.0, 5345.0], [135.0, 5373.0], [134.0, 5419.0], [133.0, 5905.0], [132.0, 5933.0], [130.0, 5297.0], [129.0, 5289.0], [128.0, 5296.0], [142.0, 5295.0], [139.0, 5799.0], [138.0, 5942.5], [136.0, 5256.0], [151.0, 5258.5], [150.0, 5805.0], [148.0, 5340.0], [147.0, 5649.0], [145.0, 5575.666666666667], [158.0, 5653.0], [156.0, 5316.0], [155.0, 5849.0], [154.0, 5349.0], [153.0, 5198.5], [167.0, 5512.5], [166.0, 6028.0], [164.0, 5495.666666666667], [162.0, 5317.0], [161.0, 5438.5], [173.0, 5265.0], [172.0, 5207.666666666667], [169.0, 5486.0], [168.0, 5486.0], [180.0, 5656.0], [178.0, 5602.5], [176.0, 5332.666666666667], [190.0, 5343.0], [189.0, 5199.0], [188.0, 4934.0], [187.0, 5805.0], [186.0, 5219.0], [185.0, 5337.0], [184.0, 5401.0], [199.0, 5989.0], [198.0, 5227.0], [196.0, 5516.333333333333], [193.0, 5239.0], [192.0, 5567.5], [207.0, 5245.0], [205.0, 5353.0], [204.0, 5746.0], [203.0, 5713.0], [202.0, 5024.0], [201.0, 5280.5], [212.0, 5211.0], [211.0, 5646.0], [210.0, 5116.5], [208.0, 5244.5], [220.0, 5779.0], [219.0, 4981.0], [217.0, 5361.0], [216.0, 5300.0], [231.0, 5224.0], [239.0, 5237.333333333333], [238.0, 5274.0], [237.0, 5206.0], [232.0, 5220.0], [245.0, 5485.0], [240.0, 5245.0], [249.0, 5482.333333333333], [248.0, 5152.0], [255.0, 5104.0], [258.0, 5775.0], [271.0, 5503.166666666666], [269.0, 5406.0], [259.0, 5373.166666666667], [256.0, 5586.0], [260.0, 5612.5], [261.0, 5496.0], [263.0, 5268.0], [265.0, 5877.0], [287.0, 5116.0], [286.0, 5492.0], [284.0, 5159.333333333333], [281.0, 5481.5], [277.0, 5545.5], [275.0, 5895.0], [274.0, 5379.0], [272.0, 5031.0], [303.0, 5117.5], [298.0, 5159.0], [296.0, 5184.0], [295.0, 5376.5], [293.0, 5763.0], [292.0, 5501.5], [290.0, 5385.0], [317.0, 4832.0], [316.0, 5420.0], [315.0, 5616.0], [314.0, 5471.0], [312.0, 5415.0], [310.0, 5139.0], [307.0, 5071.5], [306.0, 5416.6], [335.0, 5488.0], [331.0, 5732.0], [330.0, 5790.0], [328.0, 5330.0], [327.0, 5101.0], [326.0, 5103.333333333333], [323.0, 5438.5], [321.0, 5614.25], [348.0, 5741.0], [345.0, 5146.5], [343.0, 5625.0], [342.0, 5858.0], [341.0, 5459.5], [339.0, 5340.0], [338.0, 5410.0], [337.0, 5491.333333333333], [367.0, 5421.0], [365.0, 5586.0], [362.0, 5290.0], [361.0, 4901.0], [360.0, 5794.0], [358.0, 5332.0], [353.0, 5323.0], [381.0, 5522.5], [383.0, 5093.5], [380.0, 5847.0], [378.0, 5266.666666666667], [377.0, 5703.0], [375.0, 5424.5], [374.0, 5282.0], [373.0, 5233.0], [371.0, 5576.0], [370.0, 5706.0], [399.0, 5543.0], [397.0, 5123.0], [395.0, 5223.333333333333], [392.0, 5283.333333333333], [389.0, 5142.0], [388.0, 4991.0], [386.0, 5110.0], [385.0, 5433.0], [413.0, 5119.0], [414.0, 5378.0], [412.0, 5730.5], [410.0, 5058.0], [408.0, 5284.0], [407.0, 5287.5], [405.0, 5388.0], [403.0, 5280.333333333333], [400.0, 5142.0], [431.0, 5418.333333333333], [428.0, 5026.666666666667], [425.0, 5064.0], [424.0, 5072.0], [423.0, 5790.0], [422.0, 5150.0], [421.0, 5068.0], [418.0, 5357.5], [416.0, 5494.0], [447.0, 5204.666666666667], [444.0, 4999.0], [443.0, 5637.0], [441.0, 5766.0], [440.0, 5237.0], [439.0, 5194.857142857143], [438.0, 5092.0], [461.0, 5306.0], [462.0, 5603.0], [460.0, 5602.0], [451.0, 5163.333333333333], [448.0, 5062.0], [459.0, 5130.5], [457.0, 5753.0], [456.0, 5436.0], [455.0, 4984.0], [454.0, 4918.0], [453.0, 5692.0], [452.0, 5615.0], [477.0, 4979.0], [479.0, 4822.0], [476.0, 5430.0], [467.0, 5017.0], [466.0, 5357.0], [465.0, 4690.0], [464.0, 5065.5], [475.0, 5012.0], [474.0, 5018.0], [473.0, 5012.0], [472.0, 5713.0], [471.0, 5035.0], [468.0, 4994.0], [494.0, 5420.5], [492.0, 4812.0], [491.0, 4903.0], [490.0, 5355.666666666667], [487.0, 4818.0], [485.0, 5522.0], [484.0, 5155.0], [482.0, 4999.5], [480.0, 5224.0], [510.0, 5084.0], [511.0, 5619.0], [508.0, 5630.0], [499.0, 5493.0], [498.0, 5641.0], [497.0, 4753.666666666667], [507.0, 5098.5], [505.0, 4634.0], [504.0, 5628.5], [503.0, 4751.0], [501.0, 4909.0], [500.0, 5222.0], [542.0, 4939.5], [543.0, 5468.0], [540.0, 5473.0], [539.0, 5178.0], [536.0, 5533.0], [519.0, 5589.0], [518.0, 4667.0], [517.0, 4973.0], [515.0, 5525.5], [513.0, 5095.0], [535.0, 4924.666666666667], [532.0, 4907.0], [531.0, 5207.5], [527.0, 5137.0], [526.0, 4754.5], [522.0, 5054.0], [521.0, 4763.0], [520.0, 4748.0], [573.0, 4871.666666666667], [564.0, 5221.0], [574.0, 4660.0], [561.0, 5255.0], [563.0, 4845.0], [562.0, 5056.0], [570.0, 4958.0], [569.0, 4581.0], [568.0, 5461.0], [551.0, 5032.5], [550.0, 5368.0], [548.0, 5477.0], [547.0, 5378.0], [546.0, 5205.0], [545.0, 5117.0], [559.0, 5490.0], [558.0, 4592.0], [557.0, 4736.5], [555.0, 5064.0], [552.0, 5169.0], [567.0, 4947.0], [566.0, 5421.0], [565.0, 4712.0], [600.0, 4676.0], [605.0, 4843.0], [607.0, 4821.0], [594.0, 5379.0], [593.0, 5091.5], [603.0, 5115.0], [602.0, 4719.0], [601.0, 4456.0], [591.0, 5213.0], [576.0, 5032.0], [578.0, 4979.0], [577.0, 4884.0], [580.0, 5294.0], [579.0, 4860.5], [583.0, 5435.0], [582.0, 5423.0], [590.0, 5423.0], [588.0, 4870.0], [587.0, 5158.0], [586.0, 5158.0], [585.0, 4777.0], [599.0, 5287.0], [598.0, 4562.0], [597.0, 4451.0], [596.0, 4891.0], [637.0, 5250.0], [638.0, 4347.0], [624.0, 4789.0], [626.0, 4334.0], [625.0, 4704.0], [636.0, 4602.0], [635.0, 4925.0], [634.0, 4465.0], [633.0, 4944.0], [632.0, 4346.0], [614.0, 4785.0], [613.0, 5066.5], [611.0, 4676.0], [610.0, 4674.0], [609.0, 5311.0], [608.0, 5369.0], [623.0, 4899.8], [618.0, 5349.0], [617.0, 4897.0], [630.0, 4788.0], [628.0, 4848.5], [669.0, 4634.0], [671.0, 4766.0], [666.0, 4684.0], [665.0, 4587.333333333333], [662.0, 4657.0], [661.0, 4666.0], [660.0, 5125.0], [658.0, 4515.25], [654.0, 4794.0], [640.0, 4946.0], [642.0, 4197.0], [641.0, 4853.0], [644.0, 5113.0], [643.0, 5257.0], [647.0, 4362.0], [645.0, 4703.0], [653.0, 5126.0], [652.0, 5029.5], [650.0, 4599.0], [698.0, 5061.0], [691.0, 4660.0], [702.0, 4436.5], [703.0, 4990.0], [689.0, 4790.0], [688.0, 5079.0], [700.0, 4675.5], [697.0, 4866.0], [678.0, 4734.0], [677.0, 4828.0], [676.0, 4943.0], [674.0, 4420.5], [672.0, 4812.0], [687.0, 4802.0], [686.0, 5172.0], [685.0, 4401.0], [683.0, 5043.0], [682.0, 4303.0], [681.0, 4448.333333333333], [695.0, 4147.0], [694.0, 4600.0], [693.0, 4865.5], [731.0, 4914.0], [734.0, 4650.5], [728.0, 4604.4], [711.0, 4422.333333333333], [709.0, 5021.0], [708.0, 4261.5], [707.0, 4794.5], [724.0, 4662.0], [722.0, 5053.0], [720.0, 4404.0], [718.0, 4424.666666666667], [715.0, 5008.0], [714.0, 4648.0], [712.0, 4671.0], [766.0, 4413.666666666667], [767.0, 4831.0], [763.0, 4718.5], [762.0, 5041.0], [760.0, 4302.75], [743.0, 4785.0], [742.0, 4691.5], [740.0, 4438.0], [739.0, 4672.0], [738.0, 4555.714285714285], [736.0, 5000.0], [750.0, 4654.0], [749.0, 4440.0], [747.0, 4632.0], [744.0, 4202.0], [757.0, 4244.0], [755.0, 4670.0], [754.0, 4710.333333333333], [753.0, 4569.0], [798.0, 4746.0], [799.0, 4672.0], [787.0, 4148.0], [786.0, 4691.0], [796.0, 4879.0], [795.0, 4883.0], [794.0, 4115.0], [793.0, 5024.0], [792.0, 4430.333333333333], [772.0, 4221.0], [771.0, 4427.0], [769.0, 4420.0], [768.0, 4520.0], [783.0, 4507.0], [780.0, 4532.5], [778.0, 4530.0], [777.0, 4400.0], [789.0, 4995.0], [788.0, 3958.0], [830.0, 4131.0], [831.0, 4823.0], [829.0, 4279.0], [828.0, 4604.0], [824.0, 4049.0], [807.0, 4440.0], [806.0, 4348.0], [805.0, 4672.333333333333], [815.0, 4668.0], [814.0, 4844.5], [812.0, 4528.0], [811.0, 4076.0], [810.0, 4306.5], [823.0, 4867.0], [822.0, 4072.0], [821.0, 4098.0], [820.0, 4550.6], [862.0, 3937.0], [851.0, 4343.0], [863.0, 4346.0], [848.0, 4810.0], [850.0, 4604.0], [849.0, 3992.0], [860.0, 4113.0], [858.0, 4317.0], [857.0, 4389.0], [839.0, 4015.0], [837.0, 4513.5], [835.0, 4307.0], [834.0, 4248.0], [833.0, 4547.5], [847.0, 4482.0], [845.0, 4886.0], [844.0, 4463.0], [841.0, 4370.0], [840.0, 4593.0], [855.0, 4518.0], [854.0, 4890.0], [853.0, 4798.0], [888.0, 4309.0], [893.0, 4475.0], [895.0, 4697.0], [880.0, 4640.0], [892.0, 4575.0], [891.0, 4633.0], [889.0, 4061.5], [879.0, 4343.0], [865.0, 4334.5], [868.0, 4192.0], [866.0, 4462.0], [871.0, 4087.0], [869.0, 4657.0], [878.0, 4297.5], [876.0, 3825.0], [875.0, 4725.0], [874.0, 4331.0], [873.0, 4346.0], [872.0, 3885.0], [885.0, 4390.0], [884.0, 4743.0], [883.0, 4260.5], [881.0, 4691.0], [921.0, 3833.0], [926.0, 4156.0], [927.0, 4074.0], [913.0, 3920.0], [915.0, 3619.0], [914.0, 4582.0], [917.0, 4181.0], [916.0, 4171.0], [924.0, 3974.0], [923.0, 4478.0], [922.0, 3639.0], [920.0, 4008.0], [903.0, 4531.0], [902.0, 4681.0], [901.0, 4313.0], [900.0, 3990.0], [899.0, 4604.0], [898.0, 3808.0], [897.0, 4695.0], [896.0, 4050.5], [911.0, 4451.0], [910.0, 4216.0], [909.0, 4521.0], [908.0, 4061.0], [907.0, 4139.0], [905.0, 4266.0], [904.0, 4121.0], [919.0, 3569.0], [918.0, 4160.0], [952.0, 3945.0], [956.0, 4390.0], [959.0, 3994.0], [944.0, 3860.0], [947.0, 3881.0], [946.0, 3672.0], [958.0, 3432.0], [957.0, 3777.0], [955.0, 3483.0], [954.0, 3467.0], [953.0, 3851.0], [943.0, 4060.0], [929.0, 4288.5], [931.0, 3569.0], [930.0, 3941.0], [933.0, 4111.0], [932.0, 4323.0], [942.0, 4042.0], [940.0, 3891.5], [938.0, 3884.0], [937.0, 3745.0], [936.0, 3847.5], [950.0, 4264.0], [948.0, 4411.0], [990.0, 3911.0], [991.0, 3623.0], [978.0, 3359.0], [977.0, 3430.5], [987.0, 3212.0], [986.0, 3687.0], [985.0, 3560.0], [984.0, 4235.0], [975.0, 3655.0], [964.0, 3958.25], [960.0, 3955.0], [967.0, 3859.0], [965.0, 4298.0], [974.0, 3372.0], [973.0, 3935.0], [972.0, 3859.0], [970.0, 3796.0], [968.0, 3753.0], [982.0, 3786.0], [981.0, 4140.0], [980.0, 3318.0], [979.0, 3713.0], [1016.0, 3393.0], [1020.0, 3488.0], [1023.0, 2840.0], [1011.0, 3585.0], [1010.0, 3383.6666666666665], [1013.0, 3578.0], [1012.0, 3028.0], [1022.0, 2851.0], [1021.0, 2932.0], [1019.0, 2938.0], [1018.0, 3321.0], [1017.0, 2952.0], [1007.0, 3036.0], [993.0, 3557.0], [995.0, 3602.0], [994.0, 3491.0], [997.0, 3866.0], [996.0, 3756.0], [999.0, 3669.0], [998.0, 3676.0], [1006.0, 3593.0], [1005.0, 3009.0], [1004.0, 3597.0], [1001.0, 3500.0], [1000.0, 3530.0], [1015.0, 3035.0], [1014.0, 3580.0], [1082.0, 2428.0], [1074.0, 2915.0], [1056.0, 3212.0], [1058.0, 2322.0], [1060.0, 2851.0], [1064.0, 2455.5], [1062.0, 2099.0], [1066.0, 2780.5], [1068.0, 2521.0], [1070.0, 1977.0], [1084.0, 2779.0], [1080.0, 2491.0], [1078.0, 2840.0], [1076.0, 1867.0], [1072.0, 2598.0], [1024.0, 3355.0], [1026.0, 3268.0], [1028.0, 2801.0], [1030.0, 2692.0], [1032.0, 3012.0], [1034.0, 3301.0], [1036.0, 2693.0], [1038.0, 3163.0], [1054.0, 2822.0], [1052.0, 2249.0], [1050.0, 2729.0], [1048.0, 2793.0], [1046.0, 2512.0], [1044.0, 3090.0], [1042.0, 2449.0], [1144.0, 1952.0], [1126.0, 2455.0], [1120.0, 2284.0], [1122.0, 2525.0], [1124.0, 2058.0], [1128.0, 2040.0], [1132.0, 2202.0], [1130.0, 2400.0], [1150.0, 1928.0], [1146.0, 1202.0], [1140.0, 2291.0], [1136.0, 2031.0], [1102.0, 2683.0], [1100.0, 2077.0], [1094.0, 2368.0], [1092.0, 1947.0], [1090.0, 2474.0], [1088.0, 2408.0], [1116.0, 2473.0], [1114.0, 1585.0], [1110.0, 2305.0], [1108.0, 1652.0], [1106.0, 2115.0], [1104.0, 2280.0], [1184.0, 1642.0], [1210.0, 1413.5], [1188.0, 1867.0], [1190.0, 1666.0], [1192.0, 1814.0], [1198.0, 1608.6666666666667], [1212.0, 1299.5], [1208.0, 1337.5], [1206.0, 1425.5], [1164.0, 1971.0], [1162.0, 1478.0], [1154.0, 2027.0], [1182.0, 1337.0], [1180.0, 1504.0], [1178.0, 941.0], [1172.0, 1604.0], [1170.0, 1920.0], [1168.0, 1295.0], [1226.0, 1305.0], [1250.0, 1400.0], [1242.0, 1053.0], [1238.0, 1270.5], [1236.0, 600.0], [1232.0, 1141.0], [1230.0, 1551.0], [1228.0, 1576.0], [1222.0, 1407.0], [1220.0, 1668.0], [1218.0, 1666.0], [1216.0, 1401.0], [1083.0, 2528.0], [1087.0, 2633.5], [1057.0, 2967.0], [1059.0, 3082.0], [1061.0, 2809.0], [1067.0, 2614.0], [1069.0, 2673.0], [1071.0, 2866.0], [1085.0, 2233.0], [1079.0, 2554.0], [1077.0, 2590.0], [1075.0, 2028.0], [1073.0, 2061.0], [1055.0, 2832.0], [1025.0, 3324.0], [1027.0, 3589.0], [1029.0, 3314.0], [1031.0, 3704.0], [1033.0, 2785.0], [1035.0, 3539.0], [1037.0, 3118.0], [1039.0, 3175.0], [1053.0, 2780.0], [1051.0, 2330.0], [1049.0, 2547.0], [1047.0, 3247.0], [1045.0, 2736.0], [1043.0, 3487.0], [1041.0, 2888.0], [1143.0, 1852.0], [1147.0, 2060.0], [1151.0, 1831.0], [1121.0, 2222.0], [1123.0, 2146.0], [1125.0, 2025.0], [1127.0, 2170.0], [1129.0, 1360.0], [1135.0, 2330.0], [1133.0, 1855.0], [1149.0, 1735.5], [1145.0, 2254.0], [1139.0, 1902.6666666666667], [1103.0, 2280.0], [1101.0, 1699.0], [1099.0, 1752.0], [1097.0, 2160.5], [1095.0, 1894.0], [1093.0, 2410.0], [1091.0, 2802.0], [1089.0, 2663.0], [1119.0, 2054.5], [1117.0, 1586.0], [1115.0, 2500.0], [1113.0, 1989.5], [1111.0, 2375.0], [1109.0, 1609.0], [1107.0, 2288.0], [1167.0, 1589.0], [1215.0, 1579.0], [1187.0, 1783.3333333333333], [1189.0, 1677.0], [1191.0, 1851.0], [1199.0, 1361.6666666666667], [1213.0, 1693.0], [1209.0, 1763.0], [1207.0, 1285.0], [1205.0, 1368.75], [1165.0, 1587.0], [1163.0, 1701.0], [1161.0, 1665.6666666666667], [1159.0, 1358.0], [1157.0, 1934.5], [1155.0, 1139.0], [1153.0, 1813.5], [1183.0, 1888.0], [1181.0, 1817.0], [1177.0, 1246.0], [1175.0, 1578.0], [1173.0, 1927.0], [1171.0, 1491.0], [1169.0, 1820.0], [1225.0, 702.0], [1239.0, 1198.0], [1241.0, 1413.0], [1235.0, 1275.0], [1233.0, 1267.0], [1231.0, 894.0], [1229.0, 1627.0], [1227.0, 780.0], [1223.0, 1056.0], [1221.0, 1545.0], [1219.0, 1384.0], [1217.0, 693.0], [1.0, 5979.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}, {"data": [[626.6976000000003, 4412.320799999996]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1250.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9500.0, "minX": 1.75557666E12, "maxY": 123375.0, "series": [{"data": [[1.75557666E12, 123375.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75557666E12, 9500.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557666E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4412.320799999996, "minX": 1.75557666E12, "maxY": 4412.320799999996, "series": [{"data": [[1.75557666E12, 4412.320799999996]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557666E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4412.224000000008, "minX": 1.75557666E12, "maxY": 4412.224000000008, "series": [{"data": [[1.75557666E12, 4412.224000000008]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557666E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2840.5503999999974, "minX": 1.75557666E12, "maxY": 2840.5503999999974, "series": [{"data": [[1.75557666E12, 2840.5503999999974]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557666E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 600.0, "minX": 1.75557666E12, "maxY": 6285.0, "series": [{"data": [[1.75557666E12, 6285.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75557666E12, 5683.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75557666E12, 6117.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75557666E12, 5834.45]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75557666E12, 600.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75557666E12, 4857.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557666E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1491.0, "minX": 65.0, "maxY": 5488.5, "series": [{"data": [[65.0, 2938.0], [617.0, 5079.0], [85.0, 1491.0], [94.0, 2059.0], [190.0, 5488.5], [199.0, 4131.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 617.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1491.0, "minX": 65.0, "maxY": 5488.0, "series": [{"data": [[65.0, 2938.0], [617.0, 5079.0], [85.0, 1491.0], [94.0, 2059.0], [190.0, 5488.0], [199.0, 4131.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 617.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 20.833333333333332, "minX": 1.75557666E12, "maxY": 20.833333333333332, "series": [{"data": [[1.75557666E12, 20.833333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557666E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 20.833333333333332, "minX": 1.75557666E12, "maxY": 20.833333333333332, "series": [{"data": [[1.75557666E12, 20.833333333333332]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557666E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 20.833333333333332, "minX": 1.75557666E12, "maxY": 20.833333333333332, "series": [{"data": [[1.75557666E12, 20.833333333333332]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557666E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 20.833333333333332, "minX": 1.75557666E12, "maxY": 20.833333333333332, "series": [{"data": [[1.75557666E12, 20.833333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557666E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

