/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 4783.0, "series": [{"data": [[0.0, 25.0], [0.1, 26.0], [0.2, 27.0], [0.3, 27.0], [0.4, 27.0], [0.5, 28.0], [0.6, 28.0], [0.7, 28.0], [0.8, 28.0], [0.9, 28.0], [1.0, 29.0], [1.1, 29.0], [1.2, 29.0], [1.3, 29.0], [1.4, 29.0], [1.5, 30.0], [1.6, 30.0], [1.7, 30.0], [1.8, 30.0], [1.9, 30.0], [2.0, 31.0], [2.1, 31.0], [2.2, 31.0], [2.3, 31.0], [2.4, 31.0], [2.5, 31.0], [2.6, 31.0], [2.7, 31.0], [2.8, 31.0], [2.9, 32.0], [3.0, 32.0], [3.1, 32.0], [3.2, 32.0], [3.3, 32.0], [3.4, 32.0], [3.5, 32.0], [3.6, 32.0], [3.7, 32.0], [3.8, 32.0], [3.9, 32.0], [4.0, 33.0], [4.1, 33.0], [4.2, 33.0], [4.3, 33.0], [4.4, 33.0], [4.5, 33.0], [4.6, 33.0], [4.7, 33.0], [4.8, 33.0], [4.9, 33.0], [5.0, 34.0], [5.1, 34.0], [5.2, 34.0], [5.3, 34.0], [5.4, 34.0], [5.5, 34.0], [5.6, 34.0], [5.7, 34.0], [5.8, 34.0], [5.9, 34.0], [6.0, 34.0], [6.1, 34.0], [6.2, 34.0], [6.3, 34.0], [6.4, 35.0], [6.5, 35.0], [6.6, 35.0], [6.7, 35.0], [6.8, 35.0], [6.9, 35.0], [7.0, 35.0], [7.1, 35.0], [7.2, 35.0], [7.3, 35.0], [7.4, 36.0], [7.5, 36.0], [7.6, 36.0], [7.7, 37.0], [7.8, 37.0], [7.9, 37.0], [8.0, 37.0], [8.1, 37.0], [8.2, 37.0], [8.3, 37.0], [8.4, 38.0], [8.5, 38.0], [8.6, 38.0], [8.7, 38.0], [8.8, 38.0], [8.9, 38.0], [9.0, 38.0], [9.1, 38.0], [9.2, 38.0], [9.3, 38.0], [9.4, 39.0], [9.5, 39.0], [9.6, 39.0], [9.7, 39.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 40.0], [10.7, 40.0], [10.8, 41.0], [10.9, 41.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 42.0], [11.4, 43.0], [11.5, 43.0], [11.6, 44.0], [11.7, 44.0], [11.8, 44.0], [11.9, 44.0], [12.0, 45.0], [12.1, 45.0], [12.2, 45.0], [12.3, 45.0], [12.4, 46.0], [12.5, 46.0], [12.6, 47.0], [12.7, 47.0], [12.8, 47.0], [12.9, 47.0], [13.0, 47.0], [13.1, 47.0], [13.2, 48.0], [13.3, 48.0], [13.4, 48.0], [13.5, 49.0], [13.6, 49.0], [13.7, 49.0], [13.8, 51.0], [13.9, 51.0], [14.0, 51.0], [14.1, 51.0], [14.2, 51.0], [14.3, 53.0], [14.4, 53.0], [14.5, 54.0], [14.6, 55.0], [14.7, 56.0], [14.8, 56.0], [14.9, 56.0], [15.0, 57.0], [15.1, 57.0], [15.2, 59.0], [15.3, 59.0], [15.4, 60.0], [15.5, 61.0], [15.6, 61.0], [15.7, 61.0], [15.8, 63.0], [15.9, 64.0], [16.0, 65.0], [16.1, 65.0], [16.2, 66.0], [16.3, 67.0], [16.4, 68.0], [16.5, 68.0], [16.6, 69.0], [16.7, 71.0], [16.8, 71.0], [16.9, 74.0], [17.0, 77.0], [17.1, 78.0], [17.2, 82.0], [17.3, 85.0], [17.4, 92.0], [17.5, 97.0], [17.6, 100.0], [17.7, 103.0], [17.8, 113.0], [17.9, 120.0], [18.0, 225.0], [18.1, 243.0], [18.2, 276.0], [18.3, 283.0], [18.4, 368.0], [18.5, 411.0], [18.6, 465.0], [18.7, 486.0], [18.8, 517.0], [18.9, 668.0], [19.0, 785.0], [19.1, 788.0], [19.2, 812.0], [19.3, 824.0], [19.4, 1000.0], [19.5, 1014.0], [19.6, 1027.0], [19.7, 1087.0], [19.8, 1129.0], [19.9, 1145.0], [20.0, 1155.0], [20.1, 1177.0], [20.2, 1205.0], [20.3, 1231.0], [20.4, 1288.0], [20.5, 1295.0], [20.6, 1328.0], [20.7, 1359.0], [20.8, 1372.0], [20.9, 1374.0], [21.0, 1423.0], [21.1, 1426.0], [21.2, 1435.0], [21.3, 1436.0], [21.4, 1485.0], [21.5, 1486.0], [21.6, 1503.0], [21.7, 1507.0], [21.8, 1510.0], [21.9, 1515.0], [22.0, 1557.0], [22.1, 1564.0], [22.2, 1592.0], [22.3, 1598.0], [22.4, 1614.0], [22.5, 1625.0], [22.6, 1639.0], [22.7, 1647.0], [22.8, 1655.0], [22.9, 1662.0], [23.0, 1668.0], [23.1, 1671.0], [23.2, 1677.0], [23.3, 1678.0], [23.4, 1681.0], [23.5, 1682.0], [23.6, 1690.0], [23.7, 1709.0], [23.8, 1718.0], [23.9, 1723.0], [24.0, 1733.0], [24.1, 1755.0], [24.2, 1768.0], [24.3, 1769.0], [24.4, 1789.0], [24.5, 1789.0], [24.6, 1800.0], [24.7, 1801.0], [24.8, 1806.0], [24.9, 1809.0], [25.0, 1814.0], [25.1, 1818.0], [25.2, 1820.0], [25.3, 1831.0], [25.4, 1835.0], [25.5, 1840.0], [25.6, 1850.0], [25.7, 1856.0], [25.8, 1863.0], [25.9, 1866.0], [26.0, 1874.0], [26.1, 1879.0], [26.2, 1885.0], [26.3, 1894.0], [26.4, 1899.0], [26.5, 1901.0], [26.6, 1916.0], [26.7, 1917.0], [26.8, 1923.0], [26.9, 1924.0], [27.0, 1965.0], [27.1, 1968.0], [27.2, 1975.0], [27.3, 1975.0], [27.4, 1982.0], [27.5, 1984.0], [27.6, 2008.0], [27.7, 2009.0], [27.8, 2013.0], [27.9, 2018.0], [28.0, 2021.0], [28.1, 2027.0], [28.2, 2028.0], [28.3, 2028.0], [28.4, 2035.0], [28.5, 2038.0], [28.6, 2039.0], [28.7, 2041.0], [28.8, 2050.0], [28.9, 2051.0], [29.0, 2054.0], [29.1, 2054.0], [29.2, 2061.0], [29.3, 2064.0], [29.4, 2072.0], [29.5, 2072.0], [29.6, 2082.0], [29.7, 2087.0], [29.8, 2092.0], [29.9, 2105.0], [30.0, 2109.0], [30.1, 2109.0], [30.2, 2124.0], [30.3, 2130.0], [30.4, 2133.0], [30.5, 2133.0], [30.6, 2138.0], [30.7, 2139.0], [30.8, 2143.0], [30.9, 2145.0], [31.0, 2153.0], [31.1, 2154.0], [31.2, 2160.0], [31.3, 2160.0], [31.4, 2168.0], [31.5, 2172.0], [31.6, 2178.0], [31.7, 2178.0], [31.8, 2185.0], [31.9, 2187.0], [32.0, 2189.0], [32.1, 2190.0], [32.2, 2199.0], [32.3, 2200.0], [32.4, 2205.0], [32.5, 2221.0], [32.6, 2229.0], [32.7, 2235.0], [32.8, 2244.0], [32.9, 2249.0], [33.0, 2253.0], [33.1, 2257.0], [33.2, 2264.0], [33.3, 2264.0], [33.4, 2267.0], [33.5, 2272.0], [33.6, 2273.0], [33.7, 2281.0], [33.8, 2281.0], [33.9, 2287.0], [34.0, 2292.0], [34.1, 2293.0], [34.2, 2296.0], [34.3, 2304.0], [34.4, 2304.0], [34.5, 2313.0], [34.6, 2317.0], [34.7, 2322.0], [34.8, 2323.0], [34.9, 2328.0], [35.0, 2334.0], [35.1, 2336.0], [35.2, 2340.0], [35.3, 2351.0], [35.4, 2358.0], [35.5, 2360.0], [35.6, 2362.0], [35.7, 2365.0], [35.8, 2371.0], [35.9, 2380.0], [36.0, 2383.0], [36.1, 2385.0], [36.2, 2386.0], [36.3, 2392.0], [36.4, 2395.0], [36.5, 2409.0], [36.6, 2415.0], [36.7, 2422.0], [36.8, 2425.0], [36.9, 2428.0], [37.0, 2429.0], [37.1, 2432.0], [37.2, 2436.0], [37.3, 2440.0], [37.4, 2441.0], [37.5, 2451.0], [37.6, 2459.0], [37.7, 2474.0], [37.8, 2480.0], [37.9, 2482.0], [38.0, 2485.0], [38.1, 2490.0], [38.2, 2492.0], [38.3, 2501.0], [38.4, 2503.0], [38.5, 2509.0], [38.6, 2510.0], [38.7, 2516.0], [38.8, 2520.0], [38.9, 2522.0], [39.0, 2529.0], [39.1, 2534.0], [39.2, 2535.0], [39.3, 2537.0], [39.4, 2546.0], [39.5, 2554.0], [39.6, 2554.0], [39.7, 2558.0], [39.8, 2559.0], [39.9, 2567.0], [40.0, 2567.0], [40.1, 2568.0], [40.2, 2573.0], [40.3, 2575.0], [40.4, 2577.0], [40.5, 2580.0], [40.6, 2582.0], [40.7, 2586.0], [40.8, 2588.0], [40.9, 2589.0], [41.0, 2592.0], [41.1, 2595.0], [41.2, 2595.0], [41.3, 2598.0], [41.4, 2598.0], [41.5, 2603.0], [41.6, 2604.0], [41.7, 2610.0], [41.8, 2614.0], [41.9, 2615.0], [42.0, 2615.0], [42.1, 2618.0], [42.2, 2624.0], [42.3, 2628.0], [42.4, 2628.0], [42.5, 2629.0], [42.6, 2631.0], [42.7, 2635.0], [42.8, 2635.0], [42.9, 2637.0], [43.0, 2643.0], [43.1, 2647.0], [43.2, 2649.0], [43.3, 2654.0], [43.4, 2654.0], [43.5, 2655.0], [43.6, 2655.0], [43.7, 2660.0], [43.8, 2661.0], [43.9, 2662.0], [44.0, 2664.0], [44.1, 2670.0], [44.2, 2671.0], [44.3, 2683.0], [44.4, 2687.0], [44.5, 2692.0], [44.6, 2694.0], [44.7, 2699.0], [44.8, 2702.0], [44.9, 2717.0], [45.0, 2723.0], [45.1, 2731.0], [45.2, 2731.0], [45.3, 2734.0], [45.4, 2735.0], [45.5, 2743.0], [45.6, 2744.0], [45.7, 2748.0], [45.8, 2751.0], [45.9, 2753.0], [46.0, 2761.0], [46.1, 2765.0], [46.2, 2773.0], [46.3, 2779.0], [46.4, 2779.0], [46.5, 2790.0], [46.6, 2793.0], [46.7, 2793.0], [46.8, 2793.0], [46.9, 2800.0], [47.0, 2801.0], [47.1, 2802.0], [47.2, 2803.0], [47.3, 2806.0], [47.4, 2811.0], [47.5, 2812.0], [47.6, 2813.0], [47.7, 2819.0], [47.8, 2819.0], [47.9, 2823.0], [48.0, 2825.0], [48.1, 2826.0], [48.2, 2832.0], [48.3, 2835.0], [48.4, 2835.0], [48.5, 2838.0], [48.6, 2840.0], [48.7, 2842.0], [48.8, 2842.0], [48.9, 2844.0], [49.0, 2845.0], [49.1, 2860.0], [49.2, 2867.0], [49.3, 2869.0], [49.4, 2872.0], [49.5, 2874.0], [49.6, 2875.0], [49.7, 2877.0], [49.8, 2877.0], [49.9, 2880.0], [50.0, 2883.0], [50.1, 2887.0], [50.2, 2888.0], [50.3, 2889.0], [50.4, 2889.0], [50.5, 2891.0], [50.6, 2891.0], [50.7, 2897.0], [50.8, 2900.0], [50.9, 2912.0], [51.0, 2914.0], [51.1, 2926.0], [51.2, 2927.0], [51.3, 2936.0], [51.4, 2937.0], [51.5, 2955.0], [51.6, 2959.0], [51.7, 2972.0], [51.8, 2993.0], [51.9, 2999.0], [52.0, 2999.0], [52.1, 3008.0], [52.2, 3010.0], [52.3, 3012.0], [52.4, 3016.0], [52.5, 3023.0], [52.6, 3024.0], [52.7, 3026.0], [52.8, 3026.0], [52.9, 3032.0], [53.0, 3043.0], [53.1, 3046.0], [53.2, 3051.0], [53.3, 3059.0], [53.4, 3066.0], [53.5, 3078.0], [53.6, 3084.0], [53.7, 3089.0], [53.8, 3095.0], [53.9, 3103.0], [54.0, 3106.0], [54.1, 3110.0], [54.2, 3115.0], [54.3, 3116.0], [54.4, 3121.0], [54.5, 3128.0], [54.6, 3132.0], [54.7, 3133.0], [54.8, 3133.0], [54.9, 3139.0], [55.0, 3144.0], [55.1, 3149.0], [55.2, 3150.0], [55.3, 3152.0], [55.4, 3152.0], [55.5, 3156.0], [55.6, 3157.0], [55.7, 3176.0], [55.8, 3176.0], [55.9, 3178.0], [56.0, 3181.0], [56.1, 3187.0], [56.2, 3195.0], [56.3, 3197.0], [56.4, 3197.0], [56.5, 3199.0], [56.6, 3213.0], [56.7, 3214.0], [56.8, 3218.0], [56.9, 3222.0], [57.0, 3224.0], [57.1, 3233.0], [57.2, 3234.0], [57.3, 3242.0], [57.4, 3246.0], [57.5, 3252.0], [57.6, 3253.0], [57.7, 3255.0], [57.8, 3258.0], [57.9, 3258.0], [58.0, 3259.0], [58.1, 3259.0], [58.2, 3260.0], [58.3, 3261.0], [58.4, 3262.0], [58.5, 3264.0], [58.6, 3267.0], [58.7, 3268.0], [58.8, 3269.0], [58.9, 3273.0], [59.0, 3273.0], [59.1, 3276.0], [59.2, 3276.0], [59.3, 3278.0], [59.4, 3279.0], [59.5, 3280.0], [59.6, 3284.0], [59.7, 3287.0], [59.8, 3293.0], [59.9, 3293.0], [60.0, 3296.0], [60.1, 3298.0], [60.2, 3299.0], [60.3, 3303.0], [60.4, 3305.0], [60.5, 3308.0], [60.6, 3310.0], [60.7, 3315.0], [60.8, 3316.0], [60.9, 3320.0], [61.0, 3322.0], [61.1, 3323.0], [61.2, 3334.0], [61.3, 3340.0], [61.4, 3345.0], [61.5, 3349.0], [61.6, 3350.0], [61.7, 3356.0], [61.8, 3357.0], [61.9, 3359.0], [62.0, 3369.0], [62.1, 3374.0], [62.2, 3375.0], [62.3, 3377.0], [62.4, 3378.0], [62.5, 3383.0], [62.6, 3386.0], [62.7, 3389.0], [62.8, 3393.0], [62.9, 3396.0], [63.0, 3398.0], [63.1, 3406.0], [63.2, 3408.0], [63.3, 3411.0], [63.4, 3412.0], [63.5, 3414.0], [63.6, 3419.0], [63.7, 3425.0], [63.8, 3427.0], [63.9, 3427.0], [64.0, 3429.0], [64.1, 3436.0], [64.2, 3436.0], [64.3, 3441.0], [64.4, 3443.0], [64.5, 3462.0], [64.6, 3466.0], [64.7, 3470.0], [64.8, 3481.0], [64.9, 3484.0], [65.0, 3487.0], [65.1, 3499.0], [65.2, 3501.0], [65.3, 3507.0], [65.4, 3510.0], [65.5, 3519.0], [65.6, 3519.0], [65.7, 3521.0], [65.8, 3524.0], [65.9, 3527.0], [66.0, 3528.0], [66.1, 3531.0], [66.2, 3531.0], [66.3, 3538.0], [66.4, 3540.0], [66.5, 3544.0], [66.6, 3550.0], [66.7, 3552.0], [66.8, 3557.0], [66.9, 3568.0], [67.0, 3568.0], [67.1, 3576.0], [67.2, 3586.0], [67.3, 3589.0], [67.4, 3590.0], [67.5, 3593.0], [67.6, 3597.0], [67.7, 3598.0], [67.8, 3600.0], [67.9, 3606.0], [68.0, 3610.0], [68.1, 3615.0], [68.2, 3620.0], [68.3, 3624.0], [68.4, 3634.0], [68.5, 3639.0], [68.6, 3643.0], [68.7, 3650.0], [68.8, 3651.0], [68.9, 3662.0], [69.0, 3664.0], [69.1, 3670.0], [69.2, 3670.0], [69.3, 3676.0], [69.4, 3676.0], [69.5, 3678.0], [69.6, 3680.0], [69.7, 3688.0], [69.8, 3691.0], [69.9, 3697.0], [70.0, 3701.0], [70.1, 3704.0], [70.2, 3708.0], [70.3, 3712.0], [70.4, 3717.0], [70.5, 3722.0], [70.6, 3723.0], [70.7, 3726.0], [70.8, 3726.0], [70.9, 3729.0], [71.0, 3730.0], [71.1, 3736.0], [71.2, 3736.0], [71.3, 3741.0], [71.4, 3741.0], [71.5, 3743.0], [71.6, 3746.0], [71.7, 3746.0], [71.8, 3750.0], [71.9, 3751.0], [72.0, 3752.0], [72.1, 3754.0], [72.2, 3758.0], [72.3, 3759.0], [72.4, 3759.0], [72.5, 3761.0], [72.6, 3761.0], [72.7, 3762.0], [72.8, 3764.0], [72.9, 3765.0], [73.0, 3766.0], [73.1, 3770.0], [73.2, 3783.0], [73.3, 3792.0], [73.4, 3792.0], [73.5, 3797.0], [73.6, 3798.0], [73.7, 3802.0], [73.8, 3807.0], [73.9, 3810.0], [74.0, 3812.0], [74.1, 3821.0], [74.2, 3822.0], [74.3, 3824.0], [74.4, 3827.0], [74.5, 3829.0], [74.6, 3830.0], [74.7, 3837.0], [74.8, 3843.0], [74.9, 3848.0], [75.0, 3848.0], [75.1, 3851.0], [75.2, 3852.0], [75.3, 3867.0], [75.4, 3869.0], [75.5, 3872.0], [75.6, 3874.0], [75.7, 3876.0], [75.8, 3876.0], [75.9, 3878.0], [76.0, 3879.0], [76.1, 3880.0], [76.2, 3881.0], [76.3, 3883.0], [76.4, 3891.0], [76.5, 3893.0], [76.6, 3894.0], [76.7, 3899.0], [76.8, 3899.0], [76.9, 3900.0], [77.0, 3900.0], [77.1, 3900.0], [77.2, 3901.0], [77.3, 3911.0], [77.4, 3911.0], [77.5, 3916.0], [77.6, 3917.0], [77.7, 3929.0], [77.8, 3929.0], [77.9, 3932.0], [78.0, 3933.0], [78.1, 3940.0], [78.2, 3940.0], [78.3, 3942.0], [78.4, 3942.0], [78.5, 3947.0], [78.6, 3947.0], [78.7, 3950.0], [78.8, 3954.0], [78.9, 3954.0], [79.0, 3955.0], [79.1, 3959.0], [79.2, 3962.0], [79.3, 3963.0], [79.4, 3963.0], [79.5, 3969.0], [79.6, 3969.0], [79.7, 3971.0], [79.8, 3972.0], [79.9, 3975.0], [80.0, 3977.0], [80.1, 3979.0], [80.2, 3980.0], [80.3, 3982.0], [80.4, 3983.0], [80.5, 3990.0], [80.6, 3991.0], [80.7, 3991.0], [80.8, 3992.0], [80.9, 3994.0], [81.0, 3994.0], [81.1, 3996.0], [81.2, 3998.0], [81.3, 4003.0], [81.4, 4005.0], [81.5, 4011.0], [81.6, 4012.0], [81.7, 4015.0], [81.8, 4018.0], [81.9, 4020.0], [82.0, 4020.0], [82.1, 4020.0], [82.2, 4022.0], [82.3, 4024.0], [82.4, 4025.0], [82.5, 4026.0], [82.6, 4026.0], [82.7, 4030.0], [82.8, 4031.0], [82.9, 4035.0], [83.0, 4035.0], [83.1, 4036.0], [83.2, 4037.0], [83.3, 4041.0], [83.4, 4041.0], [83.5, 4042.0], [83.6, 4043.0], [83.7, 4045.0], [83.8, 4049.0], [83.9, 4052.0], [84.0, 4052.0], [84.1, 4057.0], [84.2, 4060.0], [84.3, 4064.0], [84.4, 4065.0], [84.5, 4067.0], [84.6, 4068.0], [84.7, 4070.0], [84.8, 4071.0], [84.9, 4071.0], [85.0, 4073.0], [85.1, 4075.0], [85.2, 4076.0], [85.3, 4076.0], [85.4, 4079.0], [85.5, 4081.0], [85.6, 4084.0], [85.7, 4088.0], [85.8, 4092.0], [85.9, 4097.0], [86.0, 4097.0], [86.1, 4102.0], [86.2, 4102.0], [86.3, 4104.0], [86.4, 4107.0], [86.5, 4112.0], [86.6, 4114.0], [86.7, 4117.0], [86.8, 4118.0], [86.9, 4119.0], [87.0, 4121.0], [87.1, 4124.0], [87.2, 4125.0], [87.3, 4125.0], [87.4, 4126.0], [87.5, 4127.0], [87.6, 4129.0], [87.7, 4136.0], [87.8, 4136.0], [87.9, 4138.0], [88.0, 4139.0], [88.1, 4141.0], [88.2, 4141.0], [88.3, 4146.0], [88.4, 4146.0], [88.5, 4150.0], [88.6, 4150.0], [88.7, 4151.0], [88.8, 4151.0], [88.9, 4157.0], [89.0, 4160.0], [89.1, 4162.0], [89.2, 4163.0], [89.3, 4165.0], [89.4, 4170.0], [89.5, 4175.0], [89.6, 4177.0], [89.7, 4181.0], [89.8, 4186.0], [89.9, 4191.0], [90.0, 4193.0], [90.1, 4200.0], [90.2, 4202.0], [90.3, 4203.0], [90.4, 4209.0], [90.5, 4210.0], [90.6, 4212.0], [90.7, 4214.0], [90.8, 4216.0], [90.9, 4222.0], [91.0, 4226.0], [91.1, 4231.0], [91.2, 4233.0], [91.3, 4239.0], [91.4, 4240.0], [91.5, 4242.0], [91.6, 4243.0], [91.7, 4245.0], [91.8, 4247.0], [91.9, 4250.0], [92.0, 4251.0], [92.1, 4254.0], [92.2, 4256.0], [92.3, 4262.0], [92.4, 4271.0], [92.5, 4273.0], [92.6, 4277.0], [92.7, 4279.0], [92.8, 4281.0], [92.9, 4283.0], [93.0, 4285.0], [93.1, 4286.0], [93.2, 4292.0], [93.3, 4296.0], [93.4, 4296.0], [93.5, 4297.0], [93.6, 4300.0], [93.7, 4301.0], [93.8, 4306.0], [93.9, 4308.0], [94.0, 4309.0], [94.1, 4314.0], [94.2, 4315.0], [94.3, 4320.0], [94.4, 4322.0], [94.5, 4324.0], [94.6, 4324.0], [94.7, 4327.0], [94.8, 4328.0], [94.9, 4332.0], [95.0, 4333.0], [95.1, 4334.0], [95.2, 4336.0], [95.3, 4343.0], [95.4, 4343.0], [95.5, 4344.0], [95.6, 4347.0], [95.7, 4351.0], [95.8, 4359.0], [95.9, 4367.0], [96.0, 4368.0], [96.1, 4370.0], [96.2, 4371.0], [96.3, 4383.0], [96.4, 4385.0], [96.5, 4387.0], [96.6, 4387.0], [96.7, 4397.0], [96.8, 4400.0], [96.9, 4415.0], [97.0, 4421.0], [97.1, 4424.0], [97.2, 4427.0], [97.3, 4435.0], [97.4, 4444.0], [97.5, 4452.0], [97.6, 4456.0], [97.7, 4470.0], [97.8, 4477.0], [97.9, 4478.0], [98.0, 4484.0], [98.1, 4499.0], [98.2, 4504.0], [98.3, 4509.0], [98.4, 4532.0], [98.5, 4556.0], [98.6, 4567.0], [98.7, 4570.0], [98.8, 4608.0], [98.9, 4620.0], [99.0, 4620.0], [99.1, 4625.0], [99.2, 4627.0], [99.3, 4631.0], [99.4, 4634.0], [99.5, 4639.0], [99.6, 4642.0], [99.7, 4657.0], [99.8, 4685.0], [99.9, 4767.0], [100.0, 4783.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 264.0, "series": [{"data": [[0.0, 264.0], [600.0, 1.0], [700.0, 3.0], [800.0, 3.0], [900.0, 1.0], [1000.0, 5.0], [1100.0, 7.0], [1200.0, 5.0], [1300.0, 7.0], [1400.0, 9.0], [1500.0, 12.0], [1600.0, 19.0], [100.0, 6.0], [1700.0, 14.0], [1800.0, 28.0], [1900.0, 17.0], [2000.0, 34.0], [2100.0, 36.0], [2200.0, 29.0], [2300.0, 34.0], [2400.0, 27.0], [2500.0, 47.0], [2600.0, 50.0], [2700.0, 32.0], [2800.0, 58.0], [2900.0, 20.0], [3000.0, 26.0], [3100.0, 41.0], [200.0, 5.0], [3200.0, 55.0], [3300.0, 43.0], [3400.0, 31.0], [3500.0, 39.0], [3600.0, 33.0], [3700.0, 55.0], [3800.0, 49.0], [3900.0, 65.0], [4000.0, 73.0], [4100.0, 59.0], [4200.0, 53.0], [4300.0, 48.0], [4400.0, 21.0], [4500.0, 9.0], [4600.0, 17.0], [300.0, 2.0], [4700.0, 2.0], [400.0, 5.0], [500.0, 1.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 42.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1176.0, "series": [{"data": [[0.0, 282.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 42.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1176.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 737.2280000000007, "minX": 1.75559712E12, "maxY": 737.2280000000007, "series": [{"data": [[1.75559712E12, 737.2280000000007]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559712E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 4783.0, "series": [{"data": [[2.0, 4066.0], [3.0, 4307.0], [4.0, 4296.0], [5.0, 3043.0], [7.0, 3906.5], [9.0, 3552.5], [11.0, 3574.0], [12.0, 4783.0], [13.0, 4043.0], [14.0, 3078.0], [19.0, 3703.6], [21.0, 4150.0], [22.0, 2395.0], [23.0, 4504.0], [25.0, 2923.5], [26.0, 3133.0], [27.0, 3025.0], [28.0, 3024.0], [30.0, 4155.5], [31.0, 4026.0], [32.0, 4000.0], [34.0, 3995.0], [36.0, 3673.5], [39.0, 3975.0], [38.0, 3992.0], [41.0, 3963.0], [40.0, 3969.0], [43.0, 4081.0], [42.0, 4687.0], [45.0, 3945.0], [44.0, 4499.0], [47.0, 3938.0], [48.0, 3940.0], [51.0, 3308.0], [50.0, 3771.0], [53.0, 3441.0], [52.0, 3759.0], [55.0, 3736.0], [54.0, 3758.0], [57.0, 3851.0], [56.0, 3293.0], [58.0, 3287.0], [61.0, 4478.0], [60.0, 3282.0], [63.0, 3882.0], [67.0, 3276.0], [66.0, 3276.0], [65.0, 4200.0], [64.0, 4203.0], [71.0, 3824.5], [75.0, 3999.6666666666665], [72.0, 3273.0], [79.0, 3259.0], [78.0, 3760.5], [76.0, 3268.0], [83.0, 3262.0], [81.0, 4434.0], [80.0, 4556.0], [87.0, 3901.0], [86.0, 4172.0], [85.0, 3259.0], [84.0, 3258.0], [91.0, 3252.0], [90.0, 3883.3333333333335], [95.0, 4639.0], [94.0, 4154.0], [92.0, 4435.0], [99.0, 4650.0], [98.0, 4530.0], [97.0, 4532.0], [102.0, 4312.0], [100.0, 4567.0], [107.0, 4150.0], [106.0, 3176.0], [105.0, 3176.0], [104.0, 4057.5], [111.0, 4685.0], [110.0, 4421.0], [109.0, 4150.5], [115.0, 4489.5], [113.0, 4427.5], [118.0, 4141.0], [117.0, 4657.0], [116.0, 4239.0], [123.0, 4505.0], [122.0, 4618.0], [121.0, 4622.0], [120.0, 4358.5], [127.0, 3758.5], [126.0, 4642.0], [124.0, 3150.0], [135.0, 3088.0], [134.0, 2927.0], [133.0, 2972.0], [132.0, 3837.0], [131.0, 4126.0], [130.0, 3144.0], [129.0, 3345.0], [128.0, 3152.0], [143.0, 4625.0], [142.0, 4634.0], [141.0, 4092.0], [140.0, 2869.0], [139.0, 2900.0], [138.0, 2875.0], [150.0, 3039.5], [149.0, 2823.0], [147.0, 3726.5], [145.0, 3573.0], [158.0, 4073.0], [157.0, 3446.0], [155.0, 4569.0], [154.0, 2823.0], [153.0, 3778.0], [152.0, 2819.0], [167.0, 2889.0], [166.0, 2880.0], [165.0, 4097.0], [163.0, 4207.5], [162.0, 2877.0], [161.0, 2813.0], [160.0, 2812.0], [174.0, 2801.0], [173.0, 2735.0], [172.0, 2803.0], [171.0, 2874.0], [170.0, 2887.0], [169.0, 2891.0], [168.0, 2995.0], [183.0, 2804.0], [182.0, 4456.0], [181.0, 3138.0], [180.0, 2836.0], [178.0, 2936.0], [177.0, 4532.0], [176.0, 3565.0], [189.0, 4272.0], [188.0, 2790.0], [187.0, 2802.0], [186.0, 2793.0], [185.0, 2793.0], [198.0, 2793.0], [197.0, 3152.0], [196.0, 3467.0], [194.0, 2890.0], [192.0, 3256.3333333333335], [206.0, 2598.0], [205.0, 2849.5], [203.0, 2841.0], [202.0, 2842.5], [215.0, 3186.0], [214.0, 2582.0], [213.0, 2860.0], [212.0, 4509.0], [211.0, 2604.0], [210.0, 2588.0], [209.0, 2606.0], [208.0, 2595.5], [222.0, 4486.0], [221.0, 4463.0], [220.0, 2513.0], [219.0, 2694.5], [218.0, 4271.0], [217.0, 2884.0], [231.0, 4397.0], [230.0, 2293.0], [229.0, 4216.0], [228.0, 3262.0], [226.0, 4277.0], [225.0, 4245.0], [224.0, 2336.0], [238.0, 4258.0], [237.0, 2087.0], [235.0, 3935.0], [233.0, 4163.0], [232.0, 4226.0], [247.0, 3966.0], [246.0, 4093.0], [245.0, 3893.3333333333335], [242.0, 2392.0], [241.0, 4071.0], [240.0, 2432.0], [255.0, 4477.0], [254.0, 3778.5], [253.0, 3764.0], [251.0, 4446.0], [250.0, 3882.0], [249.0, 3765.0], [248.0, 3969.0], [259.0, 4216.0], [270.0, 4400.0], [271.0, 3736.0], [269.0, 3797.3333333333335], [266.0, 3773.6666666666665], [264.0, 3746.0], [263.0, 3676.0], [261.0, 3879.0], [260.0, 3741.0], [258.0, 3764.0], [256.0, 3762.0], [274.0, 3867.0], [287.0, 4063.3333333333335], [284.0, 3298.3333333333335], [283.0, 1732.0], [280.0, 3849.0], [279.0, 4242.0], [278.0, 1818.0], [277.0, 3723.0], [276.0, 3746.5], [273.0, 3746.0], [272.0, 4180.0], [301.0, 1155.0], [303.0, 4026.0], [300.0, 4380.0], [288.0, 4138.0], [299.0, 2589.0], [297.0, 3900.0], [296.0, 1433.0], [295.0, 1436.0], [294.0, 3880.0], [293.0, 4444.0], [292.0, 2871.75], [316.0, 3334.0], [319.0, 1374.0], [318.0, 4035.0], [317.0, 3940.0], [312.0, 1486.0], [311.0, 3688.0], [310.0, 3922.5], [309.0, 4162.0], [307.0, 4206.5], [305.0, 2699.5], [333.0, 3701.0], [335.0, 3598.0], [332.0, 4097.0], [322.0, 3812.0], [321.0, 3726.0], [320.0, 4146.0], [331.0, 4024.0], [330.0, 4186.0], [329.0, 3991.0], [328.0, 3802.0], [327.0, 3014.6666666666665], [324.0, 4367.0], [339.0, 4383.0], [351.0, 4227.0], [349.0, 3166.3333333333335], [347.0, 4033.0], [346.0, 4014.5], [343.0, 4166.666666666667], [342.0, 4343.0], [338.0, 812.0], [337.0, 3593.0], [336.0, 2659.5], [354.0, 4126.0], [366.0, 4309.0], [365.0, 4077.5], [363.0, 4020.0], [362.0, 4102.0], [361.0, 4158.5], [359.0, 4127.5], [358.0, 4005.0], [356.0, 4244.0], [353.0, 4027.0], [352.0, 4324.0], [371.0, 4350.0], [383.0, 3997.5], [381.0, 4285.0], [379.0, 4298.5], [377.0, 4332.0], [376.0, 4385.0], [375.0, 4267.5], [373.0, 3710.5], [370.0, 4336.0], [369.0, 4296.0], [368.0, 4073.5], [397.0, 4250.0], [399.0, 4292.5], [396.0, 4126.0], [387.0, 4306.5], [385.0, 4014.0], [395.0, 4076.0], [394.0, 4368.0], [393.0, 4363.0], [392.0, 4334.0], [391.0, 3877.0], [390.0, 4315.0], [389.0, 4322.0], [388.0, 4301.0], [414.0, 4015.0], [415.0, 4297.0], [413.0, 4067.0], [412.0, 4311.0], [410.0, 4333.0], [409.0, 3846.0], [408.0, 3874.0], [407.0, 4128.5], [403.0, 3848.0], [402.0, 4327.0], [401.0, 3979.0], [400.0, 4073.0], [405.0, 4090.5], [430.0, 4240.0], [431.0, 4283.0], [429.0, 4233.0], [428.0, 4235.0], [427.0, 3792.0], [426.0, 4071.0], [425.0, 4216.5], [423.0, 4012.5], [419.0, 4281.0], [418.0, 3950.0], [417.0, 3650.0], [416.0, 4214.0], [421.0, 4262.0], [435.0, 3960.5], [447.0, 4160.0], [446.0, 4147.5], [444.0, 4065.4], [439.0, 4227.5], [437.0, 4124.0], [436.0, 4256.0], [433.0, 4214.0], [432.0, 4251.0], [461.0, 3532.0], [462.0, 3876.0], [460.0, 3531.0], [451.0, 4222.0], [450.0, 3899.0], [449.0, 4134.0], [459.0, 4036.0], [458.0, 4152.0], [457.0, 3876.0], [455.0, 3544.0], [454.0, 4147.5], [452.0, 3550.0], [478.0, 4119.0], [479.0, 4125.0], [477.0, 4043.6666666666665], [466.0, 3991.0], [464.0, 3905.5], [474.0, 4057.0], [473.0, 4160.5], [471.0, 4134.0], [470.0, 4177.0], [469.0, 4141.0], [468.0, 4005.0], [483.0, 4107.0], [495.0, 4023.5], [493.0, 3833.5], [489.0, 4112.0], [488.0, 4052.0], [487.0, 4045.0], [486.0, 4102.0], [485.0, 4127.0], [482.0, 4144.0], [481.0, 4061.5], [510.0, 3794.0], [511.0, 4110.0], [509.0, 4114.0], [508.0, 4071.0], [507.0, 4060.0], [506.0, 3947.0], [505.0, 3797.0], [504.0, 4054.5], [502.0, 3828.5], [499.0, 4064.0], [498.0, 4140.0], [497.0, 4138.0], [496.0, 4104.0], [500.0, 4079.0], [538.0, 3369.0], [530.0, 4011.0], [540.0, 3991.0], [542.0, 4004.0], [528.0, 4049.0], [539.0, 3982.0], [537.0, 3713.0], [518.0, 4076.0], [517.0, 3891.0], [516.0, 3852.0], [515.0, 4060.5], [513.0, 4114.0], [512.0, 4118.0], [527.0, 4041.5], [525.0, 4068.0], [524.0, 4020.0], [523.0, 4039.0], [521.0, 3843.0], [520.0, 3962.5], [535.0, 3990.5], [533.0, 3730.0], [532.0, 3975.6666666666665], [569.0, 3942.0], [573.0, 3662.0], [574.0, 3600.0], [561.0, 3929.0], [560.0, 3798.0], [564.0, 3983.0], [563.0, 3783.5], [572.0, 3606.0], [571.0, 3315.0], [570.0, 3620.0], [568.0, 3323.0], [551.0, 3954.0], [550.0, 3977.0], [549.0, 3959.0], [548.0, 3894.0], [547.0, 3827.0], [546.0, 4012.0], [545.0, 4005.0], [544.0, 4020.5], [559.0, 3691.0], [558.0, 3971.0], [557.0, 3784.5], [555.0, 3991.0], [554.0, 3954.0], [552.0, 4025.0], [567.0, 3615.0], [566.0, 3768.0], [601.0, 3801.0], [606.0, 3552.0], [607.0, 3643.0], [594.0, 3893.0], [593.0, 3820.6666666666665], [596.0, 3869.0], [595.0, 3566.0], [604.0, 3876.0], [603.0, 3907.0], [602.0, 3914.0], [600.0, 3724.0], [582.0, 3589.0], [581.0, 3947.0], [580.0, 3590.0], [579.0, 3591.0], [578.0, 3955.0], [577.0, 3754.0], [576.0, 3792.0], [590.0, 3572.0], [589.0, 3651.0], [588.0, 3911.0], [587.0, 3680.0], [586.0, 3707.5], [584.0, 3768.5], [598.0, 3269.0], [597.0, 3725.0], [635.0, 3726.0], [627.0, 3826.0], [638.0, 3436.0], [639.0, 3411.5], [625.0, 3667.0], [624.0, 3504.0], [636.0, 3407.3333333333335], [633.0, 3321.5], [615.0, 3524.0], [614.0, 3527.0], [613.0, 3529.0], [612.0, 3531.0], [611.0, 3848.0], [610.0, 3872.0], [609.0, 3538.0], [608.0, 3540.0], [623.0, 3568.0], [622.0, 3722.0], [621.0, 3705.0], [619.0, 3729.0], [618.0, 3519.0], [617.0, 3520.0], [630.0, 3824.0], [629.0, 3624.0], [628.0, 3501.0], [665.0, 3350.0], [669.0, 3741.0], [670.0, 3259.0], [656.0, 3379.0], [658.0, 3732.0], [657.0, 3376.0], [660.0, 3375.0], [659.0, 3761.0], [668.0, 3676.0], [667.0, 3743.0], [666.0, 3272.0], [664.0, 3357.0], [646.0, 3762.0], [645.0, 3424.0], [644.0, 3427.0], [643.0, 3428.0], [641.0, 3149.0], [640.0, 3412.0], [655.0, 3317.0], [654.0, 3296.0], [653.0, 3758.0], [652.0, 3388.0], [651.0, 3790.0], [650.0, 3395.5], [648.0, 3539.5], [663.0, 3365.0], [661.0, 3374.0], [697.0, 3287.0], [702.0, 3389.0], [703.0, 3278.0], [688.0, 3411.0], [691.0, 3670.0], [690.0, 3522.5], [693.0, 3296.0], [692.0, 3299.0], [701.0, 3694.0], [700.0, 3717.0], [699.0, 3660.5], [696.0, 3635.0], [679.0, 3323.0], [678.0, 3322.0], [677.0, 3708.0], [676.0, 3704.0], [675.0, 3673.0], [674.0, 3697.0], [673.0, 3746.0], [672.0, 3296.0], [687.0, 3678.0], [686.0, 3308.0], [685.0, 3399.5], [683.0, 3481.0], [682.0, 3425.0], [681.0, 3316.0], [680.0, 3521.0], [695.0, 3399.0], [694.0, 3293.0], [733.0, 30.0], [724.0, 32.0], [734.0, 3224.0], [720.0, 2999.0], [723.0, 3255.0], [722.0, 1514.0], [732.0, 1630.5], [730.0, 28.0], [729.0, 1635.0], [711.0, 3024.3333333333335], [708.0, 3293.0], [707.0, 3275.0], [706.0, 3232.0], [718.0, 3262.0], [717.0, 3008.0], [716.0, 3011.0], [715.0, 3012.0], [713.0, 3016.0], [712.0, 3023.0], [727.0, 29.0], [726.0, 3258.0], [725.0, 3246.0], [764.0, 3106.0], [767.0, 3303.0], [753.0, 1536.4545454545457], [755.0, 3128.0], [754.0, 3253.0], [766.0, 35.0], [765.0, 35.0], [763.0, 3139.0], [762.0, 3320.0], [761.0, 3612.0], [760.0, 3435.0], [742.0, 53.0], [741.0, 3214.0], [740.0, 3597.0], [739.0, 3489.5], [737.0, 56.0], [736.0, 1631.5], [759.0, 3159.0], [758.0, 1230.6666666666665], [793.0, 38.0], [788.0, 3408.0], [797.0, 1702.0], [799.0, 1756.5], [787.0, 1626.0], [785.0, 33.5], [795.0, 1759.5], [792.0, 3484.0], [775.0, 3260.0], [774.0, 37.0], [773.0, 3516.0], [772.0, 3576.0], [771.0, 3443.0], [770.0, 33.0], [769.0, 3527.0], [768.0, 32.0], [783.0, 3072.0], [782.0, 3528.0], [781.0, 3316.0], [779.0, 32.0], [778.0, 32.0], [777.0, 35.0], [776.0, 3498.0], [791.0, 39.0], [790.0, 3253.0], [789.0, 47.0], [827.0, 1163.3333333333335], [818.0, 3222.0], [830.0, 3197.0], [831.0, 3393.0], [817.0, 39.0], [816.0, 1745.5], [828.0, 3196.0], [825.0, 3178.0], [807.0, 44.0], [806.0, 3346.0], [805.0, 60.0], [803.0, 53.0], [801.0, 3214.0], [800.0, 3470.0], [814.0, 45.0], [813.0, 2925.0], [812.0, 1739.5], [810.0, 1778.0], [808.0, 44.0], [823.0, 37.0], [822.0, 2155.6666666666665], [819.0, 39.0], [860.0, 3358.0], [863.0, 2811.0], [848.0, 3115.0], [850.0, 3145.0], [849.0, 2615.0], [852.0, 2600.0], [851.0, 3110.0], [862.0, 3355.0], [861.0, 65.0], [859.0, 2743.0], [858.0, 82.0], [857.0, 62.0], [856.0, 1426.0], [847.0, 1450.5], [833.0, 3199.0], [832.0, 2854.0], [837.0, 2921.0], [835.0, 3330.0], [839.0, 2844.0], [838.0, 3132.0], [845.0, 3264.0], [844.0, 2835.0], [843.0, 2835.0], [841.0, 3419.0], [840.0, 2840.0], [854.0, 3106.0], [853.0, 3152.0], [893.0, 2573.0], [884.0, 29.0], [894.0, 41.0], [881.0, 2780.5], [883.0, 33.0], [882.0, 2522.0], [892.0, 2730.0], [891.0, 2848.6666666666665], [888.0, 2509.0], [871.0, 2868.0], [870.0, 2904.5], [868.0, 3059.0], [867.0, 3076.3333333333335], [864.0, 3121.0], [879.0, 2819.0], [877.0, 2734.0], [876.0, 31.0], [875.0, 1579.5], [873.0, 3252.0], [872.0, 34.0], [887.0, 34.0], [886.0, 2744.0], [885.0, 2510.0], [924.0, 2589.0], [927.0, 2661.0], [912.0, 37.0], [914.0, 3213.0], [913.0, 2670.0], [916.0, 2656.0], [915.0, 38.0], [926.0, 2629.0], [925.0, 2618.0], [923.0, 37.0], [922.0, 2436.0], [921.0, 2643.0], [920.0, 2819.0], [911.0, 40.0], [897.0, 2867.0], [896.0, 1650.0], [901.0, 1361.5], [899.0, 1363.0], [903.0, 2687.0], [902.0, 31.0], [910.0, 2694.0], [909.0, 43.0], [907.0, 2845.0], [906.0, 2702.0], [905.0, 3298.0], [904.0, 31.0], [919.0, 2592.0], [918.0, 2944.5], [952.0, 2631.0], [956.0, 2765.0], [959.0, 2480.0], [945.0, 2764.0], [944.0, 3218.0], [958.0, 2635.0], [957.0, 30.0], [955.0, 46.0], [954.0, 2535.0], [953.0, 2485.0], [943.0, 38.0], [928.0, 26.0], [932.0, 1883.6666666666667], [930.0, 2748.0], [935.0, 44.0], [934.0, 2654.0], [942.0, 2982.5], [941.0, 2773.0], [940.0, 3157.0], [938.0, 3089.0], [937.0, 1273.0], [951.0, 950.6666666666667], [948.0, 1725.0], [985.0, 2440.0], [990.0, 2548.0], [991.0, 2671.0], [976.0, 34.0], [979.0, 2842.0], [978.0, 1387.5], [981.0, 2441.0], [980.0, 82.0], [989.0, 2577.0], [988.0, 2449.5], [986.0, 2993.0], [984.0, 34.0], [966.0, 2597.0], [965.0, 2362.0], [964.0, 33.0], [963.0, 2630.0], [961.0, 3133.0], [960.0, 2875.0], [975.0, 2530.0], [974.0, 2520.0], [973.0, 2459.0], [972.0, 40.0], [971.0, 98.0], [970.0, 37.0], [969.0, 2451.0], [968.0, 2488.5], [983.0, 34.0], [982.0, 2520.0], [1016.0, 32.0], [1021.0, 46.5], [1023.0, 1484.5], [1008.0, 2409.0], [1019.0, 35.0], [1018.0, 2223.0], [1017.0, 2534.5], [1007.0, 2482.0], [992.0, 2529.0], [994.0, 2472.0], [993.0, 2546.0], [997.0, 31.0], [996.0, 2430.5], [999.0, 2490.0], [998.0, 2595.0], [1006.0, 2632.0], [1004.0, 3056.0], [1003.0, 28.0], [1002.0, 36.0], [1001.0, 2631.5], [1014.0, 1309.0], [1012.0, 38.0], [1011.0, 54.0], [1010.0, 2389.5], [1078.0, 2453.3333333333335], [1082.0, 2631.0], [1086.0, 2621.5], [1058.0, 2140.0], [1060.0, 2624.0], [1064.0, 2188.0], [1066.0, 31.0], [1068.0, 2346.0], [1070.0, 2378.0], [1084.0, 2178.0], [1080.0, 34.0], [1072.0, 2236.0], [1054.0, 2190.0], [1026.0, 2955.0], [1024.0, 2559.0], [1028.0, 2429.0], [1030.0, 2715.5], [1032.0, 2959.0], [1034.0, 2908.0], [1036.0, 2883.0], [1038.0, 2912.0], [1052.0, 2644.0], [1050.0, 2383.0], [1048.0, 1118.5], [1046.0, 2668.0], [1042.0, 30.0], [1144.0, 2172.0], [1148.0, 1343.5], [1120.0, 2264.0], [1124.0, 2055.0], [1126.0, 2505.0], [1130.0, 61.0], [1134.0, 2578.0], [1150.0, 2092.0], [1146.0, 2427.0], [1142.0, 2190.0], [1140.0, 2557.0], [1138.0, 1986.0], [1088.0, 1325.0], [1090.0, 2313.0], [1092.0, 28.0], [1094.0, 2783.0], [1098.0, 35.0], [1100.0, 28.0], [1102.0, 2806.0], [1118.0, 2264.0], [1116.0, 2567.0], [1114.0, 2273.0], [1110.0, 2283.0], [1108.0, 2293.0], [1106.0, 2378.5], [1104.0, 2109.0], [1208.0, 2045.0], [1190.0, 2318.0], [1212.0, 1968.0], [1186.0, 34.0], [1192.0, 44.0], [1196.0, 37.333333333333336], [1198.0, 47.0], [1214.0, 35.0], [1210.0, 1820.0], [1206.0, 2422.0], [1202.0, 2258.0], [1160.0, 1498.6666666666665], [1164.0, 1880.0], [1166.0, 32.0], [1182.0, 2169.0], [1178.0, 2091.0], [1176.0, 41.0], [1174.0, 2492.0], [1172.0, 2547.0], [1170.0, 2338.5], [1168.0, 2110.0], [1230.0, 1826.3333333333333], [1272.0, 2003.6666666666667], [1276.0, 2154.0], [1220.0, 1812.0], [1222.0, 796.2], [1228.0, 1160.0], [1264.0, 1368.3333333333333], [1266.0, 35.0], [1270.0, 1517.25], [1218.0, 824.0], [1216.0, 2516.0], [1246.0, 30.0], [1244.0, 820.5], [1242.0, 1887.6666666666667], [1238.0, 1163.3333333333335], [1236.0, 1006.5], [1234.0, 1359.6666666666667], [1232.0, 1075.2], [1248.0, 818.0], [1250.0, 1238.8], [1254.0, 1174.0], [1256.0, 33.0], [1258.0, 2041.0], [1260.0, 1153.0], [1262.0, 2013.0], [1278.0, 27.0], [1274.0, 33.0], [1312.0, 60.0], [1326.0, 1276.5], [1324.0, 60.0], [1322.0, 34.0], [1320.0, 1849.0], [1318.0, 1202.75], [1316.0, 1771.5], [1314.0, 2028.0], [1342.0, 51.0], [1340.0, 441.00000000000006], [1338.0, 1187.3333333333333], [1336.0, 687.0], [1334.0, 832.25], [1332.0, 750.0], [1330.0, 154.0], [1328.0, 38.0], [1294.0, 40.0], [1292.0, 867.6], [1290.0, 36.0], [1288.0, 946.0], [1286.0, 1879.0], [1284.0, 2013.5], [1282.0, 45.0], [1310.0, 694.5], [1308.0, 37.0], [1306.0, 1051.0], [1304.0, 1507.5], [1302.0, 2034.0], [1300.0, 2039.0], [1298.0, 2054.0], [1356.0, 361.1428571428571], [1358.0, 55.0], [1354.0, 403.0], [1352.0, 71.0], [1350.0, 904.0], [1348.0, 1205.0], [1346.0, 411.0], [1079.0, 40.0], [1063.0, 2469.0], [1057.0, 1575.0], [1059.0, 29.0], [1061.0, 2304.0], [1065.0, 29.0], [1067.0, 37.0], [1071.0, 2287.0], [1083.0, 31.0], [1081.0, 32.0], [1077.0, 2334.0], [1075.0, 2168.0], [1073.0, 2580.0], [1027.0, 2559.5], [1031.0, 2386.0], [1033.0, 2360.0], [1035.0, 2695.0], [1037.0, 2945.0], [1039.0, 2396.0], [1053.0, 2662.0], [1051.0, 2328.0], [1049.0, 2383.0], [1045.0, 1099.0], [1043.0, 30.0], [1041.0, 1106.5], [1145.0, 2664.0], [1139.0, 34.0], [1151.0, 2614.0], [1121.0, 2201.0], [1123.0, 2413.0], [1127.0, 66.0], [1129.0, 2392.0], [1133.0, 1040.0], [1131.0, 2160.0], [1135.0, 2655.0], [1149.0, 27.0], [1143.0, 32.0], [1141.0, 2109.0], [1137.0, 2184.0], [1119.0, 33.0], [1089.0, 33.0], [1091.0, 30.0], [1093.0, 2139.0], [1097.0, 1171.0], [1095.0, 2130.0], [1099.0, 2292.0], [1101.0, 29.0], [1103.0, 45.0], [1117.0, 2187.0], [1115.0, 33.0], [1113.0, 2178.0], [1109.0, 2795.0], [1107.0, 39.0], [1211.0, 1820.0], [1213.0, 1065.6], [1215.0, 2415.0], [1185.0, 2234.5], [1189.0, 983.5], [1187.0, 33.0], [1191.0, 47.0], [1193.0, 38.0], [1197.0, 2614.0], [1199.0, 2554.0], [1209.0, 2562.0], [1205.0, 1303.0], [1203.0, 1806.0], [1183.0, 2637.0], [1155.0, 2346.0], [1153.0, 2425.0], [1157.0, 2099.5], [1163.0, 977.5], [1161.0, 2654.0], [1165.0, 2673.0], [1167.0, 2306.0], [1181.0, 2575.0], [1179.0, 2586.0], [1177.0, 2595.0], [1175.0, 34.0], [1173.0, 2653.0], [1225.0, 1804.0], [1219.0, 1429.5], [1221.0, 1729.0], [1223.0, 1589.2], [1229.0, 31.0], [1227.0, 877.0], [1265.0, 74.0], [1269.0, 1106.3333333333333], [1267.0, 35.0], [1271.0, 790.5], [1273.0, 1005.0], [1217.0, 1231.0], [1247.0, 1846.6], [1245.0, 2296.0], [1243.0, 1170.6666666666667], [1241.0, 1340.0], [1239.0, 32.5], [1237.0, 1711.0], [1235.0, 1889.75], [1233.0, 1803.0], [1279.0, 47.0], [1249.0, 1639.0], [1253.0, 1778.2], [1251.0, 38.0], [1255.0, 1874.0], [1257.0, 1984.0], [1259.0, 793.0], [1261.0, 2239.3333333333335], [1263.0, 38.0], [1277.0, 29.5], [1275.0, 2045.0], [1337.0, 107.0], [1333.0, 988.5], [1341.0, 161.2], [1325.0, 76.5], [1323.0, 32.5], [1321.0, 732.5], [1317.0, 53.0], [1313.0, 34.0], [1319.0, 971.5], [1327.0, 1685.0], [1343.0, 50.0], [1339.0, 41.0], [1335.0, 621.8], [1331.0, 1173.0], [1329.0, 34.0], [1295.0, 48.0], [1293.0, 905.5], [1287.0, 2154.0], [1285.0, 2132.0], [1283.0, 2136.0], [1281.0, 46.0], [1311.0, 1859.0], [1307.0, 1032.5], [1305.0, 1445.0], [1303.0, 1329.3333333333335], [1299.0, 2035.0], [1297.0, 1671.0], [1353.0, 569.3333333333333], [1355.0, 63.0], [1357.0, 534.5], [1359.0, 51.0], [1351.0, 632.5], [1349.0, 1340.5], [1347.0, 41.0], [1345.0, 852.5], [1.0, 4570.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}, {"data": [[737.2266666666665, 2595.7446666666674]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1359.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12350.0, "minX": 1.75559712E12, "maxY": 17825.0, "series": [{"data": [[1.75559712E12, 17825.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75559712E12, 12350.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559712E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2595.7446666666674, "minX": 1.75559712E12, "maxY": 2595.7446666666674, "series": [{"data": [[1.75559712E12, 2595.7446666666674]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559712E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2595.686000000001, "minX": 1.75559712E12, "maxY": 2595.686000000001, "series": [{"data": [[1.75559712E12, 2595.686000000001]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559712E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2473.4460000000004, "minX": 1.75559712E12, "maxY": 2473.4460000000004, "series": [{"data": [[1.75559712E12, 2473.4460000000004]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559712E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75559712E12, "maxY": 4783.0, "series": [{"data": [[1.75559712E12, 4783.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75559712E12, 4199.300000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75559712E12, 4621.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75559712E12, 4333.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75559712E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75559712E12, 2883.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559712E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 343.0, "minX": 43.0, "maxY": 4026.0, "series": [{"data": [[128.0, 4026.0], [294.0, 1663.5], [605.0, 3824.0], [43.0, 343.0], [430.0, 2483.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 605.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 336.0, "minX": 43.0, "maxY": 4026.0, "series": [{"data": [[128.0, 4026.0], [294.0, 1663.0], [605.0, 3824.0], [43.0, 336.0], [430.0, 2483.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 605.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75559712E12, "maxY": 25.0, "series": [{"data": [[1.75559712E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559712E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75559712E12, "maxY": 25.0, "series": [{"data": [[1.75559712E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559712E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75559712E12, "maxY": 25.0, "series": [{"data": [[1.75559712E12, 25.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559712E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75559712E12, "maxY": 25.0, "series": [{"data": [[1.75559712E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559712E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

