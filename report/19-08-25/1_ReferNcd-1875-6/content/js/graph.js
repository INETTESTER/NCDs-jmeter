/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 52.0, "minX": 0.0, "maxY": 10413.0, "series": [{"data": [[0.0, 52.0], [0.1, 97.0], [0.2, 114.0], [0.3, 124.0], [0.4, 135.0], [0.5, 140.0], [0.6, 148.0], [0.7, 171.0], [0.8, 177.0], [0.9, 184.0], [1.0, 202.0], [1.1, 212.0], [1.2, 217.0], [1.3, 222.0], [1.4, 237.0], [1.5, 241.0], [1.6, 263.0], [1.7, 275.0], [1.8, 280.0], [1.9, 283.0], [2.0, 287.0], [2.1, 292.0], [2.2, 305.0], [2.3, 317.0], [2.4, 319.0], [2.5, 327.0], [2.6, 330.0], [2.7, 338.0], [2.8, 340.0], [2.9, 346.0], [3.0, 353.0], [3.1, 363.0], [3.2, 373.0], [3.3, 398.0], [3.4, 418.0], [3.5, 453.0], [3.6, 471.0], [3.7, 493.0], [3.8, 530.0], [3.9, 556.0], [4.0, 574.0], [4.1, 581.0], [4.2, 622.0], [4.3, 629.0], [4.4, 640.0], [4.5, 651.0], [4.6, 693.0], [4.7, 715.0], [4.8, 760.0], [4.9, 762.0], [5.0, 766.0], [5.1, 784.0], [5.2, 817.0], [5.3, 852.0], [5.4, 896.0], [5.5, 929.0], [5.6, 940.0], [5.7, 956.0], [5.8, 973.0], [5.9, 988.0], [6.0, 1002.0], [6.1, 1007.0], [6.2, 1026.0], [6.3, 1047.0], [6.4, 1050.0], [6.5, 1060.0], [6.6, 1066.0], [6.7, 1069.0], [6.8, 1078.0], [6.9, 1080.0], [7.0, 1085.0], [7.1, 1088.0], [7.2, 1095.0], [7.3, 1106.0], [7.4, 1110.0], [7.5, 1117.0], [7.6, 1122.0], [7.7, 1125.0], [7.8, 1127.0], [7.9, 1136.0], [8.0, 1138.0], [8.1, 1143.0], [8.2, 1159.0], [8.3, 1160.0], [8.4, 1168.0], [8.5, 1179.0], [8.6, 1201.0], [8.7, 1208.0], [8.8, 1210.0], [8.9, 1214.0], [9.0, 1217.0], [9.1, 1222.0], [9.2, 1228.0], [9.3, 1232.0], [9.4, 1233.0], [9.5, 1236.0], [9.6, 1237.0], [9.7, 1246.0], [9.8, 1253.0], [9.9, 1258.0], [10.0, 1269.0], [10.1, 1273.0], [10.2, 1280.0], [10.3, 1293.0], [10.4, 1298.0], [10.5, 1311.0], [10.6, 1316.0], [10.7, 1328.0], [10.8, 1331.0], [10.9, 1347.0], [11.0, 1350.0], [11.1, 1355.0], [11.2, 1373.0], [11.3, 1375.0], [11.4, 1380.0], [11.5, 1387.0], [11.6, 1391.0], [11.7, 1397.0], [11.8, 1408.0], [11.9, 1409.0], [12.0, 1413.0], [12.1, 1421.0], [12.2, 1423.0], [12.3, 1433.0], [12.4, 1440.0], [12.5, 1448.0], [12.6, 1455.0], [12.7, 1465.0], [12.8, 1473.0], [12.9, 1476.0], [13.0, 1479.0], [13.1, 1517.0], [13.2, 1539.0], [13.3, 1567.0], [13.4, 1579.0], [13.5, 1585.0], [13.6, 1587.0], [13.7, 1595.0], [13.8, 1599.0], [13.9, 1622.0], [14.0, 1629.0], [14.1, 1630.0], [14.2, 1640.0], [14.3, 1648.0], [14.4, 1649.0], [14.5, 1650.0], [14.6, 1660.0], [14.7, 1662.0], [14.8, 1678.0], [14.9, 1683.0], [15.0, 1693.0], [15.1, 1695.0], [15.2, 1699.0], [15.3, 1705.0], [15.4, 1714.0], [15.5, 1724.0], [15.6, 1730.0], [15.7, 1745.0], [15.8, 1747.0], [15.9, 1756.0], [16.0, 1759.0], [16.1, 1759.0], [16.2, 1768.0], [16.3, 1777.0], [16.4, 1783.0], [16.5, 1817.0], [16.6, 1827.0], [16.7, 1836.0], [16.8, 1838.0], [16.9, 1841.0], [17.0, 1854.0], [17.1, 1862.0], [17.2, 1865.0], [17.3, 1877.0], [17.4, 1881.0], [17.5, 1890.0], [17.6, 1902.0], [17.7, 1903.0], [17.8, 1906.0], [17.9, 1913.0], [18.0, 1916.0], [18.1, 1921.0], [18.2, 1925.0], [18.3, 1931.0], [18.4, 1933.0], [18.5, 1936.0], [18.6, 1952.0], [18.7, 1961.0], [18.8, 1971.0], [18.9, 1982.0], [19.0, 2002.0], [19.1, 2004.0], [19.2, 2011.0], [19.3, 2019.0], [19.4, 2054.0], [19.5, 2079.0], [19.6, 2083.0], [19.7, 2118.0], [19.8, 2127.0], [19.9, 2134.0], [20.0, 2137.0], [20.1, 2153.0], [20.2, 2159.0], [20.3, 2179.0], [20.4, 2201.0], [20.5, 2219.0], [20.6, 2229.0], [20.7, 2239.0], [20.8, 2241.0], [20.9, 2251.0], [21.0, 2265.0], [21.1, 2268.0], [21.2, 2273.0], [21.3, 2288.0], [21.4, 2291.0], [21.5, 2296.0], [21.6, 2297.0], [21.7, 2309.0], [21.8, 2323.0], [21.9, 2340.0], [22.0, 2345.0], [22.1, 2355.0], [22.2, 2379.0], [22.3, 2395.0], [22.4, 2397.0], [22.5, 2406.0], [22.6, 2420.0], [22.7, 2428.0], [22.8, 2437.0], [22.9, 2446.0], [23.0, 2454.0], [23.1, 2468.0], [23.2, 2470.0], [23.3, 2479.0], [23.4, 2486.0], [23.5, 2510.0], [23.6, 2530.0], [23.7, 2544.0], [23.8, 2546.0], [23.9, 2550.0], [24.0, 2566.0], [24.1, 2574.0], [24.2, 2598.0], [24.3, 2603.0], [24.4, 2623.0], [24.5, 2647.0], [24.6, 2675.0], [24.7, 2742.0], [24.8, 2744.0], [24.9, 2751.0], [25.0, 2771.0], [25.1, 2785.0], [25.2, 2807.0], [25.3, 2868.0], [25.4, 2882.0], [25.5, 2967.0], [25.6, 2987.0], [25.7, 3001.0], [25.8, 3011.0], [25.9, 3024.0], [26.0, 3029.0], [26.1, 3034.0], [26.2, 3070.0], [26.3, 3074.0], [26.4, 3097.0], [26.5, 3159.0], [26.6, 3188.0], [26.7, 3195.0], [26.8, 3220.0], [26.9, 3281.0], [27.0, 3294.0], [27.1, 3333.0], [27.2, 3353.0], [27.3, 3358.0], [27.4, 3396.0], [27.5, 3407.0], [27.6, 3417.0], [27.7, 3433.0], [27.8, 3434.0], [27.9, 3457.0], [28.0, 3461.0], [28.1, 3465.0], [28.2, 3490.0], [28.3, 3495.0], [28.4, 3521.0], [28.5, 3528.0], [28.6, 3568.0], [28.7, 3576.0], [28.8, 3580.0], [28.9, 3606.0], [29.0, 3639.0], [29.1, 3643.0], [29.2, 3646.0], [29.3, 3660.0], [29.4, 3706.0], [29.5, 3724.0], [29.6, 3771.0], [29.7, 3790.0], [29.8, 3814.0], [29.9, 3823.0], [30.0, 3834.0], [30.1, 3867.0], [30.2, 3870.0], [30.3, 3893.0], [30.4, 3894.0], [30.5, 3925.0], [30.6, 3938.0], [30.7, 3949.0], [30.8, 3956.0], [30.9, 3982.0], [31.0, 3994.0], [31.1, 3999.0], [31.2, 3999.0], [31.3, 4024.0], [31.4, 4040.0], [31.5, 4048.0], [31.6, 4062.0], [31.7, 4077.0], [31.8, 4094.0], [31.9, 4097.0], [32.0, 4099.0], [32.1, 4103.0], [32.2, 4112.0], [32.3, 4119.0], [32.4, 4124.0], [32.5, 4128.0], [32.6, 4129.0], [32.7, 4133.0], [32.8, 4142.0], [32.9, 4154.0], [33.0, 4156.0], [33.1, 4165.0], [33.2, 4179.0], [33.3, 4190.0], [33.4, 4197.0], [33.5, 4206.0], [33.6, 4210.0], [33.7, 4216.0], [33.8, 4223.0], [33.9, 4235.0], [34.0, 4241.0], [34.1, 4252.0], [34.2, 4259.0], [34.3, 4266.0], [34.4, 4268.0], [34.5, 4271.0], [34.6, 4278.0], [34.7, 4280.0], [34.8, 4293.0], [34.9, 4295.0], [35.0, 4300.0], [35.1, 4304.0], [35.2, 4306.0], [35.3, 4307.0], [35.4, 4309.0], [35.5, 4312.0], [35.6, 4314.0], [35.7, 4320.0], [35.8, 4331.0], [35.9, 4336.0], [36.0, 4338.0], [36.1, 4347.0], [36.2, 4362.0], [36.3, 4365.0], [36.4, 4375.0], [36.5, 4386.0], [36.6, 4391.0], [36.7, 4408.0], [36.8, 4409.0], [36.9, 4413.0], [37.0, 4415.0], [37.1, 4418.0], [37.2, 4420.0], [37.3, 4433.0], [37.4, 4437.0], [37.5, 4443.0], [37.6, 4446.0], [37.7, 4454.0], [37.8, 4456.0], [37.9, 4460.0], [38.0, 4467.0], [38.1, 4470.0], [38.2, 4472.0], [38.3, 4473.0], [38.4, 4473.0], [38.5, 4476.0], [38.6, 4481.0], [38.7, 4485.0], [38.8, 4487.0], [38.9, 4496.0], [39.0, 4497.0], [39.1, 4501.0], [39.2, 4503.0], [39.3, 4504.0], [39.4, 4506.0], [39.5, 4511.0], [39.6, 4513.0], [39.7, 4515.0], [39.8, 4519.0], [39.9, 4522.0], [40.0, 4524.0], [40.1, 4527.0], [40.2, 4530.0], [40.3, 4533.0], [40.4, 4538.0], [40.5, 4539.0], [40.6, 4544.0], [40.7, 4546.0], [40.8, 4546.0], [40.9, 4547.0], [41.0, 4551.0], [41.1, 4557.0], [41.2, 4561.0], [41.3, 4564.0], [41.4, 4570.0], [41.5, 4573.0], [41.6, 4576.0], [41.7, 4581.0], [41.8, 4584.0], [41.9, 4591.0], [42.0, 4593.0], [42.1, 4599.0], [42.2, 4603.0], [42.3, 4614.0], [42.4, 4617.0], [42.5, 4630.0], [42.6, 4632.0], [42.7, 4637.0], [42.8, 4643.0], [42.9, 4650.0], [43.0, 4654.0], [43.1, 4657.0], [43.2, 4657.0], [43.3, 4659.0], [43.4, 4671.0], [43.5, 4674.0], [43.6, 4675.0], [43.7, 4684.0], [43.8, 4685.0], [43.9, 4690.0], [44.0, 4700.0], [44.1, 4704.0], [44.2, 4708.0], [44.3, 4713.0], [44.4, 4715.0], [44.5, 4720.0], [44.6, 4722.0], [44.7, 4723.0], [44.8, 4724.0], [44.9, 4725.0], [45.0, 4727.0], [45.1, 4740.0], [45.2, 4748.0], [45.3, 4752.0], [45.4, 4754.0], [45.5, 4758.0], [45.6, 4759.0], [45.7, 4763.0], [45.8, 4773.0], [45.9, 4788.0], [46.0, 4791.0], [46.1, 4799.0], [46.2, 4804.0], [46.3, 4808.0], [46.4, 4819.0], [46.5, 4823.0], [46.6, 4832.0], [46.7, 4836.0], [46.8, 4843.0], [46.9, 4845.0], [47.0, 4847.0], [47.1, 4856.0], [47.2, 4860.0], [47.3, 4862.0], [47.4, 4866.0], [47.5, 4869.0], [47.6, 4871.0], [47.7, 4874.0], [47.8, 4884.0], [47.9, 4894.0], [48.0, 4895.0], [48.1, 4897.0], [48.2, 4902.0], [48.3, 4910.0], [48.4, 4915.0], [48.5, 4917.0], [48.6, 4921.0], [48.7, 4925.0], [48.8, 4928.0], [48.9, 4933.0], [49.0, 4934.0], [49.1, 4938.0], [49.2, 4941.0], [49.3, 4944.0], [49.4, 4951.0], [49.5, 4958.0], [49.6, 4963.0], [49.7, 4970.0], [49.8, 4973.0], [49.9, 4977.0], [50.0, 4980.0], [50.1, 4980.0], [50.2, 4990.0], [50.3, 4991.0], [50.4, 4994.0], [50.5, 4996.0], [50.6, 5006.0], [50.7, 5010.0], [50.8, 5023.0], [50.9, 5023.0], [51.0, 5026.0], [51.1, 5031.0], [51.2, 5034.0], [51.3, 5040.0], [51.4, 5049.0], [51.5, 5050.0], [51.6, 5062.0], [51.7, 5069.0], [51.8, 5077.0], [51.9, 5091.0], [52.0, 5094.0], [52.1, 5106.0], [52.2, 5117.0], [52.3, 5132.0], [52.4, 5142.0], [52.5, 5175.0], [52.6, 5184.0], [52.7, 5190.0], [52.8, 5191.0], [52.9, 5210.0], [53.0, 5243.0], [53.1, 5249.0], [53.2, 5257.0], [53.3, 5261.0], [53.4, 5265.0], [53.5, 5281.0], [53.6, 5296.0], [53.7, 5336.0], [53.8, 5357.0], [53.9, 5372.0], [54.0, 5398.0], [54.1, 5422.0], [54.2, 5441.0], [54.3, 5469.0], [54.4, 5470.0], [54.5, 5518.0], [54.6, 5636.0], [54.7, 5649.0], [54.8, 5737.0], [54.9, 5781.0], [55.0, 5810.0], [55.1, 5815.0], [55.2, 5816.0], [55.3, 5864.0], [55.4, 5892.0], [55.5, 5913.0], [55.6, 5931.0], [55.7, 5953.0], [55.8, 5980.0], [55.9, 6013.0], [56.0, 6032.0], [56.1, 6056.0], [56.2, 6101.0], [56.3, 6117.0], [56.4, 6135.0], [56.5, 6158.0], [56.6, 6180.0], [56.7, 6195.0], [56.8, 6289.0], [56.9, 6363.0], [57.0, 6404.0], [57.1, 6445.0], [57.2, 6479.0], [57.3, 6501.0], [57.4, 6517.0], [57.5, 6540.0], [57.6, 6594.0], [57.7, 6639.0], [57.8, 6652.0], [57.9, 6701.0], [58.0, 6749.0], [58.1, 6759.0], [58.2, 6763.0], [58.3, 6803.0], [58.4, 6819.0], [58.5, 6861.0], [58.6, 6882.0], [58.7, 6900.0], [58.8, 6913.0], [58.9, 6942.0], [59.0, 6962.0], [59.1, 6976.0], [59.2, 6979.0], [59.3, 7004.0], [59.4, 7005.0], [59.5, 7008.0], [59.6, 7027.0], [59.7, 7053.0], [59.8, 7066.0], [59.9, 7078.0], [60.0, 7083.0], [60.1, 7104.0], [60.2, 7114.0], [60.3, 7157.0], [60.4, 7201.0], [60.5, 7211.0], [60.6, 7244.0], [60.7, 7251.0], [60.8, 7274.0], [60.9, 7312.0], [61.0, 7333.0], [61.1, 7342.0], [61.2, 7345.0], [61.3, 7360.0], [61.4, 7385.0], [61.5, 7389.0], [61.6, 7446.0], [61.7, 7457.0], [61.8, 7478.0], [61.9, 7507.0], [62.0, 7521.0], [62.1, 7541.0], [62.2, 7548.0], [62.3, 7562.0], [62.4, 7590.0], [62.5, 7597.0], [62.6, 7599.0], [62.7, 7612.0], [62.8, 7621.0], [62.9, 7630.0], [63.0, 7634.0], [63.1, 7654.0], [63.2, 7656.0], [63.3, 7656.0], [63.4, 7666.0], [63.5, 7675.0], [63.6, 7691.0], [63.7, 7702.0], [63.8, 7720.0], [63.9, 7762.0], [64.0, 7768.0], [64.1, 7791.0], [64.2, 7793.0], [64.3, 7807.0], [64.4, 7827.0], [64.5, 7833.0], [64.6, 7851.0], [64.7, 7893.0], [64.8, 7907.0], [64.9, 7915.0], [65.0, 7941.0], [65.1, 7966.0], [65.2, 7987.0], [65.3, 7989.0], [65.4, 7997.0], [65.5, 8007.0], [65.6, 8013.0], [65.7, 8038.0], [65.8, 8040.0], [65.9, 8065.0], [66.0, 8070.0], [66.1, 8081.0], [66.2, 8099.0], [66.3, 8103.0], [66.4, 8103.0], [66.5, 8120.0], [66.6, 8141.0], [66.7, 8155.0], [66.8, 8170.0], [66.9, 8192.0], [67.0, 8198.0], [67.1, 8227.0], [67.2, 8238.0], [67.3, 8250.0], [67.4, 8252.0], [67.5, 8263.0], [67.6, 8277.0], [67.7, 8291.0], [67.8, 8293.0], [67.9, 8311.0], [68.0, 8319.0], [68.1, 8330.0], [68.2, 8338.0], [68.3, 8359.0], [68.4, 8370.0], [68.5, 8382.0], [68.6, 8393.0], [68.7, 8403.0], [68.8, 8406.0], [68.9, 8415.0], [69.0, 8419.0], [69.1, 8420.0], [69.2, 8425.0], [69.3, 8433.0], [69.4, 8440.0], [69.5, 8453.0], [69.6, 8458.0], [69.7, 8460.0], [69.8, 8469.0], [69.9, 8491.0], [70.0, 8506.0], [70.1, 8510.0], [70.2, 8523.0], [70.3, 8532.0], [70.4, 8537.0], [70.5, 8558.0], [70.6, 8564.0], [70.7, 8567.0], [70.8, 8568.0], [70.9, 8579.0], [71.0, 8586.0], [71.1, 8614.0], [71.2, 8626.0], [71.3, 8631.0], [71.4, 8639.0], [71.5, 8642.0], [71.6, 8649.0], [71.7, 8666.0], [71.8, 8668.0], [71.9, 8676.0], [72.0, 8678.0], [72.1, 8684.0], [72.2, 8693.0], [72.3, 8700.0], [72.4, 8709.0], [72.5, 8712.0], [72.6, 8716.0], [72.7, 8725.0], [72.8, 8736.0], [72.9, 8741.0], [73.0, 8748.0], [73.1, 8751.0], [73.2, 8754.0], [73.3, 8759.0], [73.4, 8760.0], [73.5, 8763.0], [73.6, 8763.0], [73.7, 8771.0], [73.8, 8776.0], [73.9, 8779.0], [74.0, 8797.0], [74.1, 8799.0], [74.2, 8803.0], [74.3, 8808.0], [74.4, 8809.0], [74.5, 8815.0], [74.6, 8823.0], [74.7, 8824.0], [74.8, 8835.0], [74.9, 8848.0], [75.0, 8861.0], [75.1, 8866.0], [75.2, 8866.0], [75.3, 8881.0], [75.4, 8893.0], [75.5, 8900.0], [75.6, 8912.0], [75.7, 8915.0], [75.8, 8921.0], [75.9, 8927.0], [76.0, 8930.0], [76.1, 8931.0], [76.2, 8939.0], [76.3, 8940.0], [76.4, 8941.0], [76.5, 8945.0], [76.6, 8963.0], [76.7, 8965.0], [76.8, 8976.0], [76.9, 8980.0], [77.0, 8994.0], [77.1, 9003.0], [77.2, 9005.0], [77.3, 9017.0], [77.4, 9027.0], [77.5, 9030.0], [77.6, 9035.0], [77.7, 9038.0], [77.8, 9047.0], [77.9, 9052.0], [78.0, 9055.0], [78.1, 9062.0], [78.2, 9064.0], [78.3, 9078.0], [78.4, 9079.0], [78.5, 9081.0], [78.6, 9086.0], [78.7, 9089.0], [78.8, 9100.0], [78.9, 9110.0], [79.0, 9114.0], [79.1, 9125.0], [79.2, 9130.0], [79.3, 9151.0], [79.4, 9158.0], [79.5, 9166.0], [79.6, 9170.0], [79.7, 9176.0], [79.8, 9182.0], [79.9, 9189.0], [80.0, 9191.0], [80.1, 9192.0], [80.2, 9195.0], [80.3, 9202.0], [80.4, 9206.0], [80.5, 9211.0], [80.6, 9223.0], [80.7, 9226.0], [80.8, 9230.0], [80.9, 9232.0], [81.0, 9233.0], [81.1, 9240.0], [81.2, 9247.0], [81.3, 9252.0], [81.4, 9257.0], [81.5, 9260.0], [81.6, 9261.0], [81.7, 9263.0], [81.8, 9267.0], [81.9, 9272.0], [82.0, 9279.0], [82.1, 9281.0], [82.2, 9284.0], [82.3, 9302.0], [82.4, 9308.0], [82.5, 9309.0], [82.6, 9311.0], [82.7, 9312.0], [82.8, 9312.0], [82.9, 9319.0], [83.0, 9320.0], [83.1, 9329.0], [83.2, 9334.0], [83.3, 9336.0], [83.4, 9336.0], [83.5, 9339.0], [83.6, 9341.0], [83.7, 9343.0], [83.8, 9352.0], [83.9, 9363.0], [84.0, 9365.0], [84.1, 9369.0], [84.2, 9376.0], [84.3, 9380.0], [84.4, 9388.0], [84.5, 9390.0], [84.6, 9393.0], [84.7, 9399.0], [84.8, 9402.0], [84.9, 9403.0], [85.0, 9404.0], [85.1, 9407.0], [85.2, 9409.0], [85.3, 9411.0], [85.4, 9415.0], [85.5, 9418.0], [85.6, 9421.0], [85.7, 9421.0], [85.8, 9422.0], [85.9, 9424.0], [86.0, 9430.0], [86.1, 9432.0], [86.2, 9437.0], [86.3, 9438.0], [86.4, 9444.0], [86.5, 9446.0], [86.6, 9453.0], [86.7, 9460.0], [86.8, 9462.0], [86.9, 9463.0], [87.0, 9467.0], [87.1, 9469.0], [87.2, 9470.0], [87.3, 9471.0], [87.4, 9475.0], [87.5, 9476.0], [87.6, 9479.0], [87.7, 9489.0], [87.8, 9494.0], [87.9, 9495.0], [88.0, 9496.0], [88.1, 9502.0], [88.2, 9502.0], [88.3, 9503.0], [88.4, 9507.0], [88.5, 9513.0], [88.6, 9515.0], [88.7, 9517.0], [88.8, 9522.0], [88.9, 9522.0], [89.0, 9524.0], [89.1, 9525.0], [89.2, 9527.0], [89.3, 9534.0], [89.4, 9535.0], [89.5, 9539.0], [89.6, 9544.0], [89.7, 9545.0], [89.8, 9551.0], [89.9, 9552.0], [90.0, 9556.0], [90.1, 9557.0], [90.2, 9558.0], [90.3, 9559.0], [90.4, 9567.0], [90.5, 9567.0], [90.6, 9570.0], [90.7, 9571.0], [90.8, 9575.0], [90.9, 9581.0], [91.0, 9582.0], [91.1, 9586.0], [91.2, 9589.0], [91.3, 9595.0], [91.4, 9598.0], [91.5, 9600.0], [91.6, 9602.0], [91.7, 9610.0], [91.8, 9611.0], [91.9, 9614.0], [92.0, 9619.0], [92.1, 9620.0], [92.2, 9632.0], [92.3, 9632.0], [92.4, 9632.0], [92.5, 9633.0], [92.6, 9643.0], [92.7, 9644.0], [92.8, 9644.0], [92.9, 9650.0], [93.0, 9655.0], [93.1, 9659.0], [93.2, 9661.0], [93.3, 9664.0], [93.4, 9675.0], [93.5, 9681.0], [93.6, 9684.0], [93.7, 9684.0], [93.8, 9690.0], [93.9, 9692.0], [94.0, 9705.0], [94.1, 9706.0], [94.2, 9710.0], [94.3, 9715.0], [94.4, 9718.0], [94.5, 9721.0], [94.6, 9725.0], [94.7, 9729.0], [94.8, 9732.0], [94.9, 9732.0], [95.0, 9737.0], [95.1, 9747.0], [95.2, 9754.0], [95.3, 9758.0], [95.4, 9761.0], [95.5, 9765.0], [95.6, 9783.0], [95.7, 9787.0], [95.8, 9790.0], [95.9, 9798.0], [96.0, 9804.0], [96.1, 9805.0], [96.2, 9807.0], [96.3, 9810.0], [96.4, 9814.0], [96.5, 9827.0], [96.6, 9834.0], [96.7, 9836.0], [96.8, 9839.0], [96.9, 9839.0], [97.0, 9840.0], [97.1, 9842.0], [97.2, 9850.0], [97.3, 9860.0], [97.4, 9869.0], [97.5, 9870.0], [97.6, 9885.0], [97.7, 9887.0], [97.8, 9888.0], [97.9, 9897.0], [98.0, 9900.0], [98.1, 9904.0], [98.2, 9909.0], [98.3, 9927.0], [98.4, 9932.0], [98.5, 9940.0], [98.6, 9949.0], [98.7, 9980.0], [98.8, 10003.0], [98.9, 10015.0], [99.0, 10016.0], [99.1, 10030.0], [99.2, 10047.0], [99.3, 10056.0], [99.4, 10086.0], [99.5, 10099.0], [99.6, 10140.0], [99.7, 10214.0], [99.8, 10294.0], [99.9, 10382.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 63.0, "series": [{"data": [[0.0, 2.0], [100.0, 16.0], [200.0, 22.0], [300.0, 22.0], [400.0, 8.0], [500.0, 7.0], [600.0, 11.0], [700.0, 9.0], [800.0, 5.0], [900.0, 10.0], [1000.0, 23.0], [1100.0, 25.0], [1200.0, 36.0], [1300.0, 25.0], [1400.0, 24.0], [1500.0, 14.0], [1600.0, 27.0], [1700.0, 23.0], [1800.0, 21.0], [1900.0, 25.0], [2000.0, 13.0], [2100.0, 14.0], [2200.0, 23.0], [2300.0, 15.0], [2400.0, 20.0], [2500.0, 14.0], [2600.0, 8.0], [2700.0, 10.0], [2800.0, 5.0], [2900.0, 4.0], [3000.0, 14.0], [3100.0, 6.0], [3200.0, 6.0], [3300.0, 7.0], [3400.0, 17.0], [3500.0, 10.0], [3600.0, 10.0], [3700.0, 7.0], [3800.0, 12.0], [3900.0, 15.0], [4000.0, 16.0], [4100.0, 26.0], [4200.0, 29.0], [4300.0, 31.0], [4400.0, 45.0], [4500.0, 58.0], [4600.0, 34.0], [4700.0, 41.0], [4800.0, 37.0], [4900.0, 45.0], [5000.0, 28.0], [5100.0, 15.0], [5200.0, 15.0], [5300.0, 8.0], [5600.0, 4.0], [5400.0, 8.0], [5500.0, 2.0], [5700.0, 4.0], [5800.0, 9.0], [5900.0, 8.0], [6000.0, 5.0], [6100.0, 11.0], [6200.0, 1.0], [6300.0, 3.0], [6400.0, 6.0], [6500.0, 6.0], [6600.0, 5.0], [6700.0, 8.0], [6800.0, 7.0], [6900.0, 11.0], [7000.0, 15.0], [7100.0, 6.0], [7200.0, 9.0], [7300.0, 13.0], [7400.0, 6.0], [7600.0, 19.0], [7500.0, 14.0], [7700.0, 11.0], [7800.0, 10.0], [7900.0, 13.0], [8000.0, 15.0], [8100.0, 15.0], [8200.0, 16.0], [8300.0, 15.0], [8400.0, 24.0], [8700.0, 35.0], [8500.0, 21.0], [8600.0, 22.0], [8800.0, 24.0], [9000.0, 32.0], [8900.0, 31.0], [9100.0, 28.0], [9200.0, 37.0], [9300.0, 47.0], [9400.0, 62.0], [9600.0, 47.0], [9500.0, 63.0], [9700.0, 38.0], [9800.0, 38.0], [10000.0, 14.0], [9900.0, 15.0], [10100.0, 3.0], [10200.0, 3.0], [10400.0, 1.0], [10300.0, 2.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 70.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1630.0, "series": [{"data": [[0.0, 70.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 175.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1630.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 906.6223999999996, "minX": 1.75557834E12, "maxY": 906.6223999999996, "series": [{"data": [[1.75557834E12, 906.6223999999996]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557834E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 191.5, "minX": 1.0, "maxY": 10382.0, "series": [{"data": [[2.0, 9761.0], [4.0, 7712.0], [5.0, 9003.0], [7.0, 9623.5], [8.0, 8980.0], [9.0, 9005.0], [10.0, 8964.0], [11.0, 5077.0], [12.0, 8963.0], [16.0, 8867.75], [19.0, 10382.0], [21.0, 9165.333333333334], [22.0, 8367.0], [23.0, 10015.0], [24.0, 8941.0], [25.0, 9737.0], [26.0, 8941.0], [27.0, 9940.0], [28.0, 9943.0], [30.0, 9266.0], [32.0, 8873.5], [35.0, 8905.0], [34.0, 8790.0], [37.0, 9927.0], [36.0, 7590.0], [41.0, 9716.0], [40.0, 6171.0], [43.0, 7941.0], [42.0, 6959.0], [44.0, 9254.0], [47.0, 9585.0], [46.0, 9575.0], [49.0, 9887.0], [48.0, 9870.0], [51.0, 9571.0], [50.0, 8808.0], [52.0, 9868.0], [55.0, 7591.0], [57.0, 10013.0], [59.0, 10035.0], [61.0, 8866.0], [60.0, 7407.0], [63.0, 9842.5], [67.0, 9710.5], [65.0, 8866.0], [64.0, 8861.0], [71.0, 8824.0], [70.0, 9981.0], [68.0, 9552.0], [75.0, 9202.0], [74.0, 8804.0], [73.0, 8835.0], [72.0, 7091.0], [78.0, 9316.5], [76.0, 8777.0], [83.0, 9837.0], [82.0, 4991.0], [81.0, 8748.0], [80.0, 8749.5], [87.0, 7446.0], [85.0, 9523.0], [84.0, 8759.0], [91.0, 8771.0], [90.0, 9684.0], [89.0, 9522.0], [88.0, 8872.0], [95.0, 9407.666666666666], [93.0, 9810.0], [97.0, 8463.5], [103.0, 9804.0], [102.0, 9280.5], [100.0, 9478.0], [105.0, 9303.5], [111.0, 9869.0], [110.0, 9661.0], [109.0, 9789.0], [108.0, 9449.333333333334], [115.0, 9796.5], [114.0, 7360.0], [112.0, 8712.0], [119.0, 5094.0], [117.0, 9109.0], [122.0, 8151.5], [120.0, 9213.0], [127.0, 10214.0], [126.0, 9473.0], [125.0, 9840.0], [124.0, 8777.5], [134.0, 6922.5], [132.0, 9839.0], [131.0, 9463.0], [129.0, 9514.0], [143.0, 9545.0], [142.0, 4799.0], [141.0, 10016.0], [140.0, 7518.0], [139.0, 9470.0], [138.0, 9622.0], [137.0, 9476.0], [136.0, 8813.0], [150.0, 7312.0], [149.0, 9462.0], [148.0, 7749.5], [146.0, 9904.0], [145.0, 7748.0], [144.0, 9556.0], [159.0, 9653.0], [157.0, 9729.0], [156.0, 9423.0], [155.0, 9847.5], [153.0, 9890.0], [152.0, 7217.5], [167.0, 9502.0], [166.0, 9905.0], [165.0, 6422.666666666667], [162.0, 7137.5], [160.0, 9980.0], [175.0, 9080.0], [173.0, 9721.0], [172.0, 9140.0], [170.0, 6716.5], [168.0, 9725.0], [183.0, 4860.0], [182.0, 9416.0], [181.0, 9582.666666666666], [179.0, 4722.0], [177.0, 9763.0], [176.0, 10262.0], [191.0, 9932.0], [189.0, 9842.0], [187.0, 7492.0], [185.0, 4617.0], [184.0, 9404.0], [199.0, 6763.0], [198.0, 9534.0], [197.0, 9900.0], [196.0, 9674.0], [194.0, 8626.0], [193.0, 8676.0], [192.0, 9575.666666666666], [207.0, 9049.0], [206.0, 7015.5], [204.0, 4836.0], [203.0, 5263.0], [202.0, 5249.0], [201.0, 10016.0], [200.0, 9834.0], [215.0, 8586.0], [214.0, 9580.0], [212.0, 7989.0], [208.0, 5261.0], [222.0, 10030.0], [221.0, 9726.0], [220.0, 5737.0], [219.0, 7384.0], [218.0, 9515.0], [217.0, 8992.0], [231.0, 7250.333333333333], [228.0, 9644.666666666666], [225.0, 10003.0], [224.0, 9731.0], [239.0, 9650.0], [238.0, 9503.0], [237.0, 9888.0], [236.0, 9490.0], [235.0, 4856.0], [234.0, 9027.0], [233.0, 9732.0], [232.0, 6673.0], [247.0, 4788.0], [246.0, 9706.0], [245.0, 6665.5], [243.0, 9642.333333333334], [241.0, 9652.0], [254.0, 9850.0], [253.0, 8310.0], [250.0, 9710.0], [248.0, 9852.0], [269.0, 9308.0], [270.0, 5486.0], [268.0, 5649.0], [259.0, 10140.0], [258.0, 9209.0], [256.0, 7029.0], [267.0, 9860.0], [266.0, 9710.0], [265.0, 9495.0], [264.0, 9596.0], [263.0, 10091.0], [262.0, 8922.0], [286.0, 9601.0], [285.0, 9532.0], [282.0, 4721.0], [281.0, 8430.5], [279.0, 9647.0], [277.0, 9681.0], [276.0, 7126.25], [272.0, 8534.5], [302.0, 9069.0], [303.0, 8931.0], [301.0, 9643.0], [290.0, 8521.0], [289.0, 9724.5], [288.0, 4956.0], [299.0, 4667.0], [298.0, 7174.0], [296.0, 5117.0], [295.0, 10112.0], [294.0, 9827.0], [293.0, 9341.0], [292.0, 7101.5], [318.0, 9409.0], [319.0, 10099.0], [317.0, 7181.0], [316.0, 7276.0], [315.0, 8558.0], [313.0, 5101.0], [312.0, 9261.5], [311.0, 9671.0], [307.0, 9808.0], [306.0, 4487.0], [305.0, 9644.0], [304.0, 8928.0], [308.0, 9582.0], [323.0, 4554.0], [334.0, 9782.0], [332.0, 9611.0], [331.0, 4843.0], [330.0, 9721.0], [329.0, 8538.5], [327.0, 7551.666666666667], [324.0, 6635.0], [322.0, 6994.5], [320.0, 9643.0], [339.0, 4576.0], [350.0, 5396.5], [351.0, 9663.0], [348.0, 9660.5], [338.0, 6969.0], [337.0, 9610.0], [336.0, 9507.0], [347.0, 4538.0], [345.0, 7009.5], [343.0, 9733.0], [342.0, 9503.0], [341.0, 10086.0], [340.0, 9581.0], [365.0, 9496.0], [366.0, 8425.0], [364.0, 7840.333333333333], [360.0, 9754.0], [359.0, 9478.0], [358.0, 6888.5], [356.0, 7312.0], [354.0, 9198.0], [353.0, 9521.5], [382.0, 9664.0], [383.0, 5091.0], [381.0, 5210.0], [380.0, 8440.0], [379.0, 9552.0], [378.0, 7251.0], [377.0, 4456.0], [376.0, 9639.0], [375.0, 8411.0], [368.0, 9339.0], [371.0, 7152.5], [369.0, 9814.0], [374.0, 9675.0], [373.0, 9494.0], [372.0, 9247.0], [397.0, 9471.0], [395.0, 8709.333333333334], [394.0, 9544.0], [393.0, 9247.0], [392.0, 9568.0], [388.0, 9524.666666666666], [384.0, 8420.0], [414.0, 8415.0], [413.0, 9667.75], [410.0, 9585.5], [409.0, 9632.0], [408.0, 8564.0], [406.0, 4576.0], [404.0, 9633.0], [402.0, 9177.0], [401.0, 6769.75], [429.0, 5010.0], [430.0, 9409.0], [428.0, 4994.0], [427.0, 5422.0], [426.0, 8366.0], [425.0, 9511.0], [424.0, 7522.666666666667], [421.0, 9034.333333333334], [417.0, 9240.0], [416.0, 4962.5], [418.0, 6540.0], [435.0, 9418.0], [444.0, 9538.5], [442.0, 9402.5], [440.0, 9502.0], [439.0, 9260.0], [438.0, 4407.0], [437.0, 6985.5], [434.0, 4504.0], [433.0, 9404.0], [432.0, 6925.5], [461.0, 9463.0], [462.0, 9600.0], [460.0, 9393.0], [450.0, 9598.0], [448.0, 9236.5], [459.0, 9100.0], [458.0, 8338.0], [457.0, 8176.5], [455.0, 8492.5], [453.0, 8013.666666666667], [452.0, 9479.0], [477.0, 9430.0], [478.0, 9489.0], [476.0, 9364.0], [466.0, 4944.0], [465.0, 7199.5], [464.0, 8330.0], [475.0, 4375.0], [474.0, 4504.0], [473.0, 9431.0], [472.0, 5109.0], [471.0, 4544.0], [470.0, 9566.0], [469.0, 6841.5], [468.0, 9539.0], [494.0, 9176.0], [495.0, 4391.0], [493.0, 4331.0], [492.0, 8269.0], [491.0, 9354.5], [489.0, 9567.0], [488.0, 9045.0], [485.0, 9363.0], [483.0, 9309.0], [482.0, 4361.0], [481.0, 9428.0], [480.0, 4743.0], [484.0, 9175.0], [499.0, 9581.0], [510.0, 9250.5], [511.0, 5040.0], [508.0, 7109.0], [506.0, 7152.5], [504.0, 9887.0], [503.0, 9352.0], [502.0, 9740.0], [501.0, 7074.5], [498.0, 4628.5], [496.0, 9558.0], [536.0, 9558.0], [540.0, 4271.0], [542.0, 9401.0], [539.0, 5457.0], [538.0, 9369.0], [537.0, 9377.0], [527.0, 9466.0], [513.0, 5265.0], [512.0, 9334.0], [515.0, 9309.0], [514.0, 4306.0], [517.0, 9302.0], [516.0, 4437.0], [519.0, 9052.0], [518.0, 9513.0], [526.0, 8238.0], [525.0, 8239.0], [524.0, 9488.0], [522.0, 6069.666666666667], [535.0, 7428.0], [531.0, 4460.0], [530.0, 9480.5], [528.0, 9462.0], [574.0, 9367.0], [575.0, 4476.0], [561.0, 9336.0], [560.0, 5986.0], [572.0, 4869.0], [571.0, 4723.0], [570.0, 9474.0], [568.0, 7100.5], [559.0, 9354.0], [546.0, 9440.0], [545.0, 6997.333333333333], [549.0, 7138.5], [547.0, 9302.0], [558.0, 4312.0], [557.0, 7678.5], [555.0, 9003.0], [554.0, 4303.0], [553.0, 9496.0], [552.0, 7721.333333333333], [567.0, 4470.0], [565.0, 4473.0], [564.0, 9265.0], [563.0, 6772.5], [601.0, 4728.0], [606.0, 9409.0], [607.0, 4630.0], [593.0, 4223.0], [592.0, 9336.0], [597.0, 9614.0], [596.0, 7695.666666666667], [605.0, 9438.0], [604.0, 6824.5], [602.0, 4808.0], [600.0, 4866.0], [583.0, 9453.0], [582.0, 4155.0], [581.0, 4727.0], [580.0, 4970.0], [579.0, 7153.5], [577.0, 9329.0], [576.0, 9407.0], [591.0, 4630.5], [590.0, 4836.0], [588.0, 4600.5], [586.0, 9058.0], [585.0, 4941.0], [584.0, 9475.0], [599.0, 4910.0], [598.0, 9180.0], [627.0, 7000.0], [637.0, 9258.0], [638.0, 9365.0], [625.0, 9226.0], [624.0, 9412.0], [636.0, 7730.333333333333], [634.0, 9233.0], [632.0, 5069.0], [615.0, 4980.0], [614.0, 6333.333333333333], [611.0, 9396.333333333334], [608.0, 4708.0], [623.0, 5518.0], [622.0, 5013.0], [621.0, 7081.5], [619.0, 5068.0], [618.0, 9325.5], [616.0, 5071.0], [631.0, 4535.0], [630.0, 4744.0], [629.0, 9222.0], [665.0, 9152.0], [670.0, 8892.0], [671.0, 5184.0], [659.0, 7044.0], [661.0, 9243.0], [660.0, 9055.0], [669.0, 9311.5], [667.0, 5034.0], [666.0, 9319.0], [664.0, 4845.0], [647.0, 9189.0], [646.0, 9315.0], [645.0, 9284.5], [643.0, 4933.0], [642.0, 4860.0], [641.0, 5031.0], [640.0, 6854.0], [655.0, 4933.0], [654.0, 9182.0], [653.0, 4754.0], [652.0, 4473.0], [651.0, 4307.0], [650.0, 8965.0], [649.0, 5259.0], [648.0, 9232.0], [663.0, 4991.0], [662.0, 9330.0], [697.0, 4901.0], [701.0, 4915.0], [703.0, 6519.0], [689.0, 4501.0], [688.0, 5311.0], [692.0, 7065.0], [690.0, 4905.0], [700.0, 4539.0], [699.0, 9110.0], [698.0, 9230.0], [696.0, 4603.0], [679.0, 4675.0], [678.0, 9191.0], [677.0, 4656.0], [676.0, 5039.0], [675.0, 9098.0], [674.0, 9283.0], [673.0, 9130.0], [672.0, 9272.0], [687.0, 9229.0], [686.0, 6920.5], [684.0, 4240.0], [683.0, 6704.0], [681.0, 9030.0], [680.0, 9284.0], [695.0, 6934.0], [693.0, 9205.0], [730.0, 4600.0], [734.0, 4758.0], [735.0, 9186.0], [720.0, 4715.0], [723.0, 9193.0], [722.0, 9103.0], [725.0, 4963.0], [724.0, 4413.0], [733.0, 8759.0], [732.0, 5131.0], [731.0, 9191.0], [729.0, 5019.5], [711.0, 4505.0], [710.0, 4218.0], [709.0, 9168.0], [708.0, 4727.5], [705.0, 4546.0], [704.0, 9170.0], [719.0, 5175.0], [718.0, 4847.0], [717.0, 9047.0], [716.0, 8900.0], [715.0, 8915.0], [714.0, 5179.0], [713.0, 4713.0], [712.0, 4980.0], [727.0, 9078.0], [726.0, 9129.0], [762.0, 4917.0], [766.0, 9079.0], [767.0, 4481.0], [752.0, 4408.0], [755.0, 9089.0], [754.0, 6851.5], [757.0, 4987.0], [756.0, 4457.0], [765.0, 4819.0], [764.0, 9088.0], [763.0, 4948.0], [761.0, 9053.0], [743.0, 8976.0], [742.0, 8736.0], [741.0, 9003.0], [740.0, 9064.0], [739.0, 4871.0], [738.0, 8885.5], [736.0, 4591.0], [751.0, 4417.0], [750.0, 4599.0], [749.0, 8941.0], [748.0, 9081.0], [747.0, 9114.0], [746.0, 4511.0], [745.0, 4790.0], [744.0, 4869.0], [759.0, 9081.0], [758.0, 8922.0], [793.0, 6695.0], [798.0, 4864.5], [799.0, 8803.0], [784.0, 4940.0], [786.0, 5082.0], [785.0, 4951.0], [796.0, 8912.0], [795.0, 4530.0], [794.0, 4654.0], [783.0, 9040.0], [769.0, 7033.5], [771.0, 4480.0], [770.0, 9062.0], [773.0, 9070.0], [772.0, 4829.0], [775.0, 8639.0], [774.0, 8945.0], [782.0, 6677.5], [780.0, 5430.0], [779.0, 8940.0], [778.0, 4867.0], [777.0, 4925.0], [776.0, 4472.0], [791.0, 9022.0], [790.0, 4633.5], [788.0, 4551.0], [787.0, 4386.0], [827.0, 4675.0], [820.0, 8751.0], [830.0, 7254.0], [817.0, 8828.0], [816.0, 5054.0], [819.0, 4336.0], [818.0, 8725.0], [826.0, 4678.0], [825.0, 8670.0], [824.0, 4506.0], [807.0, 4871.0], [806.0, 8823.0], [805.0, 8934.0], [804.0, 4467.0], [803.0, 4711.0], [802.0, 4897.0], [801.0, 4657.0], [800.0, 4559.0], [815.0, 8912.0], [814.0, 8766.0], [813.0, 8927.0], [812.0, 4795.0], [809.0, 4497.0], [808.0, 8930.0], [823.0, 4650.0], [822.0, 8863.0], [821.0, 8716.0], [857.0, 8760.0], [861.0, 8763.0], [862.0, 4266.0], [849.0, 4306.0], [848.0, 4760.0], [851.0, 4557.0], [850.0, 8799.0], [853.0, 8775.0], [852.0, 4524.0], [860.0, 4495.0], [859.0, 8758.0], [858.0, 4684.0], [856.0, 8453.0], [839.0, 4874.0], [838.0, 4973.0], [837.0, 8716.0], [836.0, 8846.0], [835.0, 4913.0], [834.0, 6721.0], [832.0, 8764.0], [847.0, 8693.0], [846.0, 4570.0], [845.0, 8762.0], [843.0, 4518.5], [841.0, 4966.0], [840.0, 4529.0], [855.0, 8763.0], [854.0, 8797.0], [892.0, 8359.0], [894.0, 4550.0], [880.0, 8688.0], [891.0, 4519.0], [890.0, 4526.0], [889.0, 4446.0], [888.0, 4327.0], [879.0, 8401.5], [868.0, 8712.5], [866.0, 4487.0], [865.0, 4673.0], [864.0, 4717.5], [877.0, 6869.222222222223], [887.0, 8671.0], [884.0, 4310.0], [883.0, 4450.0], [882.0, 4585.0], [924.0, 8403.0], [927.0, 8510.0], [913.0, 6728.5], [915.0, 4895.0], [914.0, 8572.0], [917.0, 4578.0], [916.0, 4133.0], [926.0, 8227.0], [925.0, 4388.0], [923.0, 4701.0], [922.0, 4752.0], [921.0, 4418.0], [920.0, 4938.0], [911.0, 8491.0], [896.0, 6428.0], [899.0, 8523.0], [898.0, 8654.5], [901.0, 4546.0], [900.0, 8635.0], [903.0, 5952.0], [902.0, 8339.0], [910.0, 4513.0], [909.0, 8614.0], [908.0, 4293.0], [907.0, 6513.5], [905.0, 8631.0], [904.0, 4410.0], [919.0, 8579.0], [918.0, 4546.0], [954.0, 6098.0], [958.0, 4513.0], [959.0, 4958.0], [944.0, 8433.0], [946.0, 3949.0], [945.0, 8423.0], [949.0, 8393.0], [948.0, 6252.5], [957.0, 3956.0], [956.0, 4210.0], [955.0, 4278.0], [952.0, 8395.0], [935.0, 8506.0], [934.0, 4252.0], [933.0, 4653.0], [932.0, 4804.0], [931.0, 4671.0], [930.0, 4759.0], [929.0, 8498.0], [928.0, 8510.0], [943.0, 8251.0], [942.0, 8460.0], [941.0, 4595.0], [940.0, 6372.0], [938.0, 8763.0], [937.0, 8192.0], [936.0, 4636.0], [951.0, 4304.0], [950.0, 8081.0], [985.0, 8037.0], [989.0, 8198.0], [991.0, 8307.5], [977.0, 8252.0], [976.0, 5504.333333333333], [979.0, 4685.0], [978.0, 8250.0], [981.0, 8225.0], [980.0, 4503.0], [988.0, 8430.0], [987.0, 8175.0], [986.0, 4113.0], [984.0, 4241.0], [967.0, 4201.0], [966.0, 6233.5], [964.0, 4089.0], [963.0, 8038.0], [962.0, 4075.0], [961.0, 4186.0], [960.0, 4508.0], [973.0, 8258.0], [972.0, 6360.0], [970.0, 4044.0], [969.0, 8293.0], [968.0, 8170.0], [983.0, 4538.0], [982.0, 4533.0], [1018.0, 8305.0], [1022.0, 3867.0], [1021.0, 2205.5], [1023.0, 8013.0], [1009.0, 4268.0], [1008.0, 4468.0], [1011.0, 8049.0], [1010.0, 8066.0], [1013.0, 4314.0], [1012.0, 8065.0], [1020.0, 4142.0], [1019.0, 4515.0], [1016.0, 8324.0], [999.0, 6320.5], [998.0, 8382.0], [996.0, 8124.0], [995.0, 8141.0], [994.0, 4048.0], [993.0, 7825.0], [992.0, 8419.0], [1007.0, 8103.0], [1006.0, 7653.0], [1005.0, 8099.0], [1004.0, 8111.0], [1003.0, 8102.5], [1001.0, 4293.0], [1000.0, 8098.0], [1015.0, 8038.0], [1014.0, 3894.0], [1028.0, 7989.0], [1078.0, 4103.0], [1036.0, 2199.0], [1026.0, 4475.5], [1032.0, 6645.666666666667], [1040.0, 4139.0], [1042.0, 7977.0], [1044.0, 4125.0], [1046.0, 8263.0], [1048.0, 4051.0], [1050.0, 8146.0], [1052.0, 4536.0], [1024.0, 4196.0], [1054.0, 4292.0], [1072.0, 8070.0], [1074.0, 3834.0], [1076.0, 7457.0], [1082.0, 4582.0], [1038.0, 191.5], [1034.0, 8001.0], [1056.0, 7928.0], [1060.0, 6196.0], [1058.0, 4454.0], [1062.0, 4343.0], [1064.0, 8053.5], [1066.0, 8170.0], [1068.0, 4124.0], [1070.0, 3900.0], [1086.0, 4269.0], [1148.0, 4190.0], [1120.0, 7562.0], [1122.0, 7844.0], [1124.0, 3868.0], [1126.0, 7546.0], [1128.0, 3792.0], [1130.0, 7791.0], [1132.0, 4099.0], [1134.0, 3880.0], [1146.0, 7656.0], [1144.0, 3719.0], [1142.0, 3642.0], [1140.0, 3951.0], [1138.0, 4216.0], [1136.0, 7627.0], [1102.0, 7345.0], [1098.0, 7342.0], [1096.0, 5975.0], [1094.0, 7702.0], [1092.0, 7691.0], [1090.0, 7385.0], [1088.0, 3947.0], [1118.0, 7244.0], [1116.0, 7597.0], [1114.0, 4265.0], [1112.0, 3771.0], [1110.0, 7907.0], [1108.0, 4112.0], [1106.0, 7664.0], [1104.0, 7333.0], [1156.0, 3643.0], [1210.0, 6962.0], [1160.0, 2047.5], [1152.0, 7630.0], [1158.0, 3817.0], [1182.0, 7274.0], [1180.0, 7162.0], [1178.0, 7348.0], [1176.0, 3333.0], [1174.0, 7388.5], [1172.0, 4154.0], [1170.0, 3568.0], [1200.0, 3814.0], [1166.0, 7208.0], [1164.0, 3724.0], [1162.0, 7478.0], [1202.0, 7104.0], [1184.0, 3528.0], [1186.0, 6976.0], [1188.0, 6964.0], [1190.0, 3281.0], [1192.0, 3172.0], [1194.0, 7008.0], [1196.0, 7035.0], [1208.0, 7066.0], [1204.0, 3465.0], [1278.0, 2868.0], [1248.0, 6701.0], [1250.0, 6501.0], [1252.0, 2988.0], [1254.0, 6594.0], [1256.0, 6426.0], [1258.0, 3434.0], [1260.0, 5913.0], [1262.0, 6517.0], [1274.0, 6149.0], [1272.0, 5577.0], [1270.0, 2967.0], [1268.0, 3074.0], [1264.0, 3490.0], [1216.0, 6908.0], [1218.0, 3073.0], [1220.0, 7005.0], [1224.0, 3354.0], [1222.0, 6979.0], [1226.0, 6819.0], [1228.0, 5159.5], [1230.0, 6900.0], [1246.0, 2987.0], [1244.0, 6446.0], [1242.0, 4885.5], [1240.0, 6708.0], [1238.0, 4922.5], [1236.0, 5005.0], [1234.0, 6861.0], [1232.0, 6875.0], [1336.0, 2137.0], [1334.0, 3457.0], [1340.0, 4189.5], [1312.0, 5924.5], [1314.0, 5394.0], [1316.0, 2623.0], [1318.0, 5235.0], [1326.0, 5953.0], [1324.0, 5886.333333333333], [1342.0, 2288.0], [1338.0, 4608.5], [1330.0, 2645.0], [1328.0, 5815.0], [1294.0, 4917.0], [1292.0, 5097.0], [1290.0, 5023.5], [1286.0, 5023.0], [1284.0, 2789.0], [1282.0, 5756.0], [1280.0, 5398.0], [1308.0, 4284.5], [1304.0, 2818.0], [1302.0, 6139.0], [1300.0, 4473.5], [1298.0, 6043.0], [1296.0, 2475.0], [1404.0, 2118.0], [1384.0, 2395.0], [1376.0, 2251.0], [1378.0, 4771.0], [1380.0, 2003.0], [1382.0, 1904.0], [1386.0, 5249.0], [1388.0, 2079.0], [1390.0, 5142.0], [1406.0, 2080.0], [1400.0, 5243.0], [1394.0, 1683.0], [1392.0, 1906.0], [1344.0, 5916.0], [1346.0, 2574.0], [1348.0, 2304.0], [1350.0, 5896.0], [1352.0, 2593.0], [1354.0, 2453.0], [1356.0, 2323.0], [1358.0, 2382.0], [1374.0, 2351.5], [1372.0, 5469.0], [1370.0, 2544.0], [1368.0, 1967.0], [1366.0, 2291.0], [1364.0, 4996.0], [1362.0, 2444.0], [1360.0, 5684.0], [1468.0, 1513.0], [1442.0, 1595.0], [1444.0, 1747.0], [1446.0, 3232.0], [1448.0, 1598.0], [1450.0, 4791.0], [1452.0, 2179.0], [1454.0, 1380.0], [1470.0, 1222.0], [1466.0, 1699.0], [1464.0, 1421.0], [1462.0, 1319.0], [1460.0, 4763.0], [1458.0, 1373.0], [1456.0, 1693.0], [1422.0, 1387.0], [1420.0, 1640.0], [1418.0, 2002.0], [1416.0, 4956.5], [1414.0, 1890.0], [1412.0, 5050.0], [1410.0, 1737.0], [1408.0, 1827.0], [1438.0, 1845.0], [1436.0, 1648.0], [1434.0, 1583.0], [1432.0, 1517.0], [1430.0, 1567.0], [1428.0, 4855.0], [1426.0, 4978.0], [1424.0, 1585.0], [1474.0, 4496.0], [1522.0, 1164.3333333333333], [1496.0, 1533.4285714285713], [1494.0, 2186.8333333333335], [1492.0, 2822.5], [1490.0, 2951.0], [1488.0, 4476.0], [1500.0, 1361.25], [1498.0, 1293.0], [1472.0, 1585.0], [1476.0, 1684.0], [1478.0, 1413.5], [1480.0, 1106.0], [1482.0, 1477.0], [1502.0, 1512.3333333333333], [1520.0, 924.25], [1512.0, 829.0], [1514.0, 993.1666666666667], [1516.0, 1649.8333333333335], [1518.0, 2913.4], [1532.0, 1102.0], [1534.0, 1996.25], [1504.0, 1319.5], [1506.0, 1548.5], [1508.0, 1793.3750000000002], [1510.0, 1266.3333333333333], [1528.0, 1155.5], [1530.0, 1231.6], [1526.0, 1199.0], [1524.0, 2732.5], [1588.0, 1667.5], [1536.0, 1130.0], [1564.0, 2265.0], [1558.0, 940.0], [1554.0, 3576.0], [1552.0, 768.0], [1546.0, 1247.5], [1550.0, 1912.3333333333333], [1584.0, 1392.2], [1586.0, 1380.3333333333333], [1590.0, 1913.0], [1592.0, 2919.0], [1594.0, 1228.3333333333333], [1596.0, 2251.0], [1598.0, 2220.25], [1568.0, 1814.6666666666665], [1570.0, 980.0], [1576.0, 858.1666666666667], [1574.0, 278.5], [1572.0, 1123.3333333333333], [1578.0, 1050.3333333333333], [1580.0, 1750.5], [1582.0, 1359.2], [1544.0, 1381.6666666666667], [1542.0, 2805.5], [1540.0, 2152.3333333333335], [1538.0, 1574.5], [1600.0, 1005.0], [1602.0, 1173.0], [1604.0, 1853.5714285714284], [1606.0, 1750.6666666666665], [1608.0, 1777.5], [1610.0, 2288.0], [1039.0, 3101.5], [1027.0, 1287.5], [1029.0, 7988.0], [1033.0, 7666.0], [1025.0, 343.0], [1041.0, 4547.0], [1043.0, 4097.0], [1045.0, 4172.0], [1047.0, 7966.0], [1049.0, 7632.0], [1051.0, 4298.0], [1055.0, 4362.0], [1073.0, 7807.0], [1075.0, 3927.0], [1077.0, 7987.0], [1079.0, 7805.0], [1081.0, 6283.0], [1085.0, 7907.0], [1083.0, 3828.0], [1037.0, 2863.6666666666665], [1035.0, 4141.5], [1087.0, 7768.0], [1057.0, 4163.0], [1061.0, 7590.0], [1065.0, 7893.0], [1067.0, 7539.0], [1069.0, 7851.0], [1071.0, 7830.0], [1143.0, 4003.0], [1139.0, 7701.0], [1147.0, 7656.0], [1151.0, 5522.0], [1121.0, 3680.0], [1123.0, 3574.0], [1125.0, 7541.0], [1127.0, 7521.0], [1129.0, 7507.0], [1131.0, 7762.0], [1133.0, 7004.0], [1135.0, 7621.0], [1149.0, 3790.0], [1145.0, 7497.0], [1141.0, 3938.0], [1137.0, 7720.0], [1103.0, 4280.0], [1101.0, 5208.0], [1097.0, 7688.0], [1093.0, 4040.0], [1091.0, 3787.0], [1089.0, 4685.0], [1119.0, 7872.0], [1117.0, 4024.0], [1115.0, 4156.0], [1113.0, 7598.0], [1111.0, 7614.0], [1109.0, 3643.0], [1107.0, 7833.0], [1105.0, 7675.0], [1159.0, 3434.0], [1191.0, 3417.0], [1183.0, 7201.0], [1155.0, 5128.666666666667], [1157.0, 3589.0], [1181.0, 7027.0], [1179.0, 3433.0], [1177.0, 3507.0], [1175.0, 6749.0], [1171.0, 3660.0], [1169.0, 3647.0], [1167.0, 7459.0], [1165.0, 7211.0], [1163.0, 3999.0], [1161.0, 3606.0], [1201.0, 7114.0], [1203.0, 3827.5], [1215.0, 6580.0], [1185.0, 3188.0], [1187.0, 7250.0], [1189.0, 3034.0], [1193.0, 7018.0], [1195.0, 3639.0], [1199.0, 5304.0], [1197.0, 3646.0], [1213.0, 6820.5], [1211.0, 6942.0], [1209.0, 7053.0], [1207.0, 3295.5], [1205.0, 3220.0], [1271.0, 2728.0], [1267.0, 4614.5], [1275.0, 6135.0], [1279.0, 2880.0], [1249.0, 6639.0], [1251.0, 6649.0], [1253.0, 5871.0], [1255.0, 6535.0], [1257.0, 5954.0], [1259.0, 2675.0], [1261.0, 2799.0], [1263.0, 6516.0], [1277.0, 4537.0], [1273.0, 6180.0], [1269.0, 2647.0], [1265.0, 6445.0], [1247.0, 3011.0], [1217.0, 3097.0], [1219.0, 6982.0], [1221.0, 6363.0], [1225.0, 6916.0], [1229.0, 6791.0], [1231.0, 6759.0], [1245.0, 3002.0], [1243.0, 3311.0], [1239.0, 2882.0], [1233.0, 3925.0], [1333.0, 3461.0], [1315.0, 5257.0], [1343.0, 3029.0], [1313.0, 6056.0], [1317.0, 5171.0], [1321.0, 5573.0], [1319.0, 5204.0], [1341.0, 2036.0], [1335.0, 2486.0], [1331.0, 2603.0], [1329.0, 5707.0], [1295.0, 3070.0], [1293.0, 4715.0], [1291.0, 4727.0], [1289.0, 5023.0], [1285.0, 2546.0], [1311.0, 2665.0], [1309.0, 5191.0], [1307.0, 4337.0], [1303.0, 6117.0], [1297.0, 6195.0], [1405.0, 1539.0], [1407.0, 1836.0], [1377.0, 2173.0], [1381.0, 2123.0], [1383.0, 2061.0], [1385.0, 1979.0], [1387.0, 5281.0], [1389.0, 2134.0], [1391.0, 2156.0], [1403.0, 1806.5], [1401.0, 5278.0], [1399.0, 3027.6666666666665], [1397.0, 1924.0], [1395.0, 3586.0], [1375.0, 5636.0], [1345.0, 5931.0], [1349.0, 2239.0], [1351.0, 5892.0], [1353.0, 2379.0], [1355.0, 2201.0], [1357.0, 2783.0], [1359.0, 2510.0], [1371.0, 5640.0], [1369.0, 2427.0], [1367.0, 2219.0], [1365.0, 2159.0], [1363.0, 2273.0], [1361.0, 5781.0], [1465.0, 1660.0], [1459.0, 4573.0], [1471.0, 1616.0], [1441.0, 3308.5], [1443.0, 1454.0], [1447.0, 1622.0], [1449.0, 1745.0], [1451.0, 4704.0], [1453.0, 4804.0], [1455.0, 1695.0], [1469.0, 1436.0], [1463.0, 1579.0], [1461.0, 4639.0], [1457.0, 1355.0], [1423.0, 4995.0], [1421.0, 4725.0], [1419.0, 4990.0], [1417.0, 1624.0], [1411.0, 1587.0], [1409.0, 1724.0], [1439.0, 1833.0], [1437.0, 1779.0], [1435.0, 1757.0], [1433.0, 4934.0], [1431.0, 1827.0], [1429.0, 1705.0], [1427.0, 1660.0], [1425.0, 4820.0], [1475.0, 1460.0], [1533.0, 1491.0], [1527.0, 1468.125], [1497.0, 1988.0], [1495.0, 1462.25], [1493.0, 1537.25], [1491.0, 1473.0], [1489.0, 2892.0], [1499.0, 973.0], [1501.0, 1159.0], [1503.0, 1530.0], [1473.0, 4409.0], [1479.0, 4440.0], [1481.0, 3893.0], [1483.0, 4531.0], [1487.0, 2825.5], [1485.0, 1448.0], [1521.0, 971.8], [1513.0, 1258.0], [1517.0, 1324.6666666666667], [1515.0, 537.6666666666667], [1519.0, 874.0], [1531.0, 1151.6], [1535.0, 1253.0], [1505.0, 1233.0], [1507.0, 1665.8333333333333], [1509.0, 1476.0], [1511.0, 1175.0], [1529.0, 1319.8], [1525.0, 1727.0], [1523.0, 1172.0], [1587.0, 1256.0], [1593.0, 2131.0], [1543.0, 1604.0], [1539.0, 1799.4], [1565.0, 1694.0], [1567.0, 854.1428571428572], [1553.0, 762.0], [1547.0, 3842.0], [1551.0, 795.0], [1585.0, 1884.75], [1589.0, 1920.0], [1591.0, 1902.0], [1595.0, 1334.5], [1599.0, 591.5], [1569.0, 696.5], [1597.0, 2533.0], [1573.0, 1283.25], [1571.0, 616.8333333333334], [1577.0, 2573.0], [1581.0, 872.75], [1579.0, 858.5], [1583.0, 1589.4444444444443], [1545.0, 2081.7999999999997], [1541.0, 1632.8], [1537.0, 1143.0], [1605.0, 1390.0], [1601.0, 2342.9], [1603.0, 2105.5], [1607.0, 2409.6666666666665], [1611.0, 2268.0], [1609.0, 2559.6666666666665], [1.0, 9878.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}, {"data": [[906.6218666666665, 5610.1552]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1611.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14250.0, "minX": 1.75557834E12, "maxY": 185062.5, "series": [{"data": [[1.75557834E12, 185062.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75557834E12, 14250.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557834E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5610.1552, "minX": 1.75557834E12, "maxY": 5610.1552, "series": [{"data": [[1.75557834E12, 5610.1552]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557834E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5610.128533333339, "minX": 1.75557834E12, "maxY": 5610.128533333339, "series": [{"data": [[1.75557834E12, 5610.128533333339]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557834E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2354.5855999999994, "minX": 1.75557834E12, "maxY": 2354.5855999999994, "series": [{"data": [[1.75557834E12, 2354.5855999999994]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557834E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 52.0, "minX": 1.75557834E12, "maxY": 10413.0, "series": [{"data": [[1.75557834E12, 10413.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75557834E12, 9556.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75557834E12, 10017.44]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75557834E12, 9737.599999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75557834E12, 52.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75557834E12, 4980.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557834E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 574.0, "minX": 29.0, "maxY": 9397.5, "series": [{"data": [[540.0, 9397.5], [78.0, 672.0], [87.0, 2153.0], [382.0, 5303.5], [198.0, 7576.0], [105.0, 1448.0], [222.0, 1649.5], [114.0, 6757.5], [29.0, 574.0], [120.0, 5181.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 540.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 574.0, "minX": 29.0, "maxY": 9397.5, "series": [{"data": [[540.0, 9397.5], [78.0, 672.0], [87.0, 2153.0], [382.0, 5303.5], [198.0, 7576.0], [105.0, 1448.0], [222.0, 1649.5], [114.0, 6757.5], [29.0, 574.0], [120.0, 5181.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 540.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75557834E12, "maxY": 31.25, "series": [{"data": [[1.75557834E12, 31.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557834E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75557834E12, "maxY": 31.25, "series": [{"data": [[1.75557834E12, 31.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75557834E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75557834E12, "maxY": 31.25, "series": [{"data": [[1.75557834E12, 31.25]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557834E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75557834E12, "maxY": 31.25, "series": [{"data": [[1.75557834E12, 31.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75557834E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

