/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 393.0, "minX": 0.0, "maxY": 8100.0, "series": [{"data": [[0.0, 393.0], [0.1, 509.0], [0.2, 746.0], [0.3, 768.0], [0.4, 794.0], [0.5, 806.0], [0.6, 810.0], [0.7, 828.0], [0.8, 838.0], [0.9, 868.0], [1.0, 895.0], [1.1, 927.0], [1.2, 941.0], [1.3, 958.0], [1.4, 965.0], [1.5, 980.0], [1.6, 984.0], [1.7, 999.0], [1.8, 1005.0], [1.9, 1019.0], [2.0, 1029.0], [2.1, 1041.0], [2.2, 1052.0], [2.3, 1055.0], [2.4, 1059.0], [2.5, 1065.0], [2.6, 1079.0], [2.7, 1098.0], [2.8, 1104.0], [2.9, 1110.0], [3.0, 1111.0], [3.1, 1118.0], [3.2, 1126.0], [3.3, 1146.0], [3.4, 1160.0], [3.5, 1180.0], [3.6, 1193.0], [3.7, 1201.0], [3.8, 1206.0], [3.9, 1218.0], [4.0, 1236.0], [4.1, 1247.0], [4.2, 1260.0], [4.3, 1276.0], [4.4, 1290.0], [4.5, 1296.0], [4.6, 1299.0], [4.7, 1318.0], [4.8, 1326.0], [4.9, 1334.0], [5.0, 1336.0], [5.1, 1351.0], [5.2, 1373.0], [5.3, 1379.0], [5.4, 1387.0], [5.5, 1401.0], [5.6, 1404.0], [5.7, 1420.0], [5.8, 1424.0], [5.9, 1435.0], [6.0, 1436.0], [6.1, 1448.0], [6.2, 1455.0], [6.3, 1470.0], [6.4, 1473.0], [6.5, 1482.0], [6.6, 1484.0], [6.7, 1493.0], [6.8, 1495.0], [6.9, 1507.0], [7.0, 1509.0], [7.1, 1519.0], [7.2, 1523.0], [7.3, 1536.0], [7.4, 1546.0], [7.5, 1558.0], [7.6, 1562.0], [7.7, 1578.0], [7.8, 1582.0], [7.9, 1584.0], [8.0, 1589.0], [8.1, 1602.0], [8.2, 1609.0], [8.3, 1616.0], [8.4, 1625.0], [8.5, 1636.0], [8.6, 1643.0], [8.7, 1644.0], [8.8, 1649.0], [8.9, 1652.0], [9.0, 1670.0], [9.1, 1675.0], [9.2, 1680.0], [9.3, 1690.0], [9.4, 1699.0], [9.5, 1699.0], [9.6, 1711.0], [9.7, 1719.0], [9.8, 1727.0], [9.9, 1735.0], [10.0, 1740.0], [10.1, 1743.0], [10.2, 1754.0], [10.3, 1765.0], [10.4, 1774.0], [10.5, 1781.0], [10.6, 1790.0], [10.7, 1793.0], [10.8, 1798.0], [10.9, 1806.0], [11.0, 1818.0], [11.1, 1823.0], [11.2, 1842.0], [11.3, 1848.0], [11.4, 1855.0], [11.5, 1858.0], [11.6, 1866.0], [11.7, 1867.0], [11.8, 1877.0], [11.9, 1884.0], [12.0, 1891.0], [12.1, 1893.0], [12.2, 1897.0], [12.3, 1909.0], [12.4, 1924.0], [12.5, 1934.0], [12.6, 1941.0], [12.7, 1948.0], [12.8, 1954.0], [12.9, 1969.0], [13.0, 1980.0], [13.1, 1987.0], [13.2, 1997.0], [13.3, 2015.0], [13.4, 2035.0], [13.5, 2048.0], [13.6, 2054.0], [13.7, 2071.0], [13.8, 2086.0], [13.9, 2095.0], [14.0, 2109.0], [14.1, 2129.0], [14.2, 2137.0], [14.3, 2141.0], [14.4, 2149.0], [14.5, 2170.0], [14.6, 2173.0], [14.7, 2174.0], [14.8, 2177.0], [14.9, 2187.0], [15.0, 2193.0], [15.1, 2219.0], [15.2, 2229.0], [15.3, 2230.0], [15.4, 2240.0], [15.5, 2259.0], [15.6, 2288.0], [15.7, 2294.0], [15.8, 2314.0], [15.9, 2352.0], [16.0, 2360.0], [16.1, 2372.0], [16.2, 2378.0], [16.3, 2386.0], [16.4, 2389.0], [16.5, 2407.0], [16.6, 2439.0], [16.7, 2447.0], [16.8, 2457.0], [16.9, 2460.0], [17.0, 2468.0], [17.1, 2469.0], [17.2, 2478.0], [17.3, 2493.0], [17.4, 2510.0], [17.5, 2511.0], [17.6, 2516.0], [17.7, 2536.0], [17.8, 2545.0], [17.9, 2556.0], [18.0, 2569.0], [18.1, 2583.0], [18.2, 2603.0], [18.3, 2605.0], [18.4, 2610.0], [18.5, 2611.0], [18.6, 2623.0], [18.7, 2630.0], [18.8, 2638.0], [18.9, 2653.0], [19.0, 2674.0], [19.1, 2684.0], [19.2, 2692.0], [19.3, 2697.0], [19.4, 2707.0], [19.5, 2722.0], [19.6, 2732.0], [19.7, 2743.0], [19.8, 2752.0], [19.9, 2756.0], [20.0, 2772.0], [20.1, 2780.0], [20.2, 2787.0], [20.3, 2796.0], [20.4, 2825.0], [20.5, 2828.0], [20.6, 2838.0], [20.7, 2842.0], [20.8, 2847.0], [20.9, 2851.0], [21.0, 2860.0], [21.1, 2867.0], [21.2, 2872.0], [21.3, 2874.0], [21.4, 2879.0], [21.5, 2881.0], [21.6, 2888.0], [21.7, 2890.0], [21.8, 2897.0], [21.9, 2902.0], [22.0, 2908.0], [22.1, 2910.0], [22.2, 2922.0], [22.3, 2925.0], [22.4, 2928.0], [22.5, 2929.0], [22.6, 2941.0], [22.7, 2941.0], [22.8, 2948.0], [22.9, 2952.0], [23.0, 2963.0], [23.1, 2966.0], [23.2, 2966.0], [23.3, 2968.0], [23.4, 2984.0], [23.5, 2984.0], [23.6, 2990.0], [23.7, 2994.0], [23.8, 3004.0], [23.9, 3005.0], [24.0, 3019.0], [24.1, 3020.0], [24.2, 3026.0], [24.3, 3028.0], [24.4, 3031.0], [24.5, 3032.0], [24.6, 3038.0], [24.7, 3040.0], [24.8, 3045.0], [24.9, 3048.0], [25.0, 3050.0], [25.1, 3056.0], [25.2, 3064.0], [25.3, 3069.0], [25.4, 3076.0], [25.5, 3082.0], [25.6, 3092.0], [25.7, 3099.0], [25.8, 3112.0], [25.9, 3116.0], [26.0, 3122.0], [26.1, 3124.0], [26.2, 3128.0], [26.3, 3133.0], [26.4, 3138.0], [26.5, 3142.0], [26.6, 3146.0], [26.7, 3147.0], [26.8, 3152.0], [26.9, 3153.0], [27.0, 3157.0], [27.1, 3160.0], [27.2, 3166.0], [27.3, 3169.0], [27.4, 3178.0], [27.5, 3181.0], [27.6, 3189.0], [27.7, 3195.0], [27.8, 3205.0], [27.9, 3211.0], [28.0, 3222.0], [28.1, 3222.0], [28.2, 3230.0], [28.3, 3232.0], [28.4, 3234.0], [28.5, 3235.0], [28.6, 3241.0], [28.7, 3244.0], [28.8, 3247.0], [28.9, 3254.0], [29.0, 3260.0], [29.1, 3267.0], [29.2, 3273.0], [29.3, 3278.0], [29.4, 3279.0], [29.5, 3283.0], [29.6, 3284.0], [29.7, 3285.0], [29.8, 3293.0], [29.9, 3296.0], [30.0, 3298.0], [30.1, 3300.0], [30.2, 3310.0], [30.3, 3312.0], [30.4, 3323.0], [30.5, 3324.0], [30.6, 3329.0], [30.7, 3331.0], [30.8, 3333.0], [30.9, 3340.0], [31.0, 3342.0], [31.1, 3347.0], [31.2, 3350.0], [31.3, 3353.0], [31.4, 3355.0], [31.5, 3363.0], [31.6, 3371.0], [31.7, 3375.0], [31.8, 3381.0], [31.9, 3384.0], [32.0, 3392.0], [32.1, 3397.0], [32.2, 3402.0], [32.3, 3409.0], [32.4, 3413.0], [32.5, 3415.0], [32.6, 3422.0], [32.7, 3427.0], [32.8, 3428.0], [32.9, 3434.0], [33.0, 3442.0], [33.1, 3443.0], [33.2, 3447.0], [33.3, 3456.0], [33.4, 3465.0], [33.5, 3472.0], [33.6, 3478.0], [33.7, 3489.0], [33.8, 3498.0], [33.9, 3502.0], [34.0, 3506.0], [34.1, 3510.0], [34.2, 3515.0], [34.3, 3516.0], [34.4, 3519.0], [34.5, 3521.0], [34.6, 3526.0], [34.7, 3530.0], [34.8, 3533.0], [34.9, 3536.0], [35.0, 3538.0], [35.1, 3540.0], [35.2, 3543.0], [35.3, 3549.0], [35.4, 3554.0], [35.5, 3557.0], [35.6, 3559.0], [35.7, 3563.0], [35.8, 3565.0], [35.9, 3570.0], [36.0, 3577.0], [36.1, 3578.0], [36.2, 3589.0], [36.3, 3600.0], [36.4, 3603.0], [36.5, 3606.0], [36.6, 3608.0], [36.7, 3611.0], [36.8, 3614.0], [36.9, 3618.0], [37.0, 3625.0], [37.1, 3627.0], [37.2, 3630.0], [37.3, 3635.0], [37.4, 3642.0], [37.5, 3648.0], [37.6, 3649.0], [37.7, 3650.0], [37.8, 3651.0], [37.9, 3658.0], [38.0, 3660.0], [38.1, 3664.0], [38.2, 3667.0], [38.3, 3673.0], [38.4, 3681.0], [38.5, 3683.0], [38.6, 3690.0], [38.7, 3693.0], [38.8, 3698.0], [38.9, 3709.0], [39.0, 3717.0], [39.1, 3719.0], [39.2, 3729.0], [39.3, 3730.0], [39.4, 3742.0], [39.5, 3743.0], [39.6, 3744.0], [39.7, 3746.0], [39.8, 3752.0], [39.9, 3757.0], [40.0, 3766.0], [40.1, 3772.0], [40.2, 3784.0], [40.3, 3789.0], [40.4, 3794.0], [40.5, 3816.0], [40.6, 3822.0], [40.7, 3823.0], [40.8, 3830.0], [40.9, 3840.0], [41.0, 3843.0], [41.1, 3857.0], [41.2, 3871.0], [41.3, 3873.0], [41.4, 3878.0], [41.5, 3880.0], [41.6, 3890.0], [41.7, 3891.0], [41.8, 3926.0], [41.9, 3929.0], [42.0, 3932.0], [42.1, 3938.0], [42.2, 3942.0], [42.3, 3945.0], [42.4, 3952.0], [42.5, 3953.0], [42.6, 3959.0], [42.7, 3967.0], [42.8, 3971.0], [42.9, 3979.0], [43.0, 3993.0], [43.1, 4004.0], [43.2, 4024.0], [43.3, 4039.0], [43.4, 4054.0], [43.5, 4056.0], [43.6, 4068.0], [43.7, 4072.0], [43.8, 4081.0], [43.9, 4086.0], [44.0, 4094.0], [44.1, 4097.0], [44.2, 4103.0], [44.3, 4105.0], [44.4, 4110.0], [44.5, 4119.0], [44.6, 4122.0], [44.7, 4133.0], [44.8, 4140.0], [44.9, 4141.0], [45.0, 4144.0], [45.1, 4150.0], [45.2, 4164.0], [45.3, 4182.0], [45.4, 4190.0], [45.5, 4207.0], [45.6, 4217.0], [45.7, 4228.0], [45.8, 4231.0], [45.9, 4238.0], [46.0, 4243.0], [46.1, 4246.0], [46.2, 4258.0], [46.3, 4259.0], [46.4, 4280.0], [46.5, 4281.0], [46.6, 4287.0], [46.7, 4291.0], [46.8, 4296.0], [46.9, 4297.0], [47.0, 4299.0], [47.1, 4301.0], [47.2, 4309.0], [47.3, 4311.0], [47.4, 4327.0], [47.5, 4329.0], [47.6, 4338.0], [47.7, 4345.0], [47.8, 4349.0], [47.9, 4352.0], [48.0, 4357.0], [48.1, 4359.0], [48.2, 4371.0], [48.3, 4376.0], [48.4, 4387.0], [48.5, 4388.0], [48.6, 4392.0], [48.7, 4393.0], [48.8, 4395.0], [48.9, 4399.0], [49.0, 4418.0], [49.1, 4419.0], [49.2, 4423.0], [49.3, 4424.0], [49.4, 4430.0], [49.5, 4433.0], [49.6, 4439.0], [49.7, 4440.0], [49.8, 4454.0], [49.9, 4457.0], [50.0, 4468.0], [50.1, 4480.0], [50.2, 4494.0], [50.3, 4527.0], [50.4, 4532.0], [50.5, 4561.0], [50.6, 4562.0], [50.7, 4571.0], [50.8, 4587.0], [50.9, 4623.0], [51.0, 4662.0], [51.1, 4667.0], [51.2, 4670.0], [51.3, 4671.0], [51.4, 4679.0], [51.5, 4688.0], [51.6, 4702.0], [51.7, 4706.0], [51.8, 4759.0], [51.9, 4777.0], [52.0, 4784.0], [52.1, 4793.0], [52.2, 4797.0], [52.3, 4798.0], [52.4, 4802.0], [52.5, 4804.0], [52.6, 4824.0], [52.7, 4831.0], [52.8, 4841.0], [52.9, 4853.0], [53.0, 4891.0], [53.1, 4922.0], [53.2, 4924.0], [53.3, 4925.0], [53.4, 4935.0], [53.5, 4936.0], [53.6, 4953.0], [53.7, 4959.0], [53.8, 4968.0], [53.9, 4972.0], [54.0, 4975.0], [54.1, 5001.0], [54.2, 5009.0], [54.3, 5023.0], [54.4, 5038.0], [54.5, 5038.0], [54.6, 5042.0], [54.7, 5045.0], [54.8, 5050.0], [54.9, 5053.0], [55.0, 5062.0], [55.1, 5065.0], [55.2, 5074.0], [55.3, 5078.0], [55.4, 5098.0], [55.5, 5099.0], [55.6, 5116.0], [55.7, 5117.0], [55.8, 5120.0], [55.9, 5122.0], [56.0, 5132.0], [56.1, 5143.0], [56.2, 5147.0], [56.3, 5151.0], [56.4, 5153.0], [56.5, 5158.0], [56.6, 5163.0], [56.7, 5173.0], [56.8, 5184.0], [56.9, 5188.0], [57.0, 5195.0], [57.1, 5198.0], [57.2, 5199.0], [57.3, 5204.0], [57.4, 5206.0], [57.5, 5208.0], [57.6, 5209.0], [57.7, 5212.0], [57.8, 5215.0], [57.9, 5217.0], [58.0, 5222.0], [58.1, 5228.0], [58.2, 5230.0], [58.3, 5232.0], [58.4, 5251.0], [58.5, 5253.0], [58.6, 5259.0], [58.7, 5268.0], [58.8, 5273.0], [58.9, 5277.0], [59.0, 5282.0], [59.1, 5285.0], [59.2, 5292.0], [59.3, 5304.0], [59.4, 5343.0], [59.5, 5344.0], [59.6, 5349.0], [59.7, 5354.0], [59.8, 5356.0], [59.9, 5359.0], [60.0, 5365.0], [60.1, 5368.0], [60.2, 5370.0], [60.3, 5372.0], [60.4, 5377.0], [60.5, 5380.0], [60.6, 5391.0], [60.7, 5392.0], [60.8, 5397.0], [60.9, 5400.0], [61.0, 5402.0], [61.1, 5403.0], [61.2, 5404.0], [61.3, 5405.0], [61.4, 5411.0], [61.5, 5412.0], [61.6, 5413.0], [61.7, 5413.0], [61.8, 5414.0], [61.9, 5417.0], [62.0, 5420.0], [62.1, 5423.0], [62.2, 5425.0], [62.3, 5426.0], [62.4, 5435.0], [62.5, 5440.0], [62.6, 5449.0], [62.7, 5453.0], [62.8, 5458.0], [62.9, 5459.0], [63.0, 5460.0], [63.1, 5467.0], [63.2, 5470.0], [63.3, 5471.0], [63.4, 5475.0], [63.5, 5475.0], [63.6, 5476.0], [63.7, 5477.0], [63.8, 5481.0], [63.9, 5482.0], [64.0, 5484.0], [64.1, 5485.0], [64.2, 5487.0], [64.3, 5488.0], [64.4, 5489.0], [64.5, 5489.0], [64.6, 5494.0], [64.7, 5495.0], [64.8, 5497.0], [64.9, 5498.0], [65.0, 5500.0], [65.1, 5501.0], [65.2, 5507.0], [65.3, 5508.0], [65.4, 5512.0], [65.5, 5513.0], [65.6, 5517.0], [65.7, 5534.0], [65.8, 5545.0], [65.9, 5547.0], [66.0, 5553.0], [66.1, 5556.0], [66.2, 5559.0], [66.3, 5560.0], [66.4, 5565.0], [66.5, 5569.0], [66.6, 5575.0], [66.7, 5576.0], [66.8, 5579.0], [66.9, 5581.0], [67.0, 5582.0], [67.1, 5582.0], [67.2, 5585.0], [67.3, 5586.0], [67.4, 5588.0], [67.5, 5588.0], [67.6, 5590.0], [67.7, 5592.0], [67.8, 5594.0], [67.9, 5597.0], [68.0, 5600.0], [68.1, 5600.0], [68.2, 5602.0], [68.3, 5604.0], [68.4, 5607.0], [68.5, 5609.0], [68.6, 5612.0], [68.7, 5613.0], [68.8, 5616.0], [68.9, 5617.0], [69.0, 5617.0], [69.1, 5619.0], [69.2, 5620.0], [69.3, 5623.0], [69.4, 5631.0], [69.5, 5633.0], [69.6, 5633.0], [69.7, 5634.0], [69.8, 5635.0], [69.9, 5636.0], [70.0, 5642.0], [70.1, 5643.0], [70.2, 5644.0], [70.3, 5645.0], [70.4, 5647.0], [70.5, 5648.0], [70.6, 5650.0], [70.7, 5651.0], [70.8, 5653.0], [70.9, 5656.0], [71.0, 5659.0], [71.1, 5662.0], [71.2, 5664.0], [71.3, 5666.0], [71.4, 5667.0], [71.5, 5667.0], [71.6, 5671.0], [71.7, 5672.0], [71.8, 5677.0], [71.9, 5682.0], [72.0, 5683.0], [72.1, 5684.0], [72.2, 5688.0], [72.3, 5688.0], [72.4, 5691.0], [72.5, 5692.0], [72.6, 5695.0], [72.7, 5697.0], [72.8, 5699.0], [72.9, 5704.0], [73.0, 5707.0], [73.1, 5714.0], [73.2, 5725.0], [73.3, 5727.0], [73.4, 5729.0], [73.5, 5730.0], [73.6, 5731.0], [73.7, 5735.0], [73.8, 5741.0], [73.9, 5742.0], [74.0, 5752.0], [74.1, 5753.0], [74.2, 5754.0], [74.3, 5775.0], [74.4, 5778.0], [74.5, 5806.0], [74.6, 5820.0], [74.7, 5823.0], [74.8, 5826.0], [74.9, 5829.0], [75.0, 5838.0], [75.1, 5840.0], [75.2, 5843.0], [75.3, 5843.0], [75.4, 5844.0], [75.5, 5850.0], [75.6, 5853.0], [75.7, 5857.0], [75.8, 5893.0], [75.9, 5902.0], [76.0, 5913.0], [76.1, 5914.0], [76.2, 5918.0], [76.3, 5928.0], [76.4, 5939.0], [76.5, 5960.0], [76.6, 6002.0], [76.7, 6038.0], [76.8, 6092.0], [76.9, 6107.0], [77.0, 6119.0], [77.1, 6122.0], [77.2, 6135.0], [77.3, 6149.0], [77.4, 6170.0], [77.5, 6176.0], [77.6, 6185.0], [77.7, 6196.0], [77.8, 6204.0], [77.9, 6224.0], [78.0, 6229.0], [78.1, 6230.0], [78.2, 6237.0], [78.3, 6248.0], [78.4, 6269.0], [78.5, 6278.0], [78.6, 6297.0], [78.7, 6301.0], [78.8, 6318.0], [78.9, 6322.0], [79.0, 6346.0], [79.1, 6351.0], [79.2, 6368.0], [79.3, 6387.0], [79.4, 6416.0], [79.5, 6433.0], [79.6, 6456.0], [79.7, 6460.0], [79.8, 6471.0], [79.9, 6473.0], [80.0, 6484.0], [80.1, 6491.0], [80.2, 6503.0], [80.3, 6512.0], [80.4, 6523.0], [80.5, 6529.0], [80.6, 6535.0], [80.7, 6538.0], [80.8, 6544.0], [80.9, 6559.0], [81.0, 6563.0], [81.1, 6582.0], [81.2, 6622.0], [81.3, 6631.0], [81.4, 6661.0], [81.5, 6731.0], [81.6, 6737.0], [81.7, 6758.0], [81.8, 6765.0], [81.9, 6772.0], [82.0, 6774.0], [82.1, 6776.0], [82.2, 6786.0], [82.3, 6788.0], [82.4, 6791.0], [82.5, 6793.0], [82.6, 6794.0], [82.7, 6800.0], [82.8, 6801.0], [82.9, 6809.0], [83.0, 6812.0], [83.1, 6818.0], [83.2, 6827.0], [83.3, 6831.0], [83.4, 6834.0], [83.5, 6848.0], [83.6, 6849.0], [83.7, 6863.0], [83.8, 6867.0], [83.9, 6872.0], [84.0, 6875.0], [84.1, 6878.0], [84.2, 6879.0], [84.3, 6880.0], [84.4, 6882.0], [84.5, 6890.0], [84.6, 6895.0], [84.7, 6898.0], [84.8, 6900.0], [84.9, 6903.0], [85.0, 6910.0], [85.1, 6911.0], [85.2, 6912.0], [85.3, 6913.0], [85.4, 6916.0], [85.5, 6917.0], [85.6, 6923.0], [85.7, 6930.0], [85.8, 6932.0], [85.9, 6935.0], [86.0, 6936.0], [86.1, 6939.0], [86.2, 6941.0], [86.3, 6944.0], [86.4, 6945.0], [86.5, 6947.0], [86.6, 6948.0], [86.7, 6950.0], [86.8, 6951.0], [86.9, 6952.0], [87.0, 6952.0], [87.1, 6953.0], [87.2, 6954.0], [87.3, 6955.0], [87.4, 6955.0], [87.5, 6961.0], [87.6, 6962.0], [87.7, 6964.0], [87.8, 6965.0], [87.9, 6975.0], [88.0, 6977.0], [88.1, 6979.0], [88.2, 6987.0], [88.3, 6989.0], [88.4, 6991.0], [88.5, 6994.0], [88.6, 6996.0], [88.7, 6997.0], [88.8, 7003.0], [88.9, 7010.0], [89.0, 7013.0], [89.1, 7016.0], [89.2, 7018.0], [89.3, 7021.0], [89.4, 7022.0], [89.5, 7024.0], [89.6, 7025.0], [89.7, 7026.0], [89.8, 7026.0], [89.9, 7027.0], [90.0, 7027.0], [90.1, 7031.0], [90.2, 7037.0], [90.3, 7040.0], [90.4, 7048.0], [90.5, 7054.0], [90.6, 7063.0], [90.7, 7067.0], [90.8, 7072.0], [90.9, 7078.0], [91.0, 7081.0], [91.1, 7090.0], [91.2, 7091.0], [91.3, 7093.0], [91.4, 7096.0], [91.5, 7101.0], [91.6, 7103.0], [91.7, 7105.0], [91.8, 7106.0], [91.9, 7110.0], [92.0, 7111.0], [92.1, 7114.0], [92.2, 7117.0], [92.3, 7120.0], [92.4, 7122.0], [92.5, 7126.0], [92.6, 7129.0], [92.7, 7135.0], [92.8, 7136.0], [92.9, 7138.0], [93.0, 7145.0], [93.1, 7153.0], [93.2, 7158.0], [93.3, 7165.0], [93.4, 7167.0], [93.5, 7171.0], [93.6, 7190.0], [93.7, 7198.0], [93.8, 7200.0], [93.9, 7204.0], [94.0, 7218.0], [94.1, 7230.0], [94.2, 7238.0], [94.3, 7245.0], [94.4, 7255.0], [94.5, 7262.0], [94.6, 7289.0], [94.7, 7311.0], [94.8, 7322.0], [94.9, 7343.0], [95.0, 7349.0], [95.1, 7361.0], [95.2, 7365.0], [95.3, 7381.0], [95.4, 7390.0], [95.5, 7395.0], [95.6, 7405.0], [95.7, 7424.0], [95.8, 7440.0], [95.9, 7466.0], [96.0, 7497.0], [96.1, 7520.0], [96.2, 7529.0], [96.3, 7557.0], [96.4, 7559.0], [96.5, 7588.0], [96.6, 7604.0], [96.7, 7616.0], [96.8, 7630.0], [96.9, 7662.0], [97.0, 7676.0], [97.1, 7696.0], [97.2, 7729.0], [97.3, 7763.0], [97.4, 7784.0], [97.5, 7799.0], [97.6, 7816.0], [97.7, 7825.0], [97.8, 7827.0], [97.9, 7848.0], [98.0, 7856.0], [98.1, 7870.0], [98.2, 7888.0], [98.3, 7894.0], [98.4, 7899.0], [98.5, 7916.0], [98.6, 7929.0], [98.7, 7934.0], [98.8, 7951.0], [98.9, 7974.0], [99.0, 7988.0], [99.1, 7999.0], [99.2, 8001.0], [99.3, 8015.0], [99.4, 8027.0], [99.5, 8074.0], [99.6, 8083.0], [99.7, 8088.0], [99.8, 8090.0], [99.9, 8095.0], [100.0, 8100.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 121.0, "series": [{"data": [[700.0, 8.0], [800.0, 13.0], [900.0, 18.0], [1000.0, 26.0], [1100.0, 23.0], [1200.0, 23.0], [1300.0, 22.0], [1400.0, 35.0], [1500.0, 29.0], [1600.0, 37.0], [1700.0, 33.0], [1800.0, 35.0], [1900.0, 25.0], [2000.0, 18.0], [2100.0, 27.0], [2200.0, 19.0], [2300.0, 16.0], [2400.0, 23.0], [2500.0, 21.0], [2600.0, 28.0], [2800.0, 38.0], [2700.0, 26.0], [2900.0, 48.0], [3000.0, 48.0], [3100.0, 52.0], [3200.0, 56.0], [3300.0, 54.0], [3400.0, 41.0], [3500.0, 61.0], [3600.0, 64.0], [3700.0, 41.0], [3800.0, 31.0], [3900.0, 34.0], [4000.0, 26.0], [4100.0, 34.0], [4200.0, 40.0], [4300.0, 46.0], [4400.0, 34.0], [4600.0, 19.0], [4500.0, 14.0], [4700.0, 19.0], [4800.0, 17.0], [4900.0, 26.0], [5000.0, 36.0], [5100.0, 43.0], [5200.0, 51.0], [5300.0, 40.0], [5400.0, 103.0], [5500.0, 75.0], [5600.0, 121.0], [5700.0, 41.0], [5800.0, 34.0], [5900.0, 19.0], [6100.0, 24.0], [6000.0, 6.0], [6200.0, 22.0], [6300.0, 16.0], [6600.0, 8.0], [6400.0, 21.0], [6500.0, 25.0], [6700.0, 30.0], [6900.0, 100.0], [6800.0, 51.0], [7000.0, 68.0], [7100.0, 58.0], [7200.0, 22.0], [7300.0, 22.0], [7400.0, 12.0], [7500.0, 13.0], [7600.0, 15.0], [7700.0, 10.0], [7800.0, 22.0], [7900.0, 18.0], [8000.0, 21.0], [8100.0, 1.0], [300.0, 1.0], [400.0, 1.0], [500.0, 2.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2328.0, "series": [{"data": [[0.0, 2.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 170.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2328.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.1375999999989, "minX": 1.7555925E12, "maxY": 1251.1375999999989, "series": [{"data": [[1.7555925E12, 1251.1375999999989]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555925E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 473.5, "minX": 21.0, "maxY": 8090.0, "series": [{"data": [[21.0, 7395.818181818182], [22.0, 7023.0], [24.0, 7324.25], [25.0, 7592.666666666667], [27.0, 7620.4], [31.0, 7521.25], [33.0, 7034.666666666667], [35.0, 8090.0], [37.0, 8005.0], [39.0, 7597.5], [40.0, 7314.666666666667], [43.0, 7478.0], [44.0, 7011.333333333333], [46.0, 6952.0], [49.0, 6981.0], [48.0, 7090.0], [55.0, 7031.2], [54.0, 6941.0], [57.0, 7390.0], [61.0, 7530.0], [60.0, 7972.5], [62.0, 7771.666666666667], [66.0, 6954.0], [65.0, 6967.0], [71.0, 7442.4], [75.0, 7230.0], [73.0, 7052.5], [79.0, 6952.0], [78.0, 8083.666666666667], [76.0, 7988.0], [83.0, 6954.0], [82.0, 7003.0], [91.0, 6944.0], [90.0, 7026.5], [89.0, 7308.666666666667], [93.0, 7250.5], [92.0, 7865.0], [99.0, 7086.0], [98.0, 6988.2], [97.0, 6965.0], [102.0, 6955.0], [101.0, 7116.0], [100.0, 6952.0], [106.0, 7061.0], [104.0, 6955.0], [110.0, 7388.333333333333], [108.0, 6949.0], [115.0, 7108.0], [114.0, 6944.5], [113.0, 7111.0], [112.0, 7003.0], [119.0, 6950.0], [118.0, 6991.0], [117.0, 7974.0], [123.0, 7630.0], [121.0, 7274.0], [127.0, 7380.333333333333], [124.0, 7281.0], [133.0, 6939.5], [131.0, 7080.0], [130.0, 7093.0], [129.0, 6935.0], [128.0, 7101.0], [143.0, 7026.0], [142.0, 7038.0], [141.0, 6920.0], [140.0, 6939.0], [139.0, 6975.0], [138.0, 6939.0], [137.0, 7239.0], [151.0, 7304.0], [150.0, 7290.0], [148.0, 7460.5], [146.0, 6952.0], [145.0, 6975.0], [159.0, 6848.0], [158.0, 6912.0], [157.0, 7848.0], [156.0, 7796.0], [155.0, 7257.5], [153.0, 7464.0], [152.0, 7984.0], [166.0, 7901.0], [164.0, 7368.5], [162.0, 7024.0], [161.0, 7010.0], [175.0, 7829.0], [174.0, 7243.0], [172.0, 6827.0], [170.0, 7443.0], [169.0, 7015.0], [168.0, 7104.5], [183.0, 7957.0], [182.0, 7801.0], [181.0, 7870.0], [180.0, 6879.0], [178.0, 7036.0], [177.0, 7380.0], [191.0, 7046.5], [187.0, 6880.0], [186.0, 6897.0], [185.0, 7253.0], [199.0, 6966.0], [198.0, 6804.0], [196.0, 7418.0], [195.0, 6879.0], [194.0, 7100.0], [193.0, 6890.0], [207.0, 7691.0], [206.0, 7091.0], [204.0, 7375.0], [201.0, 7934.0], [200.0, 6793.0], [214.0, 7878.0], [212.0, 7400.5], [210.0, 7405.0], [209.0, 6939.0], [208.0, 7856.0], [223.0, 7792.0], [222.0, 7394.0], [221.0, 7096.0], [220.0, 6783.5], [219.0, 7099.0], [218.0, 7205.0], [231.0, 7749.0], [230.0, 7256.0], [229.0, 7827.0], [227.0, 6863.0], [226.0, 6880.0], [225.0, 6765.0], [224.0, 7820.0], [238.0, 7311.5], [236.0, 7481.666666666667], [233.0, 6795.0], [232.0, 7604.0], [247.0, 6947.0], [246.0, 6936.0], [245.0, 6917.0], [244.0, 6826.0], [243.0, 7527.0], [242.0, 6946.0], [241.0, 7797.666666666667], [255.0, 7153.0], [254.0, 7283.0], [253.0, 7603.0], [252.0, 6933.0], [251.0, 7237.0], [250.0, 6936.0], [249.0, 7405.0], [259.0, 6770.0], [269.0, 7159.0], [270.0, 7167.0], [268.0, 7166.5], [264.0, 6874.0], [263.0, 7196.0], [262.0, 7251.5], [260.0, 6930.0], [258.0, 7663.0], [257.0, 6832.0], [256.0, 7238.0], [287.0, 7258.25], [283.0, 7352.0], [282.0, 6955.0], [281.0, 7379.0], [279.0, 6913.0], [278.0, 6911.0], [277.0, 7439.0], [276.0, 7173.25], [272.0, 7033.0], [302.0, 6877.5], [303.0, 7322.0], [300.0, 7176.5], [298.0, 7171.0], [297.0, 6758.0], [296.0, 7248.333333333333], [293.0, 7013.0], [292.0, 7331.5], [290.0, 6959.5], [288.0, 7018.0], [318.0, 6788.0], [319.0, 6872.0], [317.0, 6938.0], [306.0, 6793.0], [305.0, 7792.0], [314.0, 6991.0], [313.0, 7146.0], [312.0, 6790.0], [311.0, 6998.0], [309.0, 7245.5], [308.0, 6987.0], [334.0, 7287.0], [335.0, 7511.0], [332.0, 7025.0], [323.0, 7385.0], [321.0, 7545.0], [320.0, 7820.0], [331.0, 6901.0], [329.0, 7529.0], [328.0, 7531.0], [327.0, 6812.0], [326.0, 7816.0], [325.0, 7145.0], [324.0, 7520.0], [350.0, 6848.0], [349.0, 7126.0], [348.0, 7094.5], [346.0, 6887.0], [344.0, 6793.0], [342.0, 7153.0], [340.0, 7054.5], [338.0, 7203.0], [355.0, 6793.0], [367.0, 7044.0], [366.0, 7217.428571428571], [363.0, 7064.0], [361.0, 7311.0], [358.0, 7347.0], [354.0, 7360.0], [353.0, 7233.5], [352.0, 7117.0], [382.0, 6909.0], [383.0, 6910.0], [381.0, 6897.0], [380.0, 7167.0], [379.0, 6931.0], [378.0, 7263.5], [376.0, 6961.0], [375.0, 7283.5], [369.0, 7026.0], [368.0, 7050.0], [371.0, 7577.0], [370.0, 7013.0], [373.0, 7218.0], [372.0, 6990.0], [398.0, 7137.0], [396.0, 7003.5], [394.0, 6875.0], [393.0, 7080.666666666667], [392.0, 6893.0], [391.0, 6895.0], [388.0, 6891.0], [386.0, 7229.5], [384.0, 6900.0], [412.0, 6739.666666666667], [415.0, 6835.0], [414.0, 6829.0], [413.0, 6512.0], [409.0, 6829.5], [407.0, 7343.0], [401.0, 6870.0], [400.0, 7259.5], [403.0, 7424.0], [402.0, 6865.0], [406.0, 7395.0], [405.0, 6861.0], [404.0, 7400.0], [429.0, 6770.0], [430.0, 6772.0], [428.0, 6762.0], [417.0, 7497.0], [416.0, 6801.0], [427.0, 7013.333333333333], [424.0, 7289.0], [423.0, 7472.0], [422.0, 7349.0], [421.0, 6782.0], [420.0, 6996.666666666667], [445.0, 6629.0], [447.0, 6926.5], [444.0, 6627.0], [435.0, 7016.0], [433.0, 7367.0], [432.0, 7033.0], [443.0, 6935.0], [441.0, 7344.0], [440.0, 7259.0], [439.0, 7168.0], [438.0, 6912.0], [437.0, 7169.0], [436.0, 7365.0], [463.0, 6635.0], [460.0, 6534.5], [458.0, 6562.0], [457.0, 6538.0], [456.0, 6686.5], [454.0, 6557.0], [453.0, 6869.5], [452.0, 6582.0], [451.0, 6914.0], [478.0, 6364.5], [479.0, 6198.0], [476.0, 6774.0], [475.0, 7224.0], [474.0, 7219.0], [473.0, 6540.666666666667], [471.0, 6538.0], [469.0, 6353.666666666667], [466.0, 6525.0], [465.0, 6538.0], [494.0, 6445.0], [495.0, 6168.0], [493.0, 6456.0], [492.0, 6234.0], [491.0, 6722.0], [490.0, 6503.0], [489.0, 6480.0], [487.0, 6345.0], [482.0, 6798.0], [480.0, 6194.0], [485.0, 6512.0], [484.0, 6495.0], [510.0, 6471.0], [511.0, 6471.0], [509.0, 6962.0], [508.0, 6472.0], [507.0, 6473.0], [506.0, 7044.0], [504.0, 6457.0], [503.0, 6748.666666666667], [498.0, 6468.5], [496.0, 6737.0], [500.0, 6472.5], [518.0, 6119.0], [536.0, 6301.0], [516.0, 6686.75], [534.0, 6100.0], [528.0, 6368.0], [524.0, 6978.0], [522.0, 6274.0], [520.0, 6416.0], [546.0, 6321.0], [570.0, 5935.0], [544.0, 6346.0], [558.0, 6254.0], [556.0, 6263.0], [554.0, 6050.0], [552.0, 6214.333333333333], [566.0, 6296.333333333333], [562.0, 6230.0], [560.0, 6106.0], [600.0, 5915.0], [606.0, 5826.5], [604.0, 5827.5], [602.0, 5833.0], [588.0, 6176.0], [580.0, 6175.0], [582.0, 6003.666666666667], [586.0, 6023.333333333333], [596.0, 5988.5], [594.0, 6142.0], [592.0, 6101.25], [610.0, 5810.0], [632.0, 5623.0], [638.0, 5666.0], [608.0, 5820.0], [612.0, 5741.0], [614.0, 5741.5], [622.0, 5715.0], [620.0, 5727.666666666667], [616.0, 5730.0], [630.0, 5634.0], [626.0, 6157.0], [624.0, 5645.0], [644.0, 5667.0], [670.0, 5545.0], [656.0, 5853.0], [666.0, 5914.0], [640.0, 6124.0], [642.0, 5671.5], [654.0, 5855.0], [650.0, 5592.0], [648.0, 5657.0], [662.0, 5881.0], [660.0, 5844.0], [658.0, 5850.0], [678.0, 5494.0], [702.0, 5692.0], [700.0, 5739.333333333333], [696.0, 5730.666666666667], [676.0, 5494.5], [674.0, 5501.0], [672.0, 5500.0], [686.0, 5467.0], [684.0, 5484.0], [732.0, 5600.5], [734.0, 5598.0], [724.0, 5634.0], [720.0, 5645.0], [730.0, 5707.0], [710.0, 5655.0], [708.0, 5668.0], [706.0, 5770.0], [718.0, 5648.0], [716.0, 5648.333333333333], [726.0, 5611.0], [754.0, 5682.0], [740.0, 5591.0], [738.0, 5695.0], [736.0, 5725.0], [756.0, 5684.0], [752.0, 5688.0], [796.0, 5560.0], [798.0, 5560.0], [784.0, 5603.0], [788.0, 5586.0], [786.0, 5586.0], [794.0, 5576.0], [792.0, 5583.0], [774.0, 5222.0], [770.0, 5642.333333333333], [782.0, 5476.0], [780.0, 5579.8], [778.0, 5600.0], [776.0, 5619.0], [790.0, 5582.0], [824.0, 5347.0], [828.0, 5476.0], [818.0, 5369.0], [816.0, 5371.0], [806.0, 5489.5], [800.0, 5557.0], [812.0, 5508.0], [808.0, 5421.0], [820.0, 5363.0], [858.0, 5418.0], [856.0, 5339.0], [862.0, 5414.666666666667], [832.0, 5475.0], [836.0, 5475.0], [838.0, 5457.0], [844.0, 5425.0], [842.0, 5428.0], [854.0, 5416.666666666667], [850.0, 5263.0], [888.0, 5172.0], [892.0, 5343.0], [894.0, 5624.0], [880.0, 5393.0], [870.0, 5230.0], [868.0, 5236.0], [866.0, 5448.5], [878.0, 5391.0], [876.0, 5397.0], [872.0, 5395.0], [884.0, 5349.0], [902.0, 5600.0], [926.0, 5331.666666666667], [922.0, 5754.0], [920.0, 5336.5], [900.0, 5913.0], [898.0, 5917.0], [896.0, 5584.5], [918.0, 5202.666666666667], [910.0, 5373.0], [908.0, 5512.0], [906.0, 5863.5], [904.0, 5628.0], [956.0, 5505.0], [958.0, 5494.5], [944.0, 5042.0], [946.0, 5038.0], [948.0, 5033.0], [954.0, 5185.0], [952.0, 5268.0], [934.0, 5065.0], [930.0, 5068.0], [928.0, 5078.0], [942.0, 5045.0], [940.0, 5046.0], [938.0, 5053.0], [936.0, 5060.0], [950.0, 5516.0], [986.0, 5414.0], [988.0, 5651.0], [990.0, 5181.5], [976.0, 5572.5], [984.0, 5729.0], [974.0, 5474.0], [962.0, 5495.0], [964.0, 5454.0], [972.0, 5540.0], [970.0, 5400.0], [968.0, 5521.0], [982.0, 5349.0], [980.0, 5703.5], [978.0, 5214.5], [1016.0, 4668.0], [1022.0, 5599.0], [1010.0, 5142.5], [1008.0, 4675.0], [1018.0, 4667.0], [992.0, 5181.5], [994.0, 5575.0], [996.0, 5640.0], [998.0, 5703.0], [1006.0, 5309.0], [1004.0, 5626.0], [1014.0, 5395.0], [1012.0, 4671.0], [1072.0, 5049.0], [1064.0, 5221.5], [1056.0, 4834.0], [1080.0, 5068.666666666667], [1024.0, 5672.0], [1028.0, 5588.0], [1032.0, 5663.0], [1036.0, 5612.5], [1052.0, 4841.0], [1068.0, 5512.0], [1060.0, 5310.0], [1136.0, 5206.0], [1148.0, 5190.0], [1120.0, 5317.0], [1144.0, 5221.0], [1088.0, 4798.0], [1092.0, 5189.5], [1100.0, 4784.0], [1096.0, 5491.0], [1116.0, 5338.5], [1108.0, 5153.0], [1128.0, 5220.0], [1124.0, 5227.0], [1208.0, 5216.0], [1212.0, 4838.5], [1184.0, 5361.0], [1188.0, 5104.0], [1192.0, 5098.0], [1200.0, 4868.0], [1164.0, 4468.0], [1160.0, 5225.666666666667], [1152.0, 5379.0], [1180.0, 5304.5], [1172.0, 5174.0], [1168.0, 5173.0], [1196.0, 5038.0], [1228.0, 4430.0], [1276.0, 4317.0], [1272.0, 4180.0], [1264.0, 4117.0], [1224.0, 4435.0], [1220.0, 4444.0], [1216.0, 4457.0], [1244.0, 4679.0], [1240.0, 4975.0], [1236.0, 4702.5], [1232.0, 4421.0], [1284.0, 4191.5], [1336.0, 4159.5], [1312.0, 4242.5], [1332.0, 3953.0], [1280.0, 4086.0], [1288.0, 4297.0], [1292.0, 4180.0], [1308.0, 4246.0], [1304.0, 4278.0], [1296.0, 4284.0], [1324.0, 4793.0], [1320.0, 4242.0], [1316.0, 4230.5], [1396.0, 4400.0], [1404.0, 4584.0], [1376.0, 4054.0], [1400.0, 3873.0], [1392.0, 3759.0], [1356.0, 4103.0], [1352.0, 3926.0], [1368.0, 3880.0], [1360.0, 4092.0], [1388.0, 4156.5], [1412.0, 3777.5], [1456.0, 4609.0], [1408.0, 4486.0], [1416.0, 3743.0], [1420.0, 4230.5], [1436.0, 4480.0], [1432.0, 3635.0], [1428.0, 3650.0], [1452.0, 3660.0], [1440.0, 3827.0], [1476.0, 3648.0], [1528.0, 3918.5], [1524.0, 3565.3333333333335], [1484.0, 4312.5], [1472.0, 4097.0], [1496.0, 3649.5], [1492.0, 3709.6666666666665], [1488.0, 4329.0], [1516.0, 3484.0], [1512.0, 3618.0], [1508.0, 3501.0], [1504.0, 3621.0], [1592.0, 3284.0], [1568.0, 3456.0], [1576.0, 3782.5], [1596.0, 3397.0], [1588.0, 3518.0], [1548.0, 3371.0], [1544.0, 3506.0], [1540.0, 3383.0], [1536.0, 3505.0], [1564.0, 3426.0], [1560.0, 3520.0], [1652.0, 3232.0], [1660.0, 3165.0], [1636.0, 4004.0], [1640.0, 3645.5], [1648.0, 3239.0], [1612.0, 3415.0], [1608.0, 3329.0], [1604.0, 3263.3333333333335], [1600.0, 3339.5], [1624.0, 3296.0], [1620.0, 3685.5], [1616.0, 3182.0], [1720.0, 3426.5], [1724.0, 3045.0], [1696.0, 4056.0], [1700.0, 3095.0], [1704.0, 3083.0], [1708.0, 3519.0], [1716.0, 3789.0], [1712.0, 3745.0], [1664.0, 3124.0], [1672.0, 3112.0], [1676.0, 3666.0], [1692.0, 3005.0], [1688.0, 3114.0], [1684.0, 3857.0], [1784.0, 2886.0], [1788.0, 2878.0], [1760.0, 3817.0], [1764.0, 2925.0], [1768.0, 2755.0], [1772.0, 3265.5], [1780.0, 2785.0], [1776.0, 2732.0], [1740.0, 2827.0], [1736.0, 3281.3333333333335], [1732.0, 2867.0], [1728.0, 2878.0], [1756.0, 2944.0], [1748.0, 3269.5], [1744.0, 2966.0], [1844.0, 2599.5], [1852.0, 2624.0], [1824.0, 2897.0], [1848.0, 3559.0], [1796.0, 3580.0], [1800.0, 2685.0], [1816.0, 2784.5], [1812.0, 2623.0], [1808.0, 2792.0], [1912.0, 3021.0], [1904.0, 3278.0], [1892.0, 2496.3333333333335], [1900.0, 2618.0], [1916.0, 2478.0], [1868.0, 2562.0], [1860.0, 2700.0], [1856.0, 2545.0], [1884.0, 2920.0], [1880.0, 2511.0], [1872.0, 3550.0], [1972.0, 3362.0], [1960.0, 3296.0], [1980.0, 2229.0], [1952.0, 3316.0], [1956.0, 3386.0], [1964.0, 3372.0], [1968.0, 3279.0], [1920.0, 2518.0], [1924.0, 2984.0], [1928.0, 2496.0], [1932.0, 3430.0], [1944.0, 2298.0], [1940.0, 3419.0], [1936.0, 3444.0], [2040.0, 3122.0], [2036.0, 3135.0], [2016.0, 2852.3333333333335], [2024.0, 2104.0], [2028.0, 3152.0], [2044.0, 3135.0], [1984.0, 3259.0], [1988.0, 3331.0], [1992.0, 2171.0], [1996.0, 2149.0], [2008.0, 3278.0], [2004.0, 2326.0], [2152.0, 1806.0], [2160.0, 1742.0], [2112.0, 1874.0], [2120.0, 2756.0], [2128.0, 2718.5], [2144.0, 1863.0], [2048.0, 3160.0], [2064.0, 3073.0], [2072.0, 3004.0], [2088.0, 2460.0], [2080.0, 3064.0], [2280.0, 2046.0], [2240.0, 1602.0], [2248.0, 1858.5], [2264.0, 1455.0], [2288.0, 1645.0], [2272.0, 2359.0], [2200.0, 1729.6666666666667], [2192.0, 1644.0], [2184.0, 1699.0], [2176.0, 1754.0], [2232.0, 1722.0], [2216.0, 1575.0], [2208.0, 1643.0], [2416.0, 987.5], [2408.0, 999.0], [2368.0, 1145.5], [2376.0, 1110.0], [2384.0, 1052.0], [2392.0, 1644.0], [2424.0, 941.0], [2400.0, 1053.0], [2304.0, 1388.0], [2320.0, 1615.0], [2352.0, 1478.5], [2344.0, 1260.0], [2336.0, 1362.0], [2440.0, 901.0], [2456.0, 1059.0], [2496.0, 582.0], [2448.0, 1376.0], [2488.0, 758.0], [2480.0, 794.0], [2472.0, 1322.5], [2464.0, 850.0], [2161.0, 1754.0], [2113.0, 2984.0], [2129.0, 2874.0], [2169.0, 1784.0], [2153.0, 1842.0], [2145.0, 2940.0], [2065.0, 3032.0], [2073.0, 2048.0], [2105.0, 2545.0], [2097.0, 2705.0], [2089.0, 1987.0], [2081.0, 2980.0], [2281.0, 1427.0], [2289.0, 1435.0], [2297.0, 2457.0], [2249.0, 1584.0], [2257.0, 1799.5], [2265.0, 2610.0], [2201.0, 1690.0], [2193.0, 1713.0], [2185.0, 1938.0], [2177.0, 1743.0], [2217.0, 1620.0], [2209.0, 2543.0], [2417.0, 1003.0], [2385.0, 2204.0], [2393.0, 1110.0], [2425.0, 1122.0], [2409.0, 2035.0], [2401.0, 1083.0], [2305.0, 1491.0], [2313.0, 1393.0], [2329.0, 1449.0], [2361.0, 1172.5], [2345.0, 1473.0], [2337.0, 1201.0], [2449.0, 904.0], [2457.0, 1089.0], [2441.0, 1392.0], [2433.0, 983.5], [2489.0, 1823.0], [2481.0, 1866.0], [2465.0, 768.0], [1033.0, 5583.0], [1061.0, 4827.0], [1081.0, 5005.0], [1073.0, 4562.0], [1029.0, 4889.0], [1025.0, 5692.0], [1053.0, 5616.0], [1049.0, 5636.0], [1045.0, 5633.0], [1041.0, 4965.2], [1069.0, 5588.0], [1065.0, 5282.0], [1137.0, 5348.0], [1125.0, 5402.0], [1145.0, 5193.0], [1141.0, 5276.0], [1117.0, 5534.0], [1093.0, 4795.0], [1097.0, 5563.0], [1113.0, 5176.0], [1105.0, 5207.5], [1133.0, 5292.5], [1129.0, 5215.0], [1205.0, 5149.0], [1185.0, 5115.0], [1201.0, 5207.0], [1157.0, 4788.5], [1161.0, 5145.0], [1165.0, 5447.0], [1173.0, 5390.0], [1169.0, 5132.0], [1197.0, 5215.0], [1193.0, 5099.0], [1189.0, 5099.0], [1269.0, 4334.5], [1265.0, 4119.0], [1277.0, 4311.0], [1249.0, 4957.0], [1253.0, 4257.5], [1273.0, 4107.0], [1217.0, 5041.0], [1221.0, 4439.0], [1225.0, 4433.0], [1229.0, 4429.0], [1241.0, 4399.0], [1237.0, 4984.0], [1233.0, 4418.0], [1261.0, 4348.5], [1257.0, 4645.5], [1333.0, 3953.0], [1341.0, 4012.6666666666665], [1317.0, 4230.0], [1337.0, 4759.0], [1293.0, 4065.0], [1289.0, 4072.0], [1285.0, 4077.0], [1281.0, 4197.5], [1309.0, 4039.0], [1301.0, 4171.5], [1325.0, 4184.0], [1393.0, 3794.0], [1401.0, 3869.0], [1381.0, 4324.666666666667], [1405.0, 4583.0], [1397.0, 3784.0], [1349.0, 3931.0], [1357.0, 4103.0], [1373.0, 3880.5], [1365.0, 4298.5], [1389.0, 4662.0], [1465.0, 4391.0], [1441.0, 4568.0], [1457.0, 4075.5], [1421.0, 3726.0], [1437.0, 3658.0], [1433.0, 4198.0], [1429.0, 3673.0], [1453.0, 3659.0], [1449.0, 4275.0], [1445.0, 3886.0], [1525.0, 3422.0], [1533.0, 3934.5], [1517.0, 3664.0], [1513.0, 3603.0], [1509.0, 3717.0], [1529.0, 3397.0], [1521.0, 3604.0], [1485.0, 3744.0], [1481.0, 4388.0], [1501.0, 3630.0], [1497.0, 3683.0], [1493.0, 3641.0], [1489.0, 4058.0], [1549.0, 3540.0], [1589.0, 4296.0], [1597.0, 4120.0], [1569.0, 3554.0], [1577.0, 3541.0], [1581.0, 3427.5], [1545.0, 3553.0], [1537.0, 3560.0], [1565.0, 3509.0], [1561.0, 3565.0], [1553.0, 3577.5], [1661.0, 3669.0], [1633.0, 3168.0], [1641.0, 3929.0], [1645.0, 3245.0], [1657.0, 3189.0], [1653.0, 3140.0], [1649.0, 3602.5], [1613.0, 3234.0], [1609.0, 3331.5], [1605.0, 3777.0], [1601.0, 3443.0], [1629.0, 3716.5], [1625.0, 3995.0], [1621.0, 4176.0], [1617.0, 3312.0], [1721.0, 2890.0], [1725.0, 2928.0], [1697.0, 2941.0], [1701.0, 3958.0], [1705.0, 3589.0], [1709.0, 2967.0], [1665.0, 3156.0], [1669.0, 3298.6666666666665], [1673.0, 3039.0], [1677.0, 3974.0], [1689.0, 3980.0], [1685.0, 3939.0], [1681.0, 3485.0], [1781.0, 2888.0], [1789.0, 3610.0], [1761.0, 3649.0], [1765.0, 2762.0], [1769.0, 3629.0], [1773.0, 2904.0], [1741.0, 2851.0], [1733.0, 2922.0], [1729.0, 3032.0], [1753.0, 3232.5], [1749.0, 3775.0], [1745.0, 3953.0], [1853.0, 3549.0], [1829.0, 2721.0], [1833.0, 3515.5], [1837.0, 3472.0], [1849.0, 3465.0], [1845.0, 2630.0], [1841.0, 3124.0], [1793.0, 3479.5], [1801.0, 2844.0], [1805.0, 3577.0], [1821.0, 2654.0], [1817.0, 3532.0], [1813.0, 3559.0], [1809.0, 2825.0], [1913.0, 3316.0], [1909.0, 2472.0], [1889.0, 3300.0], [1893.0, 2527.0], [1897.0, 3573.0], [1901.0, 2434.0], [1917.0, 2376.0], [1905.0, 2603.0], [1865.0, 3627.0], [1857.0, 2541.0], [1885.0, 2638.0], [1881.0, 3363.0], [1877.0, 3238.6666666666665], [1873.0, 3530.0], [1973.0, 3342.0], [1977.0, 3309.5], [1953.0, 3409.0], [1957.0, 3399.0], [1961.0, 3293.0], [1965.0, 3381.0], [1969.0, 3272.0], [1921.0, 3531.0], [1925.0, 2516.0], [1929.0, 3368.0], [1933.0, 3349.0], [1949.0, 3413.0], [1945.0, 3427.0], [1941.0, 2471.0], [1937.0, 2867.5], [2033.0, 3142.5], [2045.0, 3148.0], [2017.0, 2259.0], [2021.0, 2643.0], [2025.0, 3246.0], [2013.0, 2704.5], [1985.0, 3222.5], [1989.0, 3310.0], [1997.0, 2447.0], [2009.0, 3278.0], [2005.0, 3267.0], [2001.0, 2625.0], [2170.0, 1710.0], [2122.0, 2407.0], [2114.0, 2990.0], [2130.0, 2743.0], [2138.0, 2407.0], [2162.0, 2356.0], [2154.0, 1818.5], [2146.0, 1858.0], [2050.0, 3101.0], [2058.0, 2585.75], [2074.0, 1939.0], [2106.0, 3019.0], [2098.0, 2944.0], [2090.0, 1934.0], [2082.0, 2219.0], [2290.0, 1420.0], [2282.0, 1484.0], [2242.0, 2146.0], [2250.0, 1582.0], [2258.0, 1526.0], [2266.0, 2596.0], [2274.0, 1463.0], [2194.0, 1631.0], [2234.0, 1575.0], [2226.0, 1855.3333333333333], [2210.0, 2240.0], [2410.0, 1063.0], [2418.0, 1032.0], [2370.0, 1197.0], [2378.0, 1165.5], [2386.0, 1343.0], [2394.0, 2189.0], [2402.0, 1079.0], [2314.0, 2233.0], [2322.0, 1429.0], [2362.0, 1161.0], [2354.0, 1261.5], [2346.0, 1469.0], [2338.0, 1497.0], [2498.0, 918.0], [2482.0, 785.0], [2474.0, 1897.0], [2466.0, 1924.0], [2171.0, 1866.0], [2155.0, 1781.0], [2115.0, 2844.0], [2123.0, 2966.0], [2131.0, 2872.0], [2139.0, 2473.0], [2067.0, 1982.0], [2075.0, 3076.0], [2099.0, 3048.0], [2091.0, 2984.0], [2083.0, 1941.0], [2203.0, 1703.0], [2275.0, 2352.0], [2243.0, 1539.5], [2251.0, 2125.0], [2259.0, 1555.0], [2195.0, 1711.0], [2187.0, 1685.5], [2179.0, 1996.0], [2235.0, 1536.0], [2227.0, 1547.0], [2219.0, 1701.5], [2211.0, 1589.0], [2427.0, 977.0], [2371.0, 1291.0], [2379.0, 2141.0], [2387.0, 1058.0], [2395.0, 2174.0], [2419.0, 971.0], [2411.0, 978.0], [2403.0, 2137.0], [2307.0, 1336.5], [2315.0, 1351.0], [2323.0, 1327.0], [2331.0, 1367.5], [2363.0, 1415.0], [2355.0, 1199.0], [2339.0, 2235.0], [2443.0, 928.0], [2491.0, 1243.0], [2459.0, 824.0], [2435.0, 1062.5], [2475.0, 1891.0], [2467.0, 1761.0], [519.0, 6176.0], [531.0, 6110.0], [543.0, 6271.333333333334], [541.0, 6318.0], [517.0, 6122.0], [513.0, 6135.0], [535.0, 6038.0], [533.0, 6280.0], [527.0, 6381.0], [523.0, 6107.0], [569.0, 6129.333333333333], [573.0, 6222.5], [575.0, 6057.0], [571.0, 6230.0], [549.0, 6519.666666666667], [545.0, 6336.0], [557.0, 6254.0], [553.0, 6283.0], [563.0, 6110.5], [601.0, 5840.0], [607.0, 5822.0], [577.0, 6499.0], [581.0, 6913.0], [583.0, 5901.0], [587.0, 6742.0], [593.0, 6124.0], [637.0, 5753.0], [627.0, 5635.0], [635.0, 5624.0], [623.0, 5647.0], [609.0, 5813.0], [611.0, 5745.0], [615.0, 5737.0], [621.0, 5718.0], [617.0, 5727.0], [631.0, 5632.5], [629.0, 5633.0], [667.0, 5836.0], [665.0, 5840.0], [671.0, 5501.0], [657.0, 5844.0], [669.0, 5679.5], [655.0, 5853.0], [647.0, 5636.5], [645.0, 5604.0], [653.0, 5854.0], [651.0, 5643.0], [649.0, 5592.0], [659.0, 5844.0], [697.0, 5731.0], [703.0, 5790.5], [679.0, 5778.0], [693.0, 5750.5], [689.0, 5753.5], [687.0, 5467.0], [685.0, 5486.0], [683.0, 5563.5], [729.0, 5661.5], [735.0, 5647.0], [723.0, 5635.5], [721.0, 5639.0], [711.0, 5653.0], [709.0, 5662.0], [707.0, 5673.5], [705.0, 5684.0], [713.0, 5650.5], [727.0, 5607.0], [725.0, 5631.0], [743.0, 5643.0], [765.0, 5662.0], [763.0, 5666.0], [761.0, 5548.0], [741.0, 5590.0], [739.0, 5593.0], [751.0, 5692.5], [747.0, 5695.0], [745.0, 5643.5], [759.0, 5684.333333333333], [755.0, 5685.0], [753.0, 5683.0], [797.0, 5559.0], [785.0, 5600.0], [795.0, 5562.0], [793.0, 5576.0], [771.0, 5510.0], [783.0, 5476.0], [781.0, 5478.0], [789.0, 5594.0], [825.0, 5477.0], [819.0, 5368.0], [829.0, 5475.0], [827.0, 5474.0], [807.0, 5545.0], [805.0, 5556.5], [803.0, 5433.0], [801.0, 5560.5], [815.0, 5373.0], [813.0, 5507.0], [811.0, 5512.5], [809.0, 5547.0], [823.0, 5482.5], [821.0, 5498.0], [835.0, 5470.0], [863.0, 5413.0], [859.0, 5412.0], [857.0, 5251.0], [847.0, 5323.666666666667], [833.0, 5469.0], [837.0, 5449.0], [839.0, 5435.0], [843.0, 5278.0], [841.0, 5359.5], [851.0, 5413.0], [849.0, 5348.0], [871.0, 5400.0], [889.0, 4925.0], [881.0, 5683.0], [891.0, 5259.0], [869.0, 5403.0], [867.0, 4965.0], [865.0, 5409.0], [877.0, 5430.0], [875.0, 5403.0], [873.0, 5459.0], [887.0, 4924.0], [883.0, 4935.5], [921.0, 5287.0], [923.0, 5570.0], [903.0, 5907.0], [901.0, 5568.0], [899.0, 5838.0], [897.0, 5582.0], [915.0, 5117.0], [911.0, 5120.0], [953.0, 5497.0], [959.0, 5470.0], [945.0, 5041.0], [947.0, 5038.0], [955.0, 5478.0], [935.0, 5062.0], [933.0, 5273.5], [931.0, 5067.0], [929.0, 5074.0], [943.0, 5045.0], [941.0, 5046.0], [939.0, 5050.0], [937.0, 5055.0], [949.0, 5517.0], [985.0, 5656.0], [987.0, 5413.0], [961.0, 5469.5], [963.0, 5453.0], [973.0, 5776.0], [969.0, 5485.0], [983.0, 5734.0], [997.0, 5707.0], [1023.0, 5675.0], [1021.0, 5224.0], [1017.0, 4667.0], [1007.0, 4922.0], [993.0, 5645.0], [995.0, 5404.0], [999.0, 5420.0], [1003.0, 5160.0], [1001.0, 4686.5], [1015.0, 4671.0], [1011.0, 4670.0], [1026.0, 5667.0], [1082.0, 5288.0], [1086.0, 4880.0], [1058.0, 4831.0], [1054.0, 5304.0], [1030.0, 5353.0], [1034.0, 5344.0], [1050.0, 5617.0], [1046.0, 4853.0], [1042.0, 5659.0], [1070.0, 5272.0], [1066.0, 4562.0], [1062.0, 5523.0], [1090.0, 5187.0], [1146.0, 4457.0], [1142.0, 5195.0], [1138.0, 5204.0], [1118.0, 5232.0], [1094.0, 4793.0], [1114.0, 5144.0], [1110.0, 5152.0], [1106.0, 5158.0], [1130.0, 5508.0], [1126.0, 5402.0], [1206.0, 5198.0], [1202.0, 4527.0], [1214.0, 4459.0], [1186.0, 4974.0], [1190.0, 5019.0], [1194.0, 5330.0], [1210.0, 5090.0], [1166.0, 5135.0], [1162.0, 5147.0], [1154.0, 5411.0], [1182.0, 5304.0], [1178.0, 4977.0], [1198.0, 5212.0], [1266.0, 4346.0], [1274.0, 4327.0], [1230.0, 4427.0], [1226.0, 4433.0], [1238.0, 4975.0], [1234.0, 4418.0], [1262.0, 4350.0], [1258.0, 4935.0], [1254.0, 4359.0], [1250.0, 4959.0], [1290.0, 4292.0], [1318.0, 4024.0], [1338.0, 3944.0], [1334.0, 3952.0], [1310.0, 4245.0], [1282.0, 4305.0], [1286.0, 4299.0], [1294.0, 4287.0], [1306.0, 4191.0], [1302.0, 4253.0], [1298.0, 4280.0], [1322.0, 4207.5], [1314.0, 4248.5], [1394.0, 3993.0], [1406.0, 4291.0], [1378.0, 4004.0], [1398.0, 3877.0], [1354.0, 4115.0], [1350.0, 4136.0], [1346.0, 4072.0], [1374.0, 3869.0], [1370.0, 4286.0], [1366.0, 3889.0], [1362.0, 4091.0], [1390.0, 3768.0], [1458.0, 3704.0], [1442.0, 3822.0], [1470.0, 3647.75], [1466.0, 3963.5], [1438.0, 3752.0], [1410.0, 3718.5], [1418.0, 4135.5], [1422.0, 3725.0], [1434.0, 3667.0], [1430.0, 4494.0], [1426.0, 4597.25], [1454.0, 3567.0], [1446.0, 3729.0], [1482.0, 3673.0], [1510.0, 3529.0], [1534.0, 3392.0], [1530.0, 3410.0], [1518.0, 3615.0], [1474.0, 4389.0], [1502.0, 3627.3333333333335], [1494.0, 3564.0], [1490.0, 3742.0], [1506.0, 3669.5], [1594.0, 3461.0], [1590.0, 4368.0], [1574.0, 3680.25], [1570.0, 3549.0], [1578.0, 3439.0], [1582.0, 3543.0], [1586.0, 3713.0], [1550.0, 3494.0], [1542.0, 3384.0], [1538.0, 4393.0], [1566.0, 4189.0], [1562.0, 3563.0], [1558.0, 3900.0], [1658.0, 3608.0], [1654.0, 3229.0], [1634.0, 3283.0], [1638.0, 3464.5], [1646.0, 3184.0], [1662.0, 3160.0], [1650.0, 3235.0], [1614.0, 3830.0], [1610.0, 3198.0], [1606.0, 3427.0], [1602.0, 3260.0], [1630.0, 3118.0], [1622.0, 3298.0], [1618.0, 3308.0], [1718.0, 3202.0], [1702.0, 3821.0], [1698.0, 3830.0], [1726.0, 2910.0], [1714.0, 3478.5], [1666.0, 3038.0], [1670.0, 3932.0], [1678.0, 3663.0], [1694.0, 2969.0], [1686.0, 3118.0], [1782.0, 3326.0], [1766.0, 2922.0], [1762.0, 2927.0], [1770.0, 3350.0], [1790.0, 2869.0], [1778.0, 3367.5], [1742.0, 2966.0], [1738.0, 2969.0], [1758.0, 2860.5], [1754.0, 3682.0], [1750.0, 2796.0], [1746.0, 2963.0], [1842.0, 2556.0], [1830.0, 2782.0], [1826.0, 2650.5], [1834.0, 2674.0], [1838.0, 2639.0], [1854.0, 2610.0], [1794.0, 2702.0], [1798.0, 2792.0], [1802.0, 2934.0], [1806.0, 2831.0], [1822.0, 2681.0], [1818.0, 2764.0], [1814.0, 2715.0], [1810.0, 2787.0], [1870.0, 3581.0], [1894.0, 2723.0], [1918.0, 2373.0], [1890.0, 2443.0], [1898.0, 3015.0], [1866.0, 3543.0], [1862.0, 2506.5], [1886.0, 2475.0], [1882.0, 2450.0], [1878.0, 3516.0], [1874.0, 3614.0], [1974.0, 3273.0], [1978.0, 3354.0], [1954.0, 3406.0], [1958.0, 3298.0], [1962.0, 3386.0], [1966.0, 2417.0], [1970.0, 2294.0], [1922.0, 2386.0], [1926.0, 3476.0], [1930.0, 3434.0], [1934.0, 3375.0], [1946.0, 3325.0], [1942.0, 3342.0], [1938.0, 2289.0], [2042.0, 3205.5], [2038.0, 2658.5], [2018.0, 3173.0], [2022.0, 2096.0], [2026.0, 3244.0], [2030.0, 2705.0], [1986.0, 3331.0], [1990.0, 3323.0], [1994.0, 2732.5], [1998.0, 3230.0], [2010.0, 3188.0], [2002.0, 3283.0], [2172.0, 1678.0], [2116.0, 2915.0], [2132.0, 1893.0], [2140.0, 1980.0], [2164.0, 2360.5], [2052.0, 2659.0], [2060.0, 2030.5], [2068.0, 1954.0], [2076.0, 1950.0], [2108.0, 2967.0], [2100.0, 3028.0], [2092.0, 3044.0], [2084.0, 1948.0], [2292.0, 1464.0], [2284.0, 1451.5], [2252.0, 1675.0], [2244.0, 1522.0], [2260.0, 1477.0], [2300.0, 1591.5], [2276.0, 1448.0], [2204.0, 1891.0], [2196.0, 1643.0], [2188.0, 2603.0], [2180.0, 1670.0], [2236.0, 2162.0], [2228.0, 2177.0], [2220.0, 1561.0], [2212.0, 1651.0], [2372.0, 1169.0], [2380.0, 1146.0], [2428.0, 2054.0], [2308.0, 1373.0], [2316.0, 2230.0], [2324.0, 1236.0], [2332.0, 1296.0], [2364.0, 1276.0], [2348.0, 1259.5], [2444.0, 1884.0], [2452.0, 1788.6666666666667], [2500.0, 473.5], [2460.0, 1055.0], [2436.0, 980.0], [2492.0, 1675.0], [2484.0, 1321.0], [2468.0, 835.0], [2173.0, 2589.0], [2117.0, 2838.0], [2125.0, 2877.0], [2133.0, 2941.0], [2141.0, 1825.0], [2157.0, 1780.0], [2149.0, 2197.0], [2061.0, 3040.0], [2069.0, 2048.0], [2077.0, 3087.0], [2109.0, 2861.0], [2101.0, 3045.0], [2093.0, 1908.0], [2085.0, 2015.0], [2301.0, 1318.0], [2253.0, 1558.0], [2261.0, 2372.0], [2269.0, 1526.3333333333333], [2293.0, 1493.0], [2285.0, 1392.0], [2205.0, 1617.0], [2197.0, 1688.0], [2189.0, 1722.0], [2181.0, 1739.0], [2237.0, 1812.0], [2229.0, 1625.0], [2221.0, 1649.0], [2213.0, 1590.0], [2421.0, 1131.5], [2413.0, 1138.0], [2373.0, 1802.0], [2381.0, 1260.0], [2389.0, 1078.5], [2429.0, 998.0], [2405.0, 1019.0], [2309.0, 1583.0], [2317.0, 1909.0], [2325.0, 1253.0], [2365.0, 1126.0], [2357.0, 2035.5], [2349.0, 1317.0], [2341.0, 1296.5], [2445.0, 1947.0], [2461.0, 1053.0], [2493.0, 740.0], [2485.0, 1699.0], [2477.0, 919.5], [1075.0, 4902.5], [1087.0, 5033.5], [1059.0, 5606.5], [1079.0, 5540.0], [1027.0, 4891.0], [1055.0, 4835.0], [1051.0, 5617.0], [1047.0, 4853.0], [1043.0, 5635.0], [1067.0, 4815.0], [1139.0, 5198.0], [1147.0, 5188.0], [1151.0, 5237.333333333333], [1123.0, 5287.0], [1127.0, 5221.0], [1095.0, 4792.0], [1103.0, 5318.0], [1099.0, 5484.5], [1111.0, 5199.0], [1107.0, 5152.0], [1135.0, 5205.0], [1131.0, 5497.0], [1215.0, 5198.0], [1191.0, 5050.0], [1203.0, 5184.0], [1183.0, 5365.0], [1155.0, 5170.0], [1163.0, 4393.0], [1167.0, 5417.0], [1175.0, 4678.5], [1195.0, 5217.0], [1187.0, 5277.0], [1267.0, 4340.0], [1279.0, 4310.0], [1251.0, 4144.0], [1255.0, 4359.0], [1247.0, 4854.333333333333], [1219.0, 4743.666666666667], [1223.0, 4439.5], [1227.0, 4432.0], [1231.0, 4423.0], [1243.0, 4395.0], [1239.0, 4692.0], [1263.0, 4349.0], [1259.0, 4354.0], [1295.0, 4287.0], [1319.0, 4228.0], [1343.0, 3939.5], [1331.0, 4454.4], [1287.0, 4296.0], [1307.0, 4046.0], [1303.0, 4071.0], [1299.0, 4281.0], [1327.0, 4490.0], [1323.0, 3979.0], [1403.0, 4160.0], [1407.0, 3690.0], [1387.0, 4026.0], [1383.0, 4140.5], [1399.0, 3979.0], [1395.0, 3880.0], [1375.0, 4395.0], [1347.0, 4142.0], [1355.0, 4105.0], [1351.0, 4133.0], [1359.0, 4098.0], [1371.0, 3878.0], [1367.0, 3890.0], [1363.0, 4251.0], [1391.0, 3798.0], [1415.0, 4080.6666666666665], [1447.0, 3709.0], [1467.0, 4299.0], [1459.0, 3755.0], [1439.0, 3747.0], [1435.0, 4190.0], [1431.0, 3765.0], [1427.0, 3772.0], [1451.0, 4067.5], [1443.0, 3601.0], [1507.0, 3719.0], [1519.0, 3442.0], [1515.0, 3575.0], [1511.0, 3606.0], [1531.0, 4258.0], [1527.0, 3635.0], [1487.0, 3536.0], [1479.0, 3927.3333333333335], [1475.0, 4239.5], [1503.0, 4376.0], [1499.0, 3730.0], [1591.0, 3285.0], [1587.0, 3517.0], [1579.0, 3533.0], [1583.0, 3526.0], [1595.0, 3347.0], [1551.0, 4370.0], [1547.0, 4086.0], [1543.0, 3776.0], [1539.0, 3506.0], [1567.0, 3906.0], [1559.0, 4217.0], [1555.0, 3421.0], [1655.0, 3029.0], [1651.0, 3234.0], [1663.0, 3159.0], [1635.0, 3180.0], [1643.0, 3247.5], [1659.0, 2999.0], [1615.0, 4140.0], [1611.0, 3766.0], [1631.0, 3127.0], [1627.0, 3212.5], [1723.0, 3523.5], [1727.0, 3926.0], [1699.0, 3074.0], [1703.0, 3128.0], [1707.0, 3023.5], [1711.0, 3032.5], [1715.0, 2963.0], [1695.0, 2988.0], [1671.0, 3147.0], [1675.0, 3087.5], [1679.0, 3970.0], [1691.0, 2972.5], [1687.0, 3116.0], [1683.0, 3048.0], [1787.0, 2824.0], [1791.0, 2707.0], [1763.0, 2925.0], [1767.0, 3658.0], [1775.0, 2745.0], [1783.0, 2722.0], [1779.0, 3847.0], [1743.0, 2966.0], [1739.0, 2997.0], [1731.0, 3031.0], [1759.0, 3676.0], [1755.0, 2836.0], [1751.0, 2952.0], [1851.0, 3509.0], [1847.0, 3517.5], [1855.0, 3665.0], [1827.0, 3515.0], [1831.0, 3524.0], [1835.0, 3510.0], [1839.0, 3588.0], [1823.0, 2616.0], [1795.0, 3695.0], [1799.0, 2847.0], [1803.0, 2665.0], [1807.0, 2828.0], [1819.0, 2908.0], [1811.0, 3557.0], [1907.0, 2423.0], [1911.0, 2494.5], [1915.0, 3057.0], [1895.0, 2453.0], [1899.0, 3345.0], [1903.0, 2646.0], [1871.0, 3478.0], [1867.0, 2493.0], [1863.0, 2510.0], [1859.0, 2651.0], [1887.0, 2468.0], [1879.0, 2458.0], [1979.0, 3277.0], [1955.0, 2281.0], [1959.0, 3396.0], [1963.0, 3285.0], [1967.0, 3375.0], [1975.0, 3259.0], [1971.0, 3366.0], [1951.0, 2974.5], [1923.0, 3281.0], [1927.0, 2388.0], [1931.0, 3455.0], [1947.0, 3324.0], [1943.0, 3333.0], [2039.0, 3216.0], [2023.0, 3166.0], [2047.0, 2545.0], [2019.0, 3258.0], [2027.0, 3153.0], [2031.0, 3233.0], [2035.0, 2800.5], [1987.0, 3311.0], [1991.0, 3222.0], [1995.0, 2192.0], [1999.0, 3285.0], [2011.0, 3254.0], [2007.0, 3205.5], [2003.0, 2220.0], [2158.0, 1770.0], [2150.0, 1789.0], [2166.0, 1742.0], [2118.0, 2897.0], [2134.0, 2469.0], [2054.0, 3089.5], [2062.0, 3129.0], [2070.0, 2249.0], [2078.0, 3013.0], [2110.0, 3007.0], [2102.0, 2889.0], [2294.0, 1421.0], [2302.0, 1347.0], [2246.0, 1650.0], [2262.0, 1470.0], [2270.0, 1735.0], [2286.0, 1990.0], [2190.0, 2658.0], [2182.0, 1652.0], [2230.0, 2173.0], [2214.0, 1661.0], [2430.0, 946.0], [2382.0, 1206.0], [2390.0, 1493.0], [2398.0, 1752.3333333333333], [2422.0, 997.0], [2414.0, 1041.0], [2366.0, 1182.0], [2310.0, 1334.0], [2318.0, 1266.0], [2326.0, 1247.0], [2334.0, 1308.5], [2358.0, 1765.0], [2350.0, 1241.0], [2342.0, 1336.0], [2438.0, 1969.0], [2446.0, 958.0], [2462.0, 1850.0], [2454.0, 1545.0], [2494.0, 806.0], [2486.0, 1851.0], [2478.0, 806.0], [2470.0, 1371.5], [2159.0, 1818.0], [2175.0, 2599.0], [2119.0, 2887.0], [2127.0, 2880.0], [2135.0, 2860.0], [2167.0, 2389.0], [2111.0, 2050.0], [2071.0, 2144.0], [2079.0, 2029.0], [2103.0, 3020.0], [2095.0, 1930.0], [2087.0, 3049.0], [2295.0, 1523.0], [2255.0, 1614.0], [2263.0, 1528.0], [2271.0, 1436.0], [2287.0, 1508.0], [2279.0, 1574.6666666666667], [2207.0, 1955.0], [2191.0, 1636.0], [2183.0, 1734.0], [2239.0, 1569.0], [2231.0, 1582.0], [2223.0, 1887.0], [2215.0, 2226.0], [2407.0, 1117.6666666666667], [2423.0, 931.0], [2431.0, 1912.0], [2383.0, 1139.0], [2399.0, 1043.0], [2311.0, 1435.0], [2327.0, 2360.0], [2335.0, 1290.0], [2359.0, 1324.0], [2343.0, 1331.0], [2495.0, 1719.0], [2463.0, 1843.0], [2455.0, 823.0], [2439.0, 895.0], [2487.0, 1848.0], [2479.0, 796.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}, {"data": [[1251.1364000000003, 4502.248400000005]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20583.333333333332, "minX": 1.7555925E12, "maxY": 29708.333333333332, "series": [{"data": [[1.7555925E12, 29708.333333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7555925E12, 20583.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555925E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4502.248400000005, "minX": 1.7555925E12, "maxY": 4502.248400000005, "series": [{"data": [[1.7555925E12, 4502.248400000005]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555925E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4502.220799999992, "minX": 1.7555925E12, "maxY": 4502.220799999992, "series": [{"data": [[1.7555925E12, 4502.220799999992]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555925E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4350.854400000007, "minX": 1.7555925E12, "maxY": 4350.854400000007, "series": [{"data": [[1.7555925E12, 4350.854400000007]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555925E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 393.0, "minX": 1.7555925E12, "maxY": 8100.0, "series": [{"data": [[1.7555925E12, 8100.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7555925E12, 7028.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7555925E12, 7993.939999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7555925E12, 7351.849999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7555925E12, 393.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7555925E12, 4466.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555925E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1009.5, "minX": 86.0, "maxY": 7024.0, "series": [{"data": [[524.0, 7024.0], [297.0, 5691.0], [86.0, 1009.5], [347.0, 1690.0], [376.0, 3756.0], [397.0, 3069.0], [473.0, 5212.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 524.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1009.5, "minX": 86.0, "maxY": 7024.0, "series": [{"data": [[524.0, 7024.0], [297.0, 5691.0], [86.0, 1009.5], [347.0, 1690.0], [376.0, 3756.0], [397.0, 3069.0], [473.0, 5212.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 524.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7555925E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7555925E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555925E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7555925E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7555925E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555925E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7555925E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7555925E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555925E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7555925E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7555925E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555925E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

