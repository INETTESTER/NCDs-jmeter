/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 234.0, "minX": 0.0, "maxY": 8314.0, "series": [{"data": [[0.0, 234.0], [0.1, 298.0], [0.2, 339.0], [0.3, 358.0], [0.4, 408.0], [0.5, 450.0], [0.6, 468.0], [0.7, 475.0], [0.8, 508.0], [0.9, 532.0], [1.0, 537.0], [1.1, 567.0], [1.2, 635.0], [1.3, 701.0], [1.4, 706.0], [1.5, 772.0], [1.6, 816.0], [1.7, 817.0], [1.8, 865.0], [1.9, 875.0], [2.0, 906.0], [2.1, 939.0], [2.2, 971.0], [2.3, 1021.0], [2.4, 1046.0], [2.5, 1058.0], [2.6, 1107.0], [2.7, 1163.0], [2.8, 1184.0], [2.9, 1218.0], [3.0, 1238.0], [3.1, 1264.0], [3.2, 1280.0], [3.3, 1282.0], [3.4, 1289.0], [3.5, 1299.0], [3.6, 1312.0], [3.7, 1335.0], [3.8, 1358.0], [3.9, 1360.0], [4.0, 1370.0], [4.1, 1371.0], [4.2, 1380.0], [4.3, 1407.0], [4.4, 1431.0], [4.5, 1434.0], [4.6, 1444.0], [4.7, 1446.0], [4.8, 1453.0], [4.9, 1454.0], [5.0, 1465.0], [5.1, 1495.0], [5.2, 1513.0], [5.3, 1525.0], [5.4, 1557.0], [5.5, 1560.0], [5.6, 1573.0], [5.7, 1579.0], [5.8, 1606.0], [5.9, 1615.0], [6.0, 1631.0], [6.1, 1708.0], [6.2, 1802.0], [6.3, 1819.0], [6.4, 1839.0], [6.5, 1866.0], [6.6, 1906.0], [6.7, 1987.0], [6.8, 2012.0], [6.9, 2033.0], [7.0, 2046.0], [7.1, 2098.0], [7.2, 2102.0], [7.3, 2116.0], [7.4, 2145.0], [7.5, 2172.0], [7.6, 2177.0], [7.7, 2202.0], [7.8, 2203.0], [7.9, 2219.0], [8.0, 2255.0], [8.1, 2263.0], [8.2, 2326.0], [8.3, 2422.0], [8.4, 2497.0], [8.5, 2564.0], [8.6, 2665.0], [8.7, 2708.0], [8.8, 2736.0], [8.9, 2756.0], [9.0, 2764.0], [9.1, 2795.0], [9.2, 2831.0], [9.3, 2927.0], [9.4, 2944.0], [9.5, 2979.0], [9.6, 3013.0], [9.7, 3049.0], [9.8, 3065.0], [9.9, 3071.0], [10.0, 3089.0], [10.1, 3109.0], [10.2, 3140.0], [10.3, 3155.0], [10.4, 3185.0], [10.5, 3203.0], [10.6, 3215.0], [10.7, 3231.0], [10.8, 3243.0], [10.9, 3264.0], [11.0, 3277.0], [11.1, 3294.0], [11.2, 3308.0], [11.3, 3320.0], [11.4, 3340.0], [11.5, 3350.0], [11.6, 3367.0], [11.7, 3374.0], [11.8, 3435.0], [11.9, 3441.0], [12.0, 3444.0], [12.1, 3446.0], [12.2, 3467.0], [12.3, 3492.0], [12.4, 3542.0], [12.5, 3572.0], [12.6, 3590.0], [12.7, 3624.0], [12.8, 3631.0], [12.9, 3635.0], [13.0, 3640.0], [13.1, 3651.0], [13.2, 3670.0], [13.3, 3686.0], [13.4, 3705.0], [13.5, 3739.0], [13.6, 3750.0], [13.7, 3764.0], [13.8, 3773.0], [13.9, 3779.0], [14.0, 3784.0], [14.1, 3797.0], [14.2, 3800.0], [14.3, 3810.0], [14.4, 3823.0], [14.5, 3825.0], [14.6, 3869.0], [14.7, 3872.0], [14.8, 3884.0], [14.9, 3909.0], [15.0, 3966.0], [15.1, 3986.0], [15.2, 3993.0], [15.3, 3994.0], [15.4, 3996.0], [15.5, 4023.0], [15.6, 4040.0], [15.7, 4068.0], [15.8, 4104.0], [15.9, 4126.0], [16.0, 4142.0], [16.1, 4143.0], [16.2, 4152.0], [16.3, 4161.0], [16.4, 4169.0], [16.5, 4186.0], [16.6, 4198.0], [16.7, 4215.0], [16.8, 4233.0], [16.9, 4244.0], [17.0, 4249.0], [17.1, 4257.0], [17.2, 4270.0], [17.3, 4277.0], [17.4, 4286.0], [17.5, 4293.0], [17.6, 4296.0], [17.7, 4299.0], [17.8, 4301.0], [17.9, 4321.0], [18.0, 4331.0], [18.1, 4349.0], [18.2, 4358.0], [18.3, 4364.0], [18.4, 4373.0], [18.5, 4376.0], [18.6, 4381.0], [18.7, 4384.0], [18.8, 4389.0], [18.9, 4403.0], [19.0, 4412.0], [19.1, 4419.0], [19.2, 4420.0], [19.3, 4423.0], [19.4, 4427.0], [19.5, 4437.0], [19.6, 4448.0], [19.7, 4466.0], [19.8, 4476.0], [19.9, 4489.0], [20.0, 4492.0], [20.1, 4496.0], [20.2, 4500.0], [20.3, 4512.0], [20.4, 4515.0], [20.5, 4517.0], [20.6, 4522.0], [20.7, 4532.0], [20.8, 4534.0], [20.9, 4538.0], [21.0, 4541.0], [21.1, 4551.0], [21.2, 4560.0], [21.3, 4569.0], [21.4, 4579.0], [21.5, 4582.0], [21.6, 4603.0], [21.7, 4608.0], [21.8, 4611.0], [21.9, 4618.0], [22.0, 4626.0], [22.1, 4640.0], [22.2, 4647.0], [22.3, 4659.0], [22.4, 4666.0], [22.5, 4671.0], [22.6, 4674.0], [22.7, 4678.0], [22.8, 4682.0], [22.9, 4689.0], [23.0, 4693.0], [23.1, 4708.0], [23.2, 4718.0], [23.3, 4721.0], [23.4, 4725.0], [23.5, 4733.0], [23.6, 4736.0], [23.7, 4745.0], [23.8, 4750.0], [23.9, 4751.0], [24.0, 4754.0], [24.1, 4757.0], [24.2, 4763.0], [24.3, 4773.0], [24.4, 4790.0], [24.5, 4798.0], [24.6, 4805.0], [24.7, 4810.0], [24.8, 4812.0], [24.9, 4820.0], [25.0, 4830.0], [25.1, 4831.0], [25.2, 4837.0], [25.3, 4846.0], [25.4, 4852.0], [25.5, 4855.0], [25.6, 4876.0], [25.7, 4878.0], [25.8, 4881.0], [25.9, 4888.0], [26.0, 4898.0], [26.1, 4907.0], [26.2, 4919.0], [26.3, 4937.0], [26.4, 4943.0], [26.5, 4948.0], [26.6, 4950.0], [26.7, 4956.0], [26.8, 4957.0], [26.9, 4961.0], [27.0, 4966.0], [27.1, 4971.0], [27.2, 4973.0], [27.3, 4983.0], [27.4, 4996.0], [27.5, 5001.0], [27.6, 5006.0], [27.7, 5016.0], [27.8, 5022.0], [27.9, 5024.0], [28.0, 5026.0], [28.1, 5033.0], [28.2, 5036.0], [28.3, 5040.0], [28.4, 5041.0], [28.5, 5046.0], [28.6, 5052.0], [28.7, 5082.0], [28.8, 5090.0], [28.9, 5093.0], [29.0, 5100.0], [29.1, 5106.0], [29.2, 5115.0], [29.3, 5125.0], [29.4, 5135.0], [29.5, 5144.0], [29.6, 5146.0], [29.7, 5155.0], [29.8, 5168.0], [29.9, 5170.0], [30.0, 5177.0], [30.1, 5179.0], [30.2, 5182.0], [30.3, 5189.0], [30.4, 5189.0], [30.5, 5204.0], [30.6, 5221.0], [30.7, 5229.0], [30.8, 5240.0], [30.9, 5242.0], [31.0, 5249.0], [31.1, 5254.0], [31.2, 5255.0], [31.3, 5257.0], [31.4, 5258.0], [31.5, 5266.0], [31.6, 5267.0], [31.7, 5283.0], [31.8, 5284.0], [31.9, 5290.0], [32.0, 5292.0], [32.1, 5299.0], [32.2, 5305.0], [32.3, 5317.0], [32.4, 5318.0], [32.5, 5325.0], [32.6, 5335.0], [32.7, 5343.0], [32.8, 5345.0], [32.9, 5349.0], [33.0, 5351.0], [33.1, 5355.0], [33.2, 5358.0], [33.3, 5364.0], [33.4, 5370.0], [33.5, 5371.0], [33.6, 5373.0], [33.7, 5381.0], [33.8, 5388.0], [33.9, 5391.0], [34.0, 5395.0], [34.1, 5405.0], [34.2, 5408.0], [34.3, 5412.0], [34.4, 5413.0], [34.5, 5419.0], [34.6, 5423.0], [34.7, 5431.0], [34.8, 5439.0], [34.9, 5444.0], [35.0, 5448.0], [35.1, 5453.0], [35.2, 5457.0], [35.3, 5460.0], [35.4, 5472.0], [35.5, 5474.0], [35.6, 5475.0], [35.7, 5481.0], [35.8, 5486.0], [35.9, 5493.0], [36.0, 5495.0], [36.1, 5508.0], [36.2, 5513.0], [36.3, 5519.0], [36.4, 5520.0], [36.5, 5533.0], [36.6, 5553.0], [36.7, 5556.0], [36.8, 5568.0], [36.9, 5573.0], [37.0, 5574.0], [37.1, 5575.0], [37.2, 5579.0], [37.3, 5583.0], [37.4, 5587.0], [37.5, 5589.0], [37.6, 5592.0], [37.7, 5603.0], [37.8, 5609.0], [37.9, 5610.0], [38.0, 5614.0], [38.1, 5621.0], [38.2, 5624.0], [38.3, 5635.0], [38.4, 5640.0], [38.5, 5643.0], [38.6, 5651.0], [38.7, 5655.0], [38.8, 5657.0], [38.9, 5662.0], [39.0, 5669.0], [39.1, 5673.0], [39.2, 5677.0], [39.3, 5684.0], [39.4, 5691.0], [39.5, 5694.0], [39.6, 5698.0], [39.7, 5705.0], [39.8, 5707.0], [39.9, 5711.0], [40.0, 5714.0], [40.1, 5720.0], [40.2, 5721.0], [40.3, 5728.0], [40.4, 5732.0], [40.5, 5734.0], [40.6, 5736.0], [40.7, 5743.0], [40.8, 5743.0], [40.9, 5748.0], [41.0, 5753.0], [41.1, 5754.0], [41.2, 5755.0], [41.3, 5758.0], [41.4, 5760.0], [41.5, 5768.0], [41.6, 5768.0], [41.7, 5773.0], [41.8, 5782.0], [41.9, 5789.0], [42.0, 5792.0], [42.1, 5797.0], [42.2, 5804.0], [42.3, 5804.0], [42.4, 5807.0], [42.5, 5816.0], [42.6, 5819.0], [42.7, 5820.0], [42.8, 5822.0], [42.9, 5831.0], [43.0, 5857.0], [43.1, 5867.0], [43.2, 5869.0], [43.3, 5870.0], [43.4, 5880.0], [43.5, 5882.0], [43.6, 5886.0], [43.7, 5890.0], [43.8, 5894.0], [43.9, 5900.0], [44.0, 5903.0], [44.1, 5905.0], [44.2, 5910.0], [44.3, 5916.0], [44.4, 5919.0], [44.5, 5932.0], [44.6, 5935.0], [44.7, 5946.0], [44.8, 5947.0], [44.9, 5951.0], [45.0, 5953.0], [45.1, 5957.0], [45.2, 5960.0], [45.3, 5965.0], [45.4, 5969.0], [45.5, 5975.0], [45.6, 5980.0], [45.7, 5994.0], [45.8, 5994.0], [45.9, 5998.0], [46.0, 6000.0], [46.1, 6008.0], [46.2, 6020.0], [46.3, 6025.0], [46.4, 6029.0], [46.5, 6032.0], [46.6, 6038.0], [46.7, 6055.0], [46.8, 6057.0], [46.9, 6067.0], [47.0, 6070.0], [47.1, 6078.0], [47.2, 6079.0], [47.3, 6083.0], [47.4, 6086.0], [47.5, 6094.0], [47.6, 6101.0], [47.7, 6105.0], [47.8, 6107.0], [47.9, 6110.0], [48.0, 6111.0], [48.1, 6112.0], [48.2, 6118.0], [48.3, 6124.0], [48.4, 6131.0], [48.5, 6132.0], [48.6, 6135.0], [48.7, 6146.0], [48.8, 6148.0], [48.9, 6150.0], [49.0, 6156.0], [49.1, 6158.0], [49.2, 6161.0], [49.3, 6181.0], [49.4, 6183.0], [49.5, 6190.0], [49.6, 6197.0], [49.7, 6200.0], [49.8, 6203.0], [49.9, 6205.0], [50.0, 6214.0], [50.1, 6222.0], [50.2, 6231.0], [50.3, 6241.0], [50.4, 6241.0], [50.5, 6249.0], [50.6, 6252.0], [50.7, 6261.0], [50.8, 6264.0], [50.9, 6273.0], [51.0, 6283.0], [51.1, 6290.0], [51.2, 6294.0], [51.3, 6294.0], [51.4, 6295.0], [51.5, 6300.0], [51.6, 6317.0], [51.7, 6320.0], [51.8, 6323.0], [51.9, 6330.0], [52.0, 6331.0], [52.1, 6335.0], [52.2, 6336.0], [52.3, 6340.0], [52.4, 6343.0], [52.5, 6345.0], [52.6, 6353.0], [52.7, 6357.0], [52.8, 6358.0], [52.9, 6361.0], [53.0, 6364.0], [53.1, 6366.0], [53.2, 6369.0], [53.3, 6375.0], [53.4, 6382.0], [53.5, 6393.0], [53.6, 6393.0], [53.7, 6401.0], [53.8, 6404.0], [53.9, 6408.0], [54.0, 6409.0], [54.1, 6423.0], [54.2, 6425.0], [54.3, 6435.0], [54.4, 6436.0], [54.5, 6441.0], [54.6, 6447.0], [54.7, 6453.0], [54.8, 6456.0], [54.9, 6465.0], [55.0, 6470.0], [55.1, 6472.0], [55.2, 6472.0], [55.3, 6475.0], [55.4, 6476.0], [55.5, 6477.0], [55.6, 6479.0], [55.7, 6482.0], [55.8, 6483.0], [55.9, 6483.0], [56.0, 6486.0], [56.1, 6489.0], [56.2, 6496.0], [56.3, 6499.0], [56.4, 6501.0], [56.5, 6507.0], [56.6, 6510.0], [56.7, 6513.0], [56.8, 6515.0], [56.9, 6516.0], [57.0, 6520.0], [57.1, 6527.0], [57.2, 6537.0], [57.3, 6539.0], [57.4, 6543.0], [57.5, 6551.0], [57.6, 6551.0], [57.7, 6553.0], [57.8, 6556.0], [57.9, 6560.0], [58.0, 6560.0], [58.1, 6565.0], [58.2, 6567.0], [58.3, 6573.0], [58.4, 6575.0], [58.5, 6579.0], [58.6, 6583.0], [58.7, 6583.0], [58.8, 6586.0], [58.9, 6592.0], [59.0, 6595.0], [59.1, 6604.0], [59.2, 6607.0], [59.3, 6607.0], [59.4, 6612.0], [59.5, 6617.0], [59.6, 6619.0], [59.7, 6625.0], [59.8, 6634.0], [59.9, 6635.0], [60.0, 6637.0], [60.1, 6639.0], [60.2, 6642.0], [60.3, 6643.0], [60.4, 6644.0], [60.5, 6649.0], [60.6, 6651.0], [60.7, 6652.0], [60.8, 6653.0], [60.9, 6661.0], [61.0, 6662.0], [61.1, 6664.0], [61.2, 6669.0], [61.3, 6671.0], [61.4, 6679.0], [61.5, 6687.0], [61.6, 6689.0], [61.7, 6692.0], [61.8, 6693.0], [61.9, 6695.0], [62.0, 6702.0], [62.1, 6708.0], [62.2, 6710.0], [62.3, 6711.0], [62.4, 6712.0], [62.5, 6717.0], [62.6, 6719.0], [62.7, 6728.0], [62.8, 6735.0], [62.9, 6740.0], [63.0, 6745.0], [63.1, 6747.0], [63.2, 6747.0], [63.3, 6751.0], [63.4, 6754.0], [63.5, 6760.0], [63.6, 6772.0], [63.7, 6775.0], [63.8, 6784.0], [63.9, 6785.0], [64.0, 6787.0], [64.1, 6795.0], [64.2, 6797.0], [64.3, 6804.0], [64.4, 6805.0], [64.5, 6808.0], [64.6, 6812.0], [64.7, 6818.0], [64.8, 6818.0], [64.9, 6823.0], [65.0, 6825.0], [65.1, 6828.0], [65.2, 6834.0], [65.3, 6835.0], [65.4, 6838.0], [65.5, 6842.0], [65.6, 6842.0], [65.7, 6852.0], [65.8, 6861.0], [65.9, 6866.0], [66.0, 6875.0], [66.1, 6882.0], [66.2, 6885.0], [66.3, 6887.0], [66.4, 6889.0], [66.5, 6889.0], [66.6, 6892.0], [66.7, 6897.0], [66.8, 6901.0], [66.9, 6902.0], [67.0, 6910.0], [67.1, 6915.0], [67.2, 6917.0], [67.3, 6924.0], [67.4, 6932.0], [67.5, 6938.0], [67.6, 6939.0], [67.7, 6944.0], [67.8, 6946.0], [67.9, 6948.0], [68.0, 6952.0], [68.1, 6955.0], [68.2, 6957.0], [68.3, 6957.0], [68.4, 6960.0], [68.5, 6962.0], [68.6, 6963.0], [68.7, 6967.0], [68.8, 6972.0], [68.9, 6974.0], [69.0, 6978.0], [69.1, 6979.0], [69.2, 6981.0], [69.3, 6982.0], [69.4, 6983.0], [69.5, 6986.0], [69.6, 6989.0], [69.7, 6992.0], [69.8, 6997.0], [69.9, 6999.0], [70.0, 7003.0], [70.1, 7006.0], [70.2, 7010.0], [70.3, 7017.0], [70.4, 7019.0], [70.5, 7025.0], [70.6, 7026.0], [70.7, 7027.0], [70.8, 7028.0], [70.9, 7031.0], [71.0, 7035.0], [71.1, 7036.0], [71.2, 7038.0], [71.3, 7040.0], [71.4, 7042.0], [71.5, 7043.0], [71.6, 7052.0], [71.7, 7056.0], [71.8, 7058.0], [71.9, 7060.0], [72.0, 7060.0], [72.1, 7063.0], [72.2, 7066.0], [72.3, 7067.0], [72.4, 7067.0], [72.5, 7072.0], [72.6, 7073.0], [72.7, 7077.0], [72.8, 7077.0], [72.9, 7079.0], [73.0, 7080.0], [73.1, 7080.0], [73.2, 7081.0], [73.3, 7083.0], [73.4, 7089.0], [73.5, 7089.0], [73.6, 7092.0], [73.7, 7093.0], [73.8, 7094.0], [73.9, 7095.0], [74.0, 7097.0], [74.1, 7099.0], [74.2, 7102.0], [74.3, 7103.0], [74.4, 7105.0], [74.5, 7107.0], [74.6, 7110.0], [74.7, 7113.0], [74.8, 7117.0], [74.9, 7118.0], [75.0, 7119.0], [75.1, 7122.0], [75.2, 7122.0], [75.3, 7124.0], [75.4, 7127.0], [75.5, 7129.0], [75.6, 7130.0], [75.7, 7131.0], [75.8, 7132.0], [75.9, 7134.0], [76.0, 7135.0], [76.1, 7139.0], [76.2, 7140.0], [76.3, 7142.0], [76.4, 7145.0], [76.5, 7147.0], [76.6, 7147.0], [76.7, 7149.0], [76.8, 7150.0], [76.9, 7153.0], [77.0, 7156.0], [77.1, 7157.0], [77.2, 7160.0], [77.3, 7170.0], [77.4, 7172.0], [77.5, 7174.0], [77.6, 7175.0], [77.7, 7175.0], [77.8, 7175.0], [77.9, 7181.0], [78.0, 7183.0], [78.1, 7184.0], [78.2, 7184.0], [78.3, 7186.0], [78.4, 7186.0], [78.5, 7188.0], [78.6, 7188.0], [78.7, 7191.0], [78.8, 7194.0], [78.9, 7196.0], [79.0, 7197.0], [79.1, 7200.0], [79.2, 7202.0], [79.3, 7210.0], [79.4, 7211.0], [79.5, 7213.0], [79.6, 7217.0], [79.7, 7222.0], [79.8, 7222.0], [79.9, 7226.0], [80.0, 7230.0], [80.1, 7234.0], [80.2, 7234.0], [80.3, 7235.0], [80.4, 7236.0], [80.5, 7239.0], [80.6, 7245.0], [80.7, 7248.0], [80.8, 7249.0], [80.9, 7250.0], [81.0, 7251.0], [81.1, 7258.0], [81.2, 7261.0], [81.3, 7263.0], [81.4, 7265.0], [81.5, 7265.0], [81.6, 7267.0], [81.7, 7269.0], [81.8, 7274.0], [81.9, 7276.0], [82.0, 7276.0], [82.1, 7278.0], [82.2, 7280.0], [82.3, 7281.0], [82.4, 7283.0], [82.5, 7285.0], [82.6, 7290.0], [82.7, 7292.0], [82.8, 7293.0], [82.9, 7295.0], [83.0, 7296.0], [83.1, 7309.0], [83.2, 7313.0], [83.3, 7313.0], [83.4, 7317.0], [83.5, 7318.0], [83.6, 7319.0], [83.7, 7321.0], [83.8, 7323.0], [83.9, 7324.0], [84.0, 7328.0], [84.1, 7331.0], [84.2, 7333.0], [84.3, 7338.0], [84.4, 7340.0], [84.5, 7347.0], [84.6, 7347.0], [84.7, 7349.0], [84.8, 7353.0], [84.9, 7355.0], [85.0, 7362.0], [85.1, 7370.0], [85.2, 7374.0], [85.3, 7376.0], [85.4, 7379.0], [85.5, 7382.0], [85.6, 7384.0], [85.7, 7394.0], [85.8, 7411.0], [85.9, 7413.0], [86.0, 7417.0], [86.1, 7422.0], [86.2, 7424.0], [86.3, 7426.0], [86.4, 7427.0], [86.5, 7428.0], [86.6, 7433.0], [86.7, 7440.0], [86.8, 7441.0], [86.9, 7442.0], [87.0, 7444.0], [87.1, 7448.0], [87.2, 7450.0], [87.3, 7453.0], [87.4, 7453.0], [87.5, 7455.0], [87.6, 7456.0], [87.7, 7458.0], [87.8, 7464.0], [87.9, 7471.0], [88.0, 7481.0], [88.1, 7484.0], [88.2, 7494.0], [88.3, 7500.0], [88.4, 7502.0], [88.5, 7512.0], [88.6, 7513.0], [88.7, 7516.0], [88.8, 7517.0], [88.9, 7518.0], [89.0, 7519.0], [89.1, 7520.0], [89.2, 7526.0], [89.3, 7529.0], [89.4, 7532.0], [89.5, 7536.0], [89.6, 7539.0], [89.7, 7542.0], [89.8, 7557.0], [89.9, 7567.0], [90.0, 7570.0], [90.1, 7580.0], [90.2, 7591.0], [90.3, 7598.0], [90.4, 7602.0], [90.5, 7604.0], [90.6, 7606.0], [90.7, 7613.0], [90.8, 7617.0], [90.9, 7621.0], [91.0, 7623.0], [91.1, 7631.0], [91.2, 7632.0], [91.3, 7635.0], [91.4, 7636.0], [91.5, 7637.0], [91.6, 7642.0], [91.7, 7649.0], [91.8, 7651.0], [91.9, 7660.0], [92.0, 7668.0], [92.1, 7669.0], [92.2, 7675.0], [92.3, 7682.0], [92.4, 7685.0], [92.5, 7696.0], [92.6, 7701.0], [92.7, 7707.0], [92.8, 7710.0], [92.9, 7712.0], [93.0, 7719.0], [93.1, 7733.0], [93.2, 7736.0], [93.3, 7741.0], [93.4, 7753.0], [93.5, 7757.0], [93.6, 7761.0], [93.7, 7762.0], [93.8, 7764.0], [93.9, 7775.0], [94.0, 7776.0], [94.1, 7781.0], [94.2, 7784.0], [94.3, 7786.0], [94.4, 7791.0], [94.5, 7795.0], [94.6, 7805.0], [94.7, 7807.0], [94.8, 7815.0], [94.9, 7817.0], [95.0, 7825.0], [95.1, 7828.0], [95.2, 7834.0], [95.3, 7837.0], [95.4, 7843.0], [95.5, 7851.0], [95.6, 7859.0], [95.7, 7864.0], [95.8, 7870.0], [95.9, 7875.0], [96.0, 7877.0], [96.1, 7878.0], [96.2, 7889.0], [96.3, 7906.0], [96.4, 7911.0], [96.5, 7914.0], [96.6, 7917.0], [96.7, 7920.0], [96.8, 7931.0], [96.9, 7932.0], [97.0, 7943.0], [97.1, 7952.0], [97.2, 7962.0], [97.3, 7976.0], [97.4, 7982.0], [97.5, 8000.0], [97.6, 8007.0], [97.7, 8010.0], [97.8, 8013.0], [97.9, 8023.0], [98.0, 8025.0], [98.1, 8056.0], [98.2, 8066.0], [98.3, 8069.0], [98.4, 8073.0], [98.5, 8075.0], [98.6, 8093.0], [98.7, 8099.0], [98.8, 8112.0], [98.9, 8126.0], [99.0, 8128.0], [99.1, 8151.0], [99.2, 8166.0], [99.3, 8167.0], [99.4, 8204.0], [99.5, 8205.0], [99.6, 8228.0], [99.7, 8254.0], [99.8, 8288.0], [99.9, 8311.0]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 92.0, "series": [{"data": [[600.0, 2.0], [700.0, 5.0], [800.0, 8.0], [900.0, 5.0], [1000.0, 6.0], [1100.0, 6.0], [1200.0, 12.0], [1300.0, 13.0], [1400.0, 17.0], [1500.0, 12.0], [1600.0, 5.0], [1700.0, 3.0], [1800.0, 7.0], [1900.0, 4.0], [2000.0, 7.0], [2100.0, 10.0], [2200.0, 9.0], [2300.0, 2.0], [2400.0, 3.0], [2500.0, 3.0], [2600.0, 1.0], [2700.0, 9.0], [2800.0, 3.0], [2900.0, 5.0], [3000.0, 9.0], [3100.0, 8.0], [3200.0, 13.0], [3300.0, 12.0], [3400.0, 10.0], [3500.0, 7.0], [3600.0, 13.0], [3700.0, 15.0], [3800.0, 12.0], [3900.0, 11.0], [4000.0, 6.0], [4100.0, 17.0], [4200.0, 20.0], [4300.0, 22.0], [4400.0, 24.0], [4500.0, 26.0], [4600.0, 28.0], [4700.0, 28.0], [4800.0, 29.0], [4900.0, 25.0], [5000.0, 29.0], [5100.0, 28.0], [5200.0, 31.0], [5300.0, 37.0], [5400.0, 36.0], [5500.0, 31.0], [5600.0, 37.0], [5700.0, 47.0], [5800.0, 33.0], [5900.0, 39.0], [6000.0, 30.0], [6100.0, 39.0], [6200.0, 34.0], [6300.0, 41.0], [6400.0, 50.0], [6500.0, 52.0], [6600.0, 54.0], [6700.0, 43.0], [6800.0, 47.0], [6900.0, 59.0], [7000.0, 80.0], [7100.0, 92.0], [7200.0, 74.0], [7300.0, 51.0], [7400.0, 47.0], [7500.0, 39.0], [7600.0, 41.0], [7700.0, 37.0], [7800.0, 32.0], [7900.0, 24.0], [8000.0, 23.0], [8100.0, 12.0], [8200.0, 10.0], [8300.0, 2.0], [200.0, 2.0], [300.0, 5.0], [400.0, 8.0], [500.0, 7.0]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1779.0, "series": [{"data": [[0.0, 15.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 81.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1779.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 935.8714666666664, "minX": 1.7555919E12, "maxY": 935.8714666666664, "series": [{"data": [[1.7555919E12, 935.8714666666664]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555919E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 234.0, "minX": 1.0, "maxY": 8314.0, "series": [{"data": [[2.0, 7416.0], [4.0, 7347.0], [6.0, 7285.0], [7.0, 5755.0], [8.0, 6604.0], [10.0, 6670.5], [11.0, 7315.0], [12.0, 6825.0], [13.0, 6818.0], [15.0, 6201.0], [18.0, 7080.0], [19.0, 6580.0], [20.0, 7184.0], [21.0, 5748.0], [22.0, 6827.0], [23.0, 7004.5], [24.0, 6105.0], [25.0, 6643.0], [28.0, 7424.0], [31.0, 7208.0], [33.0, 7235.5], [35.0, 7519.0], [34.0, 6573.0], [37.0, 6720.5], [38.0, 5896.0], [40.0, 6720.5], [45.0, 8314.0], [44.0, 7453.25], [47.0, 5707.0], [49.0, 7217.666666666667], [51.0, 8288.0], [50.0, 6086.0], [53.0, 7271.5], [55.0, 6648.0], [54.0, 7122.0], [57.0, 7134.0], [56.0, 7380.0], [59.0, 7261.0], [58.0, 7292.0], [61.0, 6619.0], [63.0, 7277.0], [62.0, 7459.5], [67.0, 7524.0], [64.0, 6795.0], [70.0, 7381.0], [75.0, 6617.0], [74.0, 6612.0], [73.0, 7147.0], [79.0, 6664.0], [78.0, 5314.0], [77.0, 7778.75], [82.0, 6981.0], [80.0, 7119.0], [87.0, 7236.0], [86.0, 7613.0], [85.0, 7660.0], [84.0, 8056.0], [90.0, 7768.0], [88.0, 7976.0], [94.0, 7426.0], [93.0, 7569.0], [92.0, 7673.5], [99.0, 6740.0], [98.0, 7936.0], [97.0, 8254.0], [96.0, 7937.5], [101.0, 7987.0], [106.0, 7920.0], [105.0, 7412.0], [104.0, 6958.333333333333], [111.0, 7590.0], [108.0, 7448.0], [115.0, 7313.0], [114.0, 7129.0], [113.0, 6721.0], [112.0, 7102.0], [119.0, 6552.0], [118.0, 7982.5], [116.0, 7444.0], [123.0, 7149.5], [127.0, 7276.0], [126.0, 7787.5], [124.0, 7135.0], [135.0, 6710.0], [134.0, 6711.0], [133.0, 6639.5], [131.0, 7292.0], [130.0, 6065.0], [128.0, 7320.0], [143.0, 7155.0], [142.0, 7186.0], [141.0, 6693.0], [140.0, 8061.0], [139.0, 6705.0], [138.0, 7286.0], [137.0, 7170.0], [136.0, 7441.0], [151.0, 7876.0], [149.0, 6472.0], [147.0, 8069.0], [146.0, 7347.0], [159.0, 6500.0], [158.0, 7249.0], [157.0, 7122.0], [155.0, 7357.5], [153.0, 7156.5], [152.0, 7492.0], [167.0, 6649.5], [165.0, 7042.0], [164.0, 7340.0], [163.0, 7321.4], [175.0, 7529.0], [174.0, 7022.0], [172.0, 7186.0], [171.0, 7440.0], [182.0, 7265.0], [181.0, 7089.0], [180.0, 7878.0], [179.0, 6949.666666666667], [176.0, 7982.0], [188.0, 7016.0], [186.0, 6983.0], [185.0, 7651.666666666667], [199.0, 8163.0], [198.0, 7196.0], [197.0, 7978.0], [196.0, 6941.0], [195.0, 6652.0], [192.0, 7222.666666666667], [206.0, 7330.0], [203.0, 7422.0], [201.0, 6902.5], [215.0, 7514.0], [211.0, 7566.5], [210.0, 7328.0], [208.0, 6901.5], [219.0, 6935.0], [217.0, 6649.0], [216.0, 7279.25], [231.0, 7098.0], [230.0, 7460.0], [228.0, 6635.0], [226.0, 6743.2], [225.0, 6862.5], [239.0, 6980.0], [237.0, 7396.0], [236.0, 7640.0], [235.0, 7943.0], [233.0, 6638.0], [232.0, 7579.333333333333], [247.0, 6894.5], [245.0, 7308.0], [244.0, 6393.0], [243.0, 6700.5], [241.0, 6632.0], [240.0, 6957.0], [255.0, 7242.5], [253.0, 7863.0], [252.0, 7798.5], [250.0, 6906.5], [248.0, 7183.0], [270.0, 7374.0], [271.0, 7213.0], [269.0, 7222.0], [268.0, 6364.0], [267.0, 7896.0], [265.0, 6340.0], [264.0, 7554.0], [263.0, 8105.0], [257.0, 7740.0], [259.0, 7019.0], [258.0, 6436.0], [262.0, 7173.0], [260.0, 7906.0], [281.0, 7194.0], [285.0, 6595.0], [283.0, 7160.5], [279.0, 7276.0], [278.0, 7455.0], [277.0, 6070.0], [276.0, 7451.5], [273.0, 7196.0], [272.0, 8115.0], [301.0, 6492.0], [302.0, 6369.0], [300.0, 6079.0], [298.0, 7318.0], [297.0, 6323.0], [296.0, 7526.5], [295.0, 7775.0], [293.0, 7679.5], [291.0, 6483.5], [289.0, 6483.0], [288.0, 7047.0], [316.0, 8093.0], [318.0, 6923.0], [319.0, 6344.0], [317.0, 7295.0], [315.0, 7230.0], [313.0, 7269.333333333333], [311.0, 7111.5], [308.0, 7296.0], [307.0, 8099.0], [306.0, 7437.0], [305.0, 7267.0], [304.0, 6356.5], [334.0, 6848.666666666667], [335.0, 7148.0], [332.0, 4745.0], [323.0, 7629.0], [321.0, 6944.0], [320.0, 5869.0], [330.0, 6409.0], [329.0, 7800.0], [328.0, 7057.0], [327.0, 7889.0], [326.0, 7129.0], [324.0, 7202.0], [350.0, 7499.0], [351.0, 8075.0], [348.0, 7791.0], [337.0, 7536.0], [347.0, 6569.0], [345.0, 7424.0], [344.0, 5495.0], [343.0, 7131.5], [341.0, 6575.0], [340.0, 7150.0], [366.0, 6556.0], [367.0, 7519.5], [364.0, 7198.5], [362.0, 7118.0], [361.0, 7145.0], [360.0, 6968.333333333333], [359.0, 7375.0], [358.0, 6560.0], [355.0, 7045.0], [353.0, 6348.0], [383.0, 7473.0], [380.0, 7440.0], [379.0, 7622.0], [376.0, 6542.0], [375.0, 6883.25], [371.0, 7086.5], [369.0, 5882.0], [368.0, 7422.0], [396.0, 7105.0], [398.0, 7384.0], [399.0, 6296.0], [397.0, 8023.0], [394.0, 6956.0], [392.0, 7122.0], [391.0, 7912.0], [387.0, 7529.666666666667], [385.0, 6936.666666666667], [390.0, 7127.0], [389.0, 7032.5], [413.0, 7077.0], [415.0, 6782.0], [412.0, 7843.0], [403.0, 7622.5], [401.0, 6986.0], [400.0, 7915.0], [411.0, 6343.0], [410.0, 7880.0], [409.0, 6859.0], [407.0, 7132.0], [406.0, 7536.5], [404.0, 6537.0], [430.0, 7677.0], [429.0, 7093.0], [419.0, 7741.0], [417.0, 6981.5], [427.0, 8025.0], [426.0, 6605.5], [424.0, 6986.0], [423.0, 7733.0], [422.0, 6506.0], [421.0, 6510.0], [420.0, 6702.5], [447.0, 7069.0], [446.0, 7127.666666666666], [441.0, 7186.0], [440.0, 6644.5], [437.0, 7349.0], [436.0, 7139.0], [435.0, 7636.333333333333], [432.0, 6261.0], [462.0, 6789.0], [463.0, 7147.0], [460.0, 7338.0], [449.0, 6842.0], [459.0, 7020.5], [457.0, 7082.0], [456.0, 6755.0], [455.0, 6353.0], [453.0, 7211.0], [452.0, 7186.0], [467.0, 7347.0], [478.0, 7472.5], [476.0, 7285.5], [474.0, 7114.5], [472.0, 6482.0], [471.0, 7167.5], [470.0, 7067.0], [469.0, 6255.0], [466.0, 7962.0], [465.0, 7877.0], [464.0, 6452.0], [494.0, 7094.0], [495.0, 6828.0], [493.0, 7052.0], [492.0, 7823.0], [491.0, 7651.0], [490.0, 7150.0], [489.0, 7580.0], [488.0, 6470.0], [487.0, 7657.0], [481.0, 7139.0], [480.0, 6791.0], [483.0, 6472.0], [482.0, 5973.0], [486.0, 7647.0], [485.0, 5804.0], [484.0, 6323.0], [509.0, 7682.0], [510.0, 7140.0], [508.0, 6222.0], [497.0, 6459.0], [507.0, 7386.5], [505.0, 7591.0], [504.0, 7197.0], [503.0, 7693.0], [502.0, 7172.0], [501.0, 6244.0], [500.0, 7227.666666666667], [541.0, 6290.0], [542.0, 5711.0], [528.0, 7153.0], [530.0, 7669.0], [529.0, 7175.0], [540.0, 7026.0], [538.0, 6294.0], [537.0, 6768.5], [536.0, 6805.0], [527.0, 7743.0], [512.0, 6819.0], [516.0, 7276.666666666667], [515.0, 7962.0], [518.0, 7290.0], [517.0, 6465.0], [524.0, 7102.0], [523.0, 7255.0], [521.0, 5921.0], [520.0, 7349.5], [534.0, 7099.0], [533.0, 7946.0], [532.0, 6441.0], [531.0, 7026.0], [568.0, 6820.666666666667], [573.0, 7264.0], [575.0, 7054.0], [560.0, 6878.0], [572.0, 7932.0], [571.0, 7095.0], [570.0, 7157.5], [559.0, 7140.0], [545.0, 7066.0], [544.0, 6730.0], [547.0, 7440.0], [546.0, 7636.0], [549.0, 7085.0], [548.0, 7113.0], [551.0, 7827.0], [550.0, 6946.0], [558.0, 6957.0], [557.0, 6161.0], [554.0, 7152.5], [552.0, 7116.0], [566.0, 7010.0], [564.0, 6709.5], [562.0, 7558.0], [561.0, 7245.0], [606.0, 6917.0], [607.0, 6861.0], [592.0, 6992.5], [605.0, 7060.0], [604.0, 7044.333333333333], [601.0, 6889.0], [600.0, 7786.0], [590.0, 7435.4], [576.0, 7707.0], [578.0, 5743.0], [577.0, 7040.0], [583.0, 7368.0], [581.0, 6830.0], [585.0, 7632.0], [584.0, 7080.0], [599.0, 7081.0], [598.0, 7331.0], [597.0, 7917.0], [595.0, 7118.666666666667], [636.0, 7672.5], [639.0, 5714.0], [624.0, 7239.0], [627.0, 7334.0], [625.0, 6148.0], [638.0, 7696.0], [637.0, 7518.0], [635.0, 6899.5], [634.0, 6708.0], [633.0, 7073.0], [632.0, 6807.0], [616.0, 6158.0], [610.0, 7209.0], [609.0, 6653.0], [613.0, 7092.5], [611.0, 7131.0], [615.0, 6891.0], [614.0, 5721.0], [631.0, 7918.0], [629.0, 6887.0], [658.0, 6515.5], [670.0, 6621.0], [668.0, 6608.5], [666.0, 6671.0], [665.0, 6572.0], [654.0, 6525.0], [640.0, 6998.5], [644.0, 6135.0], [641.0, 6989.0], [647.0, 7122.0], [645.0, 7099.0], [652.0, 7870.0], [651.0, 6369.0], [650.0, 6932.111111111111], [663.0, 6979.0], [662.0, 6428.0], [659.0, 6131.0], [657.0, 7004.5], [698.0, 7066.5], [690.0, 6125.0], [702.0, 6352.666666666667], [703.0, 5655.0], [688.0, 6889.0], [699.0, 5657.0], [696.0, 6670.0], [679.0, 6095.0], [678.0, 6955.0], [677.0, 6310.0], [676.0, 7805.0], [674.0, 7346.0], [672.0, 6999.5], [687.0, 6870.0], [686.0, 6795.75], [684.0, 6112.0], [682.0, 6118.0], [680.0, 6992.0], [695.0, 5589.0], [694.0, 7175.0], [693.0, 6435.333333333333], [734.0, 6055.0], [735.0, 7132.0], [722.0, 7710.0], [721.0, 6560.0], [733.0, 7597.0], [732.0, 7030.0], [731.0, 6912.666666666667], [728.0, 7652.0], [719.0, 5789.0], [705.0, 7160.0], [704.0, 6785.0], [709.0, 7551.0], [708.0, 5842.0], [711.0, 7816.0], [710.0, 7427.0], [718.0, 7668.5], [716.0, 6719.0], [715.0, 7052.75], [726.0, 7805.0], [725.0, 5768.0], [724.0, 6077.0], [723.0, 7825.0], [763.0, 6964.0], [755.0, 7094.0], [765.0, 7387.5], [752.0, 7089.0], [754.0, 7238.0], [753.0, 7756.0], [762.0, 6816.0], [761.0, 6924.0], [760.0, 6865.0], [743.0, 6057.0], [742.0, 7786.0], [741.0, 7762.0], [740.0, 7396.0], [738.0, 7788.0], [737.0, 7130.0], [736.0, 7668.0], [750.0, 6838.0], [749.0, 7621.0], [748.0, 6689.0], [747.0, 7776.0], [746.0, 6024.0], [745.0, 7784.0], [744.0, 7458.0], [758.0, 7528.0], [757.0, 7649.0], [756.0, 6008.0], [797.0, 7035.0], [799.0, 6359.5], [785.0, 6773.0], [784.0, 7313.0], [788.0, 6669.0], [786.0, 7710.0], [796.0, 5097.0], [795.0, 7028.0], [794.0, 6538.0], [793.0, 5614.0], [792.0, 6871.5], [775.0, 5994.0], [774.0, 7592.333333333333], [771.0, 7068.0], [770.0, 6899.0], [783.0, 6728.0], [781.0, 7248.0], [779.0, 7524.0], [778.0, 5986.0], [777.0, 5969.0], [776.0, 7703.0], [790.0, 5951.0], [789.0, 6796.0], [826.0, 7382.0], [831.0, 5880.0], [830.0, 7309.666666666667], [827.0, 5890.0], [825.0, 7635.0], [824.0, 6863.666666666667], [815.0, 7050.75], [812.0, 7022.0], [807.0, 5903.0], [806.0, 6745.0], [805.0, 7684.0], [804.0, 6343.5], [803.0, 5949.666666666667], [856.0, 6682.0], [861.0, 5870.0], [862.0, 7602.0], [849.0, 6478.0], [848.0, 7026.666666666667], [851.0, 5036.0], [850.0, 7317.0], [860.0, 5445.0], [858.0, 7322.0], [857.0, 6948.0], [845.0, 7347.0], [833.0, 6717.0], [832.0, 6687.0], [835.0, 5061.0], [834.0, 6862.0], [837.0, 5323.0], [836.0, 7134.0], [839.0, 5884.0], [838.0, 5894.0], [844.0, 6612.0], [842.0, 6747.0], [841.0, 6486.0], [840.0, 6945.0], [855.0, 5046.0], [854.0, 7458.0], [853.0, 7620.0], [852.0, 7323.0], [889.0, 5556.0], [894.0, 6909.0], [895.0, 4971.0], [880.0, 6669.0], [883.0, 6334.0], [881.0, 5317.0], [885.0, 5828.0], [884.0, 4994.0], [893.0, 6409.0], [892.0, 7532.0], [891.0, 5892.0], [888.0, 5822.0], [871.0, 6282.0], [870.0, 5804.0], [868.0, 7585.0], [867.0, 7294.0], [866.0, 5019.0], [865.0, 5857.0], [864.0, 6378.0], [879.0, 7078.0], [877.0, 7165.666666666667], [874.0, 6636.5], [872.0, 5267.0], [887.0, 7542.0], [886.0, 4982.0], [925.0, 5357.5], [915.0, 7516.0], [926.0, 5741.0], [912.0, 6695.0], [914.0, 6475.0], [913.0, 4919.0], [923.0, 6356.5], [921.0, 6583.0], [920.0, 6361.0], [903.0, 5797.0], [902.0, 7539.0], [901.0, 7512.0], [900.0, 5782.0], [899.0, 6882.0], [898.0, 6393.0], [897.0, 6538.5], [911.0, 5789.0], [910.0, 6598.0], [908.0, 4951.0], [907.0, 5796.0], [906.0, 6594.0], [905.0, 5354.0], [904.0, 4973.0], [919.0, 5778.0], [918.0, 5756.5], [916.0, 6671.0], [952.0, 7251.0], [958.0, 7154.5], [959.0, 7464.0], [945.0, 4888.0], [956.0, 6317.0], [955.0, 6896.5], [953.0, 7448.0], [943.0, 6577.0], [929.0, 6423.0], [932.0, 5720.0], [931.0, 5335.0], [934.0, 4831.0], [933.0, 6835.0], [941.0, 6818.0], [940.0, 7215.0], [939.0, 6690.0], [938.0, 6954.0], [937.0, 5165.0], [951.0, 6913.5], [949.0, 6288.5], [947.0, 7336.0], [946.0, 7481.0], [985.0, 6404.0], [990.0, 6196.0], [991.0, 6751.0], [977.0, 6363.5], [980.0, 5279.5], [979.0, 6438.0], [988.0, 7370.0], [987.0, 5364.0], [986.0, 6565.0], [984.0, 6447.5], [967.0, 5257.0], [966.0, 5266.0], [965.0, 5258.0], [964.0, 6625.0], [963.0, 7449.0], [962.0, 6295.0], [961.0, 7318.0], [960.0, 4876.0], [975.0, 4855.0], [974.0, 4853.0], [973.0, 5682.0], [972.0, 7411.0], [971.0, 6635.0], [970.0, 5427.0], [969.0, 7088.0], [982.0, 4100.0], [981.0, 6747.0], [1016.0, 4756.0], [1020.0, 7113.0], [1023.0, 4739.0], [1011.0, 6339.5], [1009.0, 4805.0], [1013.0, 5574.0], [1012.0, 5178.0], [1022.0, 5586.0], [1021.0, 4750.0], [1019.0, 4759.0], [1018.0, 4757.0], [1017.0, 4746.0], [1007.0, 7146.0], [994.0, 6695.0], [993.0, 5021.0], [996.0, 6693.0], [995.0, 5610.0], [999.0, 7095.5], [997.0, 6585.0], [1005.0, 5191.0], [1004.0, 6366.0], [1003.0, 5622.0], [1002.0, 7089.0], [1001.0, 5635.0], [1000.0, 7222.0], [1015.0, 6651.0], [1014.0, 5609.0], [1084.0, 6326.0], [1056.0, 6111.0], [1058.0, 6107.0], [1060.0, 7076.0], [1062.0, 6563.0], [1064.0, 5472.0], [1066.0, 4682.0], [1068.0, 4949.0], [1070.0, 5453.0], [1082.0, 5458.0], [1080.0, 5472.0], [1078.0, 6519.0], [1076.0, 7066.0], [1074.0, 5090.0], [1072.0, 4626.0], [1038.0, 5125.0], [1036.0, 7165.0], [1034.0, 4721.0], [1032.0, 4723.0], [1030.0, 5574.0], [1026.0, 5556.0], [1024.0, 5568.0], [1054.0, 4674.0], [1050.0, 7263.0], [1042.0, 5146.0], [1040.0, 7109.0], [1144.0, 5242.0], [1140.0, 4437.0], [1148.0, 4689.0], [1120.0, 5225.5], [1122.0, 6363.0], [1124.0, 6914.0], [1126.0, 6835.0], [1130.0, 5288.5], [1128.0, 6320.0], [1132.0, 6204.0], [1150.0, 6131.0], [1146.0, 6644.0], [1142.0, 4642.0], [1138.0, 4961.0], [1136.0, 4417.0], [1118.0, 6784.0], [1088.0, 4579.0], [1090.0, 5414.0], [1092.0, 5419.0], [1094.0, 6487.0], [1096.0, 6772.0], [1098.0, 6475.0], [1100.0, 5000.0], [1102.0, 5395.0], [1116.0, 6276.0], [1114.0, 6589.0], [1112.0, 5918.5], [1110.0, 4517.0], [1108.0, 5965.0], [1106.0, 6483.0], [1104.0, 6231.0], [1212.0, 4167.0], [1184.0, 5122.0], [1190.0, 5401.5], [1186.0, 4331.0], [1192.0, 4384.0], [1194.0, 5082.0], [1196.0, 6835.0], [1198.0, 6543.0], [1214.0, 5952.0], [1210.0, 4143.0], [1206.0, 6070.0], [1204.0, 4693.0], [1202.0, 3639.0], [1200.0, 6514.0], [1166.0, 4226.0], [1164.0, 6607.0], [1162.0, 4667.0], [1152.0, 6616.0], [1182.0, 4569.0], [1180.0, 5155.0], [1178.0, 6748.0], [1176.0, 6583.0], [1172.0, 5994.0], [1170.0, 6892.0], [1168.0, 5189.0], [1272.0, 6183.0], [1268.0, 6223.0], [1276.0, 3572.0], [1248.0, 3994.0], [1250.0, 4549.0], [1252.0, 6252.0], [1254.0, 6345.0], [1256.0, 4812.0], [1258.0, 3993.0], [1260.0, 4493.0], [1262.0, 6527.0], [1278.0, 5771.0], [1274.0, 5389.0], [1270.0, 5840.0], [1266.0, 6361.0], [1264.0, 6083.0], [1216.0, 4142.0], [1218.0, 6293.5], [1220.0, 5571.0], [1222.0, 4152.0], [1224.0, 4126.0], [1226.0, 4950.0], [1228.0, 6241.0], [1230.0, 5689.0], [1246.0, 4321.0], [1244.0, 6086.0], [1242.0, 6065.0], [1240.0, 4848.0], [1238.0, 6623.0], [1236.0, 5653.0], [1234.0, 4881.0], [1232.0, 5946.0], [1336.0, 5955.0], [1332.0, 6122.0], [1340.0, 4521.0], [1312.0, 5677.0], [1316.0, 5370.0], [1320.0, 3251.0], [1322.0, 5063.0], [1324.0, 3746.0], [1326.0, 3264.0], [1342.0, 5807.0], [1338.0, 6132.0], [1334.0, 5573.0], [1330.0, 5588.0], [1328.0, 4651.5], [1280.0, 5684.0], [1282.0, 5751.0], [1284.0, 3872.0], [1286.0, 6425.0], [1288.0, 6428.0], [1292.0, 5704.0], [1294.0, 5706.0], [1310.0, 4554.0], [1308.0, 5710.0], [1306.0, 6146.0], [1304.0, 6078.0], [1302.0, 3805.0], [1300.0, 6043.0], [1298.0, 3825.0], [1296.0, 4068.0], [1404.0, 5619.0], [1396.0, 5905.0], [1388.0, 2856.0], [1386.0, 5671.0], [1384.0, 5933.0], [1382.0, 4191.0], [1378.0, 6000.0], [1376.0, 5998.0], [1390.0, 5388.0], [1406.0, 5317.0], [1402.0, 6008.0], [1400.0, 6029.0], [1398.0, 5343.0], [1394.0, 5754.0], [1392.0, 4609.5], [1344.0, 5579.0], [1346.0, 5575.0], [1348.0, 5919.0], [1350.0, 5510.0], [1354.0, 5508.0], [1356.0, 5910.0], [1358.0, 4435.0], [1374.0, 6104.0], [1372.0, 5621.0], [1366.0, 5325.0], [1364.0, 5457.0], [1362.0, 5501.0], [1360.0, 2834.0], [1468.0, 5369.0], [1440.0, 5818.0], [1442.0, 5337.5], [1444.0, 5408.0], [1446.0, 5643.0], [1448.0, 5218.0], [1450.0, 5617.0], [1452.0, 5423.0], [1454.0, 5346.0], [1470.0, 4956.0], [1466.0, 5228.0], [1464.0, 5642.0], [1458.0, 4996.0], [1456.0, 5583.0], [1412.0, 5115.0], [1414.0, 5705.0], [1416.0, 5281.0], [1418.0, 5950.0], [1420.0, 5299.0], [1422.0, 3869.0], [1438.0, 2736.0], [1436.0, 5076.166666666667], [1432.0, 5179.0], [1428.0, 3796.0], [1426.0, 5694.0], [1424.0, 5204.0], [1528.0, 5155.0], [1510.0, 4751.0], [1532.0, 4832.0], [1506.0, 4820.0], [1508.0, 5154.0], [1514.0, 5392.0], [1516.0, 4680.0], [1518.0, 4725.0], [1534.0, 1963.0], [1530.0, 4637.0], [1526.0, 4071.25], [1522.0, 5033.0], [1486.0, 4886.0], [1482.0, 5441.0], [1480.0, 5355.0], [1478.0, 5451.0], [1476.0, 5305.0], [1474.0, 3288.0], [1472.0, 4957.0], [1502.0, 2173.0], [1500.0, 4790.0], [1498.0, 4830.0], [1494.0, 5221.0], [1492.0, 5295.0], [1490.0, 4878.0], [1488.0, 4877.0], [1588.0, 4354.5], [1590.0, 4538.0], [1596.0, 1558.0], [1568.0, 4983.0], [1570.0, 3996.0], [1572.0, 4678.0], [1578.0, 4652.0], [1580.0, 4893.0], [1582.0, 4607.0], [1598.0, 1454.0], [1586.0, 4846.0], [1584.0, 4244.0], [1550.0, 5033.0], [1548.0, 4489.0], [1546.0, 4532.0], [1544.0, 5169.0], [1542.0, 4249.0], [1540.0, 4560.0], [1538.0, 5092.0], [1536.0, 4608.0], [1562.0, 4396.0], [1560.0, 5051.0], [1556.0, 4778.0], [1554.0, 4540.0], [1552.0, 4473.0], [1656.0, 3772.0], [1652.0, 4134.0], [1660.0, 4373.0], [1632.0, 1437.0], [1634.0, 4497.0], [1636.0, 3686.0], [1640.0, 3051.3333333333335], [1644.0, 4534.0], [1646.0, 1264.0], [1662.0, 1312.0], [1658.0, 4265.0], [1654.0, 3784.0], [1650.0, 4169.0], [1648.0, 2484.0], [1600.0, 1579.0], [1606.0, 4603.0], [1610.0, 3635.0], [1612.0, 2676.5], [1614.0, 1431.0], [1630.0, 3928.0], [1628.0, 4448.0], [1626.0, 1470.0], [1624.0, 3446.0], [1622.0, 4513.0], [1620.0, 1299.0], [1618.0, 4640.0], [1616.0, 3996.0], [1722.0, 709.0], [1714.0, 2789.0], [1696.0, 3778.0], [1698.0, 2927.0], [1702.0, 2973.0], [1704.0, 2255.0], [1706.0, 3798.0], [1708.0, 3347.0], [1710.0, 3350.0], [1724.0, 3590.0], [1720.0, 3817.0], [1718.0, 3779.0], [1716.0, 816.0], [1712.0, 1941.5], [1664.0, 4190.0], [1666.0, 4157.0], [1668.0, 3722.0], [1670.0, 3441.0], [1672.0, 3966.0], [1674.0, 1046.0], [1676.0, 1042.0], [1678.0, 3340.0], [1694.0, 1142.0], [1692.0, 4104.0], [1690.0, 971.0], [1688.0, 1358.0], [1686.0, 937.0], [1684.0, 3206.0], [1682.0, 1375.0], [1680.0, 3240.0], [1788.0, 358.0], [1786.0, 2265.0], [1766.0, 1761.8333333333335], [1774.0, 2107.0], [1772.0, 1439.0], [1770.0, 1759.2222222222222], [1768.0, 2040.0], [1764.0, 1983.5], [1762.0, 1122.6666666666667], [1760.0, 1121.75], [1790.0, 3049.0], [1758.0, 430.0], [1756.0, 3277.0], [1754.0, 537.0], [1752.0, 450.0], [1750.0, 3682.0], [1748.0, 408.0], [1744.0, 3102.0], [1776.0, 2203.0], [1742.0, 3628.0], [1740.0, 3302.6666666666665], [1736.0, 3203.0], [1734.0, 868.0], [1732.0, 3667.0], [1730.0, 2218.0], [1728.0, 3811.5], [1778.0, 3330.0], [1782.0, 536.0], [1784.0, 468.0], [1798.0, 1431.0], [1800.0, 588.0], [1792.0, 1358.2], [1794.0, 3013.0], [1796.0, 3215.0], [1802.0, 234.0], [1810.0, 1820.0], [1808.0, 1999.0], [1806.0, 2702.0], [1804.0, 484.0], [1079.0, 7188.0], [1075.0, 5481.0], [1083.0, 4611.0], [1087.0, 6803.5], [1057.0, 5532.0], [1061.0, 5520.0], [1063.0, 6756.0], [1065.0, 6094.0], [1067.0, 7097.0], [1069.0, 6158.0], [1071.0, 5439.0], [1085.0, 7072.0], [1081.0, 7174.0], [1077.0, 6197.0], [1073.0, 6555.0], [1039.0, 7295.0], [1037.0, 5123.0], [1035.0, 5040.0], [1033.0, 4733.0], [1031.0, 5537.0], [1029.0, 6827.0], [1027.0, 4750.0], [1025.0, 4538.0], [1055.0, 4686.0], [1053.0, 6335.0], [1051.0, 7060.0], [1049.0, 6033.5], [1047.0, 6013.5], [1045.0, 6553.5], [1043.0, 4707.0], [1041.0, 6472.0], [1149.0, 4383.0], [1151.0, 6931.0], [1121.0, 6393.0], [1123.0, 4466.0], [1125.0, 5290.0], [1127.0, 4541.0], [1131.0, 4443.0], [1135.0, 6188.0], [1133.0, 4420.0], [1147.0, 4373.0], [1145.0, 4763.0], [1143.0, 4419.0], [1141.0, 6702.0], [1139.0, 6112.0], [1137.0, 4412.0], [1089.0, 5423.0], [1091.0, 4040.0], [1093.0, 6185.0], [1095.0, 4809.0], [1097.0, 5361.0], [1099.0, 6483.0], [1101.0, 4577.0], [1103.0, 5349.0], [1117.0, 4957.0], [1115.0, 4492.0], [1109.0, 4512.0], [1107.0, 5379.0], [1105.0, 6823.0], [1207.0, 6237.0], [1203.0, 6156.0], [1215.0, 4122.0], [1185.0, 4291.0], [1191.0, 4830.0], [1193.0, 4257.0], [1195.0, 6551.0], [1197.0, 6128.0], [1213.0, 6032.0], [1211.0, 6586.0], [1209.0, 5529.0], [1205.0, 6476.0], [1201.0, 6618.0], [1167.0, 5975.0], [1165.0, 3631.0], [1163.0, 4376.0], [1161.0, 4353.5], [1159.0, 5675.0], [1157.0, 5326.5], [1155.0, 5509.5], [1153.0, 3647.0], [1181.0, 4609.0], [1179.0, 6875.0], [1177.0, 5167.0], [1175.0, 5151.666666666667], [1171.0, 6261.0], [1169.0, 6734.0], [1277.0, 5520.0], [1279.0, 5767.0], [1251.0, 5867.0], [1253.0, 4280.0], [1255.0, 5399.0], [1257.0, 3993.0], [1259.0, 5592.0], [1261.0, 6343.0], [1263.0, 5691.0], [1275.0, 4733.0], [1273.0, 6482.0], [1271.0, 6214.0], [1269.0, 5802.0], [1267.0, 4293.0], [1265.0, 4293.0], [1247.0, 3976.0], [1219.0, 6067.0], [1221.0, 6719.0], [1223.0, 6423.0], [1225.0, 5998.0], [1227.0, 6241.0], [1229.0, 6401.0], [1231.0, 6003.0], [1245.0, 6148.0], [1241.0, 5753.0], [1239.0, 5444.0], [1237.0, 6289.0], [1235.0, 5820.0], [1233.0, 6425.0], [1341.0, 5553.0], [1343.0, 5721.0], [1315.0, 5120.0], [1313.0, 3784.0], [1317.0, 6203.0], [1319.0, 5662.0], [1321.0, 6190.0], [1323.0, 3750.0], [1325.0, 5980.0], [1339.0, 5583.0], [1337.0, 5610.0], [1335.0, 4527.0], [1333.0, 4522.0], [1331.0, 5994.0], [1329.0, 6156.0], [1311.0, 5697.0], [1281.0, 6317.0], [1283.0, 5891.0], [1285.0, 3624.0], [1287.0, 5773.0], [1291.0, 5609.0], [1289.0, 4676.0], [1293.0, 3089.0], [1295.0, 3109.0], [1307.0, 4613.0], [1305.0, 4619.0], [1303.0, 6029.0], [1301.0, 3764.0], [1297.0, 6358.0], [1401.0, 6034.0], [1405.0, 5735.0], [1387.0, 5633.0], [1385.0, 5249.0], [1383.0, 5405.0], [1379.0, 4001.0], [1377.0, 5413.0], [1389.0, 5736.0], [1407.0, 5045.0], [1399.0, 5903.0], [1397.0, 5351.0], [1395.0, 5919.0], [1393.0, 6045.0], [1375.0, 5605.0], [1345.0, 2930.0], [1347.0, 5574.0], [1349.0, 4476.0], [1353.0, 5922.666666666667], [1355.0, 5493.0], [1357.0, 5669.0], [1359.0, 5965.0], [1373.0, 5603.0], [1371.0, 5460.0], [1369.0, 4520.333333333333], [1365.0, 5482.0], [1363.0, 5969.0], [1361.0, 4423.0], [1469.0, 4690.0], [1471.0, 5258.0], [1443.0, 5819.0], [1445.0, 5513.0], [1447.0, 5441.0], [1449.0, 5105.0], [1451.0, 5106.0], [1453.0, 5732.0], [1455.0, 5719.0], [1467.0, 5006.0], [1465.0, 5171.0], [1463.0, 5025.0], [1461.0, 5217.0], [1459.0, 5381.0], [1457.0, 5698.0], [1439.0, 2831.0], [1411.0, 5336.0], [1409.0, 5673.0], [1413.0, 5292.0], [1415.0, 3435.0], [1417.0, 5650.0], [1419.0, 5947.0], [1421.0, 5267.0], [1423.0, 5256.0], [1437.0, 5460.0], [1433.0, 5438.0], [1427.0, 5881.0], [1425.0, 5229.0], [1529.0, 5026.0], [1535.0, 4618.0], [1505.0, 5091.0], [1509.0, 5448.0], [1511.0, 4798.0], [1513.0, 3701.0], [1515.0, 2150.0], [1517.0, 5345.0], [1533.0, 2033.0], [1531.0, 5283.0], [1527.0, 5114.0], [1487.0, 5024.0], [1485.0, 5283.333333333333], [1479.0, 4919.0], [1477.0, 5052.0], [1475.0, 5487.0], [1473.0, 5613.0], [1501.0, 4301.0], [1499.0, 4736.0], [1497.0, 5164.0], [1495.0, 2263.0], [1493.0, 4812.0], [1491.0, 2219.0], [1489.0, 5004.0], [1597.0, 1607.0], [1575.0, 4680.5], [1599.0, 1586.0], [1569.0, 4962.0], [1571.0, 4204.0], [1573.0, 4948.0], [1577.0, 4483.5], [1579.0, 4023.0], [1581.0, 4582.0], [1583.0, 4246.0], [1595.0, 4630.5], [1593.0, 4417.0], [1591.0, 2024.0], [1589.0, 4516.0], [1585.0, 4730.0], [1551.0, 5142.0], [1549.0, 5016.0], [1547.0, 4548.0], [1545.0, 5037.0], [1543.0, 4551.0], [1541.0, 4579.0], [1539.0, 4255.0], [1537.0, 4969.0], [1567.0, 4839.5], [1563.0, 5041.0], [1561.0, 4769.0], [1559.0, 4140.5], [1557.0, 4721.0], [1555.0, 4943.0], [1657.0, 4420.0], [1663.0, 4186.0], [1633.0, 1218.0], [1635.0, 4353.0], [1637.0, 4198.0], [1643.0, 2377.333333333333], [1645.0, 4500.0], [1647.0, 2750.0], [1661.0, 1230.0], [1659.0, 1058.0], [1655.0, 3773.0], [1653.0, 4277.0], [1651.0, 4300.0], [1649.0, 3596.0], [1631.0, 1513.0], [1601.0, 1701.0], [1605.0, 3016.0], [1603.0, 3009.0], [1607.0, 3909.0], [1609.0, 4219.0], [1613.0, 4666.0], [1615.0, 4647.0], [1629.0, 4552.0], [1627.0, 4296.0], [1625.0, 4286.0], [1623.0, 4465.0], [1621.0, 4233.0], [1619.0, 1631.0], [1617.0, 4496.0], [1723.0, 1185.0], [1727.0, 3670.0], [1697.0, 3869.0], [1699.0, 3800.0], [1701.0, 996.5], [1703.0, 3810.0], [1705.0, 3374.0], [1707.0, 3367.0], [1709.0, 3695.0], [1725.0, 772.0], [1719.0, 3271.0], [1717.0, 817.0], [1715.0, 815.0], [1713.0, 906.0], [1695.0, 3823.0], [1665.0, 3651.0], [1669.0, 3640.0], [1671.0, 3372.0], [1673.0, 3586.0], [1675.0, 3305.0], [1677.0, 1434.0], [1679.0, 3540.0], [1693.0, 1576.0], [1691.0, 4023.0], [1689.0, 1107.0], [1687.0, 4176.0], [1685.0, 851.0], [1683.0, 3492.0], [1681.0, 3986.0], [1761.0, 1664.3333333333333], [1771.0, 785.5], [1775.0, 2038.5], [1773.0, 1979.5], [1769.0, 1730.6], [1767.0, 1916.375], [1765.0, 2114.0], [1763.0, 2131.0], [1789.0, 2660.0], [1787.0, 3065.0], [1759.0, 2057.5], [1757.0, 2764.0], [1755.0, 3444.0], [1753.0, 635.0], [1751.0, 875.0], [1749.0, 3062.0], [1747.0, 2121.5], [1745.0, 3467.0], [1743.0, 3542.0], [1741.0, 508.0], [1737.0, 3828.0], [1735.0, 3215.0], [1733.0, 3231.0], [1731.0, 969.0], [1777.0, 3078.0], [1781.0, 2992.5], [1779.0, 458.0], [1783.0, 3155.0], [1785.0, 470.0], [1799.0, 344.0], [1793.0, 2575.5], [1795.0, 298.0], [1797.0, 2524.0], [1801.0, 1370.0], [1803.0, 2422.0], [1809.0, 1651.5], [1811.0, 2460.0], [1807.0, 396.0], [1805.0, 2708.0], [1.0, 7682.0]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}, {"data": [[935.8714666666664, 5736.84266666668]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1811.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14250.0, "minX": 1.7555919E12, "maxY": 120584.05, "series": [{"data": [[1.7555919E12, 120584.05]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7555919E12, 14250.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555919E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5736.84266666668, "minX": 1.7555919E12, "maxY": 5736.84266666668, "series": [{"data": [[1.7555919E12, 5736.84266666668]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555919E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5736.822933333333, "minX": 1.7555919E12, "maxY": 5736.822933333333, "series": [{"data": [[1.7555919E12, 5736.822933333333]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555919E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3312.7738666666664, "minX": 1.7555919E12, "maxY": 3312.7738666666664, "series": [{"data": [[1.7555919E12, 3312.7738666666664]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555919E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 234.0, "minX": 1.7555919E12, "maxY": 8314.0, "series": [{"data": [[1.7555919E12, 8314.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7555919E12, 7573.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7555919E12, 8133.52]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7555919E12, 7825.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7555919E12, 234.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7555919E12, 6214.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555919E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1453.0, "minX": 53.0, "maxY": 7080.0, "series": [{"data": [[142.0, 4492.5], [317.0, 5751.0], [53.0, 1453.0], [57.0, 2202.0], [113.0, 3215.0], [227.0, 5405.0], [966.0, 7080.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 966.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1453.0, "minX": 53.0, "maxY": 7080.0, "series": [{"data": [[142.0, 4492.5], [317.0, 5751.0], [53.0, 1453.0], [57.0, 2202.0], [113.0, 3215.0], [227.0, 5405.0], [966.0, 7080.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 966.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.7555919E12, "maxY": 31.25, "series": [{"data": [[1.7555919E12, 31.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555919E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.7555919E12, "maxY": 31.25, "series": [{"data": [[1.7555919E12, 31.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555919E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.7555919E12, "maxY": 31.25, "series": [{"data": [[1.7555919E12, 31.25]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555919E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.7555919E12, "maxY": 31.25, "series": [{"data": [[1.7555919E12, 31.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555919E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

