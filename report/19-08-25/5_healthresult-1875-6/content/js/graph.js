/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 606.0, "minX": 0.0, "maxY": 7166.0, "series": [{"data": [[0.0, 606.0], [0.1, 624.0], [0.2, 700.0], [0.3, 716.0], [0.4, 838.0], [0.5, 853.0], [0.6, 860.0], [0.7, 868.0], [0.8, 875.0], [0.9, 884.0], [1.0, 926.0], [1.1, 934.0], [1.2, 958.0], [1.3, 974.0], [1.4, 995.0], [1.5, 1003.0], [1.6, 1011.0], [1.7, 1011.0], [1.8, 1021.0], [1.9, 1047.0], [2.0, 1055.0], [2.1, 1058.0], [2.2, 1072.0], [2.3, 1073.0], [2.4, 1080.0], [2.5, 1086.0], [2.6, 1088.0], [2.7, 1100.0], [2.8, 1107.0], [2.9, 1109.0], [3.0, 1113.0], [3.1, 1116.0], [3.2, 1120.0], [3.3, 1120.0], [3.4, 1125.0], [3.5, 1127.0], [3.6, 1148.0], [3.7, 1156.0], [3.8, 1167.0], [3.9, 1174.0], [4.0, 1177.0], [4.1, 1177.0], [4.2, 1193.0], [4.3, 1197.0], [4.4, 1203.0], [4.5, 1216.0], [4.6, 1227.0], [4.7, 1244.0], [4.8, 1249.0], [4.9, 1256.0], [5.0, 1265.0], [5.1, 1280.0], [5.2, 1292.0], [5.3, 1302.0], [5.4, 1333.0], [5.5, 1342.0], [5.6, 1345.0], [5.7, 1359.0], [5.8, 1371.0], [5.9, 1394.0], [6.0, 1413.0], [6.1, 1415.0], [6.2, 1424.0], [6.3, 1441.0], [6.4, 1458.0], [6.5, 1476.0], [6.6, 1484.0], [6.7, 1488.0], [6.8, 1490.0], [6.9, 1492.0], [7.0, 1498.0], [7.1, 1501.0], [7.2, 1518.0], [7.3, 1519.0], [7.4, 1520.0], [7.5, 1521.0], [7.6, 1535.0], [7.7, 1552.0], [7.8, 1567.0], [7.9, 1570.0], [8.0, 1571.0], [8.1, 1576.0], [8.2, 1588.0], [8.3, 1606.0], [8.4, 1615.0], [8.5, 1619.0], [8.6, 1620.0], [8.7, 1623.0], [8.8, 1624.0], [8.9, 1627.0], [9.0, 1631.0], [9.1, 1662.0], [9.2, 1679.0], [9.3, 1682.0], [9.4, 1699.0], [9.5, 1709.0], [9.6, 1711.0], [9.7, 1745.0], [9.8, 1760.0], [9.9, 1767.0], [10.0, 1780.0], [10.1, 1797.0], [10.2, 1822.0], [10.3, 1829.0], [10.4, 1862.0], [10.5, 1888.0], [10.6, 1911.0], [10.7, 1935.0], [10.8, 1976.0], [10.9, 2013.0], [11.0, 2042.0], [11.1, 2064.0], [11.2, 2074.0], [11.3, 2102.0], [11.4, 2108.0], [11.5, 2123.0], [11.6, 2126.0], [11.7, 2139.0], [11.8, 2168.0], [11.9, 2172.0], [12.0, 2194.0], [12.1, 2205.0], [12.2, 2218.0], [12.3, 2276.0], [12.4, 2313.0], [12.5, 2319.0], [12.6, 2337.0], [12.7, 2346.0], [12.8, 2354.0], [12.9, 2355.0], [13.0, 2369.0], [13.1, 2391.0], [13.2, 2412.0], [13.3, 2413.0], [13.4, 2424.0], [13.5, 2430.0], [13.6, 2448.0], [13.7, 2449.0], [13.8, 2449.0], [13.9, 2466.0], [14.0, 2468.0], [14.1, 2474.0], [14.2, 2481.0], [14.3, 2482.0], [14.4, 2497.0], [14.5, 2497.0], [14.6, 2499.0], [14.7, 2500.0], [14.8, 2502.0], [14.9, 2503.0], [15.0, 2509.0], [15.1, 2513.0], [15.2, 2513.0], [15.3, 2516.0], [15.4, 2524.0], [15.5, 2528.0], [15.6, 2533.0], [15.7, 2538.0], [15.8, 2547.0], [15.9, 2558.0], [16.0, 2563.0], [16.1, 2571.0], [16.2, 2574.0], [16.3, 2583.0], [16.4, 2592.0], [16.5, 2596.0], [16.6, 2602.0], [16.7, 2603.0], [16.8, 2610.0], [16.9, 2610.0], [17.0, 2612.0], [17.1, 2617.0], [17.2, 2622.0], [17.3, 2625.0], [17.4, 2629.0], [17.5, 2631.0], [17.6, 2639.0], [17.7, 2641.0], [17.8, 2655.0], [17.9, 2661.0], [18.0, 2666.0], [18.1, 2672.0], [18.2, 2679.0], [18.3, 2692.0], [18.4, 2708.0], [18.5, 2712.0], [18.6, 2729.0], [18.7, 2735.0], [18.8, 2784.0], [18.9, 2790.0], [19.0, 2808.0], [19.1, 2813.0], [19.2, 2821.0], [19.3, 2839.0], [19.4, 2852.0], [19.5, 2859.0], [19.6, 2862.0], [19.7, 2870.0], [19.8, 2875.0], [19.9, 2877.0], [20.0, 2883.0], [20.1, 2890.0], [20.2, 2890.0], [20.3, 2895.0], [20.4, 2897.0], [20.5, 2898.0], [20.6, 2902.0], [20.7, 2905.0], [20.8, 2906.0], [20.9, 2917.0], [21.0, 2918.0], [21.1, 2926.0], [21.2, 2927.0], [21.3, 2930.0], [21.4, 2931.0], [21.5, 2934.0], [21.6, 2938.0], [21.7, 2951.0], [21.8, 2952.0], [21.9, 2956.0], [22.0, 2970.0], [22.1, 2973.0], [22.2, 2977.0], [22.3, 2984.0], [22.4, 2984.0], [22.5, 2986.0], [22.6, 2992.0], [22.7, 2999.0], [22.8, 3004.0], [22.9, 3010.0], [23.0, 3017.0], [23.1, 3024.0], [23.2, 3025.0], [23.3, 3027.0], [23.4, 3030.0], [23.5, 3031.0], [23.6, 3033.0], [23.7, 3038.0], [23.8, 3044.0], [23.9, 3046.0], [24.0, 3048.0], [24.1, 3049.0], [24.2, 3051.0], [24.3, 3053.0], [24.4, 3054.0], [24.5, 3059.0], [24.6, 3060.0], [24.7, 3064.0], [24.8, 3064.0], [24.9, 3077.0], [25.0, 3088.0], [25.1, 3093.0], [25.2, 3094.0], [25.3, 3103.0], [25.4, 3107.0], [25.5, 3110.0], [25.6, 3112.0], [25.7, 3118.0], [25.8, 3122.0], [25.9, 3133.0], [26.0, 3139.0], [26.1, 3141.0], [26.2, 3145.0], [26.3, 3147.0], [26.4, 3153.0], [26.5, 3164.0], [26.6, 3179.0], [26.7, 3219.0], [26.8, 3222.0], [26.9, 3227.0], [27.0, 3240.0], [27.1, 3255.0], [27.2, 3274.0], [27.3, 3285.0], [27.4, 3286.0], [27.5, 3297.0], [27.6, 3306.0], [27.7, 3307.0], [27.8, 3318.0], [27.9, 3323.0], [28.0, 3324.0], [28.1, 3329.0], [28.2, 3334.0], [28.3, 3339.0], [28.4, 3359.0], [28.5, 3365.0], [28.6, 3368.0], [28.7, 3375.0], [28.8, 3382.0], [28.9, 3387.0], [29.0, 3398.0], [29.1, 3403.0], [29.2, 3410.0], [29.3, 3421.0], [29.4, 3436.0], [29.5, 3446.0], [29.6, 3446.0], [29.7, 3450.0], [29.8, 3464.0], [29.9, 3475.0], [30.0, 3480.0], [30.1, 3485.0], [30.2, 3509.0], [30.3, 3518.0], [30.4, 3522.0], [30.5, 3528.0], [30.6, 3548.0], [30.7, 3551.0], [30.8, 3556.0], [30.9, 3561.0], [31.0, 3571.0], [31.1, 3590.0], [31.2, 3590.0], [31.3, 3594.0], [31.4, 3605.0], [31.5, 3611.0], [31.6, 3613.0], [31.7, 3615.0], [31.8, 3616.0], [31.9, 3618.0], [32.0, 3620.0], [32.1, 3621.0], [32.2, 3623.0], [32.3, 3627.0], [32.4, 3634.0], [32.5, 3643.0], [32.6, 3647.0], [32.7, 3651.0], [32.8, 3654.0], [32.9, 3657.0], [33.0, 3664.0], [33.1, 3669.0], [33.2, 3671.0], [33.3, 3680.0], [33.4, 3693.0], [33.5, 3696.0], [33.6, 3701.0], [33.7, 3706.0], [33.8, 3710.0], [33.9, 3711.0], [34.0, 3713.0], [34.1, 3715.0], [34.2, 3720.0], [34.3, 3725.0], [34.4, 3726.0], [34.5, 3727.0], [34.6, 3729.0], [34.7, 3732.0], [34.8, 3738.0], [34.9, 3741.0], [35.0, 3761.0], [35.1, 3766.0], [35.2, 3767.0], [35.3, 3773.0], [35.4, 3789.0], [35.5, 3803.0], [35.6, 3804.0], [35.7, 3814.0], [35.8, 3818.0], [35.9, 3821.0], [36.0, 3823.0], [36.1, 3825.0], [36.2, 3826.0], [36.3, 3838.0], [36.4, 3841.0], [36.5, 3846.0], [36.6, 3848.0], [36.7, 3855.0], [36.8, 3856.0], [36.9, 3860.0], [37.0, 3875.0], [37.1, 3897.0], [37.2, 3899.0], [37.3, 3900.0], [37.4, 3904.0], [37.5, 3917.0], [37.6, 3917.0], [37.7, 3925.0], [37.8, 3934.0], [37.9, 3935.0], [38.0, 3939.0], [38.1, 3941.0], [38.2, 3953.0], [38.3, 3954.0], [38.4, 3954.0], [38.5, 3955.0], [38.6, 3958.0], [38.7, 3961.0], [38.8, 3962.0], [38.9, 3966.0], [39.0, 3974.0], [39.1, 3977.0], [39.2, 3978.0], [39.3, 3982.0], [39.4, 3984.0], [39.5, 3985.0], [39.6, 3996.0], [39.7, 4001.0], [39.8, 4006.0], [39.9, 4018.0], [40.0, 4018.0], [40.1, 4024.0], [40.2, 4036.0], [40.3, 4045.0], [40.4, 4051.0], [40.5, 4054.0], [40.6, 4059.0], [40.7, 4064.0], [40.8, 4064.0], [40.9, 4066.0], [41.0, 4067.0], [41.1, 4069.0], [41.2, 4071.0], [41.3, 4073.0], [41.4, 4075.0], [41.5, 4076.0], [41.6, 4077.0], [41.7, 4078.0], [41.8, 4079.0], [41.9, 4086.0], [42.0, 4093.0], [42.1, 4097.0], [42.2, 4102.0], [42.3, 4104.0], [42.4, 4107.0], [42.5, 4125.0], [42.6, 4125.0], [42.7, 4133.0], [42.8, 4147.0], [42.9, 4157.0], [43.0, 4162.0], [43.1, 4164.0], [43.2, 4168.0], [43.3, 4168.0], [43.4, 4175.0], [43.5, 4181.0], [43.6, 4183.0], [43.7, 4185.0], [43.8, 4195.0], [43.9, 4197.0], [44.0, 4199.0], [44.1, 4203.0], [44.2, 4207.0], [44.3, 4208.0], [44.4, 4210.0], [44.5, 4214.0], [44.6, 4216.0], [44.7, 4227.0], [44.8, 4230.0], [44.9, 4230.0], [45.0, 4234.0], [45.1, 4241.0], [45.2, 4241.0], [45.3, 4244.0], [45.4, 4253.0], [45.5, 4257.0], [45.6, 4257.0], [45.7, 4261.0], [45.8, 4285.0], [45.9, 4288.0], [46.0, 4294.0], [46.1, 4299.0], [46.2, 4303.0], [46.3, 4303.0], [46.4, 4304.0], [46.5, 4311.0], [46.6, 4312.0], [46.7, 4313.0], [46.8, 4319.0], [46.9, 4321.0], [47.0, 4324.0], [47.1, 4325.0], [47.2, 4325.0], [47.3, 4325.0], [47.4, 4330.0], [47.5, 4331.0], [47.6, 4332.0], [47.7, 4347.0], [47.8, 4349.0], [47.9, 4357.0], [48.0, 4358.0], [48.1, 4366.0], [48.2, 4386.0], [48.3, 4395.0], [48.4, 4401.0], [48.5, 4448.0], [48.6, 4456.0], [48.7, 4460.0], [48.8, 4464.0], [48.9, 4484.0], [49.0, 4496.0], [49.1, 4504.0], [49.2, 4508.0], [49.3, 4516.0], [49.4, 4523.0], [49.5, 4545.0], [49.6, 4555.0], [49.7, 4562.0], [49.8, 4564.0], [49.9, 4579.0], [50.0, 4590.0], [50.1, 4592.0], [50.2, 4593.0], [50.3, 4625.0], [50.4, 4636.0], [50.5, 4644.0], [50.6, 4651.0], [50.7, 4653.0], [50.8, 4660.0], [50.9, 4662.0], [51.0, 4665.0], [51.1, 4669.0], [51.2, 4675.0], [51.3, 4681.0], [51.4, 4688.0], [51.5, 4696.0], [51.6, 4698.0], [51.7, 4706.0], [51.8, 4709.0], [51.9, 4717.0], [52.0, 4719.0], [52.1, 4730.0], [52.2, 4744.0], [52.3, 4747.0], [52.4, 4753.0], [52.5, 4756.0], [52.6, 4775.0], [52.7, 4779.0], [52.8, 4780.0], [52.9, 4819.0], [53.0, 4826.0], [53.1, 4832.0], [53.2, 4835.0], [53.3, 4838.0], [53.4, 4842.0], [53.5, 4852.0], [53.6, 4853.0], [53.7, 4856.0], [53.8, 4859.0], [53.9, 4864.0], [54.0, 4869.0], [54.1, 4880.0], [54.2, 4887.0], [54.3, 4897.0], [54.4, 4906.0], [54.5, 4910.0], [54.6, 4912.0], [54.7, 4914.0], [54.8, 4932.0], [54.9, 4937.0], [55.0, 4938.0], [55.1, 4958.0], [55.2, 4969.0], [55.3, 4974.0], [55.4, 4987.0], [55.5, 5001.0], [55.6, 5026.0], [55.7, 5028.0], [55.8, 5033.0], [55.9, 5049.0], [56.0, 5050.0], [56.1, 5055.0], [56.2, 5062.0], [56.3, 5072.0], [56.4, 5087.0], [56.5, 5089.0], [56.6, 5089.0], [56.7, 5096.0], [56.8, 5106.0], [56.9, 5114.0], [57.0, 5115.0], [57.1, 5126.0], [57.2, 5126.0], [57.3, 5131.0], [57.4, 5138.0], [57.5, 5140.0], [57.6, 5141.0], [57.7, 5144.0], [57.8, 5146.0], [57.9, 5149.0], [58.0, 5158.0], [58.1, 5160.0], [58.2, 5172.0], [58.3, 5176.0], [58.4, 5179.0], [58.5, 5180.0], [58.6, 5182.0], [58.7, 5187.0], [58.8, 5189.0], [58.9, 5200.0], [59.0, 5205.0], [59.1, 5207.0], [59.2, 5208.0], [59.3, 5210.0], [59.4, 5211.0], [59.5, 5213.0], [59.6, 5214.0], [59.7, 5218.0], [59.8, 5219.0], [59.9, 5223.0], [60.0, 5228.0], [60.1, 5232.0], [60.2, 5240.0], [60.3, 5249.0], [60.4, 5257.0], [60.5, 5272.0], [60.6, 5275.0], [60.7, 5281.0], [60.8, 5283.0], [60.9, 5288.0], [61.0, 5290.0], [61.1, 5304.0], [61.2, 5307.0], [61.3, 5311.0], [61.4, 5312.0], [61.5, 5317.0], [61.6, 5318.0], [61.7, 5321.0], [61.8, 5328.0], [61.9, 5331.0], [62.0, 5333.0], [62.1, 5339.0], [62.2, 5353.0], [62.3, 5355.0], [62.4, 5355.0], [62.5, 5365.0], [62.6, 5368.0], [62.7, 5372.0], [62.8, 5376.0], [62.9, 5383.0], [63.0, 5387.0], [63.1, 5393.0], [63.2, 5394.0], [63.3, 5396.0], [63.4, 5398.0], [63.5, 5408.0], [63.6, 5415.0], [63.7, 5424.0], [63.8, 5427.0], [63.9, 5429.0], [64.0, 5433.0], [64.1, 5435.0], [64.2, 5441.0], [64.3, 5448.0], [64.4, 5450.0], [64.5, 5456.0], [64.6, 5459.0], [64.7, 5463.0], [64.8, 5465.0], [64.9, 5468.0], [65.0, 5474.0], [65.1, 5475.0], [65.2, 5476.0], [65.3, 5480.0], [65.4, 5481.0], [65.5, 5486.0], [65.6, 5493.0], [65.7, 5494.0], [65.8, 5513.0], [65.9, 5516.0], [66.0, 5522.0], [66.1, 5526.0], [66.2, 5529.0], [66.3, 5536.0], [66.4, 5537.0], [66.5, 5542.0], [66.6, 5555.0], [66.7, 5562.0], [66.8, 5574.0], [66.9, 5581.0], [67.0, 5582.0], [67.1, 5585.0], [67.2, 5586.0], [67.3, 5589.0], [67.4, 5594.0], [67.5, 5596.0], [67.6, 5599.0], [67.7, 5604.0], [67.8, 5609.0], [67.9, 5618.0], [68.0, 5619.0], [68.1, 5620.0], [68.2, 5632.0], [68.3, 5635.0], [68.4, 5640.0], [68.5, 5645.0], [68.6, 5652.0], [68.7, 5655.0], [68.8, 5662.0], [68.9, 5676.0], [69.0, 5679.0], [69.1, 5682.0], [69.2, 5691.0], [69.3, 5697.0], [69.4, 5698.0], [69.5, 5724.0], [69.6, 5735.0], [69.7, 5739.0], [69.8, 5743.0], [69.9, 5758.0], [70.0, 5766.0], [70.1, 5773.0], [70.2, 5775.0], [70.3, 5792.0], [70.4, 5797.0], [70.5, 5802.0], [70.6, 5809.0], [70.7, 5814.0], [70.8, 5827.0], [70.9, 5827.0], [71.0, 5830.0], [71.1, 5831.0], [71.2, 5834.0], [71.3, 5843.0], [71.4, 5848.0], [71.5, 5856.0], [71.6, 5857.0], [71.7, 5861.0], [71.8, 5865.0], [71.9, 5865.0], [72.0, 5868.0], [72.1, 5869.0], [72.2, 5870.0], [72.3, 5878.0], [72.4, 5881.0], [72.5, 5883.0], [72.6, 5892.0], [72.7, 5892.0], [72.8, 5893.0], [72.9, 5899.0], [73.0, 5902.0], [73.1, 5911.0], [73.2, 5913.0], [73.3, 5913.0], [73.4, 5917.0], [73.5, 5926.0], [73.6, 5927.0], [73.7, 5938.0], [73.8, 5942.0], [73.9, 5943.0], [74.0, 5946.0], [74.1, 5947.0], [74.2, 5949.0], [74.3, 5951.0], [74.4, 5951.0], [74.5, 5957.0], [74.6, 5963.0], [74.7, 5964.0], [74.8, 5966.0], [74.9, 5967.0], [75.0, 5968.0], [75.1, 5970.0], [75.2, 5970.0], [75.3, 5971.0], [75.4, 5973.0], [75.5, 5974.0], [75.6, 5975.0], [75.7, 5976.0], [75.8, 5976.0], [75.9, 5978.0], [76.0, 5979.0], [76.1, 5979.0], [76.2, 5981.0], [76.3, 5990.0], [76.4, 5992.0], [76.5, 5992.0], [76.6, 5994.0], [76.7, 5996.0], [76.8, 5996.0], [76.9, 5998.0], [77.0, 6001.0], [77.1, 6003.0], [77.2, 6005.0], [77.3, 6011.0], [77.4, 6018.0], [77.5, 6022.0], [77.6, 6027.0], [77.7, 6029.0], [77.8, 6033.0], [77.9, 6035.0], [78.0, 6037.0], [78.1, 6041.0], [78.2, 6044.0], [78.3, 6045.0], [78.4, 6052.0], [78.5, 6058.0], [78.6, 6059.0], [78.7, 6061.0], [78.8, 6062.0], [78.9, 6064.0], [79.0, 6068.0], [79.1, 6070.0], [79.2, 6071.0], [79.3, 6075.0], [79.4, 6078.0], [79.5, 6095.0], [79.6, 6097.0], [79.7, 6099.0], [79.8, 6101.0], [79.9, 6107.0], [80.0, 6109.0], [80.1, 6109.0], [80.2, 6117.0], [80.3, 6120.0], [80.4, 6123.0], [80.5, 6127.0], [80.6, 6129.0], [80.7, 6137.0], [80.8, 6139.0], [80.9, 6139.0], [81.0, 6140.0], [81.1, 6143.0], [81.2, 6146.0], [81.3, 6150.0], [81.4, 6157.0], [81.5, 6158.0], [81.6, 6163.0], [81.7, 6165.0], [81.8, 6172.0], [81.9, 6174.0], [82.0, 6175.0], [82.1, 6178.0], [82.2, 6183.0], [82.3, 6196.0], [82.4, 6197.0], [82.5, 6200.0], [82.6, 6204.0], [82.7, 6206.0], [82.8, 6209.0], [82.9, 6210.0], [83.0, 6211.0], [83.1, 6212.0], [83.2, 6212.0], [83.3, 6214.0], [83.4, 6214.0], [83.5, 6216.0], [83.6, 6221.0], [83.7, 6223.0], [83.8, 6228.0], [83.9, 6230.0], [84.0, 6231.0], [84.1, 6231.0], [84.2, 6232.0], [84.3, 6235.0], [84.4, 6237.0], [84.5, 6242.0], [84.6, 6244.0], [84.7, 6251.0], [84.8, 6267.0], [84.9, 6275.0], [85.0, 6279.0], [85.1, 6281.0], [85.2, 6283.0], [85.3, 6285.0], [85.4, 6287.0], [85.5, 6289.0], [85.6, 6291.0], [85.7, 6292.0], [85.8, 6292.0], [85.9, 6298.0], [86.0, 6299.0], [86.1, 6313.0], [86.2, 6320.0], [86.3, 6321.0], [86.4, 6327.0], [86.5, 6330.0], [86.6, 6333.0], [86.7, 6347.0], [86.8, 6356.0], [86.9, 6361.0], [87.0, 6363.0], [87.1, 6366.0], [87.2, 6369.0], [87.3, 6374.0], [87.4, 6380.0], [87.5, 6385.0], [87.6, 6406.0], [87.7, 6415.0], [87.8, 6424.0], [87.9, 6433.0], [88.0, 6444.0], [88.1, 6453.0], [88.2, 6471.0], [88.3, 6478.0], [88.4, 6487.0], [88.5, 6492.0], [88.6, 6499.0], [88.7, 6506.0], [88.8, 6513.0], [88.9, 6513.0], [89.0, 6517.0], [89.1, 6518.0], [89.2, 6521.0], [89.3, 6522.0], [89.4, 6526.0], [89.5, 6527.0], [89.6, 6530.0], [89.7, 6532.0], [89.8, 6534.0], [89.9, 6535.0], [90.0, 6536.0], [90.1, 6537.0], [90.2, 6538.0], [90.3, 6539.0], [90.4, 6548.0], [90.5, 6550.0], [90.6, 6561.0], [90.7, 6562.0], [90.8, 6568.0], [90.9, 6577.0], [91.0, 6582.0], [91.1, 6584.0], [91.2, 6592.0], [91.3, 6593.0], [91.4, 6602.0], [91.5, 6607.0], [91.6, 6613.0], [91.7, 6615.0], [91.8, 6624.0], [91.9, 6630.0], [92.0, 6641.0], [92.1, 6641.0], [92.2, 6649.0], [92.3, 6658.0], [92.4, 6676.0], [92.5, 6681.0], [92.6, 6688.0], [92.7, 6691.0], [92.8, 6693.0], [92.9, 6696.0], [93.0, 6705.0], [93.1, 6717.0], [93.2, 6719.0], [93.3, 6729.0], [93.4, 6731.0], [93.5, 6733.0], [93.6, 6737.0], [93.7, 6737.0], [93.8, 6738.0], [93.9, 6746.0], [94.0, 6748.0], [94.1, 6752.0], [94.2, 6755.0], [94.3, 6759.0], [94.4, 6760.0], [94.5, 6760.0], [94.6, 6764.0], [94.7, 6768.0], [94.8, 6774.0], [94.9, 6776.0], [95.0, 6779.0], [95.1, 6788.0], [95.2, 6791.0], [95.3, 6795.0], [95.4, 6799.0], [95.5, 6801.0], [95.6, 6810.0], [95.7, 6821.0], [95.8, 6822.0], [95.9, 6833.0], [96.0, 6835.0], [96.1, 6837.0], [96.2, 6843.0], [96.3, 6853.0], [96.4, 6857.0], [96.5, 6870.0], [96.6, 6874.0], [96.7, 6875.0], [96.8, 6887.0], [96.9, 6890.0], [97.0, 6894.0], [97.1, 6898.0], [97.2, 6902.0], [97.3, 6903.0], [97.4, 6905.0], [97.5, 6909.0], [97.6, 6910.0], [97.7, 6912.0], [97.8, 6916.0], [97.9, 6924.0], [98.0, 6937.0], [98.1, 6941.0], [98.2, 6942.0], [98.3, 6954.0], [98.4, 6959.0], [98.5, 6960.0], [98.6, 6966.0], [98.7, 6983.0], [98.8, 7018.0], [98.9, 7025.0], [99.0, 7032.0], [99.1, 7040.0], [99.2, 7049.0], [99.3, 7056.0], [99.4, 7064.0], [99.5, 7068.0], [99.6, 7080.0], [99.7, 7086.0], [99.8, 7120.0], [99.9, 7129.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 600.0, "maxY": 74.0, "series": [{"data": [[600.0, 3.0], [700.0, 3.0], [800.0, 12.0], [900.0, 10.0], [1000.0, 22.0], [1100.0, 31.0], [1200.0, 18.0], [1300.0, 13.0], [1400.0, 20.0], [1500.0, 23.0], [1600.0, 22.0], [1700.0, 13.0], [1800.0, 8.0], [1900.0, 5.0], [2000.0, 8.0], [2100.0, 15.0], [2300.0, 15.0], [2200.0, 5.0], [2400.0, 28.0], [2500.0, 36.0], [2600.0, 34.0], [2700.0, 12.0], [2800.0, 29.0], [2900.0, 41.0], [3000.0, 47.0], [3100.0, 27.0], [3300.0, 28.0], [3200.0, 16.0], [3400.0, 21.0], [3500.0, 22.0], [3600.0, 42.0], [3700.0, 36.0], [3800.0, 34.0], [3900.0, 45.0], [4000.0, 47.0], [4100.0, 35.0], [4200.0, 40.0], [4300.0, 40.0], [4500.0, 24.0], [4600.0, 26.0], [4400.0, 13.0], [4700.0, 22.0], [4800.0, 28.0], [5000.0, 24.0], [5100.0, 39.0], [4900.0, 21.0], [5200.0, 42.0], [5300.0, 44.0], [5400.0, 43.0], [5500.0, 36.0], [5600.0, 34.0], [5700.0, 18.0], [5800.0, 48.0], [5900.0, 74.0], [6000.0, 53.0], [6100.0, 51.0], [6200.0, 67.0], [6300.0, 29.0], [6400.0, 20.0], [6500.0, 51.0], [6600.0, 29.0], [6700.0, 47.0], [6800.0, 33.0], [6900.0, 29.0], [7000.0, 20.0], [7100.0, 4.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 133.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1742.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 133.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1742.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 939.4186666666667, "minX": 1.75559532E12, "maxY": 939.4186666666667, "series": [{"data": [[1.75559532E12, 939.4186666666667]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559532E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 606.0, "minX": 13.0, "maxY": 7129.0, "series": [{"data": [[13.0, 6559.0], [15.0, 5501.0], [18.0, 5774.0], [20.0, 4997.785714285714], [23.0, 7129.0], [24.0, 6462.5], [27.0, 6976.75], [30.0, 6251.0], [33.0, 5459.0], [32.0, 6535.333333333333], [37.0, 5459.0], [36.0, 5884.0], [41.0, 6233.5], [40.0, 6068.0], [43.0, 6233.5], [42.0, 6067.0], [47.0, 6216.75], [48.0, 6230.0], [51.0, 6227.0], [50.0, 6227.0], [53.0, 6207.0], [55.0, 6330.0], [54.0, 6205.0], [57.0, 6537.0], [58.0, 6143.0], [61.0, 6212.0], [60.0, 6164.333333333333], [63.0, 6375.5], [62.0, 6524.0], [64.0, 6758.0], [71.0, 6185.0], [70.0, 6139.333333333333], [69.0, 6129.5], [68.0, 6140.0], [75.0, 5981.0], [73.0, 6059.0], [79.0, 5977.5], [77.0, 5982.333333333333], [83.0, 5973.0], [82.0, 5976.0], [85.0, 5913.0], [84.0, 5868.0], [95.0, 5967.0], [94.0, 6247.0], [93.0, 5924.5], [92.0, 5940.5], [99.0, 5881.0], [98.0, 6337.5], [97.0, 6513.0], [96.0, 5967.0], [103.0, 6041.0], [100.0, 5843.0], [106.0, 5944.0], [105.0, 5903.0], [104.0, 5946.0], [110.0, 6624.0], [109.0, 7064.0], [108.0, 7067.0], [115.0, 6159.0], [114.0, 6175.0], [113.0, 6793.5], [112.0, 7045.0], [118.0, 6527.0], [123.0, 7036.0], [122.0, 6620.0], [121.0, 6592.5], [125.0, 6430.333333333333], [124.0, 6535.0], [135.0, 6043.666666666667], [132.0, 6369.0], [131.0, 5942.0], [130.0, 5753.0], [129.0, 6227.333333333333], [128.0, 6671.5], [143.0, 6905.666666666667], [141.0, 6097.0], [140.0, 6890.0], [138.0, 6001.666666666667], [150.0, 5494.0], [149.0, 6214.0], [148.0, 6521.0], [147.0, 5604.0], [146.0, 6528.0], [145.0, 6577.0], [144.0, 6534.0], [159.0, 5486.0], [158.0, 5493.0], [157.0, 6375.333333333333], [154.0, 5445.0], [153.0, 6202.0], [167.0, 5993.0], [166.0, 6853.0], [164.0, 5480.0], [163.0, 5480.0], [162.0, 5481.0], [161.0, 5538.5], [174.0, 6197.0], [171.0, 5475.0], [169.0, 6229.0], [183.0, 4706.0], [182.0, 5365.0], [181.0, 5396.0], [180.0, 5690.0], [177.0, 6655.666666666667], [190.0, 7056.0], [189.0, 6601.5], [187.0, 6508.0], [186.0, 6518.0], [184.0, 6095.0], [199.0, 6780.75], [197.0, 7018.0], [194.0, 6120.0], [193.0, 7018.0], [192.0, 6574.0], [207.0, 6075.0], [206.0, 6917.5], [205.0, 6941.0], [203.0, 6745.0], [201.0, 6109.0], [200.0, 6289.0], [214.0, 7032.0], [213.0, 6788.0], [212.0, 6521.0], [211.0, 6561.0], [210.0, 6563.0], [209.0, 6460.0], [223.0, 6886.5], [221.0, 6238.0], [217.0, 6854.0], [216.0, 6966.0], [231.0, 6321.0], [230.0, 6910.0], [229.0, 6797.666666666667], [226.0, 6764.0], [225.0, 6902.0], [224.0, 6912.0], [239.0, 6898.0], [238.0, 6719.0], [237.0, 6941.0], [236.0, 6951.5], [235.0, 6924.0], [233.0, 6791.0], [232.0, 6937.0], [245.0, 6770.0], [244.0, 6942.0], [243.0, 6816.0], [241.0, 6874.0], [240.0, 6469.0], [252.0, 6696.0], [251.0, 6292.0], [250.0, 6903.5], [248.0, 6796.333333333333], [270.0, 6039.5], [271.0, 6875.0], [269.0, 6866.0], [267.0, 6844.0], [266.0, 6782.25], [265.0, 6691.0], [261.0, 6731.0], [260.0, 4455.0], [259.0, 6140.0], [256.0, 6494.25], [286.0, 6749.333333333333], [284.0, 6035.0], [281.0, 6834.0], [280.0, 6418.0], [279.0, 6041.0], [278.0, 6444.0], [276.0, 6870.0], [275.0, 6162.5], [273.0, 6901.5], [303.0, 3798.6666666666665], [300.0, 6703.0], [291.0, 6320.0], [290.0, 6672.333333333333], [289.0, 6368.5], [299.0, 2931.0], [298.0, 6433.0], [297.0, 3425.0], [296.0, 4175.0], [295.0, 2895.0], [294.0, 6033.0], [293.0, 3594.0], [292.0, 6439.0], [318.0, 2904.0], [319.0, 4257.0], [317.0, 4097.0], [316.0, 4102.0], [315.0, 3379.0], [313.0, 4230.0], [312.0, 3815.0], [311.0, 6478.5], [305.0, 3934.0], [304.0, 6022.0], [307.0, 4162.0], [306.0, 4162.0], [309.0, 6052.0], [308.0, 5205.0], [335.0, 6281.0], [334.0, 6674.0], [331.0, 6431.5], [329.0, 3803.0], [328.0, 4091.0], [327.0, 4099.25], [326.0, 3806.0], [324.0, 4837.666666666667], [338.0, 6028.0], [351.0, 6037.0], [349.0, 6045.0], [345.0, 6739.5], [344.0, 6071.0], [342.0, 6831.0], [341.0, 6555.0], [343.0, 6872.0], [336.0, 4757.5], [365.0, 6018.0], [367.0, 6730.0], [364.0, 4227.0], [363.0, 4184.0], [362.0, 4176.0], [359.0, 4204.666666666667], [358.0, 5999.666666666667], [353.0, 6358.0], [352.0, 6366.0], [381.0, 6231.0], [383.0, 6747.0], [380.0, 6719.0], [370.0, 5980.0], [369.0, 5374.5], [377.0, 4311.0], [376.0, 6761.0], [375.0, 6118.0], [374.0, 5976.0], [373.0, 6099.0], [372.0, 6394.5], [398.0, 6760.0], [395.0, 6157.0], [393.0, 5705.333333333333], [392.0, 5994.0], [390.0, 5968.0], [388.0, 5996.0], [387.0, 6393.0], [384.0, 6760.666666666667], [413.0, 6480.0], [412.0, 5869.0], [410.0, 6491.0], [407.0, 6107.0], [406.0, 5568.25], [403.0, 5116.0], [402.0, 5974.5], [431.0, 6267.666666666667], [428.0, 6206.666666666667], [425.0, 6248.5], [423.0, 6106.333333333333], [420.0, 6492.5], [418.0, 6484.5], [417.0, 6095.0], [416.0, 6641.0], [445.0, 5913.0], [444.0, 6835.0], [435.0, 5996.5], [434.0, 6613.0], [443.0, 6585.0], [442.0, 6363.0], [441.0, 5247.5], [440.0, 6837.0], [438.0, 6687.0], [437.0, 6270.5], [436.0, 6232.0], [451.0, 6799.0], [462.0, 6536.0], [461.0, 6561.0], [459.0, 6757.0], [458.0, 6094.5], [457.0, 6279.0], [455.0, 6439.5], [453.0, 6513.5], [452.0, 6292.0], [450.0, 6356.5], [449.0, 6660.5], [478.0, 6732.0], [479.0, 6748.0], [477.0, 5620.666666666667], [474.0, 6000.0], [473.0, 6733.0], [472.0, 6221.0], [471.0, 6046.333333333333], [470.0, 6748.0], [467.0, 6313.75], [464.0, 6005.0], [495.0, 5831.0], [493.0, 6453.0], [483.0, 6252.0], [482.0, 5894.0], [481.0, 5805.0], [491.0, 5892.0], [490.0, 6602.0], [489.0, 5848.0], [488.0, 5950.0], [487.0, 6760.0], [486.0, 6691.0], [485.0, 5857.0], [484.0, 6727.0], [509.0, 5376.0], [511.0, 5680.0], [508.0, 6401.0], [497.0, 6518.0], [506.0, 5424.0], [505.0, 6165.0], [504.0, 5423.0], [503.0, 6655.0], [502.0, 6127.0], [501.0, 6468.333333333334], [500.0, 6658.0], [537.0, 5758.0], [531.0, 5911.666666666667], [539.0, 5214.0], [541.0, 5779.5], [528.0, 6550.0], [538.0, 6503.0], [536.0, 5223.0], [519.0, 6214.5], [517.0, 5975.0], [516.0, 6543.0], [514.0, 5468.0], [513.0, 5276.0], [512.0, 6117.0], [527.0, 5429.0], [526.0, 6048.5], [524.0, 6528.0], [523.0, 5435.0], [521.0, 5882.0], [520.0, 6548.0], [535.0, 6215.0], [533.0, 6522.0], [532.0, 6615.0], [569.0, 5198.5], [574.0, 6517.0], [575.0, 4779.0], [560.0, 4869.0], [562.0, 4864.0], [561.0, 4932.0], [573.0, 6380.0], [572.0, 4825.0], [570.0, 5973.0], [558.0, 4872.0], [546.0, 6430.5], [544.0, 5995.333333333333], [548.0, 5213.0], [547.0, 5212.0], [550.0, 6323.0], [549.0, 5211.0], [557.0, 4934.0], [556.0, 5032.0], [555.0, 5059.0], [554.0, 6538.0], [553.0, 6076.333333333333], [567.0, 5652.0], [566.0, 4852.0], [565.0, 4858.5], [563.0, 6352.0], [604.0, 5827.0], [596.0, 5831.0], [607.0, 5832.333333333333], [593.0, 5514.0], [592.0, 6321.0], [595.0, 5774.0], [594.0, 6181.0], [603.0, 5463.0], [602.0, 5853.5], [600.0, 6283.0], [582.0, 6446.5], [580.0, 6243.0], [579.0, 5906.0], [578.0, 6397.0], [577.0, 5870.0], [576.0, 6290.0], [591.0, 6016.5], [589.0, 6347.0], [588.0, 3974.0], [587.0, 6212.0], [586.0, 6255.666666666667], [584.0, 6249.0], [599.0, 6149.0], [598.0, 4735.0], [597.0, 6301.0], [632.0, 5802.5], [638.0, 5353.0], [639.0, 6029.0], [625.0, 5744.5], [637.0, 6180.0], [635.0, 5813.0], [633.0, 5655.0], [623.0, 5773.0], [608.0, 6137.0], [610.0, 5821.0], [609.0, 5697.0], [612.0, 6132.0], [611.0, 6212.0], [614.0, 5814.0], [613.0, 5739.0], [622.0, 5983.0], [621.0, 5456.0], [620.0, 6050.333333333333], [617.0, 5676.0], [616.0, 5694.0], [630.0, 6150.0], [629.0, 6139.0], [628.0, 5327.0], [627.0, 5963.0], [669.0, 5994.0], [670.0, 5270.0], [667.0, 5710.0], [665.0, 6157.5], [664.0, 5645.5], [646.0, 5862.5], [645.0, 6011.0], [643.0, 6228.0], [642.0, 5396.0], [641.0, 5679.0], [640.0, 6174.0], [655.0, 5841.0], [652.0, 6116.0], [651.0, 5979.0], [650.0, 6211.0], [649.0, 5331.0], [648.0, 6177.0], [662.0, 5682.333333333333], [658.0, 6096.0], [657.0, 5724.0], [656.0, 5536.0], [702.0, 5857.0], [703.0, 5354.0], [689.0, 5372.0], [688.0, 5615.0], [692.0, 3384.0], [690.0, 5433.0], [701.0, 6101.0], [700.0, 5650.5], [698.0, 5574.0], [697.0, 3374.0], [696.0, 4513.0], [677.0, 5713.0], [675.0, 5814.6], [687.0, 6094.0], [686.0, 5949.0], [685.0, 3401.0], [684.0, 5289.0], [683.0, 6107.0], [682.0, 5581.5], [680.0, 5485.333333333333], [694.0, 5281.0], [693.0, 5640.5], [728.0, 6015.0], [733.0, 4220.0], [734.0, 5368.0], [721.0, 3255.0], [720.0, 5963.0], [723.0, 5946.0], [722.0, 5809.0], [732.0, 5911.0], [730.0, 5537.0], [729.0, 5474.0], [719.0, 5957.0], [704.0, 5974.0], [706.0, 5829.0], [705.0, 5260.0], [708.0, 5927.0], [707.0, 5527.0], [710.0, 5827.0], [709.0, 6003.0], [718.0, 6060.0], [717.0, 5917.0], [716.0, 5219.0], [715.0, 5838.0], [714.0, 5799.0], [712.0, 5189.0], [727.0, 5376.0], [726.0, 5513.0], [725.0, 5313.0], [724.0, 5171.0], [760.0, 5849.0], [766.0, 4931.0], [767.0, 5810.0], [752.0, 5330.0], [755.0, 5224.0], [753.0, 5441.0], [763.0, 5830.0], [762.0, 5028.0], [761.0, 5865.0], [751.0, 5924.0], [737.0, 5324.0], [736.0, 6010.0], [742.0, 5947.0], [741.0, 5982.25], [750.0, 5398.0], [749.0, 5915.0], [748.0, 5792.0], [747.0, 5947.0], [746.0, 5247.0], [745.0, 5532.0], [744.0, 5299.0], [759.0, 4948.0], [758.0, 5881.0], [757.0, 5883.0], [756.0, 5788.0], [798.0, 2938.0], [799.0, 5053.0], [784.0, 3122.0], [786.0, 3280.0], [785.0, 3318.0], [797.0, 3154.5], [795.0, 5071.0], [794.0, 3147.0], [793.0, 4410.5], [783.0, 4232.5], [772.0, 5658.333333333333], [769.0, 5838.0], [775.0, 5865.0], [774.0, 5861.0], [781.0, 5752.5], [779.0, 5608.0], [776.0, 5863.0], [791.0, 3053.5], [789.0, 5868.0], [788.0, 3143.0], [787.0, 4973.0], [825.0, 3044.0], [829.0, 3118.0], [830.0, 5138.0], [816.0, 3145.0], [818.0, 4253.0], [817.0, 3140.0], [820.0, 3049.0], [819.0, 5682.0], [828.0, 5637.0], [827.0, 5632.0], [826.0, 3071.0], [824.0, 3103.0], [807.0, 3090.0], [806.0, 3094.0], [805.0, 3139.0], [804.0, 4450.5], [802.0, 3133.0], [801.0, 3118.0], [800.0, 5538.0], [815.0, 4257.0], [814.0, 3059.0], [813.0, 5627.0], [812.0, 5180.0], [811.0, 5691.0], [810.0, 2875.0], [809.0, 3178.0], [808.0, 2890.0], [822.0, 3107.0], [821.0, 3107.0], [850.0, 3008.0], [861.0, 5625.5], [862.0, 5157.0], [849.0, 3004.0], [848.0, 3027.0], [859.0, 5625.5], [858.0, 5158.0], [856.0, 5620.0], [839.0, 3038.0], [835.0, 3049.0], [834.0, 4347.0], [832.0, 5431.5], [847.0, 3987.5], [846.0, 4324.5], [843.0, 5139.0], [842.0, 4016.5], [841.0, 4366.5], [855.0, 3078.0], [853.0, 4349.0], [851.0, 3064.0], [882.0, 4360.0], [895.0, 3031.5], [893.0, 4658.75], [889.0, 4483.0], [871.0, 3025.0], [870.0, 3054.0], [869.0, 5589.0], [868.0, 2999.0], [867.0, 5585.0], [866.0, 4183.0], [887.0, 5539.333333333333], [884.0, 4709.0], [883.0, 4294.0], [880.0, 4938.0], [879.0, 5321.0], [877.0, 4787.0], [876.0, 5055.0], [875.0, 5573.0], [874.0, 3045.0], [873.0, 3046.0], [872.0, 4832.0], [926.0, 2986.0], [927.0, 2977.0], [912.0, 5279.0], [924.0, 5583.0], [923.0, 5500.5], [922.0, 2821.0], [920.0, 4446.75], [910.0, 4787.5], [899.0, 4935.0], [897.0, 5354.5], [901.0, 4838.0], [900.0, 5591.0], [908.0, 4919.666666666667], [906.0, 5146.0], [905.0, 4853.0], [904.0, 4870.5], [917.0, 5601.0], [916.0, 2823.0], [915.0, 3017.0], [913.0, 5586.0], [948.0, 4985.5], [957.0, 5026.0], [956.0, 3790.0], [955.0, 4730.5], [952.0, 4698.0], [942.0, 2951.0], [929.0, 2971.0], [928.0, 2973.0], [933.0, 2905.0], [932.0, 2948.0], [935.0, 4747.0], [934.0, 2895.0], [941.0, 5318.0], [940.0, 4694.0], [939.0, 4934.333333333333], [936.0, 4675.0], [951.0, 4636.0], [950.0, 5355.0], [949.0, 5477.0], [946.0, 4662.0], [945.0, 5309.333333333333], [989.0, 5037.0], [991.0, 4829.5], [979.0, 4431.0], [976.0, 3958.0], [987.0, 5453.0], [986.0, 3953.0], [985.0, 5476.0], [984.0, 2859.0], [975.0, 5025.5], [963.0, 4906.0], [960.0, 4682.666666666667], [966.0, 2934.0], [964.0, 4877.0], [973.0, 4224.5], [971.0, 5098.5], [968.0, 4971.5], [983.0, 2918.0], [982.0, 2852.0], [981.0, 2930.0], [980.0, 2893.0], [1017.0, 4660.0], [1022.0, 4787.5], [1023.0, 3968.0], [1008.0, 2877.0], [1010.0, 4826.0], [1009.0, 2875.0], [1012.0, 2862.0], [1011.0, 4987.0], [1021.0, 4644.0], [1019.0, 4675.0], [1018.0, 4104.0], [1016.0, 4897.0], [999.0, 2898.0], [998.0, 2901.0], [996.0, 4859.0], [995.0, 4699.0], [994.0, 5016.0], [992.0, 3935.0], [1007.0, 2910.0], [1006.0, 2888.0], [1005.0, 2890.0], [1004.0, 2890.0], [1003.0, 2892.0], [1002.0, 4688.0], [1001.0, 2897.0], [1000.0, 4780.0], [1015.0, 4259.5], [1013.0, 4665.0], [1078.0, 2571.0], [1080.0, 5272.0], [1086.0, 4669.0], [1060.0, 5162.0], [1058.0, 2610.0], [1064.0, 2692.0], [1066.0, 2644.0], [1084.0, 2559.5], [1082.0, 2667.3333333333335], [1074.0, 5291.0], [1072.0, 3901.0], [1024.0, 5205.0], [1028.0, 4201.5], [1030.0, 5185.0], [1034.0, 4835.0], [1036.0, 5182.0], [1038.0, 5290.0], [1054.0, 2712.0], [1052.0, 4625.0], [1050.0, 2729.0], [1048.0, 2629.0], [1046.0, 5320.0], [1044.0, 5391.0], [1042.0, 4886.0], [1040.0, 5249.0], [1144.0, 5087.0], [1120.0, 2475.5], [1124.0, 2385.5], [1122.0, 2474.0], [1126.0, 2500.0], [1128.0, 2497.0], [1130.0, 2168.0], [1132.0, 2482.0], [1150.0, 5144.0], [1146.0, 4241.0], [1142.0, 4456.0], [1138.0, 4456.0], [1118.0, 2610.0], [1088.0, 2661.0], [1090.0, 3719.0], [1094.0, 5051.0], [1096.0, 4999.0], [1098.0, 5257.0], [1100.0, 2543.0], [1102.0, 5208.0], [1116.0, 2598.0], [1114.0, 2619.0], [1112.0, 3188.6666666666665], [1110.0, 4834.0], [1108.0, 3505.5], [1106.0, 5218.0], [1104.0, 4719.0], [1184.0, 4523.0], [1188.0, 4355.0], [1214.0, 2074.0], [1192.0, 4753.0], [1190.0, 4756.0], [1194.0, 4753.0], [1198.0, 4440.4], [1212.0, 2509.0], [1210.0, 4819.0], [1208.0, 3283.0], [1206.0, 2329.0], [1204.0, 2497.0], [1202.0, 2315.0], [1158.0, 2466.0], [1156.0, 4853.0], [1166.0, 4872.666666666667], [1182.0, 3066.6666666666665], [1180.0, 4684.0], [1178.0, 5107.5], [1176.0, 4659.0], [1272.0, 1127.0], [1248.0, 1766.5], [1250.0, 1055.0], [1252.0, 2919.5], [1258.0, 1707.0], [1256.0, 3452.3333333333335], [1260.0, 3478.5], [1278.0, 1007.0], [1274.0, 1415.0], [1270.0, 1441.0], [1268.0, 2104.0], [1264.0, 1970.0], [1216.0, 2260.0], [1220.0, 2430.0], [1224.0, 2468.0], [1226.0, 2449.0], [1228.0, 2413.0], [1244.0, 2413.0], [1242.0, 1086.5], [1240.0, 2200.5], [1238.0, 1747.0], [1236.0, 2412.0], [1234.0, 2408.0], [1232.0, 2349.0], [1336.0, 972.0], [1318.0, 1552.0], [1342.0, 1087.0], [1312.0, 1177.0], [1316.0, 1244.0], [1322.0, 1745.0], [1324.0, 1338.5], [1326.0, 1129.0], [1340.0, 1120.0], [1338.0, 899.0], [1330.0, 863.0], [1328.0, 838.0], [1280.0, 1108.0], [1282.0, 974.0], [1286.0, 978.0], [1288.0, 1822.0], [1290.0, 1820.0], [1292.0, 953.0], [1294.0, 1049.0], [1310.0, 1871.0], [1308.0, 1745.0], [1306.0, 875.0], [1302.0, 4504.0], [1300.0, 1780.0], [1298.0, 2276.0], [1400.0, 1553.3333333333333], [1382.0, 4325.0], [1406.0, 4321.0], [1380.0, 4319.5], [1378.0, 1227.0], [1384.0, 4309.0], [1388.0, 1426.0], [1390.0, 4323.0], [1404.0, 2952.5], [1396.0, 4319.0], [1358.0, 4077.0], [1356.0, 4205.5], [1354.0, 4211.5], [1352.0, 4218.0], [1350.0, 4386.0], [1346.0, 1490.0], [1344.0, 1286.0], [1374.0, 2651.0], [1372.0, 4066.0], [1370.0, 4199.5], [1368.0, 4073.0], [1364.0, 4201.5], [1362.0, 3428.0], [1466.0, 4133.0], [1448.0, 606.0], [1440.0, 2836.5], [1442.0, 1414.0], [1446.0, 1559.3333333333333], [1450.0, 1353.0], [1452.0, 1829.0], [1454.0, 1249.0], [1468.0, 4056.5], [1464.0, 1394.0], [1460.0, 1380.0], [1458.0, 1216.0], [1456.0, 1413.0], [1422.0, 1935.0], [1420.0, 1888.0], [1418.0, 4204.5], [1416.0, 4230.0], [1414.0, 4235.0], [1412.0, 4122.0], [1410.0, 4294.0], [1408.0, 4289.5], [1436.0, 1498.0], [1434.0, 1747.5], [1432.0, 1509.0], [1428.0, 2864.0], [1426.0, 1520.5], [1424.0, 1911.0], [1522.0, 2824.0], [1530.0, 3621.0], [1534.0, 1680.0], [1504.0, 3857.0], [1508.0, 4299.0], [1506.0, 4137.5], [1516.0, 1620.0], [1518.0, 4255.0], [1526.0, 3623.0], [1524.0, 1272.0], [1520.0, 3587.0], [1472.0, 1359.0], [1474.0, 3882.0], [1476.0, 4107.0], [1482.0, 2996.3333333333335], [1484.0, 3998.0], [1486.0, 1679.0], [1502.0, 1631.0], [1500.0, 4001.0], [1498.0, 3978.0], [1496.0, 1314.0], [1494.0, 2889.0], [1492.0, 1762.0], [1488.0, 4018.0], [1548.0, 4207.0], [1594.0, 3789.0], [1598.0, 1490.0], [1568.0, 3554.0], [1582.0, 3846.0], [1592.0, 3398.0], [1590.0, 2479.0], [1584.0, 2938.5], [1550.0, 3860.0], [1546.0, 3594.0], [1544.0, 4082.5], [1542.0, 1675.0], [1540.0, 3421.0], [1538.0, 4114.5], [1536.0, 3936.0], [1566.0, 1630.5], [1564.0, 1202.0], [1562.0, 1619.0], [1558.0, 3641.5], [1554.0, 2790.0], [1552.0, 4025.0], [1660.0, 3719.3333333333335], [1632.0, 1465.0], [1638.0, 3669.0], [1642.0, 3862.0], [1644.0, 3644.0], [1658.0, 4051.0], [1650.0, 2457.0], [1600.0, 2874.0], [1602.0, 3252.0], [1606.0, 3925.0], [1604.0, 2774.5], [1614.0, 3824.166666666667], [1646.0, 4036.0], [1678.0, 3306.0], [1704.0, 3033.0], [1722.0, 3413.5], [1696.0, 3625.0], [1700.0, 3693.0], [1706.0, 3904.0], [1708.0, 3874.0], [1710.0, 3897.0], [1720.0, 3738.0], [1714.0, 2334.0], [1674.0, 3612.0], [1672.0, 3954.0], [1668.0, 1299.0], [1666.0, 3597.3333333333335], [1692.0, 3709.5], [1690.0, 3662.5], [1686.0, 3718.0], [1684.0, 2905.5], [1682.0, 3475.0], [1680.0, 3922.0], [1780.0, 1197.0], [1788.0, 3723.0], [1760.0, 3839.0], [1762.0, 3240.0], [1766.0, 2984.0], [1772.0, 3504.25], [1768.0, 3818.0], [1774.0, 3102.0], [1790.0, 2981.0], [1786.0, 3590.5], [1778.0, 1203.0], [1776.0, 3016.0], [1728.0, 2940.0], [1730.0, 3848.0], [1732.0, 3023.0], [1736.0, 3917.0], [1740.0, 3620.0], [1738.0, 3077.5], [1742.0, 3618.0], [1756.0, 1151.0], [1754.0, 3887.0], [1752.0, 3297.0], [1748.0, 1259.0], [1746.0, 3821.5], [1744.0, 3613.0], [1840.0, 3446.0], [1836.0, 3551.0], [1828.0, 2821.0], [1826.0, 3548.0], [1830.0, 3571.0], [1794.0, 3710.5], [1792.0, 3286.0], [1798.0, 3511.6666666666665], [1802.0, 3767.0], [1804.0, 3680.0], [1806.0, 3074.0], [1820.0, 3159.5], [1818.0, 3542.0], [1816.0, 3406.0], [1812.0, 2927.0], [1810.0, 3732.0], [1808.0, 3684.0], [1838.0, 2810.0], [1834.0, 3077.0], [1866.0, 1818.5], [1856.0, 2960.0], [1029.0, 5427.0], [1057.0, 4824.0], [1063.0, 4161.333333333333], [1067.0, 5307.0], [1071.0, 2630.0], [1069.0, 2610.0], [1077.0, 3992.5], [1075.0, 2679.0], [1073.0, 2579.0], [1055.0, 2711.0], [1025.0, 4917.0], [1027.0, 4660.0], [1033.0, 5357.5], [1031.0, 5415.0], [1035.0, 2813.0], [1037.0, 2708.0], [1039.0, 5317.0], [1053.0, 5287.0], [1051.0, 2726.0], [1049.0, 4477.0], [1047.0, 2733.0], [1045.0, 4880.0], [1043.0, 4855.0], [1041.0, 5433.0], [1143.0, 4494.25], [1127.0, 4914.0], [1147.0, 4912.0], [1151.0, 4648.0], [1121.0, 2516.0], [1125.0, 2602.0], [1129.0, 2499.0], [1131.0, 2563.0], [1135.0, 2418.5], [1133.0, 2481.0], [1149.0, 2472.0], [1145.0, 4938.0], [1139.0, 3613.0], [1137.0, 5114.0], [1091.0, 2558.0], [1095.0, 2655.0], [1097.0, 5251.0], [1099.0, 2645.0], [1101.0, 2538.0], [1103.0, 2641.0], [1117.0, 2524.0], [1113.0, 4511.0], [1105.0, 5214.0], [1185.0, 2528.0], [1211.0, 2510.0], [1187.0, 2505.0], [1189.0, 4958.0], [1197.0, 4775.0], [1199.0, 2108.0], [1213.0, 2074.0], [1209.0, 2517.0], [1207.0, 2499.0], [1203.0, 2502.0], [1183.0, 5160.0], [1153.0, 4622.0], [1163.0, 3969.6666666666665], [1159.0, 4861.666666666667], [1165.0, 4912.0], [1173.0, 4710.25], [1169.0, 5125.333333333333], [1267.0, 4590.0], [1275.0, 1333.0], [1279.0, 1060.0], [1249.0, 1058.0], [1253.0, 4592.0], [1261.0, 1161.0], [1277.0, 1336.5], [1273.0, 1021.0], [1271.0, 1341.0], [1269.0, 1862.0], [1265.0, 2355.0], [1247.0, 1073.0], [1219.0, 2140.0], [1217.0, 2042.0], [1221.0, 2451.0], [1223.0, 2092.5], [1225.0, 2126.0], [1227.0, 2449.0], [1231.0, 2197.0], [1229.0, 4697.0], [1245.0, 1100.0], [1243.0, 1029.0], [1237.0, 2313.0], [1235.0, 4709.0], [1233.0, 2428.0], [1333.0, 1112.5], [1339.0, 894.0], [1315.0, 1288.0], [1313.0, 1221.0], [1317.0, 1116.0], [1319.0, 853.0], [1321.0, 927.5], [1325.0, 2194.0], [1327.0, 1123.0], [1341.0, 1125.0], [1335.0, 878.5], [1331.0, 1114.0], [1329.0, 1094.0], [1311.0, 2218.0], [1281.0, 1107.0], [1285.0, 1050.5], [1283.0, 934.0], [1287.0, 1011.0], [1289.0, 958.0], [1291.0, 2319.0], [1293.0, 2319.0], [1295.0, 2013.0], [1307.0, 1535.0], [1305.0, 2199.5], [1303.0, 2250.0], [1301.0, 4545.0], [1299.0, 1797.0], [1297.0, 1079.5], [1377.0, 4065.3333333333335], [1403.0, 2974.5], [1383.0, 4325.0], [1387.0, 4337.0], [1389.0, 4303.0], [1391.0, 4326.0], [1405.0, 1549.0], [1397.0, 1571.0], [1395.0, 4325.0], [1393.0, 4326.5], [1359.0, 4078.0], [1353.0, 4357.0], [1351.0, 4359.0], [1347.0, 1079.0], [1345.0, 1491.0], [1369.0, 4075.0], [1365.0, 4331.0], [1465.0, 4070.0], [1461.0, 1256.0], [1471.0, 4045.0], [1441.0, 624.0], [1443.0, 1829.0], [1447.0, 1607.0], [1449.0, 1302.0], [1451.0, 1767.0], [1453.0, 1345.0], [1455.0, 1398.0], [1469.0, 4024.0], [1463.0, 1508.0], [1459.0, 1265.0], [1457.0, 4095.0], [1423.0, 4199.0], [1421.0, 4388.0], [1419.0, 4195.0], [1415.0, 3948.0], [1413.0, 4246.0], [1409.0, 4241.0], [1439.0, 1476.0], [1437.0, 1493.0], [1435.0, 1976.0], [1431.0, 1519.0], [1429.0, 1501.0], [1527.0, 1699.0], [1525.0, 3627.0], [1509.0, 3900.5], [1511.0, 3967.5], [1515.0, 2623.0], [1513.0, 1459.0], [1517.0, 3643.0], [1519.0, 4010.0], [1533.0, 2914.5], [1531.0, 4087.5], [1529.0, 1690.0], [1523.0, 2735.0], [1503.0, 3978.0], [1473.0, 4183.0], [1475.0, 3710.0], [1477.0, 4035.0], [1479.0, 2942.5], [1483.0, 3329.0], [1487.0, 3764.5], [1501.0, 3955.0], [1499.0, 1483.0], [1497.0, 4303.0], [1495.0, 1284.0], [1491.0, 4246.333333333333], [1593.0, 3821.0], [1571.0, 3932.0], [1569.0, 1623.0], [1575.0, 3298.0], [1573.0, 3849.0], [1579.0, 4022.5], [1577.0, 2489.5], [1581.0, 3400.0], [1597.0, 2502.0], [1595.0, 2843.0], [1589.0, 3715.0], [1587.0, 2602.5], [1585.0, 1207.0], [1549.0, 3899.0], [1547.0, 3482.0], [1545.0, 3974.0], [1541.0, 4196.0], [1539.0, 3985.0], [1537.0, 4226.0], [1567.0, 1627.0], [1563.0, 1196.0], [1561.0, 2899.5], [1559.0, 4244.0], [1557.0, 3855.0], [1555.0, 3450.0], [1553.0, 3897.0], [1635.0, 3863.0], [1639.0, 3442.5], [1657.0, 3511.0], [1663.0, 3189.6666666666665], [1633.0, 3825.0], [1637.0, 3219.0], [1641.0, 4001.0], [1643.0, 3556.0], [1645.0, 4046.0], [1655.0, 3253.25], [1651.0, 3834.0], [1649.0, 3095.5], [1631.0, 3360.4999999999995], [1603.0, 4164.0], [1611.0, 3920.5], [1615.0, 3735.0], [1647.0, 3955.0], [1725.0, 2353.5], [1727.0, 3647.0], [1699.0, 3096.5], [1697.0, 3701.0], [1703.0, 3365.3333333333335], [1705.0, 3954.0], [1707.0, 2449.0], [1709.0, 3705.0], [1711.0, 1072.0], [1723.0, 3838.0], [1719.0, 3377.5], [1715.0, 3404.0], [1713.0, 3810.5], [1679.0, 3555.0], [1675.0, 3480.0], [1673.0, 2513.0], [1671.0, 2921.0], [1667.0, 3940.0], [1693.0, 3153.0], [1689.0, 2513.0], [1687.0, 2250.0], [1681.0, 3729.0], [1785.0, 3763.0], [1791.0, 3654.0], [1761.0, 3329.0], [1765.0, 3801.0], [1763.0, 2984.0], [1767.0, 3112.0], [1775.0, 3535.5], [1789.0, 1177.0], [1787.0, 1088.0], [1783.0, 2364.5], [1781.0, 3711.0], [1779.0, 1109.0], [1777.0, 1120.0], [1759.0, 3596.5], [1729.0, 3081.0], [1731.0, 3301.0], [1735.0, 3262.3333333333335], [1743.0, 1169.0], [1755.0, 1148.0], [1753.0, 3841.0], [1751.0, 1156.0], [1749.0, 3606.0], [1851.0, 3410.0], [1831.0, 3561.0], [1853.0, 2617.0], [1825.0, 3306.0], [1829.0, 2992.0], [1833.0, 864.0], [1841.0, 716.0], [1823.0, 2775.3333333333335], [1795.0, 3221.0], [1801.0, 2718.0], [1803.0, 3657.0], [1807.0, 3450.0], [1813.0, 2883.0], [1811.0, 3403.0], [1809.0, 884.0], [1839.0, 3048.0], [1837.0, 3066.0], [1835.0, 854.0], [1875.0, 2763.7], [1873.0, 3334.0], [1859.0, 2902.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}, {"data": [[939.4175999999991, 4437.680533333328]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1875.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15437.5, "minX": 1.75559532E12, "maxY": 22281.25, "series": [{"data": [[1.75559532E12, 22281.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75559532E12, 15437.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559532E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4437.680533333328, "minX": 1.75559532E12, "maxY": 4437.680533333328, "series": [{"data": [[1.75559532E12, 4437.680533333328]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559532E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4437.292266666667, "minX": 1.75559532E12, "maxY": 4437.292266666667, "series": [{"data": [[1.75559532E12, 4437.292266666667]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559532E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4182.737599999997, "minX": 1.75559532E12, "maxY": 4182.737599999997, "series": [{"data": [[1.75559532E12, 4182.737599999997]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559532E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 606.0, "minX": 1.75559532E12, "maxY": 7166.0, "series": [{"data": [[1.75559532E12, 7166.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75559532E12, 6536.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75559532E12, 7032.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75559532E12, 6780.5999999999985]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75559532E12, 606.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75559532E12, 4590.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559532E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2945.5, "minX": 80.0, "maxY": 6236.0, "series": [{"data": [[561.0, 3145.0], [80.0, 2945.5], [325.0, 5800.0], [421.0, 3625.0], [488.0, 6236.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 561.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2939.5, "minX": 80.0, "maxY": 6236.0, "series": [{"data": [[561.0, 3145.0], [80.0, 2939.5], [325.0, 5800.0], [421.0, 3625.0], [488.0, 6236.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 561.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559532E12, "maxY": 31.25, "series": [{"data": [[1.75559532E12, 31.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559532E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559532E12, "maxY": 31.25, "series": [{"data": [[1.75559532E12, 31.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559532E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559532E12, "maxY": 31.25, "series": [{"data": [[1.75559532E12, 31.25]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559532E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559532E12, "maxY": 31.25, "series": [{"data": [[1.75559532E12, 31.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559532E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

