/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 608.0, "minX": 0.0, "maxY": 7649.0, "series": [{"data": [[0.0, 608.0], [0.1, 867.0], [0.2, 905.0], [0.3, 942.0], [0.4, 973.0], [0.5, 973.0], [0.6, 992.0], [0.7, 1010.0], [0.8, 1032.0], [0.9, 1053.0], [1.0, 1065.0], [1.1, 1085.0], [1.2, 1096.0], [1.3, 1109.0], [1.4, 1111.0], [1.5, 1134.0], [1.6, 1154.0], [1.7, 1164.0], [1.8, 1174.0], [1.9, 1182.0], [2.0, 1193.0], [2.1, 1203.0], [2.2, 1204.0], [2.3, 1211.0], [2.4, 1217.0], [2.5, 1224.0], [2.6, 1234.0], [2.7, 1239.0], [2.8, 1259.0], [2.9, 1266.0], [3.0, 1277.0], [3.1, 1280.0], [3.2, 1283.0], [3.3, 1300.0], [3.4, 1312.0], [3.5, 1324.0], [3.6, 1361.0], [3.7, 1367.0], [3.8, 1371.0], [3.9, 1394.0], [4.0, 1420.0], [4.1, 1445.0], [4.2, 1457.0], [4.3, 1462.0], [4.4, 1472.0], [4.5, 1474.0], [4.6, 1477.0], [4.7, 1500.0], [4.8, 1503.0], [4.9, 1530.0], [5.0, 1546.0], [5.1, 1557.0], [5.2, 1572.0], [5.3, 1578.0], [5.4, 1580.0], [5.5, 1596.0], [5.6, 1601.0], [5.7, 1609.0], [5.8, 1616.0], [5.9, 1626.0], [6.0, 1627.0], [6.1, 1639.0], [6.2, 1644.0], [6.3, 1649.0], [6.4, 1677.0], [6.5, 1694.0], [6.6, 1698.0], [6.7, 1701.0], [6.8, 1707.0], [6.9, 1719.0], [7.0, 1730.0], [7.1, 1743.0], [7.2, 1747.0], [7.3, 1758.0], [7.4, 1782.0], [7.5, 1799.0], [7.6, 1803.0], [7.7, 1813.0], [7.8, 1836.0], [7.9, 1848.0], [8.0, 1854.0], [8.1, 1877.0], [8.2, 1889.0], [8.3, 1899.0], [8.4, 1913.0], [8.5, 1919.0], [8.6, 1929.0], [8.7, 1941.0], [8.8, 1952.0], [8.9, 1956.0], [9.0, 1970.0], [9.1, 1980.0], [9.2, 1991.0], [9.3, 1997.0], [9.4, 2003.0], [9.5, 2010.0], [9.6, 2018.0], [9.7, 2026.0], [9.8, 2049.0], [9.9, 2052.0], [10.0, 2057.0], [10.1, 2066.0], [10.2, 2073.0], [10.3, 2077.0], [10.4, 2081.0], [10.5, 2087.0], [10.6, 2100.0], [10.7, 2109.0], [10.8, 2113.0], [10.9, 2117.0], [11.0, 2129.0], [11.1, 2131.0], [11.2, 2138.0], [11.3, 2141.0], [11.4, 2150.0], [11.5, 2156.0], [11.6, 2161.0], [11.7, 2174.0], [11.8, 2184.0], [11.9, 2188.0], [12.0, 2196.0], [12.1, 2199.0], [12.2, 2203.0], [12.3, 2212.0], [12.4, 2222.0], [12.5, 2225.0], [12.6, 2228.0], [12.7, 2231.0], [12.8, 2237.0], [12.9, 2239.0], [13.0, 2245.0], [13.1, 2264.0], [13.2, 2271.0], [13.3, 2277.0], [13.4, 2285.0], [13.5, 2289.0], [13.6, 2292.0], [13.7, 2293.0], [13.8, 2300.0], [13.9, 2302.0], [14.0, 2303.0], [14.1, 2306.0], [14.2, 2310.0], [14.3, 2315.0], [14.4, 2320.0], [14.5, 2322.0], [14.6, 2333.0], [14.7, 2340.0], [14.8, 2347.0], [14.9, 2358.0], [15.0, 2364.0], [15.1, 2370.0], [15.2, 2375.0], [15.3, 2380.0], [15.4, 2383.0], [15.5, 2389.0], [15.6, 2392.0], [15.7, 2394.0], [15.8, 2404.0], [15.9, 2405.0], [16.0, 2411.0], [16.1, 2414.0], [16.2, 2419.0], [16.3, 2429.0], [16.4, 2433.0], [16.5, 2437.0], [16.6, 2446.0], [16.7, 2449.0], [16.8, 2452.0], [16.9, 2454.0], [17.0, 2458.0], [17.1, 2462.0], [17.2, 2469.0], [17.3, 2471.0], [17.4, 2484.0], [17.5, 2486.0], [17.6, 2493.0], [17.7, 2495.0], [17.8, 2498.0], [17.9, 2500.0], [18.0, 2512.0], [18.1, 2513.0], [18.2, 2519.0], [18.3, 2521.0], [18.4, 2527.0], [18.5, 2530.0], [18.6, 2539.0], [18.7, 2559.0], [18.8, 2570.0], [18.9, 2581.0], [19.0, 2590.0], [19.1, 2596.0], [19.2, 2598.0], [19.3, 2600.0], [19.4, 2614.0], [19.5, 2619.0], [19.6, 2621.0], [19.7, 2627.0], [19.8, 2630.0], [19.9, 2635.0], [20.0, 2640.0], [20.1, 2653.0], [20.2, 2658.0], [20.3, 2671.0], [20.4, 2678.0], [20.5, 2681.0], [20.6, 2688.0], [20.7, 2695.0], [20.8, 2701.0], [20.9, 2703.0], [21.0, 2721.0], [21.1, 2723.0], [21.2, 2727.0], [21.3, 2729.0], [21.4, 2733.0], [21.5, 2736.0], [21.6, 2745.0], [21.7, 2750.0], [21.8, 2755.0], [21.9, 2757.0], [22.0, 2763.0], [22.1, 2766.0], [22.2, 2774.0], [22.3, 2778.0], [22.4, 2785.0], [22.5, 2794.0], [22.6, 2806.0], [22.7, 2813.0], [22.8, 2825.0], [22.9, 2827.0], [23.0, 2842.0], [23.1, 2844.0], [23.2, 2861.0], [23.3, 2872.0], [23.4, 2885.0], [23.5, 2894.0], [23.6, 2901.0], [23.7, 2904.0], [23.8, 2913.0], [23.9, 2928.0], [24.0, 2934.0], [24.1, 2955.0], [24.2, 2964.0], [24.3, 2966.0], [24.4, 2971.0], [24.5, 2977.0], [24.6, 2983.0], [24.7, 2984.0], [24.8, 2995.0], [24.9, 3002.0], [25.0, 3014.0], [25.1, 3019.0], [25.2, 3045.0], [25.3, 3049.0], [25.4, 3067.0], [25.5, 3074.0], [25.6, 3080.0], [25.7, 3084.0], [25.8, 3091.0], [25.9, 3097.0], [26.0, 3110.0], [26.1, 3120.0], [26.2, 3125.0], [26.3, 3128.0], [26.4, 3129.0], [26.5, 3133.0], [26.6, 3154.0], [26.7, 3177.0], [26.8, 3184.0], [26.9, 3187.0], [27.0, 3193.0], [27.1, 3196.0], [27.2, 3201.0], [27.3, 3202.0], [27.4, 3215.0], [27.5, 3233.0], [27.6, 3242.0], [27.7, 3249.0], [27.8, 3260.0], [27.9, 3279.0], [28.0, 3289.0], [28.1, 3296.0], [28.2, 3305.0], [28.3, 3306.0], [28.4, 3313.0], [28.5, 3319.0], [28.6, 3328.0], [28.7, 3332.0], [28.8, 3335.0], [28.9, 3346.0], [29.0, 3350.0], [29.1, 3354.0], [29.2, 3355.0], [29.3, 3362.0], [29.4, 3374.0], [29.5, 3376.0], [29.6, 3378.0], [29.7, 3383.0], [29.8, 3385.0], [29.9, 3387.0], [30.0, 3394.0], [30.1, 3400.0], [30.2, 3403.0], [30.3, 3419.0], [30.4, 3424.0], [30.5, 3426.0], [30.6, 3429.0], [30.7, 3437.0], [30.8, 3445.0], [30.9, 3448.0], [31.0, 3463.0], [31.1, 3469.0], [31.2, 3494.0], [31.3, 3498.0], [31.4, 3507.0], [31.5, 3509.0], [31.6, 3524.0], [31.7, 3529.0], [31.8, 3543.0], [31.9, 3551.0], [32.0, 3560.0], [32.1, 3562.0], [32.2, 3565.0], [32.3, 3569.0], [32.4, 3574.0], [32.5, 3577.0], [32.6, 3586.0], [32.7, 3588.0], [32.8, 3591.0], [32.9, 3598.0], [33.0, 3601.0], [33.1, 3604.0], [33.2, 3620.0], [33.3, 3625.0], [33.4, 3632.0], [33.5, 3653.0], [33.6, 3661.0], [33.7, 3665.0], [33.8, 3672.0], [33.9, 3678.0], [34.0, 3689.0], [34.1, 3697.0], [34.2, 3706.0], [34.3, 3710.0], [34.4, 3720.0], [34.5, 3724.0], [34.6, 3731.0], [34.7, 3747.0], [34.8, 3761.0], [34.9, 3761.0], [35.0, 3766.0], [35.1, 3769.0], [35.2, 3776.0], [35.3, 3777.0], [35.4, 3786.0], [35.5, 3787.0], [35.6, 3795.0], [35.7, 3801.0], [35.8, 3811.0], [35.9, 3816.0], [36.0, 3828.0], [36.1, 3841.0], [36.2, 3844.0], [36.3, 3856.0], [36.4, 3866.0], [36.5, 3874.0], [36.6, 3881.0], [36.7, 3886.0], [36.8, 3892.0], [36.9, 3899.0], [37.0, 3901.0], [37.1, 3904.0], [37.2, 3908.0], [37.3, 3909.0], [37.4, 3919.0], [37.5, 3921.0], [37.6, 3924.0], [37.7, 3937.0], [37.8, 3944.0], [37.9, 3948.0], [38.0, 3951.0], [38.1, 3953.0], [38.2, 3967.0], [38.3, 3968.0], [38.4, 3987.0], [38.5, 3990.0], [38.6, 3999.0], [38.7, 4010.0], [38.8, 4012.0], [38.9, 4024.0], [39.0, 4031.0], [39.1, 4036.0], [39.2, 4039.0], [39.3, 4047.0], [39.4, 4060.0], [39.5, 4065.0], [39.6, 4069.0], [39.7, 4077.0], [39.8, 4088.0], [39.9, 4095.0], [40.0, 4102.0], [40.1, 4106.0], [40.2, 4119.0], [40.3, 4125.0], [40.4, 4141.0], [40.5, 4145.0], [40.6, 4150.0], [40.7, 4155.0], [40.8, 4162.0], [40.9, 4167.0], [41.0, 4175.0], [41.1, 4186.0], [41.2, 4222.0], [41.3, 4233.0], [41.4, 4236.0], [41.5, 4237.0], [41.6, 4261.0], [41.7, 4280.0], [41.8, 4294.0], [41.9, 4301.0], [42.0, 4309.0], [42.1, 4314.0], [42.2, 4326.0], [42.3, 4331.0], [42.4, 4339.0], [42.5, 4345.0], [42.6, 4374.0], [42.7, 4378.0], [42.8, 4391.0], [42.9, 4398.0], [43.0, 4403.0], [43.1, 4408.0], [43.2, 4413.0], [43.3, 4419.0], [43.4, 4428.0], [43.5, 4434.0], [43.6, 4444.0], [43.7, 4452.0], [43.8, 4466.0], [43.9, 4477.0], [44.0, 4487.0], [44.1, 4490.0], [44.2, 4499.0], [44.3, 4508.0], [44.4, 4515.0], [44.5, 4539.0], [44.6, 4541.0], [44.7, 4550.0], [44.8, 4561.0], [44.9, 4569.0], [45.0, 4582.0], [45.1, 4594.0], [45.2, 4602.0], [45.3, 4610.0], [45.4, 4633.0], [45.5, 4640.0], [45.6, 4656.0], [45.7, 4671.0], [45.8, 4710.0], [45.9, 4732.0], [46.0, 4736.0], [46.1, 4789.0], [46.2, 4798.0], [46.3, 4800.0], [46.4, 4816.0], [46.5, 4818.0], [46.6, 4825.0], [46.7, 4836.0], [46.8, 4851.0], [46.9, 4852.0], [47.0, 4884.0], [47.1, 4900.0], [47.2, 4928.0], [47.3, 4935.0], [47.4, 4947.0], [47.5, 4948.0], [47.6, 4952.0], [47.7, 4955.0], [47.8, 4958.0], [47.9, 4966.0], [48.0, 4979.0], [48.1, 4986.0], [48.2, 4995.0], [48.3, 4998.0], [48.4, 5004.0], [48.5, 5006.0], [48.6, 5015.0], [48.7, 5020.0], [48.8, 5022.0], [48.9, 5029.0], [49.0, 5040.0], [49.1, 5052.0], [49.2, 5066.0], [49.3, 5073.0], [49.4, 5120.0], [49.5, 5124.0], [49.6, 5129.0], [49.7, 5131.0], [49.8, 5137.0], [49.9, 5139.0], [50.0, 5143.0], [50.1, 5144.0], [50.2, 5153.0], [50.3, 5162.0], [50.4, 5164.0], [50.5, 5168.0], [50.6, 5175.0], [50.7, 5181.0], [50.8, 5183.0], [50.9, 5185.0], [51.0, 5192.0], [51.1, 5198.0], [51.2, 5203.0], [51.3, 5207.0], [51.4, 5221.0], [51.5, 5231.0], [51.6, 5251.0], [51.7, 5268.0], [51.8, 5289.0], [51.9, 5295.0], [52.0, 5298.0], [52.1, 5307.0], [52.2, 5318.0], [52.3, 5323.0], [52.4, 5336.0], [52.5, 5338.0], [52.6, 5347.0], [52.7, 5350.0], [52.8, 5356.0], [52.9, 5359.0], [53.0, 5367.0], [53.1, 5371.0], [53.2, 5379.0], [53.3, 5388.0], [53.4, 5393.0], [53.5, 5396.0], [53.6, 5401.0], [53.7, 5403.0], [53.8, 5427.0], [53.9, 5434.0], [54.0, 5437.0], [54.1, 5439.0], [54.2, 5450.0], [54.3, 5458.0], [54.4, 5464.0], [54.5, 5467.0], [54.6, 5474.0], [54.7, 5480.0], [54.8, 5485.0], [54.9, 5487.0], [55.0, 5492.0], [55.1, 5496.0], [55.2, 5498.0], [55.3, 5500.0], [55.4, 5504.0], [55.5, 5505.0], [55.6, 5509.0], [55.7, 5516.0], [55.8, 5524.0], [55.9, 5528.0], [56.0, 5530.0], [56.1, 5542.0], [56.2, 5543.0], [56.3, 5546.0], [56.4, 5551.0], [56.5, 5555.0], [56.6, 5558.0], [56.7, 5563.0], [56.8, 5567.0], [56.9, 5571.0], [57.0, 5572.0], [57.1, 5578.0], [57.2, 5581.0], [57.3, 5582.0], [57.4, 5585.0], [57.5, 5588.0], [57.6, 5596.0], [57.7, 5600.0], [57.8, 5606.0], [57.9, 5608.0], [58.0, 5609.0], [58.1, 5610.0], [58.2, 5612.0], [58.3, 5616.0], [58.4, 5620.0], [58.5, 5622.0], [58.6, 5624.0], [58.7, 5625.0], [58.8, 5632.0], [58.9, 5633.0], [59.0, 5636.0], [59.1, 5640.0], [59.2, 5641.0], [59.3, 5642.0], [59.4, 5642.0], [59.5, 5643.0], [59.6, 5644.0], [59.7, 5646.0], [59.8, 5649.0], [59.9, 5650.0], [60.0, 5652.0], [60.1, 5653.0], [60.2, 5653.0], [60.3, 5654.0], [60.4, 5657.0], [60.5, 5658.0], [60.6, 5659.0], [60.7, 5661.0], [60.8, 5662.0], [60.9, 5665.0], [61.0, 5670.0], [61.1, 5671.0], [61.2, 5672.0], [61.3, 5673.0], [61.4, 5676.0], [61.5, 5677.0], [61.6, 5679.0], [61.7, 5679.0], [61.8, 5680.0], [61.9, 5683.0], [62.0, 5686.0], [62.1, 5688.0], [62.2, 5689.0], [62.3, 5690.0], [62.4, 5696.0], [62.5, 5701.0], [62.6, 5702.0], [62.7, 5703.0], [62.8, 5705.0], [62.9, 5709.0], [63.0, 5712.0], [63.1, 5712.0], [63.2, 5713.0], [63.3, 5713.0], [63.4, 5714.0], [63.5, 5715.0], [63.6, 5719.0], [63.7, 5719.0], [63.8, 5721.0], [63.9, 5721.0], [64.0, 5727.0], [64.1, 5729.0], [64.2, 5733.0], [64.3, 5737.0], [64.4, 5742.0], [64.5, 5743.0], [64.6, 5752.0], [64.7, 5752.0], [64.8, 5755.0], [64.9, 5759.0], [65.0, 5763.0], [65.1, 5764.0], [65.2, 5767.0], [65.3, 5773.0], [65.4, 5778.0], [65.5, 5779.0], [65.6, 5781.0], [65.7, 5785.0], [65.8, 5788.0], [65.9, 5791.0], [66.0, 5792.0], [66.1, 5793.0], [66.2, 5795.0], [66.3, 5798.0], [66.4, 5806.0], [66.5, 5808.0], [66.6, 5810.0], [66.7, 5811.0], [66.8, 5811.0], [66.9, 5812.0], [67.0, 5813.0], [67.1, 5813.0], [67.2, 5814.0], [67.3, 5817.0], [67.4, 5817.0], [67.5, 5820.0], [67.6, 5821.0], [67.7, 5825.0], [67.8, 5827.0], [67.9, 5833.0], [68.0, 5835.0], [68.1, 5837.0], [68.2, 5837.0], [68.3, 5838.0], [68.4, 5840.0], [68.5, 5841.0], [68.6, 5853.0], [68.7, 5855.0], [68.8, 5863.0], [68.9, 5864.0], [69.0, 5866.0], [69.1, 5867.0], [69.2, 5880.0], [69.3, 5887.0], [69.4, 5891.0], [69.5, 5892.0], [69.6, 5893.0], [69.7, 5895.0], [69.8, 5897.0], [69.9, 5899.0], [70.0, 5902.0], [70.1, 5904.0], [70.2, 5906.0], [70.3, 5909.0], [70.4, 5917.0], [70.5, 5919.0], [70.6, 5925.0], [70.7, 5929.0], [70.8, 5934.0], [70.9, 5934.0], [71.0, 5936.0], [71.1, 5936.0], [71.2, 5938.0], [71.3, 5939.0], [71.4, 5949.0], [71.5, 5952.0], [71.6, 5953.0], [71.7, 5953.0], [71.8, 5956.0], [71.9, 5957.0], [72.0, 5958.0], [72.1, 5959.0], [72.2, 5966.0], [72.3, 5967.0], [72.4, 5969.0], [72.5, 5971.0], [72.6, 5977.0], [72.7, 5979.0], [72.8, 5983.0], [72.9, 5984.0], [73.0, 5985.0], [73.1, 5986.0], [73.2, 5990.0], [73.3, 5995.0], [73.4, 6000.0], [73.5, 6004.0], [73.6, 6006.0], [73.7, 6007.0], [73.8, 6016.0], [73.9, 6017.0], [74.0, 6021.0], [74.1, 6022.0], [74.2, 6025.0], [74.3, 6026.0], [74.4, 6038.0], [74.5, 6039.0], [74.6, 6040.0], [74.7, 6041.0], [74.8, 6044.0], [74.9, 6047.0], [75.0, 6049.0], [75.1, 6050.0], [75.2, 6053.0], [75.3, 6056.0], [75.4, 6061.0], [75.5, 6069.0], [75.6, 6071.0], [75.7, 6080.0], [75.8, 6089.0], [75.9, 6091.0], [76.0, 6094.0], [76.1, 6100.0], [76.2, 6102.0], [76.3, 6111.0], [76.4, 6127.0], [76.5, 6131.0], [76.6, 6136.0], [76.7, 6138.0], [76.8, 6141.0], [76.9, 6147.0], [77.0, 6156.0], [77.1, 6160.0], [77.2, 6166.0], [77.3, 6168.0], [77.4, 6174.0], [77.5, 6178.0], [77.6, 6181.0], [77.7, 6184.0], [77.8, 6186.0], [77.9, 6188.0], [78.0, 6191.0], [78.1, 6195.0], [78.2, 6200.0], [78.3, 6201.0], [78.4, 6206.0], [78.5, 6211.0], [78.6, 6213.0], [78.7, 6216.0], [78.8, 6221.0], [78.9, 6223.0], [79.0, 6224.0], [79.1, 6225.0], [79.2, 6230.0], [79.3, 6232.0], [79.4, 6235.0], [79.5, 6236.0], [79.6, 6239.0], [79.7, 6241.0], [79.8, 6241.0], [79.9, 6242.0], [80.0, 6244.0], [80.1, 6244.0], [80.2, 6246.0], [80.3, 6252.0], [80.4, 6254.0], [80.5, 6255.0], [80.6, 6259.0], [80.7, 6260.0], [80.8, 6262.0], [80.9, 6266.0], [81.0, 6268.0], [81.1, 6269.0], [81.2, 6269.0], [81.3, 6272.0], [81.4, 6275.0], [81.5, 6277.0], [81.6, 6279.0], [81.7, 6281.0], [81.8, 6283.0], [81.9, 6288.0], [82.0, 6288.0], [82.1, 6292.0], [82.2, 6293.0], [82.3, 6296.0], [82.4, 6299.0], [82.5, 6301.0], [82.6, 6301.0], [82.7, 6303.0], [82.8, 6304.0], [82.9, 6309.0], [83.0, 6310.0], [83.1, 6312.0], [83.2, 6312.0], [83.3, 6313.0], [83.4, 6314.0], [83.5, 6316.0], [83.6, 6316.0], [83.7, 6318.0], [83.8, 6323.0], [83.9, 6329.0], [84.0, 6330.0], [84.1, 6334.0], [84.2, 6335.0], [84.3, 6338.0], [84.4, 6340.0], [84.5, 6342.0], [84.6, 6349.0], [84.7, 6353.0], [84.8, 6354.0], [84.9, 6355.0], [85.0, 6358.0], [85.1, 6360.0], [85.2, 6361.0], [85.3, 6363.0], [85.4, 6363.0], [85.5, 6369.0], [85.6, 6370.0], [85.7, 6379.0], [85.8, 6380.0], [85.9, 6381.0], [86.0, 6384.0], [86.1, 6385.0], [86.2, 6388.0], [86.3, 6391.0], [86.4, 6394.0], [86.5, 6397.0], [86.6, 6399.0], [86.7, 6401.0], [86.8, 6402.0], [86.9, 6403.0], [87.0, 6406.0], [87.1, 6409.0], [87.2, 6410.0], [87.3, 6411.0], [87.4, 6415.0], [87.5, 6420.0], [87.6, 6424.0], [87.7, 6428.0], [87.8, 6432.0], [87.9, 6438.0], [88.0, 6441.0], [88.1, 6447.0], [88.2, 6449.0], [88.3, 6454.0], [88.4, 6460.0], [88.5, 6462.0], [88.6, 6464.0], [88.7, 6466.0], [88.8, 6467.0], [88.9, 6471.0], [89.0, 6475.0], [89.1, 6481.0], [89.2, 6486.0], [89.3, 6489.0], [89.4, 6489.0], [89.5, 6492.0], [89.6, 6493.0], [89.7, 6499.0], [89.8, 6502.0], [89.9, 6513.0], [90.0, 6513.0], [90.1, 6515.0], [90.2, 6516.0], [90.3, 6523.0], [90.4, 6524.0], [90.5, 6529.0], [90.6, 6535.0], [90.7, 6544.0], [90.8, 6546.0], [90.9, 6546.0], [91.0, 6548.0], [91.1, 6552.0], [91.2, 6553.0], [91.3, 6558.0], [91.4, 6559.0], [91.5, 6562.0], [91.6, 6562.0], [91.7, 6565.0], [91.8, 6569.0], [91.9, 6573.0], [92.0, 6575.0], [92.1, 6579.0], [92.2, 6581.0], [92.3, 6582.0], [92.4, 6586.0], [92.5, 6587.0], [92.6, 6588.0], [92.7, 6590.0], [92.8, 6592.0], [92.9, 6595.0], [93.0, 6595.0], [93.1, 6601.0], [93.2, 6603.0], [93.3, 6607.0], [93.4, 6609.0], [93.5, 6613.0], [93.6, 6615.0], [93.7, 6637.0], [93.8, 6639.0], [93.9, 6661.0], [94.0, 6677.0], [94.1, 6697.0], [94.2, 6708.0], [94.3, 6725.0], [94.4, 6748.0], [94.5, 6758.0], [94.6, 6771.0], [94.7, 6781.0], [94.8, 6784.0], [94.9, 6785.0], [95.0, 6801.0], [95.1, 6813.0], [95.2, 6823.0], [95.3, 6878.0], [95.4, 6890.0], [95.5, 6901.0], [95.6, 6914.0], [95.7, 6938.0], [95.8, 6954.0], [95.9, 6990.0], [96.0, 6998.0], [96.1, 7015.0], [96.2, 7020.0], [96.3, 7037.0], [96.4, 7042.0], [96.5, 7058.0], [96.6, 7065.0], [96.7, 7098.0], [96.8, 7128.0], [96.9, 7140.0], [97.0, 7159.0], [97.1, 7182.0], [97.2, 7194.0], [97.3, 7213.0], [97.4, 7216.0], [97.5, 7231.0], [97.6, 7231.0], [97.7, 7254.0], [97.8, 7267.0], [97.9, 7270.0], [98.0, 7301.0], [98.1, 7314.0], [98.2, 7318.0], [98.3, 7337.0], [98.4, 7353.0], [98.5, 7359.0], [98.6, 7364.0], [98.7, 7372.0], [98.8, 7383.0], [98.9, 7404.0], [99.0, 7406.0], [99.1, 7420.0], [99.2, 7437.0], [99.3, 7465.0], [99.4, 7470.0], [99.5, 7497.0], [99.6, 7522.0], [99.7, 7552.0], [99.8, 7572.0], [99.9, 7582.0], [100.0, 7649.0]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 120.0, "series": [{"data": [[600.0, 2.0], [800.0, 3.0], [900.0, 10.0], [1000.0, 16.0], [1100.0, 21.0], [1200.0, 30.0], [1300.0, 16.0], [1400.0, 19.0], [1500.0, 22.0], [1600.0, 26.0], [1700.0, 23.0], [1800.0, 20.0], [1900.0, 25.0], [2000.0, 32.0], [2100.0, 38.0], [2200.0, 41.0], [2300.0, 51.0], [2400.0, 52.0], [2500.0, 34.0], [2600.0, 39.0], [2700.0, 43.0], [2800.0, 27.0], [2900.0, 32.0], [3000.0, 27.0], [3100.0, 31.0], [3200.0, 24.0], [3300.0, 48.0], [3400.0, 31.0], [3500.0, 41.0], [3600.0, 29.0], [3700.0, 39.0], [3800.0, 31.0], [3900.0, 43.0], [4000.0, 33.0], [4100.0, 30.0], [4200.0, 18.0], [4300.0, 26.0], [4400.0, 33.0], [4500.0, 24.0], [4600.0, 15.0], [4700.0, 11.0], [4800.0, 21.0], [4900.0, 33.0], [5100.0, 44.0], [5000.0, 24.0], [5200.0, 23.0], [5300.0, 38.0], [5400.0, 43.0], [5500.0, 60.0], [5600.0, 120.0], [5700.0, 96.0], [5800.0, 90.0], [5900.0, 87.0], [6000.0, 67.0], [6100.0, 52.0], [6200.0, 107.0], [6300.0, 105.0], [6400.0, 77.0], [6500.0, 84.0], [6600.0, 26.0], [6800.0, 13.0], [6700.0, 20.0], [6900.0, 14.0], [7000.0, 18.0], [7100.0, 12.0], [7200.0, 19.0], [7300.0, 23.0], [7400.0, 17.0], [7500.0, 10.0], [7600.0, 1.0]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 118.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2382.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 118.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2382.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.066000000002, "minX": 1.75559046E12, "maxY": 1251.066000000002, "series": [{"data": [[1.75559046E12, 1251.066000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559046E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 608.0, "minX": 1.0, "maxY": 7581.0, "series": [{"data": [[2.0, 6612.0], [4.0, 6367.0], [6.0, 6320.0], [7.0, 6380.0], [8.0, 7372.0], [10.0, 7034.5], [12.0, 6843.5], [14.0, 7366.0], [15.0, 6833.0], [18.0, 6681.0], [19.0, 7066.0], [22.0, 7340.0], [23.0, 6801.0], [25.0, 7231.0], [26.0, 6590.0], [27.0, 7068.666666666667], [33.0, 7231.0], [35.0, 6288.0], [34.0, 6340.0], [37.0, 7245.428571428572], [41.0, 6561.0], [45.0, 7477.0], [44.0, 7405.0], [47.0, 6940.0], [46.0, 7270.0], [51.0, 7581.0], [50.0, 6780.666666666667], [55.0, 6965.0], [56.0, 6801.0], [60.0, 6477.8], [62.0, 6241.0], [66.0, 6398.0], [65.0, 6604.75], [71.0, 6640.0], [69.0, 7066.666666666667], [74.0, 7386.0], [73.0, 6293.0], [79.0, 7076.333333333333], [76.0, 6350.5], [83.0, 7097.333333333333], [80.0, 6401.0], [86.0, 6308.0], [85.0, 6315.0], [91.0, 6292.0], [89.0, 6315.666666666667], [94.0, 7499.0], [93.0, 6318.333333333333], [99.0, 6241.0], [98.0, 6363.0], [97.0, 6322.0], [103.0, 6295.666666666667], [102.0, 6328.0], [106.0, 6858.5], [104.0, 6328.333333333333], [114.0, 6309.0], [113.0, 7182.0], [112.0, 6870.666666666666], [119.0, 6260.0], [118.0, 6236.0], [117.0, 6680.666666666667], [123.0, 6647.333333333333], [120.0, 7220.0], [126.0, 6225.333333333333], [135.0, 6285.0], [134.0, 7267.0], [133.0, 6223.0], [132.0, 6169.0], [130.0, 7365.0], [129.0, 6245.0], [128.0, 6800.0], [143.0, 6814.5], [141.0, 6494.75], [137.0, 6656.5], [150.0, 6622.666666666667], [147.0, 6201.0], [145.0, 6197.0], [159.0, 6186.0], [158.0, 6223.0], [157.0, 6100.0], [156.0, 6200.0], [155.0, 7365.5], [153.0, 7437.0], [152.0, 7202.0], [164.0, 6202.0], [163.0, 6218.5], [161.0, 6094.0], [160.0, 7318.0], [175.0, 6178.0], [174.0, 6100.0], [173.0, 7214.0], [172.0, 7364.0], [171.0, 6366.5], [170.0, 6253.0], [168.0, 6679.75], [183.0, 6184.0], [180.0, 6102.0], [179.0, 6148.5], [177.0, 6696.0], [191.0, 7197.5], [189.0, 6232.0], [188.0, 6917.333333333333], [185.0, 6514.0], [184.0, 6524.0], [199.0, 6102.0], [198.0, 7383.0], [197.0, 6459.0], [196.0, 6058.0], [195.0, 6156.0], [194.0, 6681.0], [207.0, 6349.0], [206.0, 6691.5], [205.0, 6401.0], [203.0, 6822.5], [201.0, 6111.0], [200.0, 6127.0], [215.0, 6064.0], [214.0, 7191.0], [213.0, 6397.666666666667], [210.0, 7337.0], [209.0, 7062.0], [208.0, 7042.0], [223.0, 6121.0], [222.0, 6983.0], [219.0, 6407.0], [217.0, 6334.0], [216.0, 6466.0], [231.0, 6800.0], [230.0, 6069.0], [229.0, 6768.0], [228.0, 6912.4], [226.0, 6274.0], [238.0, 6280.0], [237.0, 6990.0], [236.0, 6808.0], [235.0, 6479.333333333333], [232.0, 6239.0], [247.0, 6404.0], [245.0, 6316.0], [244.0, 6514.0], [242.0, 6851.5], [240.0, 6768.5], [254.0, 6831.5], [253.0, 6970.0], [251.0, 5974.0], [250.0, 6383.0], [249.0, 6394.0], [248.0, 6399.0], [259.0, 6025.0], [270.0, 6723.0], [268.0, 6900.5], [265.0, 6353.0], [264.0, 7270.0], [263.0, 6391.0], [262.0, 6708.0], [260.0, 7213.0], [258.0, 6931.0], [256.0, 6615.5], [287.0, 6621.5], [284.0, 6697.0], [274.0, 6812.0], [272.0, 6534.666666666667], [283.0, 6748.0], [282.0, 6785.0], [281.0, 7092.0], [280.0, 6718.0], [279.0, 6701.0], [278.0, 6783.0], [277.0, 6877.0], [276.0, 6385.0], [302.0, 6224.0], [303.0, 6607.0], [301.0, 6301.0], [300.0, 7065.0], [299.0, 7043.0], [298.0, 6754.0], [297.0, 6637.0], [296.0, 6909.0], [295.0, 6535.5], [288.0, 6950.0], [291.0, 6998.0], [289.0, 6188.0], [293.0, 6948.0], [292.0, 6661.0], [316.0, 6612.0], [319.0, 7154.0], [318.0, 6823.5], [317.0, 6603.5], [313.0, 6578.0], [311.0, 6613.0], [305.0, 6510.0], [304.0, 6603.0], [310.0, 6227.0], [309.0, 6890.0], [308.0, 6758.333333333333], [334.0, 6860.0], [335.0, 6278.0], [333.0, 7037.0], [332.0, 6593.0], [330.0, 7138.0], [329.0, 7029.0], [328.0, 6581.0], [327.0, 6604.0], [320.0, 6315.0], [323.0, 6222.0], [322.0, 6599.0], [326.0, 6606.0], [325.0, 6464.0], [324.0, 7021.0], [339.0, 6821.0], [350.0, 6763.666666666667], [349.0, 6784.0], [346.0, 6739.0], [344.0, 7020.0], [343.0, 6253.0], [342.0, 6299.0], [341.0, 6997.0], [340.0, 6581.0], [338.0, 6818.0], [336.0, 6941.0], [367.0, 6575.333333333333], [363.0, 6580.5], [362.0, 6565.0], [360.0, 6637.0], [359.0, 6620.0], [357.0, 6587.0], [354.0, 6708.0], [353.0, 6781.0], [352.0, 6785.0], [382.0, 6509.0], [381.0, 6488.0], [380.0, 6587.0], [378.0, 6522.666666666667], [375.0, 6524.333333333333], [373.0, 6554.0], [370.0, 6513.0], [368.0, 6478.5], [399.0, 6538.0], [398.0, 6572.0], [395.0, 6517.5], [394.0, 6462.5], [392.0, 6573.5], [389.0, 6565.5], [387.0, 6586.0], [386.0, 6543.666666666667], [385.0, 6525.0], [414.0, 6548.0], [415.0, 6574.0], [412.0, 6535.0], [403.0, 6546.0], [402.0, 6546.0], [411.0, 6559.0], [410.0, 6553.5], [408.0, 6553.5], [406.0, 6563.0], [405.0, 6518.333333333333], [404.0, 6569.0], [430.0, 6515.0], [431.0, 6493.0], [429.0, 6515.0], [428.0, 6523.0], [427.0, 6519.0], [426.0, 6519.0], [425.0, 6528.0], [424.0, 6499.0], [423.0, 6523.0], [418.0, 6529.5], [416.0, 6552.0], [421.0, 6535.0], [420.0, 6549.5], [435.0, 6496.0], [445.0, 6487.0], [446.0, 6490.0], [444.0, 6469.0], [434.0, 6478.0], [433.0, 6516.0], [432.0, 6486.0], [442.0, 6489.0], [441.0, 6472.0], [439.0, 6492.0], [438.0, 6481.0], [437.0, 6431.0], [436.0, 6483.0], [461.0, 6440.0], [460.0, 6399.0], [451.0, 6454.0], [450.0, 6475.0], [449.0, 6460.666666666667], [459.0, 6410.0], [458.0, 6433.0], [457.0, 6424.0], [456.0, 6441.0], [455.0, 6462.0], [454.0, 6462.0], [453.0, 6462.0], [452.0, 6447.0], [477.0, 6838.0], [476.0, 6407.5], [474.0, 6410.5], [472.0, 6406.0], [471.0, 6426.0], [470.0, 6428.0], [469.0, 6399.8], [464.0, 6439.0], [495.0, 6354.0], [494.0, 6306.5], [492.0, 6388.0], [490.0, 6390.5], [488.0, 6394.0], [486.0, 6388.0], [485.0, 6398.0], [483.0, 6394.333333333333], [510.0, 6364.0], [511.0, 6361.0], [509.0, 6331.0], [508.0, 6368.0], [507.0, 6370.0], [506.0, 6354.0], [505.0, 6370.0], [504.0, 6336.0], [503.0, 6380.0], [497.0, 6388.0], [496.0, 6354.0], [499.0, 6240.0], [498.0, 6241.0], [502.0, 6380.0], [501.0, 6375.0], [538.0, 6263.0], [536.0, 6306.142857142857], [540.0, 6271.0], [526.0, 6330.0], [512.0, 6301.0], [514.0, 6355.0], [516.0, 6342.0], [522.0, 6316.666666666667], [530.0, 6314.0], [570.0, 6246.0], [574.0, 6244.0], [560.0, 6261.0], [572.0, 6242.0], [568.0, 6258.0], [550.0, 6265.0], [548.0, 6296.0], [546.0, 6273.0], [558.0, 6141.0], [556.0, 6273.666666666667], [564.0, 6268.0], [602.0, 6049.0], [594.0, 6200.0], [604.0, 6104.0], [606.0, 6091.0], [592.0, 6184.0], [600.0, 6050.0], [582.0, 6230.0], [578.0, 6244.0], [576.0, 6228.0], [590.0, 6191.0], [588.0, 6166.0], [586.0, 6147.0], [598.0, 6088.0], [596.0, 6053.0], [636.0, 6006.0], [638.0, 6094.0], [624.0, 6023.0], [626.0, 6022.0], [628.0, 6025.0], [634.0, 6131.5], [632.0, 6017.0], [608.0, 6096.0], [616.0, 6067.5], [630.0, 6137.5], [642.0, 6033.0], [664.0, 6008.0], [670.0, 5957.0], [656.0, 6069.0], [658.0, 5994.0], [640.0, 6019.0], [644.0, 5989.0], [654.0, 6039.5], [652.0, 5990.5], [650.0, 5996.0], [662.0, 6091.0], [660.0, 5972.0], [678.0, 5939.0], [702.0, 5983.25], [700.0, 5904.0], [696.0, 5985.5], [674.0, 5967.0], [672.0, 5946.0], [684.0, 5941.333333333333], [680.0, 5947.5], [694.0, 5929.0], [734.0, 5985.5], [732.0, 5906.0], [724.0, 5887.0], [722.0, 5890.0], [720.0, 5952.0], [704.0, 6031.0], [708.0, 5938.333333333333], [710.0, 6017.0], [718.0, 5894.0], [716.0, 5893.0], [762.0, 5925.0], [760.0, 5810.0], [766.0, 5917.5], [752.0, 5954.0], [764.0, 5934.0], [736.0, 5969.0], [738.0, 5977.0], [740.0, 5979.0], [742.0, 5967.0], [750.0, 5958.5], [748.0, 5828.0], [746.0, 5879.0], [744.0, 5961.0], [756.0, 5944.0], [754.0, 5819.0], [772.0, 5904.0], [792.0, 5837.0], [796.0, 5838.0], [794.0, 5838.0], [782.0, 5860.5], [768.0, 5910.0], [770.0, 5909.0], [774.0, 5891.0], [776.0, 5859.0], [784.0, 5860.0], [826.0, 5813.0], [824.0, 5813.5], [830.0, 5799.5], [816.0, 5816.5], [828.0, 5806.0], [814.0, 5825.0], [800.0, 5836.666666666667], [802.0, 5837.0], [804.0, 5833.0], [806.0, 5817.0], [822.0, 5812.0], [856.0, 5781.0], [862.0, 5779.0], [850.0, 5794.5], [858.0, 5775.0], [846.0, 5806.0], [832.0, 5794.0], [838.0, 5814.5], [836.0, 5820.0], [844.0, 5808.0], [842.0, 5805.25], [854.0, 5791.0], [852.0, 5794.0], [888.0, 5516.0], [894.0, 5730.0], [882.0, 5752.0], [892.0, 5742.0], [866.0, 5766.0], [864.0, 5774.0], [870.0, 5710.5], [874.0, 5764.0], [872.0, 5760.0], [884.0, 5604.0], [922.0, 5679.0], [914.0, 5690.0], [926.0, 5701.0], [924.0, 5693.0], [900.0, 5702.5], [898.0, 5711.0], [896.0, 5708.0], [906.0, 5704.5], [918.0, 5686.0], [954.0, 5653.0], [958.0, 5661.0], [944.0, 5657.0], [946.0, 5688.0], [956.0, 5667.0], [952.0, 5665.666666666667], [934.0, 5679.0], [932.0, 5681.5], [928.0, 5685.0], [942.0, 5665.0], [940.0, 5721.0], [936.0, 5672.0], [948.0, 5648.0], [986.0, 5713.0], [988.0, 5621.0], [976.0, 5661.0], [990.0, 5704.0], [984.0, 5717.0], [974.0, 5712.5], [960.0, 5622.0], [964.0, 5649.0], [972.0, 5609.0], [970.0, 5612.0], [968.0, 5639.0], [982.0, 5692.0], [1020.0, 5642.0], [1008.0, 5654.5], [1012.0, 5653.0], [1022.0, 5652.0], [1018.0, 5643.0], [1016.0, 5644.0], [994.0, 5633.0], [996.0, 5670.5], [998.0, 5609.0], [1004.0, 5660.0], [1002.0, 5662.0], [1014.0, 5641.0], [1072.0, 5179.0], [1080.0, 5470.0], [1060.0, 5588.0], [1076.0, 5423.0], [1024.0, 5643.0], [1048.0, 5611.0], [1044.0, 5615.0], [1040.0, 5505.0], [1068.0, 5584.0], [1064.0, 5547.0], [1144.0, 5178.0], [1120.0, 5495.0], [1124.0, 5359.0], [1128.0, 5012.0], [1140.0, 4935.0], [1136.0, 5293.0], [1092.0, 5456.5], [1088.0, 5534.5], [1116.0, 5309.0], [1112.0, 5523.0], [1104.0, 5483.666666666667], [1132.0, 5005.0], [1156.0, 4949.0], [1212.0, 5359.5], [1184.0, 5750.0], [1208.0, 4791.0], [1152.0, 5297.0], [1176.0, 4818.0], [1172.0, 5765.0], [1168.0, 5609.0], [1196.0, 5504.0], [1192.0, 5378.0], [1188.0, 5536.5], [1268.0, 4625.0], [1248.0, 5192.0], [1252.0, 5117.666666666667], [1272.0, 4846.0], [1216.0, 5599.0], [1220.0, 4728.0], [1228.0, 5458.0], [1244.0, 5082.5], [1240.0, 5414.5], [1236.0, 5352.0], [1260.0, 5166.0], [1256.0, 4640.0], [1336.0, 5338.0], [1312.0, 4490.0], [1316.0, 5073.0], [1340.0, 4348.0], [1332.0, 5109.0], [1328.0, 4788.0], [1308.0, 5485.0], [1280.0, 5130.0], [1284.0, 5134.0], [1304.0, 4827.0], [1324.0, 4825.0], [1392.0, 4261.0], [1400.0, 4198.0], [1404.0, 4377.333333333333], [1396.0, 4150.0], [1344.0, 4966.0], [1348.0, 4391.0], [1352.0, 4326.0], [1356.0, 5303.0], [1372.0, 4615.333333333333], [1368.0, 4241.0], [1360.0, 4938.0], [1388.0, 4992.0], [1380.0, 4947.0], [1456.0, 3828.0], [1468.0, 3817.0], [1440.0, 4735.0], [1444.0, 3866.0], [1460.0, 4696.0], [1412.0, 4910.0], [1416.0, 3990.0], [1420.0, 4010.0], [1436.0, 3906.0], [1428.0, 4028.0], [1424.0, 3955.0], [1452.0, 3841.0], [1448.0, 4558.0], [1528.0, 4345.0], [1508.0, 4236.0], [1516.0, 4409.0], [1532.0, 4155.0], [1524.0, 3724.0], [1520.0, 3647.0], [1472.0, 3801.0], [1476.0, 3807.0], [1484.0, 4036.6666666666665], [1496.0, 3889.0], [1492.0, 4170.0], [1488.0, 3769.0], [1592.0, 4314.0], [1572.0, 3992.0], [1568.0, 3560.0], [1576.0, 4036.0], [1580.0, 3507.0], [1596.0, 3450.0], [1588.0, 3466.0], [1584.0, 4540.5], [1548.0, 4515.0], [1536.0, 3776.0], [1564.0, 4610.0], [1560.0, 3463.0], [1556.0, 4101.0], [1656.0, 3654.3333333333335], [1652.0, 3676.5], [1632.0, 3628.0], [1640.0, 3586.0], [1660.0, 3281.3333333333335], [1648.0, 3323.0], [1600.0, 3950.0], [1604.0, 3581.0], [1612.0, 3937.0], [1628.0, 3361.0], [1624.0, 4434.0], [1620.0, 3402.0], [1616.0, 3391.0], [1716.0, 3193.0], [1700.0, 4071.0], [1724.0, 4062.0], [1696.0, 2928.0], [1676.0, 3531.0], [1672.0, 3327.0], [1664.0, 3926.0], [1684.0, 3172.5], [1680.0, 3388.0], [1788.0, 2751.0], [1784.0, 2995.0], [1760.0, 3205.0], [1768.0, 3476.25], [1764.0, 3212.9999999999995], [1772.0, 2742.5], [1780.0, 2995.0], [1776.0, 3133.0], [1740.0, 2895.0], [1736.0, 3075.0], [1732.0, 3987.0], [1728.0, 3665.0], [1752.0, 3200.5], [1748.0, 3124.0], [1840.0, 2634.5], [1828.0, 3524.0], [1824.0, 2894.0], [1832.0, 3097.5], [1836.0, 3385.0], [1852.0, 2788.5], [1804.0, 3071.0], [1796.0, 3098.0], [1792.0, 3877.0], [1816.0, 3378.0], [1808.0, 3049.0], [1916.0, 3703.0], [1888.0, 2589.0], [1892.0, 3528.5], [1900.0, 2446.0], [1908.0, 2693.0], [1904.0, 2430.0], [1864.0, 2571.0], [1860.0, 2513.0], [1856.0, 2650.0], [1880.0, 2496.5], [1876.0, 2640.0], [1872.0, 2486.0], [1976.0, 2375.0], [1980.0, 3376.0], [1960.0, 2686.0], [1964.0, 2650.5], [1968.0, 2315.0], [1932.0, 2435.0], [1928.0, 2447.0], [1924.0, 3182.0], [1948.0, 2358.0], [1944.0, 2655.0], [1940.0, 3507.0], [1936.0, 3048.0], [2032.0, 2200.0], [2040.0, 2620.5], [2044.0, 2101.0], [2016.0, 2166.0], [2020.0, 2225.0], [1996.0, 2164.0], [1992.0, 2275.0], [1988.0, 2753.3333333333335], [1984.0, 3527.0], [2012.0, 2294.0], [2008.0, 2180.0], [2004.0, 2273.0], [2000.0, 3512.0], [2064.0, 1996.0], [2120.0, 1952.0], [2136.0, 1941.0], [2152.0, 3019.0], [2048.0, 2044.0], [2072.0, 3075.0], [2104.0, 3067.0], [2096.0, 3084.0], [2088.0, 1948.5], [2080.0, 3125.0], [2296.0, 2099.0], [2248.0, 1729.0], [2256.0, 2819.0], [2264.0, 1627.0], [2288.0, 2751.0], [2280.0, 1649.0], [2272.0, 2836.0], [2200.0, 2843.0], [2192.0, 1850.0], [2184.0, 1844.75], [2176.0, 2036.25], [2232.0, 1695.0], [2224.0, 2777.0], [2216.0, 2904.0], [2208.0, 2733.0], [2416.0, 1163.0], [2424.0, 1420.0], [2368.0, 1219.0], [2376.0, 1266.0], [2384.0, 1849.0], [2392.0, 1280.0], [2400.0, 1197.0], [2304.0, 2326.4285714285716], [2312.0, 2701.0], [2320.0, 2525.0], [2360.0, 1270.0], [2352.0, 2596.0], [2344.0, 1946.5], [2440.0, 2156.0], [2496.0, 1701.0], [2456.0, 2340.0], [2448.0, 1075.0], [2432.0, 2360.0], [2488.0, 867.0], [2480.0, 878.0], [2472.0, 957.5], [2464.0, 2290.0], [2153.0, 2194.0], [2169.0, 3081.0], [2113.0, 2285.0], [2129.0, 1861.5], [2137.0, 1912.0], [2161.0, 2207.3333333333335], [2145.0, 2044.0], [2049.0, 2113.0], [2065.0, 2078.0], [2105.0, 2306.0], [2097.0, 1941.0], [2081.0, 2117.0], [2289.0, 1556.0], [2241.0, 2221.5], [2257.0, 1707.0], [2265.0, 1572.0], [2281.0, 1648.0], [2193.0, 1840.0], [2185.0, 1700.0], [2177.0, 1813.0], [2233.0, 2755.0], [2225.0, 2873.0], [2217.0, 1639.0], [2401.0, 1264.0], [2417.0, 1231.0], [2409.0, 2425.0], [2369.0, 2372.0], [2385.0, 2471.0], [2425.0, 1096.0], [2305.0, 1557.0], [2313.0, 2724.0], [2321.0, 2380.0], [2329.0, 2580.0], [2361.0, 2437.0], [2353.0, 1283.0], [2345.0, 2569.0], [2337.0, 1965.0], [2449.0, 1111.0], [2497.0, 905.0], [2441.0, 1182.0], [2489.0, 959.0], [2473.0, 2060.0], [2465.0, 1956.0], [1073.0, 5481.0], [1085.0, 5462.5], [1057.0, 5476.0], [1081.0, 5395.0], [1025.0, 5640.0], [1029.0, 5642.5], [1037.0, 5633.0], [1053.0, 5577.25], [1049.0, 5604.0], [1045.0, 5619.0], [1069.0, 5484.0], [1097.0, 5558.5], [1149.0, 5126.0], [1089.0, 5564.0], [1133.0, 5004.0], [1129.0, 5480.0], [1121.0, 5022.0], [1117.0, 5338.0], [1113.0, 5340.0], [1105.0, 5530.0], [1205.0, 5164.0], [1209.0, 5572.0], [1193.0, 5347.0], [1213.0, 5437.0], [1185.0, 5556.0], [1201.0, 5380.5], [1165.0, 5115.0], [1161.0, 5516.5], [1157.0, 4949.0], [1153.0, 4958.0], [1181.0, 5204.0], [1177.0, 5365.0], [1173.0, 5582.0], [1169.0, 5786.0], [1197.0, 5502.0], [1277.0, 4985.5], [1249.0, 5390.0], [1269.0, 4623.0], [1265.0, 5181.0], [1225.0, 5385.5], [1237.0, 4671.0], [1233.0, 5258.666666666667], [1257.0, 5379.0], [1253.0, 4569.0], [1329.0, 4428.0], [1337.0, 5182.0], [1281.0, 5185.0], [1285.0, 5500.0], [1289.0, 5138.0], [1293.0, 5144.0], [1309.0, 4598.0], [1301.0, 5336.0], [1325.0, 4635.666666666667], [1321.0, 4635.0], [1397.0, 4125.0], [1385.0, 4227.0], [1401.0, 4106.0], [1377.0, 4658.0], [1381.0, 5163.0], [1393.0, 4065.0], [1353.0, 5181.0], [1349.0, 4953.0], [1373.0, 4207.0], [1369.0, 5251.0], [1365.0, 4236.5], [1361.0, 4382.0], [1389.0, 4852.0], [1461.0, 3827.0], [1457.0, 3968.0], [1441.0, 4884.0], [1445.0, 3886.0], [1465.0, 3994.6666666666665], [1413.0, 4023.0], [1417.0, 4814.0], [1421.0, 4092.0], [1433.0, 4201.5], [1429.0, 4562.0], [1425.0, 4648.0], [1449.0, 3859.0], [1529.0, 4167.0], [1505.0, 4178.5], [1509.0, 3724.0], [1513.0, 4413.0], [1517.0, 4562.25], [1525.0, 4160.0], [1481.0, 3969.5], [1485.0, 4331.0], [1497.0, 3891.0], [1493.0, 3761.0], [1489.0, 4482.0], [1597.0, 4162.0], [1569.0, 4066.0], [1573.0, 3434.0], [1577.0, 3672.0], [1593.0, 3986.0], [1589.0, 3461.0], [1549.0, 3565.0], [1545.0, 4171.0], [1541.0, 3574.5], [1561.0, 4400.0], [1649.0, 3494.0], [1657.0, 3305.0], [1637.0, 3396.0], [1645.0, 3334.0], [1661.0, 3279.0], [1653.0, 3313.0], [1609.0, 4155.0], [1613.0, 3562.0], [1629.0, 3376.0], [1625.0, 3529.0], [1621.0, 4119.0], [1617.0, 3404.0], [1721.0, 3875.0], [1725.0, 2890.0], [1697.0, 4088.0], [1705.0, 3845.0], [1709.0, 3427.5], [1717.0, 3990.0], [1713.0, 3331.0], [1677.0, 2984.0], [1673.0, 3289.0], [1693.0, 3579.5], [1689.0, 3173.0], [1685.0, 3813.0], [1681.0, 3387.0], [1785.0, 2995.0], [1789.0, 2983.0], [1769.0, 3036.0], [1773.0, 3868.0], [1777.0, 2722.0], [1741.0, 2861.0], [1737.0, 3632.0], [1733.0, 4069.0], [1729.0, 3152.0], [1753.0, 3201.0], [1745.0, 3547.3333333333335], [1845.0, 2653.5], [1849.0, 3158.0], [1825.0, 3601.0], [1833.0, 3600.0], [1837.0, 3347.0], [1841.0, 3856.0], [1801.0, 3045.5], [1797.0, 2901.5], [1793.0, 2697.0], [1821.0, 2595.5], [1813.0, 3484.6666666666665], [1809.0, 3053.0], [1909.0, 3385.0], [1893.0, 2495.0], [1889.0, 3259.0], [1901.0, 2500.0], [1869.0, 2975.0], [1865.0, 2510.0], [1861.0, 3305.0], [1885.0, 3110.5], [1881.0, 2902.0], [1877.0, 2530.0], [1873.0, 3811.0], [1977.0, 2289.0], [1953.0, 2913.5], [1957.0, 2963.0], [1981.0, 2364.0], [1973.0, 2731.5], [1969.0, 2397.0], [1933.0, 2411.0], [1929.0, 2518.0], [1921.0, 3116.0], [1949.0, 3424.0], [1941.0, 2395.0], [1937.0, 2392.0], [2041.0, 2234.0], [2021.0, 2131.0], [2025.0, 2761.5], [2029.0, 2690.6666666666665], [2045.0, 2187.0], [2037.0, 2239.3333333333335], [1997.0, 2237.0], [1993.0, 3332.0], [1989.0, 2228.0], [1985.0, 2635.0], [2013.0, 2292.0], [2009.0, 3469.0], [2005.0, 2228.0], [2001.0, 2201.0], [2146.0, 1910.0], [2074.0, 2625.0], [2114.0, 3049.0], [2130.0, 2011.0], [2138.0, 2008.0], [2154.0, 2955.0], [2066.0, 3306.0], [2098.0, 2015.0], [2090.0, 2703.0], [2082.0, 2337.0], [2282.0, 1544.0], [2242.0, 2736.0], [2250.0, 2238.5], [2258.0, 1700.0], [2266.0, 2695.0], [2274.0, 2151.0], [2202.0, 2300.0], [2194.0, 1761.0], [2186.0, 2858.0], [2234.0, 1641.0], [2226.0, 2760.0], [2218.0, 1646.0], [2210.0, 2353.0], [2322.0, 1509.0], [2402.0, 2124.0], [2386.0, 1300.0], [2394.0, 1826.5], [2314.0, 1472.0], [2330.0, 1356.0], [2362.0, 1572.0], [2346.0, 1312.0], [2338.0, 2394.0], [2442.0, 1171.0], [2498.0, 608.0], [2458.0, 1071.5], [2450.0, 1164.0], [2434.0, 1296.5], [2482.0, 947.5], [2474.0, 1063.0], [2466.0, 1035.0], [2163.0, 1851.0], [2123.0, 2764.0], [2115.0, 3036.0], [2131.0, 2018.0], [2139.0, 2999.0], [2155.0, 3129.0], [2147.0, 1919.0], [2099.0, 2306.0], [2091.0, 2026.0], [2275.0, 1590.0], [2283.0, 1500.0], [2251.0, 2713.0], [2267.0, 2653.0], [2203.0, 2828.0], [2195.0, 2825.0], [2179.0, 2971.0], [2235.0, 1698.0], [2227.0, 2001.0], [2219.0, 2794.0], [2427.0, 1741.0], [2379.0, 1261.3333333333333], [2387.0, 1259.0], [2395.0, 1204.0], [2419.0, 1216.0], [2403.0, 1264.0], [2307.0, 2100.0], [2323.0, 1503.0], [2331.0, 1445.0], [2363.0, 1239.0], [2347.0, 2559.0], [2339.0, 2462.0], [2443.0, 2291.0], [2451.0, 1102.0], [2499.0, 644.0], [2459.0, 2303.0], [2435.0, 2302.0], [2491.0, 1004.0], [2483.0, 883.0], [2475.0, 2150.0], [2467.0, 2129.0], [541.0, 6303.0], [543.0, 6298.5], [539.0, 6291.0], [513.0, 6360.0], [515.0, 6342.0], [519.0, 6313.5], [517.0, 6323.0], [525.0, 6322.666666666667], [535.0, 6329.0], [529.0, 6316.0], [569.0, 6198.0], [573.0, 6217.0], [563.0, 6257.0], [561.0, 6230.0], [571.0, 6262.0], [549.0, 6260.0], [547.0, 6274.0], [559.0, 6279.0], [557.0, 6269.0], [553.0, 6291.666666666667], [565.0, 6200.0], [581.0, 6213.5], [601.0, 6071.0], [593.0, 6201.0], [583.0, 6190.0], [579.0, 6224.0], [577.0, 6225.0], [591.0, 6186.0], [587.0, 6195.0], [595.0, 6056.0], [637.0, 6123.0], [639.0, 6000.0], [625.0, 6026.0], [627.0, 6022.0], [635.0, 6129.0], [613.0, 6111.5], [611.0, 6141.666666666667], [623.0, 6100.0], [619.0, 6078.0], [631.0, 6023.0], [667.0, 6065.0], [671.0, 6059.0], [657.0, 5995.0], [669.0, 5960.5], [665.0, 6041.0], [655.0, 5999.0], [641.0, 6089.0], [643.0, 5990.0], [647.0, 5995.0], [645.0, 5984.0], [663.0, 5968.0], [661.0, 5993.0], [697.0, 5926.0], [703.0, 6038.0], [677.0, 5984.5], [675.0, 5943.0], [673.0, 5954.0], [681.0, 5957.0], [693.0, 5942.2], [691.0, 5951.0], [689.0, 5951.666666666667], [705.0, 5903.0], [735.0, 5983.0], [731.0, 5943.0], [723.0, 5893.0], [719.0, 5895.0], [709.0, 5897.0], [717.0, 5915.0], [715.0, 6016.0], [713.0, 5936.666666666667], [767.0, 5922.0], [753.0, 5953.0], [761.0, 5936.0], [751.0, 5957.0], [737.0, 5985.0], [739.0, 5983.0], [741.0, 5854.0], [747.0, 5968.0], [759.0, 5934.5], [757.0, 5938.0], [799.0, 5840.0], [785.0, 5867.0], [769.0, 5919.0], [771.0, 5907.0], [773.0, 5900.0], [775.0, 5899.0], [781.0, 5866.0], [779.0, 5864.0], [791.0, 5842.0], [789.0, 5863.666666666667], [787.0, 5865.0], [803.0, 5850.0], [831.0, 5795.0], [827.0, 5810.0], [801.0, 5835.0], [805.0, 5840.0], [807.0, 5813.0], [813.0, 5820.5], [811.0, 5818.5], [809.0, 5820.0], [821.0, 5815.5], [819.0, 5820.5], [817.0, 5821.0], [861.0, 5780.0], [851.0, 5786.0], [859.0, 5785.0], [857.0, 5779.0], [835.0, 5791.0], [833.0, 5817.0], [845.0, 5804.0], [855.0, 5779.0], [853.0, 5792.0], [893.0, 5740.0], [895.0, 5729.0], [891.0, 5738.333333333333], [879.0, 5672.5], [871.0, 5759.0], [877.0, 5755.0], [875.0, 5759.0], [887.0, 5660.5], [885.0, 5677.0], [883.0, 5758.0], [927.0, 5741.0], [913.0, 5691.0], [923.0, 5676.0], [903.0, 5701.0], [897.0, 5673.0], [911.0, 5712.666666666667], [919.0, 5680.0], [917.0, 5688.333333333333], [955.0, 5641.0], [959.0, 5628.0], [945.0, 5567.0], [957.0, 5624.0], [935.0, 5687.0], [933.0, 5679.0], [931.0, 5721.0], [929.0, 5721.0], [943.0, 5696.0], [941.0, 5671.0], [939.0, 5672.0], [937.0, 5670.0], [949.0, 5644.0], [985.0, 5714.0], [991.0, 5705.0], [989.0, 5705.0], [987.0, 5712.0], [963.0, 5647.0], [965.0, 5620.0], [971.0, 5611.0], [969.0, 5639.0], [979.0, 5682.0], [1021.0, 5651.0], [1023.0, 5642.0], [1011.0, 5653.5], [1009.0, 5652.0], [1013.0, 5653.0], [1019.0, 5653.0], [1017.0, 5650.0], [1007.0, 5657.0], [993.0, 5699.5], [997.0, 5664.0], [999.0, 5624.0], [1005.0, 5658.0], [1001.0, 5660.0], [1015.0, 5651.0], [1078.0, 5490.5], [1062.0, 5481.0], [1086.0, 5388.0], [1058.0, 5521.5], [1038.0, 5625.0], [1026.0, 5646.0], [1054.0, 5569.0], [1046.0, 5606.0], [1042.0, 5423.0], [1066.0, 5433.0], [1142.0, 5093.25], [1146.0, 5401.0], [1150.0, 5427.0], [1122.0, 5021.0], [1126.0, 5430.5], [1130.0, 5880.0], [1138.0, 4999.0], [1102.0, 5052.0], [1090.0, 5543.0], [1114.0, 5035.0], [1110.0, 5441.666666666667], [1106.0, 5542.0], [1134.0, 5008.0], [1202.0, 5718.0], [1214.0, 4673.0], [1210.0, 5307.0], [1206.0, 5464.0], [1182.0, 4847.0], [1158.0, 4956.0], [1166.0, 5632.0], [1162.0, 4948.0], [1178.0, 5526.0], [1174.0, 4836.0], [1170.0, 5781.0], [1190.0, 5525.0], [1266.0, 5072.0], [1274.0, 5327.5], [1278.0, 5459.0], [1254.0, 5197.0], [1270.0, 5170.0], [1246.0, 5203.0], [1222.0, 4934.5], [1230.0, 5442.5], [1242.0, 5207.0], [1238.0, 5221.0], [1234.0, 5210.0], [1262.0, 5201.0], [1258.0, 4633.0], [1338.0, 5185.0], [1342.0, 4796.0], [1314.0, 4927.0], [1318.0, 5127.5], [1334.0, 4887.5], [1330.0, 4979.0], [1290.0, 4605.0], [1306.0, 4553.5], [1298.0, 5143.25], [1326.0, 5029.0], [1398.0, 4122.0], [1378.0, 4965.0], [1394.0, 4222.0], [1374.0, 4290.0], [1350.0, 4900.0], [1354.0, 4379.0], [1358.0, 4693.0], [1362.0, 4309.0], [1386.0, 4258.0], [1382.0, 5126.0], [1462.0, 4800.0], [1470.0, 4663.0], [1446.0, 4490.0], [1466.0, 4311.0], [1438.0, 3904.0], [1410.0, 4276.833333333333], [1414.0, 3995.0], [1418.0, 4826.0], [1422.0, 3951.0], [1430.0, 3908.0], [1426.0, 3950.0], [1454.0, 3840.0], [1450.0, 4735.0], [1530.0, 3606.0], [1506.0, 3669.0], [1510.0, 4133.0], [1514.0, 3672.0], [1518.0, 4408.0], [1534.0, 3675.5], [1526.0, 4296.0], [1522.0, 4442.5], [1474.0, 4151.5], [1478.0, 3791.0], [1486.0, 3786.0], [1502.0, 4261.0], [1498.0, 3892.0], [1494.0, 3761.0], [1490.0, 3904.0], [1594.0, 3447.0], [1598.0, 3591.0], [1570.0, 3551.0], [1582.0, 3828.6666666666665], [1590.0, 3536.0], [1546.0, 3566.0], [1542.0, 3590.0], [1538.0, 4032.5], [1566.0, 3849.5], [1562.0, 3720.0], [1554.0, 3906.6666666666665], [1650.0, 3350.0], [1662.0, 3345.0], [1634.0, 3629.0], [1638.0, 4036.0], [1642.0, 4193.0], [1630.0, 3906.0], [1602.0, 3441.0], [1606.0, 3476.0], [1610.0, 3857.5], [1614.0, 4280.0], [1626.0, 3901.0], [1622.0, 4369.0], [1678.0, 4235.0], [1718.0, 4077.0], [1702.0, 3966.5], [1710.0, 2967.0], [1726.0, 3279.0], [1714.0, 3678.0], [1674.0, 4054.0], [1670.0, 3606.0], [1666.0, 3521.6666666666665], [1694.0, 3921.0], [1690.0, 3879.0], [1686.0, 3354.0], [1682.0, 3953.0], [1786.0, 3786.0], [1770.0, 2739.0], [1774.0, 2731.0], [1790.0, 2681.0], [1782.0, 3990.5], [1742.0, 2826.0], [1738.0, 3847.0], [1734.0, 3989.0], [1730.0, 4172.0], [1750.0, 3354.5], [1746.0, 3923.0], [1806.0, 3028.0], [1854.0, 3739.0], [1830.0, 3658.0], [1850.0, 2530.0], [1802.0, 2658.0], [1794.0, 2977.0], [1822.0, 2671.0], [1814.0, 3708.0], [1810.0, 2696.0], [1914.0, 3057.0], [1906.0, 3659.0], [1918.0, 2453.5], [1890.0, 2495.0], [1894.0, 2513.0], [1898.0, 2789.3333333333335], [1870.0, 2565.0], [1866.0, 3292.0], [1862.0, 3684.0], [1858.0, 3059.0], [1886.0, 2732.0], [1882.0, 3260.0], [1878.0, 2907.0], [1874.0, 2466.0], [1970.0, 2322.0], [1954.0, 2353.0], [1958.0, 2414.0], [1962.0, 2831.5], [1982.0, 2309.0], [1934.0, 2418.0], [1930.0, 2515.0], [1926.0, 3038.5], [1922.0, 2619.0], [1950.0, 2680.0], [1938.0, 2445.0], [2046.0, 2110.0], [2018.0, 2741.0], [2022.0, 3268.0], [2026.0, 2196.0], [2030.0, 2087.0], [2042.0, 2457.0], [2034.0, 2283.5], [1998.0, 2212.0], [1994.0, 2347.0], [1990.0, 2277.0], [2014.0, 3355.0], [2010.0, 3215.0], [2006.0, 3233.0], [2002.0, 2156.0], [2156.0, 1967.0], [2068.0, 2217.5], [2164.0, 3121.0], [2116.0, 1980.0], [2124.0, 3129.0], [2132.0, 2235.0], [2060.0, 2479.4], [2076.0, 2044.0], [2108.0, 2381.3333333333335], [2092.0, 2052.0], [2084.0, 3133.0], [2292.0, 2608.0], [2284.0, 1553.0], [2244.0, 2241.5], [2252.0, 1576.0], [2260.0, 1625.5], [2268.0, 1609.0], [2276.0, 1616.0], [2196.0, 1836.0], [2188.0, 2285.0], [2236.0, 2748.0], [2228.0, 2894.0], [2212.0, 2266.0], [2420.0, 1224.0], [2380.0, 2389.0], [2428.0, 2377.0], [2372.0, 1435.6666666666667], [2396.0, 1134.0], [2404.0, 1096.0], [2308.0, 1474.0], [2332.0, 2405.0], [2364.0, 1314.0], [2356.0, 1454.3333333333333], [2348.0, 1283.0], [2340.0, 1469.0], [2444.0, 1127.0], [2452.0, 1083.0], [2492.0, 2000.5], [2500.0, 1803.0], [2436.0, 1133.0], [2468.0, 2074.0], [2165.0, 2159.0], [2117.0, 3014.0], [2133.0, 2872.0], [2141.0, 1960.0], [2149.0, 2966.0], [2061.0, 2073.0], [2069.0, 2049.0], [2077.0, 2002.0], [2109.0, 2056.0], [2101.0, 1999.5], [2085.0, 2109.0], [2197.0, 1694.0], [2205.0, 1755.0], [2277.0, 1507.0], [2293.0, 1520.3333333333333], [2245.0, 1666.0], [2261.0, 2792.0], [2181.0, 1792.5], [2237.0, 2735.0], [2229.0, 1716.0], [2213.0, 1683.0], [2429.0, 1159.0], [2373.0, 2527.0], [2389.0, 2288.5], [2397.0, 1207.0], [2421.0, 2390.0], [2413.0, 1673.75], [2405.0, 1252.0], [2317.0, 2162.0], [2325.0, 2553.5], [2365.0, 1373.0], [2357.0, 2394.0], [2349.0, 1373.0], [2341.0, 1461.0], [2461.0, 1012.0], [2453.0, 1080.0], [2485.0, 2149.5], [2477.0, 1511.5], [2469.0, 1065.0], [1079.0, 5543.0], [1083.0, 5543.0], [1075.0, 5437.5], [1055.0, 5579.0], [1035.0, 5641.0], [1039.0, 5581.166666666667], [1047.0, 5606.0], [1043.0, 5502.0], [1071.0, 5377.5], [1067.0, 5313.5], [1059.0, 5584.0], [1103.0, 5729.5], [1123.0, 5020.0], [1151.0, 5310.0], [1147.0, 4995.0], [1099.0, 5548.0], [1095.0, 5434.333333333333], [1127.0, 5467.0], [1119.0, 5531.5], [1111.0, 5040.0], [1107.0, 5507.0], [1167.0, 5321.0], [1191.0, 4800.0], [1187.0, 5555.0], [1203.0, 5405.0], [1163.0, 4947.0], [1159.0, 5434.0], [1155.0, 4954.5], [1183.0, 5672.0], [1179.0, 5572.0], [1175.0, 4823.0], [1171.0, 4840.0], [1199.0, 5255.0], [1195.0, 5710.0], [1275.0, 5509.0], [1279.0, 5175.0], [1267.0, 5163.0], [1247.0, 5229.0], [1223.0, 5497.0], [1219.0, 5058.0], [1227.0, 5396.5], [1243.0, 4656.0], [1259.0, 5318.0], [1255.0, 5352.0], [1331.0, 5162.0], [1339.0, 5339.0], [1343.0, 4404.0], [1335.0, 5350.0], [1311.0, 4861.5], [1283.0, 5138.0], [1287.0, 5140.0], [1295.0, 5297.0], [1307.0, 5121.0], [1303.0, 5198.0], [1299.0, 5487.0], [1315.0, 5021.0], [1395.0, 4974.0], [1399.0, 4955.0], [1379.0, 4271.0], [1383.0, 4169.0], [1359.0, 4941.0], [1355.0, 5066.0], [1351.0, 4986.0], [1347.0, 4604.333333333333], [1375.0, 5033.0], [1367.0, 4632.0], [1363.0, 5294.0], [1391.0, 4564.0], [1387.0, 4161.0], [1459.0, 3942.0], [1467.0, 3816.0], [1471.0, 3945.0], [1443.0, 4763.0], [1439.0, 4012.0], [1411.0, 4102.0], [1415.0, 4851.0], [1419.0, 3972.0], [1423.0, 4970.0], [1435.0, 3919.0], [1431.0, 3900.0], [1427.0, 4440.0], [1455.0, 4678.5], [1451.0, 4873.0], [1447.0, 4374.0], [1527.0, 3627.0], [1523.0, 4177.0], [1531.0, 3797.0], [1535.0, 4678.0], [1519.0, 3654.0], [1503.0, 3749.0], [1475.0, 4294.0], [1479.0, 3893.0], [1487.0, 4633.0], [1499.0, 3710.0], [1495.0, 4571.0], [1551.0, 3646.5], [1587.0, 3737.3333333333335], [1591.0, 3604.0], [1595.0, 3967.0], [1575.0, 4030.5], [1579.0, 4327.0], [1547.0, 4550.0], [1539.0, 4444.0], [1567.0, 3616.0], [1563.0, 3720.0], [1559.0, 3904.3333333333335], [1555.0, 3731.0], [1607.0, 3584.0], [1635.0, 4031.0], [1643.0, 4012.0], [1647.0, 3659.0], [1603.0, 4481.0], [1611.0, 3425.0], [1615.0, 3943.0], [1627.0, 3448.0], [1623.0, 4110.0], [1619.0, 3471.0], [1723.0, 3955.5], [1727.0, 4175.0], [1699.0, 3441.5], [1703.0, 3697.0], [1707.0, 3926.5], [1711.0, 3249.0], [1719.0, 3653.0], [1715.0, 4031.0], [1671.0, 2990.0], [1667.0, 3428.0], [1695.0, 2934.0], [1691.0, 3245.0], [1687.0, 3370.0], [1787.0, 2682.0], [1791.0, 3689.0], [1763.0, 3196.0], [1775.0, 3145.0], [1783.0, 4024.0], [1739.0, 3621.0], [1731.0, 3574.0], [1747.0, 4142.0], [1843.0, 3011.5], [1827.0, 3316.0], [1835.0, 3488.5], [1839.0, 3861.0], [1847.0, 2611.0], [1807.0, 2629.0], [1803.0, 3844.0], [1799.0, 3441.5], [1823.0, 2637.0], [1819.0, 2728.0], [1815.0, 2609.0], [1907.0, 2470.0], [1895.0, 2512.0], [1899.0, 2475.0], [1903.0, 2492.5], [1915.0, 2674.0], [1871.0, 3625.0], [1863.0, 2520.0], [1859.0, 3362.0], [1887.0, 2524.0], [1883.0, 2541.0], [1979.0, 3081.5], [1983.0, 3355.0], [1955.0, 3577.0], [1959.0, 2293.0], [1967.0, 2666.3333333333335], [1975.0, 2312.5], [1971.0, 2389.0], [1931.0, 2501.0], [1927.0, 2412.0], [1923.0, 2458.0], [1951.0, 2361.0], [1999.0, 2620.0], [2039.0, 3091.0], [2047.0, 2341.0], [2019.0, 2145.0], [2023.0, 2493.0], [2031.0, 2128.0], [1995.0, 2333.0], [1991.0, 3126.0], [2011.0, 2258.0], [2007.0, 2917.0], [2150.0, 2966.0], [2118.0, 1923.0], [2142.0, 2219.0], [2158.0, 1851.0], [2062.0, 2150.0], [2070.0, 3299.0], [2078.0, 2214.0], [2110.0, 1987.0], [2102.0, 2301.0], [2094.0, 2442.5], [2086.0, 2326.0], [2286.0, 1502.0], [2278.0, 1580.0], [2254.0, 2167.5], [2246.0, 1677.0], [2262.0, 2703.0], [2270.0, 2769.0], [2294.0, 1842.0], [2206.0, 2785.5], [2190.0, 2543.0], [2238.0, 1596.0], [2230.0, 2763.0], [2222.0, 2777.3333333333335], [2214.0, 1705.0], [2414.0, 1178.0], [2406.0, 1211.0], [2374.0, 1237.0], [2382.0, 1231.5], [2390.0, 1221.0], [2398.0, 1480.0], [2430.0, 1203.0], [2422.0, 1181.0], [2318.0, 1457.0], [2326.0, 2486.0], [2334.0, 1453.0], [2358.0, 1626.0], [2350.0, 2310.0], [2342.0, 2428.0], [2454.0, 2270.0], [2462.0, 2141.0], [2446.0, 1667.5], [2438.0, 1223.5], [2494.0, 986.0], [2478.0, 2215.0], [2470.0, 1027.0], [2151.0, 2569.0], [2167.0, 2891.5], [2119.0, 3201.0], [2127.0, 3048.0], [2135.0, 2674.5], [2143.0, 1831.0], [2111.0, 2288.0], [2055.0, 2530.5], [2063.0, 2023.0], [2071.0, 2133.0], [2079.0, 1956.0], [2103.0, 1983.0], [2095.0, 2077.0], [2303.0, 1586.0], [2287.0, 2106.0], [2247.0, 1644.0], [2255.0, 1621.0], [2263.0, 1615.0], [2271.0, 2112.0], [2279.0, 1530.0], [2207.0, 2769.0], [2199.0, 2268.0], [2191.0, 1848.0], [2239.0, 2847.0], [2231.0, 1689.0], [2223.0, 2003.0], [2215.0, 1744.0], [2415.0, 2222.0], [2423.0, 2380.0], [2431.0, 2174.0], [2375.0, 1295.0], [2391.0, 1280.0], [2399.0, 1208.0], [2407.0, 1204.0], [2367.0, 1299.0], [2311.0, 2585.3333333333335], [2319.0, 2588.0], [2327.0, 1497.0], [2335.0, 1425.0], [2359.0, 1367.0], [2351.0, 1279.0], [2455.0, 1109.0], [2463.0, 2264.0], [2439.0, 2318.0], [2495.0, 1002.0], [2487.0, 2081.5], [2479.0, 2081.0], [1.0, 7251.0]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}, {"data": [[1251.0652000000005, 4582.5891999999985]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19000.0, "minX": 1.75559046E12, "maxY": 160771.41666666666, "series": [{"data": [[1.75559046E12, 160771.41666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75559046E12, 19000.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559046E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4582.5891999999985, "minX": 1.75559046E12, "maxY": 4582.5891999999985, "series": [{"data": [[1.75559046E12, 4582.5891999999985]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559046E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4582.562800000009, "minX": 1.75559046E12, "maxY": 4582.562800000009, "series": [{"data": [[1.75559046E12, 4582.562800000009]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559046E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4431.9503999999915, "minX": 1.75559046E12, "maxY": 4431.9503999999915, "series": [{"data": [[1.75559046E12, 4431.9503999999915]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559046E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 608.0, "minX": 1.75559046E12, "maxY": 7649.0, "series": [{"data": [[1.75559046E12, 7649.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75559046E12, 6513.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75559046E12, 7413.919999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75559046E12, 6804.799999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75559046E12, 608.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75559046E12, 5142.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559046E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1232.5, "minX": 112.0, "maxY": 6561.0, "series": [{"data": [[515.0, 5642.0], [313.0, 4374.0], [647.0, 6323.0], [385.0, 2159.0], [402.0, 3300.5], [112.0, 6561.0], [126.0, 1232.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 647.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1232.5, "minX": 112.0, "maxY": 6561.0, "series": [{"data": [[515.0, 5642.0], [313.0, 4374.0], [647.0, 6323.0], [385.0, 2159.0], [402.0, 3300.5], [112.0, 6561.0], [126.0, 1232.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 647.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75559046E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75559046E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559046E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75559046E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75559046E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559046E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75559046E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75559046E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูลการนัดหมายอบรมในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559046E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75559046E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75559046E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559046E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

