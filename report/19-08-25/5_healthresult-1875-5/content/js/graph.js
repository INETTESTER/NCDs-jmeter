/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 5902.0, "series": [{"data": [[0.0, 25.0], [0.1, 25.0], [0.2, 25.0], [0.3, 25.0], [0.4, 26.0], [0.5, 27.0], [0.6, 27.0], [0.7, 27.0], [0.8, 27.0], [0.9, 27.0], [1.0, 27.0], [1.1, 27.0], [1.2, 27.0], [1.3, 27.0], [1.4, 27.0], [1.5, 27.0], [1.6, 28.0], [1.7, 28.0], [1.8, 28.0], [1.9, 28.0], [2.0, 28.0], [2.1, 28.0], [2.2, 28.0], [2.3, 28.0], [2.4, 28.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 29.0], [2.9, 29.0], [3.0, 29.0], [3.1, 29.0], [3.2, 29.0], [3.3, 29.0], [3.4, 29.0], [3.5, 29.0], [3.6, 29.0], [3.7, 29.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 29.0], [4.2, 30.0], [4.3, 30.0], [4.4, 30.0], [4.5, 30.0], [4.6, 30.0], [4.7, 30.0], [4.8, 30.0], [4.9, 30.0], [5.0, 30.0], [5.1, 30.0], [5.2, 30.0], [5.3, 30.0], [5.4, 30.0], [5.5, 30.0], [5.6, 30.0], [5.7, 30.0], [5.8, 30.0], [5.9, 30.0], [6.0, 31.0], [6.1, 31.0], [6.2, 31.0], [6.3, 31.0], [6.4, 31.0], [6.5, 31.0], [6.6, 31.0], [6.7, 31.0], [6.8, 31.0], [6.9, 31.0], [7.0, 31.0], [7.1, 31.0], [7.2, 32.0], [7.3, 32.0], [7.4, 32.0], [7.5, 32.0], [7.6, 32.0], [7.7, 32.0], [7.8, 32.0], [7.9, 32.0], [8.0, 32.0], [8.1, 32.0], [8.2, 32.0], [8.3, 32.0], [8.4, 32.0], [8.5, 33.0], [8.6, 33.0], [8.7, 33.0], [8.8, 33.0], [8.9, 33.0], [9.0, 33.0], [9.1, 33.0], [9.2, 33.0], [9.3, 33.0], [9.4, 33.0], [9.5, 33.0], [9.6, 33.0], [9.7, 33.0], [9.8, 33.0], [9.9, 33.0], [10.0, 33.0], [10.1, 33.0], [10.2, 33.0], [10.3, 33.0], [10.4, 34.0], [10.5, 34.0], [10.6, 34.0], [10.7, 34.0], [10.8, 34.0], [10.9, 34.0], [11.0, 34.0], [11.1, 34.0], [11.2, 34.0], [11.3, 34.0], [11.4, 34.0], [11.5, 34.0], [11.6, 34.0], [11.7, 34.0], [11.8, 34.0], [11.9, 34.0], [12.0, 34.0], [12.1, 35.0], [12.2, 35.0], [12.3, 35.0], [12.4, 35.0], [12.5, 35.0], [12.6, 35.0], [12.7, 35.0], [12.8, 35.0], [12.9, 35.0], [13.0, 35.0], [13.1, 35.0], [13.2, 36.0], [13.3, 36.0], [13.4, 36.0], [13.5, 36.0], [13.6, 36.0], [13.7, 36.0], [13.8, 36.0], [13.9, 36.0], [14.0, 36.0], [14.1, 36.0], [14.2, 36.0], [14.3, 36.0], [14.4, 36.0], [14.5, 36.0], [14.6, 36.0], [14.7, 37.0], [14.8, 37.0], [14.9, 37.0], [15.0, 37.0], [15.1, 37.0], [15.2, 37.0], [15.3, 37.0], [15.4, 37.0], [15.5, 37.0], [15.6, 37.0], [15.7, 37.0], [15.8, 37.0], [15.9, 37.0], [16.0, 37.0], [16.1, 37.0], [16.2, 37.0], [16.3, 37.0], [16.4, 38.0], [16.5, 38.0], [16.6, 38.0], [16.7, 38.0], [16.8, 38.0], [16.9, 38.0], [17.0, 38.0], [17.1, 38.0], [17.2, 38.0], [17.3, 39.0], [17.4, 39.0], [17.5, 39.0], [17.6, 39.0], [17.7, 39.0], [17.8, 39.0], [17.9, 39.0], [18.0, 40.0], [18.1, 40.0], [18.2, 40.0], [18.3, 40.0], [18.4, 40.0], [18.5, 40.0], [18.6, 40.0], [18.7, 41.0], [18.8, 41.0], [18.9, 41.0], [19.0, 41.0], [19.1, 41.0], [19.2, 41.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 43.0], [19.7, 43.0], [19.8, 43.0], [19.9, 43.0], [20.0, 43.0], [20.1, 43.0], [20.2, 43.0], [20.3, 44.0], [20.4, 44.0], [20.5, 44.0], [20.6, 44.0], [20.7, 44.0], [20.8, 45.0], [20.9, 45.0], [21.0, 45.0], [21.1, 45.0], [21.2, 46.0], [21.3, 46.0], [21.4, 46.0], [21.5, 47.0], [21.6, 47.0], [21.7, 47.0], [21.8, 47.0], [21.9, 47.0], [22.0, 48.0], [22.1, 48.0], [22.2, 48.0], [22.3, 48.0], [22.4, 49.0], [22.5, 50.0], [22.6, 50.0], [22.7, 50.0], [22.8, 50.0], [22.9, 51.0], [23.0, 51.0], [23.1, 51.0], [23.2, 52.0], [23.3, 52.0], [23.4, 52.0], [23.5, 52.0], [23.6, 53.0], [23.7, 54.0], [23.8, 54.0], [23.9, 54.0], [24.0, 54.0], [24.1, 55.0], [24.2, 55.0], [24.3, 55.0], [24.4, 55.0], [24.5, 56.0], [24.6, 56.0], [24.7, 56.0], [24.8, 57.0], [24.9, 57.0], [25.0, 57.0], [25.1, 57.0], [25.2, 58.0], [25.3, 58.0], [25.4, 58.0], [25.5, 58.0], [25.6, 59.0], [25.7, 60.0], [25.8, 60.0], [25.9, 60.0], [26.0, 61.0], [26.1, 61.0], [26.2, 61.0], [26.3, 62.0], [26.4, 62.0], [26.5, 64.0], [26.6, 64.0], [26.7, 64.0], [26.8, 65.0], [26.9, 66.0], [27.0, 66.0], [27.1, 67.0], [27.2, 68.0], [27.3, 69.0], [27.4, 69.0], [27.5, 70.0], [27.6, 71.0], [27.7, 72.0], [27.8, 72.0], [27.9, 73.0], [28.0, 73.0], [28.1, 74.0], [28.2, 74.0], [28.3, 74.0], [28.4, 74.0], [28.5, 75.0], [28.6, 77.0], [28.7, 79.0], [28.8, 81.0], [28.9, 89.0], [29.0, 99.0], [29.1, 116.0], [29.2, 140.0], [29.3, 170.0], [29.4, 226.0], [29.5, 260.0], [29.6, 271.0], [29.7, 385.0], [29.8, 411.0], [29.9, 437.0], [30.0, 449.0], [30.1, 480.0], [30.2, 492.0], [30.3, 494.0], [30.4, 495.0], [30.5, 497.0], [30.6, 500.0], [30.7, 501.0], [30.8, 516.0], [30.9, 523.0], [31.0, 588.0], [31.1, 624.0], [31.2, 624.0], [31.3, 627.0], [31.4, 637.0], [31.5, 656.0], [31.6, 658.0], [31.7, 683.0], [31.8, 690.0], [31.9, 693.0], [32.0, 704.0], [32.1, 784.0], [32.2, 820.0], [32.3, 823.0], [32.4, 831.0], [32.5, 844.0], [32.6, 852.0], [32.7, 855.0], [32.8, 855.0], [32.9, 893.0], [33.0, 904.0], [33.1, 922.0], [33.2, 947.0], [33.3, 951.0], [33.4, 957.0], [33.5, 958.0], [33.6, 960.0], [33.7, 965.0], [33.8, 971.0], [33.9, 990.0], [34.0, 998.0], [34.1, 1004.0], [34.2, 1008.0], [34.3, 1016.0], [34.4, 1017.0], [34.5, 1023.0], [34.6, 1033.0], [34.7, 1041.0], [34.8, 1050.0], [34.9, 1058.0], [35.0, 1079.0], [35.1, 1090.0], [35.2, 1091.0], [35.3, 1097.0], [35.4, 1107.0], [35.5, 1123.0], [35.6, 1127.0], [35.7, 1134.0], [35.8, 1145.0], [35.9, 1157.0], [36.0, 1161.0], [36.1, 1180.0], [36.2, 1194.0], [36.3, 1200.0], [36.4, 1213.0], [36.5, 1226.0], [36.6, 1229.0], [36.7, 1236.0], [36.8, 1242.0], [36.9, 1272.0], [37.0, 1295.0], [37.1, 1325.0], [37.2, 1331.0], [37.3, 1337.0], [37.4, 1342.0], [37.5, 1351.0], [37.6, 1360.0], [37.7, 1365.0], [37.8, 1392.0], [37.9, 1407.0], [38.0, 1409.0], [38.1, 1419.0], [38.2, 1421.0], [38.3, 1424.0], [38.4, 1425.0], [38.5, 1433.0], [38.6, 1441.0], [38.7, 1447.0], [38.8, 1475.0], [38.9, 1476.0], [39.0, 1523.0], [39.1, 1580.0], [39.2, 1584.0], [39.3, 1593.0], [39.4, 1616.0], [39.5, 1681.0], [39.6, 1688.0], [39.7, 1706.0], [39.8, 1715.0], [39.9, 1733.0], [40.0, 1733.0], [40.1, 1736.0], [40.2, 1739.0], [40.3, 1746.0], [40.4, 1755.0], [40.5, 1763.0], [40.6, 1766.0], [40.7, 1779.0], [40.8, 1794.0], [40.9, 1814.0], [41.0, 1815.0], [41.1, 1816.0], [41.2, 1821.0], [41.3, 1824.0], [41.4, 1833.0], [41.5, 1838.0], [41.6, 1840.0], [41.7, 1846.0], [41.8, 1850.0], [41.9, 1852.0], [42.0, 1854.0], [42.1, 1856.0], [42.2, 1860.0], [42.3, 1882.0], [42.4, 1883.0], [42.5, 1887.0], [42.6, 1890.0], [42.7, 1892.0], [42.8, 1895.0], [42.9, 1899.0], [43.0, 1916.0], [43.1, 1921.0], [43.2, 1922.0], [43.3, 1924.0], [43.4, 1928.0], [43.5, 1949.0], [43.6, 1951.0], [43.7, 1957.0], [43.8, 1962.0], [43.9, 1973.0], [44.0, 1982.0], [44.1, 1987.0], [44.2, 1994.0], [44.3, 1997.0], [44.4, 2003.0], [44.5, 2008.0], [44.6, 2011.0], [44.7, 2014.0], [44.8, 2017.0], [44.9, 2019.0], [45.0, 2024.0], [45.1, 2035.0], [45.2, 2055.0], [45.3, 2058.0], [45.4, 2064.0], [45.5, 2067.0], [45.6, 2071.0], [45.7, 2078.0], [45.8, 2082.0], [45.9, 2094.0], [46.0, 2099.0], [46.1, 2108.0], [46.2, 2120.0], [46.3, 2143.0], [46.4, 2144.0], [46.5, 2149.0], [46.6, 2154.0], [46.7, 2166.0], [46.8, 2170.0], [46.9, 2173.0], [47.0, 2177.0], [47.1, 2194.0], [47.2, 2203.0], [47.3, 2213.0], [47.4, 2221.0], [47.5, 2225.0], [47.6, 2235.0], [47.7, 2243.0], [47.8, 2245.0], [47.9, 2257.0], [48.0, 2257.0], [48.1, 2258.0], [48.2, 2263.0], [48.3, 2265.0], [48.4, 2269.0], [48.5, 2277.0], [48.6, 2290.0], [48.7, 2292.0], [48.8, 2305.0], [48.9, 2312.0], [49.0, 2318.0], [49.1, 2322.0], [49.2, 2326.0], [49.3, 2338.0], [49.4, 2341.0], [49.5, 2344.0], [49.6, 2348.0], [49.7, 2366.0], [49.8, 2369.0], [49.9, 2374.0], [50.0, 2387.0], [50.1, 2393.0], [50.2, 2396.0], [50.3, 2404.0], [50.4, 2405.0], [50.5, 2415.0], [50.6, 2416.0], [50.7, 2427.0], [50.8, 2431.0], [50.9, 2445.0], [51.0, 2450.0], [51.1, 2459.0], [51.2, 2459.0], [51.3, 2470.0], [51.4, 2487.0], [51.5, 2491.0], [51.6, 2495.0], [51.7, 2512.0], [51.8, 2523.0], [51.9, 2534.0], [52.0, 2536.0], [52.1, 2543.0], [52.2, 2552.0], [52.3, 2569.0], [52.4, 2570.0], [52.5, 2576.0], [52.6, 2589.0], [52.7, 2605.0], [52.8, 2609.0], [52.9, 2616.0], [53.0, 2646.0], [53.1, 2660.0], [53.2, 2667.0], [53.3, 2675.0], [53.4, 2678.0], [53.5, 2682.0], [53.6, 2682.0], [53.7, 2691.0], [53.8, 2694.0], [53.9, 2697.0], [54.0, 2706.0], [54.1, 2721.0], [54.2, 2724.0], [54.3, 2735.0], [54.4, 2746.0], [54.5, 2750.0], [54.6, 2775.0], [54.7, 2804.0], [54.8, 2847.0], [54.9, 2850.0], [55.0, 2865.0], [55.1, 2871.0], [55.2, 2881.0], [55.3, 2883.0], [55.4, 2891.0], [55.5, 2938.0], [55.6, 2958.0], [55.7, 2962.0], [55.8, 2970.0], [55.9, 2988.0], [56.0, 2994.0], [56.1, 3007.0], [56.2, 3040.0], [56.3, 3076.0], [56.4, 3080.0], [56.5, 3081.0], [56.6, 3082.0], [56.7, 3111.0], [56.8, 3119.0], [56.9, 3127.0], [57.0, 3142.0], [57.1, 3148.0], [57.2, 3154.0], [57.3, 3164.0], [57.4, 3175.0], [57.5, 3177.0], [57.6, 3183.0], [57.7, 3191.0], [57.8, 3203.0], [57.9, 3236.0], [58.0, 3244.0], [58.1, 3260.0], [58.2, 3263.0], [58.3, 3278.0], [58.4, 3280.0], [58.5, 3292.0], [58.6, 3300.0], [58.7, 3305.0], [58.8, 3315.0], [58.9, 3325.0], [59.0, 3334.0], [59.1, 3340.0], [59.2, 3343.0], [59.3, 3352.0], [59.4, 3362.0], [59.5, 3369.0], [59.6, 3379.0], [59.7, 3384.0], [59.8, 3388.0], [59.9, 3390.0], [60.0, 3393.0], [60.1, 3403.0], [60.2, 3423.0], [60.3, 3427.0], [60.4, 3430.0], [60.5, 3433.0], [60.6, 3440.0], [60.7, 3459.0], [60.8, 3467.0], [60.9, 3472.0], [61.0, 3478.0], [61.1, 3494.0], [61.2, 3510.0], [61.3, 3528.0], [61.4, 3546.0], [61.5, 3557.0], [61.6, 3559.0], [61.7, 3564.0], [61.8, 3571.0], [61.9, 3590.0], [62.0, 3593.0], [62.1, 3601.0], [62.2, 3602.0], [62.3, 3614.0], [62.4, 3615.0], [62.5, 3620.0], [62.6, 3629.0], [62.7, 3630.0], [62.8, 3631.0], [62.9, 3632.0], [63.0, 3638.0], [63.1, 3645.0], [63.2, 3648.0], [63.3, 3650.0], [63.4, 3651.0], [63.5, 3655.0], [63.6, 3658.0], [63.7, 3662.0], [63.8, 3674.0], [63.9, 3676.0], [64.0, 3676.0], [64.1, 3678.0], [64.2, 3680.0], [64.3, 3682.0], [64.4, 3696.0], [64.5, 3698.0], [64.6, 3700.0], [64.7, 3703.0], [64.8, 3704.0], [64.9, 3710.0], [65.0, 3711.0], [65.1, 3715.0], [65.2, 3722.0], [65.3, 3724.0], [65.4, 3728.0], [65.5, 3732.0], [65.6, 3737.0], [65.7, 3746.0], [65.8, 3747.0], [65.9, 3748.0], [66.0, 3772.0], [66.1, 3779.0], [66.2, 3787.0], [66.3, 3791.0], [66.4, 3793.0], [66.5, 3798.0], [66.6, 3801.0], [66.7, 3805.0], [66.8, 3808.0], [66.9, 3815.0], [67.0, 3817.0], [67.1, 3823.0], [67.2, 3825.0], [67.3, 3828.0], [67.4, 3833.0], [67.5, 3841.0], [67.6, 3845.0], [67.7, 3849.0], [67.8, 3854.0], [67.9, 3856.0], [68.0, 3859.0], [68.1, 3862.0], [68.2, 3863.0], [68.3, 3868.0], [68.4, 3878.0], [68.5, 3880.0], [68.6, 3885.0], [68.7, 3889.0], [68.8, 3890.0], [68.9, 3891.0], [69.0, 3893.0], [69.1, 3895.0], [69.2, 3900.0], [69.3, 3906.0], [69.4, 3908.0], [69.5, 3912.0], [69.6, 3917.0], [69.7, 3918.0], [69.8, 3921.0], [69.9, 3926.0], [70.0, 3928.0], [70.1, 3930.0], [70.2, 3937.0], [70.3, 3938.0], [70.4, 3939.0], [70.5, 3940.0], [70.6, 3942.0], [70.7, 3946.0], [70.8, 3949.0], [70.9, 3951.0], [71.0, 3955.0], [71.1, 3957.0], [71.2, 3958.0], [71.3, 3962.0], [71.4, 3964.0], [71.5, 3967.0], [71.6, 3968.0], [71.7, 3968.0], [71.8, 3972.0], [71.9, 3975.0], [72.0, 3977.0], [72.1, 3978.0], [72.2, 3984.0], [72.3, 3986.0], [72.4, 3989.0], [72.5, 4001.0], [72.6, 4011.0], [72.7, 4026.0], [72.8, 4029.0], [72.9, 4030.0], [73.0, 4039.0], [73.1, 4041.0], [73.2, 4053.0], [73.3, 4055.0], [73.4, 4060.0], [73.5, 4062.0], [73.6, 4062.0], [73.7, 4076.0], [73.8, 4079.0], [73.9, 4083.0], [74.0, 4085.0], [74.1, 4087.0], [74.2, 4090.0], [74.3, 4093.0], [74.4, 4096.0], [74.5, 4098.0], [74.6, 4098.0], [74.7, 4102.0], [74.8, 4108.0], [74.9, 4111.0], [75.0, 4112.0], [75.1, 4117.0], [75.2, 4118.0], [75.3, 4126.0], [75.4, 4136.0], [75.5, 4137.0], [75.6, 4169.0], [75.7, 4186.0], [75.8, 4209.0], [75.9, 4213.0], [76.0, 4223.0], [76.1, 4227.0], [76.2, 4230.0], [76.3, 4236.0], [76.4, 4247.0], [76.5, 4255.0], [76.6, 4256.0], [76.7, 4260.0], [76.8, 4269.0], [76.9, 4272.0], [77.0, 4276.0], [77.1, 4284.0], [77.2, 4290.0], [77.3, 4297.0], [77.4, 4315.0], [77.5, 4329.0], [77.6, 4338.0], [77.7, 4339.0], [77.8, 4343.0], [77.9, 4349.0], [78.0, 4352.0], [78.1, 4362.0], [78.2, 4378.0], [78.3, 4398.0], [78.4, 4414.0], [78.5, 4418.0], [78.6, 4428.0], [78.7, 4431.0], [78.8, 4439.0], [78.9, 4444.0], [79.0, 4447.0], [79.1, 4454.0], [79.2, 4456.0], [79.3, 4469.0], [79.4, 4470.0], [79.5, 4473.0], [79.6, 4477.0], [79.7, 4488.0], [79.8, 4489.0], [79.9, 4492.0], [80.0, 4505.0], [80.1, 4505.0], [80.2, 4514.0], [80.3, 4523.0], [80.4, 4530.0], [80.5, 4539.0], [80.6, 4541.0], [80.7, 4557.0], [80.8, 4575.0], [80.9, 4581.0], [81.0, 4582.0], [81.1, 4587.0], [81.2, 4592.0], [81.3, 4599.0], [81.4, 4603.0], [81.5, 4605.0], [81.6, 4607.0], [81.7, 4607.0], [81.8, 4611.0], [81.9, 4623.0], [82.0, 4626.0], [82.1, 4627.0], [82.2, 4636.0], [82.3, 4639.0], [82.4, 4642.0], [82.5, 4644.0], [82.6, 4649.0], [82.7, 4660.0], [82.8, 4670.0], [82.9, 4672.0], [83.0, 4675.0], [83.1, 4677.0], [83.2, 4679.0], [83.3, 4679.0], [83.4, 4681.0], [83.5, 4684.0], [83.6, 4687.0], [83.7, 4694.0], [83.8, 4700.0], [83.9, 4702.0], [84.0, 4705.0], [84.1, 4710.0], [84.2, 4711.0], [84.3, 4712.0], [84.4, 4716.0], [84.5, 4717.0], [84.6, 4722.0], [84.7, 4734.0], [84.8, 4738.0], [84.9, 4738.0], [85.0, 4741.0], [85.1, 4743.0], [85.2, 4750.0], [85.3, 4753.0], [85.4, 4755.0], [85.5, 4764.0], [85.6, 4770.0], [85.7, 4782.0], [85.8, 4787.0], [85.9, 4796.0], [86.0, 4797.0], [86.1, 4798.0], [86.2, 4801.0], [86.3, 4811.0], [86.4, 4815.0], [86.5, 4816.0], [86.6, 4821.0], [86.7, 4823.0], [86.8, 4833.0], [86.9, 4833.0], [87.0, 4841.0], [87.1, 4843.0], [87.2, 4846.0], [87.3, 4849.0], [87.4, 4852.0], [87.5, 4855.0], [87.6, 4860.0], [87.7, 4864.0], [87.8, 4868.0], [87.9, 4871.0], [88.0, 4876.0], [88.1, 4876.0], [88.2, 4879.0], [88.3, 4888.0], [88.4, 4896.0], [88.5, 4898.0], [88.6, 4899.0], [88.7, 4905.0], [88.8, 4905.0], [88.9, 4906.0], [89.0, 4909.0], [89.1, 4910.0], [89.2, 4912.0], [89.3, 4913.0], [89.4, 4917.0], [89.5, 4918.0], [89.6, 4919.0], [89.7, 4921.0], [89.8, 4924.0], [89.9, 4926.0], [90.0, 4929.0], [90.1, 4930.0], [90.2, 4931.0], [90.3, 4937.0], [90.4, 4939.0], [90.5, 4939.0], [90.6, 4940.0], [90.7, 4944.0], [90.8, 4950.0], [90.9, 4953.0], [91.0, 4957.0], [91.1, 4958.0], [91.2, 4962.0], [91.3, 4964.0], [91.4, 4968.0], [91.5, 4971.0], [91.6, 4975.0], [91.7, 4978.0], [91.8, 4978.0], [91.9, 4984.0], [92.0, 4988.0], [92.1, 4989.0], [92.2, 4992.0], [92.3, 4997.0], [92.4, 5002.0], [92.5, 5007.0], [92.6, 5010.0], [92.7, 5011.0], [92.8, 5016.0], [92.9, 5016.0], [93.0, 5022.0], [93.1, 5026.0], [93.2, 5037.0], [93.3, 5046.0], [93.4, 5049.0], [93.5, 5049.0], [93.6, 5066.0], [93.7, 5068.0], [93.8, 5076.0], [93.9, 5082.0], [94.0, 5083.0], [94.1, 5092.0], [94.2, 5094.0], [94.3, 5098.0], [94.4, 5120.0], [94.5, 5121.0], [94.6, 5127.0], [94.7, 5133.0], [94.8, 5134.0], [94.9, 5135.0], [95.0, 5140.0], [95.1, 5155.0], [95.2, 5163.0], [95.3, 5170.0], [95.4, 5185.0], [95.5, 5186.0], [95.6, 5225.0], [95.7, 5239.0], [95.8, 5250.0], [95.9, 5265.0], [96.0, 5275.0], [96.1, 5278.0], [96.2, 5303.0], [96.3, 5307.0], [96.4, 5328.0], [96.5, 5369.0], [96.6, 5388.0], [96.7, 5402.0], [96.8, 5414.0], [96.9, 5440.0], [97.0, 5453.0], [97.1, 5467.0], [97.2, 5476.0], [97.3, 5500.0], [97.4, 5553.0], [97.5, 5568.0], [97.6, 5578.0], [97.7, 5585.0], [97.8, 5602.0], [97.9, 5605.0], [98.0, 5618.0], [98.1, 5639.0], [98.2, 5655.0], [98.3, 5668.0], [98.4, 5677.0], [98.5, 5687.0], [98.6, 5714.0], [98.7, 5725.0], [98.8, 5732.0], [98.9, 5741.0], [99.0, 5771.0], [99.1, 5776.0], [99.2, 5780.0], [99.3, 5782.0], [99.4, 5807.0], [99.5, 5815.0], [99.6, 5836.0], [99.7, 5845.0], [99.8, 5852.0], [99.9, 5894.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 544.0, "series": [{"data": [[0.0, 544.0], [600.0, 17.0], [700.0, 3.0], [800.0, 16.0], [900.0, 21.0], [1000.0, 23.0], [1100.0, 18.0], [1200.0, 14.0], [1300.0, 15.0], [1400.0, 22.0], [1500.0, 6.0], [1600.0, 7.0], [1700.0, 22.0], [1800.0, 39.0], [1900.0, 26.0], [2000.0, 32.0], [2100.0, 21.0], [2200.0, 30.0], [2300.0, 29.0], [2400.0, 26.0], [2500.0, 18.0], [2600.0, 24.0], [2700.0, 14.0], [2800.0, 14.0], [2900.0, 11.0], [3000.0, 13.0], [3100.0, 19.0], [3200.0, 15.0], [3300.0, 28.0], [3400.0, 22.0], [3500.0, 17.0], [3600.0, 47.0], [3700.0, 37.0], [3800.0, 49.0], [3900.0, 61.0], [4000.0, 41.0], [4100.0, 21.0], [4200.0, 30.0], [4300.0, 19.0], [4600.0, 46.0], [4500.0, 25.0], [4400.0, 31.0], [4700.0, 44.0], [4800.0, 47.0], [4900.0, 70.0], [5000.0, 37.0], [5100.0, 22.0], [5200.0, 12.0], [5300.0, 9.0], [5400.0, 12.0], [5500.0, 9.0], [5600.0, 15.0], [5700.0, 15.0], [5800.0, 11.0], [5900.0, 1.0], [100.0, 7.0], [200.0, 5.0], [300.0, 1.0], [400.0, 16.0], [500.0, 9.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 156.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1144.0, "series": [{"data": [[0.0, 575.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 156.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1144.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 930.4671999999999, "minX": 1.7555946E12, "maxY": 930.4671999999999, "series": [{"data": [[1.7555946E12, 930.4671999999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555946E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.0, "minX": 2.0, "maxY": 5859.0, "series": [{"data": [[2.0, 1379.0], [3.0, 1331.0], [4.0, 1332.0], [6.0, 1227.0], [7.0, 1329.0], [8.0, 1107.0], [9.0, 1421.0], [10.0, 1162.0], [11.0, 1161.0], [13.0, 5774.0], [15.0, 5693.0], [16.0, 4723.333333333333], [18.0, 991.0], [19.0, 5140.0], [20.0, 1022.0], [21.0, 1137.0], [22.0, 965.0], [23.0, 2552.0], [24.0, 5135.0], [25.0, 5481.0], [26.0, 5449.0], [28.0, 3044.5], [29.0, 5133.0], [30.0, 960.0], [33.0, 3529.0], [35.0, 897.5], [37.0, 880.0], [36.0, 5311.0], [39.0, 5186.0], [38.0, 831.0], [41.0, 993.0], [43.0, 5818.666666666667], [45.0, 823.0], [44.0, 2470.0], [49.0, 690.0], [51.0, 2919.0], [50.0, 2777.0], [53.0, 821.0], [52.0, 588.0], [55.0, 819.0], [54.0, 4990.0], [57.0, 688.0], [56.0, 656.0], [59.0, 5036.0], [61.0, 645.3333333333334], [63.0, 3564.333333333333], [67.0, 5135.0], [66.0, 5046.0], [65.0, 5307.0], [69.0, 415.0], [68.0, 4961.0], [75.0, 5082.0], [74.0, 4993.0], [72.0, 5014.333333333333], [79.0, 5225.0], [78.0, 616.0], [77.0, 496.0], [76.0, 949.0], [81.0, 495.0], [80.0, 5026.0], [87.0, 4925.0], [86.0, 5041.0], [85.0, 5859.0], [84.0, 3457.3333333333335], [91.0, 2706.0], [89.0, 5098.0], [88.0, 494.0], [95.0, 515.0], [94.0, 2718.5], [92.0, 492.0], [99.0, 4906.0], [98.0, 5852.0], [97.0, 5037.5], [103.0, 637.0], [102.0, 5055.5], [100.0, 5849.0], [106.0, 449.0], [105.0, 633.0], [104.0, 554.0], [110.0, 5328.0], [109.0, 5677.0], [108.0, 5408.0], [115.0, 5265.0], [114.0, 844.0], [113.0, 5098.0], [112.0, 5004.0], [119.0, 625.5], [117.0, 661.0], [116.0, 852.0], [123.0, 2718.5], [121.0, 5127.0], [120.0, 5440.0], [127.0, 501.0], [126.0, 3481.0], [135.0, 5257.0], [134.0, 5083.0], [133.0, 5155.0], [131.0, 5010.0], [130.0, 480.0], [129.0, 5845.0], [128.0, 497.0], [142.0, 4942.0], [141.0, 5732.0], [139.0, 3719.666666666667], [137.0, 4782.0], [136.0, 5082.0], [146.0, 5171.25], [159.0, 5771.0], [158.0, 4675.0], [157.0, 5283.0], [155.0, 5092.0], [154.0, 5248.0], [153.0, 5120.0], [152.0, 5520.333333333334], [164.0, 5764.0], [163.0, 5106.5], [161.0, 5170.0], [175.0, 5078.0], [174.0, 5303.0], [173.0, 4978.0], [171.0, 5076.0], [169.0, 4477.0], [168.0, 4992.0], [183.0, 5083.0], [182.0, 5714.0], [181.0, 4922.0], [179.0, 5155.0], [177.0, 5094.0], [176.0, 5741.0], [190.0, 5280.5], [188.0, 5358.0], [186.0, 5602.0], [185.0, 4965.0], [184.0, 5784.0], [199.0, 4905.0], [195.0, 4983.0], [193.0, 4956.5], [192.0, 4930.0], [206.0, 4825.5], [204.0, 4770.0], [203.0, 4911.0], [202.0, 4842.0], [201.0, 5207.4], [215.0, 4978.0], [214.0, 5140.0], [212.0, 5275.5], [210.0, 5455.0], [209.0, 4896.0], [208.0, 5309.0], [223.0, 4852.0], [222.0, 4958.5], [220.0, 5004.0], [218.0, 5725.0], [217.0, 5016.0], [216.0, 5234.0], [231.0, 4888.0], [230.0, 5578.0], [229.0, 4821.0], [228.0, 4904.0], [227.0, 5008.0], [226.0, 4845.0], [225.0, 5719.0], [224.0, 4954.0], [239.0, 4868.0], [238.0, 4986.0], [236.0, 5025.5], [234.0, 4873.0], [233.0, 4823.0], [232.0, 4898.0], [247.0, 5629.0], [246.0, 5453.0], [245.0, 4984.0], [244.0, 5561.0], [243.0, 4879.0], [242.0, 5185.0], [241.0, 4992.5], [255.0, 5668.0], [254.0, 4849.0], [250.0, 4924.0], [249.0, 5004.0], [248.0, 4753.0], [270.0, 5569.0], [271.0, 4514.0], [269.0, 4833.0], [268.0, 4908.0], [267.0, 4930.0], [266.0, 4929.0], [265.0, 4841.0], [264.0, 4913.0], [263.0, 5605.0], [257.0, 4858.0], [259.0, 5414.0], [258.0, 4958.0], [262.0, 5115.5], [260.0, 5402.0], [286.0, 4939.0], [287.0, 4931.0], [285.0, 5476.0], [284.0, 4742.5], [282.0, 4970.0], [281.0, 4910.0], [280.0, 4787.0], [279.0, 4930.5], [275.0, 4875.5], [273.0, 4897.0], [272.0, 4865.0], [277.0, 4902.0], [302.0, 57.0], [303.0, 5209.5], [301.0, 5568.0], [290.0, 5146.0], [288.0, 4815.0], [299.0, 4866.0], [297.0, 31.0], [296.0, 4753.0], [295.0, 4927.0], [294.0, 4821.0], [293.0, 5639.0], [292.0, 4756.0], [318.0, 50.0], [319.0, 50.0], [317.0, 50.0], [316.0, 4812.0], [314.0, 4738.0], [313.0, 5500.0], [312.0, 1384.3333333333335], [309.0, 4810.0], [307.0, 5369.0], [306.0, 5263.5], [305.0, 4785.0], [308.0, 4797.0], [323.0, 46.0], [334.0, 30.0], [333.0, 1846.6666666666665], [330.0, 4797.0], [329.0, 25.0], [328.0, 38.0], [326.0, 4604.0], [325.0, 4719.0], [324.0, 47.0], [322.0, 4428.0], [321.0, 4682.0], [320.0, 54.0], [350.0, 41.0], [351.0, 40.0], [349.0, 4821.0], [348.0, 5402.0], [347.0, 30.0], [346.0, 5361.0], [345.0, 63.0], [344.0, 32.0], [343.0, 4670.0], [338.0, 33.0], [337.0, 35.0], [342.0, 33.0], [341.0, 5409.0], [340.0, 30.0], [364.0, 30.0], [366.0, 4660.0], [367.0, 29.0], [365.0, 4505.0], [362.0, 37.0], [361.0, 34.0], [359.0, 4638.0], [353.0, 37.0], [352.0, 4695.0], [355.0, 44.0], [354.0, 33.0], [358.0, 27.0], [357.0, 2388.5], [382.0, 2714.0], [383.0, 50.0], [380.0, 52.0], [371.0, 58.0], [370.0, 4672.0], [369.0, 4645.0], [368.0, 60.0], [379.0, 53.0], [378.0, 52.0], [376.0, 55.0], [375.0, 54.0], [374.0, 56.0], [373.0, 4692.0], [398.0, 4589.0], [399.0, 4716.0], [397.0, 4678.0], [396.0, 4611.5], [394.0, 5275.0], [393.0, 40.0], [392.0, 45.0], [391.0, 44.0], [384.0, 48.0], [387.0, 47.5], [385.0, 48.0], [390.0, 45.0], [389.0, 47.0], [388.0, 48.0], [415.0, 3731.8], [410.0, 4575.0], [409.0, 4677.0], [408.0, 4679.0], [407.0, 4288.0], [400.0, 69.0], [406.0, 4690.0], [405.0, 4694.0], [404.0, 4565.0], [402.0, 4530.0], [401.0, 4675.0], [430.0, 4418.0], [431.0, 4378.0], [429.0, 29.0], [428.0, 34.0], [427.0, 33.5], [426.0, 41.0], [424.0, 4644.0], [423.0, 3049.333333333333], [419.0, 4676.0], [418.0, 38.0], [417.0, 4680.0], [416.0, 28.0], [420.0, 4586.0], [446.0, 5303.0], [447.0, 4649.0], [445.0, 4476.0], [444.0, 4492.0], [443.0, 5269.0], [442.0, 4603.0], [441.0, 2333.5], [439.0, 54.0], [433.0, 4531.0], [432.0, 4626.0], [435.0, 4495.0], [434.0, 5185.0], [438.0, 27.0], [437.0, 4488.0], [436.0, 4581.0], [462.0, 32.0], [463.0, 43.0], [461.0, 32.0], [460.0, 34.0], [459.0, 36.0], [458.0, 2246.0], [457.0, 39.0], [456.0, 38.0], [453.0, 40.0], [451.0, 44.0], [450.0, 47.5], [449.0, 4711.0], [452.0, 41.0], [476.0, 4909.5], [478.0, 4539.0], [479.0, 4227.0], [477.0, 4456.0], [474.0, 30.5], [472.0, 4540.0], [471.0, 5022.0], [465.0, 4174.0], [464.0, 4469.0], [467.0, 37.0], [466.0, 4715.0], [470.0, 4710.0], [469.0, 4470.0], [468.0, 33.0], [494.0, 4492.0], [495.0, 37.0], [493.0, 4541.0], [492.0, 4473.0], [491.0, 25.0], [490.0, 26.0], [489.0, 2233.0], [487.0, 43.0], [481.0, 4607.0], [480.0, 4369.0], [483.0, 4444.0], [482.0, 5250.0], [486.0, 4519.0], [485.0, 4350.0], [484.0, 4442.0], [508.0, 28.0], [510.0, 4269.0], [511.0, 33.0], [509.0, 4811.5], [507.0, 2259.5], [504.0, 33.0], [503.0, 4362.0], [496.0, 31.0], [498.0, 30.0], [497.0, 33.0], [502.0, 4449.5], [500.0, 4506.0], [537.0, 34.0], [542.0, 36.0], [543.0, 34.0], [529.0, 37.0], [528.0, 3191.0], [531.0, 4393.0], [530.0, 4236.0], [533.0, 30.0], [532.0, 4423.0], [541.0, 39.0], [540.0, 2218.5], [538.0, 4345.0], [536.0, 5011.0], [519.0, 3244.0], [518.0, 5114.5], [516.0, 4276.0], [515.0, 4242.0], [514.0, 33.0], [513.0, 3260.0], [512.0, 42.0], [527.0, 33.0], [526.0, 34.0], [525.0, 5134.0], [524.0, 5051.0], [523.0, 3236.0], [522.0, 27.0], [521.0, 30.0], [520.0, 3239.0], [535.0, 40.0], [534.0, 4414.0], [573.0, 4738.0], [563.0, 4712.0], [575.0, 4538.5], [560.0, 2795.6666666666665], [562.0, 4596.0], [561.0, 4454.0], [571.0, 4921.0], [570.0, 4522.5], [568.0, 58.0], [551.0, 4213.0], [550.0, 2144.5], [548.0, 4315.0], [547.0, 4230.0], [546.0, 4336.0], [545.0, 4438.0], [544.0, 30.0], [557.0, 4121.0], [556.0, 30.0], [555.0, 4439.0], [554.0, 4738.0], [553.0, 4114.0], [552.0, 37.0], [567.0, 4070.0], [565.0, 4833.0], [564.0, 4341.0], [601.0, 284.0], [606.0, 4065.0], [607.0, 4137.0], [592.0, 4871.0], [594.0, 39.0], [593.0, 4093.0], [604.0, 43.0], [603.0, 4349.0], [602.0, 4636.0], [600.0, 2358.0], [582.0, 3923.0], [581.0, 46.0], [579.0, 4816.0], [577.0, 2195.5], [576.0, 4723.0], [591.0, 4909.0], [590.0, 4851.666666666667], [587.0, 48.0], [586.0, 50.0], [585.0, 4951.0], [584.0, 4937.5], [598.0, 32.0], [597.0, 3045.3333333333335], [632.0, 36.0], [637.0, 4592.0], [639.0, 65.0], [626.0, 32.0], [625.0, 2330.0], [636.0, 61.0], [634.0, 4255.0], [633.0, 79.0], [623.0, 4611.0], [610.0, 38.0], [608.0, 4704.0], [612.0, 4272.0], [611.0, 4656.5], [615.0, 34.0], [614.0, 2338.0], [622.0, 4256.0], [621.0, 4259.0], [620.0, 4528.0], [618.0, 4611.0], [617.0, 33.0], [616.0, 34.0], [631.0, 37.0], [630.0, 4256.0], [629.0, 4899.0], [628.0, 2323.0], [665.0, 867.5], [669.0, 75.0], [670.0, 74.0], [657.0, 4223.0], [656.0, 4284.0], [668.0, 4469.0], [667.0, 4742.0], [666.0, 61.0], [655.0, 65.0], [640.0, 46.0], [643.0, 43.0], [641.0, 69.0], [647.0, 57.0], [644.0, 4249.0], [654.0, 1922.0], [653.0, 2058.0], [652.0, 44.0], [651.0, 56.0], [650.0, 4247.0], [649.0, 58.0], [648.0, 52.333333333333336], [663.0, 53.0], [661.0, 31.0], [660.0, 2132.5], [658.0, 4599.0], [696.0, 81.0], [702.0, 4717.0], [703.0, 32.0], [689.0, 4796.0], [688.0, 2073.0], [691.0, 1365.0], [690.0, 51.0], [701.0, 2021.3333333333333], [698.0, 3849.0], [697.0, 42.0], [686.0, 46.0], [673.0, 74.0], [672.0, 2465.5], [675.0, 4710.0], [674.0, 71.0], [677.0, 1616.0], [676.0, 75.0], [679.0, 4755.0], [678.0, 2078.0], [685.0, 1242.0], [684.0, 1733.0], [683.0, 4582.0], [682.0, 4202.0], [681.0, 1891.0], [680.0, 2024.0], [695.0, 4636.0], [694.0, 3854.0], [693.0, 1094.0], [692.0, 4743.0], [731.0, 947.0], [734.0, 920.5], [730.0, 32.0], [729.0, 40.0], [728.0, 481.0], [711.0, 1118.5], [709.0, 4587.0], [708.0, 4741.0], [707.0, 542.5], [706.0, 4722.0], [704.0, 29.0], [719.0, 32.0], [718.0, 34.0], [717.0, 33.0], [716.0, 36.0], [715.0, 1025.0], [714.0, 4700.0], [713.0, 1226.0], [712.0, 958.0], [726.0, 37.0], [725.0, 2865.0], [723.0, 2339.0], [722.0, 4679.0], [762.0, 4557.0], [766.0, 481.0], [767.0, 48.0], [753.0, 37.0], [752.0, 34.0], [755.0, 51.0], [754.0, 33.0], [757.0, 4685.0], [756.0, 27.0], [765.0, 54.0], [764.0, 683.0], [763.0, 4353.0], [761.0, 4456.0], [742.0, 38.0], [741.0, 64.0], [740.0, 4607.0], [739.0, 4581.0], [738.0, 38.0], [737.0, 704.0], [736.0, 1587.0], [751.0, 855.0], [750.0, 692.0], [749.0, 980.0], [748.0, 31.0], [747.0, 376.5], [746.0, 60.0], [745.0, 60.0], [744.0, 61.0], [759.0, 31.0], [758.0, 4338.0], [793.0, 31.0], [798.0, 2371.0], [799.0, 385.0], [785.0, 658.0], [784.0, 37.0], [788.0, 523.0], [787.0, 285.5], [796.0, 441.0], [795.0, 4290.0], [794.0, 31.0], [792.0, 4136.0], [774.0, 4681.0], [773.0, 4341.0], [771.0, 893.0], [770.0, 36.0], [769.0, 38.0], [783.0, 4297.0], [782.0, 44.0], [781.0, 43.0], [780.0, 411.0], [779.0, 4329.0], [778.0, 260.0], [777.0, 4317.0], [776.0, 2358.0], [791.0, 458.0], [790.0, 2161.0], [824.0, 1626.4], [829.0, 1927.0], [830.0, 4134.0], [827.0, 36.0], [826.0, 99.0], [825.0, 116.0], [815.0, 4112.0], [801.0, 2252.5], [805.0, 59.333333333333336], [802.0, 234.0], [807.0, 4273.0], [806.0, 59.0], [814.0, 4229.0], [813.0, 55.0], [812.0, 1324.6666666666667], [809.0, 57.0], [808.0, 57.0], [819.0, 1951.5], [817.0, 140.0], [816.0, 4209.0], [856.0, 4083.0], [860.0, 4084.0], [863.0, 4090.0], [848.0, 4098.0], [851.0, 2060.0], [849.0, 4101.0], [862.0, 4092.0], [861.0, 29.0], [859.0, 4061.0], [858.0, 4098.0], [857.0, 4096.0], [847.0, 31.0], [832.0, 38.5], [834.0, 30.0], [833.0, 34.0], [837.0, 34.0], [836.0, 4114.0], [839.0, 4260.0], [838.0, 4137.0], [846.0, 31.0], [845.0, 44.0], [844.0, 37.0], [843.0, 4126.0], [842.0, 2068.0], [840.0, 28.0], [855.0, 1385.3333333333333], [852.0, 4102.0], [888.0, 44.0], [892.0, 4039.0], [895.0, 3928.0], [882.0, 183.0], [881.0, 4044.6666666666665], [885.0, 4054.0], [883.0, 55.0], [894.0, 4026.0], [893.0, 4038.0], [891.0, 49.0], [890.0, 52.0], [889.0, 3946.0], [878.0, 34.0], [864.0, 4076.0], [868.0, 2052.0], [866.0, 2057.0], [871.0, 2032.5], [869.0, 4085.0], [876.0, 34.0], [875.0, 4041.0], [874.0, 31.0], [873.0, 4186.0], [872.0, 4062.0], [887.0, 3962.0], [886.0, 4050.0], [921.0, 3979.5], [925.0, 31.0], [927.0, 3970.0], [913.0, 30.0], [912.0, 38.0], [915.0, 37.0], [914.0, 3987.0], [924.0, 39.0], [923.0, 3978.0], [922.0, 33.0], [911.0, 3992.5], [896.0, 48.0], [898.0, 28.0], [897.0, 30.0], [900.0, 4001.0], [899.0, 29.0], [903.0, 2015.5], [901.0, 3903.0], [909.0, 2013.0], [907.0, 28.0], [906.0, 3989.0], [905.0, 28.0], [904.0, 4011.0], [919.0, 3977.0], [918.0, 35.0], [917.0, 34.0], [916.0, 3986.0], [952.0, 37.0], [957.0, 3950.0], [959.0, 31.0], [946.0, 1989.5], [944.0, 35.0], [956.0, 33.0], [955.0, 1984.0], [953.0, 30.0], [943.0, 37.0], [928.0, 3968.0], [931.0, 27.0], [929.0, 3967.0], [933.0, 34.0], [932.0, 3968.0], [935.0, 3972.0], [934.0, 34.0], [942.0, 1993.0], [940.0, 3966.0], [939.0, 42.0], [938.0, 3956.0], [937.0, 3958.0], [936.0, 3955.0], [951.0, 3942.0], [950.0, 1988.0], [949.0, 32.0], [947.0, 3954.0], [985.0, 3717.0], [990.0, 1959.5], [991.0, 3711.0], [977.0, 3917.0], [976.0, 3918.0], [979.0, 60.0], [978.0, 64.0], [981.0, 47.0], [980.0, 3908.0], [988.0, 41.0], [987.0, 3715.0], [986.0, 3888.0], [984.0, 3876.0], [967.0, 40.0], [965.0, 1986.0], [963.0, 38.0], [962.0, 29.0], [961.0, 3929.0], [960.0, 43.0], [975.0, 3930.0], [974.0, 28.0], [973.0, 32.0], [972.0, 34.0], [971.0, 3939.0], [970.0, 1987.5], [983.0, 3897.0], [982.0, 3891.0], [1017.0, 3657.0], [1022.0, 3825.0], [1023.0, 36.0], [1009.0, 33.0], [1008.0, 3674.5], [1011.0, 57.0], [1010.0, 34.0], [1013.0, 3842.0], [1012.0, 3748.0], [1021.0, 3738.0], [1019.0, 3831.0], [1018.0, 43.0], [1016.0, 3837.0], [999.0, 3696.0], [998.0, 1874.5], [996.0, 3863.0], [995.0, 3885.0], [994.0, 3868.0], [993.0, 33.0], [992.0, 3710.0], [1006.0, 3678.5], [1004.0, 3682.0], [1003.0, 28.0], [1002.0, 41.0], [1001.0, 33.5], [1015.0, 47.0], [1014.0, 50.0], [1074.0, 3890.0], [1062.0, 4087.0], [1058.0, 3746.0], [1060.0, 2566.0], [1066.0, 29.0], [1070.0, 28.0], [1086.0, 1262.166666666667], [1082.0, 3701.0], [1078.0, 47.5], [1076.0, 1666.5], [1072.0, 3722.0], [1038.0, 3773.0], [1036.0, 3614.0], [1032.0, 3803.0], [1030.0, 3373.0], [1028.0, 3816.0], [1026.0, 3379.0], [1024.0, 3820.0], [1054.0, 3748.0], [1052.0, 28.0], [1050.0, 27.0], [1048.0, 4031.0], [1046.0, 3332.0], [1044.0, 25.0], [1042.0, 1908.0], [1040.0, 34.0], [1148.0, 62.0], [1142.0, 3889.0], [1120.0, 3860.0], [1124.0, 73.0], [1122.0, 3808.0], [1126.0, 71.0], [1128.0, 3957.0], [1130.0, 73.0], [1132.0, 3939.0], [1150.0, 3751.0], [1146.0, 3823.0], [1140.0, 3926.0], [1138.0, 3891.0], [1136.0, 2009.5], [1100.0, 3893.0], [1098.0, 28.0], [1096.0, 37.0], [1094.0, 117.0], [1092.0, 3676.0], [1090.0, 41.0], [1116.0, 77.0], [1114.0, 3975.0], [1110.0, 67.0], [1108.0, 78.0], [1212.0, 3609.5], [1186.0, 1868.0], [1184.0, 1956.5], [1188.0, 3798.0], [1190.0, 50.0], [1194.0, 2499.0], [1196.0, 35.0], [1198.0, 3630.0], [1214.0, 29.0], [1210.0, 1903.5], [1208.0, 1837.5], [1206.0, 35.0], [1204.0, 3650.0], [1202.0, 3738.0], [1200.0, 3791.0], [1166.0, 3710.0], [1162.0, 3856.0], [1160.0, 3899.5], [1158.0, 57.0], [1156.0, 3895.0], [1154.0, 3895.0], [1152.0, 64.0], [1182.0, 52.0], [1180.0, 3845.0], [1178.0, 1876.0], [1174.0, 3772.0], [1168.0, 3729.5], [1272.0, 26.0], [1270.0, 3592.0], [1248.0, 47.0], [1250.0, 36.0], [1254.0, 3543.0], [1256.0, 1795.5], [1262.0, 37.0], [1278.0, 1761.0], [1276.0, 43.0], [1274.0, 1836.0], [1268.0, 35.0], [1264.0, 33.0], [1220.0, 3662.0], [1222.0, 3602.0], [1224.0, 3732.0], [1228.0, 29.0], [1226.0, 1882.5], [1246.0, 37.0], [1244.0, 27.0], [1242.0, 1861.5], [1240.0, 3564.0], [1238.0, 26.0], [1236.0, 3655.0], [1234.0, 3658.0], [1232.0, 27.0], [1336.0, 27.0], [1320.0, 2234.0], [1338.0, 39.0], [1312.0, 1735.5], [1314.0, 3423.0], [1316.0, 1752.0], [1322.0, 3364.0], [1324.0, 31.0], [1326.0, 3343.0], [1334.0, 32.0], [1332.0, 3406.0], [1330.0, 3336.0], [1328.0, 3499.0], [1310.0, 32.0], [1280.0, 3546.0], [1282.0, 33.0], [1284.0, 31.0], [1290.0, 3524.0], [1294.0, 33.0], [1308.0, 3384.0], [1306.0, 1709.0], [1304.0, 1807.0], [1300.0, 55.0], [1298.0, 68.0], [1296.0, 3601.0], [1400.0, 3183.0], [1404.0, 31.0], [1378.0, 1602.0], [1380.0, 2610.0], [1382.0, 40.0], [1384.0, 1717.0], [1386.0, 3142.0], [1390.0, 41.0], [1406.0, 3091.0], [1402.0, 3271.0], [1396.0, 33.0], [1394.0, 3352.0], [1392.0, 3260.0], [1358.0, 3325.0], [1356.0, 3433.0], [1354.0, 36.0], [1352.0, 38.0], [1350.0, 38.0], [1346.0, 28.0], [1344.0, 31.5], [1374.0, 25.0], [1372.0, 3300.0], [1370.0, 3254.0], [1368.0, 3203.0], [1364.0, 3348.0], [1466.0, 2538.0], [1462.0, 3111.0], [1440.0, 29.0], [1442.0, 32.0], [1446.0, 1304.0], [1444.0, 1316.5], [1448.0, 2576.0], [1450.0, 3124.0], [1452.0, 33.0], [1468.0, 34.0], [1460.0, 33.0], [1456.0, 3127.0], [1422.0, 27.0], [1412.0, 3081.0], [1410.0, 2694.0], [1408.0, 29.0], [1438.0, 3148.0], [1436.0, 27.0], [1434.0, 3203.0], [1432.0, 28.0], [1430.0, 27.0], [1428.0, 3007.0], [1426.0, 1352.5], [1424.0, 3278.0], [1526.0, 36.0], [1510.0, 1236.5], [1530.0, 2339.0], [1504.0, 2940.0], [1508.0, 36.0], [1514.0, 38.0], [1516.0, 2680.0], [1518.0, 2962.0], [1532.0, 2944.5], [1528.0, 2348.0], [1522.0, 2597.5], [1520.0, 2987.0], [1474.0, 39.0], [1476.0, 35.0], [1478.0, 2775.0], [1480.0, 3119.0], [1482.0, 2495.0], [1484.0, 2492.0], [1502.0, 3003.0], [1498.0, 2447.0], [1496.0, 36.0], [1494.0, 1251.5], [1492.0, 2961.0], [1490.0, 3080.0], [1488.0, 2863.0], [1596.0, 1953.0], [1598.0, 563.5], [1568.0, 30.0], [1570.0, 2181.0], [1572.0, 38.0], [1574.0, 2166.0], [1576.0, 2702.0], [1578.0, 2150.0], [1580.0, 2143.0], [1582.0, 34.0], [1594.0, 1709.0], [1592.0, 2691.0], [1590.0, 2114.0], [1588.0, 37.0], [1584.0, 2746.0], [1536.0, 2849.0], [1538.0, 2322.0], [1544.0, 1734.0], [1548.0, 1197.5], [1546.0, 2305.0], [1550.0, 1157.0], [1566.0, 2225.0], [1564.0, 72.0], [1562.0, 2724.0], [1560.0, 2782.0], [1558.0, 2264.0], [1556.0, 2269.0], [1554.0, 2670.0], [1552.0, 2675.0], [1614.0, 2404.5], [1654.0, 1887.5], [1604.0, 1749.1666666666665], [1610.0, 2534.0], [1608.0, 2425.0], [1612.0, 1737.0], [1648.0, 2325.0], [1632.0, 1784.5], [1660.0, 2263.0], [1658.0, 2487.0], [1634.0, 1033.0], [1636.0, 1639.6666666666667], [1638.0, 2343.5], [1606.0, 992.0], [1602.0, 1770.5], [1600.0, 1282.0], [1630.0, 1444.6], [1626.0, 2139.3333333333335], [1620.0, 2017.0], [1618.0, 2078.0], [1616.0, 2399.0], [1640.0, 951.0], [1642.0, 1918.0], [1644.0, 2014.0], [1718.0, 1387.5], [1722.0, 1677.5], [1686.0, 1790.3333333333333], [1684.0, 1851.0], [1682.0, 2419.5], [1680.0, 1884.0], [1724.0, 1755.5], [1696.0, 1763.0], [1726.0, 1429.0], [1710.0, 2326.0], [1708.0, 2374.0], [1706.0, 2274.0], [1698.0, 2108.0], [1720.0, 1444.5], [1716.0, 1419.0], [1714.0, 1732.3333333333333], [1712.0, 1581.0], [1666.0, 2192.0], [1664.0, 1764.0], [1668.0, 2065.0], [1672.0, 1877.0], [1674.0, 2266.0], [1676.0, 1928.0], [1678.0, 1856.0], [1688.0, 1822.0], [1780.0, 1635.6666666666667], [1788.0, 1848.5], [1768.0, 1883.8], [1770.0, 1568.0], [1772.0, 1194.0], [1774.0, 1854.0], [1790.0, 2065.0], [1786.0, 1663.0], [1784.0, 1820.0], [1782.0, 1888.0], [1776.0, 1846.0], [1740.0, 1997.0], [1734.0, 1441.0], [1730.0, 1441.0], [1728.0, 2203.0], [1758.0, 1651.0], [1756.0, 2169.0], [1752.0, 1949.0], [1750.0, 1682.0], [1748.0, 2056.0], [1746.0, 1692.0], [1744.0, 1473.6666666666667], [1794.0, 1105.0], [1039.0, 3605.0], [1073.0, 3704.0], [1079.0, 3962.0], [1087.0, 25.0], [1057.0, 28.0], [1061.0, 3907.0], [1063.0, 4085.0], [1065.0, 2030.0], [1069.0, 3731.0], [1067.0, 30.0], [1071.0, 1877.5], [1037.0, 29.0], [1035.0, 1915.0], [1033.0, 30.0], [1031.0, 3805.0], [1029.0, 36.0], [1025.0, 33.0], [1055.0, 4079.0], [1053.0, 3923.0], [1051.0, 27.0], [1049.0, 34.0], [1045.0, 3593.0], [1043.0, 3599.0], [1145.0, 3907.5], [1127.0, 71.0], [1147.0, 3917.0], [1151.0, 3921.0], [1121.0, 3968.0], [1125.0, 73.0], [1129.0, 3960.0], [1131.0, 3798.0], [1135.0, 58.0], [1133.0, 66.0], [1143.0, 64.0], [1139.0, 62.0], [1137.0, 3927.0], [1103.0, 3874.0], [1101.0, 151.0], [1099.0, 3910.0], [1097.0, 31.0], [1095.0, 39.0], [1093.0, 40.0], [1089.0, 1858.0], [1119.0, 1848.0], [1117.0, 3630.0], [1115.0, 69.0], [1113.0, 1854.5], [1111.0, 66.0], [1109.0, 3459.0], [1107.0, 1958.5], [1105.0, 68.5], [1201.0, 3801.0], [1205.0, 3649.0], [1189.0, 55.0], [1215.0, 30.0], [1187.0, 3758.0], [1191.0, 74.0], [1195.0, 45.0], [1199.0, 3712.5], [1213.0, 3620.0], [1203.0, 3790.0], [1167.0, 3865.0], [1165.0, 3833.0], [1163.0, 3900.0], [1161.0, 3853.0], [1157.0, 66.0], [1155.0, 3863.0], [1153.0, 58.0], [1181.0, 3687.0], [1179.0, 3340.0], [1177.0, 3859.0], [1175.0, 3878.0], [1173.0, 1879.0], [1171.0, 3844.0], [1169.0, 36.0], [1271.0, 27.0], [1253.0, 1824.5], [1275.0, 3625.0], [1279.0, 3615.0], [1251.0, 30.0], [1257.0, 40.0], [1261.0, 1775.0], [1259.0, 1840.0], [1263.0, 3650.0], [1267.0, 3659.0], [1265.0, 33.0], [1247.0, 36.0], [1217.0, 1814.5], [1219.0, 1865.0], [1221.0, 3629.0], [1223.0, 3724.0], [1231.0, 29.0], [1229.0, 29.0], [1245.0, 39.0], [1243.0, 3560.0], [1239.0, 3680.0], [1237.0, 29.0], [1235.0, 3631.0], [1233.0, 1832.5], [1339.0, 37.0], [1333.0, 3393.0], [1343.0, 1752.5], [1313.0, 3403.0], [1317.0, 29.0], [1321.0, 29.0], [1323.0, 28.0], [1325.0, 29.0], [1327.0, 3494.0], [1341.0, 35.0], [1335.0, 32.0], [1329.0, 3401.0], [1281.0, 33.0], [1283.0, 27.0], [1285.0, 37.0], [1289.0, 1781.5], [1287.0, 3529.5], [1291.0, 61.0], [1293.0, 30.5], [1309.0, 3382.0], [1307.0, 3447.0], [1299.0, 65.0], [1297.0, 3429.5], [1403.0, 3184.0], [1395.0, 36.0], [1407.0, 3081.0], [1377.0, 3172.0], [1379.0, 25.0], [1381.0, 36.0], [1385.0, 3362.0], [1387.0, 3356.0], [1391.0, 44.0], [1405.0, 30.0], [1401.0, 3321.0], [1399.0, 1665.0], [1397.0, 3177.0], [1393.0, 3135.0], [1359.0, 34.0], [1357.0, 3424.0], [1355.0, 3430.0], [1353.0, 3300.0], [1351.0, 3305.0], [1349.0, 3438.5], [1347.0, 3427.0], [1345.0, 34.0], [1375.0, 3385.0], [1373.0, 30.0], [1371.0, 36.0], [1369.0, 31.0], [1367.0, 1673.0], [1365.0, 3315.0], [1363.0, 1735.0], [1361.0, 3340.0], [1467.0, 2533.0], [1447.0, 3176.0], [1471.0, 3079.0], [1441.0, 3213.0], [1449.0, 2569.0], [1451.0, 2570.0], [1455.0, 1138.0], [1453.0, 33.0], [1469.0, 2523.0], [1465.0, 2378.5], [1463.0, 3160.0], [1461.0, 2850.0], [1459.0, 3118.0], [1457.0, 2225.0], [1423.0, 3263.0], [1421.0, 1379.25], [1417.0, 2679.0], [1415.0, 1357.0], [1413.0, 2684.0], [1411.0, 2694.0], [1439.0, 2416.0], [1437.0, 2416.0], [1435.0, 31.0], [1433.0, 2605.0], [1431.0, 2609.0], [1429.0, 3148.0], [1427.0, 3079.0], [1425.0, 3164.0], [1527.0, 2585.0], [1535.0, 1462.0], [1505.0, 2958.0], [1507.0, 2448.0], [1511.0, 2994.0], [1513.0, 2329.0], [1517.0, 3011.0], [1519.0, 2221.0], [1533.0, 38.0], [1529.0, 38.0], [1525.0, 35.5], [1523.0, 2938.0], [1503.0, 31.0], [1473.0, 2670.0], [1475.0, 2515.0], [1477.0, 2512.0], [1479.0, 2883.0], [1481.0, 2498.0], [1483.0, 38.0], [1487.0, 1450.5], [1485.0, 3040.0], [1501.0, 2638.5], [1499.0, 3066.0], [1497.0, 2459.0], [1495.0, 2456.0], [1491.0, 2471.0], [1489.0, 32.0], [1591.0, 2724.0], [1587.0, 2434.5], [1595.0, 1311.5], [1569.0, 2804.0], [1571.0, 2727.0], [1573.0, 38.0], [1575.0, 2750.0], [1577.0, 2735.0], [1579.0, 30.0], [1581.0, 36.0], [1583.0, 30.0], [1597.0, 441.5], [1593.0, 2646.0], [1589.0, 33.0], [1585.0, 2754.0], [1567.0, 2865.0], [1537.0, 2719.0], [1543.0, 2312.0], [1545.0, 2789.0], [1551.0, 92.0], [1565.0, 72.0], [1563.0, 2871.0], [1561.0, 2257.0], [1559.0, 2885.0], [1557.0, 2667.0], [1555.0, 2891.0], [1553.0, 43.0], [1615.0, 2561.0], [1611.0, 1228.8333333333333], [1609.0, 2682.0], [1607.0, 2486.5], [1651.0, 2161.0], [1649.0, 2004.0], [1663.0, 2078.0], [1661.0, 2258.0], [1655.0, 1097.0], [1657.0, 2131.3333333333335], [1659.0, 1599.0], [1633.0, 1640.6], [1635.0, 1875.5], [1605.0, 1610.0], [1603.0, 867.5], [1601.0, 1872.0], [1631.0, 1747.5], [1629.0, 2059.6666666666665], [1627.0, 2003.0], [1623.0, 2365.5], [1621.0, 2393.0], [1619.0, 2396.0], [1617.0, 2536.0], [1643.0, 2338.0], [1645.0, 1953.5], [1647.0, 2143.0], [1641.0, 1757.0], [1639.0, 1210.0], [1717.0, 1835.6666666666667], [1687.0, 1734.0], [1685.0, 1847.0], [1697.0, 1630.5], [1723.0, 1573.5], [1725.0, 2245.0], [1727.0, 2019.0], [1721.0, 1304.5], [1711.0, 1600.6666666666667], [1709.0, 2257.0], [1707.0, 1733.0], [1705.0, 1993.5], [1703.0, 1669.0], [1701.0, 1909.0], [1719.0, 1939.0], [1715.0, 2047.0], [1713.0, 1786.0], [1695.0, 1990.0], [1669.0, 2239.0], [1671.0, 1912.5], [1673.0, 2257.0], [1675.0, 2406.0], [1677.0, 1921.0], [1693.0, 1917.4], [1739.0, 1844.0], [1781.0, 1272.0], [1769.0, 1469.5], [1771.0, 1198.0], [1773.0, 1189.0], [1775.0, 1835.0], [1765.0, 1993.0], [1763.0, 1923.0], [1777.0, 1903.0], [1741.0, 1994.0], [1737.0, 1700.0], [1735.0, 1440.0], [1733.0, 1570.0], [1731.0, 2144.0], [1729.0, 1734.0], [1759.0, 1361.0], [1755.0, 2087.5], [1753.0, 2235.0], [1751.0, 1951.0], [1749.0, 2008.0], [1745.0, 1688.0], [1797.0, 1729.5], [1795.0, 1899.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}, {"data": [[930.4666666666652, 2404.876266666659]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1797.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15437.5, "minX": 1.7555946E12, "maxY": 22281.25, "series": [{"data": [[1.7555946E12, 22281.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7555946E12, 15437.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555946E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2404.876266666659, "minX": 1.7555946E12, "maxY": 2404.876266666659, "series": [{"data": [[1.7555946E12, 2404.876266666659]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555946E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2404.848533333334, "minX": 1.7555946E12, "maxY": 2404.848533333334, "series": [{"data": [[1.7555946E12, 2404.848533333334]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555946E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2300.440000000003, "minX": 1.7555946E12, "maxY": 2300.440000000003, "series": [{"data": [[1.7555946E12, 2300.440000000003]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555946E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.7555946E12, "maxY": 5902.0, "series": [{"data": [[1.7555946E12, 5902.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7555946E12, 4929.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7555946E12, 5771.72]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7555946E12, 5142.799999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7555946E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7555946E12, 2387.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555946E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1714.5, "minX": 188.0, "maxY": 4910.5, "series": [{"data": [[520.0, 1793.5], [341.0, 2393.0], [362.0, 4910.5], [188.0, 1714.5], [464.0, 3426.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 520.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1714.5, "minX": 188.0, "maxY": 4910.5, "series": [{"data": [[520.0, 1793.5], [341.0, 2393.0], [362.0, 4910.5], [188.0, 1714.5], [464.0, 3426.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 520.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.7555946E12, "maxY": 31.25, "series": [{"data": [[1.7555946E12, 31.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555946E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.7555946E12, "maxY": 31.25, "series": [{"data": [[1.7555946E12, 31.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555946E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.7555946E12, "maxY": 31.25, "series": [{"data": [[1.7555946E12, 31.25]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555946E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.7555946E12, "maxY": 31.25, "series": [{"data": [[1.7555946E12, 31.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555946E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

