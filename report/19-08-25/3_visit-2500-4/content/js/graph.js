/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1381.0, "minX": 0.0, "maxY": 9202.0, "series": [{"data": [[0.0, 1381.0], [0.1, 1383.0], [0.2, 1404.0], [0.3, 1407.0], [0.4, 1475.0], [0.5, 1476.0], [0.6, 1489.0], [0.7, 1538.0], [0.8, 1575.0], [0.9, 1621.0], [1.0, 1658.0], [1.1, 1680.0], [1.2, 1690.0], [1.3, 1721.0], [1.4, 1728.0], [1.5, 1749.0], [1.6, 1755.0], [1.7, 1776.0], [1.8, 1787.0], [1.9, 1811.0], [2.0, 1821.0], [2.1, 1855.0], [2.2, 1859.0], [2.3, 1866.0], [2.4, 1897.0], [2.5, 1917.0], [2.6, 1954.0], [2.7, 1983.0], [2.8, 1985.0], [2.9, 1991.0], [3.0, 1997.0], [3.1, 2007.0], [3.2, 2010.0], [3.3, 2017.0], [3.4, 2053.0], [3.5, 2074.0], [3.6, 2077.0], [3.7, 2093.0], [3.8, 2095.0], [3.9, 2132.0], [4.0, 2175.0], [4.1, 2206.0], [4.2, 2226.0], [4.3, 2246.0], [4.4, 2278.0], [4.5, 2288.0], [4.6, 2303.0], [4.7, 2312.0], [4.8, 2341.0], [4.9, 2354.0], [5.0, 2355.0], [5.1, 2389.0], [5.2, 2394.0], [5.3, 2418.0], [5.4, 2421.0], [5.5, 2438.0], [5.6, 2451.0], [5.7, 2478.0], [5.8, 2504.0], [5.9, 2518.0], [6.0, 2523.0], [6.1, 2545.0], [6.2, 2580.0], [6.3, 2587.0], [6.4, 2592.0], [6.5, 2602.0], [6.6, 2608.0], [6.7, 2622.0], [6.8, 2635.0], [6.9, 2648.0], [7.0, 2667.0], [7.1, 2681.0], [7.2, 2686.0], [7.3, 2701.0], [7.4, 2713.0], [7.5, 2722.0], [7.6, 2728.0], [7.7, 2738.0], [7.8, 2742.0], [7.9, 2753.0], [8.0, 2761.0], [8.1, 2774.0], [8.2, 2783.0], [8.3, 2796.0], [8.4, 2804.0], [8.5, 2814.0], [8.6, 2822.0], [8.7, 2827.0], [8.8, 2845.0], [8.9, 2854.0], [9.0, 2870.0], [9.1, 2876.0], [9.2, 2880.0], [9.3, 2888.0], [9.4, 2892.0], [9.5, 2902.0], [9.6, 2908.0], [9.7, 2923.0], [9.8, 2940.0], [9.9, 2943.0], [10.0, 2958.0], [10.1, 2970.0], [10.2, 2975.0], [10.3, 2976.0], [10.4, 2987.0], [10.5, 2994.0], [10.6, 3004.0], [10.7, 3012.0], [10.8, 3019.0], [10.9, 3027.0], [11.0, 3033.0], [11.1, 3036.0], [11.2, 3040.0], [11.3, 3044.0], [11.4, 3050.0], [11.5, 3054.0], [11.6, 3069.0], [11.7, 3077.0], [11.8, 3079.0], [11.9, 3090.0], [12.0, 3091.0], [12.1, 3095.0], [12.2, 3100.0], [12.3, 3104.0], [12.4, 3106.0], [12.5, 3108.0], [12.6, 3122.0], [12.7, 3129.0], [12.8, 3137.0], [12.9, 3141.0], [13.0, 3150.0], [13.1, 3152.0], [13.2, 3165.0], [13.3, 3172.0], [13.4, 3181.0], [13.5, 3193.0], [13.6, 3195.0], [13.7, 3198.0], [13.8, 3203.0], [13.9, 3208.0], [14.0, 3211.0], [14.1, 3214.0], [14.2, 3223.0], [14.3, 3228.0], [14.4, 3238.0], [14.5, 3239.0], [14.6, 3245.0], [14.7, 3247.0], [14.8, 3255.0], [14.9, 3257.0], [15.0, 3269.0], [15.1, 3274.0], [15.2, 3292.0], [15.3, 3295.0], [15.4, 3296.0], [15.5, 3303.0], [15.6, 3308.0], [15.7, 3310.0], [15.8, 3318.0], [15.9, 3326.0], [16.0, 3335.0], [16.1, 3335.0], [16.2, 3345.0], [16.3, 3355.0], [16.4, 3362.0], [16.5, 3371.0], [16.6, 3375.0], [16.7, 3377.0], [16.8, 3382.0], [16.9, 3403.0], [17.0, 3411.0], [17.1, 3417.0], [17.2, 3418.0], [17.3, 3424.0], [17.4, 3428.0], [17.5, 3431.0], [17.6, 3440.0], [17.7, 3450.0], [17.8, 3460.0], [17.9, 3472.0], [18.0, 3486.0], [18.1, 3501.0], [18.2, 3526.0], [18.3, 3530.0], [18.4, 3534.0], [18.5, 3537.0], [18.6, 3545.0], [18.7, 3558.0], [18.8, 3562.0], [18.9, 3565.0], [19.0, 3573.0], [19.1, 3578.0], [19.2, 3600.0], [19.3, 3602.0], [19.4, 3612.0], [19.5, 3620.0], [19.6, 3631.0], [19.7, 3636.0], [19.8, 3644.0], [19.9, 3654.0], [20.0, 3656.0], [20.1, 3657.0], [20.2, 3659.0], [20.3, 3666.0], [20.4, 3680.0], [20.5, 3682.0], [20.6, 3690.0], [20.7, 3691.0], [20.8, 3698.0], [20.9, 3700.0], [21.0, 3704.0], [21.1, 3711.0], [21.2, 3717.0], [21.3, 3727.0], [21.4, 3733.0], [21.5, 3736.0], [21.6, 3748.0], [21.7, 3750.0], [21.8, 3765.0], [21.9, 3778.0], [22.0, 3792.0], [22.1, 3797.0], [22.2, 3799.0], [22.3, 3808.0], [22.4, 3830.0], [22.5, 3832.0], [22.6, 3839.0], [22.7, 3841.0], [22.8, 3844.0], [22.9, 3846.0], [23.0, 3850.0], [23.1, 3852.0], [23.2, 3858.0], [23.3, 3872.0], [23.4, 3883.0], [23.5, 3887.0], [23.6, 3897.0], [23.7, 3910.0], [23.8, 3924.0], [23.9, 3933.0], [24.0, 3945.0], [24.1, 3951.0], [24.2, 3958.0], [24.3, 3964.0], [24.4, 3974.0], [24.5, 3978.0], [24.6, 3993.0], [24.7, 3996.0], [24.8, 4002.0], [24.9, 4007.0], [25.0, 4012.0], [25.1, 4015.0], [25.2, 4024.0], [25.3, 4029.0], [25.4, 4036.0], [25.5, 4041.0], [25.6, 4043.0], [25.7, 4052.0], [25.8, 4060.0], [25.9, 4062.0], [26.0, 4067.0], [26.1, 4074.0], [26.2, 4076.0], [26.3, 4077.0], [26.4, 4091.0], [26.5, 4104.0], [26.6, 4114.0], [26.7, 4129.0], [26.8, 4138.0], [26.9, 4151.0], [27.0, 4165.0], [27.1, 4168.0], [27.2, 4188.0], [27.3, 4190.0], [27.4, 4198.0], [27.5, 4202.0], [27.6, 4206.0], [27.7, 4209.0], [27.8, 4217.0], [27.9, 4228.0], [28.0, 4235.0], [28.1, 4240.0], [28.2, 4246.0], [28.3, 4249.0], [28.4, 4259.0], [28.5, 4266.0], [28.6, 4279.0], [28.7, 4281.0], [28.8, 4299.0], [28.9, 4308.0], [29.0, 4332.0], [29.1, 4341.0], [29.2, 4349.0], [29.3, 4354.0], [29.4, 4360.0], [29.5, 4365.0], [29.6, 4381.0], [29.7, 4386.0], [29.8, 4388.0], [29.9, 4392.0], [30.0, 4395.0], [30.1, 4414.0], [30.2, 4425.0], [30.3, 4435.0], [30.4, 4444.0], [30.5, 4449.0], [30.6, 4455.0], [30.7, 4457.0], [30.8, 4465.0], [30.9, 4466.0], [31.0, 4469.0], [31.1, 4476.0], [31.2, 4485.0], [31.3, 4486.0], [31.4, 4488.0], [31.5, 4513.0], [31.6, 4527.0], [31.7, 4531.0], [31.8, 4542.0], [31.9, 4548.0], [32.0, 4579.0], [32.1, 4580.0], [32.2, 4586.0], [32.3, 4610.0], [32.4, 4618.0], [32.5, 4624.0], [32.6, 4627.0], [32.7, 4637.0], [32.8, 4650.0], [32.9, 4657.0], [33.0, 4674.0], [33.1, 4682.0], [33.2, 4695.0], [33.3, 4710.0], [33.4, 4719.0], [33.5, 4724.0], [33.6, 4740.0], [33.7, 4749.0], [33.8, 4754.0], [33.9, 4763.0], [34.0, 4788.0], [34.1, 4791.0], [34.2, 4798.0], [34.3, 4805.0], [34.4, 4824.0], [34.5, 4830.0], [34.6, 4846.0], [34.7, 4855.0], [34.8, 4865.0], [34.9, 4867.0], [35.0, 4893.0], [35.1, 4901.0], [35.2, 4912.0], [35.3, 4924.0], [35.4, 4937.0], [35.5, 4939.0], [35.6, 4960.0], [35.7, 4967.0], [35.8, 4984.0], [35.9, 4993.0], [36.0, 5001.0], [36.1, 5014.0], [36.2, 5033.0], [36.3, 5072.0], [36.4, 5085.0], [36.5, 5095.0], [36.6, 5102.0], [36.7, 5104.0], [36.8, 5111.0], [36.9, 5113.0], [37.0, 5117.0], [37.1, 5122.0], [37.2, 5138.0], [37.3, 5147.0], [37.4, 5160.0], [37.5, 5167.0], [37.6, 5172.0], [37.7, 5180.0], [37.8, 5196.0], [37.9, 5197.0], [38.0, 5201.0], [38.1, 5205.0], [38.2, 5211.0], [38.3, 5214.0], [38.4, 5219.0], [38.5, 5225.0], [38.6, 5233.0], [38.7, 5244.0], [38.8, 5259.0], [38.9, 5268.0], [39.0, 5295.0], [39.1, 5315.0], [39.2, 5323.0], [39.3, 5328.0], [39.4, 5336.0], [39.5, 5350.0], [39.6, 5372.0], [39.7, 5383.0], [39.8, 5406.0], [39.9, 5413.0], [40.0, 5421.0], [40.1, 5424.0], [40.2, 5443.0], [40.3, 5446.0], [40.4, 5458.0], [40.5, 5470.0], [40.6, 5473.0], [40.7, 5478.0], [40.8, 5489.0], [40.9, 5507.0], [41.0, 5517.0], [41.1, 5534.0], [41.2, 5543.0], [41.3, 5550.0], [41.4, 5561.0], [41.5, 5562.0], [41.6, 5565.0], [41.7, 5580.0], [41.8, 5583.0], [41.9, 5585.0], [42.0, 5592.0], [42.1, 5595.0], [42.2, 5603.0], [42.3, 5603.0], [42.4, 5607.0], [42.5, 5610.0], [42.6, 5620.0], [42.7, 5625.0], [42.8, 5632.0], [42.9, 5638.0], [43.0, 5650.0], [43.1, 5655.0], [43.2, 5662.0], [43.3, 5663.0], [43.4, 5668.0], [43.5, 5678.0], [43.6, 5684.0], [43.7, 5698.0], [43.8, 5715.0], [43.9, 5720.0], [44.0, 5742.0], [44.1, 5755.0], [44.2, 5758.0], [44.3, 5763.0], [44.4, 5773.0], [44.5, 5775.0], [44.6, 5778.0], [44.7, 5779.0], [44.8, 5780.0], [44.9, 5791.0], [45.0, 5795.0], [45.1, 5795.0], [45.2, 5823.0], [45.3, 5831.0], [45.4, 5843.0], [45.5, 5844.0], [45.6, 5855.0], [45.7, 5860.0], [45.8, 5874.0], [45.9, 5890.0], [46.0, 5897.0], [46.1, 5897.0], [46.2, 5903.0], [46.3, 5907.0], [46.4, 5911.0], [46.5, 5918.0], [46.6, 5921.0], [46.7, 5925.0], [46.8, 5938.0], [46.9, 5944.0], [47.0, 5952.0], [47.1, 5977.0], [47.2, 5983.0], [47.3, 5989.0], [47.4, 6000.0], [47.5, 6014.0], [47.6, 6021.0], [47.7, 6026.0], [47.8, 6037.0], [47.9, 6045.0], [48.0, 6068.0], [48.1, 6081.0], [48.2, 6093.0], [48.3, 6097.0], [48.4, 6098.0], [48.5, 6103.0], [48.6, 6117.0], [48.7, 6119.0], [48.8, 6131.0], [48.9, 6139.0], [49.0, 6148.0], [49.1, 6156.0], [49.2, 6177.0], [49.3, 6185.0], [49.4, 6194.0], [49.5, 6201.0], [49.6, 6217.0], [49.7, 6219.0], [49.8, 6227.0], [49.9, 6233.0], [50.0, 6237.0], [50.1, 6246.0], [50.2, 6252.0], [50.3, 6257.0], [50.4, 6263.0], [50.5, 6265.0], [50.6, 6266.0], [50.7, 6274.0], [50.8, 6279.0], [50.9, 6284.0], [51.0, 6290.0], [51.1, 6296.0], [51.2, 6301.0], [51.3, 6305.0], [51.4, 6323.0], [51.5, 6325.0], [51.6, 6331.0], [51.7, 6334.0], [51.8, 6346.0], [51.9, 6358.0], [52.0, 6368.0], [52.1, 6371.0], [52.2, 6390.0], [52.3, 6391.0], [52.4, 6400.0], [52.5, 6414.0], [52.6, 6416.0], [52.7, 6420.0], [52.8, 6422.0], [52.9, 6423.0], [53.0, 6428.0], [53.1, 6433.0], [53.2, 6446.0], [53.3, 6448.0], [53.4, 6463.0], [53.5, 6475.0], [53.6, 6484.0], [53.7, 6488.0], [53.8, 6502.0], [53.9, 6504.0], [54.0, 6508.0], [54.1, 6510.0], [54.2, 6515.0], [54.3, 6530.0], [54.4, 6535.0], [54.5, 6542.0], [54.6, 6546.0], [54.7, 6557.0], [54.8, 6561.0], [54.9, 6565.0], [55.0, 6573.0], [55.1, 6576.0], [55.2, 6582.0], [55.3, 6589.0], [55.4, 6597.0], [55.5, 6602.0], [55.6, 6616.0], [55.7, 6622.0], [55.8, 6625.0], [55.9, 6630.0], [56.0, 6638.0], [56.1, 6641.0], [56.2, 6647.0], [56.3, 6656.0], [56.4, 6673.0], [56.5, 6680.0], [56.6, 6698.0], [56.7, 6710.0], [56.8, 6716.0], [56.9, 6721.0], [57.0, 6722.0], [57.1, 6731.0], [57.2, 6733.0], [57.3, 6745.0], [57.4, 6758.0], [57.5, 6765.0], [57.6, 6779.0], [57.7, 6788.0], [57.8, 6790.0], [57.9, 6795.0], [58.0, 6799.0], [58.1, 6804.0], [58.2, 6807.0], [58.3, 6810.0], [58.4, 6815.0], [58.5, 6819.0], [58.6, 6830.0], [58.7, 6834.0], [58.8, 6846.0], [58.9, 6848.0], [59.0, 6855.0], [59.1, 6857.0], [59.2, 6868.0], [59.3, 6870.0], [59.4, 6888.0], [59.5, 6903.0], [59.6, 6911.0], [59.7, 6918.0], [59.8, 6934.0], [59.9, 6936.0], [60.0, 6938.0], [60.1, 6944.0], [60.2, 6951.0], [60.3, 6953.0], [60.4, 6955.0], [60.5, 6959.0], [60.6, 6969.0], [60.7, 6970.0], [60.8, 6979.0], [60.9, 6982.0], [61.0, 6985.0], [61.1, 6989.0], [61.2, 6999.0], [61.3, 7002.0], [61.4, 7005.0], [61.5, 7007.0], [61.6, 7008.0], [61.7, 7013.0], [61.8, 7015.0], [61.9, 7021.0], [62.0, 7023.0], [62.1, 7026.0], [62.2, 7032.0], [62.3, 7035.0], [62.4, 7038.0], [62.5, 7045.0], [62.6, 7048.0], [62.7, 7049.0], [62.8, 7049.0], [62.9, 7051.0], [63.0, 7052.0], [63.1, 7053.0], [63.2, 7055.0], [63.3, 7058.0], [63.4, 7061.0], [63.5, 7062.0], [63.6, 7071.0], [63.7, 7073.0], [63.8, 7076.0], [63.9, 7078.0], [64.0, 7080.0], [64.1, 7080.0], [64.2, 7081.0], [64.3, 7083.0], [64.4, 7086.0], [64.5, 7086.0], [64.6, 7091.0], [64.7, 7092.0], [64.8, 7095.0], [64.9, 7096.0], [65.0, 7105.0], [65.1, 7108.0], [65.2, 7114.0], [65.3, 7115.0], [65.4, 7117.0], [65.5, 7122.0], [65.6, 7125.0], [65.7, 7132.0], [65.8, 7133.0], [65.9, 7139.0], [66.0, 7141.0], [66.1, 7142.0], [66.2, 7145.0], [66.3, 7147.0], [66.4, 7149.0], [66.5, 7150.0], [66.6, 7152.0], [66.7, 7153.0], [66.8, 7156.0], [66.9, 7156.0], [67.0, 7158.0], [67.1, 7159.0], [67.2, 7163.0], [67.3, 7167.0], [67.4, 7171.0], [67.5, 7172.0], [67.6, 7174.0], [67.7, 7178.0], [67.8, 7180.0], [67.9, 7180.0], [68.0, 7182.0], [68.1, 7182.0], [68.2, 7183.0], [68.3, 7183.0], [68.4, 7185.0], [68.5, 7185.0], [68.6, 7188.0], [68.7, 7189.0], [68.8, 7191.0], [68.9, 7193.0], [69.0, 7194.0], [69.1, 7195.0], [69.2, 7196.0], [69.3, 7198.0], [69.4, 7200.0], [69.5, 7200.0], [69.6, 7203.0], [69.7, 7203.0], [69.8, 7205.0], [69.9, 7206.0], [70.0, 7208.0], [70.1, 7210.0], [70.2, 7215.0], [70.3, 7216.0], [70.4, 7218.0], [70.5, 7221.0], [70.6, 7222.0], [70.7, 7224.0], [70.8, 7227.0], [70.9, 7229.0], [71.0, 7233.0], [71.1, 7241.0], [71.2, 7245.0], [71.3, 7249.0], [71.4, 7262.0], [71.5, 7265.0], [71.6, 7268.0], [71.7, 7269.0], [71.8, 7270.0], [71.9, 7271.0], [72.0, 7274.0], [72.1, 7276.0], [72.2, 7277.0], [72.3, 7279.0], [72.4, 7283.0], [72.5, 7283.0], [72.6, 7284.0], [72.7, 7286.0], [72.8, 7287.0], [72.9, 7288.0], [73.0, 7288.0], [73.1, 7290.0], [73.2, 7291.0], [73.3, 7293.0], [73.4, 7295.0], [73.5, 7296.0], [73.6, 7300.0], [73.7, 7302.0], [73.8, 7306.0], [73.9, 7307.0], [74.0, 7310.0], [74.1, 7311.0], [74.2, 7315.0], [74.3, 7316.0], [74.4, 7319.0], [74.5, 7321.0], [74.6, 7325.0], [74.7, 7328.0], [74.8, 7331.0], [74.9, 7336.0], [75.0, 7340.0], [75.1, 7343.0], [75.2, 7345.0], [75.3, 7346.0], [75.4, 7349.0], [75.5, 7353.0], [75.6, 7356.0], [75.7, 7357.0], [75.8, 7361.0], [75.9, 7364.0], [76.0, 7369.0], [76.1, 7374.0], [76.2, 7383.0], [76.3, 7385.0], [76.4, 7385.0], [76.5, 7388.0], [76.6, 7391.0], [76.7, 7392.0], [76.8, 7394.0], [76.9, 7396.0], [77.0, 7398.0], [77.1, 7399.0], [77.2, 7403.0], [77.3, 7405.0], [77.4, 7406.0], [77.5, 7407.0], [77.6, 7410.0], [77.7, 7413.0], [77.8, 7420.0], [77.9, 7421.0], [78.0, 7427.0], [78.1, 7428.0], [78.2, 7435.0], [78.3, 7439.0], [78.4, 7439.0], [78.5, 7443.0], [78.6, 7447.0], [78.7, 7450.0], [78.8, 7453.0], [78.9, 7456.0], [79.0, 7457.0], [79.1, 7457.0], [79.2, 7460.0], [79.3, 7461.0], [79.4, 7463.0], [79.5, 7471.0], [79.6, 7473.0], [79.7, 7474.0], [79.8, 7480.0], [79.9, 7484.0], [80.0, 7487.0], [80.1, 7489.0], [80.2, 7494.0], [80.3, 7496.0], [80.4, 7508.0], [80.5, 7509.0], [80.6, 7512.0], [80.7, 7515.0], [80.8, 7523.0], [80.9, 7527.0], [81.0, 7537.0], [81.1, 7539.0], [81.2, 7540.0], [81.3, 7542.0], [81.4, 7544.0], [81.5, 7546.0], [81.6, 7550.0], [81.7, 7554.0], [81.8, 7559.0], [81.9, 7561.0], [82.0, 7564.0], [82.1, 7567.0], [82.2, 7576.0], [82.3, 7578.0], [82.4, 7584.0], [82.5, 7587.0], [82.6, 7595.0], [82.7, 7596.0], [82.8, 7610.0], [82.9, 7611.0], [83.0, 7624.0], [83.1, 7628.0], [83.2, 7635.0], [83.3, 7636.0], [83.4, 7641.0], [83.5, 7647.0], [83.6, 7650.0], [83.7, 7652.0], [83.8, 7654.0], [83.9, 7657.0], [84.0, 7663.0], [84.1, 7668.0], [84.2, 7674.0], [84.3, 7675.0], [84.4, 7679.0], [84.5, 7682.0], [84.6, 7686.0], [84.7, 7691.0], [84.8, 7694.0], [84.9, 7698.0], [85.0, 7700.0], [85.1, 7708.0], [85.2, 7716.0], [85.3, 7718.0], [85.4, 7723.0], [85.5, 7735.0], [85.6, 7741.0], [85.7, 7747.0], [85.8, 7752.0], [85.9, 7761.0], [86.0, 7770.0], [86.1, 7777.0], [86.2, 7779.0], [86.3, 7782.0], [86.4, 7784.0], [86.5, 7797.0], [86.6, 7798.0], [86.7, 7807.0], [86.8, 7807.0], [86.9, 7815.0], [87.0, 7819.0], [87.1, 7821.0], [87.2, 7822.0], [87.3, 7832.0], [87.4, 7839.0], [87.5, 7845.0], [87.6, 7856.0], [87.7, 7863.0], [87.8, 7866.0], [87.9, 7875.0], [88.0, 7876.0], [88.1, 7883.0], [88.2, 7892.0], [88.3, 7904.0], [88.4, 7913.0], [88.5, 7922.0], [88.6, 7928.0], [88.7, 7938.0], [88.8, 7944.0], [88.9, 7954.0], [89.0, 7958.0], [89.1, 7972.0], [89.2, 7983.0], [89.3, 8006.0], [89.4, 8017.0], [89.5, 8040.0], [89.6, 8055.0], [89.7, 8066.0], [89.8, 8072.0], [89.9, 8076.0], [90.0, 8089.0], [90.1, 8096.0], [90.2, 8108.0], [90.3, 8116.0], [90.4, 8124.0], [90.5, 8143.0], [90.6, 8147.0], [90.7, 8151.0], [90.8, 8155.0], [90.9, 8165.0], [91.0, 8178.0], [91.1, 8192.0], [91.2, 8198.0], [91.3, 8204.0], [91.4, 8218.0], [91.5, 8221.0], [91.6, 8236.0], [91.7, 8247.0], [91.8, 8249.0], [91.9, 8256.0], [92.0, 8261.0], [92.1, 8270.0], [92.2, 8274.0], [92.3, 8294.0], [92.4, 8300.0], [92.5, 8307.0], [92.6, 8314.0], [92.7, 8337.0], [92.8, 8338.0], [92.9, 8346.0], [93.0, 8347.0], [93.1, 8354.0], [93.2, 8355.0], [93.3, 8374.0], [93.4, 8375.0], [93.5, 8403.0], [93.6, 8419.0], [93.7, 8425.0], [93.8, 8435.0], [93.9, 8436.0], [94.0, 8443.0], [94.1, 8449.0], [94.2, 8453.0], [94.3, 8479.0], [94.4, 8488.0], [94.5, 8490.0], [94.6, 8497.0], [94.7, 8507.0], [94.8, 8509.0], [94.9, 8518.0], [95.0, 8520.0], [95.1, 8522.0], [95.2, 8532.0], [95.3, 8538.0], [95.4, 8538.0], [95.5, 8552.0], [95.6, 8554.0], [95.7, 8555.0], [95.8, 8561.0], [95.9, 8564.0], [96.0, 8567.0], [96.1, 8585.0], [96.2, 8590.0], [96.3, 8609.0], [96.4, 8617.0], [96.5, 8628.0], [96.6, 8635.0], [96.7, 8639.0], [96.8, 8648.0], [96.9, 8663.0], [97.0, 8668.0], [97.1, 8678.0], [97.2, 8681.0], [97.3, 8695.0], [97.4, 8696.0], [97.5, 8712.0], [97.6, 8726.0], [97.7, 8746.0], [97.8, 8754.0], [97.9, 8772.0], [98.0, 8780.0], [98.1, 8808.0], [98.2, 8819.0], [98.3, 8841.0], [98.4, 8851.0], [98.5, 8860.0], [98.6, 8872.0], [98.7, 8884.0], [98.8, 8898.0], [98.9, 8916.0], [99.0, 8934.0], [99.1, 8958.0], [99.2, 8965.0], [99.3, 8975.0], [99.4, 8988.0], [99.5, 9002.0], [99.6, 9024.0], [99.7, 9078.0], [99.8, 9099.0], [99.9, 9136.0], [100.0, 9202.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1300.0, "maxY": 112.0, "series": [{"data": [[1300.0, 3.0], [1400.0, 13.0], [1500.0, 5.0], [1600.0, 10.0], [1700.0, 14.0], [1800.0, 15.0], [1900.0, 15.0], [2000.0, 20.0], [2100.0, 7.0], [2300.0, 16.0], [2200.0, 12.0], [2400.0, 13.0], [2500.0, 19.0], [2600.0, 20.0], [2700.0, 28.0], [2800.0, 26.0], [2900.0, 29.0], [3000.0, 40.0], [3100.0, 38.0], [3300.0, 36.0], [3200.0, 43.0], [3400.0, 30.0], [3500.0, 28.0], [3600.0, 41.0], [3700.0, 35.0], [3800.0, 35.0], [3900.0, 27.0], [4000.0, 43.0], [4100.0, 25.0], [4200.0, 35.0], [4300.0, 31.0], [4400.0, 35.0], [4500.0, 19.0], [4600.0, 25.0], [4700.0, 26.0], [4800.0, 20.0], [4900.0, 23.0], [5000.0, 15.0], [5100.0, 35.0], [5200.0, 26.0], [5300.0, 19.0], [5400.0, 27.0], [5600.0, 39.0], [5500.0, 32.0], [5700.0, 35.0], [5800.0, 26.0], [5900.0, 31.0], [6000.0, 26.0], [6100.0, 26.0], [6200.0, 43.0], [6300.0, 30.0], [6400.0, 35.0], [6500.0, 42.0], [6600.0, 30.0], [6700.0, 34.0], [6800.0, 36.0], [6900.0, 45.0], [7000.0, 91.0], [7100.0, 112.0], [7200.0, 105.0], [7300.0, 88.0], [7400.0, 80.0], [7500.0, 60.0], [7600.0, 55.0], [7700.0, 42.0], [7800.0, 42.0], [7900.0, 24.0], [8000.0, 22.0], [8100.0, 27.0], [8200.0, 29.0], [8300.0, 27.0], [8400.0, 29.0], [8500.0, 40.0], [8600.0, 30.0], [8700.0, 17.0], [8800.0, 18.0], [8900.0, 16.0], [9000.0, 9.0], [9100.0, 4.0], [9200.0, 1.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2484.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 16.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2484.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.1892000000028, "minX": 1.755588E12, "maxY": 1251.1892000000028, "series": [{"data": [[1.755588E12, 1251.1892000000028]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.755588E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1401.0, "minX": 1.0, "maxY": 9202.0, "series": [{"data": [[2.0, 8062.0], [3.0, 8988.0], [4.0, 7700.0], [5.0, 9117.0], [6.0, 7544.0], [7.0, 8564.0], [8.0, 7471.0], [9.0, 9202.0], [10.0, 7463.0], [11.0, 7457.0], [12.0, 7460.0], [13.0, 7508.0], [15.0, 7618.5], [16.0, 7798.0], [17.0, 8375.0], [18.0, 7784.0], [21.0, 8137.666666666667], [22.0, 7778.0], [23.0, 8712.0], [24.0, 7421.0], [25.0, 9152.0], [26.0, 9136.0], [27.0, 8674.0], [28.0, 8956.0], [29.0, 7414.0], [30.0, 8775.0], [31.0, 7743.0], [32.0, 8907.0], [39.0, 7915.333333333333], [38.0, 8179.25], [41.0, 7451.0], [43.0, 8425.0], [42.0, 7406.0], [45.0, 9000.0], [44.0, 7421.0], [47.0, 7405.0], [49.0, 9106.0], [48.0, 8149.5], [51.0, 8748.0], [50.0, 8863.0], [52.0, 8364.0], [55.0, 8554.0], [54.0, 8659.0], [57.0, 8053.5], [59.0, 7398.0], [58.0, 8019.0], [67.0, 8876.0], [66.0, 8830.0], [65.0, 7296.0], [64.0, 7724.75], [71.0, 8226.5], [68.0, 7614.0], [74.0, 7389.0], [73.0, 7393.0], [79.0, 8812.0], [77.0, 7439.0], [76.0, 8474.25], [83.0, 7383.0], [82.0, 9002.0], [81.0, 8926.0], [80.0, 7552.0], [86.0, 7694.0], [85.0, 7295.0], [84.0, 8848.0], [91.0, 8549.0], [90.0, 7385.0], [88.0, 7500.0], [95.0, 8033.0], [93.0, 7681.666666666667], [97.0, 7279.0], [96.0, 7374.0], [101.0, 7790.75], [105.0, 8637.0], [104.0, 8901.0], [110.0, 8300.0], [109.0, 9099.0], [108.0, 8381.333333333334], [114.0, 8375.0], [113.0, 8346.0], [112.0, 8635.0], [119.0, 7675.0], [118.0, 8836.0], [117.0, 8963.0], [116.0, 7511.5], [122.0, 7635.0], [121.0, 8958.0], [120.0, 7690.0], [127.0, 8619.0], [126.0, 7249.5], [135.0, 7250.0], [133.0, 8663.0], [132.0, 7265.0], [131.0, 8062.4], [130.0, 7355.0], [143.0, 7624.0], [142.0, 8037.5], [140.0, 7283.0], [139.0, 8748.666666666666], [136.0, 8558.0], [151.0, 7286.0], [149.0, 7739.0], [147.0, 7266.0], [146.0, 7948.0], [158.0, 8059.0], [156.0, 8585.0], [155.0, 8629.5], [153.0, 9024.0], [152.0, 7345.0], [167.0, 8975.0], [166.0, 8314.0], [165.0, 8256.0], [164.0, 7288.0], [163.0, 7249.0], [162.0, 7590.0], [161.0, 8066.0], [160.0, 7307.0], [175.0, 8223.25], [172.0, 8132.0], [169.0, 7564.0], [182.0, 7208.0], [180.0, 7166.5], [179.0, 7784.333333333333], [191.0, 7315.0], [189.0, 7865.333333333333], [188.0, 8763.5], [186.0, 7561.0], [184.0, 7377.5], [198.0, 7681.333333333333], [195.0, 8208.0], [194.0, 7669.333333333333], [193.0, 8485.0], [206.0, 7374.0], [203.0, 7191.0], [201.0, 7340.0], [214.0, 8045.5], [211.0, 8151.0], [210.0, 8949.0], [209.0, 7497.666666666667], [222.0, 7195.0], [220.0, 7189.0], [219.0, 8696.0], [217.0, 7836.0], [216.0, 7173.0], [230.0, 8051.0], [229.0, 8934.0], [228.0, 7630.5], [225.0, 8174.0], [224.0, 8512.0], [233.0, 7115.0], [232.0, 7833.25], [246.0, 7303.0], [245.0, 8136.0], [243.0, 8307.0], [241.0, 7664.75], [254.0, 8726.0], [253.0, 7188.0], [252.0, 8841.0], [251.0, 7192.0], [249.0, 8157.0], [248.0, 7995.5], [270.0, 8195.0], [269.0, 7833.0], [259.0, 7284.0], [257.0, 7189.0], [256.0, 7823.5], [267.0, 8112.0], [266.0, 8488.0], [265.0, 7181.0], [264.0, 7179.0], [263.0, 8108.0], [262.0, 7144.0], [261.0, 8916.0], [260.0, 8916.0], [284.0, 7560.0], [287.0, 7842.0], [286.0, 7494.0], [285.0, 7210.0], [281.0, 8610.5], [279.0, 8112.5], [277.0, 7320.0], [276.0, 7154.0], [274.0, 8122.333333333333], [272.0, 7325.0], [291.0, 8695.0], [302.0, 7460.0], [303.0, 7183.0], [301.0, 7901.0], [299.0, 8149.666666666667], [296.0, 7302.0], [295.0, 8762.0], [294.0, 7064.0], [293.0, 7133.0], [290.0, 7313.0], [289.0, 7480.0], [288.0, 7211.0], [316.0, 8347.0], [318.0, 8772.0], [319.0, 8851.0], [317.0, 7457.0], [315.0, 7833.333333333333], [312.0, 7096.0], [311.0, 7117.5], [304.0, 7184.0], [306.0, 7183.0], [305.0, 7446.0], [309.0, 7125.0], [308.0, 8188.5], [334.0, 7960.0], [335.0, 8040.0], [332.0, 7923.5], [330.0, 8522.0], [329.0, 7976.0], [328.0, 7059.0], [326.0, 8489.0], [325.0, 8156.0], [322.0, 7060.0], [321.0, 7452.0], [320.0, 7092.0], [339.0, 7405.0], [350.0, 7703.0], [351.0, 8219.0], [348.0, 7843.0], [346.0, 7734.5], [345.0, 7983.0], [343.0, 7689.5], [341.0, 8678.0], [340.0, 8372.0], [338.0, 8347.0], [336.0, 7216.0], [366.0, 7274.0], [367.0, 8581.5], [365.0, 7277.0], [364.0, 8338.5], [363.0, 7272.0], [362.0, 7391.0], [360.0, 7362.0], [359.0, 8165.0], [354.0, 7428.0], [353.0, 8212.0], [357.0, 7280.0], [356.0, 7817.5], [371.0, 7359.0], [382.0, 7005.0], [381.0, 8338.0], [380.0, 7949.0], [377.0, 7269.0], [374.0, 8526.5], [372.0, 7269.0], [370.0, 8337.0], [369.0, 7904.5], [392.0, 7769.5], [397.0, 8732.0], [395.0, 8342.0], [394.0, 8555.0], [393.0, 8630.0], [390.0, 7396.0], [389.0, 8590.0], [387.0, 7959.0], [386.0, 8330.0], [385.0, 8448.0], [384.0, 7938.0], [413.0, 7915.0], [415.0, 7135.0], [412.0, 8249.5], [411.0, 8561.0], [409.0, 7716.0], [408.0, 7497.5], [405.0, 8347.0], [404.0, 8490.0], [403.0, 7393.0], [402.0, 7982.4], [400.0, 7911.0], [430.0, 7291.0], [431.0, 6953.0], [429.0, 7772.0], [418.0, 8123.333333333333], [427.0, 8252.0], [425.0, 8147.0], [424.0, 7893.0], [423.0, 8552.0], [422.0, 8508.0], [421.0, 8070.333333333333], [446.0, 8235.0], [447.0, 7878.0], [445.0, 8553.0], [444.0, 7301.0], [443.0, 8458.0], [442.0, 7887.0], [441.0, 8534.0], [440.0, 7557.5], [439.0, 7832.0], [435.0, 7589.0], [432.0, 6913.0], [438.0, 6904.0], [436.0, 8249.0], [451.0, 7607.0], [462.0, 7844.5], [460.0, 7874.0], [459.0, 8347.0], [458.0, 8256.0], [456.0, 8519.0], [455.0, 7614.0], [453.0, 8582.0], [449.0, 8668.0], [448.0, 7276.0], [472.0, 7933.0], [476.0, 8248.0], [475.0, 7876.0], [474.0, 8218.0], [473.0, 7555.0], [470.0, 7249.0], [468.0, 8238.5], [466.0, 8146.5], [465.0, 8026.0], [464.0, 8424.0], [494.0, 7596.0], [495.0, 7883.0], [493.0, 8538.0], [492.0, 7743.0], [490.0, 7241.0], [489.0, 8524.0], [488.0, 7846.0], [487.0, 8646.0], [480.0, 7891.75], [483.0, 7916.0], [481.0, 7350.0], [486.0, 8096.0], [485.0, 7589.5], [509.0, 7286.0], [508.0, 7288.0], [506.0, 8562.0], [505.0, 7286.0], [504.0, 8572.0], [502.0, 7260.5], [500.0, 7744.0], [499.0, 8535.0], [497.0, 7289.5], [536.0, 7517.5], [542.0, 7910.0], [528.0, 7815.0], [538.0, 7195.0], [518.0, 7970.0], [516.0, 7839.0], [512.0, 8072.333333333333], [524.0, 7807.0], [540.0, 7278.0], [532.0, 7829.0], [570.0, 7130.0], [568.0, 7132.0], [560.0, 7156.0], [562.0, 7394.0], [572.0, 7117.0], [544.0, 7797.0], [546.0, 7820.0], [548.0, 7741.0], [550.0, 8490.0], [558.0, 7161.0], [556.0, 7184.5], [554.0, 7784.0], [552.0, 7183.0], [566.0, 7147.0], [564.0, 7456.0], [602.0, 7078.0], [606.0, 7697.0], [592.0, 7856.5], [604.0, 7159.5], [576.0, 7120.0], [578.0, 8290.0], [582.0, 7489.5], [580.0, 7716.0], [586.0, 7939.0], [584.0, 7108.5], [598.0, 7086.0], [614.0, 7353.5], [638.0, 7010.0], [634.0, 7104.0], [632.0, 7021.0], [620.0, 7837.0], [608.0, 7145.0], [610.0, 7166.0], [612.0, 7055.0], [618.0, 7049.0], [616.0, 7654.0], [630.0, 7279.6], [624.0, 7197.5], [666.0, 8263.0], [660.0, 7210.0], [670.0, 6970.0], [668.0, 7336.0], [644.0, 7369.0], [642.0, 7007.0], [640.0, 7050.0], [654.0, 7066.0], [652.0, 7103.5], [648.0, 7882.5], [662.0, 7091.0], [678.0, 7305.0], [690.0, 7169.5], [698.0, 7562.0], [696.0, 7138.0], [676.0, 7032.0], [674.0, 6961.0], [672.0, 7046.0], [684.0, 7486.5], [682.0, 7023.0], [694.0, 7543.0], [692.0, 7426.0], [732.0, 6970.0], [720.0, 7277.0], [722.0, 7439.0], [724.0, 7484.0], [734.0, 6970.0], [730.0, 7807.0], [728.0, 7473.0], [704.0, 7321.0], [718.0, 7527.0], [714.0, 6979.0], [712.0, 6978.0], [726.0, 7156.0], [764.0, 6853.0], [766.0, 7866.0], [752.0, 7431.0], [754.0, 8247.0], [756.0, 7815.0], [762.0, 7391.0], [760.0, 7965.0], [742.0, 7447.0], [736.0, 7462.0], [750.0, 7941.0], [748.0, 8237.0], [744.0, 8261.0], [758.0, 7175.5], [796.0, 7336.0], [784.0, 7718.0], [786.0, 6795.0], [788.0, 6792.0], [794.0, 6778.0], [792.0, 7567.0], [772.0, 7761.0], [770.0, 6834.0], [768.0, 7484.0], [782.0, 6804.0], [780.0, 7243.5], [778.0, 6857.0], [776.0, 6815.0], [790.0, 8017.0], [828.0, 6620.0], [816.0, 8006.0], [818.0, 6994.5], [820.0, 7038.0], [826.0, 6848.0], [824.0, 6636.0], [804.0, 7866.0], [802.0, 7696.0], [814.0, 7968.0], [812.0, 8089.0], [810.0, 7303.0], [808.0, 7345.0], [822.0, 7007.0], [834.0, 7772.0], [856.0, 6571.0], [850.0, 7221.0], [862.0, 7153.0], [832.0, 6673.0], [836.0, 7403.0], [838.0, 7763.0], [846.0, 7972.0], [844.0, 8002.0], [842.0, 6582.0], [840.0, 7075.0], [888.0, 7457.0], [892.0, 6530.0], [880.0, 7306.0], [894.0, 6468.0], [890.0, 7657.0], [864.0, 6572.0], [866.0, 7245.0], [868.0, 7336.0], [878.0, 6512.0], [876.0, 6531.0], [874.0, 6594.0], [872.0, 7954.0], [886.0, 7148.0], [920.0, 7156.0], [926.0, 7057.0], [924.0, 6427.0], [922.0, 6982.0], [902.0, 7882.0], [898.0, 7747.0], [896.0, 7687.0], [916.0, 7536.0], [914.0, 7193.0], [910.0, 7201.25], [904.0, 6931.5], [956.0, 7582.0], [958.0, 7331.0], [944.0, 7678.0], [948.0, 6859.0], [946.0, 6416.0], [954.0, 7658.5], [952.0, 6900.5], [934.0, 6717.0], [928.0, 7064.0], [942.0, 7779.0], [938.0, 7164.5], [936.0, 7054.0], [950.0, 6416.0], [966.0, 7187.0], [988.0, 7307.5], [976.0, 7413.5], [984.0, 6895.0], [964.0, 6991.0], [960.0, 6396.0], [974.0, 7542.0], [972.0, 7500.0], [970.0, 7672.0], [980.0, 7455.0], [978.0, 6346.0], [994.0, 6785.5], [1006.0, 7632.0], [1012.0, 6807.5], [1008.0, 7329.0], [996.0, 6319.0], [992.0, 7327.8], [1002.0, 7220.0], [1000.0, 7674.0], [1036.0, 7550.0], [1072.0, 6808.0], [1084.0, 6801.333333333333], [1080.0, 6391.0], [1028.0, 6985.000000000001], [1052.0, 7184.0], [1048.0, 6798.0], [1044.0, 6848.0], [1040.0, 6810.0], [1068.0, 6216.0], [1064.0, 6870.0], [1140.0, 5929.0], [1148.0, 6630.0], [1128.0, 7471.0], [1120.0, 6281.0], [1124.0, 6641.0], [1136.0, 6373.0], [1100.0, 6733.0], [1096.0, 7185.0], [1092.0, 6503.0], [1088.0, 7217.0], [1116.0, 6334.0], [1108.0, 6147.0], [1104.0, 6093.0], [1132.0, 6045.0], [1156.0, 5853.0], [1200.0, 7206.0], [1188.0, 7026.0], [1212.0, 7139.0], [1152.0, 6543.0], [1176.0, 6528.5], [1172.0, 6722.0], [1168.0, 7305.0], [1184.0, 5776.0], [1228.0, 6717.0], [1276.0, 5603.0], [1272.0, 6328.0], [1264.0, 6054.0], [1224.0, 7036.0], [1220.0, 5773.0], [1244.0, 5773.0], [1236.0, 5794.0], [1260.0, 6097.0], [1336.0, 6332.0], [1340.0, 6535.0], [1312.0, 6398.5], [1316.0, 6000.5], [1332.0, 6733.0], [1328.0, 6321.0], [1292.0, 5659.0], [1284.0, 6250.0], [1280.0, 5598.0], [1308.0, 5775.0], [1304.0, 6257.0], [1300.0, 6908.0], [1296.0, 5580.0], [1324.0, 5440.0], [1320.0, 6323.0], [1396.0, 6586.0], [1400.0, 5176.0], [1356.0, 6344.0], [1352.0, 6625.0], [1348.0, 5358.5], [1344.0, 5383.0], [1376.0, 6070.5], [1372.0, 5989.0], [1460.0, 5912.0], [1448.0, 5730.5], [1468.0, 4579.0], [1464.0, 4542.0], [1456.0, 4837.5], [1420.0, 6278.0], [1416.0, 6103.0], [1412.0, 6235.0], [1408.0, 5780.0], [1436.0, 6000.0], [1432.0, 5104.0], [1424.0, 6037.0], [1452.0, 5322.0], [1528.0, 4674.0], [1504.0, 4762.0], [1508.0, 4618.0], [1512.0, 4364.0], [1532.0, 5778.0], [1472.0, 5531.0], [1476.0, 5555.0], [1480.0, 5407.5], [1484.0, 5977.0], [1500.0, 4369.5], [1496.0, 6152.0], [1488.0, 6087.0], [1588.0, 5421.0], [1568.0, 4042.0], [1572.0, 5152.333333333333], [1592.0, 4036.0], [1584.0, 4719.0], [1540.0, 5586.0], [1544.0, 5477.0], [1548.0, 5919.0], [1564.0, 5897.0], [1560.0, 4485.0], [1556.0, 5414.0], [1608.0, 4206.0], [1648.0, 4260.0], [1632.0, 4471.5], [1636.0, 5384.0], [1640.0, 5546.0], [1604.0, 4217.0], [1612.0, 5207.0], [1628.0, 5125.0], [1624.0, 4960.0], [1620.0, 5022.0], [1616.0, 5762.0], [1644.0, 5219.0], [1720.0, 4689.0], [1696.0, 4901.0], [1700.0, 5081.0], [1708.0, 4830.0], [1716.0, 3727.0], [1676.0, 4245.0], [1668.0, 4066.0], [1672.0, 4129.0], [1664.0, 4279.0], [1692.0, 4166.0], [1688.0, 4201.0], [1684.0, 4795.0], [1680.0, 4206.0], [1788.0, 4229.5], [1768.0, 4590.5], [1784.0, 4303.5], [1760.0, 5323.0], [1764.0, 4332.0], [1772.0, 3962.0], [1780.0, 3534.0], [1776.0, 3558.0], [1740.0, 4876.333333333333], [1736.0, 4805.5], [1732.0, 4346.5], [1728.0, 4939.0], [1756.0, 4903.5], [1748.0, 5455.0], [1848.0, 4671.0], [1832.0, 3765.0], [1852.0, 4650.0], [1824.0, 3872.0], [1828.0, 4414.0], [1836.0, 5146.0], [1844.0, 3733.0], [1840.0, 4827.0], [1800.0, 3844.0], [1796.0, 4206.0], [1792.0, 3834.0], [1820.0, 5196.0], [1816.0, 4294.0], [1808.0, 3938.0], [1904.0, 3573.0], [1908.0, 3565.0], [1888.0, 3600.0], [1892.0, 3340.5], [1896.0, 4051.0], [1900.0, 4849.0], [1856.0, 3755.5], [1860.0, 3355.0], [1864.0, 3832.0], [1868.0, 4637.0], [1884.0, 3269.0], [1880.0, 3634.0], [1872.0, 3303.0], [1972.0, 4513.0], [1980.0, 4393.0], [1960.0, 3076.0], [1976.0, 4308.0], [1968.0, 3521.0], [1924.0, 3910.3333333333335], [1944.0, 4384.0], [1940.0, 4789.0], [1936.0, 4121.0], [2044.0, 2776.0], [2020.0, 3852.0], [2016.0, 3210.0], [2024.0, 4453.0], [2040.0, 3103.0], [2032.0, 2818.0], [1984.0, 3044.0], [1988.0, 4104.0], [1996.0, 3296.0], [2008.0, 4189.0], [2004.0, 4485.0], [2000.0, 4266.0], [2160.0, 4076.0], [2120.0, 2972.0], [2128.0, 2638.0], [2136.0, 4022.0], [2168.0, 3469.0], [2152.0, 3541.0], [2064.0, 3069.0], [2072.0, 4190.0], [2104.0, 3578.0], [2088.0, 3964.0], [2080.0, 3014.0], [2272.0, 3506.0], [2296.0, 3375.0], [2288.0, 2409.0], [2280.0, 3830.0], [2200.0, 3832.0], [2192.0, 3797.0], [2176.0, 2608.0], [2224.0, 2261.0], [2216.0, 4029.0], [2424.0, 3141.0], [2376.0, 3498.0], [2384.0, 1776.0], [2392.0, 1922.0], [2416.0, 2798.0], [2328.0, 3743.0], [2320.0, 3307.0], [2312.0, 3754.0], [2304.0, 3501.0], [2352.0, 3107.0], [2344.0, 2312.0], [2336.0, 2004.0], [2432.0, 1538.0], [2448.0, 1575.0], [2488.0, 1401.0], [2456.0, 2444.5], [2440.0, 2882.0], [2480.0, 1448.0], [2472.0, 1476.5], [2464.0, 1498.0], [2161.0, 3129.0], [2153.0, 3731.0], [2113.0, 3611.5], [2137.0, 2854.0], [2169.0, 3691.0], [2049.0, 2886.5], [2065.0, 4039.0], [2105.0, 2704.0], [2081.0, 3630.0], [2281.0, 2016.0], [2297.0, 2053.0], [2241.0, 2583.0], [2249.0, 3349.0], [2265.0, 3132.0], [2289.0, 2418.0], [2273.0, 3416.0], [2201.0, 3636.0], [2193.0, 3522.0], [2185.0, 2851.6666666666665], [2177.0, 2464.0], [2233.0, 2440.5], [2225.0, 3993.0], [2217.0, 2622.0], [2209.0, 3614.5], [2417.0, 3203.0], [2369.0, 2585.5], [2377.0, 2147.0], [2385.0, 1770.0], [2393.0, 1748.0], [2425.0, 2007.0], [2409.0, 1849.5], [2401.0, 2611.5], [2329.0, 3295.0], [2313.0, 2943.0], [2305.0, 3571.0], [2353.0, 1954.0], [2345.0, 1857.0], [2337.0, 2011.0], [2441.0, 2908.0], [2457.0, 3036.0], [2433.0, 1634.0], [2481.0, 3044.0], [2473.0, 2419.0], [1077.0, 7025.0], [1073.0, 7457.0], [1081.0, 7554.0], [1029.0, 6274.0], [1033.0, 6931.0], [1037.0, 6589.0], [1049.0, 6937.0], [1065.0, 6221.0], [1061.0, 6921.5], [1145.0, 7164.5], [1121.0, 6068.0], [1129.0, 6945.0], [1149.0, 7175.0], [1141.0, 6360.0], [1137.0, 5942.0], [1093.0, 7539.0], [1097.0, 6129.0], [1101.0, 6714.0], [1117.0, 7484.0], [1113.0, 6074.666666666667], [1201.0, 5827.0], [1209.0, 5714.5], [1185.0, 5847.5], [1189.0, 6565.0], [1205.0, 6144.0], [1181.0, 6043.333333333333], [1153.0, 7141.0], [1157.0, 6687.0], [1161.0, 6399.5], [1165.0, 6124.0], [1173.0, 7173.0], [1169.0, 7061.0], [1197.0, 6269.5], [1193.0, 6523.333333333333], [1269.0, 5956.5], [1277.0, 5592.0], [1249.0, 6783.333333333333], [1253.0, 6880.0], [1265.0, 6846.0], [1229.0, 6418.0], [1221.0, 6117.0], [1217.0, 6171.0], [1245.0, 6803.333333333333], [1241.0, 6198.222222222223], [1261.0, 5638.0], [1257.0, 6527.666666666667], [1337.0, 6807.0], [1313.0, 6847.0], [1317.0, 6433.0], [1321.0, 5831.0], [1341.0, 6535.0], [1333.0, 5413.0], [1329.0, 5443.0], [1285.0, 5583.0], [1289.0, 5556.0], [1293.0, 5663.0], [1305.0, 5592.0], [1301.0, 6117.0], [1297.0, 6339.0], [1325.0, 6589.0], [1357.0, 5908.0], [1381.0, 5891.0], [1405.0, 6520.5], [1393.0, 5512.5], [1353.0, 5989.0], [1349.0, 6305.0], [1345.0, 6756.0], [1373.0, 6246.0], [1369.0, 6384.5], [1365.0, 5998.333333333333], [1361.0, 6217.0], [1457.0, 5902.0], [1469.0, 4695.0], [1445.0, 5328.0], [1461.0, 5603.0], [1421.0, 5122.0], [1417.0, 6263.0], [1413.0, 6055.0], [1409.0, 5828.0], [1437.0, 6131.0], [1433.0, 5843.0], [1429.0, 6238.5], [1425.0, 6252.0], [1453.0, 5791.0], [1525.0, 4716.666666666667], [1505.0, 4387.0], [1513.0, 6051.0], [1517.0, 5993.0], [1529.0, 5580.0], [1521.0, 5259.0], [1477.0, 5340.5], [1485.0, 4488.0], [1501.0, 5897.0], [1497.0, 6097.0], [1493.0, 4457.0], [1489.0, 4444.0], [1593.0, 5062.5], [1589.0, 4361.0], [1577.0, 4030.0], [1581.0, 4924.666666666667], [1597.0, 4546.0], [1585.0, 5091.0], [1537.0, 5721.0], [1541.0, 4219.0], [1545.0, 4545.0], [1549.0, 4649.5], [1565.0, 5288.0], [1561.0, 5679.0], [1557.0, 4131.0], [1553.0, 4992.0], [1605.0, 5650.0], [1661.0, 5198.5], [1633.0, 5496.0], [1637.0, 5233.0], [1601.0, 4395.0], [1609.0, 5734.0], [1613.0, 5322.0], [1629.0, 5507.0], [1625.0, 3918.0], [1617.0, 4008.0], [1645.0, 5420.0], [1713.0, 4691.5], [1717.0, 3956.0], [1701.0, 3761.0], [1705.0, 5106.0], [1709.0, 5406.0], [1673.0, 4228.0], [1693.0, 4188.0], [1689.0, 4163.0], [1685.0, 3841.0], [1681.0, 3857.0], [1781.0, 4724.0], [1765.0, 3631.0], [1761.0, 3640.0], [1769.0, 3627.0], [1773.0, 5096.0], [1777.0, 5295.0], [1757.0, 4374.5], [1753.0, 4022.5], [1749.0, 3718.0], [1745.0, 4648.0], [1845.0, 4067.5], [1849.0, 4882.0], [1829.0, 3778.0], [1833.0, 4360.0], [1837.0, 3750.0], [1805.0, 4257.0], [1797.0, 3481.0], [1821.0, 3792.0], [1817.0, 3453.0], [1813.0, 4230.0], [1909.0, 3219.0], [1917.0, 3129.0], [1893.0, 3172.0], [1889.0, 3208.0], [1901.0, 4271.0], [1861.0, 4865.0], [1865.0, 3657.0], [1885.0, 3211.0], [1877.0, 4289.333333333333], [1929.0, 3775.3333333333335], [1981.0, 3051.0], [1977.0, 4074.0], [1973.0, 4303.0], [1949.0, 4057.3333333333335], [1921.0, 3796.6666666666665], [1925.0, 4938.0], [1933.0, 3226.5], [1945.0, 4426.0], [1941.0, 3077.0], [1937.0, 3089.0], [2041.0, 3105.0], [2017.0, 2943.0], [2021.0, 2804.0], [2025.0, 4168.0], [1989.0, 4646.5], [1993.0, 3182.5], [1997.0, 2880.0], [2013.0, 3024.5], [2009.0, 4388.0], [2005.0, 2976.0], [2001.0, 4204.0], [2170.0, 3704.0], [2114.0, 2941.0], [2122.0, 2555.0], [2138.0, 4233.0], [2154.0, 3947.0], [2050.0, 4479.0], [2058.0, 3743.6666666666665], [2066.0, 3039.0], [2074.0, 3370.5], [2106.0, 4370.0], [2098.0, 2973.0], [2090.0, 2863.0], [2082.0, 4235.0], [2290.0, 3044.0], [2242.0, 3801.0], [2266.0, 3104.0], [2298.0, 2095.0], [2282.0, 3486.0], [2274.0, 3198.0], [2194.0, 3937.0], [2178.0, 2736.0], [2234.0, 3530.0], [2226.0, 2587.0], [2218.0, 2206.0], [2210.0, 2312.0], [2410.0, 3076.0], [2370.0, 2976.0], [2378.0, 2958.0], [2394.0, 3232.0], [2322.0, 3036.5], [2314.0, 2697.5], [2354.0, 2876.0], [2346.0, 2278.0], [2338.0, 1967.0], [2450.0, 2578.0], [2490.0, 2879.0], [2482.0, 3095.0], [2474.0, 1475.0], [2466.0, 1955.5], [2155.0, 2827.0], [2171.0, 2753.0], [2115.0, 3609.0], [2163.0, 3360.0], [2147.0, 3174.8], [2051.0, 3078.0], [2059.0, 2796.0], [2067.0, 3945.0], [2075.0, 3033.0], [2099.0, 2580.0], [2275.0, 3122.0], [2267.0, 3193.0], [2291.0, 3736.0], [2283.0, 2421.0], [2203.0, 2528.0], [2195.0, 2355.0], [2187.0, 3680.0], [2179.0, 2741.0], [2235.0, 2588.0], [2227.0, 3545.0], [2219.0, 2334.0], [2211.0, 3335.0], [2427.0, 1607.0], [2371.0, 1730.0], [2379.0, 1690.0], [2387.0, 2856.5], [2395.0, 2093.0], [2419.0, 2950.0], [2403.0, 2167.0], [2323.0, 2354.0], [2315.0, 3012.0], [2307.0, 2565.5], [2363.0, 2514.25], [2355.0, 1917.0], [2339.0, 3280.0], [2443.0, 3108.5], [2483.0, 1770.0], [2459.0, 1693.5], [2435.0, 2538.5], [2475.0, 1475.0], [2467.0, 3091.0], [513.0, 7494.0], [543.0, 7203.5], [539.0, 7205.5], [515.0, 7255.0], [527.0, 7765.0], [525.0, 8504.0], [523.0, 7522.5], [521.0, 7420.666666666667], [533.0, 8354.0], [531.0, 7389.0], [529.0, 7857.0], [571.0, 7203.0], [573.0, 7122.0], [575.0, 7161.5], [561.0, 7152.0], [559.0, 7158.0], [545.0, 7802.0], [547.0, 7280.0], [549.0, 7194.0], [551.0, 8346.0], [557.0, 7168.0], [553.0, 7178.0], [567.0, 7735.0], [565.0, 7229.0], [605.0, 8479.0], [607.0, 7671.0], [601.0, 7106.0], [591.0, 7708.0], [577.0, 7719.0], [579.0, 7717.0], [589.0, 7219.666666666667], [597.0, 7089.0], [595.0, 7135.5], [593.0, 7182.0], [635.0, 7111.0], [637.0, 7627.5], [633.0, 7624.0], [609.0, 7054.0], [611.0, 7051.0], [617.0, 7103.0], [631.0, 7021.0], [627.0, 7053.0], [647.0, 6999.0], [671.0, 7340.0], [657.0, 7105.0], [665.0, 7382.0], [645.0, 7079.0], [643.0, 7048.0], [653.0, 7081.0], [651.0, 7478.0], [663.0, 8428.0], [661.0, 7056.0], [679.0, 6953.0], [697.0, 7311.0], [701.0, 7898.333333333333], [703.0, 7468.5], [689.0, 7315.0], [675.0, 7561.0], [673.0, 7572.0], [687.0, 7268.333333333333], [681.0, 7268.0], [693.0, 7944.0], [733.0, 8072.0], [735.0, 7466.0], [721.0, 7489.0], [723.0, 7435.0], [725.0, 8272.0], [731.0, 7476.0], [729.0, 7474.0], [719.0, 7496.0], [705.0, 6985.0], [709.0, 7249.5], [707.0, 7644.5], [717.0, 7362.5], [715.0, 7272.0], [713.0, 7175.333333333333], [727.0, 7476.0], [761.0, 6857.0], [767.0, 8198.0], [753.0, 7770.0], [755.0, 7427.0], [763.0, 6855.0], [743.0, 7474.0], [741.0, 7601.5], [739.0, 7808.0], [737.0, 7456.0], [751.0, 7075.0], [749.0, 8251.0], [747.0, 7079.0], [745.0, 7443.0], [759.0, 8074.0], [797.0, 7675.0], [793.0, 6778.0], [799.0, 7205.5], [785.0, 7355.0], [787.0, 8122.0], [789.0, 6788.0], [795.0, 7335.0], [775.0, 7276.5], [773.0, 6819.0], [771.0, 7515.0], [783.0, 7587.0], [781.0, 7708.0], [777.0, 6814.0], [791.0, 7086.0], [825.0, 6690.0], [829.0, 6622.0], [831.0, 7297.0], [819.0, 8055.0], [821.0, 7640.0], [827.0, 6624.0], [807.0, 7050.5], [805.0, 7856.0], [803.0, 7328.0], [801.0, 7958.0], [815.0, 6727.0], [811.0, 7487.0], [823.0, 7005.0], [859.0, 7171.5], [861.0, 7559.666666666667], [847.0, 6582.0], [835.0, 7849.0], [837.0, 7509.0], [843.0, 6644.0], [841.0, 7588.0], [855.0, 7045.0], [853.0, 7276.0], [851.0, 7084.0], [849.0, 7876.0], [891.0, 7819.0], [895.0, 6484.0], [881.0, 7407.0], [893.0, 7392.0], [889.0, 7660.0], [879.0, 7107.0], [865.0, 7343.0], [867.0, 7507.0], [871.0, 7610.333333333333], [877.0, 6580.0], [875.0, 7151.0], [873.0, 6559.0], [887.0, 7408.0], [901.0, 7354.5], [925.0, 6423.0], [899.0, 7606.0], [897.0, 7264.0], [917.0, 6446.0], [911.0, 7399.0], [909.0, 6448.0], [905.0, 7218.0], [955.0, 7127.0], [959.0, 7777.0], [945.0, 6438.0], [957.0, 7221.0], [931.0, 7076.0], [929.0, 6423.0], [943.0, 7798.0], [941.0, 7071.0], [939.0, 7807.0], [949.0, 7344.0], [985.0, 7125.0], [979.0, 7460.0], [963.0, 6997.0], [961.0, 7649.0], [973.0, 7178.0], [971.0, 7364.0], [969.0, 7093.333333333333], [983.0, 7332.0], [981.0, 7679.0], [977.0, 7663.0], [999.0, 6766.5], [1015.0, 6979.25], [997.0, 7652.0], [995.0, 7443.0], [1005.0, 6615.5], [1003.0, 7357.0], [1001.0, 7016.0], [1074.0, 6177.0], [1086.0, 6563.5], [1058.0, 6542.0], [1078.0, 6160.0], [1054.0, 7171.666666666667], [1030.0, 6235.0], [1034.0, 6265.0], [1050.0, 7154.0], [1046.0, 7273.0], [1042.0, 7383.5], [1070.0, 7329.0], [1066.0, 7073.0], [1142.0, 5907.0], [1150.0, 5952.0], [1122.0, 6731.0], [1126.0, 6846.0], [1102.0, 6698.0], [1098.0, 6765.0], [1094.0, 7511.0], [1118.0, 6006.0], [1110.0, 7042.0], [1106.0, 6888.5], [1134.0, 6202.0], [1130.0, 6959.0], [1202.0, 7092.0], [1206.0, 6713.0], [1182.0, 5924.0], [1154.0, 7229.0], [1162.0, 7323.0], [1158.0, 7139.0], [1178.0, 6210.5], [1174.0, 6830.0], [1198.0, 6997.0], [1194.0, 5755.0], [1190.0, 6114.0], [1186.0, 6475.0], [1266.0, 5615.0], [1274.0, 6126.0], [1230.0, 5795.0], [1222.0, 5755.0], [1218.0, 6371.0], [1246.0, 6369.0], [1258.0, 6674.0], [1254.0, 7102.0], [1250.0, 5763.0], [1330.0, 6811.0], [1338.0, 6508.0], [1314.0, 6148.0], [1318.0, 5855.0], [1334.0, 6680.0], [1294.0, 6190.0], [1290.0, 6219.0], [1286.0, 5678.0], [1282.0, 5805.0], [1306.0, 6721.0], [1302.0, 5608.0], [1358.0, 6510.0], [1402.0, 5642.0], [1406.0, 5167.0], [1394.0, 5216.0], [1354.0, 6021.0], [1350.0, 6325.0], [1346.0, 5946.0], [1390.0, 5759.666666666667], [1378.0, 5589.5], [1374.0, 6284.0], [1366.0, 5874.0], [1362.0, 6247.5], [1418.0, 5896.0], [1466.0, 4694.5], [1446.0, 5765.0], [1422.0, 6274.0], [1414.0, 6507.0], [1410.0, 4912.0], [1438.0, 4749.0], [1434.0, 5095.0], [1430.0, 4971.0], [1426.0, 4867.0], [1454.0, 5534.0], [1450.0, 5239.666666666667], [1534.0, 4395.0], [1506.0, 5397.0], [1510.0, 4344.0], [1514.0, 5684.0], [1518.0, 5655.0], [1526.0, 5539.0], [1474.0, 5367.0], [1478.0, 6227.0], [1486.0, 4466.0], [1502.0, 5894.0], [1498.0, 4386.0], [1490.0, 5473.0], [1594.0, 5138.0], [1586.0, 4799.5], [1574.0, 4104.0], [1578.0, 5159.0], [1598.0, 5773.0], [1590.0, 5336.0], [1538.0, 4580.0], [1542.0, 5709.0], [1546.0, 5116.0], [1566.0, 5698.0], [1558.0, 5856.0], [1554.0, 5645.0], [1654.0, 5314.333333333333], [1634.0, 5198.0], [1638.0, 3883.0], [1642.0, 4691.5], [1650.0, 5033.0], [1602.0, 4865.0], [1606.0, 4935.0], [1610.0, 4027.0], [1614.0, 5517.0], [1626.0, 4343.0], [1622.0, 5047.0], [1618.0, 5513.0], [1646.0, 4895.0], [1722.0, 4516.0], [1718.0, 4076.0], [1702.0, 4740.0], [1698.0, 5173.0], [1710.0, 4081.0], [1726.0, 3620.0], [1678.0, 4794.7], [1666.0, 4821.0], [1694.0, 4746.0], [1690.0, 4198.0], [1686.0, 4194.0], [1682.0, 5480.0], [1790.0, 4454.0], [1766.0, 4586.0], [1770.0, 5205.0], [1774.0, 4809.0], [1782.0, 3700.0], [1778.0, 4651.0], [1734.0, 4523.0], [1730.0, 5027.0], [1758.0, 5383.0], [1842.0, 3378.0], [1850.0, 3375.0], [1826.0, 4023.0], [1830.0, 3410.0], [1834.0, 4846.0], [1838.0, 3735.0], [1806.0, 4425.0], [1802.0, 5201.0], [1798.0, 4203.0], [1818.0, 3457.0], [1814.0, 5225.0], [1810.0, 4754.0], [1906.0, 4005.0], [1914.0, 3464.0], [1918.0, 4851.0], [1890.0, 3247.0], [1894.0, 5009.0], [1902.0, 3588.0], [1858.0, 3878.0], [1870.0, 3657.0], [1886.0, 3602.0], [1878.0, 3295.0], [1874.0, 4076.5], [1974.0, 4625.0], [1958.0, 3994.3333333333335], [1962.0, 4398.0], [1982.0, 4615.0], [1970.0, 3858.5], [1926.0, 3131.0], [1930.0, 3242.0], [1934.0, 4709.0], [1946.0, 3211.0], [1942.0, 4824.0], [1938.0, 4774.0], [2042.0, 3711.0], [2018.0, 2940.0], [2026.0, 4496.0], [2030.0, 3545.3333333333335], [2046.0, 3310.0], [2034.0, 4299.0], [1986.0, 3016.0], [1990.0, 3970.0], [1994.0, 3887.0], [1998.0, 3108.0], [2014.0, 4650.0], [2006.0, 4002.0], [2002.0, 4435.0], [2172.0, 3097.0], [2116.0, 4084.0], [2124.0, 3951.0], [2132.0, 3557.75], [2140.0, 2681.5], [2148.0, 3428.0], [2052.0, 3748.0], [2060.0, 2791.0], [2068.0, 2774.0], [2076.0, 3019.0], [2108.0, 2828.0], [2100.0, 2718.0], [2092.0, 2858.0], [2084.0, 3993.5], [2276.0, 2438.0], [2300.0, 3480.0], [2260.0, 3085.75], [2268.0, 3152.0], [2284.0, 3256.0], [2204.0, 3996.0], [2188.0, 2886.5], [2180.0, 4075.0], [2236.0, 3978.0], [2228.0, 3851.0], [2220.0, 2608.0], [2212.0, 2303.0], [2404.0, 1726.0], [2380.0, 2132.0], [2428.0, 3181.0], [2388.0, 2084.0], [2412.0, 2615.0], [2332.0, 2758.0], [2316.0, 3729.0], [2308.0, 3254.0], [2356.0, 3656.0], [2348.0, 2145.5], [2340.0, 2008.0], [2500.0, 2033.7777777777778], [2452.0, 2880.0], [2444.0, 1943.0], [2436.0, 2635.0], [2484.0, 1407.0], [2476.0, 1821.0], [2165.0, 3424.5], [2125.0, 3185.5], [2133.0, 4063.0], [2173.0, 2769.0], [2053.0, 2908.0], [2061.0, 3897.0], [2069.0, 3417.0], [2077.0, 4014.0], [2109.0, 3855.0], [2101.0, 3975.0], [2085.0, 4047.0], [2301.0, 2086.0], [2245.0, 3417.0], [2253.0, 2290.0], [2261.0, 3418.0], [2269.0, 2122.0], [2293.0, 3371.0], [2285.0, 3440.0], [2205.0, 4002.0], [2197.0, 4001.5], [2189.0, 2287.0], [2181.0, 3880.0], [2237.0, 3542.0], [2229.0, 2246.0], [2221.0, 2595.0], [2213.0, 4041.0], [2421.0, 2020.0], [2413.0, 1852.5], [2381.0, 1787.0], [2389.0, 1755.0], [2429.0, 3296.0], [2405.0, 2814.0], [2333.0, 2164.5], [2325.0, 3450.0], [2317.0, 2341.0], [2309.0, 2366.0], [2365.0, 2714.0], [2349.0, 2293.0], [2341.0, 3240.0], [2461.0, 1862.0], [2445.0, 1584.0], [2437.0, 2550.0], [2493.0, 2738.0], [2477.0, 2749.0], [2469.0, 1815.0], [1079.0, 7083.0], [1063.0, 6505.5], [1055.0, 7406.0], [1027.0, 6265.0], [1031.0, 6268.0], [1035.0, 6263.0], [1039.0, 6703.5], [1047.0, 6226.0], [1043.0, 6938.0], [1071.0, 6980.5], [1067.0, 6218.0], [1059.0, 6715.666666666667], [1147.0, 6253.5], [1151.0, 7146.0], [1123.0, 6098.0], [1127.0, 7002.0], [1143.0, 5907.0], [1139.0, 6021.0], [1119.0, 6661.0], [1091.0, 6568.666666666667], [1099.0, 6478.0], [1103.0, 7071.0], [1115.0, 6412.0], [1107.0, 7494.0], [1135.0, 6375.0], [1131.0, 6265.0], [1203.0, 6431.0], [1211.0, 6535.5], [1187.0, 5918.0], [1207.0, 7141.0], [1155.0, 6624.0], [1159.0, 6656.0], [1167.0, 6970.5], [1171.0, 6832.0], [1199.0, 5742.0], [1195.0, 7025.0], [1271.0, 5604.0], [1279.0, 5590.0], [1251.0, 5632.0], [1275.0, 5601.0], [1267.0, 6934.0], [1227.0, 6306.0], [1223.0, 6716.0], [1219.0, 5814.0], [1339.0, 5982.0], [1343.0, 6422.5], [1319.0, 6139.0], [1323.0, 5446.0], [1335.0, 5388.0], [1331.0, 5424.0], [1307.0, 5903.0], [1283.0, 5583.0], [1287.0, 6331.0], [1291.0, 5620.0], [1295.0, 5626.0], [1303.0, 5562.0], [1299.0, 6058.0], [1327.0, 6259.0], [1395.0, 5214.0], [1403.0, 4937.0], [1379.0, 6211.0], [1399.0, 5976.0], [1359.0, 5333.0], [1355.0, 6018.0], [1351.0, 6722.0], [1371.0, 6365.0], [1367.0, 5927.0], [1391.0, 5865.0], [1387.0, 5942.0], [1383.0, 5598.5], [1459.0, 5519.5], [1471.0, 4540.0], [1467.0, 4965.0], [1463.0, 5584.0], [1423.0, 5935.0], [1419.0, 6031.0], [1415.0, 6077.0], [1411.0, 5156.0], [1439.0, 5350.0], [1435.0, 4893.0], [1431.0, 5117.0], [1427.0, 6247.0], [1451.0, 5779.0], [1535.0, 5730.0], [1511.0, 4353.0], [1531.0, 5331.666666666667], [1507.0, 5565.0], [1515.0, 5079.0], [1519.0, 6082.0], [1523.0, 5458.0], [1503.0, 5347.0], [1475.0, 4527.0], [1483.0, 5129.666666666667], [1487.0, 5581.0], [1495.0, 5142.0], [1491.0, 5421.0], [1587.0, 4076.0], [1595.0, 5675.0], [1599.0, 4997.0], [1571.0, 5442.0], [1575.0, 4222.333333333333], [1583.0, 5205.0], [1567.0, 5241.0], [1539.0, 5718.0], [1543.0, 4213.0], [1551.0, 4343.0], [1559.0, 4487.0], [1555.0, 5780.0], [1659.0, 4327.333333333333], [1663.0, 5233.0], [1639.0, 4865.0], [1643.0, 4924.0], [1631.0, 4330.0], [1607.0, 4395.0], [1611.0, 5777.0], [1615.0, 4015.0], [1627.0, 4341.0], [1623.0, 4360.0], [1619.0, 3990.0], [1647.0, 5466.0], [1727.0, 3694.0], [1719.0, 5479.0], [1699.0, 4486.0], [1703.0, 3750.0], [1707.0, 5471.0], [1711.0, 3654.0], [1723.0, 5214.0], [1715.0, 4912.0], [1679.0, 4209.0], [1675.0, 3881.0], [1667.0, 4067.0], [1695.0, 3799.0], [1691.0, 5114.0], [1687.0, 3996.0], [1683.0, 5127.0], [1763.0, 4461.0], [1791.0, 5001.0], [1771.0, 5111.0], [1775.0, 4513.0], [1779.0, 3924.0], [1759.0, 4194.0], [1751.0, 4283.5], [1747.0, 4035.0], [1851.0, 3799.0], [1827.0, 4981.0], [1831.0, 3581.0], [1835.0, 3537.0], [1839.0, 3739.0], [1847.0, 4242.5], [1843.0, 3387.0], [1803.0, 5222.0], [1799.0, 3657.0], [1823.0, 3602.0], [1819.0, 4436.0], [1811.0, 4017.0], [1911.0, 4362.5], [1899.0, 3720.3333333333335], [1903.0, 3293.0], [1915.0, 3203.0], [1907.0, 4296.0], [1887.0, 3424.0], [1859.0, 3705.0], [1863.0, 3238.0], [1867.0, 3684.0], [1871.0, 3296.5], [1883.0, 3886.25], [1879.0, 3306.0], [1975.0, 3372.0], [1971.0, 3091.0], [1983.0, 3316.0], [1967.0, 3098.0], [1979.0, 3803.5], [1935.0, 3162.0], [1947.0, 4763.0], [1943.0, 3214.0], [1939.0, 4673.0], [2043.0, 2774.0], [2039.0, 3423.5714285714284], [2047.0, 4343.0], [2019.0, 3202.0], [2023.0, 3904.5], [2027.0, 2876.0], [2015.0, 2888.0], [1991.0, 3310.0], [1995.0, 3019.0], [1999.0, 4682.0], [2011.0, 3462.0], [2007.0, 4392.0], [2003.0, 2996.0], [2174.0, 3410.0], [2158.0, 2972.0], [2118.0, 3570.5], [2126.0, 3655.0], [2134.0, 2891.0], [2142.0, 3323.5], [2150.0, 3852.0], [2054.0, 4242.0], [2062.0, 3150.0], [2078.0, 3039.0], [2102.0, 3682.0], [2094.0, 4063.0], [2086.0, 2678.0], [2294.0, 3335.5], [2278.0, 2906.5], [2246.0, 3535.0], [2262.0, 2059.0], [2270.0, 3359.0], [2302.0, 3698.0], [2286.0, 3563.0], [2198.0, 2355.0], [2182.0, 4012.0], [2230.0, 3958.0], [2222.0, 2615.0], [2214.0, 2661.0], [2422.0, 2010.0], [2414.0, 1680.0], [2374.0, 2788.3333333333335], [2382.0, 3377.0], [2398.0, 3204.3333333333335], [2430.0, 1991.0], [2406.0, 1711.0], [2334.0, 1983.0], [2318.0, 3180.0], [2366.0, 1851.0], [2358.0, 2476.5], [2350.0, 1851.0], [2342.0, 3068.0], [2454.0, 2213.0], [2446.0, 2519.0], [2462.0, 1859.0], [2438.0, 3269.0], [2486.0, 1403.5], [2478.0, 1625.5], [2470.0, 2404.0], [2159.0, 3165.0], [2167.0, 2692.5], [2119.0, 2523.0], [2127.0, 3562.0], [2135.0, 2975.0], [2151.0, 2837.0], [2111.0, 3371.0], [2055.0, 4007.0], [2063.0, 3079.0], [2071.0, 3815.5], [2079.0, 2687.0], [2103.0, 2648.0], [2095.0, 2987.0], [2087.0, 2737.0], [2287.0, 2127.0], [2295.0, 3004.0], [2303.0, 3327.0], [2247.0, 3372.0], [2271.0, 3647.0], [2279.0, 3014.0], [2207.0, 3609.5], [2199.0, 2692.0], [2191.0, 3653.5], [2239.0, 2338.5], [2231.0, 2603.0], [2223.0, 3839.0], [2215.0, 3214.0], [2423.0, 2923.0], [2415.0, 2701.0], [2431.0, 1992.0], [2375.0, 1811.0], [2383.0, 2925.0], [2391.0, 1750.0], [2399.0, 2076.0], [2407.0, 3437.0], [2335.0, 2017.0], [2327.0, 2573.0], [2319.0, 1997.0], [2311.0, 3326.0], [2367.0, 3318.0], [2359.0, 2238.0], [2351.0, 3195.0], [2343.0, 3530.0], [2439.0, 3090.0], [2463.0, 1721.0], [2447.0, 2761.0], [2487.0, 1405.0], [2479.0, 2394.0], [1.0, 7770.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}, {"data": [[1251.1888000000017, 5758.796400000002]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18833.333333333332, "minX": 1.755588E12, "maxY": 241416.66666666666, "series": [{"data": [[1.755588E12, 241416.66666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.755588E12, 18833.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.755588E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5758.796400000002, "minX": 1.755588E12, "maxY": 5758.796400000002, "series": [{"data": [[1.755588E12, 5758.796400000002]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.755588E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5758.749200000004, "minX": 1.755588E12, "maxY": 5758.749200000004, "series": [{"data": [[1.755588E12, 5758.749200000004]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.755588E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5487.741599999992, "minX": 1.755588E12, "maxY": 5487.741599999992, "series": [{"data": [[1.755588E12, 5487.741599999992]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.755588E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1381.0, "minX": 1.755588E12, "maxY": 9202.0, "series": [{"data": [[1.755588E12, 9202.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.755588E12, 8090.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.755588E12, 8948.849999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.755588E12, 8520.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.755588E12, 1381.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.755588E12, 6236.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.755588E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1911.0, "minX": 4.0, "maxY": 7916.0, "series": [{"data": [[4.0, 7916.0], [317.0, 2925.0], [313.0, 4865.0], [305.0, 6026.0], [348.0, 3700.5], [700.0, 7559.0], [450.0, 7151.0], [63.0, 1911.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 700.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1911.0, "minX": 4.0, "maxY": 7916.0, "series": [{"data": [[4.0, 7916.0], [317.0, 2924.0], [313.0, 4865.0], [305.0, 6026.0], [348.0, 3700.5], [700.0, 7559.0], [450.0, 7150.5], [63.0, 1911.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 700.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.755588E12, "maxY": 41.666666666666664, "series": [{"data": [[1.755588E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.755588E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.755588E12, "maxY": 41.666666666666664, "series": [{"data": [[1.755588E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.755588E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.755588E12, "maxY": 41.666666666666664, "series": [{"data": [[1.755588E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.755588E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.755588E12, "maxY": 41.666666666666664, "series": [{"data": [[1.755588E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.755588E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

