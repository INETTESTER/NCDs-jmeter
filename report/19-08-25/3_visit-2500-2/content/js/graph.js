/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 520.0, "minX": 0.0, "maxY": 6970.0, "series": [{"data": [[0.0, 520.0], [0.1, 524.0], [0.2, 531.0], [0.3, 567.0], [0.4, 618.0], [0.5, 642.0], [0.6, 772.0], [0.7, 791.0], [0.8, 803.0], [0.9, 830.0], [1.0, 856.0], [1.1, 876.0], [1.2, 886.0], [1.3, 902.0], [1.4, 926.0], [1.5, 940.0], [1.6, 943.0], [1.7, 963.0], [1.8, 963.0], [1.9, 1005.0], [2.0, 1015.0], [2.1, 1043.0], [2.2, 1050.0], [2.3, 1078.0], [2.4, 1091.0], [2.5, 1138.0], [2.6, 1143.0], [2.7, 1158.0], [2.8, 1159.0], [2.9, 1179.0], [3.0, 1182.0], [3.1, 1188.0], [3.2, 1189.0], [3.3, 1199.0], [3.4, 1205.0], [3.5, 1206.0], [3.6, 1206.0], [3.7, 1214.0], [3.8, 1220.0], [3.9, 1231.0], [4.0, 1234.0], [4.1, 1237.0], [4.2, 1245.0], [4.3, 1253.0], [4.4, 1256.0], [4.5, 1263.0], [4.6, 1265.0], [4.7, 1279.0], [4.8, 1280.0], [4.9, 1308.0], [5.0, 1315.0], [5.1, 1325.0], [5.2, 1326.0], [5.3, 1336.0], [5.4, 1337.0], [5.5, 1353.0], [5.6, 1359.0], [5.7, 1361.0], [5.8, 1367.0], [5.9, 1384.0], [6.0, 1392.0], [6.1, 1402.0], [6.2, 1402.0], [6.3, 1413.0], [6.4, 1421.0], [6.5, 1432.0], [6.6, 1440.0], [6.7, 1447.0], [6.8, 1454.0], [6.9, 1460.0], [7.0, 1460.0], [7.1, 1467.0], [7.2, 1476.0], [7.3, 1484.0], [7.4, 1494.0], [7.5, 1499.0], [7.6, 1502.0], [7.7, 1506.0], [7.8, 1508.0], [7.9, 1522.0], [8.0, 1526.0], [8.1, 1535.0], [8.2, 1541.0], [8.3, 1550.0], [8.4, 1570.0], [8.5, 1578.0], [8.6, 1592.0], [8.7, 1615.0], [8.8, 1630.0], [8.9, 1665.0], [9.0, 1680.0], [9.1, 1686.0], [9.2, 1690.0], [9.3, 1695.0], [9.4, 1699.0], [9.5, 1701.0], [9.6, 1716.0], [9.7, 1720.0], [9.8, 1723.0], [9.9, 1729.0], [10.0, 1739.0], [10.1, 1740.0], [10.2, 1744.0], [10.3, 1747.0], [10.4, 1754.0], [10.5, 1756.0], [10.6, 1761.0], [10.7, 1771.0], [10.8, 1777.0], [10.9, 1780.0], [11.0, 1785.0], [11.1, 1787.0], [11.2, 1826.0], [11.3, 1844.0], [11.4, 1853.0], [11.5, 1853.0], [11.6, 1866.0], [11.7, 1872.0], [11.8, 1893.0], [11.9, 1897.0], [12.0, 1903.0], [12.1, 1912.0], [12.2, 1919.0], [12.3, 1919.0], [12.4, 1922.0], [12.5, 1932.0], [12.6, 1939.0], [12.7, 1948.0], [12.8, 1966.0], [12.9, 1971.0], [13.0, 1979.0], [13.1, 1984.0], [13.2, 1992.0], [13.3, 1995.0], [13.4, 2008.0], [13.5, 2009.0], [13.6, 2014.0], [13.7, 2015.0], [13.8, 2016.0], [13.9, 2019.0], [14.0, 2022.0], [14.1, 2032.0], [14.2, 2044.0], [14.3, 2046.0], [14.4, 2050.0], [14.5, 2057.0], [14.6, 2062.0], [14.7, 2064.0], [14.8, 2079.0], [14.9, 2081.0], [15.0, 2091.0], [15.1, 2094.0], [15.2, 2101.0], [15.3, 2101.0], [15.4, 2113.0], [15.5, 2120.0], [15.6, 2128.0], [15.7, 2137.0], [15.8, 2142.0], [15.9, 2147.0], [16.0, 2152.0], [16.1, 2153.0], [16.2, 2160.0], [16.3, 2165.0], [16.4, 2168.0], [16.5, 2169.0], [16.6, 2172.0], [16.7, 2175.0], [16.8, 2181.0], [16.9, 2189.0], [17.0, 2204.0], [17.1, 2212.0], [17.2, 2227.0], [17.3, 2233.0], [17.4, 2240.0], [17.5, 2241.0], [17.6, 2252.0], [17.7, 2253.0], [17.8, 2254.0], [17.9, 2260.0], [18.0, 2268.0], [18.1, 2270.0], [18.2, 2280.0], [18.3, 2283.0], [18.4, 2284.0], [18.5, 2287.0], [18.6, 2294.0], [18.7, 2297.0], [18.8, 2300.0], [18.9, 2302.0], [19.0, 2308.0], [19.1, 2314.0], [19.2, 2318.0], [19.3, 2319.0], [19.4, 2320.0], [19.5, 2324.0], [19.6, 2331.0], [19.7, 2332.0], [19.8, 2336.0], [19.9, 2343.0], [20.0, 2346.0], [20.1, 2349.0], [20.2, 2355.0], [20.3, 2366.0], [20.4, 2377.0], [20.5, 2378.0], [20.6, 2389.0], [20.7, 2392.0], [20.8, 2410.0], [20.9, 2420.0], [21.0, 2427.0], [21.1, 2431.0], [21.2, 2438.0], [21.3, 2448.0], [21.4, 2467.0], [21.5, 2470.0], [21.6, 2478.0], [21.7, 2484.0], [21.8, 2488.0], [21.9, 2494.0], [22.0, 2505.0], [22.1, 2507.0], [22.2, 2508.0], [22.3, 2510.0], [22.4, 2530.0], [22.5, 2532.0], [22.6, 2536.0], [22.7, 2545.0], [22.8, 2549.0], [22.9, 2553.0], [23.0, 2576.0], [23.1, 2577.0], [23.2, 2586.0], [23.3, 2588.0], [23.4, 2592.0], [23.5, 2598.0], [23.6, 2606.0], [23.7, 2611.0], [23.8, 2622.0], [23.9, 2637.0], [24.0, 2652.0], [24.1, 2658.0], [24.2, 2666.0], [24.3, 2677.0], [24.4, 2691.0], [24.5, 2708.0], [24.6, 2741.0], [24.7, 2751.0], [24.8, 2758.0], [24.9, 2758.0], [25.0, 2764.0], [25.1, 2766.0], [25.2, 2769.0], [25.3, 2778.0], [25.4, 2781.0], [25.5, 2782.0], [25.6, 2785.0], [25.7, 2787.0], [25.8, 2792.0], [25.9, 2797.0], [26.0, 2801.0], [26.1, 2805.0], [26.2, 2811.0], [26.3, 2812.0], [26.4, 2817.0], [26.5, 2819.0], [26.6, 2821.0], [26.7, 2833.0], [26.8, 2840.0], [26.9, 2850.0], [27.0, 2852.0], [27.1, 2855.0], [27.2, 2857.0], [27.3, 2861.0], [27.4, 2867.0], [27.5, 2869.0], [27.6, 2871.0], [27.7, 2875.0], [27.8, 2878.0], [27.9, 2881.0], [28.0, 2889.0], [28.1, 2893.0], [28.2, 2910.0], [28.3, 2912.0], [28.4, 2916.0], [28.5, 2918.0], [28.6, 2922.0], [28.7, 2925.0], [28.8, 2954.0], [28.9, 2960.0], [29.0, 2967.0], [29.1, 2970.0], [29.2, 2972.0], [29.3, 2974.0], [29.4, 2978.0], [29.5, 2981.0], [29.6, 2987.0], [29.7, 2995.0], [29.8, 2999.0], [29.9, 3001.0], [30.0, 3002.0], [30.1, 3007.0], [30.2, 3010.0], [30.3, 3014.0], [30.4, 3019.0], [30.5, 3024.0], [30.6, 3054.0], [30.7, 3058.0], [30.8, 3076.0], [30.9, 3077.0], [31.0, 3081.0], [31.1, 3088.0], [31.2, 3097.0], [31.3, 3100.0], [31.4, 3108.0], [31.5, 3121.0], [31.6, 3136.0], [31.7, 3137.0], [31.8, 3143.0], [31.9, 3146.0], [32.0, 3158.0], [32.1, 3159.0], [32.2, 3164.0], [32.3, 3165.0], [32.4, 3170.0], [32.5, 3174.0], [32.6, 3183.0], [32.7, 3186.0], [32.8, 3203.0], [32.9, 3205.0], [33.0, 3222.0], [33.1, 3233.0], [33.2, 3244.0], [33.3, 3255.0], [33.4, 3294.0], [33.5, 3309.0], [33.6, 3323.0], [33.7, 3329.0], [33.8, 3341.0], [33.9, 3354.0], [34.0, 3357.0], [34.1, 3365.0], [34.2, 3379.0], [34.3, 3380.0], [34.4, 3389.0], [34.5, 3394.0], [34.6, 3405.0], [34.7, 3406.0], [34.8, 3414.0], [34.9, 3426.0], [35.0, 3435.0], [35.1, 3437.0], [35.2, 3448.0], [35.3, 3454.0], [35.4, 3459.0], [35.5, 3466.0], [35.6, 3498.0], [35.7, 3505.0], [35.8, 3511.0], [35.9, 3517.0], [36.0, 3532.0], [36.1, 3543.0], [36.2, 3546.0], [36.3, 3564.0], [36.4, 3568.0], [36.5, 3573.0], [36.6, 3579.0], [36.7, 3580.0], [36.8, 3590.0], [36.9, 3601.0], [37.0, 3639.0], [37.1, 3677.0], [37.2, 3704.0], [37.3, 3712.0], [37.4, 3755.0], [37.5, 3758.0], [37.6, 3780.0], [37.7, 3797.0], [37.8, 3805.0], [37.9, 3809.0], [38.0, 3821.0], [38.1, 3825.0], [38.2, 3864.0], [38.3, 3875.0], [38.4, 3888.0], [38.5, 3896.0], [38.6, 3949.0], [38.7, 3972.0], [38.8, 4027.0], [38.9, 4039.0], [39.0, 4043.0], [39.1, 4045.0], [39.2, 4051.0], [39.3, 4054.0], [39.4, 4059.0], [39.5, 4064.0], [39.6, 4072.0], [39.7, 4075.0], [39.8, 4078.0], [39.9, 4090.0], [40.0, 4098.0], [40.1, 4106.0], [40.2, 4108.0], [40.3, 4110.0], [40.4, 4121.0], [40.5, 4131.0], [40.6, 4158.0], [40.7, 4164.0], [40.8, 4166.0], [40.9, 4177.0], [41.0, 4184.0], [41.1, 4193.0], [41.2, 4212.0], [41.3, 4216.0], [41.4, 4240.0], [41.5, 4258.0], [41.6, 4271.0], [41.7, 4283.0], [41.8, 4290.0], [41.9, 4293.0], [42.0, 4295.0], [42.1, 4296.0], [42.2, 4298.0], [42.3, 4300.0], [42.4, 4301.0], [42.5, 4307.0], [42.6, 4310.0], [42.7, 4313.0], [42.8, 4317.0], [42.9, 4321.0], [43.0, 4331.0], [43.1, 4332.0], [43.2, 4334.0], [43.3, 4336.0], [43.4, 4342.0], [43.5, 4344.0], [43.6, 4352.0], [43.7, 4356.0], [43.8, 4363.0], [43.9, 4365.0], [44.0, 4371.0], [44.1, 4373.0], [44.2, 4380.0], [44.3, 4384.0], [44.4, 4391.0], [44.5, 4395.0], [44.6, 4403.0], [44.7, 4404.0], [44.8, 4414.0], [44.9, 4418.0], [45.0, 4421.0], [45.1, 4422.0], [45.2, 4427.0], [45.3, 4428.0], [45.4, 4430.0], [45.5, 4430.0], [45.6, 4431.0], [45.7, 4431.0], [45.8, 4435.0], [45.9, 4436.0], [46.0, 4442.0], [46.1, 4447.0], [46.2, 4449.0], [46.3, 4461.0], [46.4, 4467.0], [46.5, 4472.0], [46.6, 4477.0], [46.7, 4482.0], [46.8, 4487.0], [46.9, 4489.0], [47.0, 4491.0], [47.1, 4491.0], [47.2, 4497.0], [47.3, 4498.0], [47.4, 4499.0], [47.5, 4506.0], [47.6, 4513.0], [47.7, 4515.0], [47.8, 4522.0], [47.9, 4525.0], [48.0, 4533.0], [48.1, 4534.0], [48.2, 4540.0], [48.3, 4543.0], [48.4, 4548.0], [48.5, 4549.0], [48.6, 4553.0], [48.7, 4555.0], [48.8, 4560.0], [48.9, 4562.0], [49.0, 4565.0], [49.1, 4566.0], [49.2, 4569.0], [49.3, 4574.0], [49.4, 4585.0], [49.5, 4586.0], [49.6, 4588.0], [49.7, 4588.0], [49.8, 4591.0], [49.9, 4592.0], [50.0, 4597.0], [50.1, 4598.0], [50.2, 4617.0], [50.3, 4627.0], [50.4, 4627.0], [50.5, 4631.0], [50.6, 4634.0], [50.7, 4636.0], [50.8, 4640.0], [50.9, 4642.0], [51.0, 4650.0], [51.1, 4654.0], [51.2, 4656.0], [51.3, 4660.0], [51.4, 4662.0], [51.5, 4663.0], [51.6, 4668.0], [51.7, 4673.0], [51.8, 4676.0], [51.9, 4677.0], [52.0, 4684.0], [52.1, 4687.0], [52.2, 4690.0], [52.3, 4692.0], [52.4, 4705.0], [52.5, 4707.0], [52.6, 4719.0], [52.7, 4722.0], [52.8, 4727.0], [52.9, 4736.0], [53.0, 4739.0], [53.1, 4741.0], [53.2, 4745.0], [53.3, 4752.0], [53.4, 4758.0], [53.5, 4761.0], [53.6, 4763.0], [53.7, 4764.0], [53.8, 4767.0], [53.9, 4770.0], [54.0, 4771.0], [54.1, 4775.0], [54.2, 4780.0], [54.3, 4783.0], [54.4, 4784.0], [54.5, 4784.0], [54.6, 4791.0], [54.7, 4792.0], [54.8, 4798.0], [54.9, 4800.0], [55.0, 4805.0], [55.1, 4809.0], [55.2, 4810.0], [55.3, 4816.0], [55.4, 4817.0], [55.5, 4818.0], [55.6, 4823.0], [55.7, 4823.0], [55.8, 4825.0], [55.9, 4827.0], [56.0, 4828.0], [56.1, 4829.0], [56.2, 4829.0], [56.3, 4832.0], [56.4, 4836.0], [56.5, 4836.0], [56.6, 4843.0], [56.7, 4843.0], [56.8, 4845.0], [56.9, 4846.0], [57.0, 4848.0], [57.1, 4850.0], [57.2, 4854.0], [57.3, 4856.0], [57.4, 4856.0], [57.5, 4856.0], [57.6, 4861.0], [57.7, 4862.0], [57.8, 4866.0], [57.9, 4867.0], [58.0, 4870.0], [58.1, 4871.0], [58.2, 4871.0], [58.3, 4872.0], [58.4, 4873.0], [58.5, 4873.0], [58.6, 4874.0], [58.7, 4875.0], [58.8, 4876.0], [58.9, 4878.0], [59.0, 4879.0], [59.1, 4883.0], [59.2, 4883.0], [59.3, 4884.0], [59.4, 4885.0], [59.5, 4886.0], [59.6, 4889.0], [59.7, 4890.0], [59.8, 4893.0], [59.9, 4895.0], [60.0, 4900.0], [60.1, 4904.0], [60.2, 4907.0], [60.3, 4910.0], [60.4, 4915.0], [60.5, 4918.0], [60.6, 4921.0], [60.7, 4923.0], [60.8, 4924.0], [60.9, 4925.0], [61.0, 4926.0], [61.1, 4926.0], [61.2, 4927.0], [61.3, 4927.0], [61.4, 4928.0], [61.5, 4929.0], [61.6, 4931.0], [61.7, 4932.0], [61.8, 4933.0], [61.9, 4936.0], [62.0, 4937.0], [62.1, 4942.0], [62.2, 4952.0], [62.3, 4957.0], [62.4, 4959.0], [62.5, 4964.0], [62.6, 4970.0], [62.7, 4972.0], [62.8, 4981.0], [62.9, 4984.0], [63.0, 4988.0], [63.1, 4994.0], [63.2, 5001.0], [63.3, 5002.0], [63.4, 5012.0], [63.5, 5013.0], [63.6, 5019.0], [63.7, 5024.0], [63.8, 5029.0], [63.9, 5036.0], [64.0, 5053.0], [64.1, 5056.0], [64.2, 5060.0], [64.3, 5067.0], [64.4, 5075.0], [64.5, 5075.0], [64.6, 5078.0], [64.7, 5083.0], [64.8, 5088.0], [64.9, 5092.0], [65.0, 5099.0], [65.1, 5111.0], [65.2, 5127.0], [65.3, 5130.0], [65.4, 5133.0], [65.5, 5135.0], [65.6, 5155.0], [65.7, 5158.0], [65.8, 5164.0], [65.9, 5205.0], [66.0, 5228.0], [66.1, 5254.0], [66.2, 5267.0], [66.3, 5274.0], [66.4, 5282.0], [66.5, 5287.0], [66.6, 5292.0], [66.7, 5296.0], [66.8, 5311.0], [66.9, 5314.0], [67.0, 5319.0], [67.1, 5328.0], [67.2, 5335.0], [67.3, 5336.0], [67.4, 5339.0], [67.5, 5341.0], [67.6, 5348.0], [67.7, 5350.0], [67.8, 5351.0], [67.9, 5354.0], [68.0, 5359.0], [68.1, 5363.0], [68.2, 5366.0], [68.3, 5366.0], [68.4, 5370.0], [68.5, 5372.0], [68.6, 5373.0], [68.7, 5374.0], [68.8, 5377.0], [68.9, 5379.0], [69.0, 5380.0], [69.1, 5380.0], [69.2, 5381.0], [69.3, 5382.0], [69.4, 5382.0], [69.5, 5382.0], [69.6, 5384.0], [69.7, 5385.0], [69.8, 5389.0], [69.9, 5391.0], [70.0, 5394.0], [70.1, 5399.0], [70.2, 5401.0], [70.3, 5403.0], [70.4, 5406.0], [70.5, 5407.0], [70.6, 5415.0], [70.7, 5416.0], [70.8, 5418.0], [70.9, 5418.0], [71.0, 5421.0], [71.1, 5421.0], [71.2, 5422.0], [71.3, 5423.0], [71.4, 5424.0], [71.5, 5425.0], [71.6, 5427.0], [71.7, 5430.0], [71.8, 5430.0], [71.9, 5432.0], [72.0, 5433.0], [72.1, 5433.0], [72.2, 5436.0], [72.3, 5436.0], [72.4, 5437.0], [72.5, 5439.0], [72.6, 5440.0], [72.7, 5441.0], [72.8, 5443.0], [72.9, 5447.0], [73.0, 5448.0], [73.1, 5450.0], [73.2, 5453.0], [73.3, 5453.0], [73.4, 5455.0], [73.5, 5455.0], [73.6, 5456.0], [73.7, 5457.0], [73.8, 5459.0], [73.9, 5459.0], [74.0, 5463.0], [74.1, 5465.0], [74.2, 5467.0], [74.3, 5468.0], [74.4, 5474.0], [74.5, 5474.0], [74.6, 5476.0], [74.7, 5476.0], [74.8, 5479.0], [74.9, 5479.0], [75.0, 5479.0], [75.1, 5481.0], [75.2, 5484.0], [75.3, 5487.0], [75.4, 5490.0], [75.5, 5495.0], [75.6, 5497.0], [75.7, 5497.0], [75.8, 5501.0], [75.9, 5508.0], [76.0, 5510.0], [76.1, 5513.0], [76.2, 5519.0], [76.3, 5519.0], [76.4, 5523.0], [76.5, 5526.0], [76.6, 5528.0], [76.7, 5532.0], [76.8, 5533.0], [76.9, 5539.0], [77.0, 5541.0], [77.1, 5541.0], [77.2, 5542.0], [77.3, 5543.0], [77.4, 5544.0], [77.5, 5544.0], [77.6, 5554.0], [77.7, 5557.0], [77.8, 5560.0], [77.9, 5561.0], [78.0, 5563.0], [78.1, 5564.0], [78.2, 5566.0], [78.3, 5568.0], [78.4, 5569.0], [78.5, 5572.0], [78.6, 5574.0], [78.7, 5576.0], [78.8, 5577.0], [78.9, 5577.0], [79.0, 5578.0], [79.1, 5579.0], [79.2, 5580.0], [79.3, 5581.0], [79.4, 5583.0], [79.5, 5583.0], [79.6, 5586.0], [79.7, 5587.0], [79.8, 5588.0], [79.9, 5588.0], [80.0, 5588.0], [80.1, 5589.0], [80.2, 5589.0], [80.3, 5590.0], [80.4, 5593.0], [80.5, 5596.0], [80.6, 5599.0], [80.7, 5601.0], [80.8, 5607.0], [80.9, 5609.0], [81.0, 5610.0], [81.1, 5611.0], [81.2, 5613.0], [81.3, 5614.0], [81.4, 5618.0], [81.5, 5619.0], [81.6, 5621.0], [81.7, 5621.0], [81.8, 5622.0], [81.9, 5623.0], [82.0, 5625.0], [82.1, 5627.0], [82.2, 5628.0], [82.3, 5632.0], [82.4, 5633.0], [82.5, 5634.0], [82.6, 5637.0], [82.7, 5638.0], [82.8, 5639.0], [82.9, 5640.0], [83.0, 5643.0], [83.1, 5644.0], [83.2, 5646.0], [83.3, 5650.0], [83.4, 5653.0], [83.5, 5656.0], [83.6, 5657.0], [83.7, 5659.0], [83.8, 5666.0], [83.9, 5668.0], [84.0, 5669.0], [84.1, 5670.0], [84.2, 5675.0], [84.3, 5678.0], [84.4, 5681.0], [84.5, 5684.0], [84.6, 5694.0], [84.7, 5703.0], [84.8, 5709.0], [84.9, 5710.0], [85.0, 5713.0], [85.1, 5718.0], [85.2, 5721.0], [85.3, 5722.0], [85.4, 5729.0], [85.5, 5730.0], [85.6, 5736.0], [85.7, 5739.0], [85.8, 5741.0], [85.9, 5744.0], [86.0, 5746.0], [86.1, 5759.0], [86.2, 5762.0], [86.3, 5762.0], [86.4, 5770.0], [86.5, 5774.0], [86.6, 5784.0], [86.7, 5789.0], [86.8, 5795.0], [86.9, 5803.0], [87.0, 5808.0], [87.1, 5814.0], [87.2, 5821.0], [87.3, 5828.0], [87.4, 5831.0], [87.5, 5833.0], [87.6, 5839.0], [87.7, 5847.0], [87.8, 5849.0], [87.9, 5850.0], [88.0, 5851.0], [88.1, 5857.0], [88.2, 5858.0], [88.3, 5861.0], [88.4, 5865.0], [88.5, 5869.0], [88.6, 5870.0], [88.7, 5876.0], [88.8, 5877.0], [88.9, 5881.0], [89.0, 5882.0], [89.1, 5885.0], [89.2, 5885.0], [89.3, 5889.0], [89.4, 5891.0], [89.5, 5892.0], [89.6, 5894.0], [89.7, 5895.0], [89.8, 5896.0], [89.9, 5897.0], [90.0, 5898.0], [90.1, 5900.0], [90.2, 5902.0], [90.3, 5905.0], [90.4, 5916.0], [90.5, 5924.0], [90.6, 5925.0], [90.7, 5928.0], [90.8, 5929.0], [90.9, 5932.0], [91.0, 5934.0], [91.1, 5948.0], [91.2, 5950.0], [91.3, 5961.0], [91.4, 5965.0], [91.5, 5980.0], [91.6, 5984.0], [91.7, 5986.0], [91.8, 5990.0], [91.9, 5997.0], [92.0, 5997.0], [92.1, 6001.0], [92.2, 6014.0], [92.3, 6030.0], [92.4, 6034.0], [92.5, 6047.0], [92.6, 6062.0], [92.7, 6079.0], [92.8, 6081.0], [92.9, 6086.0], [93.0, 6088.0], [93.1, 6114.0], [93.2, 6125.0], [93.3, 6130.0], [93.4, 6148.0], [93.5, 6188.0], [93.6, 6191.0], [93.7, 6193.0], [93.8, 6199.0], [93.9, 6208.0], [94.0, 6215.0], [94.1, 6216.0], [94.2, 6219.0], [94.3, 6231.0], [94.4, 6239.0], [94.5, 6252.0], [94.6, 6257.0], [94.7, 6264.0], [94.8, 6277.0], [94.9, 6284.0], [95.0, 6300.0], [95.1, 6304.0], [95.2, 6306.0], [95.3, 6309.0], [95.4, 6310.0], [95.5, 6314.0], [95.6, 6324.0], [95.7, 6325.0], [95.8, 6325.0], [95.9, 6326.0], [96.0, 6327.0], [96.1, 6336.0], [96.2, 6340.0], [96.3, 6341.0], [96.4, 6342.0], [96.5, 6345.0], [96.6, 6347.0], [96.7, 6350.0], [96.8, 6352.0], [96.9, 6356.0], [97.0, 6359.0], [97.1, 6362.0], [97.2, 6365.0], [97.3, 6378.0], [97.4, 6387.0], [97.5, 6391.0], [97.6, 6402.0], [97.7, 6406.0], [97.8, 6414.0], [97.9, 6441.0], [98.0, 6446.0], [98.1, 6448.0], [98.2, 6456.0], [98.3, 6462.0], [98.4, 6468.0], [98.5, 6482.0], [98.6, 6489.0], [98.7, 6503.0], [98.8, 6510.0], [98.9, 6521.0], [99.0, 6541.0], [99.1, 6549.0], [99.2, 6562.0], [99.3, 6597.0], [99.4, 6599.0], [99.5, 6635.0], [99.6, 6653.0], [99.7, 6725.0], [99.8, 6868.0], [99.9, 6904.0], [100.0, 6970.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 500.0, "maxY": 140.0, "series": [{"data": [[600.0, 5.0], [700.0, 5.0], [800.0, 13.0], [900.0, 15.0], [1000.0, 13.0], [1100.0, 23.0], [1200.0, 38.0], [1300.0, 31.0], [1400.0, 37.0], [1500.0, 27.0], [1600.0, 20.0], [1700.0, 42.0], [1800.0, 20.0], [1900.0, 37.0], [2000.0, 45.0], [2100.0, 44.0], [2200.0, 46.0], [2300.0, 49.0], [2400.0, 30.0], [2500.0, 39.0], [2600.0, 23.0], [2700.0, 39.0], [2800.0, 54.0], [2900.0, 42.0], [3000.0, 36.0], [3100.0, 37.0], [3200.0, 18.0], [3300.0, 27.0], [3400.0, 27.0], [3500.0, 31.0], [3600.0, 8.0], [3700.0, 13.0], [3800.0, 20.0], [3900.0, 6.0], [4000.0, 33.0], [4200.0, 27.0], [4100.0, 28.0], [4300.0, 57.0], [4400.0, 72.0], [4500.0, 67.0], [4600.0, 57.0], [4700.0, 62.0], [4800.0, 128.0], [4900.0, 80.0], [5000.0, 46.0], [5100.0, 21.0], [5200.0, 22.0], [5300.0, 85.0], [5400.0, 140.0], [5500.0, 122.0], [5600.0, 100.0], [5700.0, 55.0], [5800.0, 81.0], [5900.0, 49.0], [6000.0, 26.0], [6100.0, 18.0], [6200.0, 29.0], [6300.0, 65.0], [6400.0, 27.0], [6500.0, 19.0], [6600.0, 7.0], [6900.0, 3.0], [6800.0, 3.0], [6700.0, 2.0], [500.0, 9.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 189.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2311.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 189.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2311.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.1088, "minX": 1.75558716E12, "maxY": 1251.1088, "series": [{"data": [[1.75558716E12, 1251.1088]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558716E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 529.0, "minX": 1.0, "maxY": 6904.0, "series": [{"data": [[2.0, 6014.0], [3.0, 6904.0], [4.0, 5645.0], [7.0, 5656.333333333333], [9.0, 5606.5], [11.0, 5640.0], [12.0, 6027.0], [14.0, 5634.0], [15.0, 5588.0], [16.0, 5640.0], [17.0, 5638.0], [18.0, 5627.0], [19.0, 5625.0], [20.0, 5625.0], [21.0, 5621.0], [23.0, 5620.5], [26.0, 5613.0], [28.0, 5612.0], [31.0, 5609.666666666667], [33.0, 5608.0], [34.0, 5608.0], [36.0, 5605.5], [39.0, 6446.666666666667], [41.0, 6904.0], [42.0, 6358.5], [45.0, 5901.0], [44.0, 6725.0], [48.0, 5941.666666666667], [51.0, 6193.0], [50.0, 5730.0], [52.0, 5568.5], [55.0, 5598.0], [56.0, 5562.0], [58.0, 5599.0], [60.0, 5639.0], [64.0, 6038.5], [71.0, 5721.0], [70.0, 5628.0], [69.0, 5957.0], [68.0, 6239.0], [74.0, 6325.0], [73.0, 5698.5], [72.0, 5920.5], [77.0, 5890.0], [76.0, 6264.5], [83.0, 6896.0], [82.0, 6205.0], [81.0, 6189.0], [80.0, 5621.0], [87.0, 6593.0], [86.0, 5762.0], [85.0, 5627.0], [84.0, 5675.0], [95.0, 6304.0], [94.0, 5970.0], [92.0, 5588.8], [99.0, 6191.0], [98.0, 5556.0], [96.0, 5622.0], [103.0, 5582.5], [101.0, 5584.666666666667], [106.0, 5580.0], [105.0, 5580.5], [111.0, 5576.333333333333], [108.0, 5578.0], [115.0, 5579.0], [119.0, 5573.666666666667], [116.0, 5576.25], [123.0, 5559.0], [122.0, 5565.5], [120.0, 5568.0], [127.0, 5543.0], [125.0, 5543.0], [134.0, 5539.0], [133.0, 5539.0], [132.0, 5541.0], [131.0, 5543.0], [128.0, 5542.0], [143.0, 5518.0], [142.0, 5519.0], [141.0, 5519.0], [140.0, 5519.0], [139.0, 5521.0], [138.0, 5532.0], [136.0, 5534.5], [151.0, 5479.0], [150.0, 5481.0], [149.0, 5483.0], [148.0, 5494.0], [145.0, 5513.0], [144.0, 5499.0], [159.0, 5463.0], [158.0, 5464.666666666667], [155.0, 5468.0], [154.0, 5475.0], [153.0, 5476.0], [152.0, 5479.0], [167.0, 5439.0], [166.0, 5442.0], [165.0, 5453.0], [164.0, 5454.0], [163.0, 5454.0], [161.0, 5455.0], [160.0, 5459.0], [173.0, 5422.0], [172.0, 5430.0], [171.0, 5432.0], [170.0, 5437.0], [169.0, 5435.0], [183.0, 5403.0], [182.0, 5784.5], [180.0, 5520.0], [179.0, 5417.5], [177.0, 5419.0], [176.0, 5422.0], [191.0, 6638.0], [190.0, 6053.0], [188.0, 5764.5], [186.0, 5394.0], [185.0, 5403.5], [199.0, 6031.5], [197.0, 5750.5], [195.0, 5707.5], [193.0, 5459.0], [192.0, 6028.0], [202.0, 5510.0], [201.0, 5501.0], [200.0, 5448.0], [214.0, 5425.0], [213.0, 5997.5], [212.0, 5448.0], [211.0, 5754.5], [223.0, 5287.0], [221.0, 5402.0], [220.0, 5950.0], [219.0, 5526.0], [218.0, 5380.0], [217.0, 5971.0], [216.0, 5446.0], [231.0, 5949.0], [230.0, 5457.0], [229.0, 5925.0], [228.0, 6063.0], [227.0, 5439.0], [226.0, 5929.0], [225.0, 5363.0], [224.0, 5655.5], [239.0, 6653.0], [238.0, 6489.0], [237.0, 6047.0], [236.0, 5902.0], [235.0, 5406.0], [233.0, 5686.0], [246.0, 6039.0], [245.0, 6683.0], [244.0, 5997.0], [243.0, 5980.0], [242.0, 5719.0], [240.0, 5479.0], [254.0, 5357.0], [253.0, 5733.0], [252.0, 6402.0], [250.0, 5361.0], [249.0, 5354.0], [248.0, 6280.5], [269.0, 5953.0], [270.0, 6406.0], [268.0, 5340.0], [258.0, 5366.0], [257.0, 5480.0], [256.0, 5890.0], [267.0, 6668.0], [266.0, 5467.0], [265.0, 5399.0], [264.0, 5420.0], [262.0, 5476.5], [260.0, 5365.5], [287.0, 5477.0], [285.0, 5418.0], [275.0, 5871.0], [274.0, 6312.0], [273.0, 6629.0], [272.0, 5977.5], [283.0, 5440.0], [282.0, 5356.0], [281.0, 5456.0], [280.0, 6562.0], [279.0, 5366.0], [278.0, 5465.0], [277.0, 5985.0], [276.0, 5828.0], [302.0, 5958.0], [303.0, 6340.0], [301.0, 6019.666666666667], [290.0, 6185.5], [288.0, 5906.5], [299.0, 5432.0], [297.0, 5808.0], [296.0, 5479.0], [295.0, 6635.0], [294.0, 5963.0], [293.0, 6221.0], [292.0, 5940.0], [317.0, 6549.0], [318.0, 5418.0], [316.0, 6334.0], [307.0, 6362.0], [306.0, 6064.5], [304.0, 5905.0], [315.0, 6527.0], [314.0, 6355.0], [312.0, 6082.0], [311.0, 6082.0], [310.0, 6385.0], [309.0, 6598.0], [308.0, 6597.0], [334.0, 6325.0], [335.0, 5447.0], [333.0, 6238.0], [323.0, 5679.0], [321.0, 5586.333333333333], [331.0, 6414.0], [330.0, 6480.0], [329.0, 6482.0], [328.0, 6050.5], [326.0, 5887.5], [324.0, 6387.0], [350.0, 5422.0], [351.0, 6482.333333333333], [348.0, 6141.0], [345.0, 6501.0], [344.0, 6252.0], [343.0, 6401.5], [341.0, 5425.0], [340.0, 6562.0], [339.0, 6315.0], [336.0, 6324.0], [366.0, 6517.0], [367.0, 6264.0], [365.0, 6447.0], [364.0, 6267.0], [363.0, 5415.0], [362.0, 6530.333333333333], [361.0, 6202.0], [359.0, 6522.0], [354.0, 5918.5], [352.0, 5418.0], [358.0, 6148.0], [356.0, 6432.5], [381.0, 5630.333333333333], [380.0, 5375.0], [378.0, 5374.0], [376.0, 6342.0], [375.0, 6498.0], [374.0, 5876.0], [372.0, 5889.0], [370.0, 6229.0], [398.0, 6351.0], [399.0, 6360.0], [397.0, 6361.0], [387.0, 5372.0], [384.0, 5801.0], [395.0, 5424.0], [394.0, 6394.333333333333], [392.0, 5389.0], [391.0, 5391.0], [389.0, 5391.0], [388.0, 6352.333333333333], [414.0, 5380.0], [412.0, 5383.0], [410.0, 5417.0], [409.0, 5383.0], [408.0, 6030.0], [405.0, 6033.333333333333], [403.0, 6359.0], [402.0, 5387.0], [400.0, 6425.0], [430.0, 5866.0], [429.0, 6023.333333333333], [426.0, 5382.5], [423.0, 5421.5], [422.0, 5860.333333333333], [419.0, 5385.0], [417.0, 6353.0], [416.0, 5382.0], [446.0, 5971.0], [442.0, 6441.0], [441.0, 5852.0], [440.0, 5915.0], [439.0, 6118.5], [436.0, 5919.5], [434.0, 6309.0], [433.0, 5381.0], [432.0, 5380.0], [461.0, 5930.0], [460.0, 6215.0], [459.0, 5373.0], [457.0, 6302.0], [456.0, 5898.5], [455.0, 6302.0], [453.0, 6214.5], [451.0, 6342.0], [450.0, 6129.333333333333], [478.0, 5678.5], [479.0, 5921.0], [476.0, 5808.5], [474.0, 5433.0], [473.0, 5433.0], [471.0, 6337.0], [469.0, 5380.0], [465.0, 5379.0], [464.0, 5767.75], [494.0, 5479.0], [495.0, 5900.0], [492.0, 6403.0], [491.0, 5900.5], [489.0, 5896.5], [488.0, 5459.0], [486.0, 6156.5], [485.0, 6325.0], [483.0, 6218.5], [482.0, 6326.0], [510.0, 5909.0], [511.0, 5894.0], [509.0, 5887.5], [507.0, 5895.0], [506.0, 5899.0], [505.0, 6106.75], [503.0, 6195.0], [500.0, 5885.0], [498.0, 5887.5], [497.0, 5899.0], [516.0, 5884.5], [542.0, 5881.0], [536.0, 5881.0], [518.0, 5436.5], [514.0, 5891.666666666667], [534.0, 5945.0], [530.0, 5878.666666666667], [526.0, 6438.0], [524.0, 5858.5], [522.0, 5901.0], [520.0, 6326.0], [568.0, 5618.5], [572.0, 5821.0], [560.0, 5427.0], [574.0, 5806.0], [570.0, 5814.0], [544.0, 5871.5], [546.0, 5861.0], [548.0, 5869.0], [550.0, 5865.0], [558.0, 6050.0], [556.0, 5858.0], [552.0, 5860.0], [566.0, 5832.0], [602.0, 5745.0], [592.0, 5765.0], [590.0, 5339.0], [578.0, 5333.0], [580.0, 5319.0], [582.0, 5314.0], [588.0, 5818.5], [586.0, 5301.0], [632.0, 5456.0], [636.0, 5589.0], [624.0, 5436.0], [634.0, 5972.0], [608.0, 6030.0], [610.0, 5454.0], [612.0, 6258.0], [614.0, 5986.0], [620.0, 5895.0], [618.0, 5474.0], [616.0, 6088.0], [630.0, 5461.0], [628.0, 5437.0], [642.0, 5455.5], [670.0, 5616.0], [658.0, 5644.0], [668.0, 5639.0], [640.0, 5490.333333333333], [644.0, 5669.0], [646.0, 5663.5], [654.0, 5756.0], [652.0, 6053.333333333333], [648.0, 5447.0], [662.0, 6196.0], [660.0, 5646.0], [676.0, 5605.0], [700.0, 5582.0], [698.0, 5589.0], [678.0, 5605.5], [674.0, 5623.0], [686.0, 5576.5], [682.0, 5587.0], [680.0, 5588.0], [692.0, 5557.0], [690.0, 5588.0], [688.0, 5582.5], [732.0, 5525.0], [734.0, 5027.0], [720.0, 5507.0], [722.0, 5529.0], [710.0, 5141.0], [716.0, 5099.0], [714.0, 5128.0], [712.0, 5115.0], [726.0, 5932.0], [762.0, 4893.0], [766.0, 4890.0], [760.0, 4904.0], [736.0, 4942.0], [740.0, 5403.5], [748.0, 4927.0], [746.0, 4928.5], [758.0, 4925.0], [756.0, 4945.666666666667], [796.0, 4836.0], [798.0, 4832.0], [786.0, 4856.0], [788.0, 4850.0], [792.0, 4843.0], [774.0, 5796.0], [772.0, 4874.0], [770.0, 4885.0], [782.0, 4865.0], [790.0, 4846.0], [800.0, 5784.0], [826.0, 5742.0], [824.0, 5106.0], [806.0, 4829.0], [814.0, 4906.0], [812.0, 4824.0], [810.0, 5356.0], [808.0, 5780.0], [820.0, 5160.666666666667], [858.0, 4844.0], [862.0, 5458.666666666667], [856.0, 5701.0], [838.0, 5490.5], [836.0, 5724.0], [832.0, 4850.0], [840.0, 4847.0], [854.0, 5722.0], [850.0, 5273.875], [870.0, 5703.0], [890.0, 5724.5], [882.0, 4761.5], [894.0, 5363.333333333333], [880.0, 5350.0], [868.0, 4783.0], [866.0, 4791.0], [876.0, 4766.0], [872.0, 4770.0], [920.0, 5716.5], [924.0, 5618.0], [896.0, 5813.0], [898.0, 5668.0], [900.0, 5598.0], [902.0, 5669.0], [908.0, 5181.5], [904.0, 5332.0], [918.0, 5590.0], [914.0, 4739.5], [952.0, 4676.5], [956.0, 4640.0], [944.0, 4663.0], [948.0, 4655.0], [958.0, 4634.0], [954.0, 4658.0], [928.0, 5622.0], [930.0, 5795.0], [934.0, 4691.0], [938.0, 5152.5], [936.0, 4670.0], [950.0, 4677.0], [964.0, 4627.0], [990.0, 4555.0], [988.0, 4565.0], [984.0, 4589.166666666667], [962.0, 4611.5], [960.0, 4629.0], [972.0, 4607.5], [968.0, 4593.0], [980.0, 4588.0], [978.0, 5490.0], [1016.0, 4491.0], [1020.0, 4483.0], [1008.0, 4543.0], [1010.0, 4525.5], [1022.0, 4475.0], [1018.0, 4493.0], [992.0, 4553.0], [994.0, 4598.0], [996.0, 4534.0], [998.0, 4566.0], [1006.0, 4548.0], [1004.0, 4556.0], [1002.0, 5405.0], [1014.0, 4498.0], [1012.0, 4498.0], [1072.0, 5307.5], [1084.0, 4982.0], [1056.0, 4428.0], [1060.0, 4749.666666666667], [1080.0, 4370.5], [1024.0, 4467.0], [1028.0, 4449.0], [1036.0, 4921.5], [1032.0, 4426.0], [1052.0, 4755.666666666667], [1048.0, 5528.0], [1044.0, 4431.0], [1068.0, 5005.0], [1136.0, 4307.0], [1148.0, 5049.0], [1124.0, 5286.0], [1140.0, 4305.0], [1100.0, 4498.25], [1096.0, 4655.5], [1092.0, 4971.5], [1088.0, 5109.0], [1116.0, 4320.0], [1108.0, 4329.0], [1132.0, 4569.0], [1128.0, 5063.0], [1156.0, 4295.333333333333], [1208.0, 4817.0], [1192.0, 4224.0], [1184.0, 5012.0], [1152.0, 4297.0], [1180.0, 4864.0], [1176.0, 4873.0], [1172.0, 4938.0], [1168.0, 4883.0], [1196.0, 4978.0], [1188.0, 4941.333333333333], [1264.0, 5024.0], [1268.0, 5034.0], [1252.0, 4848.0], [1272.0, 5029.0], [1276.0, 4850.666666666667], [1248.0, 4839.0], [1228.0, 4935.5], [1224.0, 4784.0], [1220.0, 4923.0], [1244.0, 4873.0], [1240.0, 5228.0], [1236.0, 4883.0], [1232.0, 5274.0], [1260.0, 5015.0], [1256.0, 4820.75], [1332.0, 4818.0], [1340.0, 4362.5], [1312.0, 4818.333333333333], [1316.0, 4741.0], [1336.0, 4637.0], [1304.0, 4764.0], [1280.0, 5008.5], [1284.0, 5043.0], [1288.0, 5076.0], [1292.0, 4834.0], [1300.0, 5018.0], [1296.0, 5029.0], [1324.0, 4685.0], [1320.0, 3809.0], [1396.0, 4497.0], [1404.0, 4472.0], [1376.0, 4522.0], [1400.0, 4743.0], [1344.0, 4574.0], [1348.0, 4739.0], [1352.0, 4491.0], [1372.0, 4801.0], [1364.0, 4805.0], [1360.0, 4793.0], [1388.0, 4499.0], [1380.0, 4271.0], [1464.0, 3930.0], [1440.0, 4476.0], [1444.0, 4513.0], [1448.0, 4290.0], [1452.0, 4480.0], [1460.0, 4396.0], [1456.0, 4290.0], [1420.0, 4384.0], [1416.0, 4447.0], [1412.0, 4660.0], [1436.0, 4365.0], [1432.0, 4094.0], [1428.0, 4555.0], [1424.0, 4382.0], [1524.0, 4064.0], [1528.0, 3966.0], [1532.0, 4099.0], [1504.0, 4107.0], [1512.0, 4155.333333333333], [1516.0, 3971.5], [1520.0, 4078.0], [1484.0, 4045.0], [1480.0, 4336.0], [1476.0, 4158.0], [1500.0, 4108.5], [1596.0, 3010.0], [1568.0, 3546.0], [1572.0, 3389.0], [1576.0, 3394.0], [1580.0, 3380.0], [1592.0, 3503.0], [1584.0, 3356.0], [1536.0, 4090.0], [1544.0, 3755.0], [1548.0, 4072.6666666666665], [1556.0, 3580.0], [1552.0, 3581.0], [1652.0, 2882.0], [1636.0, 2912.0], [1640.0, 2913.0], [1644.0, 2893.0], [1656.0, 2864.0], [1648.0, 2878.0], [1600.0, 3004.5], [1608.0, 3458.0], [1628.0, 3129.0], [1624.0, 2960.0], [1616.0, 3448.0], [1724.0, 3034.0], [1720.0, 3050.0], [1696.0, 2769.0], [1700.0, 2761.0], [1704.0, 2959.5], [1708.0, 3183.0], [1716.0, 3052.0], [1712.0, 3128.0], [1664.0, 2855.0], [1668.0, 2817.0], [1672.0, 2811.0], [1676.0, 2801.0], [1692.0, 2779.5], [1684.0, 2785.0], [1680.0, 2797.0], [1784.0, 3753.0], [1788.0, 3182.0], [1760.0, 3141.0], [1764.0, 3805.0], [1772.0, 2601.0], [1780.0, 3009.0], [1776.0, 3758.0], [1728.0, 3821.0], [1736.0, 2936.5], [1756.0, 3499.5], [1748.0, 3429.0], [1844.0, 2330.0], [1828.0, 3601.0], [1832.0, 3244.0], [1836.0, 2346.0], [1848.0, 2837.0], [1840.0, 2969.0], [1800.0, 3007.0], [1796.0, 3120.0], [1792.0, 3098.0], [1820.0, 3389.0], [1808.0, 3548.5], [1904.0, 2457.0], [1864.0, 2308.0], [1892.0, 2230.0], [1896.0, 2698.5], [1908.0, 2251.0], [1856.0, 2318.0], [1860.0, 2307.5], [1868.0, 2301.0], [1880.0, 2268.0], [1876.0, 2265.0], [1872.0, 2756.5], [1976.0, 2574.5], [1980.0, 3253.0], [1952.0, 2314.5], [1956.0, 3354.0], [1960.0, 3094.0], [1964.0, 2266.0], [1968.0, 2058.0], [1920.0, 2173.0], [1924.0, 2148.5], [1928.0, 2829.5], [1932.0, 3146.0], [1948.0, 2505.6666666666665], [1944.0, 2540.3333333333335], [1940.0, 2094.0], [1936.0, 2141.0], [2036.0, 2470.0], [2044.0, 2898.0], [2016.0, 2506.0], [2020.0, 1887.5], [2024.0, 1912.0], [2028.0, 2484.0], [2032.0, 1756.0], [1984.0, 1971.0], [1992.0, 2015.0], [2012.0, 2537.0], [2008.0, 2500.0], [2000.0, 3201.0], [2160.0, 2183.0], [2152.0, 1535.0], [2120.0, 2378.0], [2136.0, 2869.0], [2168.0, 1499.0], [2144.0, 1476.0], [2056.0, 1747.0], [2064.0, 2227.0], [2072.0, 2368.0], [2096.0, 1701.0], [2080.0, 2440.0], [2288.0, 1953.0], [2280.0, 1829.0], [2240.0, 2655.0], [2248.0, 2063.0], [2256.0, 1389.5], [2264.0, 1477.3333333333333], [2296.0, 2061.5], [2192.0, 2071.5], [2184.0, 2140.0], [2232.0, 1903.0], [2224.0, 1398.0], [2216.0, 1411.0], [2208.0, 2751.0], [2400.0, 1494.0], [2368.0, 954.0], [2416.0, 1460.0], [2408.0, 886.0], [2328.0, 1161.0], [2304.0, 1206.0], [2352.0, 1036.0], [2344.0, 1675.0], [2336.0, 1722.0], [2456.0, 1421.0], [2440.0, 1361.0], [2488.0, 1185.0], [2480.0, 1025.6666666666667], [2464.0, 1263.0], [2161.0, 1447.0], [2153.0, 2584.0], [2113.0, 2342.0], [2121.0, 2728.0], [2129.0, 1777.3333333333333], [2137.0, 2868.0], [2145.0, 1649.0], [2049.0, 2317.0], [2057.0, 2838.0], [2065.0, 1741.0], [2073.0, 1720.0], [2105.0, 2972.0], [2089.0, 2325.0], [2081.0, 2826.0], [2273.0, 1639.0], [2249.0, 2495.0], [2297.0, 1777.0], [2241.0, 2008.0], [2257.0, 1904.0], [2201.0, 1734.5], [2193.0, 1442.0], [2185.0, 1457.0], [2177.0, 2649.0], [2233.0, 1960.5], [2225.0, 2064.0], [2217.0, 1509.0], [2209.0, 2240.0], [2417.0, 862.0], [2377.0, 1569.5], [2385.0, 1909.5], [2393.0, 986.0], [2425.0, 772.0], [2409.0, 816.0], [2401.0, 1494.0], [2329.0, 2260.0], [2321.0, 1288.0], [2305.0, 1484.0], [2361.0, 2377.0], [2345.0, 1109.0], [2449.0, 1325.0], [2457.0, 858.0], [2433.0, 1157.5], [2473.0, 626.0], [2465.0, 1253.0], [1073.0, 4996.0], [1081.0, 5328.0], [1085.0, 5347.0], [1077.0, 5157.333333333333], [1037.0, 4428.0], [1033.0, 5562.0], [1029.0, 4442.0], [1053.0, 4421.0], [1045.0, 4431.0], [1137.0, 5279.0], [1149.0, 5060.0], [1121.0, 5206.5], [1145.0, 4921.0], [1093.0, 4348.0], [1089.0, 4352.0], [1101.0, 4340.0], [1113.0, 5075.0], [1109.0, 5079.0], [1125.0, 5072.0], [1201.0, 4986.0], [1209.0, 4184.0], [1189.0, 4857.0], [1213.0, 4945.0], [1205.0, 4506.5], [1153.0, 5075.0], [1161.0, 4971.0], [1165.0, 4669.0], [1177.0, 4872.0], [1169.0, 4879.0], [1193.0, 4973.0], [1229.0, 4933.0], [1273.0, 5155.0], [1225.0, 4918.0], [1217.0, 4489.0], [1261.0, 5166.0], [1257.0, 4784.0], [1241.0, 4875.0], [1237.0, 5263.0], [1329.0, 4817.0], [1341.0, 4544.0], [1313.0, 4895.0], [1317.0, 4924.0], [1333.0, 4664.0], [1285.0, 5088.0], [1281.0, 4910.0], [1289.0, 4817.0], [1293.0, 4945.0], [1305.0, 4779.0], [1301.0, 5013.0], [1297.0, 4919.0], [1325.0, 4867.0], [1321.0, 4563.0], [1401.0, 4487.0], [1405.0, 4705.0], [1377.0, 4782.0], [1381.0, 4791.0], [1385.0, 4507.5], [1397.0, 4484.0], [1393.0, 4699.0], [1357.0, 4471.333333333333], [1353.0, 4664.0], [1349.0, 4696.5], [1373.0, 4787.0], [1369.0, 4668.0], [1365.0, 4804.0], [1389.0, 4435.0], [1441.0, 4461.0], [1461.0, 4389.0], [1453.0, 4380.0], [1449.0, 4385.0], [1445.0, 4395.0], [1469.0, 4319.0], [1457.0, 4287.0], [1421.0, 4528.0], [1417.0, 4631.0], [1413.0, 4639.0], [1437.0, 4053.0], [1433.0, 4435.0], [1429.0, 4449.0], [1425.0, 4388.0], [1529.0, 3896.0], [1505.0, 4289.0], [1509.0, 4065.0], [1513.0, 4051.0], [1517.0, 3915.0], [1533.0, 4039.0], [1525.0, 4076.0], [1481.0, 4164.0], [1477.0, 4166.0], [1473.0, 4287.5], [1497.0, 4000.5], [1493.0, 4219.0], [1489.0, 4196.0], [1593.0, 3454.0], [1597.0, 3011.0], [1569.0, 3440.0], [1577.0, 3370.0], [1589.0, 3487.0], [1585.0, 3365.0], [1541.0, 3854.0], [1565.0, 3546.166666666667], [1557.0, 3579.0], [1661.0, 2856.0], [1633.0, 3187.3333333333335], [1641.0, 3062.0], [1645.0, 2900.0], [1653.0, 2880.0], [1649.0, 2877.0], [1605.0, 2998.5], [1609.0, 3459.0], [1613.0, 2979.5], [1629.0, 3498.0], [1625.0, 2954.0], [1621.0, 2963.5], [1617.0, 2970.0], [1725.0, 3136.0], [1697.0, 2768.0], [1701.0, 2761.0], [1705.0, 2754.0], [1669.0, 2819.0], [1673.0, 2808.0], [1677.0, 2798.0], [1693.0, 2778.0], [1689.0, 2781.0], [1685.0, 2783.0], [1681.0, 2792.0], [1781.0, 3088.0], [1785.0, 3077.0], [1761.0, 3677.0], [1765.0, 3770.0], [1769.0, 2876.0], [1777.0, 2628.0], [1733.0, 3845.5], [1737.0, 3819.0], [1753.0, 3165.5], [1749.0, 3237.0], [1745.0, 3490.0], [1849.0, 2319.0], [1853.0, 2953.5], [1825.0, 3513.0], [1829.0, 3451.0], [1833.0, 2343.0], [1837.0, 3326.0], [1841.0, 2889.0], [1805.0, 2532.0], [1801.0, 2552.0], [1797.0, 3469.0], [1821.0, 3295.0], [1817.0, 3586.0], [1813.0, 3112.0], [1809.0, 3010.0], [1861.0, 2310.0], [1893.0, 2333.0], [1897.0, 2241.0], [1857.0, 3329.0], [1865.0, 2298.0], [1869.0, 2284.0], [1885.0, 2240.0], [1881.0, 2271.0], [1873.0, 2270.0], [1901.0, 2157.0], [1969.0, 1996.0], [1953.0, 2600.0], [1965.0, 2011.0], [1981.0, 2536.0], [1921.0, 2252.0], [1925.0, 2128.0], [1929.0, 2151.0], [1945.0, 2050.0], [1941.0, 3341.0], [1937.0, 2065.5], [2041.0, 1738.5], [2045.0, 2366.0], [2017.0, 1758.0], [2021.0, 1754.0], [2025.0, 1744.0], [2029.0, 1761.0], [2033.0, 2486.0], [1985.0, 1967.0], [1989.0, 2259.5], [1993.0, 3220.0], [2013.0, 1934.0], [2009.0, 2606.0], [2001.0, 3014.5], [2146.0, 2244.0], [2138.0, 2137.0], [2170.0, 2355.5], [2162.0, 2618.0], [2050.0, 1716.0], [2058.0, 1699.0], [2066.0, 1690.0], [2074.0, 1747.0], [2106.0, 2526.0], [2098.0, 2298.0], [2090.0, 1686.0], [2082.0, 2431.0], [2290.0, 1234.0], [2242.0, 2389.0], [2258.0, 1286.0], [2266.0, 1634.0], [2298.0, 2253.0], [2282.0, 1211.0], [2194.0, 2175.0], [2178.0, 1480.0], [2226.0, 2016.0], [2210.0, 1992.0], [2418.0, 1449.0], [2410.0, 880.0], [2370.0, 1367.0], [2378.0, 1091.0], [2394.0, 1507.0], [2426.0, 1430.0], [2322.0, 1844.0], [2314.0, 1703.5], [2306.0, 2507.0], [2362.0, 1538.75], [2354.0, 1496.0], [2346.0, 1256.0], [2482.0, 951.5], [2458.0, 2020.0], [2450.0, 844.0], [2442.0, 1078.0], [2474.0, 1237.0], [2163.0, 1460.0], [2171.0, 1499.0], [2123.0, 2622.5], [2131.0, 1830.0], [2139.0, 1548.0], [2155.0, 2369.0], [2051.0, 1748.0], [2059.0, 2320.0], [2067.0, 2488.0], [2075.0, 1712.0], [2107.0, 1684.0], [2099.0, 2623.0], [2083.0, 1695.0], [2283.0, 1337.0], [2275.0, 1686.5], [2243.0, 1900.0], [2251.0, 1911.0], [2259.0, 2383.0], [2267.0, 1278.0], [2299.0, 1787.0], [2291.0, 1274.5], [2203.0, 2263.5], [2195.0, 2393.0], [2187.0, 2349.0], [2179.0, 1471.0], [2219.0, 2598.5], [2211.0, 2062.0], [2403.0, 1273.0], [2427.0, 1430.0], [2371.0, 1591.0], [2387.0, 1290.0], [2395.0, 1503.0], [2331.0, 1645.5], [2315.0, 1475.0], [2363.0, 1716.0], [2355.0, 1844.0], [2347.0, 1108.0], [2339.0, 1689.3333333333333], [2459.0, 1265.0], [2451.0, 1340.0], [2443.0, 791.0], [2483.0, 1206.0], [2475.0, 1402.0], [2467.0, 1664.5], [541.0, 5893.5], [535.0, 5881.0], [527.0, 5885.0], [525.0, 5857.0], [523.0, 6130.0], [521.0, 6362.0], [573.0, 5351.0], [575.0, 5341.0], [563.0, 5774.0], [561.0, 5427.0], [571.0, 5822.0], [569.0, 5830.0], [559.0, 5849.0], [545.0, 5876.0], [547.0, 5833.0], [549.0, 6293.0], [551.0, 5852.0], [555.0, 5712.0], [565.0, 5627.5], [603.0, 5745.0], [607.0, 5799.75], [601.0, 5892.5], [599.0, 5755.5], [597.0, 5644.0], [577.0, 5562.0], [579.0, 5318.0], [581.0, 5316.0], [587.0, 5290.0], [585.0, 5292.0], [613.0, 5710.0], [637.0, 5681.0], [635.0, 5463.0], [633.0, 5430.0], [623.0, 5455.5], [609.0, 5821.0], [611.0, 6016.0], [615.0, 5711.0], [621.0, 5828.0], [617.0, 6219.0], [631.0, 5450.0], [627.0, 5529.666666666667], [669.0, 5638.0], [671.0, 5601.0], [657.0, 5851.0], [659.0, 5656.0], [667.0, 5863.0], [665.0, 5642.5], [655.0, 5657.0], [643.0, 5427.0], [647.0, 5668.0], [649.0, 5665.0], [663.0, 5850.0], [661.0, 5399.0], [679.0, 5588.0], [703.0, 5583.666666666667], [699.0, 5584.0], [697.0, 5502.8], [673.0, 5612.0], [685.0, 5729.0], [683.0, 5591.0], [681.0, 5615.0], [691.0, 5575.0], [733.0, 5925.0], [723.0, 5528.0], [735.0, 4953.0], [721.0, 5532.0], [731.0, 5661.0], [711.0, 5564.0], [709.0, 5287.0], [719.0, 5526.5], [717.0, 5095.0], [715.0, 5561.0], [713.0, 5569.0], [727.0, 6081.0], [725.0, 5746.0], [761.0, 4902.0], [767.0, 4889.0], [755.0, 4926.333333333333], [765.0, 4892.333333333333], [751.0, 4927.0], [737.0, 5895.0], [741.0, 5885.0], [747.0, 4927.0], [745.0, 4936.5], [759.0, 4925.0], [757.0, 5383.0], [795.0, 4836.0], [799.0, 5759.0], [787.0, 4851.0], [797.0, 5463.0], [793.0, 4839.0], [775.0, 4871.0], [773.0, 4874.0], [771.0, 4885.666666666667], [783.0, 4856.0], [781.0, 5119.0], [777.0, 5351.0], [789.0, 4845.0], [807.0, 4829.0], [829.0, 5419.0], [831.0, 4878.0], [825.0, 4884.0], [805.0, 4828.5], [801.0, 4830.0], [813.0, 4816.0], [811.0, 4825.0], [823.0, 4885.0], [821.0, 5759.0], [817.0, 5435.0], [859.0, 4878.0], [863.0, 4845.0], [833.0, 5839.0], [847.0, 5710.0], [845.0, 4871.0], [843.0, 5722.5], [853.0, 5289.0], [851.0, 5849.0], [871.0, 4780.0], [895.0, 5678.0], [893.0, 5803.0], [889.0, 5219.5], [869.0, 4783.0], [867.0, 4868.0], [865.0, 5292.5], [879.0, 5223.5], [877.0, 4764.0], [875.0, 4769.5], [873.0, 4770.0], [887.0, 4809.0], [885.0, 5507.0], [883.0, 4761.0], [921.0, 4687.0], [925.0, 4699.5], [927.0, 5651.0], [923.0, 5618.0], [911.0, 5642.666666666667], [897.0, 5659.0], [899.0, 5637.0], [901.0, 5336.0], [903.0, 5670.0], [907.0, 5637.0], [905.0, 5666.0], [917.0, 5304.333333333333], [913.0, 4743.0], [957.0, 4634.0], [959.0, 4631.0], [945.0, 4692.0], [947.0, 4691.0], [955.0, 5713.0], [953.0, 4662.0], [943.0, 5682.25], [929.0, 4678.0], [933.0, 4676.0], [931.0, 5612.0], [935.0, 4705.0], [941.0, 4694.0], [949.0, 4654.0], [965.0, 5528.0], [991.0, 4553.0], [987.0, 4569.0], [967.0, 5496.0], [963.0, 4627.0], [975.0, 4590.0], [973.0, 5068.0], [969.0, 5494.0], [981.0, 4588.0], [977.0, 4590.0], [1019.0, 4493.0], [1023.0, 5599.0], [1011.0, 4497.0], [1021.0, 4477.0], [1017.0, 4490.0], [1007.0, 4548.0], [993.0, 4548.0], [995.0, 4538.0], [997.0, 4533.0], [999.0, 4530.0], [1005.0, 4522.0], [1003.0, 4560.0], [1001.0, 4543.0], [1074.0, 4994.0], [1086.0, 5476.0], [1058.0, 5164.0], [1082.0, 4987.0], [1054.0, 4424.5], [1026.0, 4916.0], [1050.0, 4732.0], [1042.0, 4464.5], [1070.0, 5171.5], [1066.0, 5036.0], [1062.0, 4954.5], [1138.0, 4928.0], [1150.0, 4922.0], [1146.0, 4300.0], [1142.0, 4613.5], [1102.0, 5089.0], [1094.0, 4360.0], [1090.0, 4352.0], [1114.0, 5297.0], [1162.0, 5058.0], [1214.0, 4177.0], [1206.0, 4958.0], [1202.0, 4950.0], [1182.0, 4924.5], [1158.0, 4916.0], [1178.0, 4872.0], [1174.0, 5016.0], [1198.0, 4970.0], [1194.0, 5281.0], [1186.0, 4858.0], [1226.0, 4937.0], [1250.0, 4405.5], [1270.0, 5009.0], [1230.0, 5270.0], [1222.0, 4534.0], [1218.0, 4924.0], [1246.0, 4865.0], [1238.0, 4911.0], [1234.0, 5017.0], [1258.0, 4827.0], [1334.0, 3755.0], [1342.0, 4871.0], [1314.0, 4800.0], [1338.0, 4638.0], [1286.0, 4875.0], [1290.0, 5002.0], [1294.0, 5039.0], [1298.0, 4890.0], [1326.0, 4642.0], [1322.0, 4861.0], [1394.0, 4601.0], [1406.0, 4649.0], [1378.0, 4719.0], [1398.0, 4654.0], [1374.0, 4581.0], [1346.0, 4762.0], [1350.0, 4504.0], [1358.0, 4809.0], [1354.0, 4775.0], [1370.0, 4795.0], [1362.0, 4693.5], [1386.0, 4534.0], [1382.0, 4774.0], [1466.0, 4110.0], [1458.0, 4054.0], [1470.0, 4212.0], [1442.0, 4108.0], [1446.0, 4333.0], [1450.0, 4316.0], [1454.0, 4313.0], [1462.0, 4404.0], [1422.0, 4617.0], [1418.0, 4334.0], [1414.0, 4540.0], [1410.0, 4537.75], [1438.0, 4414.0], [1434.0, 4525.0], [1430.0, 4568.0], [1426.0, 4552.0], [1530.0, 4254.0], [1514.0, 4045.0], [1518.0, 4314.0], [1534.0, 4027.0], [1526.0, 4059.0], [1522.0, 3972.0], [1486.0, 4337.0], [1482.0, 4373.0], [1474.0, 4134.0], [1498.0, 4296.0], [1490.0, 4218.5], [1586.0, 3339.0], [1594.0, 3021.0], [1598.0, 3014.0], [1570.0, 3532.0], [1578.0, 3409.0], [1582.0, 3379.0], [1550.0, 4148.5], [1566.0, 3517.0], [1558.0, 3537.0], [1554.0, 3573.0], [1654.0, 2862.0], [1634.0, 2922.0], [1646.0, 2881.0], [1662.0, 2841.0], [1650.0, 2870.0], [1630.0, 2923.0], [1606.0, 2995.0], [1614.0, 2976.0], [1626.0, 2954.0], [1622.0, 3403.0], [1722.0, 3118.5], [1718.0, 3079.0], [1702.0, 2758.0], [1698.0, 2766.0], [1706.0, 2753.0], [1710.0, 3227.0], [1726.0, 3164.0], [1666.0, 2844.5], [1670.0, 2818.0], [1674.0, 2805.0], [1678.0, 2798.0], [1694.0, 2775.0], [1690.0, 2781.0], [1686.0, 2785.0], [1682.0, 2791.0], [1786.0, 3060.0], [1766.0, 3658.0], [1762.0, 3712.0], [1770.0, 2604.0], [1774.0, 2598.0], [1790.0, 3111.5], [1734.0, 3154.0], [1738.0, 2661.0], [1742.0, 3505.5], [1758.0, 3503.0], [1754.0, 3165.0], [1750.0, 3808.0], [1746.0, 3183.0], [1850.0, 2324.0], [1846.0, 2870.5], [1826.0, 3412.0], [1830.0, 2349.0], [1834.0, 2347.0], [1838.0, 2345.0], [1842.0, 3549.0], [1806.0, 3456.0], [1802.0, 3063.0], [1798.0, 3406.0], [1794.0, 3108.0], [1822.0, 2476.0], [1810.0, 2509.0], [1910.0, 2292.0], [1890.0, 2578.3333333333335], [1894.0, 2332.0], [1914.0, 2245.0], [1906.0, 2180.0], [1858.0, 3356.0], [1866.0, 2287.0], [1870.0, 3514.0], [1886.0, 2252.0], [1882.0, 2268.0], [1878.0, 2881.0], [1874.0, 3294.0], [1978.0, 2015.0], [1958.0, 2986.5], [1954.0, 2091.0], [1962.0, 2380.0], [1966.0, 2066.0], [1974.0, 2382.6666666666665], [1950.0, 2044.0], [1922.0, 2988.0], [1926.0, 2727.0], [1934.0, 2778.0], [1938.0, 2101.0], [2046.0, 1777.0], [2018.0, 2530.0], [2026.0, 2505.0], [2030.0, 2466.0], [2042.0, 2319.0], [2038.0, 1777.0], [2034.0, 2807.0], [2014.0, 2334.0], [1986.0, 2031.0], [1990.0, 1966.0], [1998.0, 2506.6666666666665], [2010.0, 2521.0], [2006.0, 1902.6666666666667], [2156.0, 1515.0], [2116.0, 2466.0], [2124.0, 2665.0], [2132.0, 2652.0], [2164.0, 2494.0], [2148.0, 2195.5], [2052.0, 2409.0], [2068.0, 1755.0], [2076.0, 2422.0], [2108.0, 2318.0], [2100.0, 2355.0], [2084.0, 2431.0], [2276.0, 2009.0], [2292.0, 1231.0], [2244.0, 1301.0], [2260.0, 1205.0], [2268.0, 1204.0], [2204.0, 2384.0], [2196.0, 2048.0], [2188.0, 2142.0], [2180.0, 2080.0], [2236.0, 1819.4285714285716], [2220.0, 2156.0], [2212.0, 2095.0], [2412.0, 966.0], [2404.0, 902.0], [2380.0, 1912.5], [2388.0, 1545.0], [2396.0, 1522.0], [2420.0, 1416.0], [2332.0, 1724.0], [2324.0, 1454.0], [2316.0, 2468.0], [2308.0, 1933.5], [2364.0, 2154.0], [2356.0, 1007.0], [2348.0, 1254.0], [2340.0, 1050.0], [2444.0, 789.0], [2452.0, 888.0], [2500.0, 938.6363636363636], [2460.0, 709.0], [2436.0, 1267.6666666666667], [2492.0, 529.0], [2476.0, 642.0], [2468.0, 609.0], [2165.0, 1528.0], [2133.0, 1502.0], [2141.0, 2290.0], [2173.0, 2437.0], [2149.0, 2140.0], [2053.0, 2811.0], [2061.0, 2271.0], [2069.0, 1723.0], [2077.0, 2438.0], [2109.0, 2353.0], [2101.0, 3001.0], [2093.0, 1651.0], [2085.0, 1700.0], [2285.0, 1937.0], [2277.0, 2555.0], [2253.0, 2570.0], [2261.0, 1915.0], [2269.0, 1361.0], [2293.0, 1216.0], [2205.0, 1362.0], [2197.0, 2175.0], [2189.0, 2549.0], [2237.0, 1326.0], [2221.0, 2616.0], [2429.0, 878.0], [2381.0, 1078.0], [2389.0, 1091.0], [2397.0, 1494.0], [2413.0, 963.0], [2405.0, 1005.0], [2365.0, 1592.0], [2357.0, 2050.0], [2341.0, 1048.0], [2461.0, 1259.0], [2453.0, 2015.0], [2445.0, 1336.0], [2437.0, 899.0], [2485.0, 587.5], [1039.0, 4422.0], [1087.0, 4356.0], [1083.0, 5133.0], [1079.0, 5510.0], [1031.0, 4440.5], [1027.0, 4465.0], [1055.0, 4429.0], [1043.0, 4431.0], [1067.0, 5375.0], [1063.0, 4404.0], [1139.0, 5056.0], [1151.0, 4297.0], [1123.0, 5266.0], [1147.0, 4551.666666666667], [1119.0, 4779.0], [1103.0, 4332.0], [1115.0, 5296.5], [1111.0, 5125.5], [1107.0, 4760.0], [1135.0, 4769.333333333333], [1131.0, 5067.0], [1127.0, 5109.333333333333], [1203.0, 4197.0], [1215.0, 4929.0], [1211.0, 4180.0], [1207.0, 4191.0], [1183.0, 5013.0], [1159.0, 5359.0], [1163.0, 4900.0], [1167.0, 4959.5], [1179.0, 4995.0], [1175.0, 4871.0], [1171.0, 4876.0], [1191.0, 4856.0], [1231.0, 5248.0], [1267.0, 4771.5], [1223.0, 4918.0], [1219.0, 5294.0], [1263.0, 4945.0], [1259.0, 4668.0], [1251.0, 4818.0], [1247.0, 4848.0], [1243.0, 5055.0], [1239.0, 5254.0], [1235.0, 4862.0], [1335.0, 4549.0], [1343.0, 4598.0], [1315.0, 4719.0], [1319.0, 4764.5], [1331.0, 4566.5], [1311.0, 4297.5], [1287.0, 4873.0], [1295.0, 4835.0], [1307.0, 4562.0], [1303.0, 4830.5], [1299.0, 5023.0], [1327.0, 4650.0], [1323.0, 4687.0], [1395.0, 4656.0], [1403.0, 4736.5], [1379.0, 4489.0], [1383.0, 4771.0], [1387.0, 4775.0], [1399.0, 4752.0], [1359.0, 4660.0], [1351.0, 4823.0], [1375.0, 4270.0], [1367.0, 4703.5], [1363.0, 4766.0], [1391.0, 3637.0], [1471.0, 4419.0], [1467.0, 4164.0], [1455.0, 4298.0], [1451.0, 4470.0], [1447.0, 4310.0], [1443.0, 4115.0], [1463.0, 4457.0], [1423.0, 4517.0], [1419.0, 4391.0], [1415.0, 4632.0], [1411.0, 4418.0], [1439.0, 4515.0], [1435.0, 4363.0], [1431.0, 4403.0], [1531.0, 4067.0], [1535.0, 4043.0], [1507.0, 3838.5], [1519.0, 4299.0], [1527.0, 4057.0], [1523.0, 4076.0], [1479.0, 4374.0], [1475.0, 4415.0], [1503.0, 4218.666666666667], [1495.0, 4041.5], [1491.0, 4110.0], [1591.0, 3507.0], [1575.0, 3462.0], [1579.0, 3380.0], [1583.0, 3357.0], [1587.0, 3334.0], [1567.0, 3544.0], [1539.0, 4102.0], [1543.0, 4005.0], [1547.0, 4280.0], [1551.0, 4031.0], [1559.0, 3570.0], [1651.0, 2886.0], [1659.0, 2862.6666666666665], [1663.0, 2840.0], [1635.0, 3406.0], [1643.0, 2912.0], [1647.0, 2876.0], [1603.0, 3005.6666666666665], [1607.0, 2986.0], [1611.0, 2979.0], [1615.0, 2974.0], [1619.0, 2969.5], [1667.0, 2852.0], [1671.0, 2812.0], [1727.0, 3205.0], [1699.0, 2764.0], [1707.0, 3158.0], [1711.0, 2748.0], [1695.0, 2769.0], [1675.0, 3323.0], [1691.0, 2782.0], [1687.0, 2782.0], [1683.0, 2787.0], [1719.0, 3058.0], [1783.0, 3109.0], [1791.0, 2622.0], [1763.0, 3146.0], [1767.0, 3804.0], [1771.0, 3100.0], [1775.0, 2892.5], [1779.0, 3780.0], [1759.0, 3797.0], [1731.0, 3753.3333333333335], [1739.0, 2658.0], [1743.0, 2899.0], [1751.0, 3167.0], [1747.0, 3104.0], [1851.0, 2314.0], [1831.0, 2997.0], [1855.0, 2593.5], [1827.0, 3639.0], [1835.0, 2342.0], [1803.0, 2545.0], [1799.0, 3698.0], [1795.0, 3704.0], [1823.0, 3677.0], [1819.0, 2840.0], [1815.0, 2507.5], [1907.0, 2965.0], [1915.0, 2555.6666666666665], [1919.0, 2214.2], [1891.0, 2820.0], [1887.0, 2257.0], [1863.0, 2942.0], [1867.0, 2305.0], [1883.0, 3269.0], [1879.0, 2280.0], [1875.0, 2972.0], [1899.0, 2553.0], [1983.0, 2507.5], [1979.0, 1979.0], [1955.0, 2088.0], [1959.0, 2022.0], [1967.0, 2987.0], [1971.0, 1946.0], [1931.0, 2113.0], [1939.0, 2099.0], [2043.0, 2432.0], [2047.0, 2424.0], [2023.0, 1883.0], [2027.0, 2430.0], [2031.0, 2467.0], [2039.0, 2735.5], [2035.0, 2586.0], [1987.0, 2833.0], [1991.0, 2637.0], [1995.0, 2293.5], [2007.0, 1882.0], [2003.0, 2548.5], [2150.0, 2592.0], [2166.0, 1503.0], [2126.0, 1875.0], [2142.0, 2861.0], [2174.0, 2107.0], [2158.0, 2019.0], [2054.0, 2253.0], [2062.0, 2478.0], [2078.0, 1735.0], [2110.0, 2390.0], [2102.0, 1665.0], [2094.0, 2708.0], [2086.0, 2420.0], [2294.0, 2533.0], [2302.0, 1759.3333333333333], [2246.0, 1654.0], [2254.0, 1661.5], [2286.0, 1853.0], [2278.0, 1182.0], [2206.0, 2046.0], [2198.0, 1460.0], [2182.0, 2487.5], [2222.0, 1402.0], [2214.0, 2104.0], [2422.0, 911.6666666666666], [2406.0, 1463.0], [2374.0, 1548.3333333333333], [2382.0, 1534.0], [2398.0, 1498.0], [2430.0, 1402.0], [2334.0, 1677.5], [2318.0, 1877.5], [2310.0, 1486.5], [2366.0, 963.0], [2342.0, 1886.0], [2438.0, 1550.0], [2446.0, 1347.0], [2462.0, 1280.0], [2486.0, 1188.0], [2470.0, 1240.0], [2151.0, 2788.0], [2167.0, 2857.0], [2175.0, 2106.0], [2119.0, 2185.3333333333335], [2135.0, 2776.0], [2143.0, 2708.0], [2111.0, 1618.0], [2055.0, 2488.0], [2071.0, 2290.0], [2079.0, 1698.0], [2103.0, 1691.0], [2095.0, 2410.0], [2087.0, 2254.0], [2279.0, 1245.0], [2247.0, 1325.0], [2271.0, 1555.5], [2287.0, 1816.0], [2207.0, 2021.0], [2199.0, 2764.0], [2191.0, 2165.0], [2239.0, 2157.0], [2223.0, 1526.0], [2215.0, 1566.0], [2431.0, 1384.0], [2415.0, 1117.5], [2375.0, 930.0], [2383.0, 1971.0], [2391.0, 909.5], [2399.0, 1015.0], [2423.0, 1440.0], [2407.0, 2009.0], [2335.0, 1060.0], [2327.0, 1407.3333333333333], [2319.0, 1743.0], [2311.0, 1187.0], [2367.0, 958.0], [2351.0, 1681.3333333333333], [2343.0, 1673.0], [2447.0, 1353.0], [2487.0, 1179.0], [2463.0, 1279.0], [2455.0, 1324.5], [2439.0, 1482.0], [2479.0, 1214.0], [2471.0, 1235.0], [1.0, 6766.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}, {"data": [[1251.1084, 4134.266800000003]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18833.333333333332, "minX": 1.75558716E12, "maxY": 241416.66666666666, "series": [{"data": [[1.75558716E12, 241416.66666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75558716E12, 18833.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558716E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4134.266800000003, "minX": 1.75558716E12, "maxY": 4134.266800000003, "series": [{"data": [[1.75558716E12, 4134.266800000003]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558716E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4134.209600000002, "minX": 1.75558716E12, "maxY": 4134.209600000002, "series": [{"data": [[1.75558716E12, 4134.209600000002]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558716E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3967.9691999999973, "minX": 1.75558716E12, "maxY": 3967.9691999999973, "series": [{"data": [[1.75558716E12, 3967.9691999999973]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558716E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 520.0, "minX": 1.75558716E12, "maxY": 6970.0, "series": [{"data": [[1.75558716E12, 6970.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75558716E12, 5898.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75558716E12, 6545.949999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75558716E12, 6301.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75558716E12, 520.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75558716E12, 4596.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558716E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1230.5, "minX": 136.0, "maxY": 5730.0, "series": [{"data": [[136.0, 1230.5], [561.0, 5730.0], [608.0, 5073.5], [321.0, 4726.0], [420.0, 2015.0], [454.0, 3069.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 608.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1230.0, "minX": 136.0, "maxY": 5730.0, "series": [{"data": [[136.0, 1230.0], [561.0, 5730.0], [608.0, 5073.5], [321.0, 4726.0], [420.0, 2015.0], [454.0, 3069.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 608.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558716E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558716E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558716E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558716E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558716E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558716E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558716E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558716E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558716E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558716E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558716E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558716E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

