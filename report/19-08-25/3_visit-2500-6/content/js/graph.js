/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 705.0, "minX": 0.0, "maxY": 10315.0, "series": [{"data": [[0.0, 705.0], [0.1, 1083.0], [0.2, 1142.0], [0.3, 1168.0], [0.4, 1378.0], [0.5, 1431.0], [0.6, 1532.0], [0.7, 1557.0], [0.8, 1569.0], [0.9, 1629.0], [1.0, 1643.0], [1.1, 1658.0], [1.2, 1659.0], [1.3, 1686.0], [1.4, 1691.0], [1.5, 1706.0], [1.6, 1720.0], [1.7, 1741.0], [1.8, 1748.0], [1.9, 1751.0], [2.0, 1756.0], [2.1, 1782.0], [2.2, 1801.0], [2.3, 1837.0], [2.4, 1842.0], [2.5, 1884.0], [2.6, 1897.0], [2.7, 1928.0], [2.8, 1932.0], [2.9, 1936.0], [3.0, 1940.0], [3.1, 1944.0], [3.2, 1967.0], [3.3, 1976.0], [3.4, 1980.0], [3.5, 1989.0], [3.6, 2012.0], [3.7, 2017.0], [3.8, 2020.0], [3.9, 2025.0], [4.0, 2034.0], [4.1, 2056.0], [4.2, 2064.0], [4.3, 2096.0], [4.4, 2101.0], [4.5, 2111.0], [4.6, 2118.0], [4.7, 2124.0], [4.8, 2134.0], [4.9, 2140.0], [5.0, 2154.0], [5.1, 2168.0], [5.2, 2173.0], [5.3, 2184.0], [5.4, 2197.0], [5.5, 2202.0], [5.6, 2210.0], [5.7, 2219.0], [5.8, 2227.0], [5.9, 2238.0], [6.0, 2240.0], [6.1, 2241.0], [6.2, 2243.0], [6.3, 2258.0], [6.4, 2259.0], [6.5, 2262.0], [6.6, 2266.0], [6.7, 2268.0], [6.8, 2276.0], [6.9, 2285.0], [7.0, 2303.0], [7.1, 2315.0], [7.2, 2325.0], [7.3, 2332.0], [7.4, 2337.0], [7.5, 2346.0], [7.6, 2357.0], [7.7, 2366.0], [7.8, 2379.0], [7.9, 2382.0], [8.0, 2384.0], [8.1, 2389.0], [8.2, 2392.0], [8.3, 2409.0], [8.4, 2414.0], [8.5, 2418.0], [8.6, 2425.0], [8.7, 2436.0], [8.8, 2438.0], [8.9, 2455.0], [9.0, 2464.0], [9.1, 2495.0], [9.2, 2513.0], [9.3, 2525.0], [9.4, 2534.0], [9.5, 2542.0], [9.6, 2550.0], [9.7, 2555.0], [9.8, 2558.0], [9.9, 2563.0], [10.0, 2566.0], [10.1, 2576.0], [10.2, 2586.0], [10.3, 2588.0], [10.4, 2594.0], [10.5, 2599.0], [10.6, 2611.0], [10.7, 2616.0], [10.8, 2636.0], [10.9, 2649.0], [11.0, 2655.0], [11.1, 2658.0], [11.2, 2665.0], [11.3, 2677.0], [11.4, 2684.0], [11.5, 2689.0], [11.6, 2700.0], [11.7, 2703.0], [11.8, 2707.0], [11.9, 2709.0], [12.0, 2725.0], [12.1, 2728.0], [12.2, 2730.0], [12.3, 2734.0], [12.4, 2737.0], [12.5, 2741.0], [12.6, 2757.0], [12.7, 2758.0], [12.8, 2771.0], [12.9, 2777.0], [13.0, 2796.0], [13.1, 2800.0], [13.2, 2827.0], [13.3, 2835.0], [13.4, 2855.0], [13.5, 2859.0], [13.6, 2874.0], [13.7, 2886.0], [13.8, 2903.0], [13.9, 2912.0], [14.0, 2918.0], [14.1, 2918.0], [14.2, 2930.0], [14.3, 2939.0], [14.4, 2952.0], [14.5, 2968.0], [14.6, 2978.0], [14.7, 2995.0], [14.8, 3013.0], [14.9, 3021.0], [15.0, 3027.0], [15.1, 3029.0], [15.2, 3032.0], [15.3, 3036.0], [15.4, 3047.0], [15.5, 3049.0], [15.6, 3060.0], [15.7, 3067.0], [15.8, 3082.0], [15.9, 3086.0], [16.0, 3093.0], [16.1, 3108.0], [16.2, 3119.0], [16.3, 3121.0], [16.4, 3133.0], [16.5, 3135.0], [16.6, 3138.0], [16.7, 3146.0], [16.8, 3155.0], [16.9, 3158.0], [17.0, 3169.0], [17.1, 3174.0], [17.2, 3179.0], [17.3, 3184.0], [17.4, 3185.0], [17.5, 3191.0], [17.6, 3197.0], [17.7, 3205.0], [17.8, 3208.0], [17.9, 3208.0], [18.0, 3216.0], [18.1, 3227.0], [18.2, 3242.0], [18.3, 3247.0], [18.4, 3252.0], [18.5, 3254.0], [18.6, 3256.0], [18.7, 3261.0], [18.8, 3268.0], [18.9, 3272.0], [19.0, 3273.0], [19.1, 3284.0], [19.2, 3295.0], [19.3, 3297.0], [19.4, 3307.0], [19.5, 3309.0], [19.6, 3322.0], [19.7, 3328.0], [19.8, 3335.0], [19.9, 3337.0], [20.0, 3344.0], [20.1, 3353.0], [20.2, 3363.0], [20.3, 3365.0], [20.4, 3371.0], [20.5, 3372.0], [20.6, 3379.0], [20.7, 3381.0], [20.8, 3391.0], [20.9, 3392.0], [21.0, 3400.0], [21.1, 3401.0], [21.2, 3408.0], [21.3, 3410.0], [21.4, 3422.0], [21.5, 3425.0], [21.6, 3432.0], [21.7, 3433.0], [21.8, 3436.0], [21.9, 3448.0], [22.0, 3454.0], [22.1, 3459.0], [22.2, 3469.0], [22.3, 3490.0], [22.4, 3501.0], [22.5, 3509.0], [22.6, 3512.0], [22.7, 3515.0], [22.8, 3520.0], [22.9, 3527.0], [23.0, 3535.0], [23.1, 3538.0], [23.2, 3545.0], [23.3, 3555.0], [23.4, 3563.0], [23.5, 3570.0], [23.6, 3580.0], [23.7, 3582.0], [23.8, 3586.0], [23.9, 3594.0], [24.0, 3603.0], [24.1, 3620.0], [24.2, 3630.0], [24.3, 3633.0], [24.4, 3642.0], [24.5, 3647.0], [24.6, 3664.0], [24.7, 3673.0], [24.8, 3683.0], [24.9, 3685.0], [25.0, 3691.0], [25.1, 3692.0], [25.2, 3694.0], [25.3, 3700.0], [25.4, 3711.0], [25.5, 3717.0], [25.6, 3721.0], [25.7, 3729.0], [25.8, 3742.0], [25.9, 3747.0], [26.0, 3758.0], [26.1, 3761.0], [26.2, 3773.0], [26.3, 3781.0], [26.4, 3787.0], [26.5, 3796.0], [26.6, 3809.0], [26.7, 3816.0], [26.8, 3823.0], [26.9, 3830.0], [27.0, 3844.0], [27.1, 3851.0], [27.2, 3855.0], [27.3, 3865.0], [27.4, 3873.0], [27.5, 3876.0], [27.6, 3886.0], [27.7, 3892.0], [27.8, 3897.0], [27.9, 3901.0], [28.0, 3917.0], [28.1, 3931.0], [28.2, 3939.0], [28.3, 3947.0], [28.4, 3955.0], [28.5, 3959.0], [28.6, 3970.0], [28.7, 3973.0], [28.8, 3981.0], [28.9, 3992.0], [29.0, 4006.0], [29.1, 4015.0], [29.2, 4035.0], [29.3, 4035.0], [29.4, 4040.0], [29.5, 4049.0], [29.6, 4057.0], [29.7, 4063.0], [29.8, 4064.0], [29.9, 4067.0], [30.0, 4078.0], [30.1, 4080.0], [30.2, 4095.0], [30.3, 4098.0], [30.4, 4107.0], [30.5, 4125.0], [30.6, 4134.0], [30.7, 4139.0], [30.8, 4141.0], [30.9, 4148.0], [31.0, 4152.0], [31.1, 4161.0], [31.2, 4165.0], [31.3, 4169.0], [31.4, 4174.0], [31.5, 4176.0], [31.6, 4190.0], [31.7, 4197.0], [31.8, 4206.0], [31.9, 4207.0], [32.0, 4213.0], [32.1, 4213.0], [32.2, 4220.0], [32.3, 4224.0], [32.4, 4233.0], [32.5, 4238.0], [32.6, 4247.0], [32.7, 4248.0], [32.8, 4254.0], [32.9, 4254.0], [33.0, 4261.0], [33.1, 4264.0], [33.2, 4271.0], [33.3, 4277.0], [33.4, 4283.0], [33.5, 4289.0], [33.6, 4295.0], [33.7, 4312.0], [33.8, 4315.0], [33.9, 4334.0], [34.0, 4354.0], [34.1, 4359.0], [34.2, 4370.0], [34.3, 4376.0], [34.4, 4381.0], [34.5, 4383.0], [34.6, 4390.0], [34.7, 4392.0], [34.8, 4393.0], [34.9, 4396.0], [35.0, 4400.0], [35.1, 4406.0], [35.2, 4415.0], [35.3, 4421.0], [35.4, 4429.0], [35.5, 4439.0], [35.6, 4456.0], [35.7, 4466.0], [35.8, 4468.0], [35.9, 4471.0], [36.0, 4482.0], [36.1, 4492.0], [36.2, 4504.0], [36.3, 4517.0], [36.4, 4528.0], [36.5, 4533.0], [36.6, 4556.0], [36.7, 4562.0], [36.8, 4573.0], [36.9, 4581.0], [37.0, 4594.0], [37.1, 4600.0], [37.2, 4603.0], [37.3, 4606.0], [37.4, 4615.0], [37.5, 4618.0], [37.6, 4631.0], [37.7, 4633.0], [37.8, 4636.0], [37.9, 4639.0], [38.0, 4651.0], [38.1, 4653.0], [38.2, 4655.0], [38.3, 4661.0], [38.4, 4668.0], [38.5, 4673.0], [38.6, 4683.0], [38.7, 4693.0], [38.8, 4698.0], [38.9, 4704.0], [39.0, 4713.0], [39.1, 4718.0], [39.2, 4733.0], [39.3, 4736.0], [39.4, 4759.0], [39.5, 4763.0], [39.6, 4767.0], [39.7, 4770.0], [39.8, 4778.0], [39.9, 4787.0], [40.0, 4795.0], [40.1, 4811.0], [40.2, 4817.0], [40.3, 4824.0], [40.4, 4828.0], [40.5, 4838.0], [40.6, 4859.0], [40.7, 4876.0], [40.8, 4881.0], [40.9, 4888.0], [41.0, 4902.0], [41.1, 4905.0], [41.2, 4921.0], [41.3, 4924.0], [41.4, 4930.0], [41.5, 4943.0], [41.6, 4952.0], [41.7, 4960.0], [41.8, 4981.0], [41.9, 4991.0], [42.0, 4998.0], [42.1, 5012.0], [42.2, 5018.0], [42.3, 5024.0], [42.4, 5066.0], [42.5, 5083.0], [42.6, 5109.0], [42.7, 5120.0], [42.8, 5136.0], [42.9, 5137.0], [43.0, 5148.0], [43.1, 5161.0], [43.2, 5177.0], [43.3, 5181.0], [43.4, 5189.0], [43.5, 5200.0], [43.6, 5207.0], [43.7, 5208.0], [43.8, 5221.0], [43.9, 5225.0], [44.0, 5230.0], [44.1, 5237.0], [44.2, 5247.0], [44.3, 5274.0], [44.4, 5305.0], [44.5, 5317.0], [44.6, 5342.0], [44.7, 5351.0], [44.8, 5364.0], [44.9, 5368.0], [45.0, 5375.0], [45.1, 5381.0], [45.2, 5413.0], [45.3, 5421.0], [45.4, 5432.0], [45.5, 5456.0], [45.6, 5491.0], [45.7, 5493.0], [45.8, 5525.0], [45.9, 5527.0], [46.0, 5536.0], [46.1, 5540.0], [46.2, 5569.0], [46.3, 5573.0], [46.4, 5580.0], [46.5, 5592.0], [46.6, 5600.0], [46.7, 5616.0], [46.8, 5635.0], [46.9, 5652.0], [47.0, 5690.0], [47.1, 5712.0], [47.2, 5727.0], [47.3, 5739.0], [47.4, 5781.0], [47.5, 5791.0], [47.6, 5809.0], [47.7, 5825.0], [47.8, 5855.0], [47.9, 5871.0], [48.0, 5895.0], [48.1, 5910.0], [48.2, 5930.0], [48.3, 5933.0], [48.4, 5949.0], [48.5, 5965.0], [48.6, 5991.0], [48.7, 5999.0], [48.8, 6030.0], [48.9, 6048.0], [49.0, 6068.0], [49.1, 6091.0], [49.2, 6147.0], [49.3, 6149.0], [49.4, 6194.0], [49.5, 6205.0], [49.6, 6240.0], [49.7, 6254.0], [49.8, 6319.0], [49.9, 6355.0], [50.0, 6367.0], [50.1, 6371.0], [50.2, 6390.0], [50.3, 6405.0], [50.4, 6424.0], [50.5, 6435.0], [50.6, 6459.0], [50.7, 6461.0], [50.8, 6479.0], [50.9, 6483.0], [51.0, 6501.0], [51.1, 6509.0], [51.2, 6521.0], [51.3, 6524.0], [51.4, 6541.0], [51.5, 6549.0], [51.6, 6598.0], [51.7, 6639.0], [51.8, 6661.0], [51.9, 6673.0], [52.0, 6687.0], [52.1, 6696.0], [52.2, 6716.0], [52.3, 6721.0], [52.4, 6733.0], [52.5, 6738.0], [52.6, 6784.0], [52.7, 6792.0], [52.8, 6808.0], [52.9, 6824.0], [53.0, 6836.0], [53.1, 6841.0], [53.2, 6857.0], [53.3, 6878.0], [53.4, 6888.0], [53.5, 6898.0], [53.6, 6903.0], [53.7, 6912.0], [53.8, 6915.0], [53.9, 6918.0], [54.0, 6929.0], [54.1, 6933.0], [54.2, 6940.0], [54.3, 6955.0], [54.4, 6968.0], [54.5, 6982.0], [54.6, 7029.0], [54.7, 7036.0], [54.8, 7048.0], [54.9, 7057.0], [55.0, 7064.0], [55.1, 7070.0], [55.2, 7076.0], [55.3, 7110.0], [55.4, 7117.0], [55.5, 7127.0], [55.6, 7136.0], [55.7, 7138.0], [55.8, 7149.0], [55.9, 7163.0], [56.0, 7185.0], [56.1, 7208.0], [56.2, 7214.0], [56.3, 7221.0], [56.4, 7231.0], [56.5, 7244.0], [56.6, 7261.0], [56.7, 7270.0], [56.8, 7288.0], [56.9, 7290.0], [57.0, 7300.0], [57.1, 7307.0], [57.2, 7313.0], [57.3, 7320.0], [57.4, 7338.0], [57.5, 7344.0], [57.6, 7361.0], [57.7, 7362.0], [57.8, 7387.0], [57.9, 7395.0], [58.0, 7397.0], [58.1, 7399.0], [58.2, 7413.0], [58.3, 7419.0], [58.4, 7448.0], [58.5, 7454.0], [58.6, 7459.0], [58.7, 7477.0], [58.8, 7488.0], [58.9, 7496.0], [59.0, 7530.0], [59.1, 7533.0], [59.2, 7540.0], [59.3, 7547.0], [59.4, 7550.0], [59.5, 7558.0], [59.6, 7569.0], [59.7, 7581.0], [59.8, 7597.0], [59.9, 7601.0], [60.0, 7622.0], [60.1, 7626.0], [60.2, 7634.0], [60.3, 7635.0], [60.4, 7643.0], [60.5, 7646.0], [60.6, 7651.0], [60.7, 7654.0], [60.8, 7657.0], [60.9, 7658.0], [61.0, 7665.0], [61.1, 7666.0], [61.2, 7670.0], [61.3, 7675.0], [61.4, 7682.0], [61.5, 7684.0], [61.6, 7689.0], [61.7, 7693.0], [61.8, 7696.0], [61.9, 7703.0], [62.0, 7706.0], [62.1, 7708.0], [62.2, 7711.0], [62.3, 7715.0], [62.4, 7723.0], [62.5, 7729.0], [62.6, 7731.0], [62.7, 7732.0], [62.8, 7737.0], [62.9, 7740.0], [63.0, 7746.0], [63.1, 7756.0], [63.2, 7759.0], [63.3, 7760.0], [63.4, 7766.0], [63.5, 7776.0], [63.6, 7783.0], [63.7, 7792.0], [63.8, 7798.0], [63.9, 7803.0], [64.0, 7812.0], [64.1, 7821.0], [64.2, 7823.0], [64.3, 7828.0], [64.4, 7836.0], [64.5, 7839.0], [64.6, 7844.0], [64.7, 7848.0], [64.8, 7855.0], [64.9, 7861.0], [65.0, 7871.0], [65.1, 7873.0], [65.2, 7878.0], [65.3, 7889.0], [65.4, 7909.0], [65.5, 7915.0], [65.6, 7918.0], [65.7, 7924.0], [65.8, 7929.0], [65.9, 7930.0], [66.0, 7938.0], [66.1, 7940.0], [66.2, 7949.0], [66.3, 7950.0], [66.4, 7958.0], [66.5, 7960.0], [66.6, 7972.0], [66.7, 7974.0], [66.8, 7982.0], [66.9, 7987.0], [67.0, 7996.0], [67.1, 8002.0], [67.2, 8007.0], [67.3, 8012.0], [67.4, 8014.0], [67.5, 8017.0], [67.6, 8021.0], [67.7, 8023.0], [67.8, 8027.0], [67.9, 8031.0], [68.0, 8042.0], [68.1, 8043.0], [68.2, 8049.0], [68.3, 8054.0], [68.4, 8061.0], [68.5, 8065.0], [68.6, 8076.0], [68.7, 8078.0], [68.8, 8081.0], [68.9, 8088.0], [69.0, 8091.0], [69.1, 8098.0], [69.2, 8104.0], [69.3, 8107.0], [69.4, 8114.0], [69.5, 8116.0], [69.6, 8120.0], [69.7, 8129.0], [69.8, 8136.0], [69.9, 8140.0], [70.0, 8145.0], [70.1, 8146.0], [70.2, 8154.0], [70.3, 8156.0], [70.4, 8162.0], [70.5, 8166.0], [70.6, 8173.0], [70.7, 8174.0], [70.8, 8183.0], [70.9, 8184.0], [71.0, 8189.0], [71.1, 8192.0], [71.2, 8205.0], [71.3, 8207.0], [71.4, 8210.0], [71.5, 8215.0], [71.6, 8222.0], [71.7, 8222.0], [71.8, 8228.0], [71.9, 8229.0], [72.0, 8231.0], [72.1, 8235.0], [72.2, 8241.0], [72.3, 8245.0], [72.4, 8250.0], [72.5, 8258.0], [72.6, 8264.0], [72.7, 8270.0], [72.8, 8273.0], [72.9, 8284.0], [73.0, 8290.0], [73.1, 8291.0], [73.2, 8294.0], [73.3, 8300.0], [73.4, 8309.0], [73.5, 8311.0], [73.6, 8314.0], [73.7, 8316.0], [73.8, 8324.0], [73.9, 8328.0], [74.0, 8337.0], [74.1, 8339.0], [74.2, 8340.0], [74.3, 8344.0], [74.4, 8345.0], [74.5, 8346.0], [74.6, 8351.0], [74.7, 8353.0], [74.8, 8360.0], [74.9, 8378.0], [75.0, 8380.0], [75.1, 8381.0], [75.2, 8389.0], [75.3, 8394.0], [75.4, 8400.0], [75.5, 8402.0], [75.6, 8405.0], [75.7, 8408.0], [75.8, 8412.0], [75.9, 8414.0], [76.0, 8417.0], [76.1, 8421.0], [76.2, 8425.0], [76.3, 8439.0], [76.4, 8440.0], [76.5, 8441.0], [76.6, 8443.0], [76.7, 8446.0], [76.8, 8451.0], [76.9, 8452.0], [77.0, 8466.0], [77.1, 8468.0], [77.2, 8472.0], [77.3, 8475.0], [77.4, 8476.0], [77.5, 8482.0], [77.6, 8482.0], [77.7, 8484.0], [77.8, 8490.0], [77.9, 8494.0], [78.0, 8495.0], [78.1, 8500.0], [78.2, 8502.0], [78.3, 8504.0], [78.4, 8508.0], [78.5, 8511.0], [78.6, 8512.0], [78.7, 8513.0], [78.8, 8515.0], [78.9, 8528.0], [79.0, 8533.0], [79.1, 8544.0], [79.2, 8546.0], [79.3, 8549.0], [79.4, 8553.0], [79.5, 8559.0], [79.6, 8563.0], [79.7, 8566.0], [79.8, 8570.0], [79.9, 8573.0], [80.0, 8575.0], [80.1, 8577.0], [80.2, 8579.0], [80.3, 8584.0], [80.4, 8586.0], [80.5, 8594.0], [80.6, 8604.0], [80.7, 8609.0], [80.8, 8611.0], [80.9, 8622.0], [81.0, 8626.0], [81.1, 8629.0], [81.2, 8630.0], [81.3, 8634.0], [81.4, 8636.0], [81.5, 8648.0], [81.6, 8651.0], [81.7, 8655.0], [81.8, 8663.0], [81.9, 8667.0], [82.0, 8672.0], [82.1, 8683.0], [82.2, 8691.0], [82.3, 8699.0], [82.4, 8701.0], [82.5, 8703.0], [82.6, 8704.0], [82.7, 8707.0], [82.8, 8708.0], [82.9, 8710.0], [83.0, 8714.0], [83.1, 8721.0], [83.2, 8722.0], [83.3, 8729.0], [83.4, 8730.0], [83.5, 8734.0], [83.6, 8737.0], [83.7, 8751.0], [83.8, 8755.0], [83.9, 8758.0], [84.0, 8759.0], [84.1, 8772.0], [84.2, 8774.0], [84.3, 8781.0], [84.4, 8787.0], [84.5, 8797.0], [84.6, 8798.0], [84.7, 8803.0], [84.8, 8808.0], [84.9, 8818.0], [85.0, 8822.0], [85.1, 8831.0], [85.2, 8838.0], [85.3, 8842.0], [85.4, 8847.0], [85.5, 8853.0], [85.6, 8854.0], [85.7, 8861.0], [85.8, 8863.0], [85.9, 8866.0], [86.0, 8869.0], [86.1, 8880.0], [86.2, 8884.0], [86.3, 8892.0], [86.4, 8893.0], [86.5, 8894.0], [86.6, 8898.0], [86.7, 8902.0], [86.8, 8905.0], [86.9, 8911.0], [87.0, 8916.0], [87.1, 8927.0], [87.2, 8931.0], [87.3, 8933.0], [87.4, 8945.0], [87.5, 8950.0], [87.6, 8955.0], [87.7, 8958.0], [87.8, 8963.0], [87.9, 8976.0], [88.0, 8977.0], [88.1, 8982.0], [88.2, 8986.0], [88.3, 8991.0], [88.4, 8996.0], [88.5, 8997.0], [88.6, 8999.0], [88.7, 9004.0], [88.8, 9012.0], [88.9, 9014.0], [89.0, 9017.0], [89.1, 9022.0], [89.2, 9028.0], [89.3, 9035.0], [89.4, 9037.0], [89.5, 9046.0], [89.6, 9054.0], [89.7, 9068.0], [89.8, 9072.0], [89.9, 9075.0], [90.0, 9077.0], [90.1, 9084.0], [90.2, 9088.0], [90.3, 9097.0], [90.4, 9112.0], [90.5, 9126.0], [90.6, 9143.0], [90.7, 9149.0], [90.8, 9153.0], [90.9, 9160.0], [91.0, 9163.0], [91.1, 9178.0], [91.2, 9190.0], [91.3, 9196.0], [91.4, 9202.0], [91.5, 9209.0], [91.6, 9220.0], [91.7, 9225.0], [91.8, 9228.0], [91.9, 9234.0], [92.0, 9236.0], [92.1, 9245.0], [92.2, 9251.0], [92.3, 9264.0], [92.4, 9271.0], [92.5, 9284.0], [92.6, 9294.0], [92.7, 9296.0], [92.8, 9306.0], [92.9, 9315.0], [93.0, 9317.0], [93.1, 9324.0], [93.2, 9330.0], [93.3, 9346.0], [93.4, 9353.0], [93.5, 9361.0], [93.6, 9365.0], [93.7, 9372.0], [93.8, 9376.0], [93.9, 9386.0], [94.0, 9391.0], [94.1, 9412.0], [94.2, 9418.0], [94.3, 9425.0], [94.4, 9432.0], [94.5, 9439.0], [94.6, 9445.0], [94.7, 9448.0], [94.8, 9469.0], [94.9, 9483.0], [95.0, 9496.0], [95.1, 9509.0], [95.2, 9515.0], [95.3, 9518.0], [95.4, 9541.0], [95.5, 9564.0], [95.6, 9573.0], [95.7, 9577.0], [95.8, 9596.0], [95.9, 9607.0], [96.0, 9609.0], [96.1, 9627.0], [96.2, 9641.0], [96.3, 9658.0], [96.4, 9666.0], [96.5, 9681.0], [96.6, 9707.0], [96.7, 9723.0], [96.8, 9738.0], [96.9, 9750.0], [97.0, 9756.0], [97.1, 9763.0], [97.2, 9775.0], [97.3, 9781.0], [97.4, 9795.0], [97.5, 9800.0], [97.6, 9801.0], [97.7, 9811.0], [97.8, 9814.0], [97.9, 9831.0], [98.0, 9844.0], [98.1, 9851.0], [98.2, 9864.0], [98.3, 9871.0], [98.4, 9880.0], [98.5, 9889.0], [98.6, 9891.0], [98.7, 9903.0], [98.8, 9917.0], [98.9, 9925.0], [99.0, 9943.0], [99.1, 9955.0], [99.2, 9968.0], [99.3, 9989.0], [99.4, 9992.0], [99.5, 10006.0], [99.6, 10010.0], [99.7, 10046.0], [99.8, 10129.0], [99.9, 10166.0], [100.0, 10315.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 700.0, "maxY": 66.0, "series": [{"data": [[700.0, 1.0], [1000.0, 2.0], [1100.0, 5.0], [1200.0, 1.0], [1300.0, 2.0], [1400.0, 3.0], [1500.0, 8.0], [1600.0, 15.0], [1700.0, 17.0], [1800.0, 12.0], [1900.0, 22.0], [2000.0, 21.0], [2100.0, 27.0], [2200.0, 38.0], [2300.0, 32.0], [2400.0, 23.0], [2500.0, 34.0], [2600.0, 27.0], [2700.0, 37.0], [2800.0, 16.0], [2900.0, 26.0], [3000.0, 32.0], [3100.0, 40.0], [3200.0, 42.0], [3300.0, 42.0], [3400.0, 35.0], [3500.0, 40.0], [3600.0, 32.0], [3700.0, 32.0], [3800.0, 33.0], [3900.0, 27.0], [4000.0, 34.0], [4100.0, 35.0], [4200.0, 49.0], [4300.0, 33.0], [4400.0, 30.0], [4500.0, 21.0], [4600.0, 45.0], [4700.0, 31.0], [4800.0, 23.0], [4900.0, 26.0], [5000.0, 13.0], [5100.0, 23.0], [5200.0, 22.0], [5300.0, 20.0], [5400.0, 16.0], [5500.0, 20.0], [5600.0, 11.0], [5700.0, 13.0], [5800.0, 13.0], [5900.0, 16.0], [6000.0, 12.0], [6100.0, 7.0], [6200.0, 7.0], [6300.0, 13.0], [6400.0, 18.0], [6500.0, 16.0], [6600.0, 12.0], [6800.0, 20.0], [6900.0, 24.0], [6700.0, 16.0], [7000.0, 18.0], [7100.0, 21.0], [7200.0, 23.0], [7300.0, 28.0], [7400.0, 20.0], [7500.0, 24.0], [7600.0, 49.0], [7700.0, 51.0], [7800.0, 36.0], [7900.0, 43.0], [8000.0, 53.0], [8100.0, 49.0], [8200.0, 54.0], [8300.0, 53.0], [8400.0, 66.0], [8500.0, 62.0], [8600.0, 45.0], [8700.0, 58.0], [8800.0, 49.0], [8900.0, 50.0], [9000.0, 43.0], [9100.0, 26.0], [9200.0, 35.0], [9300.0, 32.0], [9400.0, 25.0], [9500.0, 19.0], [9600.0, 19.0], [9700.0, 23.0], [9800.0, 29.0], [9900.0, 21.0], [10000.0, 7.0], [10100.0, 5.0], [10300.0, 1.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2485.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 15.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2485.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1250.8944, "minX": 1.7555889E12, "maxY": 1250.8944, "series": [{"data": [[1.7555889E12, 1250.8944]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555889E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1008.0, "minX": 1.0, "maxY": 10315.0, "series": [{"data": [[2.0, 9811.0], [3.0, 10315.0], [4.0, 9391.0], [5.0, 9422.0], [6.0, 9376.0], [7.0, 10169.0], [8.0, 9849.0], [9.0, 10166.0], [10.0, 9446.0], [11.0, 9969.0], [12.0, 9925.0], [13.0, 8945.0], [14.0, 9257.0], [15.0, 9356.0], [16.0, 8916.0], [17.0, 9353.0], [18.0, 10053.0], [19.0, 9641.0], [20.0, 9609.0], [21.0, 8958.0], [22.0, 10136.0], [24.0, 10087.5], [25.0, 9242.0], [27.0, 10081.0], [30.0, 9665.0], [31.0, 8759.0], [33.0, 9986.0], [32.0, 10015.0], [35.0, 8703.0], [34.0, 9535.0], [37.0, 9925.0], [36.0, 8707.0], [39.0, 9513.0], [38.0, 9666.0], [41.0, 8662.0], [40.0, 9696.0], [43.0, 9026.0], [45.0, 9518.5], [47.0, 9516.0], [46.0, 9448.0], [49.0, 9329.0], [48.0, 9251.0], [51.0, 9336.0], [53.0, 9111.0], [55.0, 9463.0], [54.0, 8663.0], [57.0, 9334.5], [59.0, 9992.0], [58.0, 9230.0], [60.0, 9398.0], [63.0, 9126.0], [62.0, 9307.0], [65.0, 8651.0], [64.0, 9564.0], [70.0, 9955.0], [69.0, 8626.0], [68.0, 9157.333333333334], [75.0, 9948.0], [74.0, 8609.0], [73.0, 9849.0], [79.0, 9650.0], [77.0, 10009.5], [82.0, 9515.5], [80.0, 9209.0], [84.0, 9569.5], [91.0, 9723.0], [90.0, 9485.833333333332], [95.0, 9174.333333333334], [92.0, 9085.0], [98.0, 9478.0], [97.0, 8739.0], [96.0, 9755.0], [103.0, 9859.0], [101.0, 9749.0], [100.0, 8875.5], [105.0, 9222.5], [111.0, 8575.0], [110.0, 8721.0], [109.0, 9888.0], [108.0, 9269.666666666666], [115.0, 9541.0], [114.0, 8894.333333333334], [117.0, 9856.0], [116.0, 8963.0], [121.0, 9317.0], [120.0, 9436.666666666666], [126.0, 9075.5], [124.0, 9459.333333333334], [134.0, 9147.0], [132.0, 9194.0], [129.0, 9939.0], [128.0, 9286.0], [143.0, 9889.0], [142.0, 9432.0], [141.0, 9900.5], [139.0, 9414.5], [137.0, 9782.5], [136.0, 8874.0], [150.0, 9658.0], [149.0, 9154.0], [146.0, 9386.0], [145.0, 9632.0], [159.0, 9196.0], [158.0, 9422.5], [157.0, 9069.0], [155.0, 9824.0], [154.0, 9391.0], [153.0, 8736.666666666666], [167.0, 9580.5], [165.0, 8515.0], [164.0, 9194.0], [163.0, 9525.0], [160.0, 8648.0], [175.0, 9106.0], [174.0, 8523.0], [172.0, 9798.0], [170.0, 8767.0], [168.0, 9077.0], [181.0, 9407.0], [177.0, 9675.0], [176.0, 9866.0], [191.0, 8976.0], [190.0, 8933.0], [189.0, 9247.0], [188.0, 8701.0], [186.0, 9041.6], [199.0, 9602.5], [197.0, 8502.0], [196.0, 9583.0], [195.0, 8936.5], [192.0, 8513.0], [206.0, 9187.333333333334], [203.0, 9075.0], [202.0, 9320.0], [201.0, 8634.0], [200.0, 8484.0], [214.0, 8491.0], [212.0, 8641.0], [210.0, 8473.5], [209.0, 9707.0], [208.0, 9613.0], [223.0, 8805.5], [220.0, 9083.0], [219.0, 9767.0], [218.0, 8843.0], [230.0, 9698.0], [228.0, 8946.0], [227.0, 9143.0], [226.0, 9351.0], [225.0, 8624.0], [224.0, 9293.5], [238.0, 9508.0], [236.0, 8538.5], [233.0, 8964.0], [232.0, 8741.5], [243.0, 8446.0], [242.0, 8783.333333333334], [241.0, 8469.0], [252.0, 9226.0], [250.0, 9528.0], [248.0, 8970.8], [264.0, 9577.0], [268.0, 9322.0], [259.0, 9105.6], [257.0, 9831.0], [256.0, 9234.0], [267.0, 8584.0], [266.0, 9760.0], [265.0, 8900.0], [263.0, 8704.0], [262.0, 8424.0], [261.0, 9831.0], [260.0, 8451.0], [280.0, 9469.0], [287.0, 9379.75], [283.0, 8892.0], [282.0, 9785.0], [281.0, 8451.0], [279.0, 9178.0], [278.0, 8408.0], [277.0, 9214.75], [273.0, 8488.333333333334], [272.0, 9183.5], [301.0, 9801.0], [303.0, 8900.0], [300.0, 9208.25], [297.0, 9218.5], [294.0, 8903.0], [293.0, 9781.0], [292.0, 9234.0], [290.0, 8565.0], [289.0, 9058.0], [316.0, 8861.0], [319.0, 8384.0], [318.0, 9235.0], [317.0, 8544.0], [315.0, 8813.5], [311.0, 8407.0], [304.0, 9236.0], [309.0, 8888.0], [308.0, 8400.0], [307.0, 8553.0], [306.0, 8655.0], [323.0, 8984.0], [335.0, 9104.333333333334], [332.0, 8861.0], [331.0, 9294.0], [330.0, 9018.5], [328.0, 8842.0], [327.0, 9713.0], [326.0, 8805.333333333334], [322.0, 8452.5], [320.0, 8512.0], [349.0, 8990.333333333334], [351.0, 8907.5], [348.0, 8601.0], [344.0, 9041.0], [343.0, 8864.0], [341.0, 8595.0], [340.0, 8598.5], [337.0, 8847.0], [336.0, 8714.0], [366.0, 8667.0], [367.0, 8806.0], [365.0, 8314.0], [364.0, 9245.0], [363.0, 8835.0], [362.0, 8817.0], [361.0, 8797.5], [360.0, 8334.0], [359.0, 8974.0], [353.0, 8360.0], [352.0, 9648.0], [355.0, 9002.0], [354.0, 8986.0], [357.0, 8820.0], [356.0, 8356.0], [371.0, 8313.0], [381.0, 8976.0], [382.0, 8303.0], [380.0, 8988.25], [376.0, 8533.5], [374.0, 8477.0], [373.0, 9632.0], [372.0, 8482.0], [370.0, 8314.0], [369.0, 8917.0], [368.0, 9596.0], [398.0, 9160.0], [399.0, 8272.0], [397.0, 8286.0], [396.0, 8259.0], [395.0, 8294.0], [394.0, 9101.0], [392.0, 8758.0], [391.0, 8950.0], [387.0, 9000.5], [385.0, 8751.333333333334], [390.0, 8544.0], [388.0, 8894.0], [414.0, 8346.0], [415.0, 8231.0], [413.0, 8717.0], [411.0, 8722.0], [410.0, 8241.0], [409.0, 8853.333333333334], [406.0, 8733.0], [405.0, 9294.5], [403.0, 8325.5], [401.0, 8737.0], [400.0, 8755.0], [431.0, 8207.0], [430.0, 8764.666666666666], [427.0, 9042.0], [426.0, 8221.0], [425.0, 8211.0], [424.0, 9130.5], [422.0, 9334.5], [420.0, 8709.0], [419.0, 9608.0], [418.0, 9596.0], [417.0, 8728.0], [416.0, 9370.0], [445.0, 8699.0], [444.0, 8701.0], [443.0, 8457.5], [441.0, 8605.5], [439.0, 8203.0], [438.0, 8683.0], [437.0, 8230.0], [436.0, 8545.5], [432.0, 8880.0], [462.0, 8170.5], [463.0, 9014.0], [460.0, 8174.0], [450.0, 8666.0], [449.0, 8851.0], [448.0, 8296.333333333334], [459.0, 9518.0], [458.0, 9317.0], [457.0, 8187.0], [456.0, 9034.0], [455.0, 8688.0], [454.0, 8184.0], [453.0, 9330.0], [452.0, 8687.0], [478.0, 8748.5], [479.0, 8789.0], [476.0, 8644.0], [467.0, 8418.5], [465.0, 8967.0], [475.0, 9283.0], [474.0, 8156.0], [473.0, 8822.5], [471.0, 8162.0], [470.0, 8385.0], [468.0, 9506.0], [482.0, 8111.0], [495.0, 8429.5], [493.0, 8911.0], [489.0, 8129.0], [488.0, 8606.0], [487.0, 8366.5], [485.0, 8276.333333333334], [481.0, 8581.0], [480.0, 8144.0], [510.0, 8183.0], [511.0, 8183.0], [509.0, 8571.0], [508.0, 8053.0], [507.0, 8576.0], [506.0, 8751.0], [505.0, 8535.0], [504.0, 9228.0], [503.0, 8089.0], [496.0, 8606.0], [499.0, 8094.0], [497.0, 9401.0], [502.0, 9324.0], [501.0, 9473.0], [500.0, 8545.0], [538.0, 8504.5], [536.0, 8014.0], [518.0, 9190.0], [512.0, 8715.0], [534.0, 8452.0], [532.0, 8491.0], [530.0, 8413.0], [528.0, 8955.0], [526.0, 8781.0], [524.0, 8933.5], [520.0, 8550.0], [572.0, 8439.0], [574.0, 8380.5], [570.0, 8182.0], [568.0, 8419.0], [564.0, 8468.0], [562.0, 7964.5], [560.0, 8553.0], [558.0, 8476.0], [550.0, 8484.0], [544.0, 8654.0], [556.0, 8477.0], [554.0, 9311.0], [552.0, 7966.0], [604.0, 7908.0], [592.0, 9224.0], [602.0, 8401.0], [576.0, 8437.0], [578.0, 7928.0], [582.0, 8258.0], [586.0, 8077.0], [584.0, 9264.0], [598.0, 8484.0], [596.0, 9277.0], [594.0, 9205.0], [636.0, 8948.0], [624.0, 8356.0], [626.0, 8862.5], [628.0, 7840.0], [634.0, 8270.0], [632.0, 8340.0], [612.0, 8445.5], [610.0, 7870.0], [608.0, 9024.0], [622.0, 8347.0], [620.0, 9180.0], [618.0, 8102.5], [616.0, 8615.0], [630.0, 7823.0], [666.0, 8250.0], [670.0, 9091.0], [658.0, 7759.0], [660.0, 9159.0], [664.0, 8644.0], [642.0, 7819.0], [640.0, 8409.5], [654.0, 8351.0], [652.0, 7783.0], [650.0, 8294.0], [662.0, 8273.0], [700.0, 7684.0], [690.0, 8670.0], [688.0, 8228.0], [692.0, 8622.0], [698.0, 8339.0], [696.0, 8205.0], [678.0, 9046.0], [676.0, 8585.0], [672.0, 8417.0], [686.0, 8210.0], [684.0, 8389.0], [682.0, 8336.0], [694.0, 8380.0], [732.0, 8116.0], [734.0, 8955.0], [720.0, 8601.0], [722.0, 8146.0], [724.0, 8147.0], [730.0, 8996.0], [728.0, 8241.0], [708.0, 7982.0], [704.0, 8437.0], [716.0, 9012.0], [714.0, 8168.0], [712.0, 7646.0], [726.0, 8144.0], [740.0, 8492.5], [760.0, 8061.0], [766.0, 7524.0], [752.0, 8078.0], [754.0, 8309.0], [736.0, 9014.0], [738.0, 9004.0], [742.0, 8991.0], [750.0, 8081.0], [748.0, 8066.0], [746.0, 8192.0], [744.0, 8107.0], [758.0, 7706.0], [756.0, 7581.0], [794.0, 8133.0], [798.0, 8044.0], [784.0, 8787.0], [796.0, 8736.0], [768.0, 8014.0], [772.0, 8290.0], [774.0, 8018.0], [780.0, 8380.0], [778.0, 8006.0], [776.0, 8017.0], [790.0, 8056.0], [788.0, 7976.0], [826.0, 8031.0], [830.0, 8015.0], [818.0, 7907.0], [828.0, 7873.0], [824.0, 8027.0], [806.0, 8454.0], [804.0, 8107.0], [802.0, 8741.0], [800.0, 7950.0], [814.0, 8803.0], [812.0, 7847.5], [810.0, 7924.5], [808.0, 8759.0], [822.0, 8035.0], [856.0, 8511.0], [860.0, 7735.0], [848.0, 8702.0], [850.0, 8322.5], [862.0, 7783.0], [858.0, 8038.0], [832.0, 7373.0], [836.0, 7985.5], [834.0, 7855.0], [846.0, 7828.0], [844.0, 7833.0], [842.0, 7848.0], [854.0, 8074.666666666667], [892.0, 8066.5], [884.0, 8515.0], [880.0, 8573.0], [882.0, 7821.0], [890.0, 8546.0], [870.0, 8563.0], [868.0, 7766.0], [866.0, 8412.0], [864.0, 7781.0], [878.0, 7711.0], [876.0, 7682.0], [874.0, 7730.0], [872.0, 8566.0], [886.0, 7918.0], [924.0, 7863.0], [912.0, 8351.0], [914.0, 7549.0], [916.0, 8340.0], [926.0, 7917.0], [922.0, 7651.0], [920.0, 7654.0], [896.0, 8020.0], [898.0, 7638.0], [900.0, 7635.0], [902.0, 7616.0], [910.0, 7717.0], [908.0, 7683.0], [906.0, 7746.0], [904.0, 7844.0], [918.0, 7547.0], [952.0, 8215.0], [958.0, 7563.0], [944.0, 7395.0], [946.0, 8251.0], [956.0, 7974.0], [930.0, 7709.0], [934.0, 7853.0], [932.0, 7630.0], [942.0, 7422.0], [940.0, 7765.0], [938.0, 7668.0], [936.0, 7732.5], [950.0, 7448.0], [948.0, 7399.0], [988.0, 7992.0], [976.0, 7298.0], [978.0, 7255.0], [980.0, 7715.0], [990.0, 7185.0], [986.0, 7964.0], [984.0, 7597.0], [960.0, 7341.0], [966.0, 7317.0], [974.0, 7300.0], [972.0, 7392.0], [970.0, 7660.0], [968.0, 7929.0], [982.0, 7244.0], [1020.0, 7382.0], [1022.0, 6982.0], [1010.0, 6716.0], [1012.0, 7691.0], [1018.0, 7451.0], [1016.0, 7823.0], [998.0, 7141.0], [996.0, 7955.0], [994.0, 8042.0], [992.0, 8054.0], [1006.0, 7117.0], [1004.0, 7345.0], [1002.0, 7924.0], [1000.0, 7996.0], [1014.0, 7680.0], [1076.0, 6501.0], [1084.0, 6857.0], [1056.0, 7214.0], [1060.0, 6521.0], [1064.0, 7533.0], [1080.0, 7280.0], [1072.0, 6509.0], [1036.0, 7261.0], [1032.0, 7455.0], [1028.0, 7208.0], [1024.0, 7786.0], [1052.0, 6529.0], [1044.0, 6917.0], [1040.0, 7740.0], [1068.0, 6927.0], [1092.0, 7713.0], [1140.0, 6701.0], [1120.0, 7111.333333333333], [1096.0, 6901.0], [1088.0, 7731.0], [1116.0, 7634.0], [1112.0, 6460.0], [1104.0, 7070.0], [1132.0, 6824.0], [1128.0, 7197.0], [1208.0, 5991.0], [1212.0, 7048.0], [1188.0, 6068.0], [1192.0, 6792.0], [1204.0, 7073.0], [1200.0, 6041.0], [1164.0, 7290.0], [1160.0, 7306.0], [1152.0, 6833.5], [1180.0, 6319.0], [1176.0, 7328.0], [1172.0, 7313.0], [1168.0, 7496.0], [1196.0, 6828.5], [1272.0, 5855.0], [1264.0, 5949.0], [1252.0, 6955.0], [1248.0, 5999.0], [1256.0, 6889.0], [1276.0, 5424.0], [1268.0, 5895.0], [1220.0, 6318.0], [1224.0, 7056.0], [1228.0, 6282.0], [1244.0, 6849.0], [1240.0, 6539.0], [1236.0, 6205.0], [1232.0, 6884.0], [1260.0, 6551.0], [1328.0, 4821.0], [1332.0, 5930.0], [1320.0, 5551.0], [1340.0, 5917.0], [1312.0, 5616.0], [1280.0, 5715.0], [1284.0, 5941.0], [1288.0, 6435.0], [1292.0, 6320.0], [1308.0, 5675.0], [1304.0, 6218.0], [1300.0, 5825.0], [1296.0, 5569.0], [1324.0, 5305.0], [1316.0, 6096.0], [1400.0, 4903.0], [1376.0, 5810.0], [1380.0, 4590.0], [1384.0, 5415.333333333333], [1404.0, 5207.0], [1396.0, 4770.0], [1392.0, 5736.0], [1344.0, 5534.0], [1348.0, 5207.0], [1356.0, 5432.0], [1372.0, 5809.0], [1368.0, 5781.0], [1364.0, 5459.0], [1360.0, 5098.0], [1388.0, 4943.0], [1464.0, 5019.0], [1468.0, 4639.0], [1440.0, 5071.0], [1444.0, 4865.5], [1456.0, 5456.0], [1420.0, 5526.0], [1416.0, 5712.0], [1412.0, 5302.0], [1408.0, 5012.0], [1436.0, 5351.0], [1428.0, 5221.0], [1424.0, 4829.0], [1448.0, 5065.5], [1524.0, 5178.0], [1532.0, 4570.0], [1504.0, 4035.0], [1508.0, 4260.0], [1528.0, 4356.0], [1480.0, 4995.0], [1476.0, 5368.0], [1472.0, 5418.0], [1500.0, 5181.0], [1496.0, 4713.0], [1492.0, 4656.5], [1488.0, 4520.0], [1596.0, 4495.0], [1592.0, 4174.0], [1568.0, 5012.0], [1572.0, 4312.0], [1576.0, 4930.0], [1580.0, 4726.0], [1588.0, 4964.0], [1584.0, 4636.0], [1536.0, 5132.0], [1540.0, 4890.0], [1544.0, 4651.0], [1548.0, 4882.0], [1564.0, 4558.0], [1560.0, 4207.0], [1552.0, 5066.0], [1656.0, 4687.5], [1632.0, 3882.5], [1636.0, 4040.0], [1640.0, 4461.0], [1652.0, 4283.5], [1648.0, 4631.0], [1612.0, 4312.5], [1608.0, 4888.0], [1624.0, 4713.0], [1620.0, 4067.0], [1616.0, 4064.0], [1720.0, 4320.5], [1724.0, 3253.0], [1696.0, 4207.0], [1700.0, 4408.0], [1708.0, 3942.5], [1712.0, 4279.0], [1676.0, 4196.5], [1672.0, 4620.0], [1664.0, 4415.0], [1688.0, 3323.0], [1684.0, 4668.0], [1680.0, 3344.0], [1784.0, 3647.0], [1788.0, 3637.0], [1760.0, 3147.0], [1764.0, 3782.0], [1768.0, 3290.0], [1772.0, 4406.0], [1780.0, 3243.0], [1776.0, 4308.5], [1728.0, 4110.0], [1732.0, 3197.0], [1740.0, 4213.0], [1756.0, 4246.0], [1752.0, 3182.0], [1840.0, 3669.285714285714], [1824.0, 4313.0], [1828.0, 3525.0], [1848.0, 3898.0], [1804.0, 4064.0], [1800.0, 4334.0], [1796.0, 4277.0], [1792.0, 3086.0], [1820.0, 3917.0], [1816.0, 3029.0], [1812.0, 3851.0], [1808.0, 3903.0], [1904.0, 4002.0], [1892.0, 3174.0], [1900.0, 3476.0], [1916.0, 3761.0], [1856.0, 3039.0], [1860.0, 4011.0], [1864.0, 3821.5], [1884.0, 2973.0], [1880.0, 3410.0], [1876.0, 3208.0], [1872.0, 2999.0], [1976.0, 3725.0], [1972.0, 2714.0], [1952.0, 3563.0], [1956.0, 3546.0], [1960.0, 3578.5], [1964.0, 3844.0], [1980.0, 3774.5], [1968.0, 3537.0], [1920.0, 2730.0], [1924.0, 3273.0], [1928.0, 3958.5], [1948.0, 3591.0], [1944.0, 3983.0], [1940.0, 3217.0], [2036.0, 2906.0], [2032.0, 3801.0], [2016.0, 3541.0], [2020.0, 3212.5], [2044.0, 2963.0], [1992.0, 3937.0], [1996.0, 3330.0], [2012.0, 2656.0], [2008.0, 3781.0], [2000.0, 3773.0], [2072.0, 3684.0], [2112.0, 3032.0], [2128.0, 3558.0], [2152.0, 3454.0], [2056.0, 2946.0], [2048.0, 2806.3333333333335], [2104.0, 3133.0], [2096.0, 3174.0], [2088.0, 3169.0], [2280.0, 2635.5], [2272.0, 1897.0], [2248.0, 2654.0], [2256.0, 2055.0], [2288.0, 3025.0], [2176.0, 3191.0], [2192.0, 2216.0], [2200.0, 2262.5], [2232.0, 2565.0], [2224.0, 3303.0], [2216.0, 3295.0], [2208.0, 2851.0], [2416.0, 2599.0], [2368.0, 1837.0], [2384.0, 2728.0], [2392.0, 1861.5], [2424.0, 2215.0], [2408.0, 2278.0], [2400.0, 2012.0], [2328.0, 1935.0], [2312.0, 1970.5], [2304.0, 2661.0], [2360.0, 2353.0], [2352.0, 2261.5], [2344.0, 1688.0], [2336.0, 2684.0], [2448.0, 2083.0], [2456.0, 1976.0], [2488.0, 2240.0], [2480.0, 1751.0], [2472.0, 1860.5], [2464.0, 2258.0], [2169.0, 3169.5], [2113.0, 2268.0], [2121.0, 3193.5], [2129.0, 3138.0], [2161.0, 2474.5], [2153.0, 2261.0], [2073.0, 3582.0], [2065.0, 3105.25], [2057.0, 3633.0], [2049.0, 3392.0], [2097.0, 3642.0], [2081.0, 3103.0], [2297.0, 2654.5], [2241.0, 2658.5], [2249.0, 3162.0], [2257.0, 2943.6666666666665], [2265.0, 2016.0], [2289.0, 2531.0], [2281.0, 2536.0], [2185.0, 2962.0], [2193.0, 2140.0], [2201.0, 3304.0], [2233.0, 2259.0], [2225.0, 2700.0], [2217.0, 2313.0], [2409.0, 2594.0], [2369.0, 2870.0], [2377.0, 2241.8333333333335], [2393.0, 2587.0], [2425.0, 1782.0], [2401.0, 2224.0], [2321.0, 2157.5], [2313.0, 2741.0], [2361.0, 2091.0], [2353.0, 2336.0], [2337.0, 1706.0], [2433.0, 2029.0], [2457.0, 2118.0], [2449.0, 1574.0], [2441.0, 2174.0], [2489.0, 1691.0], [2481.0, 1842.0], [2473.0, 1545.0], [2465.0, 1928.0], [1037.0, 7812.0], [1073.0, 7521.0], [1061.0, 7736.0], [1077.0, 7708.0], [1025.0, 7231.0], [1053.0, 7758.0], [1049.0, 7045.5], [1041.0, 7285.0], [1065.0, 6932.0], [1145.0, 6758.0], [1149.0, 7511.0], [1121.0, 7221.0], [1125.0, 7549.0], [1129.0, 7675.0], [1141.0, 6876.0], [1137.0, 7178.0], [1101.0, 7064.666666666667], [1093.0, 7055.666666666667], [1089.0, 6903.0], [1117.0, 7666.0], [1113.0, 6459.0], [1109.0, 6688.0], [1105.0, 7290.0], [1133.0, 7563.0], [1201.0, 6396.0], [1213.0, 6424.0], [1185.0, 7128.5], [1189.0, 6504.0], [1209.0, 7214.0], [1153.0, 7454.0], [1157.0, 7237.5], [1161.0, 6696.0], [1165.0, 7270.0], [1181.0, 6836.0], [1177.0, 7240.0], [1173.0, 6580.0], [1169.0, 7408.0], [1197.0, 7270.0], [1193.0, 6545.0], [1273.0, 6149.0], [1249.0, 6918.0], [1253.0, 6084.0], [1257.0, 6370.0], [1277.0, 6598.0], [1269.0, 5898.0], [1265.0, 5941.0], [1221.0, 6733.0], [1225.0, 6095.0], [1245.0, 6445.0], [1241.0, 6979.0], [1237.0, 7046.0], [1261.0, 6048.0], [1337.0, 5436.0], [1341.0, 5995.0], [1313.0, 5602.0], [1317.0, 5574.0], [1321.0, 5120.0], [1333.0, 4857.0], [1329.0, 5596.0], [1293.0, 6359.0], [1289.0, 5933.0], [1281.0, 5302.0], [1309.0, 6168.0], [1305.0, 6256.0], [1301.0, 6196.0], [1297.0, 6254.0], [1325.0, 5225.0], [1401.0, 5162.0], [1405.0, 4914.0], [1377.0, 5317.0], [1381.0, 5708.0], [1385.0, 5286.0], [1397.0, 4881.0], [1393.0, 4940.0], [1357.0, 4764.0], [1353.0, 5468.25], [1349.0, 5491.0], [1345.0, 4998.0], [1373.0, 5083.0], [1369.0, 4698.0], [1365.0, 5406.0], [1361.0, 5152.0], [1389.0, 5788.0], [1461.0, 5203.5], [1469.0, 4655.0], [1441.0, 5539.0], [1445.0, 5499.0], [1465.0, 5010.0], [1421.0, 4902.0], [1413.0, 4483.0], [1437.0, 4368.0], [1433.0, 4604.0], [1429.0, 4423.0], [1425.0, 5141.0], [1453.0, 5445.5], [1533.0, 4825.0], [1505.0, 5230.0], [1509.0, 4035.0], [1513.0, 4778.0], [1521.0, 4891.5], [1485.0, 4738.5], [1481.0, 5334.0], [1473.0, 5374.0], [1501.0, 5126.0], [1497.0, 4315.0], [1493.0, 4533.0], [1489.0, 4125.0], [1593.0, 4376.0], [1573.0, 4400.0], [1577.0, 4172.0], [1581.0, 4952.0], [1597.0, 4152.0], [1585.0, 4980.0], [1537.0, 5110.0], [1541.0, 5024.0], [1545.0, 4271.0], [1549.0, 4388.0], [1565.0, 4991.0], [1561.0, 4704.0], [1557.0, 4538.0], [1553.0, 4233.0], [1661.0, 4206.0], [1657.0, 4176.0], [1633.0, 4381.0], [1637.0, 4249.0], [1641.0, 3979.0], [1645.0, 4097.0], [1613.0, 4733.0], [1609.0, 4075.0], [1605.0, 4838.5], [1629.0, 4601.0], [1625.0, 3493.0], [1617.0, 4631.0], [1717.0, 3602.5], [1701.0, 3630.0], [1709.0, 4481.0], [1721.0, 4467.0], [1713.0, 3816.0], [1677.0, 4268.0], [1673.0, 4294.6], [1693.0, 3865.0], [1689.0, 3855.0], [1685.0, 4607.0], [1681.0, 4456.0], [1785.0, 4471.0], [1765.0, 4330.0], [1769.0, 4140.0], [1773.0, 4481.0], [1789.0, 3994.0], [1781.0, 3133.0], [1729.0, 4224.0], [1733.0, 4100.0], [1741.0, 3169.0], [1745.0, 3799.3333333333335], [1841.0, 4134.0], [1853.0, 3823.5], [1849.0, 4248.0], [1845.0, 3039.0], [1805.0, 4064.0], [1801.0, 3625.0], [1797.0, 3981.0], [1793.0, 3208.0], [1817.0, 3823.0], [1809.0, 3049.0], [1913.0, 3712.5], [1909.0, 3896.0], [1917.0, 3573.0], [1889.0, 3969.0], [1893.0, 4165.0], [1897.0, 3530.6666666666665], [1901.0, 3337.0], [1857.0, 4024.0], [1861.0, 3022.0], [1865.0, 3673.0], [1885.0, 3761.0], [1881.0, 4202.0], [1873.0, 3422.0], [1969.0, 3163.0], [1957.0, 3185.0], [1961.0, 2735.0], [1965.0, 3190.0], [1929.0, 3027.0], [1933.0, 3482.0], [1945.0, 2768.0], [1941.0, 2797.0], [1937.0, 3619.0], [2037.0, 3717.0], [2045.0, 2525.0], [2017.0, 3851.0], [2021.0, 2546.0], [1985.0, 3646.5], [1989.0, 3113.0], [1993.0, 2750.0], [1997.0, 3475.0], [2013.0, 3866.0], [2009.0, 3366.0], [2001.0, 3380.0], [2058.0, 3256.0], [2154.0, 3367.0], [2122.0, 3113.0], [2074.0, 3193.0], [2050.0, 3689.0], [2106.0, 3213.0], [2098.0, 2886.0], [2090.0, 3538.0], [2082.0, 3344.0], [2282.0, 2576.0], [2242.0, 2054.0], [2250.0, 2017.0], [2258.0, 2703.0], [2298.0, 2557.0], [2274.0, 2892.0], [2178.0, 2524.0], [2186.0, 2874.0], [2202.0, 2140.0], [2234.0, 3287.0], [2226.0, 3158.0], [2218.0, 2303.0], [2210.0, 2705.0], [2426.0, 2496.0], [2370.0, 1643.0], [2378.0, 2737.0], [2386.0, 2071.0], [2394.0, 2210.0], [2330.0, 2652.5], [2322.0, 2918.0], [2306.0, 2887.0], [2362.0, 1658.0], [2354.0, 2777.0], [2346.0, 2222.0], [2338.0, 2139.0], [2442.0, 2384.0], [2450.0, 2326.0], [2482.0, 1008.0], [2474.0, 2227.0], [2466.0, 2240.0], [2171.0, 2241.0], [2163.0, 2663.0], [2115.0, 2655.0], [2123.0, 2251.0], [2131.0, 3483.0], [2139.0, 3326.5], [2075.0, 3642.0], [2067.0, 2648.5], [2059.0, 2952.0], [2051.0, 3741.0], [2107.0, 3594.0], [2099.0, 3230.0], [2091.0, 3252.0], [2083.0, 3691.0], [2291.0, 2404.5], [2251.0, 2009.0], [2259.0, 2113.0], [2267.0, 2368.0], [2299.0, 3036.0], [2275.0, 2692.0], [2179.0, 3424.0], [2187.0, 2616.0], [2195.0, 3316.5], [2203.0, 2558.0], [2235.0, 1921.0], [2219.0, 2309.0], [2211.0, 2178.0], [2427.0, 1762.0], [2419.0, 2556.3333333333335], [2371.0, 2229.0], [2379.0, 1980.0], [2387.0, 2713.0], [2395.0, 1944.0], [2411.0, 2029.0], [2403.0, 1840.5], [2331.0, 1720.0], [2323.0, 2804.0], [2315.0, 2102.0], [2307.0, 1775.0], [2363.0, 1658.0], [2347.0, 2659.0], [2339.0, 1748.0], [2451.0, 1226.0], [2459.0, 2084.0], [2443.0, 2267.0], [2435.0, 2151.5], [2491.0, 1698.5], [2475.0, 2024.0], [2467.0, 1801.0], [541.0, 8589.5], [543.0, 8259.5], [539.0, 8475.0], [517.0, 8556.5], [515.0, 8732.0], [535.0, 8503.0], [533.0, 8472.0], [531.0, 9297.0], [529.0, 9379.0], [525.0, 8681.0], [523.0, 8718.0], [521.0, 8982.5], [571.0, 8871.0], [567.0, 8863.5], [565.0, 9346.0], [563.0, 8604.0], [557.0, 8444.0], [545.0, 8501.0], [555.0, 8099.0], [553.0, 8568.0], [551.0, 8914.0], [549.0, 8414.75], [601.0, 8603.0], [605.0, 8539.0], [607.0, 8130.0], [603.0, 8714.0], [591.0, 8167.5], [577.0, 8421.0], [581.0, 8419.5], [579.0, 8441.0], [583.0, 8590.0], [589.0, 8240.0], [587.0, 9068.0], [585.0, 7909.0], [593.0, 7909.0], [633.0, 8503.0], [637.0, 7805.0], [639.0, 9124.0], [627.0, 7836.0], [629.0, 9137.0], [635.0, 8291.0], [615.0, 8110.5], [613.0, 8732.0], [609.0, 8549.0], [623.0, 8378.0], [621.0, 8348.0], [631.0, 8340.0], [667.0, 8264.0], [665.0, 8264.0], [671.0, 9022.0], [657.0, 8680.0], [659.0, 7756.0], [661.0, 7756.0], [669.0, 9109.0], [647.0, 8758.5], [645.0, 8711.5], [643.0, 7821.0], [641.0, 8321.0], [655.0, 8270.0], [653.0, 8916.0], [651.0, 8474.0], [649.0, 8285.5], [663.0, 8076.0], [697.0, 9036.0], [701.0, 8001.0], [703.0, 8310.0], [693.0, 8228.0], [699.0, 8841.0], [677.0, 8243.0], [673.0, 8622.0], [687.0, 8231.0], [685.0, 8221.0], [683.0, 8867.0], [681.0, 8506.0], [695.0, 7703.0], [729.0, 8291.0], [735.0, 8114.0], [721.0, 9040.0], [723.0, 8316.0], [725.0, 8119.0], [731.0, 8137.0], [711.0, 8237.0], [709.0, 7655.0], [707.0, 7986.5], [705.0, 8155.0], [719.0, 8157.0], [717.0, 8311.0], [715.0, 7641.0], [713.0, 8323.0], [727.0, 7652.0], [765.0, 8456.0], [767.0, 8284.0], [753.0, 7688.0], [755.0, 8897.0], [763.0, 8459.0], [761.0, 8932.0], [751.0, 8710.0], [737.0, 8928.0], [741.0, 8245.0], [749.0, 8942.0], [747.0, 8088.0], [745.0, 8546.0], [759.0, 8884.0], [757.0, 8065.0], [793.0, 8343.5], [799.0, 7950.0], [785.0, 8159.0], [795.0, 8468.0], [783.0, 8590.0], [771.0, 8097.0], [769.0, 8173.0], [773.0, 8008.0], [775.0, 8098.0], [781.0, 7804.0], [777.0, 8014.0], [791.0, 7772.0], [787.0, 8219.5], [825.0, 8770.0], [831.0, 7871.0], [817.0, 7785.5], [821.0, 8122.666666666667], [827.0, 8027.0], [807.0, 8069.0], [803.0, 7940.0], [801.0, 8768.0], [815.0, 8798.0], [813.0, 8691.0], [823.0, 7917.0], [859.0, 7792.0], [863.0, 8209.0], [851.0, 8634.0], [861.0, 8492.0], [857.0, 7798.0], [847.0, 8065.0], [833.0, 8312.0], [839.0, 8280.5], [837.0, 7845.0], [845.0, 8205.0], [843.0, 8145.0], [841.0, 7959.0], [855.0, 7803.0], [889.0, 8107.0], [893.0, 7729.0], [895.0, 8474.0], [881.0, 7702.0], [883.0, 7723.0], [871.0, 7745.0], [869.0, 8630.0], [867.0, 8654.0], [865.0, 7791.0], [879.0, 7708.0], [877.0, 7973.0], [875.0, 7975.0], [873.0, 7731.0], [887.0, 8021.0], [885.0, 7673.0], [925.0, 7149.0], [927.0, 8154.0], [913.0, 8342.0], [915.0, 7539.0], [917.0, 7705.0], [923.0, 7762.0], [921.0, 7878.0], [911.0, 7563.0], [897.0, 8414.0], [899.0, 7626.0], [901.0, 8235.0], [903.0, 7408.0], [909.0, 7601.0], [907.0, 8378.0], [905.0, 8345.0], [919.0, 7530.0], [955.0, 8082.0], [959.0, 7344.0], [945.0, 7413.0], [947.0, 7631.0], [953.0, 7362.0], [943.0, 8233.0], [929.0, 7526.5], [941.0, 7646.0], [939.0, 8060.0], [937.0, 7732.0], [951.0, 7696.0], [949.0, 7396.0], [989.0, 7833.0], [991.0, 7958.0], [977.0, 8101.0], [979.0, 7889.0], [981.0, 7888.0], [987.0, 7960.0], [985.0, 8002.0], [975.0, 7939.0], [961.0, 7338.0], [965.0, 7840.5], [963.0, 7622.0], [967.0, 8082.0], [973.0, 7419.0], [971.0, 7298.0], [969.0, 7307.0], [983.0, 8058.0], [1017.0, 7550.0], [1021.0, 7857.0], [1009.0, 7364.0], [1011.0, 7438.0], [1013.0, 7288.0], [1019.0, 7353.0], [999.0, 7938.0], [997.0, 7149.0], [995.0, 7935.0], [993.0, 6808.0], [1007.0, 6734.0], [1005.0, 7644.0], [1003.0, 7210.0], [1001.0, 7940.0], [1015.0, 7793.0], [1082.0, 7722.0], [1086.0, 7292.0], [1058.0, 7272.5], [1066.0, 7655.0], [1078.0, 6479.0], [1038.0, 7170.0], [1034.0, 7213.0], [1030.0, 7410.5], [1026.0, 7851.0], [1054.0, 7725.0], [1050.0, 6410.0], [1046.0, 7132.0], [1042.0, 6965.0], [1070.0, 6602.5], [1142.0, 6797.0], [1126.0, 7543.5], [1146.0, 7302.5], [1150.0, 7064.0], [1122.0, 7603.0], [1138.0, 7113.0], [1102.0, 7634.0], [1098.0, 7693.5], [1094.0, 6940.0], [1110.0, 6915.0], [1106.0, 7598.0], [1134.0, 6483.0], [1202.0, 6469.0], [1210.0, 5989.0], [1186.0, 7182.0], [1190.0, 6661.0], [1194.0, 6051.0], [1206.0, 6942.5], [1166.0, 6666.0], [1162.0, 6830.0], [1158.0, 7047.0], [1154.0, 7458.0], [1182.0, 6929.0], [1178.0, 6677.0], [1174.0, 6647.0], [1170.0, 6639.0], [1198.0, 6477.0], [1270.0, 6523.0], [1278.0, 5353.0], [1254.0, 6390.0], [1274.0, 6483.0], [1266.0, 6689.0], [1246.0, 6912.0], [1222.0, 6361.0], [1226.0, 6715.0], [1230.0, 7110.5], [1242.0, 6784.0], [1238.0, 6194.0], [1234.0, 7059.5], [1262.0, 6091.0], [1282.0, 5540.0], [1314.0, 6029.0], [1330.0, 5580.0], [1310.0, 5347.0], [1286.0, 6164.0], [1290.0, 5589.0], [1294.0, 5555.0], [1306.0, 6252.0], [1302.0, 6149.0], [1298.0, 5492.0], [1326.0, 5600.0], [1322.0, 5727.0], [1318.0, 5652.0], [1402.0, 5625.0], [1406.0, 4492.0], [1378.0, 5056.0], [1386.0, 5806.0], [1398.0, 5670.0], [1394.0, 4981.0], [1374.0, 5018.0], [1354.0, 5421.0], [1358.0, 4712.0], [1370.0, 5307.0], [1366.0, 5368.0], [1362.0, 4697.0], [1390.0, 5014.0], [1462.0, 4926.0], [1458.0, 4457.0], [1470.0, 4600.0], [1442.0, 5081.0], [1446.0, 5525.0], [1466.0, 5368.0], [1422.0, 5225.0], [1418.0, 5217.0], [1414.0, 4925.0], [1410.0, 5484.5], [1438.0, 5536.0], [1434.0, 4824.0], [1430.0, 4634.0], [1426.0, 5619.0], [1450.0, 4682.0], [1530.0, 4822.0], [1522.0, 4859.0], [1506.0, 5244.0], [1510.0, 5230.0], [1534.0, 4581.0], [1526.0, 4754.0], [1486.0, 5342.0], [1482.0, 4554.0], [1478.0, 5027.0], [1474.0, 4638.0], [1502.0, 5215.0], [1498.0, 4049.0], [1494.0, 4880.0], [1490.0, 4767.0], [1594.0, 4134.0], [1586.0, 4390.0], [1570.0, 4932.5], [1574.0, 4557.0], [1578.0, 4956.0], [1598.0, 4148.0], [1590.0, 4608.0], [1538.0, 5136.0], [1542.0, 4660.0], [1546.0, 4264.0], [1550.0, 4289.0], [1566.0, 4215.0], [1562.0, 4245.0], [1558.0, 4812.0], [1554.0, 4546.0], [1654.0, 4365.5], [1638.0, 4704.0], [1642.0, 3973.0], [1646.0, 3433.0], [1658.0, 3939.0], [1650.0, 4207.0], [1610.0, 4781.0], [1606.0, 4078.0], [1630.0, 4601.0], [1626.0, 4604.0], [1622.0, 3888.0], [1618.0, 3514.0], [1722.0, 3379.0], [1718.0, 3391.0], [1698.0, 4606.5], [1702.0, 4191.0], [1706.0, 4209.0], [1710.0, 4278.0], [1726.0, 4524.5], [1714.0, 3401.0], [1678.0, 3892.0], [1674.0, 4673.0], [1666.0, 4727.666666666667], [1694.0, 4673.0], [1690.0, 4213.0], [1682.0, 3335.0], [1790.0, 3853.0], [1766.0, 4102.0], [1770.0, 3119.0], [1774.0, 3242.0], [1786.0, 4206.0], [1782.0, 3448.0], [1730.0, 3206.0], [1738.0, 4399.0], [1734.0, 3322.0], [1742.0, 4006.0], [1758.0, 4324.0], [1754.0, 4484.5], [1750.0, 4243.666666666667], [1746.0, 3691.0], [1842.0, 3901.0], [1850.0, 3931.0], [1826.0, 4227.0], [1834.0, 3101.0], [1830.0, 3841.0], [1846.0, 4112.5], [1806.0, 4015.0], [1802.0, 3062.0], [1798.0, 3624.0], [1810.0, 3135.0], [1910.0, 2901.0], [1914.0, 4076.0], [1890.0, 3363.0], [1898.0, 3870.0], [1902.0, 4051.0], [1858.0, 2907.0], [1862.0, 4253.0], [1866.0, 4220.0], [1870.0, 3753.6666666666665], [1886.0, 4179.0], [1878.0, 3584.5], [1874.0, 4158.0], [1970.0, 3637.0], [1974.0, 3520.0], [1978.0, 3236.0], [1954.0, 3664.0], [1962.0, 3885.0], [1982.0, 3829.0], [1922.0, 3992.0], [1926.0, 3369.5], [1930.0, 3830.0], [1950.0, 3234.0], [1942.0, 3212.0], [1938.0, 3955.0], [2038.0, 2800.0], [2042.0, 3334.0], [2018.0, 3384.0], [2022.0, 3317.0], [2034.0, 3513.5], [1986.0, 3833.0], [1990.0, 2701.0], [1994.0, 3767.0], [1998.0, 2677.0], [2010.0, 3792.0], [2006.0, 3600.3333333333335], [2002.0, 3765.0], [2076.0, 3721.0], [2172.0, 2548.5], [2116.0, 2409.0], [2124.0, 2251.0], [2132.0, 2380.0], [2068.0, 3566.0], [2100.0, 2426.0], [2092.0, 3146.0], [2084.0, 3673.0], [2292.0, 3078.0], [2300.0, 1813.0], [2244.0, 1936.0], [2260.0, 1989.0], [2284.0, 2607.5], [2188.0, 2172.0], [2196.0, 2589.0], [2204.0, 3296.0], [2228.0, 2636.0], [2420.0, 2111.0], [2412.0, 2268.0], [2380.0, 2725.0], [2388.0, 2734.0], [2396.0, 1500.0], [2428.0, 1378.0], [2404.0, 2104.0], [2332.0, 1898.0], [2308.0, 2936.0], [2364.0, 2458.0], [2356.0, 2642.5], [2348.0, 2655.0], [2460.0, 1126.0], [2452.0, 1168.0], [2500.0, 1361.2], [2444.0, 1431.0], [2436.0, 2019.0], [2484.0, 1927.0], [2476.0, 2197.0], [2149.0, 2946.75], [2157.0, 3411.0], [2165.0, 2744.5], [2133.0, 3512.0], [2141.0, 2270.0], [2077.0, 2918.0], [2069.0, 3620.0], [2061.0, 3654.5], [2053.0, 3507.5], [2109.0, 3603.0], [2101.0, 2425.0], [2085.0, 2518.0], [2293.0, 2707.0], [2245.0, 2031.0], [2253.0, 2979.0], [2261.0, 2418.0], [2301.0, 2238.0], [2285.0, 2835.0], [2277.0, 2885.5], [2181.0, 2848.0], [2197.0, 3297.0], [2205.0, 2827.0], [2237.0, 3162.0], [2229.0, 2703.0], [2213.0, 2557.0], [2413.0, 1884.0], [2381.0, 2386.0], [2397.0, 2321.0], [2421.0, 2421.0], [2333.0, 2920.0], [2325.0, 2573.5], [2317.0, 2105.5], [2365.0, 2285.0], [2349.0, 1679.0], [2341.0, 2818.0], [2445.0, 2389.0], [2493.0, 1861.5], [2453.0, 1159.0], [2485.0, 2243.0], [2477.0, 2242.0], [2469.0, 1633.5], [1079.0, 6878.0], [1083.0, 6371.0], [1087.0, 6385.0], [1059.0, 7740.0], [1075.0, 7692.0], [1055.0, 7125.0], [1027.0, 7597.0], [1035.0, 7715.0], [1031.0, 7623.0], [1039.0, 7003.0], [1051.0, 7138.0], [1047.0, 7695.0], [1043.0, 6549.0], [1071.0, 7387.0], [1067.0, 7492.0], [1063.0, 7141.5], [1139.0, 6673.0], [1147.0, 6738.0], [1123.0, 6898.0], [1131.0, 7640.0], [1143.0, 6405.0], [1103.0, 6929.0], [1095.0, 7634.0], [1115.0, 7192.0], [1111.0, 7320.0], [1107.0, 6841.0], [1135.0, 6676.0], [1203.0, 6388.0], [1211.0, 7076.0], [1187.0, 7310.0], [1207.0, 6367.0], [1183.0, 7136.0], [1155.0, 7036.0], [1159.0, 6966.0], [1163.0, 7542.0], [1167.0, 7362.0], [1179.0, 7129.0], [1175.0, 6433.0], [1171.0, 7488.0], [1199.0, 7015.0], [1191.0, 7215.0], [1275.0, 5761.0], [1279.0, 6519.0], [1251.0, 6844.5], [1255.0, 6054.0], [1271.0, 6571.0], [1267.0, 6527.0], [1247.0, 6899.0], [1219.0, 6726.333333333333], [1223.0, 6626.0], [1231.0, 6240.0], [1235.0, 6454.0], [1263.0, 5594.0], [1331.0, 5200.0], [1343.0, 4964.0], [1315.0, 5911.0], [1319.0, 5333.0], [1323.0, 5573.0], [1339.0, 5565.0], [1295.0, 5865.0], [1291.0, 5576.0], [1287.0, 6497.0], [1283.0, 6513.0], [1311.0, 5910.0], [1307.0, 6229.0], [1303.0, 5748.0], [1299.0, 5797.0], [1327.0, 5066.0], [1395.0, 4529.0], [1403.0, 5268.0], [1379.0, 4594.0], [1387.0, 5274.0], [1399.0, 5643.0], [1359.0, 5413.0], [1355.0, 5827.0], [1347.0, 5539.0], [1375.0, 5362.0], [1371.0, 5791.0], [1367.0, 5739.0], [1363.0, 5690.0], [1391.0, 5533.0], [1463.0, 5381.0], [1471.0, 4441.0], [1451.0, 5527.0], [1467.0, 4229.0], [1459.0, 4698.0], [1423.0, 4890.0], [1419.0, 5286.0], [1415.0, 5635.0], [1435.0, 4817.0], [1431.0, 4393.0], [1427.0, 4811.0], [1455.0, 4689.0], [1527.0, 4382.0], [1535.0, 4165.0], [1507.0, 5236.0], [1511.0, 4787.0], [1531.0, 4767.0], [1523.0, 5203.0], [1487.0, 4367.0], [1483.0, 4924.0], [1475.0, 4581.0], [1503.0, 5109.0], [1499.0, 5201.0], [1495.0, 5177.0], [1595.0, 4920.0], [1599.0, 4602.0], [1575.0, 4409.0], [1583.0, 4671.0], [1587.0, 4387.0], [1567.0, 4213.0], [1539.0, 4335.0], [1543.0, 3882.0], [1547.0, 4523.0], [1551.0, 5102.0], [1559.0, 4718.0], [1555.0, 4944.0], [1659.0, 3943.0], [1639.0, 4661.0], [1635.0, 4129.0], [1643.0, 4787.0], [1647.0, 3417.0], [1615.0, 4758.5], [1607.0, 4095.0], [1603.0, 4541.5], [1623.0, 4054.0], [1619.0, 4271.0], [1723.0, 4035.0], [1715.0, 4633.0], [1727.0, 4438.0], [1699.0, 3664.0], [1703.0, 3284.0], [1711.0, 3402.0], [1679.0, 4693.0], [1671.0, 3732.0], [1667.0, 3425.0], [1695.0, 3337.0], [1691.0, 4603.0], [1687.0, 3833.5], [1683.0, 4517.0], [1787.0, 4212.0], [1791.0, 4286.0], [1763.0, 3764.3333333333335], [1771.0, 3663.0], [1783.0, 3873.0], [1779.0, 4020.0], [1759.0, 4140.0], [1731.0, 4393.0], [1739.0, 3633.5], [1755.0, 3271.0], [1751.0, 4169.0], [1747.0, 3694.0], [1847.0, 4048.0], [1843.0, 3939.0], [1855.0, 4208.5], [1839.0, 4295.0], [1835.0, 4190.0], [1851.0, 3054.0], [1807.0, 4149.0], [1803.0, 4173.0], [1799.0, 4392.0], [1795.0, 3804.0], [1823.0, 4144.666666666667], [1819.0, 3654.0], [1815.0, 3364.6666666666665], [1811.0, 4402.0], [1911.0, 4098.0], [1891.0, 3839.0], [1903.0, 4067.0], [1915.0, 3676.0], [1907.0, 3453.0], [1887.0, 3391.0], [1859.0, 3683.0], [1867.0, 4247.0], [1871.0, 4161.0], [1883.0, 3614.6666666666665], [1875.0, 3876.0], [1983.0, 3872.0], [1975.0, 2784.0], [1959.0, 3469.0], [1955.0, 2654.0], [1963.0, 2735.0], [1967.0, 3653.0], [1971.0, 3894.0], [1951.0, 2757.0], [1923.0, 3652.5], [1931.0, 3923.0], [1935.0, 3327.0], [1943.0, 3583.0], [1939.0, 3959.0], [1991.0, 3685.0], [2043.0, 2425.0], [2031.0, 3312.5555555555557], [2039.0, 2993.0], [2015.0, 3210.0], [1995.0, 3135.0], [1999.0, 3532.0], [2011.0, 3396.0], [2007.0, 3086.0], [2003.0, 2726.0], [2166.0, 3032.0], [2174.0, 2711.5], [2118.0, 2401.0], [2126.0, 3558.5], [2134.0, 3542.0], [2142.0, 3401.0], [2158.0, 3031.0], [2150.0, 3406.0], [2110.0, 3556.5], [2102.0, 3049.0], [2094.0, 3363.0], [2086.0, 2439.0], [2286.0, 1723.0], [2246.0, 2025.0], [2302.0, 2771.0], [2294.0, 2636.0], [2278.0, 3067.0], [2206.0, 3284.0], [2238.0, 2064.0], [2230.0, 2859.0], [2222.0, 2896.0], [2214.0, 2751.0], [2414.0, 2266.0], [2406.0, 1931.5], [2382.0, 1972.0], [2390.0, 2560.5], [2430.0, 2517.0], [2334.0, 2125.0], [2326.0, 2414.0], [2318.0, 1751.0], [2310.0, 2333.0], [2358.0, 2048.5], [2350.0, 1694.0], [2342.0, 2104.0], [2462.0, 1953.5], [2454.0, 1592.0], [2438.0, 2033.5], [2494.0, 1650.0], [2478.0, 2173.0], [2470.0, 1745.0], [2159.0, 3262.0], [2175.0, 3363.0], [2119.0, 3361.5], [2127.0, 3545.0], [2135.0, 2219.0], [2167.0, 3216.0], [2151.0, 2398.0], [2079.0, 3435.0], [2055.0, 3165.0], [2111.0, 3206.0], [2103.0, 2551.0], [2095.0, 2855.0], [2087.0, 3581.0], [2295.0, 1707.0], [2287.0, 2280.0], [2303.0, 2974.0], [2247.0, 2865.5], [2271.0, 2590.666666666667], [2239.0, 2034.0], [2183.0, 3344.0], [2191.0, 2612.0], [2199.0, 2584.0], [2223.0, 2513.0], [2215.0, 2134.0], [2415.0, 2437.0], [2423.0, 2552.5], [2431.0, 2017.0], [2383.0, 2731.0], [2399.0, 2068.5], [2407.0, 2649.0], [2335.0, 1727.0], [2327.0, 2912.0], [2319.0, 2941.0], [2367.0, 2332.0], [2359.0, 2813.0], [2343.0, 2389.0], [2447.0, 1532.0], [2487.0, 2000.5], [2463.0, 1755.0], [2455.0, 2384.0], [2439.0, 1979.0], [2495.0, 1673.0], [2479.0, 2120.0], [1.0, 9871.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}, {"data": [[1250.8944, 6025.8636000000015]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18833.333333333332, "minX": 1.7555889E12, "maxY": 241416.66666666666, "series": [{"data": [[1.7555889E12, 241416.66666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7555889E12, 18833.333333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555889E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6025.8636000000015, "minX": 1.7555889E12, "maxY": 6025.8636000000015, "series": [{"data": [[1.7555889E12, 6025.8636000000015]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555889E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6025.813199999993, "minX": 1.7555889E12, "maxY": 6025.813199999993, "series": [{"data": [[1.7555889E12, 6025.813199999993]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555889E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 4911.24, "minX": 1.7555889E12, "maxY": 4911.24, "series": [{"data": [[1.7555889E12, 4911.24]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555889E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 705.0, "minX": 1.7555889E12, "maxY": 10315.0, "series": [{"data": [[1.7555889E12, 10315.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7555889E12, 9081.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7555889E12, 9947.949999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7555889E12, 9498.849999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7555889E12, 705.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7555889E12, 6364.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555889E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1842.0, "minX": 55.0, "maxY": 8991.0, "series": [{"data": [[264.0, 7456.5], [280.0, 2416.0], [321.0, 4408.0], [175.0, 5364.0], [380.0, 3515.0], [404.0, 8295.0], [55.0, 1842.0], [118.0, 6558.0], [503.0, 8991.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 503.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1842.0, "minX": 55.0, "maxY": 8991.0, "series": [{"data": [[264.0, 7456.5], [280.0, 2416.0], [321.0, 4408.0], [175.0, 5363.0], [380.0, 3515.0], [404.0, 8295.0], [55.0, 1842.0], [118.0, 6558.0], [503.0, 8991.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 503.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7555889E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7555889E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555889E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7555889E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7555889E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7555889E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7555889E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7555889E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555889E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.7555889E12, "maxY": 41.666666666666664, "series": [{"data": [[1.7555889E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7555889E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

