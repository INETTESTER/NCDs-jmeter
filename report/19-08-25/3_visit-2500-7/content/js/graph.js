/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 606.0, "minX": 0.0, "maxY": 12157.0, "series": [{"data": [[0.0, 606.0], [0.1, 808.0], [0.2, 866.0], [0.3, 905.0], [0.4, 983.0], [0.5, 1096.0], [0.6, 1189.0], [0.7, 1239.0], [0.8, 1320.0], [0.9, 1376.0], [1.0, 1404.0], [1.1, 1482.0], [1.2, 1483.0], [1.3, 1528.0], [1.4, 1550.0], [1.5, 1568.0], [1.6, 1616.0], [1.7, 1631.0], [1.8, 1650.0], [1.9, 1689.0], [2.0, 1714.0], [2.1, 1727.0], [2.2, 1736.0], [2.3, 1751.0], [2.4, 1758.0], [2.5, 1786.0], [2.6, 1813.0], [2.7, 1852.0], [2.8, 1858.0], [2.9, 1881.0], [3.0, 1892.0], [3.1, 1915.0], [3.2, 1931.0], [3.3, 1952.0], [3.4, 1966.0], [3.5, 1977.0], [3.6, 1994.0], [3.7, 2018.0], [3.8, 2024.0], [3.9, 2040.0], [4.0, 2066.0], [4.1, 2085.0], [4.2, 2102.0], [4.3, 2121.0], [4.4, 2131.0], [4.5, 2152.0], [4.6, 2160.0], [4.7, 2167.0], [4.8, 2172.0], [4.9, 2184.0], [5.0, 2203.0], [5.1, 2218.0], [5.2, 2227.0], [5.3, 2242.0], [5.4, 2248.0], [5.5, 2257.0], [5.6, 2309.0], [5.7, 2325.0], [5.8, 2332.0], [5.9, 2346.0], [6.0, 2369.0], [6.1, 2388.0], [6.2, 2397.0], [6.3, 2407.0], [6.4, 2428.0], [6.5, 2448.0], [6.6, 2455.0], [6.7, 2472.0], [6.8, 2479.0], [6.9, 2483.0], [7.0, 2491.0], [7.1, 2499.0], [7.2, 2504.0], [7.3, 2517.0], [7.4, 2523.0], [7.5, 2531.0], [7.6, 2543.0], [7.7, 2567.0], [7.8, 2575.0], [7.9, 2599.0], [8.0, 2613.0], [8.1, 2632.0], [8.2, 2641.0], [8.3, 2651.0], [8.4, 2664.0], [8.5, 2676.0], [8.6, 2696.0], [8.7, 2707.0], [8.8, 2714.0], [8.9, 2715.0], [9.0, 2721.0], [9.1, 2723.0], [9.2, 2729.0], [9.3, 2734.0], [9.4, 2746.0], [9.5, 2755.0], [9.6, 2756.0], [9.7, 2764.0], [9.8, 2780.0], [9.9, 2786.0], [10.0, 2796.0], [10.1, 2798.0], [10.2, 2824.0], [10.3, 2830.0], [10.4, 2846.0], [10.5, 2847.0], [10.6, 2875.0], [10.7, 2899.0], [10.8, 2903.0], [10.9, 2905.0], [11.0, 2921.0], [11.1, 2926.0], [11.2, 2931.0], [11.3, 2940.0], [11.4, 2957.0], [11.5, 2966.0], [11.6, 2976.0], [11.7, 2978.0], [11.8, 2984.0], [11.9, 2992.0], [12.0, 3001.0], [12.1, 3002.0], [12.2, 3005.0], [12.3, 3015.0], [12.4, 3022.0], [12.5, 3032.0], [12.6, 3040.0], [12.7, 3050.0], [12.8, 3068.0], [12.9, 3070.0], [13.0, 3076.0], [13.1, 3079.0], [13.2, 3084.0], [13.3, 3095.0], [13.4, 3099.0], [13.5, 3110.0], [13.6, 3124.0], [13.7, 3139.0], [13.8, 3162.0], [13.9, 3166.0], [14.0, 3183.0], [14.1, 3187.0], [14.2, 3197.0], [14.3, 3203.0], [14.4, 3206.0], [14.5, 3219.0], [14.6, 3224.0], [14.7, 3226.0], [14.8, 3233.0], [14.9, 3244.0], [15.0, 3280.0], [15.1, 3288.0], [15.2, 3293.0], [15.3, 3300.0], [15.4, 3307.0], [15.5, 3320.0], [15.6, 3327.0], [15.7, 3344.0], [15.8, 3351.0], [15.9, 3358.0], [16.0, 3367.0], [16.1, 3373.0], [16.2, 3384.0], [16.3, 3394.0], [16.4, 3414.0], [16.5, 3420.0], [16.6, 3423.0], [16.7, 3433.0], [16.8, 3437.0], [16.9, 3445.0], [17.0, 3466.0], [17.1, 3481.0], [17.2, 3498.0], [17.3, 3503.0], [17.4, 3518.0], [17.5, 3524.0], [17.6, 3526.0], [17.7, 3531.0], [17.8, 3544.0], [17.9, 3545.0], [18.0, 3554.0], [18.1, 3566.0], [18.2, 3577.0], [18.3, 3586.0], [18.4, 3591.0], [18.5, 3593.0], [18.6, 3622.0], [18.7, 3643.0], [18.8, 3649.0], [18.9, 3654.0], [19.0, 3671.0], [19.1, 3679.0], [19.2, 3685.0], [19.3, 3692.0], [19.4, 3697.0], [19.5, 3727.0], [19.6, 3750.0], [19.7, 3773.0], [19.8, 3817.0], [19.9, 3819.0], [20.0, 3841.0], [20.1, 3865.0], [20.2, 3894.0], [20.3, 3899.0], [20.4, 3905.0], [20.5, 3919.0], [20.6, 3939.0], [20.7, 3940.0], [20.8, 3950.0], [20.9, 3966.0], [21.0, 4011.0], [21.1, 4018.0], [21.2, 4037.0], [21.3, 4048.0], [21.4, 4054.0], [21.5, 4064.0], [21.6, 4083.0], [21.7, 4113.0], [21.8, 4122.0], [21.9, 4129.0], [22.0, 4165.0], [22.1, 4177.0], [22.2, 4189.0], [22.3, 4204.0], [22.4, 4218.0], [22.5, 4232.0], [22.6, 4235.0], [22.7, 4247.0], [22.8, 4255.0], [22.9, 4260.0], [23.0, 4291.0], [23.1, 4304.0], [23.2, 4315.0], [23.3, 4324.0], [23.4, 4335.0], [23.5, 4345.0], [23.6, 4366.0], [23.7, 4377.0], [23.8, 4417.0], [23.9, 4448.0], [24.0, 4457.0], [24.1, 4463.0], [24.2, 4496.0], [24.3, 4512.0], [24.4, 4527.0], [24.5, 4548.0], [24.6, 4587.0], [24.7, 4601.0], [24.8, 4607.0], [24.9, 4627.0], [25.0, 4638.0], [25.1, 4647.0], [25.2, 4672.0], [25.3, 4676.0], [25.4, 4714.0], [25.5, 4719.0], [25.6, 4749.0], [25.7, 4754.0], [25.8, 4766.0], [25.9, 4779.0], [26.0, 4789.0], [26.1, 4806.0], [26.2, 4824.0], [26.3, 4841.0], [26.4, 4846.0], [26.5, 4864.0], [26.6, 4867.0], [26.7, 4901.0], [26.8, 4911.0], [26.9, 4922.0], [27.0, 4934.0], [27.1, 4952.0], [27.2, 4966.0], [27.3, 4975.0], [27.4, 4984.0], [27.5, 4996.0], [27.6, 5036.0], [27.7, 5042.0], [27.8, 5063.0], [27.9, 5069.0], [28.0, 5092.0], [28.1, 5115.0], [28.2, 5139.0], [28.3, 5147.0], [28.4, 5157.0], [28.5, 5161.0], [28.6, 5178.0], [28.7, 5192.0], [28.8, 5211.0], [28.9, 5215.0], [29.0, 5220.0], [29.1, 5237.0], [29.2, 5254.0], [29.3, 5261.0], [29.4, 5281.0], [29.5, 5282.0], [29.6, 5304.0], [29.7, 5310.0], [29.8, 5329.0], [29.9, 5333.0], [30.0, 5371.0], [30.1, 5378.0], [30.2, 5388.0], [30.3, 5391.0], [30.4, 5413.0], [30.5, 5431.0], [30.6, 5451.0], [30.7, 5456.0], [30.8, 5466.0], [30.9, 5478.0], [31.0, 5504.0], [31.1, 5517.0], [31.2, 5545.0], [31.3, 5550.0], [31.4, 5602.0], [31.5, 5609.0], [31.6, 5629.0], [31.7, 5648.0], [31.8, 5659.0], [31.9, 5666.0], [32.0, 5672.0], [32.1, 5680.0], [32.2, 5684.0], [32.3, 5686.0], [32.4, 5731.0], [32.5, 5739.0], [32.6, 5775.0], [32.7, 5796.0], [32.8, 5851.0], [32.9, 5878.0], [33.0, 5919.0], [33.1, 5928.0], [33.2, 5937.0], [33.3, 5948.0], [33.4, 5959.0], [33.5, 5968.0], [33.6, 5985.0], [33.7, 5993.0], [33.8, 6013.0], [33.9, 6018.0], [34.0, 6037.0], [34.1, 6058.0], [34.2, 6070.0], [34.3, 6072.0], [34.4, 6077.0], [34.5, 6083.0], [34.6, 6107.0], [34.7, 6121.0], [34.8, 6142.0], [34.9, 6151.0], [35.0, 6162.0], [35.1, 6171.0], [35.2, 6208.0], [35.3, 6217.0], [35.4, 6234.0], [35.5, 6236.0], [35.6, 6247.0], [35.7, 6248.0], [35.8, 6268.0], [35.9, 6271.0], [36.0, 6288.0], [36.1, 6291.0], [36.2, 6305.0], [36.3, 6310.0], [36.4, 6325.0], [36.5, 6333.0], [36.6, 6361.0], [36.7, 6364.0], [36.8, 6380.0], [36.9, 6383.0], [37.0, 6393.0], [37.1, 6397.0], [37.2, 6412.0], [37.3, 6416.0], [37.4, 6427.0], [37.5, 6439.0], [37.6, 6456.0], [37.7, 6463.0], [37.8, 6482.0], [37.9, 6489.0], [38.0, 6508.0], [38.1, 6509.0], [38.2, 6518.0], [38.3, 6518.0], [38.4, 6519.0], [38.5, 6524.0], [38.6, 6526.0], [38.7, 6528.0], [38.8, 6533.0], [38.9, 6539.0], [39.0, 6543.0], [39.1, 6546.0], [39.2, 6557.0], [39.3, 6561.0], [39.4, 6564.0], [39.5, 6577.0], [39.6, 6584.0], [39.7, 6592.0], [39.8, 6596.0], [39.9, 6599.0], [40.0, 6602.0], [40.1, 6607.0], [40.2, 6611.0], [40.3, 6618.0], [40.4, 6622.0], [40.5, 6631.0], [40.6, 6642.0], [40.7, 6647.0], [40.8, 6669.0], [40.9, 6691.0], [41.0, 6710.0], [41.1, 6724.0], [41.2, 6747.0], [41.3, 6754.0], [41.4, 6763.0], [41.5, 6774.0], [41.6, 6780.0], [41.7, 6796.0], [41.8, 6806.0], [41.9, 6814.0], [42.0, 6821.0], [42.1, 6825.0], [42.2, 6839.0], [42.3, 6846.0], [42.4, 6861.0], [42.5, 6863.0], [42.6, 6868.0], [42.7, 6872.0], [42.8, 6877.0], [42.9, 6881.0], [43.0, 6893.0], [43.1, 6912.0], [43.2, 6932.0], [43.3, 6937.0], [43.4, 6954.0], [43.5, 6955.0], [43.6, 7025.0], [43.7, 7040.0], [43.8, 7068.0], [43.9, 7078.0], [44.0, 7090.0], [44.1, 7095.0], [44.2, 7120.0], [44.3, 7134.0], [44.4, 7156.0], [44.5, 7163.0], [44.6, 7174.0], [44.7, 7178.0], [44.8, 7186.0], [44.9, 7192.0], [45.0, 7206.0], [45.1, 7210.0], [45.2, 7221.0], [45.3, 7226.0], [45.4, 7236.0], [45.5, 7245.0], [45.6, 7256.0], [45.7, 7267.0], [45.8, 7272.0], [45.9, 7287.0], [46.0, 7298.0], [46.1, 7315.0], [46.2, 7334.0], [46.3, 7341.0], [46.4, 7349.0], [46.5, 7355.0], [46.6, 7364.0], [46.7, 7375.0], [46.8, 7382.0], [46.9, 7386.0], [47.0, 7398.0], [47.1, 7412.0], [47.2, 7418.0], [47.3, 7427.0], [47.4, 7456.0], [47.5, 7462.0], [47.6, 7474.0], [47.7, 7482.0], [47.8, 7493.0], [47.9, 7496.0], [48.0, 7514.0], [48.1, 7518.0], [48.2, 7548.0], [48.3, 7549.0], [48.4, 7563.0], [48.5, 7574.0], [48.6, 7596.0], [48.7, 7602.0], [48.8, 7604.0], [48.9, 7606.0], [49.0, 7607.0], [49.1, 7616.0], [49.2, 7621.0], [49.3, 7627.0], [49.4, 7632.0], [49.5, 7640.0], [49.6, 7641.0], [49.7, 7645.0], [49.8, 7650.0], [49.9, 7655.0], [50.0, 7663.0], [50.1, 7673.0], [50.2, 7694.0], [50.3, 7697.0], [50.4, 7704.0], [50.5, 7708.0], [50.6, 7724.0], [50.7, 7732.0], [50.8, 7735.0], [50.9, 7750.0], [51.0, 7757.0], [51.1, 7764.0], [51.2, 7776.0], [51.3, 7784.0], [51.4, 7791.0], [51.5, 7807.0], [51.6, 7814.0], [51.7, 7824.0], [51.8, 7834.0], [51.9, 7842.0], [52.0, 7865.0], [52.1, 7873.0], [52.2, 7880.0], [52.3, 7888.0], [52.4, 7893.0], [52.5, 7895.0], [52.6, 7906.0], [52.7, 7917.0], [52.8, 7927.0], [52.9, 7928.0], [53.0, 7938.0], [53.1, 7942.0], [53.2, 7954.0], [53.3, 7958.0], [53.4, 7968.0], [53.5, 7973.0], [53.6, 7978.0], [53.7, 7984.0], [53.8, 7992.0], [53.9, 7998.0], [54.0, 8029.0], [54.1, 8031.0], [54.2, 8040.0], [54.3, 8046.0], [54.4, 8088.0], [54.5, 8102.0], [54.6, 8147.0], [54.7, 8159.0], [54.8, 8170.0], [54.9, 8182.0], [55.0, 8190.0], [55.1, 8200.0], [55.2, 8234.0], [55.3, 8241.0], [55.4, 8322.0], [55.5, 8369.0], [55.6, 8392.0], [55.7, 8408.0], [55.8, 8491.0], [55.9, 8529.0], [56.0, 8737.0], [56.1, 8862.0], [56.2, 8987.0], [56.3, 8992.0], [56.4, 9024.0], [56.5, 9056.0], [56.6, 9112.0], [56.7, 9136.0], [56.8, 9159.0], [56.9, 9174.0], [57.0, 9178.0], [57.1, 9184.0], [57.2, 9187.0], [57.3, 9201.0], [57.4, 9214.0], [57.5, 9224.0], [57.6, 9231.0], [57.7, 9238.0], [57.8, 9256.0], [57.9, 9260.0], [58.0, 9323.0], [58.1, 9324.0], [58.2, 9347.0], [58.3, 9355.0], [58.4, 9358.0], [58.5, 9368.0], [58.6, 9383.0], [58.7, 9401.0], [58.8, 9422.0], [58.9, 9426.0], [59.0, 9435.0], [59.1, 9437.0], [59.2, 9439.0], [59.3, 9447.0], [59.4, 9450.0], [59.5, 9452.0], [59.6, 9464.0], [59.7, 9464.0], [59.8, 9486.0], [59.9, 9490.0], [60.0, 9504.0], [60.1, 9512.0], [60.2, 9545.0], [60.3, 9565.0], [60.4, 9577.0], [60.5, 9591.0], [60.6, 9604.0], [60.7, 9609.0], [60.8, 9614.0], [60.9, 9620.0], [61.0, 9641.0], [61.1, 9668.0], [61.2, 9683.0], [61.3, 9685.0], [61.4, 9709.0], [61.5, 9725.0], [61.6, 9762.0], [61.7, 9768.0], [61.8, 9772.0], [61.9, 9776.0], [62.0, 9785.0], [62.1, 9788.0], [62.2, 9791.0], [62.3, 9793.0], [62.4, 9797.0], [62.5, 9800.0], [62.6, 9804.0], [62.7, 9809.0], [62.8, 9837.0], [62.9, 9848.0], [63.0, 9873.0], [63.1, 9877.0], [63.2, 9883.0], [63.3, 9887.0], [63.4, 9899.0], [63.5, 9907.0], [63.6, 9921.0], [63.7, 9926.0], [63.8, 9942.0], [63.9, 9944.0], [64.0, 9960.0], [64.1, 9966.0], [64.2, 9974.0], [64.3, 9978.0], [64.4, 9982.0], [64.5, 9983.0], [64.6, 9991.0], [64.7, 9992.0], [64.8, 10003.0], [64.9, 10005.0], [65.0, 10024.0], [65.1, 10027.0], [65.2, 10033.0], [65.3, 10035.0], [65.4, 10037.0], [65.5, 10038.0], [65.6, 10042.0], [65.7, 10043.0], [65.8, 10046.0], [65.9, 10048.0], [66.0, 10051.0], [66.1, 10056.0], [66.2, 10064.0], [66.3, 10066.0], [66.4, 10071.0], [66.5, 10073.0], [66.6, 10075.0], [66.7, 10079.0], [66.8, 10084.0], [66.9, 10084.0], [67.0, 10087.0], [67.1, 10089.0], [67.2, 10094.0], [67.3, 10095.0], [67.4, 10100.0], [67.5, 10101.0], [67.6, 10102.0], [67.7, 10109.0], [67.8, 10114.0], [67.9, 10115.0], [68.0, 10122.0], [68.1, 10125.0], [68.2, 10128.0], [68.3, 10129.0], [68.4, 10131.0], [68.5, 10132.0], [68.6, 10133.0], [68.7, 10133.0], [68.8, 10135.0], [68.9, 10138.0], [69.0, 10139.0], [69.1, 10140.0], [69.2, 10141.0], [69.3, 10143.0], [69.4, 10148.0], [69.5, 10150.0], [69.6, 10153.0], [69.7, 10156.0], [69.8, 10162.0], [69.9, 10163.0], [70.0, 10165.0], [70.1, 10168.0], [70.2, 10170.0], [70.3, 10171.0], [70.4, 10175.0], [70.5, 10175.0], [70.6, 10177.0], [70.7, 10178.0], [70.8, 10180.0], [70.9, 10180.0], [71.0, 10182.0], [71.1, 10182.0], [71.2, 10183.0], [71.3, 10184.0], [71.4, 10186.0], [71.5, 10187.0], [71.6, 10188.0], [71.7, 10189.0], [71.8, 10192.0], [71.9, 10193.0], [72.0, 10194.0], [72.1, 10195.0], [72.2, 10199.0], [72.3, 10200.0], [72.4, 10205.0], [72.5, 10210.0], [72.6, 10215.0], [72.7, 10218.0], [72.8, 10219.0], [72.9, 10221.0], [73.0, 10223.0], [73.1, 10226.0], [73.2, 10227.0], [73.3, 10227.0], [73.4, 10231.0], [73.5, 10232.0], [73.6, 10232.0], [73.7, 10233.0], [73.8, 10235.0], [73.9, 10236.0], [74.0, 10236.0], [74.1, 10236.0], [74.2, 10237.0], [74.3, 10237.0], [74.4, 10237.0], [74.5, 10237.0], [74.6, 10238.0], [74.7, 10239.0], [74.8, 10239.0], [74.9, 10240.0], [75.0, 10241.0], [75.1, 10241.0], [75.2, 10242.0], [75.3, 10242.0], [75.4, 10243.0], [75.5, 10244.0], [75.6, 10246.0], [75.7, 10246.0], [75.8, 10246.0], [75.9, 10246.0], [76.0, 10247.0], [76.1, 10247.0], [76.2, 10248.0], [76.3, 10248.0], [76.4, 10249.0], [76.5, 10249.0], [76.6, 10251.0], [76.7, 10252.0], [76.8, 10254.0], [76.9, 10255.0], [77.0, 10256.0], [77.1, 10257.0], [77.2, 10257.0], [77.3, 10257.0], [77.4, 10258.0], [77.5, 10259.0], [77.6, 10260.0], [77.7, 10260.0], [77.8, 10260.0], [77.9, 10260.0], [78.0, 10261.0], [78.1, 10261.0], [78.2, 10261.0], [78.3, 10261.0], [78.4, 10261.0], [78.5, 10262.0], [78.6, 10262.0], [78.7, 10262.0], [78.8, 10262.0], [78.9, 10263.0], [79.0, 10264.0], [79.1, 10264.0], [79.2, 10264.0], [79.3, 10264.0], [79.4, 10264.0], [79.5, 10265.0], [79.6, 10265.0], [79.7, 10265.0], [79.8, 10265.0], [79.9, 10266.0], [80.0, 10266.0], [80.1, 10267.0], [80.2, 10267.0], [80.3, 10267.0], [80.4, 10268.0], [80.5, 10269.0], [80.6, 10270.0], [80.7, 10270.0], [80.8, 10271.0], [80.9, 10271.0], [81.0, 10271.0], [81.1, 10272.0], [81.2, 10272.0], [81.3, 10273.0], [81.4, 10273.0], [81.5, 10273.0], [81.6, 10274.0], [81.7, 10274.0], [81.8, 10275.0], [81.9, 10275.0], [82.0, 10275.0], [82.1, 10278.0], [82.2, 10278.0], [82.3, 10278.0], [82.4, 10281.0], [82.5, 10281.0], [82.6, 10282.0], [82.7, 10282.0], [82.8, 10283.0], [82.9, 10284.0], [83.0, 10285.0], [83.1, 10285.0], [83.2, 10288.0], [83.3, 10288.0], [83.4, 10289.0], [83.5, 10289.0], [83.6, 10290.0], [83.7, 10291.0], [83.8, 10292.0], [83.9, 10292.0], [84.0, 10293.0], [84.1, 10294.0], [84.2, 10294.0], [84.3, 10295.0], [84.4, 10299.0], [84.5, 10300.0], [84.6, 10302.0], [84.7, 10302.0], [84.8, 10303.0], [84.9, 10304.0], [85.0, 10304.0], [85.1, 10305.0], [85.2, 10305.0], [85.3, 10307.0], [85.4, 10309.0], [85.5, 10309.0], [85.6, 10310.0], [85.7, 10311.0], [85.8, 10311.0], [85.9, 10311.0], [86.0, 10312.0], [86.1, 10312.0], [86.2, 10313.0], [86.3, 10313.0], [86.4, 10314.0], [86.5, 10315.0], [86.6, 10316.0], [86.7, 10316.0], [86.8, 10317.0], [86.9, 10319.0], [87.0, 10319.0], [87.1, 10320.0], [87.2, 10320.0], [87.3, 10321.0], [87.4, 10322.0], [87.5, 10323.0], [87.6, 10325.0], [87.7, 10326.0], [87.8, 10328.0], [87.9, 10337.0], [88.0, 10339.0], [88.1, 10345.0], [88.2, 10351.0], [88.3, 10371.0], [88.4, 10377.0], [88.5, 10379.0], [88.6, 10382.0], [88.7, 10385.0], [88.8, 10394.0], [88.9, 10402.0], [89.0, 10407.0], [89.1, 10452.0], [89.2, 10475.0], [89.3, 10492.0], [89.4, 10517.0], [89.5, 10524.0], [89.6, 10537.0], [89.7, 10539.0], [89.8, 10544.0], [89.9, 10547.0], [90.0, 10553.0], [90.1, 10565.0], [90.2, 10572.0], [90.3, 10580.0], [90.4, 10590.0], [90.5, 10595.0], [90.6, 10605.0], [90.7, 10618.0], [90.8, 10634.0], [90.9, 10665.0], [91.0, 10675.0], [91.1, 10689.0], [91.2, 10716.0], [91.3, 10737.0], [91.4, 10762.0], [91.5, 10764.0], [91.6, 10776.0], [91.7, 10784.0], [91.8, 10789.0], [91.9, 10794.0], [92.0, 10811.0], [92.1, 10835.0], [92.2, 10843.0], [92.3, 10847.0], [92.4, 10868.0], [92.5, 10875.0], [92.6, 10889.0], [92.7, 10903.0], [92.8, 10905.0], [92.9, 10942.0], [93.0, 10948.0], [93.1, 10962.0], [93.2, 10963.0], [93.3, 10970.0], [93.4, 10988.0], [93.5, 11016.0], [93.6, 11054.0], [93.7, 11077.0], [93.8, 11083.0], [93.9, 11105.0], [94.0, 11108.0], [94.1, 11120.0], [94.2, 11127.0], [94.3, 11139.0], [94.4, 11149.0], [94.5, 11169.0], [94.6, 11175.0], [94.7, 11183.0], [94.8, 11186.0], [94.9, 11205.0], [95.0, 11207.0], [95.1, 11209.0], [95.2, 11210.0], [95.3, 11218.0], [95.4, 11218.0], [95.5, 11228.0], [95.6, 11230.0], [95.7, 11240.0], [95.8, 11244.0], [95.9, 11251.0], [96.0, 11254.0], [96.1, 11269.0], [96.2, 11273.0], [96.3, 11287.0], [96.4, 11300.0], [96.5, 11317.0], [96.6, 11328.0], [96.7, 11338.0], [96.8, 11347.0], [96.9, 11358.0], [97.0, 11379.0], [97.1, 11396.0], [97.2, 11405.0], [97.3, 11416.0], [97.4, 11425.0], [97.5, 11444.0], [97.6, 11446.0], [97.7, 11500.0], [97.8, 11522.0], [97.9, 11541.0], [98.0, 11545.0], [98.1, 11558.0], [98.2, 11574.0], [98.3, 11596.0], [98.4, 11618.0], [98.5, 11626.0], [98.6, 11633.0], [98.7, 11658.0], [98.8, 11664.0], [98.9, 11683.0], [99.0, 11705.0], [99.1, 11742.0], [99.2, 11764.0], [99.3, 11808.0], [99.4, 11830.0], [99.5, 11841.0], [99.6, 11855.0], [99.7, 11925.0], [99.8, 12004.0], [99.9, 12062.0], [100.0, 12157.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 305.0, "series": [{"data": [[600.0, 1.0], [700.0, 1.0], [800.0, 5.0], [900.0, 4.0], [1000.0, 3.0], [1100.0, 1.0], [1200.0, 4.0], [1300.0, 5.0], [1400.0, 6.0], [1500.0, 8.0], [1600.0, 11.0], [1700.0, 15.0], [1800.0, 11.0], [1900.0, 16.0], [2000.0, 13.0], [2100.0, 20.0], [2300.0, 16.0], [2200.0, 15.0], [2400.0, 23.0], [2500.0, 21.0], [2600.0, 18.0], [2700.0, 36.0], [2800.0, 15.0], [2900.0, 31.0], [3000.0, 37.0], [3100.0, 21.0], [3300.0, 27.0], [3200.0, 25.0], [3400.0, 22.0], [3500.0, 32.0], [3600.0, 24.0], [3700.0, 7.0], [3800.0, 14.0], [3900.0, 17.0], [4000.0, 17.0], [4100.0, 15.0], [4200.0, 19.0], [4300.0, 18.0], [4400.0, 12.0], [4500.0, 11.0], [4600.0, 16.0], [4800.0, 15.0], [4700.0, 19.0], [4900.0, 21.0], [5000.0, 13.0], [5100.0, 18.0], [5200.0, 21.0], [5300.0, 18.0], [5400.0, 15.0], [5500.0, 12.0], [5600.0, 23.0], [5700.0, 10.0], [5800.0, 6.0], [5900.0, 20.0], [6000.0, 21.0], [6100.0, 13.0], [6200.0, 25.0], [6300.0, 25.0], [6400.0, 20.0], [6500.0, 50.0], [6600.0, 26.0], [6700.0, 20.0], [6800.0, 33.0], [6900.0, 13.0], [7000.0, 14.0], [7100.0, 19.0], [7300.0, 25.0], [7400.0, 23.0], [7200.0, 28.0], [7500.0, 18.0], [7600.0, 41.0], [7700.0, 29.0], [7800.0, 26.0], [7900.0, 35.0], [8000.0, 13.0], [8100.0, 16.0], [8200.0, 8.0], [8300.0, 7.0], [8400.0, 4.0], [8500.0, 2.0], [8600.0, 1.0], [8700.0, 2.0], [8800.0, 3.0], [8900.0, 4.0], [9100.0, 17.0], [9000.0, 7.0], [9200.0, 17.0], [9300.0, 18.0], [9400.0, 33.0], [9600.0, 19.0], [9500.0, 15.0], [9700.0, 28.0], [9800.0, 24.0], [10100.0, 121.0], [10000.0, 65.0], [10200.0, 305.0], [9900.0, 34.0], [10400.0, 11.0], [10500.0, 31.0], [10600.0, 15.0], [10300.0, 111.0], [10700.0, 20.0], [10800.0, 18.0], [10900.0, 19.0], [11100.0, 25.0], [11200.0, 37.0], [11000.0, 11.0], [11300.0, 19.0], [11400.0, 14.0], [11500.0, 16.0], [11600.0, 15.0], [11700.0, 9.0], [11800.0, 9.0], [11900.0, 3.0], [12000.0, 4.0], [12100.0, 2.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 14.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2456.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 30.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2456.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 14.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.4979999999978, "minX": 1.75558962E12, "maxY": 1251.4979999999978, "series": [{"data": [[1.75558962E12, 1251.4979999999978]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558962E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 606.0, "minX": 1.0, "maxY": 12157.0, "series": [{"data": [[2.0, 11717.0], [3.0, 12139.0], [4.0, 11444.0], [5.0, 10658.0], [6.0, 12157.0], [7.0, 10855.0], [8.0, 11925.0], [9.0, 11820.0], [10.0, 10962.0], [11.0, 10726.0], [12.0, 11500.0], [13.0, 11300.0], [15.0, 11364.0], [16.0, 10789.0], [17.0, 10775.0], [20.0, 10719.666666666666], [21.0, 11273.0], [23.0, 11850.5], [24.0, 10565.0], [25.0, 10739.0], [26.0, 11558.0], [27.0, 12004.0], [28.0, 11850.0], [30.0, 11865.0], [31.0, 10850.0], [33.0, 11183.0], [32.0, 11268.0], [34.0, 11185.0], [36.0, 11265.5], [39.0, 11419.333333333334], [41.0, 10527.0], [40.0, 11921.0], [45.0, 10692.0], [44.0, 10940.333333333334], [47.0, 11121.0], [46.0, 11764.0], [49.0, 10784.0], [48.0, 11391.0], [50.0, 11658.0], [53.0, 10634.0], [52.0, 11570.0], [55.0, 10537.0], [54.0, 10665.0], [57.0, 11425.0], [56.0, 10752.0], [59.0, 10517.0], [58.0, 10630.0], [60.0, 11855.0], [62.0, 10507.0], [67.0, 10716.0], [66.0, 11628.0], [65.0, 11118.333333333334], [71.0, 10495.5], [69.0, 10781.0], [68.0, 11276.0], [74.0, 11345.333333333334], [79.0, 11781.0], [78.0, 11062.0], [77.0, 10539.0], [76.0, 10521.0], [83.0, 11333.0], [82.0, 11772.0], [80.0, 11558.0], [87.0, 10382.0], [86.0, 10553.0], [85.0, 11596.0], [84.0, 11545.0], [91.0, 10536.0], [88.0, 10377.0], [95.0, 11387.0], [94.0, 11331.0], [93.0, 10379.0], [92.0, 10554.0], [97.0, 11839.0], [96.0, 11664.0], [102.0, 11247.0], [101.0, 10348.0], [100.0, 11241.0], [107.0, 11467.333333333334], [104.0, 11471.5], [111.0, 10983.0], [109.0, 11342.0], [108.0, 10988.0], [115.0, 11484.0], [114.0, 10484.0], [113.0, 10337.0], [112.0, 11270.0], [119.0, 10959.0], [118.0, 10269.0], [117.0, 10610.0], [116.0, 10407.0], [121.0, 10395.0], [120.0, 11451.0], [127.0, 11742.0], [126.0, 11545.0], [125.0, 11445.0], [124.0, 11450.0], [132.0, 10939.0], [131.0, 11666.0], [130.0, 10571.0], [129.0, 11328.0], [128.0, 11672.0], [143.0, 11412.0], [142.0, 11662.0], [141.0, 10289.0], [140.0, 11245.0], [139.0, 11608.0], [138.0, 11541.0], [137.0, 11251.0], [136.0, 10696.75], [150.0, 10392.0], [149.0, 10534.0], [148.0, 11152.0], [147.0, 10553.0], [145.0, 11279.0], [144.0, 10278.0], [159.0, 10237.0], [158.0, 10875.0], [157.0, 11254.0], [156.0, 11416.0], [155.0, 10869.5], [153.0, 10873.0], [152.0, 11000.5], [167.0, 10860.0], [165.0, 10648.5], [163.0, 10965.666666666666], [160.0, 11149.0], [173.0, 10243.0], [172.0, 11338.0], [171.0, 11127.0], [170.0, 11400.0], [169.0, 10596.0], [183.0, 11356.0], [182.0, 11375.0], [181.0, 11596.5], [179.0, 10193.0], [178.0, 10219.0], [177.0, 10958.666666666666], [176.0, 10709.0], [191.0, 10900.0], [189.0, 11241.0], [187.0, 10963.0], [186.0, 10151.0], [185.0, 11171.0], [199.0, 10762.0], [198.0, 10493.5], [196.0, 10402.0], [195.0, 11108.0], [194.0, 10293.0], [193.0, 11618.0], [192.0, 10905.0], [207.0, 11077.0], [206.0, 10630.0], [204.0, 10202.0], [203.0, 11405.0], [202.0, 11549.0], [201.0, 11095.0], [200.0, 10889.0], [215.0, 10844.0], [214.0, 11573.0], [213.0, 10847.0], [212.0, 10063.0], [211.0, 10186.0], [210.0, 10784.0], [208.0, 10762.0], [223.0, 11230.0], [222.0, 10168.0], [221.0, 10970.0], [220.0, 10764.0], [219.0, 11209.0], [218.0, 11095.0], [217.0, 10401.5], [231.0, 10092.0], [230.0, 11004.0], [229.0, 11097.0], [227.0, 11522.0], [226.0, 10033.0], [225.0, 10156.0], [224.0, 11532.0], [239.0, 10793.5], [237.0, 11269.0], [236.0, 10737.0], [235.0, 10216.0], [233.0, 9978.0], [232.0, 10175.0], [247.0, 11217.5], [245.0, 10292.5], [243.0, 10402.0], [241.0, 10050.0], [240.0, 11379.0], [255.0, 10205.0], [254.0, 10135.5], [252.0, 10832.8], [271.0, 11313.5], [266.0, 10470.0], [264.0, 10787.0], [263.0, 10199.0], [262.0, 11070.0], [260.0, 10574.0], [259.0, 10793.333333333334], [256.0, 11062.0], [286.0, 10326.0], [287.0, 10322.0], [285.0, 10323.5], [275.0, 10590.0], [273.0, 10402.0], [272.0, 10353.4], [283.0, 10326.0], [282.0, 10328.0], [281.0, 10327.0], [280.0, 10337.5], [278.0, 10324.0], [277.0, 10352.0], [291.0, 10312.0], [303.0, 10310.0], [300.0, 10316.0], [299.0, 10319.0], [298.0, 10320.0], [297.0, 10310.0], [295.0, 10314.0], [294.0, 10314.0], [292.0, 10320.5], [290.0, 10313.0], [288.0, 10322.0], [317.0, 10310.0], [316.0, 10269.0], [315.0, 10311.0], [314.0, 10229.5], [311.0, 10311.333333333334], [310.0, 10313.5], [307.0, 10316.0], [308.0, 10307.0], [305.0, 10316.5], [334.0, 10301.0], [331.0, 10779.5], [329.0, 10302.333333333334], [326.0, 10226.0], [325.0, 10305.0], [322.0, 10309.0], [321.0, 10290.5], [347.0, 10292.0], [346.0, 10307.5], [343.0, 10304.0], [337.0, 10305.0], [355.0, 10304.5], [366.0, 10302.0], [365.0, 10237.0], [363.0, 10820.0], [360.0, 10295.0], [359.0, 10413.333333333334], [358.0, 10293.333333333334], [353.0, 10291.25], [352.0, 10275.666666666666], [383.0, 10316.0], [382.0, 10305.0], [378.0, 10610.333333333334], [377.0, 10320.0], [376.0, 11233.0], [375.0, 10285.0], [374.0, 10301.5], [373.0, 10231.0], [368.0, 10280.333333333334], [398.0, 10285.5], [395.0, 10295.0], [393.0, 10601.666666666666], [392.0, 10284.0], [391.0, 10315.0], [390.0, 10291.0], [387.0, 10285.0], [386.0, 10304.0], [385.0, 10271.0], [402.0, 10312.0], [413.0, 10296.0], [412.0, 10300.0], [410.0, 10283.5], [409.0, 10311.0], [405.0, 10314.0], [404.0, 10842.0], [401.0, 10287.0], [400.0, 10287.333333333334], [419.0, 10756.0], [431.0, 10273.666666666666], [427.0, 10222.0], [425.0, 10287.5], [422.0, 10214.0], [421.0, 10275.0], [418.0, 10309.0], [429.0, 10259.5], [416.0, 10280.666666666666], [446.0, 10235.5], [445.0, 10273.0], [443.0, 10251.5], [440.0, 10288.0], [439.0, 10193.0], [437.0, 10260.0], [435.0, 10217.0], [433.0, 10265.5], [461.0, 10292.0], [462.0, 10219.0], [460.0, 10270.0], [457.0, 10271.0], [456.0, 10194.0], [455.0, 10226.5], [452.0, 10480.75], [449.0, 10282.0], [448.0, 10193.0], [466.0, 10239.0], [477.0, 10289.0], [476.0, 10231.0], [473.0, 10232.0], [472.0, 10230.0], [469.0, 10188.0], [468.0, 10214.5], [465.0, 10236.0], [464.0, 10188.666666666666], [495.0, 10175.0], [494.0, 10255.0], [491.0, 10265.0], [488.0, 10722.0], [486.0, 10227.8], [483.0, 10195.0], [480.0, 10223.8], [499.0, 10180.0], [509.0, 10274.333333333334], [511.0, 11234.0], [508.0, 10278.0], [505.0, 10618.0], [504.0, 10177.5], [503.0, 10810.0], [501.0, 10172.0], [500.0, 10271.0], [498.0, 10243.5], [497.0, 10232.0], [538.0, 11244.0], [540.0, 10153.0], [536.0, 10270.0], [532.0, 10756.5], [530.0, 10486.0], [526.0, 10215.0], [516.0, 10224.75], [512.0, 10221.0], [522.0, 10180.0], [568.0, 10255.0], [572.0, 10242.0], [562.0, 10246.0], [564.0, 10264.0], [574.0, 10240.0], [570.0, 10247.0], [544.0, 10266.0], [548.0, 10266.5], [546.0, 10210.5], [550.0, 10260.0], [558.0, 10260.5], [552.0, 10152.0], [566.0, 10265.0], [576.0, 10248.0], [606.0, 10447.0], [602.0, 10237.0], [580.0, 10236.0], [592.0, 10727.0], [590.0, 10240.0], [588.0, 10241.0], [586.0, 10242.0], [584.0, 10232.5], [624.0, 10567.333333333334], [636.0, 10238.5], [610.0, 10534.666666666666], [608.0, 10707.5], [630.0, 10272.0], [626.0, 10249.0], [656.0, 10484.25], [670.0, 10258.0], [662.0, 10180.0], [654.0, 10266.0], [640.0, 10243.0], [644.0, 10264.0], [652.0, 10253.5], [648.0, 10264.0], [678.0, 10278.0], [692.0, 10256.0], [688.0, 10271.0], [696.0, 10266.0], [676.0, 10254.0], [674.0, 11139.0], [672.0, 10256.0], [686.0, 10273.0], [680.0, 10266.0], [694.0, 10268.0], [690.0, 10261.666666666666], [728.0, 10259.0], [734.0, 9985.0], [722.0, 10259.5], [732.0, 10184.666666666666], [718.0, 10260.0], [704.0, 10262.333333333334], [710.0, 10260.0], [708.0, 10261.0], [716.0, 10261.0], [714.0, 10262.666666666666], [712.0, 10261.0], [724.0, 10267.0], [740.0, 10176.0], [764.0, 10110.0], [766.0, 9773.0], [762.0, 10131.0], [738.0, 10182.0], [736.0, 10187.0], [756.0, 10910.0], [748.0, 10133.0], [746.0, 10136.0], [744.0, 10131.0], [768.0, 10004.0], [796.0, 9790.0], [782.0, 9960.5], [770.0, 9992.0], [772.0, 9991.5], [780.0, 9966.0], [778.0, 9975.0], [776.0, 9982.666666666666], [790.0, 9878.0], [788.0, 9909.0], [784.0, 9943.0], [824.0, 9769.0], [818.0, 9620.0], [800.0, 9848.0], [802.0, 10605.0], [806.0, 10186.333333333334], [812.0, 10182.5], [808.0, 9971.0], [820.0, 9951.0], [816.0, 9472.0], [860.0, 10075.0], [850.0, 10184.0], [832.0, 9943.75], [846.0, 9767.0], [842.0, 9882.000000000002], [854.0, 10081.0], [852.0, 10182.0], [890.0, 10102.0], [894.0, 10143.0], [880.0, 10111.0], [892.0, 10023.5], [870.0, 10114.5], [866.0, 9439.0], [864.0, 9649.666666666666], [878.0, 9746.5], [876.0, 10115.0], [872.0, 10138.0], [924.0, 10049.0], [926.0, 10087.0], [912.0, 9919.2], [914.0, 10073.0], [922.0, 9937.5], [920.0, 10095.0], [898.0, 10053.5], [906.0, 10103.0], [904.0, 10132.0], [916.0, 10582.0], [952.0, 10028.0], [958.0, 10005.0], [930.0, 9983.0], [928.0, 10200.0], [950.0, 10032.0], [942.0, 9616.0], [940.0, 10040.0], [936.0, 10072.0], [962.0, 9893.0], [990.0, 9922.0], [976.0, 9800.0], [988.0, 9764.666666666666], [960.0, 9972.0], [966.0, 9878.0], [974.0, 9123.0], [972.0, 9821.0], [970.0, 9491.5], [968.0, 9519.5], [982.0, 9794.0], [978.0, 9798.0], [1018.0, 9269.0], [1022.0, 9706.0], [1008.0, 9872.0], [1010.0, 9772.0], [1012.0, 9565.0], [1020.0, 9437.0], [996.0, 10139.0], [994.0, 10095.0], [1006.0, 10142.0], [1004.0, 10100.0], [1002.0, 9487.0], [1000.0, 10016.0], [1014.0, 9804.0], [1028.0, 9447.0], [1076.0, 9629.0], [1072.0, 9184.0], [1032.0, 9259.0], [1024.0, 9709.0], [1052.0, 9577.0], [1048.0, 9504.0], [1040.0, 9224.0], [1060.0, 9238.0], [1056.0, 9595.0], [1144.0, 7118.0], [1120.0, 8962.0], [1124.0, 8871.0], [1128.0, 7496.0], [1140.0, 7224.0], [1136.0, 7287.0], [1100.0, 8183.5], [1096.0, 8213.0], [1092.0, 8987.0], [1088.0, 8369.0], [1116.0, 9008.0], [1112.0, 8040.0], [1108.0, 8088.0], [1104.0, 8170.0], [1132.0, 8491.0], [1200.0, 6593.0], [1208.0, 7226.0], [1188.0, 6606.0], [1204.0, 7932.0], [1160.0, 7068.0], [1156.0, 7068.0], [1164.0, 7078.0], [1180.0, 7201.5], [1176.0, 6953.0], [1172.0, 7417.0], [1196.0, 7648.0], [1192.0, 6646.0], [1268.0, 7788.0], [1264.0, 6553.5], [1256.0, 7973.0], [1248.0, 7750.0], [1216.0, 7718.0], [1244.0, 7432.0], [1336.0, 7264.0], [1340.0, 7694.0], [1320.0, 7645.0], [1312.0, 7272.0], [1332.0, 7429.4], [1292.0, 7154.0], [1288.0, 6538.0], [1284.0, 7702.0], [1280.0, 7398.0], [1304.0, 7315.0], [1324.0, 7033.0], [1344.0, 7183.0], [1380.0, 7789.333333333333], [1404.0, 6992.0], [1400.0, 7893.0], [1372.0, 7560.0], [1348.0, 6691.0], [1356.0, 7873.0], [1368.0, 7647.0], [1364.0, 7876.5], [1360.0, 6938.0], [1384.0, 7857.5], [1376.0, 7764.0], [1464.0, 7348.0], [1440.0, 6804.0], [1448.0, 6757.0], [1468.0, 7621.0], [1460.0, 7661.0], [1456.0, 7364.0], [1408.0, 7434.5], [1416.0, 7927.0], [1420.0, 6912.0], [1436.0, 6825.0], [1432.0, 6846.0], [1424.0, 7822.0], [1452.0, 7706.0], [1528.0, 6884.0], [1532.0, 6307.0], [1508.0, 6508.0], [1504.0, 7384.0], [1512.0, 7386.0], [1524.0, 6355.0], [1520.0, 6396.0], [1472.0, 7427.0], [1484.0, 7162.0], [1480.0, 7474.0], [1500.0, 7462.0], [1496.0, 6364.0], [1492.0, 6557.0], [1548.0, 6518.0], [1584.0, 6160.0], [1588.0, 6467.5], [1576.0, 5993.0], [1580.0, 6029.333333333333], [1592.0, 6337.0], [1540.0, 6981.0], [1536.0, 7037.0], [1564.0, 6211.0], [1556.0, 6937.0], [1552.0, 6271.0], [1656.0, 6077.0], [1660.0, 5681.0], [1632.0, 6416.5], [1636.0, 5430.0], [1640.0, 6086.0], [1644.0, 6410.0], [1652.0, 6151.0], [1648.0, 6456.0], [1612.0, 5517.0], [1608.0, 6376.0], [1604.0, 6459.5], [1600.0, 6483.0], [1628.0, 6557.0], [1620.0, 6413.0], [1616.0, 6363.0], [1720.0, 5245.0], [1724.0, 4841.0], [1704.0, 4846.0], [1696.0, 4908.0], [1700.0, 4978.0], [1708.0, 5391.0], [1712.0, 4953.0], [1664.0, 5940.0], [1668.0, 5215.0], [1672.0, 5834.5], [1692.0, 5930.0], [1688.0, 5975.0], [1684.0, 6317.0], [1680.0, 5896.333333333333], [1784.0, 4876.5], [1780.0, 5329.0], [1760.0, 4331.0], [1768.0, 5154.666666666667], [1772.0, 5453.0], [1788.0, 4330.0], [1776.0, 4793.0], [1740.0, 5752.0], [1736.0, 5322.0], [1732.0, 5948.0], [1728.0, 5161.0], [1756.0, 4638.0], [1752.0, 5092.0], [1748.0, 4377.0], [1848.0, 4749.0], [1828.0, 5072.0], [1824.0, 4676.0], [1832.0, 5385.0], [1852.0, 4054.0], [1804.0, 5237.0], [1800.0, 5332.0], [1796.0, 4926.5], [1792.0, 5018.0], [1820.0, 5431.0], [1816.0, 4159.0], [1812.0, 5504.0], [1808.0, 4187.0], [1904.0, 4773.0], [1896.0, 5043.0], [1900.0, 5042.0], [1916.0, 3515.0], [1856.0, 3919.0], [1860.0, 4731.0], [1864.0, 5174.0], [1868.0, 3905.0], [1884.0, 4796.0], [1876.0, 4894.0], [1968.0, 4599.0], [1960.0, 4457.0], [1972.0, 4676.0], [1952.0, 4260.0], [1956.0, 3344.0], [1964.0, 3427.0], [1924.0, 4996.0], [1928.0, 4255.0], [1948.0, 3383.0], [1940.0, 4124.0], [2040.0, 3750.0], [2044.0, 4205.0], [2016.0, 3080.0], [2024.0, 3025.0], [2028.0, 2941.0], [2032.0, 4122.0], [1984.0, 3197.0], [1988.0, 3158.0], [1992.0, 3940.0], [1996.0, 4417.0], [2012.0, 3206.0], [2004.0, 3689.0], [2144.0, 3206.0], [2112.0, 3855.5], [2168.0, 3050.0], [2160.0, 2905.5], [2048.0, 2779.0], [2072.0, 3944.0], [2104.0, 2641.0], [2088.0, 3498.0], [2080.0, 2734.0], [2288.0, 3021.5], [2280.0, 2640.0], [2240.0, 3346.0], [2256.0, 2492.0], [2296.0, 2578.0], [2272.0, 2655.0], [2200.0, 3524.0], [2192.0, 3294.0], [2184.0, 3153.6666666666665], [2176.0, 2523.0], [2224.0, 2152.0], [2208.0, 2085.0], [2416.0, 2674.0], [2408.0, 2903.0], [2368.0, 1855.0], [2384.0, 2479.0], [2424.0, 2000.0], [2304.0, 2024.0], [2312.0, 3118.0], [2320.0, 2708.0], [2328.0, 2065.5], [2360.0, 2599.0], [2352.0, 2510.5], [2344.0, 2086.0], [2336.0, 2536.5], [2440.0, 1556.0], [2496.0, 1660.0], [2432.0, 2724.0], [2448.0, 1269.0], [2456.0, 1189.0], [2488.0, 1485.0], [2480.0, 983.0], [2145.0, 2632.0], [2113.0, 3433.0], [2137.0, 3632.333333333333], [2153.0, 3153.5], [2049.0, 3544.0], [2057.0, 3923.0], [2065.0, 3829.0], [2105.0, 3175.0], [2097.0, 3168.0], [2089.0, 3486.833333333333], [2081.0, 3450.0], [2297.0, 2927.0], [2241.0, 3222.0], [2249.0, 2820.4], [2265.0, 3099.0], [2289.0, 2066.0], [2273.0, 3062.0], [2201.0, 2984.0], [2193.0, 2780.0], [2185.0, 2401.0], [2233.0, 3422.5], [2217.0, 2867.6666666666665], [2209.0, 3362.0], [2409.0, 2696.0], [2417.0, 2527.0], [2369.0, 2489.3333333333335], [2377.0, 2792.5], [2385.0, 2517.0], [2393.0, 2491.0], [2305.0, 3002.0], [2313.0, 3077.0], [2321.0, 2502.0], [2361.0, 1867.0], [2353.0, 2228.0], [2345.0, 1900.0], [2337.0, 3015.0], [2497.0, 606.0], [2449.0, 2523.0], [2457.0, 1320.0], [2489.0, 2170.0], [2481.0, 1766.0], [2465.0, 1787.0], [1073.0, 9641.0], [1081.0, 9424.0], [1061.0, 9184.0], [1065.0, 9334.0], [1085.0, 8886.0], [1077.0, 9435.0], [1029.0, 9671.0], [1037.0, 9608.5], [1053.0, 9512.0], [1041.0, 9068.0], [1069.0, 9270.75], [1145.0, 8161.0], [1121.0, 8990.0], [1125.0, 7697.0], [1129.0, 8632.0], [1141.0, 8322.0], [1137.0, 8385.0], [1101.0, 9174.0], [1097.0, 8192.0], [1089.0, 9018.0], [1117.0, 9159.0], [1109.0, 9228.0], [1105.0, 8163.0], [1133.0, 7296.0], [1201.0, 6618.0], [1213.0, 7058.0], [1189.0, 6932.0], [1205.0, 7996.0], [1153.0, 7809.0], [1181.0, 6631.0], [1177.0, 6934.0], [1169.0, 7590.0], [1197.0, 7070.0], [1193.0, 6613.0], [1229.0, 7050.833333333334], [1273.0, 7261.0], [1253.0, 7838.5], [1277.0, 6858.0], [1221.0, 7417.5], [1217.0, 7974.0], [1241.0, 7638.0], [1237.0, 7580.0], [1257.0, 7770.0], [1321.0, 7314.0], [1337.0, 7563.0], [1293.0, 7958.0], [1285.0, 7954.0], [1325.0, 6482.0], [1317.0, 7272.0], [1357.0, 7942.0], [1385.0, 7791.0], [1377.0, 7437.0], [1401.0, 7798.0], [1353.0, 7641.0], [1345.0, 6691.0], [1369.0, 7095.0], [1365.0, 7617.0], [1389.0, 7550.0], [1461.0, 7627.0], [1469.0, 7574.0], [1441.0, 7835.0], [1445.0, 6812.333333333333], [1449.0, 6724.0], [1465.0, 7607.0], [1421.0, 6754.0], [1417.0, 6747.0], [1413.0, 7515.5], [1409.0, 7865.0], [1437.0, 7752.0], [1433.0, 6839.0], [1429.0, 6867.0], [1425.0, 6881.0], [1453.0, 7606.0], [1533.0, 6858.0], [1509.0, 6501.0], [1505.0, 6521.0], [1513.0, 6657.0], [1517.0, 7352.5], [1529.0, 7090.0], [1521.0, 6393.0], [1473.0, 7606.0], [1481.0, 6595.0], [1501.0, 6519.0], [1497.0, 7238.0], [1489.0, 7007.0], [1597.0, 5893.5], [1593.0, 5597.0], [1569.0, 6554.666666666667], [1573.0, 6741.5], [1577.0, 6814.0], [1581.0, 6013.0], [1589.0, 5623.0], [1585.0, 6773.0], [1549.0, 6162.0], [1545.0, 6674.5], [1541.0, 6246.0], [1537.0, 6225.0], [1565.0, 6811.0], [1557.0, 6746.0], [1553.0, 6463.0], [1661.0, 5680.0], [1633.0, 6302.0], [1637.0, 6421.0], [1641.0, 5717.0], [1645.0, 6465.0], [1657.0, 6247.0], [1653.0, 5993.0], [1649.0, 5739.0], [1613.0, 6200.0], [1609.0, 6441.0], [1601.0, 6436.0], [1629.0, 6547.0], [1625.0, 6277.0], [1621.0, 6142.0], [1617.0, 6526.0], [1721.0, 6030.0], [1725.0, 5959.0], [1697.0, 5874.0], [1701.0, 5919.0], [1705.0, 6027.0], [1709.0, 5968.0], [1713.0, 5378.0], [1693.0, 6058.0], [1689.0, 6265.0], [1685.0, 5137.0], [1681.0, 6291.0], [1781.0, 4525.0], [1761.0, 5686.0], [1765.0, 4908.5], [1769.0, 5731.0], [1785.0, 4507.0], [1777.0, 5367.5], [1741.0, 4548.0], [1737.0, 5851.0], [1733.0, 5147.5], [1729.0, 5649.0], [1757.0, 5535.0], [1753.0, 4448.0], [1749.0, 5624.0], [1801.0, 4911.0], [1833.0, 4766.0], [1845.0, 4999.0], [1841.0, 5129.0], [1797.0, 5629.0], [1821.0, 4129.0], [1817.0, 4079.0], [1813.0, 4043.0], [1809.0, 5466.0], [1909.0, 4840.5], [1889.0, 4794.0], [1893.0, 4230.5], [1901.0, 5019.0], [1913.0, 3916.0], [1905.0, 4451.0], [1857.0, 4029.0], [1865.0, 4204.0], [1869.0, 4975.0], [1885.0, 4996.0], [1881.0, 4611.333333333333], [1877.0, 4177.0], [1873.0, 4908.5], [1973.0, 3946.0], [1953.0, 4143.0], [1957.0, 3591.0], [1961.0, 3347.0], [1965.0, 3420.0], [1969.0, 4013.0], [1933.0, 4859.5], [1949.0, 4845.0], [1937.0, 4073.5], [2041.0, 3001.0], [2045.0, 3572.0], [2017.0, 3032.0], [2021.0, 4070.0], [2025.0, 4463.0], [2029.0, 4397.0], [2037.0, 3445.5], [2033.0, 4052.0], [2013.0, 3074.0], [2005.0, 4332.333333333333], [2154.0, 3166.0], [2170.0, 3298.0], [2114.0, 2346.0], [2122.0, 3128.3333333333335], [2130.0, 3415.6666666666665], [2162.0, 3189.5], [2146.0, 2357.0], [2050.0, 2786.0], [2058.0, 3095.0], [2066.0, 4189.0], [2074.0, 3606.5], [2106.0, 2495.0], [2098.0, 3435.0], [2090.0, 2756.0], [2290.0, 1755.0], [2282.0, 2247.5], [2242.0, 1979.0], [2250.0, 2795.0], [2258.0, 3005.0], [2266.0, 2560.0], [2298.0, 1977.0], [2274.0, 1994.0], [2202.0, 3373.0], [2194.0, 3317.0], [2186.0, 2482.0], [2178.0, 2530.5], [2234.0, 2846.0], [2218.0, 3414.0], [2418.0, 1376.0], [2370.0, 2394.0], [2386.0, 2755.0], [2426.0, 2636.5], [2410.0, 2901.0], [2306.0, 2958.0], [2314.0, 2534.0], [2322.0, 1953.0], [2330.0, 2707.0], [2354.0, 1915.0], [2338.0, 1791.0], [2450.0, 2383.0], [2434.0, 1521.5], [2458.0, 2233.0], [2490.0, 1736.0], [2482.0, 1086.0], [2474.0, 1526.8], [2466.0, 1483.0], [2163.0, 3092.0], [2155.0, 2926.0], [2171.0, 2218.0], [2115.0, 3545.0], [2123.0, 2388.0], [2139.0, 3076.5], [2147.0, 3810.0], [2051.0, 3923.0], [2059.0, 3899.0], [2067.0, 3531.0], [2107.0, 2457.0], [2099.0, 3894.0], [2091.0, 3940.0], [2283.0, 3038.0], [2299.0, 2977.0], [2243.0, 2266.0], [2251.0, 1892.0], [2267.0, 3118.0], [2291.0, 1786.0], [2203.0, 2966.0], [2195.0, 2184.0], [2187.0, 2160.0], [2179.0, 3652.0], [2227.0, 3017.3333333333335], [2219.0, 2322.0], [2211.0, 3446.5], [2427.0, 2369.0], [2379.0, 1580.5], [2387.0, 2340.0], [2395.0, 2729.0], [2419.0, 1389.0], [2411.0, 1697.0], [2315.0, 2940.0], [2331.0, 2902.0], [2355.0, 1931.0], [2347.0, 2747.5], [2339.0, 1934.0], [2443.0, 2455.6666666666665], [2499.0, 1971.0], [2435.0, 1966.0], [2451.0, 2243.0], [2459.0, 1373.0], [2491.0, 905.0], [2483.0, 1689.0], [2475.0, 878.0], [2467.0, 2531.0], [543.0, 10424.8], [533.0, 11169.0], [519.0, 10176.0], [517.0, 10164.0], [525.0, 10578.333333333334], [521.0, 10214.5], [571.0, 10244.0], [575.0, 10239.0], [563.0, 10368.666666666666], [573.0, 10252.0], [569.0, 11229.0], [559.0, 10150.0], [551.0, 10275.0], [557.0, 10262.0], [555.0, 10262.5], [553.0, 10150.0], [565.0, 10254.0], [583.0, 10243.0], [605.0, 11217.0], [581.0, 11079.0], [577.0, 10236.0], [599.0, 10238.0], [595.0, 10544.0], [587.0, 10241.0], [585.0, 11186.0], [635.0, 10252.666666666666], [627.0, 10239.0], [639.0, 10680.0], [637.0, 10248.0], [623.0, 10488.25], [615.0, 10260.0], [609.0, 10237.5], [619.0, 10046.0], [631.0, 10631.2], [629.0, 10339.0], [625.0, 10333.0], [669.0, 10257.0], [671.0, 10257.0], [667.0, 10837.333333333334], [663.0, 10259.0], [659.0, 10262.0], [641.0, 10246.0], [647.0, 10689.5], [653.0, 10264.0], [649.0, 10264.666666666666], [699.0, 10264.666666666666], [701.0, 10263.0], [677.0, 10026.0], [675.0, 10243.5], [685.0, 10275.0], [683.0, 10274.333333333334], [695.0, 10238.0], [693.0, 10268.0], [689.0, 10272.0], [735.0, 10233.0], [721.0, 10261.0], [733.0, 10265.0], [729.0, 10266.0], [705.0, 10262.0], [717.0, 10262.0], [727.0, 10269.5], [725.0, 10269.0], [723.0, 10264.0], [761.0, 10135.222222222223], [767.0, 10043.0], [765.0, 10104.0], [763.0, 10102.0], [743.0, 10143.5], [741.0, 10948.0], [737.0, 10992.0], [751.0, 10521.5], [749.0, 10128.0], [747.0, 10115.0], [745.0, 10128.0], [793.0, 9747.0], [787.0, 9915.5], [799.0, 9759.5], [797.0, 10320.0], [769.0, 9995.0], [773.0, 9986.0], [779.0, 9967.0], [777.0, 10843.0], [791.0, 9781.0], [785.0, 9674.0], [827.0, 10599.0], [829.0, 10130.0], [825.0, 9788.0], [815.0, 10004.5], [801.0, 10141.0], [803.0, 10178.0], [813.0, 10083.0], [811.0, 10161.0], [823.0, 9691.0], [821.0, 9788.0], [817.0, 9464.0], [859.0, 9438.0], [861.0, 10061.0], [857.0, 10159.5], [847.0, 10266.666666666666], [837.0, 9568.0], [833.0, 9452.0], [841.0, 10071.0], [855.0, 9867.666666666666], [849.0, 9794.5], [893.0, 9947.0], [881.0, 10163.0], [889.0, 10339.0], [871.0, 9434.0], [867.0, 10047.0], [865.0, 10114.0], [873.0, 10542.0], [887.0, 10053.0], [885.0, 9733.0], [883.0, 10131.5], [925.0, 10089.0], [927.0, 10051.0], [913.0, 9921.0], [915.0, 10075.0], [923.0, 10085.0], [903.0, 9843.25], [899.0, 10035.0], [907.0, 10084.0], [919.0, 10065.333333333334], [935.0, 10524.5], [959.0, 9993.0], [957.0, 9502.25], [953.0, 10070.0], [933.0, 10059.0], [931.0, 10069.0], [949.0, 10243.0], [947.0, 9974.8], [939.0, 9617.0], [937.0, 9357.0], [991.0, 10125.0], [979.0, 9790.0], [985.0, 9412.5], [975.0, 9804.0], [961.0, 9911.0], [965.0, 9651.333333333334], [973.0, 9810.0], [971.0, 9838.0], [983.0, 9776.0], [981.0, 9801.0], [977.0, 9791.0], [1021.0, 8723.0], [1023.0, 9401.0], [1009.0, 10133.0], [1011.0, 9604.0], [1019.0, 9260.0], [1017.0, 9211.666666666666], [999.0, 9797.5], [997.0, 9497.0], [995.0, 10183.0], [993.0, 9724.0], [1007.0, 9797.0], [1005.0, 9657.0], [1003.0, 10148.0], [1013.0, 9515.0], [1038.0, 9347.0], [1082.0, 8408.0], [1086.0, 8398.0], [1074.0, 9485.0], [1034.0, 9487.0], [1030.0, 9683.0], [1026.0, 9423.0], [1054.0, 9238.0], [1050.0, 9179.0], [1046.0, 9276.0], [1042.0, 9306.0], [1070.0, 9511.0], [1062.0, 9668.0], [1146.0, 8200.0], [1138.0, 7637.0], [1150.0, 8190.0], [1122.0, 8854.0], [1126.0, 8418.0], [1130.0, 7341.0], [1142.0, 7174.0], [1102.0, 9175.0], [1098.0, 8190.0], [1094.0, 8240.0], [1118.0, 9148.0], [1114.0, 8574.0], [1110.0, 8046.0], [1106.0, 8159.0], [1134.0, 8423.0], [1202.0, 8015.0], [1210.0, 7838.0], [1186.0, 7234.333333333333], [1206.0, 7509.0], [1182.0, 6622.0], [1154.0, 7620.0], [1166.0, 7894.0], [1178.0, 7788.0], [1174.0, 8114.0], [1170.0, 7467.0], [1198.0, 7394.0], [1190.0, 7900.0], [1222.0, 7206.0], [1270.0, 7872.0], [1266.0, 7453.5], [1262.0, 7103.333333333333], [1258.0, 6543.0], [1246.0, 6861.0], [1218.0, 7307.0], [1238.0, 7917.0], [1234.0, 6843.666666666667], [1338.0, 7149.0], [1342.0, 7378.333333333333], [1318.0, 7643.0], [1314.0, 7457.0], [1290.0, 7148.0], [1286.0, 7789.0], [1282.0, 7413.5], [1310.0, 6610.0], [1306.0, 7225.0], [1302.0, 7990.0], [1298.0, 7579.0], [1326.0, 6806.0], [1322.0, 6596.0], [1394.0, 7549.0], [1398.0, 7235.5], [1350.0, 7426.0], [1358.0, 7672.0], [1366.0, 7879.0], [1362.0, 7136.0], [1390.0, 7831.0], [1386.0, 7650.0], [1466.0, 6625.0], [1470.0, 6622.0], [1446.0, 7517.0], [1442.0, 7093.0], [1450.0, 7391.0], [1462.0, 7334.0], [1458.0, 7611.5], [1438.0, 7848.0], [1414.0, 7456.0], [1410.0, 7602.0], [1418.0, 7203.0], [1422.0, 7596.0], [1434.0, 6821.0], [1426.0, 7574.0], [1454.0, 7689.0], [1530.0, 6524.0], [1534.0, 7085.0], [1506.0, 6776.0], [1510.0, 6221.0], [1514.0, 6412.0], [1518.0, 6415.0], [1526.0, 6728.5], [1522.0, 6159.0], [1502.0, 6528.0], [1478.0, 7449.0], [1474.0, 7134.0], [1498.0, 6539.0], [1494.0, 7476.0], [1490.0, 7523.0], [1590.0, 6380.0], [1574.0, 5602.0], [1582.0, 5666.0], [1594.0, 6439.0], [1586.0, 6518.0], [1546.0, 6083.0], [1542.0, 6247.0], [1538.0, 5936.0], [1566.0, 6018.0], [1558.0, 6955.0], [1554.0, 6798.0], [1658.0, 6145.0], [1662.0, 6066.0], [1634.0, 5878.0], [1638.0, 6276.0], [1642.0, 6446.0], [1646.0, 5646.0], [1654.0, 5925.0], [1650.0, 6268.0], [1614.0, 5959.0], [1610.0, 6642.0], [1606.0, 6708.0], [1602.0, 6121.5], [1630.0, 6421.0], [1626.0, 5948.0], [1622.0, 6288.0], [1618.0, 6171.0], [1726.0, 5161.0], [1698.0, 6083.0], [1706.0, 5408.0], [1710.0, 5775.0], [1722.0, 6017.0], [1714.0, 5373.0], [1674.0, 6391.5], [1694.0, 6204.0], [1690.0, 5548.0], [1682.0, 5603.0], [1782.0, 5478.0], [1762.0, 4304.0], [1770.0, 5449.0], [1790.0, 4648.5], [1778.0, 5723.0], [1742.0, 5215.0], [1738.0, 5681.0], [1734.0, 5336.0], [1758.0, 5796.0], [1754.0, 4650.0], [1750.0, 4631.0], [1746.0, 5135.666666666667], [1850.0, 4927.0], [1846.0, 5413.0], [1826.0, 5237.5], [1830.0, 4059.0], [1838.0, 4736.0], [1854.0, 4304.5], [1806.0, 5416.0], [1802.0, 5500.0], [1798.0, 4934.0], [1794.0, 4233.0], [1822.0, 5157.0], [1818.0, 5242.0], [1814.0, 5451.0], [1810.0, 5278.0], [1914.0, 3661.0], [1906.0, 4448.0], [1894.0, 5037.0], [1898.0, 4776.5], [1902.0, 4934.0], [1918.0, 4016.0], [1910.0, 5036.0], [1858.0, 3902.0], [1862.0, 4470.0], [1866.0, 4647.0], [1870.0, 5152.0], [1882.0, 4341.0], [1878.0, 5202.0], [1874.0, 5178.0], [1926.0, 4253.5], [1970.0, 4672.0], [1954.0, 3577.0], [1958.0, 3576.0], [1962.0, 3351.0], [1922.0, 4505.666666666667], [1930.0, 4798.5], [1950.0, 4170.0], [1946.0, 4155.6], [1942.0, 4199.5], [1938.0, 3591.0], [1966.0, 4607.0], [2046.0, 2782.0], [2018.0, 4282.0], [2022.0, 4423.0], [2026.0, 3833.0], [2030.0, 3054.0], [2042.0, 4122.0], [2034.0, 2869.0], [1990.0, 4565.0], [2014.0, 4319.0], [2010.0, 3893.0], [2006.0, 3968.0], [2002.0, 3939.0], [2164.0, 3591.0], [2156.0, 2899.0], [2116.0, 3697.0], [2124.0, 3231.0], [2172.0, 3525.0], [2148.0, 3162.0], [2060.0, 2756.0], [2068.0, 2717.0], [2076.0, 3782.0], [2100.0, 3420.0], [2092.0, 3455.0], [2084.0, 2796.0], [2284.0, 3166.0], [2252.0, 2175.0], [2260.0, 3036.6666666666665], [2292.0, 1727.0], [2276.0, 2921.0], [2204.0, 3019.0], [2196.0, 2967.0], [2188.0, 3554.0], [2236.0, 3177.0], [2220.0, 3293.0], [2428.0, 2599.0], [2420.0, 1550.0], [2372.0, 2048.5], [2380.0, 2984.0], [2388.0, 2126.0], [2396.0, 2721.0], [2412.0, 2625.0], [2308.0, 1873.0], [2316.0, 2519.0], [2324.0, 2339.0], [2332.0, 1638.0], [2364.0, 2394.3333333333335], [2356.0, 1758.0], [2436.0, 1952.0], [2444.0, 2543.0], [2492.0, 2198.0], [2500.0, 1410.0], [2452.0, 1869.0], [2460.0, 1239.0], [2484.0, 2062.0], [2476.0, 1858.0], [2468.0, 1096.0], [2173.0, 2322.0], [2117.0, 2429.0], [2125.0, 2707.0], [2141.0, 3063.5], [2165.0, 3084.0], [2149.0, 3288.0], [2053.0, 3434.5], [2061.0, 3593.0], [2069.0, 3518.0], [2077.0, 4048.0], [2109.0, 3184.5], [2101.0, 2652.0], [2093.0, 3872.0], [2293.0, 3004.0], [2253.0, 3225.0], [2261.0, 2980.0], [2269.0, 2611.0], [2301.0, 2864.0], [2277.0, 2644.0], [2205.0, 3384.0], [2197.0, 3403.0], [2189.0, 3445.0], [2181.0, 3146.5], [2237.0, 3223.0], [2213.0, 3424.5], [2421.0, 1404.0], [2373.0, 2685.0], [2389.0, 2904.0], [2429.0, 2819.0], [2413.0, 2407.0], [2405.0, 2796.0], [2365.0, 2764.0], [2317.0, 3001.0], [2357.0, 3076.0], [2341.0, 2745.5], [2445.0, 2739.0], [2437.0, 1616.0], [2453.0, 2250.0], [2493.0, 1352.0], [2485.0, 1098.0], [2469.0, 968.0], [1083.0, 9112.0], [1087.0, 8392.0], [1059.0, 9311.0], [1063.0, 9233.0], [1079.0, 9168.5], [1075.0, 9464.0], [1055.0, 9076.0], [1027.0, 9352.0], [1035.0, 9612.0], [1031.0, 9638.0], [1039.0, 9591.0], [1051.0, 9186.0], [1047.0, 9216.0], [1043.0, 9196.0], [1071.0, 9575.0], [1147.0, 8252.0], [1139.0, 8368.0], [1151.0, 7994.0], [1123.0, 7757.0], [1127.0, 8529.0], [1131.0, 8511.0], [1143.0, 7163.0], [1103.0, 8174.0], [1095.0, 9214.0], [1091.0, 9176.5], [1119.0, 7928.0], [1111.0, 8044.0], [1107.0, 8862.0], [1135.0, 8034.0], [1203.0, 7349.0], [1215.0, 6877.0], [1187.0, 7267.0], [1207.0, 6589.0], [1183.0, 8102.0], [1159.0, 7953.666666666667], [1155.0, 8106.0], [1167.0, 7493.0], [1163.0, 7950.333333333333], [1175.0, 6894.5], [1171.0, 8029.0], [1199.0, 7294.5], [1191.0, 7482.0], [1271.0, 7725.0], [1279.0, 7828.0], [1251.0, 7474.4], [1275.0, 6884.5], [1231.0, 7842.0], [1223.0, 7757.0], [1219.0, 7154.5], [1247.0, 8029.0], [1239.0, 7845.0], [1235.0, 7720.0], [1259.0, 7732.0], [1255.0, 7943.0], [1291.0, 6488.0], [1343.0, 6698.0], [1335.0, 7265.0], [1295.0, 7244.0], [1287.0, 6780.0], [1283.0, 6843.0], [1311.0, 7270.0], [1303.0, 7096.0], [1299.0, 7118.0], [1327.0, 6827.0], [1323.0, 6926.666666666667], [1315.0, 7124.666666666667], [1395.0, 7695.2], [1403.0, 7441.0], [1407.0, 7865.0], [1399.0, 7650.0], [1359.0, 7640.0], [1355.0, 7428.25], [1347.0, 7557.0], [1375.0, 7729.666666666667], [1371.0, 7630.0], [1391.0, 6777.0], [1387.0, 7548.5], [1467.0, 7324.0], [1471.0, 6620.0], [1447.0, 6763.0], [1451.0, 7723.0], [1463.0, 6459.0], [1459.0, 7359.0], [1423.0, 7620.0], [1419.0, 7935.0], [1415.0, 7474.0], [1411.0, 7064.0], [1439.0, 6825.0], [1435.0, 7704.0], [1431.0, 6874.0], [1427.0, 6876.0], [1455.0, 6582.0], [1527.0, 6325.0], [1531.0, 6524.0], [1507.0, 6509.0], [1511.0, 6513.0], [1515.0, 7060.0], [1519.0, 6408.0], [1523.0, 6381.0], [1503.0, 7178.0], [1475.0, 7518.0], [1479.0, 7426.0], [1499.0, 7245.0], [1495.0, 6332.0], [1491.0, 6561.0], [1595.0, 6489.0], [1571.0, 6271.5], [1575.0, 6608.0], [1583.0, 6120.0], [1551.0, 6528.5], [1547.0, 6710.0], [1543.0, 5897.0], [1539.0, 6236.0], [1563.0, 6179.2], [1555.0, 6107.0], [1655.0, 6305.0], [1651.0, 6165.0], [1659.0, 5684.0], [1635.0, 5304.0], [1639.0, 6248.0], [1643.0, 6383.0], [1647.0, 6310.0], [1615.0, 5504.0], [1611.0, 5510.0], [1607.0, 6542.5], [1627.0, 6528.0], [1623.0, 5914.0], [1723.0, 5737.0], [1727.0, 5310.0], [1699.0, 5823.0], [1703.0, 5740.5], [1707.0, 5777.0], [1711.0, 6071.0], [1715.0, 5992.0], [1695.0, 5371.0], [1667.0, 6134.333333333333], [1691.0, 6142.0], [1687.0, 6184.5], [1683.0, 5139.0], [1779.0, 4255.0], [1763.0, 5745.0], [1787.0, 5425.0], [1791.0, 5346.0], [1771.0, 4601.0], [1775.0, 5568.0], [1743.0, 4779.0], [1739.0, 5219.0], [1735.0, 4782.0], [1731.0, 5254.0], [1759.0, 5466.0], [1755.0, 4642.0], [1751.0, 5666.0], [1747.0, 5816.0], [1851.0, 4719.0], [1843.0, 4510.0], [1855.0, 4701.0], [1827.0, 4315.0], [1831.0, 5388.0], [1835.0, 5124.5], [1839.0, 4098.0], [1847.0, 4083.0], [1807.0, 5232.0], [1803.0, 5319.0], [1799.0, 5297.0], [1823.0, 5239.0], [1819.0, 4789.0], [1815.0, 4335.0], [1811.0, 5262.0], [1919.0, 3586.0], [1895.0, 4836.0], [1915.0, 4824.0], [1891.0, 4004.5], [1899.0, 4714.0], [1903.0, 5112.0], [1907.0, 3534.0], [1887.0, 4420.5], [1859.0, 4028.0], [1863.0, 5380.0], [1867.0, 5211.0], [1871.0, 4922.0], [1883.0, 4486.0], [1971.0, 4364.0], [1979.0, 3864.5], [1983.0, 3873.5], [1955.0, 4018.0], [1959.0, 3302.0], [1963.0, 3219.0], [1951.0, 3736.0], [1923.0, 4788.0], [1927.0, 3503.0], [1931.0, 4867.0], [1935.0, 4728.5], [1947.0, 4751.0], [1967.0, 3239.0], [2043.0, 2931.0], [2047.0, 3649.0], [2019.0, 3692.0], [2023.0, 3099.0], [2027.0, 4307.0], [2031.0, 4345.0], [2039.0, 3557.5], [2035.0, 2838.0], [2015.0, 3070.0], [1987.0, 3894.0], [1991.0, 3966.0], [1995.0, 4053.0], [1999.0, 4463.0], [2011.0, 3722.0], [2007.0, 3479.6666666666665], [2150.0, 2428.0], [2166.0, 3293.0], [2118.0, 3266.0], [2158.0, 3323.5], [2110.0, 2466.0], [2054.0, 4049.0], [2062.0, 3494.0], [2094.0, 3392.0], [2294.0, 2993.0], [2286.0, 1881.5], [2246.0, 3205.0], [2254.0, 3124.0], [2262.0, 1884.0], [2270.0, 3307.0], [2302.0, 2031.0], [2278.0, 3185.0], [2198.0, 2771.0], [2190.0, 2121.0], [2238.0, 3154.0], [2230.0, 3308.0], [2222.0, 3187.0], [2214.0, 2406.0], [2406.0, 2331.0], [2390.0, 2824.0], [2398.0, 1702.5], [2430.0, 2814.0], [2310.0, 2525.0], [2326.0, 2427.5], [2334.0, 2799.5], [2358.0, 1905.0], [2350.0, 2352.6666666666665], [2342.0, 1651.0], [2438.0, 2203.0], [2446.0, 2732.0], [2462.0, 2325.0], [2494.0, 2167.0], [2486.0, 2040.0], [2478.0, 1224.5], [2167.0, 3643.0], [2175.0, 3522.0], [2119.0, 3233.0], [2127.0, 3168.0], [2135.0, 3434.0], [2143.0, 3079.0], [2151.0, 3512.0], [2063.0, 3378.0], [2071.0, 3182.5], [2079.0, 3402.5], [2103.0, 3713.0], [2095.0, 3590.0], [2279.0, 2075.0], [2295.0, 1717.0], [2303.0, 1997.0], [2255.0, 2167.0], [2263.0, 2798.0], [2271.0, 1813.0], [2207.0, 2591.5], [2199.0, 3329.0], [2191.0, 3437.0], [2239.0, 2075.0], [2231.0, 3095.0], [2415.0, 2727.0], [2423.0, 2183.5], [2431.0, 2722.0], [2375.0, 1735.0], [2383.0, 2822.6666666666665], [2391.0, 2121.0], [2407.0, 1482.0], [2311.0, 2976.0], [2319.0, 2419.0], [2359.0, 2763.0], [2447.0, 2102.0], [2439.0, 1568.0], [2495.0, 808.0], [2455.0, 1869.0], [2463.0, 1692.5], [2479.0, 788.0], [1.0, 12031.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}, {"data": [[1251.4967999999985, 7348.021599999998]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 18727.866666666665, "minX": 1.75558962E12, "maxY": 241038.66666666666, "series": [{"data": [[1.75558962E12, 241038.66666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75558962E12, 18727.866666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558962E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7348.021599999998, "minX": 1.75558962E12, "maxY": 7348.021599999998, "series": [{"data": [[1.75558962E12, 7348.021599999998]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558962E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7324.0927999999985, "minX": 1.75558962E12, "maxY": 7324.0927999999985, "series": [{"data": [[1.75558962E12, 7324.0927999999985]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558962E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5604.528, "minX": 1.75558962E12, "maxY": 5604.528, "series": [{"data": [[1.75558962E12, 5604.528]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558962E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 606.0, "minX": 1.75558962E12, "maxY": 12157.0, "series": [{"data": [[1.75558962E12, 12157.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75558962E12, 10557.300000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75558962E12, 11711.78]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75558962E12, 11208.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75558962E12, 606.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75558962E12, 7695.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558962E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1514.0, "minX": 31.0, "maxY": 10967.0, "series": [{"data": [[134.0, 9489.0], [263.0, 10967.0], [162.0, 6308.5], [169.0, 4286.5], [42.0, 8191.0], [699.0, 10251.0], [190.0, 5261.5], [374.0, 7418.5], [220.0, 2483.0], [216.0, 3310.5], [31.0, 1514.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[169.0, 3302.0], [374.0, 6559.5], [220.0, 1638.0], [216.0, 2637.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 699.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 31.0, "maxY": 10967.0, "series": [{"data": [[134.0, 9489.0], [263.0, 10967.0], [162.0, 6308.5], [169.0, 4286.5], [42.0, 8191.0], [699.0, 10251.0], [190.0, 5261.5], [374.0, 7418.5], [220.0, 2483.0], [216.0, 3310.5], [31.0, 1514.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[169.0, 0.0], [374.0, 0.0], [220.0, 0.0], [216.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 699.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558962E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558962E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558962E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.75558962E12, "maxY": 41.43333333333333, "series": [{"data": [[1.75558962E12, 0.23333333333333334]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.75558962E12, 41.43333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558962E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.75558962E12, "maxY": 41.43333333333333, "series": [{"data": [[1.75558962E12, 0.23333333333333334]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-failure", "isController": false}, {"data": [[1.75558962E12, 41.43333333333333]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558962E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.75558962E12, "maxY": 41.43333333333333, "series": [{"data": [[1.75558962E12, 41.43333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75558962E12, 0.23333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558962E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

