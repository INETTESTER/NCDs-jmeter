/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 337.0, "minX": 0.0, "maxY": 6988.0, "series": [{"data": [[0.0, 337.0], [0.1, 344.0], [0.2, 435.0], [0.3, 475.0], [0.4, 517.0], [0.5, 600.0], [0.6, 605.0], [0.7, 619.0], [0.8, 630.0], [0.9, 634.0], [1.0, 655.0], [1.1, 671.0], [1.2, 673.0], [1.3, 687.0], [1.4, 710.0], [1.5, 738.0], [1.6, 756.0], [1.7, 765.0], [1.8, 769.0], [1.9, 771.0], [2.0, 794.0], [2.1, 800.0], [2.2, 831.0], [2.3, 865.0], [2.4, 896.0], [2.5, 896.0], [2.6, 961.0], [2.7, 970.0], [2.8, 981.0], [2.9, 992.0], [3.0, 997.0], [3.1, 1050.0], [3.2, 1111.0], [3.3, 1126.0], [3.4, 1166.0], [3.5, 1175.0], [3.6, 1222.0], [3.7, 1230.0], [3.8, 1240.0], [3.9, 1283.0], [4.0, 1296.0], [4.1, 1305.0], [4.2, 1309.0], [4.3, 1356.0], [4.4, 1388.0], [4.5, 1400.0], [4.6, 1411.0], [4.7, 1431.0], [4.8, 1449.0], [4.9, 1469.0], [5.0, 1471.0], [5.1, 1488.0], [5.2, 1498.0], [5.3, 1510.0], [5.4, 1512.0], [5.5, 1530.0], [5.6, 1540.0], [5.7, 1550.0], [5.8, 1563.0], [5.9, 1575.0], [6.0, 1580.0], [6.1, 1595.0], [6.2, 1602.0], [6.3, 1615.0], [6.4, 1615.0], [6.5, 1619.0], [6.6, 1641.0], [6.7, 1656.0], [6.8, 1658.0], [6.9, 1667.0], [7.0, 1685.0], [7.1, 1695.0], [7.2, 1700.0], [7.3, 1710.0], [7.4, 1717.0], [7.5, 1721.0], [7.6, 1734.0], [7.7, 1736.0], [7.8, 1752.0], [7.9, 1767.0], [8.0, 1777.0], [8.1, 1800.0], [8.2, 1813.0], [8.3, 1830.0], [8.4, 1839.0], [8.5, 1841.0], [8.6, 1854.0], [8.7, 1868.0], [8.8, 1869.0], [8.9, 1872.0], [9.0, 1879.0], [9.1, 1891.0], [9.2, 1898.0], [9.3, 1919.0], [9.4, 1921.0], [9.5, 1931.0], [9.6, 1951.0], [9.7, 1951.0], [9.8, 1967.0], [9.9, 1970.0], [10.0, 1980.0], [10.1, 1995.0], [10.2, 2004.0], [10.3, 2031.0], [10.4, 2039.0], [10.5, 2044.0], [10.6, 2048.0], [10.7, 2049.0], [10.8, 2055.0], [10.9, 2057.0], [11.0, 2074.0], [11.1, 2083.0], [11.2, 2086.0], [11.3, 2088.0], [11.4, 2092.0], [11.5, 2094.0], [11.6, 2107.0], [11.7, 2109.0], [11.8, 2117.0], [11.9, 2119.0], [12.0, 2125.0], [12.1, 2135.0], [12.2, 2137.0], [12.3, 2142.0], [12.4, 2147.0], [12.5, 2153.0], [12.6, 2156.0], [12.7, 2166.0], [12.8, 2169.0], [12.9, 2170.0], [13.0, 2176.0], [13.1, 2178.0], [13.2, 2181.0], [13.3, 2184.0], [13.4, 2191.0], [13.5, 2192.0], [13.6, 2198.0], [13.7, 2200.0], [13.8, 2202.0], [13.9, 2215.0], [14.0, 2224.0], [14.1, 2246.0], [14.2, 2256.0], [14.3, 2257.0], [14.4, 2265.0], [14.5, 2269.0], [14.6, 2271.0], [14.7, 2275.0], [14.8, 2282.0], [14.9, 2283.0], [15.0, 2285.0], [15.1, 2287.0], [15.2, 2295.0], [15.3, 2297.0], [15.4, 2304.0], [15.5, 2308.0], [15.6, 2322.0], [15.7, 2329.0], [15.8, 2331.0], [15.9, 2342.0], [16.0, 2346.0], [16.1, 2349.0], [16.2, 2358.0], [16.3, 2364.0], [16.4, 2371.0], [16.5, 2373.0], [16.6, 2376.0], [16.7, 2377.0], [16.8, 2383.0], [16.9, 2385.0], [17.0, 2386.0], [17.1, 2389.0], [17.2, 2394.0], [17.3, 2399.0], [17.4, 2402.0], [17.5, 2408.0], [17.6, 2412.0], [17.7, 2415.0], [17.8, 2419.0], [17.9, 2429.0], [18.0, 2437.0], [18.1, 2464.0], [18.2, 2467.0], [18.3, 2470.0], [18.4, 2473.0], [18.5, 2477.0], [18.6, 2486.0], [18.7, 2507.0], [18.8, 2511.0], [18.9, 2517.0], [19.0, 2530.0], [19.1, 2565.0], [19.2, 2566.0], [19.3, 2570.0], [19.4, 2579.0], [19.5, 2582.0], [19.6, 2610.0], [19.7, 2612.0], [19.8, 2621.0], [19.9, 2637.0], [20.0, 2640.0], [20.1, 2665.0], [20.2, 2669.0], [20.3, 2674.0], [20.4, 2677.0], [20.5, 2691.0], [20.6, 2699.0], [20.7, 2704.0], [20.8, 2714.0], [20.9, 2723.0], [21.0, 2726.0], [21.1, 2738.0], [21.2, 2752.0], [21.3, 2755.0], [21.4, 2768.0], [21.5, 2774.0], [21.6, 2777.0], [21.7, 2780.0], [21.8, 2785.0], [21.9, 2791.0], [22.0, 2803.0], [22.1, 2806.0], [22.2, 2809.0], [22.3, 2835.0], [22.4, 2840.0], [22.5, 2843.0], [22.6, 2856.0], [22.7, 2865.0], [22.8, 2879.0], [22.9, 2884.0], [23.0, 2887.0], [23.1, 2889.0], [23.2, 2891.0], [23.3, 2895.0], [23.4, 2914.0], [23.5, 2930.0], [23.6, 2936.0], [23.7, 2947.0], [23.8, 2952.0], [23.9, 2961.0], [24.0, 2962.0], [24.1, 2968.0], [24.2, 2970.0], [24.3, 2993.0], [24.4, 3000.0], [24.5, 3006.0], [24.6, 3026.0], [24.7, 3029.0], [24.8, 3030.0], [24.9, 3044.0], [25.0, 3060.0], [25.1, 3071.0], [25.2, 3072.0], [25.3, 3077.0], [25.4, 3086.0], [25.5, 3097.0], [25.6, 3097.0], [25.7, 3101.0], [25.8, 3115.0], [25.9, 3121.0], [26.0, 3122.0], [26.1, 3136.0], [26.2, 3141.0], [26.3, 3146.0], [26.4, 3148.0], [26.5, 3152.0], [26.6, 3155.0], [26.7, 3163.0], [26.8, 3167.0], [26.9, 3179.0], [27.0, 3195.0], [27.1, 3201.0], [27.2, 3202.0], [27.3, 3219.0], [27.4, 3230.0], [27.5, 3252.0], [27.6, 3257.0], [27.7, 3260.0], [27.8, 3266.0], [27.9, 3273.0], [28.0, 3283.0], [28.1, 3293.0], [28.2, 3300.0], [28.3, 3305.0], [28.4, 3307.0], [28.5, 3314.0], [28.6, 3315.0], [28.7, 3329.0], [28.8, 3333.0], [28.9, 3342.0], [29.0, 3350.0], [29.1, 3356.0], [29.2, 3374.0], [29.3, 3390.0], [29.4, 3392.0], [29.5, 3404.0], [29.6, 3413.0], [29.7, 3416.0], [29.8, 3433.0], [29.9, 3437.0], [30.0, 3449.0], [30.1, 3467.0], [30.2, 3473.0], [30.3, 3476.0], [30.4, 3478.0], [30.5, 3483.0], [30.6, 3486.0], [30.7, 3503.0], [30.8, 3508.0], [30.9, 3511.0], [31.0, 3528.0], [31.1, 3533.0], [31.2, 3540.0], [31.3, 3543.0], [31.4, 3548.0], [31.5, 3560.0], [31.6, 3567.0], [31.7, 3568.0], [31.8, 3574.0], [31.9, 3583.0], [32.0, 3584.0], [32.1, 3589.0], [32.2, 3596.0], [32.3, 3600.0], [32.4, 3603.0], [32.5, 3605.0], [32.6, 3611.0], [32.7, 3612.0], [32.8, 3615.0], [32.9, 3630.0], [33.0, 3643.0], [33.1, 3650.0], [33.2, 3662.0], [33.3, 3669.0], [33.4, 3674.0], [33.5, 3680.0], [33.6, 3698.0], [33.7, 3717.0], [33.8, 3720.0], [33.9, 3721.0], [34.0, 3723.0], [34.1, 3726.0], [34.2, 3734.0], [34.3, 3747.0], [34.4, 3751.0], [34.5, 3755.0], [34.6, 3760.0], [34.7, 3770.0], [34.8, 3783.0], [34.9, 3795.0], [35.0, 3800.0], [35.1, 3806.0], [35.2, 3810.0], [35.3, 3817.0], [35.4, 3833.0], [35.5, 3837.0], [35.6, 3847.0], [35.7, 3865.0], [35.8, 3870.0], [35.9, 3873.0], [36.0, 3875.0], [36.1, 3880.0], [36.2, 3884.0], [36.3, 3893.0], [36.4, 3905.0], [36.5, 3916.0], [36.6, 3937.0], [36.7, 3947.0], [36.8, 3951.0], [36.9, 3958.0], [37.0, 3961.0], [37.1, 3965.0], [37.2, 3969.0], [37.3, 3979.0], [37.4, 3981.0], [37.5, 3984.0], [37.6, 3986.0], [37.7, 3993.0], [37.8, 3994.0], [37.9, 3998.0], [38.0, 4005.0], [38.1, 4016.0], [38.2, 4027.0], [38.3, 4028.0], [38.4, 4031.0], [38.5, 4033.0], [38.6, 4034.0], [38.7, 4036.0], [38.8, 4037.0], [38.9, 4040.0], [39.0, 4049.0], [39.1, 4053.0], [39.2, 4055.0], [39.3, 4065.0], [39.4, 4068.0], [39.5, 4079.0], [39.6, 4082.0], [39.7, 4088.0], [39.8, 4094.0], [39.9, 4102.0], [40.0, 4107.0], [40.1, 4113.0], [40.2, 4118.0], [40.3, 4121.0], [40.4, 4124.0], [40.5, 4136.0], [40.6, 4140.0], [40.7, 4146.0], [40.8, 4146.0], [40.9, 4150.0], [41.0, 4164.0], [41.1, 4167.0], [41.2, 4181.0], [41.3, 4188.0], [41.4, 4193.0], [41.5, 4202.0], [41.6, 4206.0], [41.7, 4209.0], [41.8, 4237.0], [41.9, 4238.0], [42.0, 4243.0], [42.1, 4252.0], [42.2, 4255.0], [42.3, 4258.0], [42.4, 4260.0], [42.5, 4264.0], [42.6, 4270.0], [42.7, 4271.0], [42.8, 4272.0], [42.9, 4276.0], [43.0, 4282.0], [43.1, 4309.0], [43.2, 4311.0], [43.3, 4323.0], [43.4, 4338.0], [43.5, 4342.0], [43.6, 4343.0], [43.7, 4358.0], [43.8, 4371.0], [43.9, 4374.0], [44.0, 4379.0], [44.1, 4392.0], [44.2, 4409.0], [44.3, 4409.0], [44.4, 4422.0], [44.5, 4423.0], [44.6, 4429.0], [44.7, 4435.0], [44.8, 4441.0], [44.9, 4445.0], [45.0, 4449.0], [45.1, 4455.0], [45.2, 4456.0], [45.3, 4472.0], [45.4, 4476.0], [45.5, 4484.0], [45.6, 4486.0], [45.7, 4487.0], [45.8, 4490.0], [45.9, 4493.0], [46.0, 4495.0], [46.1, 4499.0], [46.2, 4506.0], [46.3, 4509.0], [46.4, 4512.0], [46.5, 4512.0], [46.6, 4514.0], [46.7, 4517.0], [46.8, 4518.0], [46.9, 4531.0], [47.0, 4533.0], [47.1, 4537.0], [47.2, 4539.0], [47.3, 4540.0], [47.4, 4542.0], [47.5, 4545.0], [47.6, 4549.0], [47.7, 4551.0], [47.8, 4553.0], [47.9, 4558.0], [48.0, 4559.0], [48.1, 4562.0], [48.2, 4564.0], [48.3, 4569.0], [48.4, 4570.0], [48.5, 4574.0], [48.6, 4576.0], [48.7, 4578.0], [48.8, 4579.0], [48.9, 4580.0], [49.0, 4585.0], [49.1, 4588.0], [49.2, 4588.0], [49.3, 4594.0], [49.4, 4596.0], [49.5, 4596.0], [49.6, 4600.0], [49.7, 4601.0], [49.8, 4606.0], [49.9, 4608.0], [50.0, 4609.0], [50.1, 4617.0], [50.2, 4622.0], [50.3, 4623.0], [50.4, 4623.0], [50.5, 4624.0], [50.6, 4626.0], [50.7, 4629.0], [50.8, 4631.0], [50.9, 4634.0], [51.0, 4636.0], [51.1, 4637.0], [51.2, 4642.0], [51.3, 4648.0], [51.4, 4655.0], [51.5, 4660.0], [51.6, 4662.0], [51.7, 4672.0], [51.8, 4674.0], [51.9, 4681.0], [52.0, 4682.0], [52.1, 4684.0], [52.2, 4685.0], [52.3, 4688.0], [52.4, 4692.0], [52.5, 4697.0], [52.6, 4705.0], [52.7, 4708.0], [52.8, 4710.0], [52.9, 4713.0], [53.0, 4716.0], [53.1, 4719.0], [53.2, 4721.0], [53.3, 4727.0], [53.4, 4728.0], [53.5, 4729.0], [53.6, 4731.0], [53.7, 4733.0], [53.8, 4734.0], [53.9, 4736.0], [54.0, 4741.0], [54.1, 4741.0], [54.2, 4743.0], [54.3, 4746.0], [54.4, 4746.0], [54.5, 4748.0], [54.6, 4752.0], [54.7, 4757.0], [54.8, 4761.0], [54.9, 4765.0], [55.0, 4766.0], [55.1, 4770.0], [55.2, 4771.0], [55.3, 4777.0], [55.4, 4779.0], [55.5, 4783.0], [55.6, 4785.0], [55.7, 4788.0], [55.8, 4798.0], [55.9, 4801.0], [56.0, 4803.0], [56.1, 4806.0], [56.2, 4808.0], [56.3, 4828.0], [56.4, 4828.0], [56.5, 4830.0], [56.6, 4836.0], [56.7, 4844.0], [56.8, 4849.0], [56.9, 4850.0], [57.0, 4855.0], [57.1, 4857.0], [57.2, 4863.0], [57.3, 4867.0], [57.4, 4874.0], [57.5, 4877.0], [57.6, 4878.0], [57.7, 4890.0], [57.8, 4896.0], [57.9, 4899.0], [58.0, 4902.0], [58.1, 4915.0], [58.2, 4922.0], [58.3, 4924.0], [58.4, 4933.0], [58.5, 4939.0], [58.6, 4942.0], [58.7, 4946.0], [58.8, 4950.0], [58.9, 4957.0], [59.0, 4960.0], [59.1, 4962.0], [59.2, 4965.0], [59.3, 4976.0], [59.4, 4978.0], [59.5, 4985.0], [59.6, 4991.0], [59.7, 4992.0], [59.8, 4993.0], [59.9, 4994.0], [60.0, 4995.0], [60.1, 5000.0], [60.2, 5005.0], [60.3, 5006.0], [60.4, 5009.0], [60.5, 5010.0], [60.6, 5012.0], [60.7, 5012.0], [60.8, 5016.0], [60.9, 5019.0], [61.0, 5026.0], [61.1, 5029.0], [61.2, 5033.0], [61.3, 5039.0], [61.4, 5048.0], [61.5, 5050.0], [61.6, 5050.0], [61.7, 5053.0], [61.8, 5059.0], [61.9, 5066.0], [62.0, 5074.0], [62.1, 5076.0], [62.2, 5077.0], [62.3, 5077.0], [62.4, 5079.0], [62.5, 5081.0], [62.6, 5082.0], [62.7, 5086.0], [62.8, 5088.0], [62.9, 5094.0], [63.0, 5098.0], [63.1, 5100.0], [63.2, 5103.0], [63.3, 5116.0], [63.4, 5118.0], [63.5, 5121.0], [63.6, 5130.0], [63.7, 5132.0], [63.8, 5133.0], [63.9, 5139.0], [64.0, 5139.0], [64.1, 5142.0], [64.2, 5145.0], [64.3, 5148.0], [64.4, 5149.0], [64.5, 5153.0], [64.6, 5157.0], [64.7, 5159.0], [64.8, 5165.0], [64.9, 5167.0], [65.0, 5170.0], [65.1, 5173.0], [65.2, 5176.0], [65.3, 5176.0], [65.4, 5177.0], [65.5, 5182.0], [65.6, 5182.0], [65.7, 5185.0], [65.8, 5187.0], [65.9, 5191.0], [66.0, 5195.0], [66.1, 5197.0], [66.2, 5198.0], [66.3, 5200.0], [66.4, 5200.0], [66.5, 5202.0], [66.6, 5210.0], [66.7, 5211.0], [66.8, 5213.0], [66.9, 5215.0], [67.0, 5222.0], [67.1, 5227.0], [67.2, 5229.0], [67.3, 5233.0], [67.4, 5234.0], [67.5, 5242.0], [67.6, 5244.0], [67.7, 5245.0], [67.8, 5252.0], [67.9, 5252.0], [68.0, 5253.0], [68.1, 5258.0], [68.2, 5260.0], [68.3, 5267.0], [68.4, 5270.0], [68.5, 5272.0], [68.6, 5278.0], [68.7, 5280.0], [68.8, 5280.0], [68.9, 5287.0], [69.0, 5290.0], [69.1, 5292.0], [69.2, 5302.0], [69.3, 5303.0], [69.4, 5304.0], [69.5, 5307.0], [69.6, 5308.0], [69.7, 5312.0], [69.8, 5315.0], [69.9, 5315.0], [70.0, 5321.0], [70.1, 5323.0], [70.2, 5325.0], [70.3, 5331.0], [70.4, 5331.0], [70.5, 5337.0], [70.6, 5338.0], [70.7, 5342.0], [70.8, 5346.0], [70.9, 5348.0], [71.0, 5352.0], [71.1, 5361.0], [71.2, 5365.0], [71.3, 5371.0], [71.4, 5372.0], [71.5, 5374.0], [71.6, 5379.0], [71.7, 5381.0], [71.8, 5383.0], [71.9, 5386.0], [72.0, 5387.0], [72.1, 5391.0], [72.2, 5397.0], [72.3, 5401.0], [72.4, 5404.0], [72.5, 5405.0], [72.6, 5405.0], [72.7, 5410.0], [72.8, 5410.0], [72.9, 5413.0], [73.0, 5414.0], [73.1, 5424.0], [73.2, 5427.0], [73.3, 5441.0], [73.4, 5444.0], [73.5, 5452.0], [73.6, 5452.0], [73.7, 5455.0], [73.8, 5457.0], [73.9, 5463.0], [74.0, 5470.0], [74.1, 5472.0], [74.2, 5476.0], [74.3, 5478.0], [74.4, 5480.0], [74.5, 5485.0], [74.6, 5485.0], [74.7, 5488.0], [74.8, 5489.0], [74.9, 5491.0], [75.0, 5494.0], [75.1, 5495.0], [75.2, 5496.0], [75.3, 5497.0], [75.4, 5500.0], [75.5, 5505.0], [75.6, 5507.0], [75.7, 5509.0], [75.8, 5510.0], [75.9, 5512.0], [76.0, 5514.0], [76.1, 5514.0], [76.2, 5515.0], [76.3, 5516.0], [76.4, 5517.0], [76.5, 5517.0], [76.6, 5518.0], [76.7, 5521.0], [76.8, 5521.0], [76.9, 5524.0], [77.0, 5525.0], [77.1, 5528.0], [77.2, 5529.0], [77.3, 5533.0], [77.4, 5536.0], [77.5, 5539.0], [77.6, 5543.0], [77.7, 5547.0], [77.8, 5556.0], [77.9, 5560.0], [78.0, 5561.0], [78.1, 5564.0], [78.2, 5566.0], [78.3, 5569.0], [78.4, 5574.0], [78.5, 5576.0], [78.6, 5577.0], [78.7, 5581.0], [78.8, 5582.0], [78.9, 5586.0], [79.0, 5587.0], [79.1, 5591.0], [79.2, 5592.0], [79.3, 5595.0], [79.4, 5599.0], [79.5, 5601.0], [79.6, 5607.0], [79.7, 5608.0], [79.8, 5609.0], [79.9, 5610.0], [80.0, 5617.0], [80.1, 5621.0], [80.2, 5622.0], [80.3, 5623.0], [80.4, 5629.0], [80.5, 5631.0], [80.6, 5632.0], [80.7, 5642.0], [80.8, 5643.0], [80.9, 5649.0], [81.0, 5657.0], [81.1, 5661.0], [81.2, 5667.0], [81.3, 5671.0], [81.4, 5677.0], [81.5, 5681.0], [81.6, 5681.0], [81.7, 5681.0], [81.8, 5682.0], [81.9, 5688.0], [82.0, 5692.0], [82.1, 5693.0], [82.2, 5699.0], [82.3, 5700.0], [82.4, 5707.0], [82.5, 5715.0], [82.6, 5721.0], [82.7, 5723.0], [82.8, 5728.0], [82.9, 5729.0], [83.0, 5735.0], [83.1, 5748.0], [83.2, 5753.0], [83.3, 5753.0], [83.4, 5758.0], [83.5, 5759.0], [83.6, 5767.0], [83.7, 5771.0], [83.8, 5774.0], [83.9, 5778.0], [84.0, 5795.0], [84.1, 5797.0], [84.2, 5801.0], [84.3, 5806.0], [84.4, 5812.0], [84.5, 5815.0], [84.6, 5816.0], [84.7, 5822.0], [84.8, 5831.0], [84.9, 5837.0], [85.0, 5840.0], [85.1, 5846.0], [85.2, 5851.0], [85.3, 5859.0], [85.4, 5864.0], [85.5, 5866.0], [85.6, 5871.0], [85.7, 5872.0], [85.8, 5879.0], [85.9, 5882.0], [86.0, 5885.0], [86.1, 5890.0], [86.2, 5899.0], [86.3, 5910.0], [86.4, 5911.0], [86.5, 5911.0], [86.6, 5919.0], [86.7, 5921.0], [86.8, 5926.0], [86.9, 5935.0], [87.0, 5937.0], [87.1, 5942.0], [87.2, 5949.0], [87.3, 5952.0], [87.4, 5965.0], [87.5, 5979.0], [87.6, 5995.0], [87.7, 6001.0], [87.8, 6011.0], [87.9, 6026.0], [88.0, 6035.0], [88.1, 6037.0], [88.2, 6052.0], [88.3, 6061.0], [88.4, 6062.0], [88.5, 6073.0], [88.6, 6073.0], [88.7, 6077.0], [88.8, 6077.0], [88.9, 6078.0], [89.0, 6080.0], [89.1, 6089.0], [89.2, 6092.0], [89.3, 6104.0], [89.4, 6111.0], [89.5, 6119.0], [89.6, 6123.0], [89.7, 6123.0], [89.8, 6128.0], [89.9, 6132.0], [90.0, 6140.0], [90.1, 6146.0], [90.2, 6152.0], [90.3, 6160.0], [90.4, 6186.0], [90.5, 6188.0], [90.6, 6197.0], [90.7, 6201.0], [90.8, 6215.0], [90.9, 6224.0], [91.0, 6241.0], [91.1, 6242.0], [91.2, 6245.0], [91.3, 6253.0], [91.4, 6256.0], [91.5, 6267.0], [91.6, 6275.0], [91.7, 6277.0], [91.8, 6284.0], [91.9, 6290.0], [92.0, 6292.0], [92.1, 6293.0], [92.2, 6296.0], [92.3, 6307.0], [92.4, 6309.0], [92.5, 6312.0], [92.6, 6320.0], [92.7, 6327.0], [92.8, 6330.0], [92.9, 6332.0], [93.0, 6337.0], [93.1, 6343.0], [93.2, 6353.0], [93.3, 6360.0], [93.4, 6371.0], [93.5, 6388.0], [93.6, 6391.0], [93.7, 6398.0], [93.8, 6410.0], [93.9, 6421.0], [94.0, 6422.0], [94.1, 6427.0], [94.2, 6429.0], [94.3, 6440.0], [94.4, 6447.0], [94.5, 6448.0], [94.6, 6455.0], [94.7, 6472.0], [94.8, 6479.0], [94.9, 6479.0], [95.0, 6485.0], [95.1, 6487.0], [95.2, 6495.0], [95.3, 6497.0], [95.4, 6514.0], [95.5, 6519.0], [95.6, 6524.0], [95.7, 6525.0], [95.8, 6533.0], [95.9, 6533.0], [96.0, 6536.0], [96.1, 6536.0], [96.2, 6543.0], [96.3, 6549.0], [96.4, 6555.0], [96.5, 6559.0], [96.6, 6572.0], [96.7, 6584.0], [96.8, 6591.0], [96.9, 6592.0], [97.0, 6602.0], [97.1, 6606.0], [97.2, 6611.0], [97.3, 6615.0], [97.4, 6631.0], [97.5, 6633.0], [97.6, 6641.0], [97.7, 6641.0], [97.8, 6643.0], [97.9, 6647.0], [98.0, 6653.0], [98.1, 6659.0], [98.2, 6671.0], [98.3, 6676.0], [98.4, 6686.0], [98.5, 6687.0], [98.6, 6688.0], [98.7, 6693.0], [98.8, 6696.0], [98.9, 6710.0], [99.0, 6713.0], [99.1, 6719.0], [99.2, 6728.0], [99.3, 6732.0], [99.4, 6738.0], [99.5, 6762.0], [99.6, 6784.0], [99.7, 6845.0], [99.8, 6919.0], [99.9, 6947.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 300.0, "maxY": 77.0, "series": [{"data": [[600.0, 16.0], [700.0, 14.0], [800.0, 8.0], [900.0, 10.0], [1000.0, 3.0], [1100.0, 7.0], [1200.0, 9.0], [1300.0, 8.0], [1400.0, 14.0], [1500.0, 18.0], [1600.0, 18.0], [1700.0, 17.0], [1800.0, 22.0], [1900.0, 17.0], [2000.0, 27.0], [2100.0, 39.0], [2200.0, 32.0], [2300.0, 37.0], [2400.0, 24.0], [2500.0, 17.0], [2600.0, 21.0], [2700.0, 24.0], [2800.0, 26.0], [2900.0, 20.0], [3000.0, 24.0], [3100.0, 27.0], [3200.0, 20.0], [3300.0, 24.0], [3400.0, 23.0], [3500.0, 30.0], [3600.0, 25.0], [3700.0, 26.0], [3800.0, 25.0], [3900.0, 30.0], [4000.0, 37.0], [4200.0, 29.0], [4100.0, 30.0], [4300.0, 21.0], [4400.0, 38.0], [4500.0, 63.0], [4600.0, 56.0], [4700.0, 62.0], [4800.0, 39.0], [4900.0, 40.0], [5000.0, 57.0], [5100.0, 60.0], [5200.0, 54.0], [5300.0, 57.0], [5400.0, 59.0], [5500.0, 77.0], [5600.0, 52.0], [5700.0, 35.0], [5800.0, 40.0], [5900.0, 27.0], [6000.0, 29.0], [6100.0, 27.0], [6200.0, 29.0], [6300.0, 28.0], [6400.0, 31.0], [6500.0, 30.0], [6600.0, 35.0], [6700.0, 15.0], [6800.0, 2.0], [6900.0, 5.0], [300.0, 3.0], [400.0, 4.0], [500.0, 2.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 6900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1777.0, "series": [{"data": [[0.0, 7.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 91.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1777.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 937.9104000000002, "minX": 1.75559022E12, "maxY": 937.9104000000002, "series": [{"data": [[1.75559022E12, 937.9104000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559022E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 567.0, "minX": 1.0, "maxY": 6947.0, "series": [{"data": [[2.0, 5774.0], [3.0, 5748.0], [5.0, 5523.0], [6.0, 5759.0], [7.0, 6228.0], [10.0, 6000.333333333333], [11.0, 5699.0], [12.0, 6738.0], [13.0, 5815.0], [14.0, 5735.0], [16.0, 5534.0], [17.0, 4181.0], [18.0, 5693.0], [19.0, 5806.0], [21.0, 6822.5], [23.0, 5555.5], [25.0, 5835.0], [26.0, 6712.0], [28.0, 5322.5], [30.0, 6196.0], [33.0, 5211.0], [32.0, 5492.5], [34.0, 6947.0], [37.0, 6783.0], [36.0, 5286.0], [39.0, 6713.0], [38.0, 6784.0], [41.0, 4883.0], [43.0, 6698.5], [45.0, 5200.0], [44.0, 5677.0], [47.0, 5734.0], [46.0, 5670.0], [51.0, 5859.0], [50.0, 5502.666666666667], [53.0, 5178.0], [52.0, 6919.0], [55.0, 5243.0], [54.0, 6678.0], [57.0, 5280.0], [56.0, 6160.0], [59.0, 6845.0], [61.0, 5290.0], [60.0, 6806.5], [63.0, 5241.0], [62.0, 6839.0], [67.0, 6632.0], [66.0, 5215.0], [65.0, 4049.0], [64.0, 4854.0], [71.0, 5259.0], [70.0, 6688.0], [69.0, 5258.0], [68.0, 6676.0], [75.0, 5546.0], [74.0, 6127.0], [72.0, 6745.0], [76.0, 6762.0], [83.0, 6735.0], [82.0, 5632.0], [81.0, 5460.2], [87.0, 5974.0], [86.0, 5234.0], [85.0, 6006.5], [91.0, 5600.0], [90.0, 6728.0], [88.0, 5145.0], [95.0, 6653.0], [94.0, 5987.5], [92.0, 6124.0], [99.0, 6714.0], [96.0, 5621.0], [103.0, 5821.666666666667], [100.0, 5325.0], [107.0, 5564.0], [106.0, 5000.0], [104.0, 5210.0], [110.0, 5898.5], [108.0, 5211.0], [115.0, 5800.0], [113.0, 5195.0], [119.0, 5214.0], [118.0, 5580.0], [117.0, 6696.0], [116.0, 6647.0], [123.0, 6525.0], [122.0, 5561.0], [121.0, 5567.0], [127.0, 6077.0], [126.0, 5198.0], [125.0, 5561.0], [124.0, 4034.0], [135.0, 5700.0], [134.0, 5650.0], [132.0, 6686.0], [131.0, 6207.0], [143.0, 6027.5], [141.0, 5666.0], [140.0, 5529.0], [139.0, 5187.0], [138.0, 5866.0], [137.0, 6583.0], [136.0, 5202.0], [150.0, 5810.0], [149.0, 6693.0], [148.0, 5170.0], [147.0, 5081.0], [146.0, 5156.0], [145.0, 6572.0], [144.0, 5533.0], [158.0, 6108.0], [156.0, 6545.0], [155.0, 5133.0], [154.0, 5822.0], [153.0, 5516.0], [152.0, 6628.5], [166.0, 5949.0], [165.0, 6671.0], [164.0, 6165.0], [162.0, 5875.333333333333], [161.0, 5529.0], [175.0, 5470.0], [174.0, 5066.0], [173.0, 6194.75], [169.0, 6536.0], [168.0, 5585.0], [183.0, 5563.5], [181.0, 6283.666666666667], [179.0, 5118.0], [177.0, 5874.0], [176.0, 5512.0], [191.0, 6523.0], [190.0, 5863.0], [189.0, 6279.0], [188.0, 5130.0], [186.0, 5814.0], [184.0, 6643.0], [199.0, 5530.5], [197.0, 5477.0], [196.0, 5139.0], [195.0, 5468.0], [194.0, 6091.666666666667], [206.0, 6055.5], [204.0, 5761.0], [203.0, 5985.5], [202.0, 5103.0], [200.0, 6603.0], [215.0, 6615.0], [214.0, 5079.0], [213.0, 5769.0], [211.0, 6647.5], [209.0, 5453.0], [208.0, 6098.5], [223.0, 6102.5], [222.0, 5088.0], [220.0, 6482.0], [219.0, 5077.0], [218.0, 5005.0], [217.0, 6588.0], [216.0, 4734.0], [230.0, 5609.0], [229.0, 5082.0], [228.0, 6732.0], [227.0, 4676.0], [226.0, 5081.0], [225.0, 5076.0], [224.0, 5855.0], [238.0, 6559.0], [237.0, 6450.0], [236.0, 6472.0], [235.0, 6080.333333333333], [232.0, 6545.0], [247.0, 5610.0], [246.0, 6398.0], [245.0, 6158.0], [243.0, 5722.0], [242.0, 5861.0], [255.0, 6688.0], [254.0, 5941.0], [253.0, 6568.0], [252.0, 5035.0], [250.0, 6479.0], [249.0, 6447.0], [248.0, 5937.0], [268.0, 5401.0], [270.0, 5919.0], [271.0, 5917.0], [269.0, 6606.0], [267.0, 5052.0], [266.0, 5995.333333333333], [263.0, 5043.0], [256.0, 5692.0], [259.0, 6708.0], [258.0, 5784.5], [262.0, 5921.0], [261.0, 6479.0], [260.0, 5401.0], [286.0, 6639.0], [287.0, 6423.0], [285.0, 5372.0], [284.0, 6429.0], [283.0, 5723.0], [282.0, 6533.0], [281.0, 5865.666666666667], [278.0, 5452.5], [275.0, 5800.0], [274.0, 5377.0], [273.0, 5337.0], [276.0, 6388.0], [302.0, 5865.0], [303.0, 4993.0], [301.0, 5936.0], [291.0, 5844.0], [290.0, 4946.0], [289.0, 5692.5], [299.0, 6427.0], [297.0, 6383.0], [296.0, 6360.0], [295.0, 5780.5], [293.0, 5631.0], [292.0, 4991.0], [319.0, 5416.333333333333], [316.0, 5474.0], [307.0, 5536.0], [306.0, 6402.0], [305.0, 5292.0], [304.0, 5772.0], [315.0, 5587.0], [314.0, 5837.0], [313.0, 6354.0], [312.0, 6533.0], [311.0, 5321.0], [310.0, 6455.0], [309.0, 6128.0], [332.0, 5452.0], [334.0, 5553.0], [335.0, 5649.0], [333.0, 6440.0], [331.0, 6188.0], [330.0, 5828.25], [326.0, 6197.0], [321.0, 4874.5], [323.0, 6428.0], [322.0, 6514.0], [325.0, 5476.0], [324.0, 6304.0], [349.0, 5767.0], [351.0, 5941.5], [348.0, 5441.0], [339.0, 6558.0], [338.0, 6307.0], [337.0, 6015.0], [347.0, 5928.5], [345.0, 5472.0], [344.0, 6290.0], [343.0, 5607.0], [342.0, 6370.5], [340.0, 6338.0], [355.0, 5325.0], [366.0, 5560.0], [365.0, 5729.333333333333], [354.0, 6525.0], [353.0, 5521.0], [352.0, 5424.0], [362.0, 5569.0], [361.0, 5591.0], [360.0, 5715.0], [359.0, 6242.0], [358.0, 6294.0], [357.0, 6278.0], [356.0, 4801.0], [383.0, 5399.25], [379.0, 5008.666666666667], [376.0, 5303.0], [375.0, 5720.0], [372.0, 4770.0], [371.0, 6114.0], [370.0, 5503.0], [368.0, 5954.0], [393.0, 4397.0], [392.0, 4980.5], [390.0, 6037.0], [389.0, 5291.0], [387.0, 4729.0], [386.0, 6020.0], [384.0, 6485.0], [415.0, 6315.0], [412.0, 5814.333333333333], [411.0, 6220.0], [408.0, 4343.0], [406.0, 6284.0], [405.0, 5907.0], [403.0, 5468.666666666667], [400.0, 5211.857142857142], [419.0, 5826.5], [431.0, 5940.333333333333], [428.0, 5823.5], [426.0, 5518.0], [425.0, 6312.0], [424.0, 6193.0], [422.0, 5798.0], [421.0, 6330.0], [418.0, 5526.0], [417.0, 5517.0], [416.0, 6089.0], [446.0, 6234.5], [443.0, 6080.0], [442.0, 5687.0], [441.0, 5520.0], [440.0, 5757.666666666667], [438.0, 5819.666666666667], [434.0, 5703.5], [433.0, 6073.0], [461.0, 5514.0], [463.0, 5307.0], [460.0, 6247.5], [456.0, 6312.0], [455.0, 5695.666666666667], [453.0, 5566.0], [452.0, 6161.0], [450.0, 5518.0], [449.0, 5825.0], [478.0, 6277.0], [479.0, 5809.5], [476.0, 6275.0], [475.0, 5475.0], [473.0, 5601.0], [472.0, 5339.75], [468.0, 5454.5], [465.0, 5514.0], [464.0, 6102.25], [493.0, 5586.0], [492.0, 5812.5], [487.0, 6056.0], [485.0, 6109.5], [483.0, 5499.0], [481.0, 6292.0], [510.0, 4708.0], [511.0, 5632.0], [508.0, 4745.0], [506.0, 5258.5], [505.0, 6321.0], [504.0, 6421.0], [501.0, 5317.5], [500.0, 5715.666666666667], [499.0, 5493.0], [498.0, 5822.75], [496.0, 6066.75], [542.0, 4958.5], [543.0, 4607.0], [528.0, 5949.5], [531.0, 4258.0], [530.0, 5525.0], [540.0, 4622.0], [539.0, 4509.0], [538.0, 4705.0], [537.0, 6308.0], [536.0, 6390.0], [518.0, 4723.333333333333], [515.0, 5230.0], [512.0, 4753.0], [526.0, 5623.0], [525.0, 4684.0], [524.0, 6037.0], [523.0, 6353.0], [522.0, 5100.5], [520.0, 5124.0], [535.0, 6152.0], [534.0, 5172.0], [569.0, 5965.0], [574.0, 5253.5], [575.0, 4808.0], [560.0, 3611.0], [562.0, 5167.0], [561.0, 5505.0], [564.0, 5287.0], [563.0, 4626.0], [572.0, 5359.0], [571.0, 4548.0], [570.0, 4588.0], [568.0, 6293.0], [551.0, 4662.0], [550.0, 5488.0], [549.0, 5149.0], [548.0, 5424.0], [547.0, 6277.0], [545.0, 4685.0], [544.0, 5444.0], [559.0, 5374.0], [558.0, 5500.0], [557.0, 4576.0], [556.0, 3603.0], [555.0, 6243.0], [554.0, 4655.0], [553.0, 4591.0], [552.0, 6120.0], [567.0, 4745.0], [565.0, 5383.0], [602.0, 4486.0], [593.0, 6242.0], [605.0, 5323.0], [606.0, 6215.0], [592.0, 5380.0], [604.0, 5785.0], [601.0, 5311.5], [583.0, 5087.0], [582.0, 4255.0], [581.0, 4541.0], [580.0, 5603.5], [578.0, 4534.0], [577.0, 4579.0], [576.0, 5348.0], [590.0, 5662.0], [589.0, 5103.0], [586.0, 4559.0], [585.0, 5139.0], [584.0, 5326.0], [599.0, 6111.0], [598.0, 5010.0], [597.0, 5864.0], [638.0, 5041.0], [639.0, 4512.0], [624.0, 5413.0], [626.0, 6013.0], [625.0, 5632.0], [637.0, 5381.0], [635.0, 5753.0], [634.0, 4760.0], [632.0, 3483.0], [619.0, 5302.0], [610.0, 5666.0], [612.0, 6220.0], [611.0, 5995.0], [618.0, 5721.0], [616.0, 4997.75], [631.0, 5396.0], [630.0, 5272.0], [629.0, 5748.0], [627.0, 5404.333333333333], [664.0, 4933.0], [669.0, 6090.0], [671.0, 6132.0], [657.0, 5177.0], [656.0, 5837.0], [659.0, 4435.0], [658.0, 4495.0], [668.0, 5260.0], [667.0, 5252.0], [666.0, 5183.0], [655.0, 4027.0], [641.0, 5785.5], [643.0, 4499.0], [642.0, 4978.0], [645.0, 5055.0], [644.0, 6061.0], [647.0, 6185.0], [646.0, 5822.0], [654.0, 6062.0], [653.0, 4998.5], [651.0, 4499.0], [650.0, 4445.0], [649.0, 4418.0], [648.0, 4479.0], [663.0, 5017.0], [662.0, 5759.0], [661.0, 5846.0], [660.0, 5372.0], [701.0, 4947.0], [692.0, 4617.0], [703.0, 5476.0], [688.0, 4400.0], [691.0, 4423.0], [690.0, 5551.0], [700.0, 5027.0], [698.0, 5164.5], [696.0, 6084.0], [679.0, 5681.0], [678.0, 5471.25], [675.0, 5554.5], [672.0, 5879.0], [686.0, 5883.0], [685.0, 5926.0], [684.0, 5173.0], [683.0, 4441.0], [682.0, 5191.0], [681.0, 5897.0], [680.0, 3528.0], [695.0, 4623.0], [694.0, 5182.0], [693.0, 6105.0], [729.0, 5791.0], [733.0, 5012.0], [734.0, 4787.0], [721.0, 4311.0], [720.0, 5840.0], [723.0, 5801.0], [722.0, 5108.0], [725.0, 3817.0], [724.0, 4237.0], [732.0, 5771.0], [731.0, 5574.0], [730.0, 5033.0], [728.0, 5661.0], [711.0, 5017.5], [709.0, 5163.0], [707.0, 5879.0], [706.0, 4836.0], [705.0, 5707.0], [704.0, 4958.0], [719.0, 4360.0], [718.0, 4956.5], [716.0, 5682.0], [715.0, 5195.0], [714.0, 5252.0], [713.0, 5911.0], [712.0, 5196.0], [727.0, 5831.0], [726.0, 5182.0], [755.0, 5132.5], [766.0, 4811.5], [764.0, 4771.0], [763.0, 4845.0], [743.0, 5266.0], [741.0, 4992.0], [740.0, 4978.0], [739.0, 4775.0], [737.0, 5935.0], [736.0, 4629.5], [751.0, 5009.0], [748.0, 5642.0], [747.0, 4890.0], [746.0, 5478.0], [745.0, 4806.0], [744.0, 4770.0], [759.0, 5868.0], [758.0, 5515.0], [756.0, 5039.0], [753.0, 5486.0], [752.0, 5075.0], [797.0, 5050.0], [799.0, 4669.333333333333], [795.0, 4150.0], [794.0, 4911.0], [793.0, 4721.0], [792.0, 4427.5], [783.0, 5076.0], [773.0, 5621.0], [772.0, 5174.166666666667], [775.0, 5414.0], [774.0, 5086.0], [782.0, 4188.0], [781.0, 4743.0], [780.0, 4743.0], [779.0, 5184.333333333333], [777.0, 5485.0], [790.0, 5081.5], [789.0, 4414.5], [786.0, 5089.0], [785.0, 4684.0], [824.0, 4453.5], [829.0, 5387.0], [831.0, 4915.0], [818.0, 4624.0], [817.0, 4467.0], [828.0, 4849.0], [827.0, 5405.0], [826.0, 5176.5], [815.0, 4756.0], [800.0, 5462.0], [802.0, 4922.0], [801.0, 4629.0], [805.0, 5082.5], [803.0, 4600.0], [807.0, 5692.0], [806.0, 5681.0], [813.0, 4122.0], [812.0, 4625.0], [811.0, 5657.0], [810.0, 4857.0], [809.0, 5337.0], [808.0, 5803.0], [822.0, 4900.0], [821.0, 4850.0], [820.0, 5608.0], [819.0, 4624.0], [861.0, 5405.0], [863.0, 4732.0], [860.0, 5365.0], [859.0, 4601.0], [858.0, 5300.0], [856.0, 5035.0], [846.0, 5108.0], [832.0, 4698.0], [836.0, 5015.5], [834.0, 4898.0], [839.0, 4671.0], [837.0, 4722.5], [843.0, 4568.0], [842.0, 5452.0], [841.0, 4549.5], [852.0, 5391.0], [851.0, 5373.0], [849.0, 4569.0], [848.0, 4585.0], [893.0, 4532.0], [884.0, 4828.0], [895.0, 4895.0], [881.0, 4841.0], [880.0, 4741.0], [883.0, 4451.0], [882.0, 4828.0], [891.0, 4766.0], [890.0, 4040.5], [889.0, 4647.0], [870.0, 5491.0], [869.0, 5608.0], [867.0, 4531.0], [866.0, 5538.0], [865.0, 5576.0], [864.0, 5344.0], [879.0, 4579.0], [878.0, 5522.0], [877.0, 4778.0], [876.0, 4517.0], [875.0, 4867.0], [874.0, 5610.0], [873.0, 4552.5], [872.0, 5352.0], [887.0, 4746.0], [886.0, 4553.0], [885.0, 4748.0], [903.0, 4484.0], [914.0, 5047.0], [927.0, 5019.571428571428], [924.0, 5342.0], [923.0, 4765.0], [902.0, 4785.0], [901.0, 4803.0], [900.0, 5229.0], [899.0, 4733.0], [898.0, 4788.0], [897.0, 4633.0], [896.0, 5309.0], [910.0, 4716.0], [909.0, 4422.0], [908.0, 4475.0], [907.0, 4489.0], [906.0, 5410.0], [905.0, 4423.0], [904.0, 4798.0], [919.0, 4796.0], [916.0, 5424.0], [915.0, 5322.0], [913.0, 5271.0], [912.0, 3528.0], [957.0, 4954.5], [948.0, 4682.0], [959.0, 4118.5], [945.0, 5016.0], [947.0, 4642.0], [946.0, 5379.0], [954.0, 5346.0], [953.0, 3600.0], [952.0, 4539.0], [935.0, 5213.0], [934.0, 4735.0], [933.0, 5127.5], [931.0, 4747.0], [930.0, 3643.0], [929.0, 4636.0], [928.0, 4744.0], [942.0, 4683.5], [940.0, 4710.0], [939.0, 4731.0], [938.0, 4713.0], [937.0, 4732.0], [936.0, 4447.0], [951.0, 2791.0], [950.0, 5427.0], [949.0, 4681.0], [988.0, 4433.0], [980.0, 5338.0], [991.0, 4611.6], [977.0, 4572.0], [976.0, 5510.0], [985.0, 4611.5], [967.0, 4605.0], [965.0, 4662.0], [964.0, 5100.0], [963.0, 4405.0], [961.0, 4677.0], [975.0, 4372.0], [974.0, 4636.0], [971.0, 4959.5], [969.0, 5508.0], [968.0, 5470.0], [983.0, 4555.0], [982.0, 4558.0], [981.0, 4559.0], [979.0, 4340.5], [978.0, 4323.0], [1021.0, 4609.0], [1023.0, 4342.5], [1020.0, 5254.0], [1018.0, 4540.0], [1017.0, 5036.0], [1016.0, 5142.0], [1007.0, 3356.0], [992.0, 5242.0], [995.0, 4811.5], [993.0, 4564.0], [997.0, 4574.0], [996.0, 3747.0], [1006.0, 4842.5], [1004.0, 4693.666666666667], [1001.0, 4723.0], [1014.0, 4877.5], [1012.0, 5233.0], [1011.0, 4432.0], [1010.0, 4799.0], [1082.0, 3965.0], [1056.0, 3350.0], [1058.0, 4512.0], [1060.0, 3329.0], [1064.0, 5067.0], [1066.0, 4995.0], [1068.0, 3602.0], [1086.0, 4286.5], [1084.0, 2275.0], [1080.0, 5119.0], [1078.0, 5132.0], [1076.0, 4051.0], [1074.0, 3583.0], [1072.0, 5176.0], [1024.0, 4537.0], [1026.0, 3728.0], [1030.0, 4776.5], [1028.0, 5417.0], [1032.0, 3698.0], [1036.0, 4694.0], [1038.0, 4249.0], [1054.0, 4238.0], [1052.0, 4813.333333333333], [1046.0, 3701.0], [1044.0, 5157.0], [1040.0, 4243.0], [1146.0, 4613.0], [1128.0, 2936.0], [1120.0, 3998.0], [1122.0, 2900.0], [1124.0, 2947.0], [1126.0, 3099.0], [1130.0, 3952.0], [1132.0, 4239.0], [1134.0, 3883.0], [1150.0, 4170.0], [1144.0, 3916.0], [1136.0, 3870.0], [1088.0, 5197.0], [1090.0, 3446.0], [1094.0, 4158.5], [1092.0, 4342.0], [1096.0, 3396.0], [1098.0, 3006.0], [1102.0, 3981.0], [1118.0, 3455.5], [1116.0, 4978.0], [1114.0, 2201.0], [1112.0, 2612.0], [1110.0, 4269.0], [1108.0, 3843.0], [1206.0, 4039.0], [1190.0, 4034.0], [1184.0, 3954.0], [1186.0, 4071.0], [1188.0, 4032.0], [1194.0, 4087.0], [1196.0, 4023.0], [1198.0, 4005.0], [1214.0, 3179.0], [1210.0, 4028.0], [1202.0, 3993.0], [1200.0, 3993.0], [1166.0, 4712.0], [1164.0, 4472.5], [1162.0, 4025.0], [1160.0, 4066.5], [1156.0, 3959.0], [1182.0, 4559.5], [1180.0, 4233.0], [1178.0, 4902.0], [1176.0, 4464.0], [1174.0, 3873.0], [1172.0, 4202.0], [1170.0, 4578.0], [1270.0, 3835.0], [1276.0, 4272.0], [1250.0, 3584.0], [1254.0, 3543.0], [1252.0, 3597.0], [1256.0, 3865.0], [1258.0, 3574.0], [1262.0, 3630.0], [1278.0, 3467.0], [1274.0, 3564.0], [1268.0, 4035.6666666666665], [1266.0, 4539.0], [1230.0, 3984.0], [1228.0, 3527.5], [1226.0, 3986.0], [1224.0, 4672.0], [1222.0, 3723.0], [1220.0, 4022.0], [1216.0, 4082.0], [1246.0, 4157.0], [1244.0, 3847.0], [1242.0, 3804.0], [1240.0, 3939.0], [1238.0, 3945.0], [1236.0, 4861.0], [1232.0, 3958.0], [1336.0, 4094.0], [1332.0, 3057.0], [1340.0, 2088.0], [1312.0, 4192.0], [1314.0, 4068.0], [1316.0, 3596.0], [1320.0, 1735.0], [1322.0, 3605.0], [1324.0, 3252.0], [1326.0, 2669.0], [1342.0, 3905.0], [1338.0, 2993.0], [1334.0, 2620.0], [1330.0, 3871.0], [1328.0, 4270.0], [1280.0, 3437.0], [1282.0, 3612.0], [1284.0, 3392.0], [1294.0, 3592.8749999999995], [1286.0, 3374.0], [1310.0, 3646.0], [1308.0, 3680.0], [1306.0, 3674.0], [1302.0, 3414.0], [1298.0, 3721.0], [1296.0, 3950.0], [1404.0, 3555.0], [1376.0, 4046.0], [1380.0, 3215.0], [1378.0, 2191.0], [1382.0, 3146.0], [1384.0, 3723.0], [1386.0, 3605.0], [1388.0, 3101.0], [1390.0, 3310.5], [1406.0, 2284.0], [1398.0, 3071.0], [1396.0, 3011.5], [1394.0, 3235.5], [1358.0, 3755.0], [1356.0, 3994.0], [1354.0, 3258.0], [1348.0, 1440.0], [1346.0, 2383.0], [1374.0, 2930.0], [1372.0, 3170.0], [1370.0, 3121.0], [1368.0, 3201.0], [1366.0, 2863.0], [1364.0, 3260.0], [1360.0, 2865.0], [1466.0, 756.0], [1440.0, 3776.0], [1442.0, 2965.0], [1444.0, 3355.0], [1446.0, 2842.0], [1448.0, 1283.5], [1450.0, 1576.0], [1454.0, 3739.0], [1470.0, 1774.5], [1468.0, 3663.0], [1464.0, 1224.5], [1462.0, 1207.6666666666667], [1456.0, 2768.0], [1422.0, 2957.3333333333335], [1418.0, 2636.0], [1416.0, 2910.0], [1414.0, 3363.0], [1412.0, 2282.0], [1410.0, 3753.0], [1408.0, 3161.0], [1436.0, 1664.0], [1434.0, 2092.0], [1432.0, 3803.0], [1430.0, 2261.5], [1428.0, 3810.0], [1426.0, 2142.0], [1530.0, 2437.0], [1522.0, 3486.0], [1504.0, 627.0], [1506.0, 3141.0], [1508.0, 2640.0], [1510.0, 619.0], [1512.0, 3317.0], [1514.0, 2718.0], [1516.0, 3508.0], [1518.0, 2695.0], [1534.0, 3197.0], [1528.0, 3018.5], [1526.0, 2949.5], [1524.0, 3498.0], [1520.0, 567.0], [1472.0, 748.0], [1474.0, 1831.0], [1480.0, 3195.0], [1482.0, 687.0], [1484.0, 710.0], [1486.0, 3611.0], [1502.0, 3458.0], [1500.0, 3562.0], [1494.0, 643.0], [1492.0, 2740.0], [1490.0, 655.0], [1488.0, 671.0], [1590.0, 2386.0], [1572.0, 1488.0], [1594.0, 3193.5], [1598.0, 3093.0], [1570.0, 3151.0], [1574.0, 1685.5], [1576.0, 3077.0], [1578.0, 1656.0], [1596.0, 2319.0], [1592.0, 2389.0], [1588.0, 2283.3333333333335], [1548.0, 3004.0], [1546.0, 3011.0], [1540.0, 2507.0], [1538.0, 3219.0], [1536.0, 2650.0], [1566.0, 2969.0], [1560.0, 2044.5], [1554.0, 2312.0], [1552.0, 2476.0], [1558.0, 1512.0], [1654.0, 2887.0], [1638.0, 2962.0], [1658.0, 2215.0], [1632.0, 2109.0], [1636.0, 2248.0], [1644.0, 2172.0], [1646.0, 2308.0], [1662.0, 2346.0], [1660.0, 2125.0], [1650.0, 3136.0], [1648.0, 2198.0], [1610.0, 1175.0], [1608.0, 2388.0], [1606.0, 2027.3333333333335], [1630.0, 2416.0], [1628.0, 2265.0], [1626.0, 2697.0], [1624.0, 3122.0], [1622.0, 2127.3333333333335], [1618.0, 2329.0], [1720.0, 2756.5], [1696.0, 2169.0], [1700.0, 2168.3333333333335], [1702.0, 2884.0], [1706.0, 2803.0], [1708.0, 2504.0], [1718.0, 2738.0], [1714.0, 2137.0], [1694.0, 2271.0], [1666.0, 2059.0], [1668.0, 2883.0], [1672.0, 2840.0], [1674.0, 2176.0], [1676.0, 2169.0], [1690.0, 2663.0], [1688.0, 2285.0], [1686.0, 1951.0], [1684.0, 2137.0], [1682.0, 2888.0], [1680.0, 2203.0], [1776.0, 2394.0], [1746.0, 1199.5], [1744.0, 1903.0], [1758.0, 1553.0], [1756.0, 2242.5], [1754.0, 2469.0], [1752.0, 1879.0], [1750.0, 2570.0], [1748.0, 2571.0], [1788.0, 1612.3333333333333], [1760.0, 1606.0], [1762.0, 1943.0], [1764.0, 1619.0], [1766.0, 2430.0], [1768.0, 1667.0], [1770.0, 1974.5], [1772.0, 2482.0], [1774.0, 2518.0], [1790.0, 1418.0], [1786.0, 1824.5], [1784.0, 2299.0], [1778.0, 1615.0], [1742.0, 2687.0], [1740.0, 1813.0], [1736.0, 2760.0], [1734.0, 1822.0], [1732.0, 2044.0], [1730.0, 2670.0], [1728.0, 1869.0], [1802.0, 2107.0], [1824.0, 1117.5], [1828.0, 1381.5], [1816.0, 1638.5], [1814.0, 1388.0], [1812.0, 1530.0], [1810.0, 1230.0], [1808.0, 1296.0], [1804.0, 1431.0], [1800.0, 1294.0], [1798.0, 2152.0], [1796.0, 1309.0], [1794.0, 1411.0], [1822.0, 1687.0], [1820.0, 873.0], [1830.0, 1717.0], [1826.0, 1265.875], [1081.0, 4351.0], [1083.0, 5176.0], [1087.0, 4830.0], [1057.0, 5247.0], [1059.0, 4206.0], [1061.0, 5337.0], [1063.0, 5048.0], [1065.0, 5315.0], [1067.0, 5227.0], [1071.0, 3811.0], [1069.0, 4409.0], [1079.0, 3230.0], [1077.0, 4215.5], [1073.0, 2579.0], [1055.0, 5050.0], [1025.0, 3724.0], [1027.0, 3202.0], [1031.0, 4950.0], [1035.0, 3315.0], [1033.0, 4518.0], [1037.0, 4458.0], [1039.0, 4574.0], [1053.0, 5388.0], [1049.0, 4644.0], [1045.0, 4490.0], [1043.0, 4632.0], [1041.0, 4952.0], [1147.0, 4454.5], [1151.0, 4141.5], [1121.0, 2914.0], [1123.0, 2954.0], [1125.0, 2893.0], [1127.0, 3097.0], [1129.0, 2938.0], [1131.0, 3783.0], [1133.0, 3845.0], [1135.0, 3769.0], [1143.0, 4001.0], [1141.0, 4105.0], [1139.0, 4379.5], [1137.0, 3833.0], [1119.0, 5023.0], [1091.0, 4301.0], [1097.0, 3454.0], [1099.0, 2582.0], [1101.0, 4267.0], [1115.0, 4976.0], [1113.0, 3137.0], [1111.0, 4257.0], [1109.0, 3481.0], [1105.0, 4497.0], [1205.0, 4479.5], [1211.0, 3969.0], [1215.0, 4533.0], [1185.0, 3888.0], [1187.0, 4031.0], [1189.0, 4040.0], [1191.0, 4021.0], [1193.0, 4805.0], [1197.0, 3770.0], [1199.0, 4009.0], [1213.0, 4026.0], [1209.0, 3941.3333333333335], [1203.0, 3979.0], [1167.0, 4697.0], [1165.0, 4057.0], [1159.0, 4146.0], [1157.0, 4088.0], [1155.0, 4146.0], [1153.0, 4886.5], [1177.0, 4693.0], [1173.0, 4800.0], [1171.0, 4636.0], [1169.0, 3965.0], [1269.0, 3533.0], [1279.0, 4455.0], [1249.0, 4646.5], [1255.0, 4336.0], [1257.0, 3540.0], [1261.0, 4391.0], [1277.0, 3435.0], [1275.0, 3812.0], [1273.0, 2567.0], [1271.0, 3511.0], [1265.0, 4078.5], [1231.0, 3965.0], [1229.0, 3679.0], [1225.0, 3979.0], [1223.0, 4874.0], [1221.0, 3760.0], [1217.0, 4865.0], [1247.0, 3584.0], [1243.0, 4606.0], [1237.0, 2984.0], [1235.0, 4346.0], [1233.0, 3718.0], [1341.0, 1469.0], [1343.0, 2358.0], [1313.0, 3568.0], [1315.0, 4486.0], [1319.0, 3442.0], [1317.0, 3342.0], [1321.0, 3629.0], [1323.0, 1700.0], [1325.0, 3568.0], [1327.0, 3511.0], [1339.0, 3044.0], [1337.0, 3143.0], [1335.0, 1521.0], [1333.0, 3441.0], [1331.0, 3476.0], [1329.0, 3473.0], [1311.0, 1793.0], [1281.0, 3758.0], [1283.0, 3391.0], [1285.0, 3390.0], [1309.0, 3662.0], [1307.0, 4514.0], [1305.0, 3689.0], [1303.0, 3503.0], [1301.0, 3302.0], [1299.0, 4136.0], [1297.0, 3342.0], [1403.0, 3165.0], [1397.0, 3026.0], [1383.0, 2785.0], [1407.0, 3163.0], [1377.0, 3630.0], [1381.0, 3148.0], [1385.0, 1305.0], [1387.0, 3135.0], [1391.0, 3800.0], [1405.0, 2848.0], [1401.0, 3061.0], [1393.0, 3086.0], [1357.0, 2349.0], [1355.0, 2985.6666666666665], [1351.0, 2586.3333333333335], [1347.0, 2467.0], [1345.0, 2429.5], [1375.0, 2806.0], [1373.0, 2774.0], [1371.0, 3880.0], [1369.0, 2889.0], [1367.0, 2269.0], [1365.0, 1980.0], [1363.0, 3271.0], [1361.0, 2003.0], [1465.0, 1951.0], [1445.0, 2808.0], [1467.0, 1854.0], [1471.0, 771.0], [1441.0, 1919.0], [1443.0, 831.0], [1449.0, 1931.0], [1451.0, 3720.0], [1453.0, 804.0], [1459.0, 1921.5], [1457.0, 1322.5], [1423.0, 1762.0], [1419.0, 3433.0], [1409.0, 3155.0], [1439.0, 2267.0], [1437.0, 3788.0], [1435.0, 1641.0], [1433.0, 1967.0], [1431.0, 1615.0], [1427.0, 1868.0], [1425.0, 2444.5], [1531.0, 1471.0], [1535.0, 3228.0], [1505.0, 634.0], [1507.0, 2752.0], [1509.0, 600.0], [1511.0, 605.0], [1513.0, 2726.0], [1515.0, 2611.0], [1519.0, 2699.0], [1533.0, 3381.5], [1529.0, 2517.0], [1527.0, 3293.0], [1523.0, 2563.0], [1521.0, 2691.0], [1503.0, 2103.0], [1473.0, 765.0], [1479.0, 1541.0], [1481.0, 710.0], [1483.0, 3560.0], [1485.0, 679.0], [1487.0, 671.0], [1499.0, 3524.0], [1497.0, 1475.5], [1495.0, 2780.0], [1493.0, 3376.0], [1489.0, 673.0], [1585.0, 2264.3333333333335], [1569.0, 2761.5], [1571.0, 2447.0], [1575.0, 2048.0], [1577.0, 1540.0], [1583.0, 2359.3333333333335], [1579.0, 2424.0], [1595.0, 2372.0], [1589.0, 1995.0], [1551.0, 3404.0], [1545.0, 2358.0], [1543.0, 2604.0], [1541.0, 2295.0], [1539.0, 2401.0], [1537.0, 3307.0], [1567.0, 2429.0], [1565.0, 1695.0], [1563.0, 3118.5], [1561.0, 2660.6666666666665], [1557.0, 2292.5], [1657.0, 2449.6666666666665], [1663.0, 2057.0], [1635.0, 2210.5], [1633.0, 2951.0], [1637.0, 2419.0], [1639.0, 3029.0], [1643.0, 2643.0], [1641.0, 2538.5], [1645.0, 3000.0], [1647.0, 2031.0], [1653.0, 2223.5], [1651.0, 2084.0], [1649.0, 2371.0], [1613.0, 2158.3333333333335], [1609.0, 2278.0], [1603.0, 2843.5], [1601.0, 2909.3333333333335], [1631.0, 2287.0], [1629.0, 2154.0], [1627.0, 2109.0], [1623.0, 2331.0], [1619.0, 2257.0], [1617.0, 3295.0], [1717.0, 2723.5], [1721.0, 2353.6666666666665], [1727.0, 2727.5], [1697.0, 2803.0], [1703.0, 2342.5], [1705.0, 1853.0], [1709.0, 2160.0], [1725.0, 2677.0], [1723.0, 2439.5], [1715.0, 2086.0], [1713.0, 2161.75], [1665.0, 2141.5], [1667.0, 2669.0], [1669.0, 2895.0], [1671.0, 2600.0], [1673.0, 2039.0], [1679.0, 2554.75], [1693.0, 2774.0], [1691.0, 2184.0], [1687.0, 2814.0], [1685.0, 2297.0], [1683.0, 1978.0], [1681.0, 2198.0], [1783.0, 1680.75], [1787.0, 2192.0], [1759.0, 771.0], [1745.0, 885.0], [1757.0, 1710.0], [1753.0, 1870.0], [1751.0, 1895.0], [1747.0, 2412.0], [1791.0, 1658.0], [1761.0, 2755.0], [1763.0, 1716.0], [1765.0, 1922.0], [1767.0, 2060.0], [1771.0, 1631.0], [1773.0, 2466.0], [1775.0, 1498.0], [1779.0, 1196.0], [1777.0, 2292.0], [1741.0, 2291.0], [1739.0, 2367.0], [1737.0, 2665.0], [1735.0, 1911.0], [1731.0, 2039.0], [1729.0, 1872.0], [1823.0, 1092.25], [1817.0, 1656.0], [1813.0, 1240.0], [1811.0, 2077.0], [1809.0, 1563.0], [1807.0, 2093.5], [1805.0, 2119.0], [1803.0, 1563.0], [1801.0, 1283.0], [1799.0, 2135.0], [1797.0, 2153.0], [1795.0, 2157.0], [1793.0, 2213.5], [1825.0, 1352.2857142857142], [1821.0, 1712.0], [1819.0, 1822.6666666666667], [1831.0, 1166.0], [1833.0, 1090.8], [1835.0, 1048.0], [1829.0, 1121.75], [1827.0, 1444.5], [1.0, 5406.0]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}, {"data": [[937.8986666666664, 4263.777066666663]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1835.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14125.0, "minX": 1.75559022E12, "maxY": 181062.5, "series": [{"data": [[1.75559022E12, 181062.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75559022E12, 14125.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559022E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4263.777066666663, "minX": 1.75559022E12, "maxY": 4263.777066666663, "series": [{"data": [[1.75559022E12, 4263.777066666663]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559022E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4263.746666666668, "minX": 1.75559022E12, "maxY": 4263.746666666668, "series": [{"data": [[1.75559022E12, 4263.746666666668]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559022E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3626.9237333333326, "minX": 1.75559022E12, "maxY": 3626.9237333333326, "series": [{"data": [[1.75559022E12, 3626.9237333333326]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559022E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 337.0, "minX": 1.75559022E12, "maxY": 6988.0, "series": [{"data": [[1.75559022E12, 6988.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75559022E12, 6141.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75559022E12, 6713.24]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75559022E12, 6485.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75559022E12, 337.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75559022E12, 4609.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559022E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1431.0, "minX": 101.0, "maxY": 5748.0, "series": [{"data": [[284.0, 2385.5], [613.0, 5341.0], [321.0, 5748.0], [360.0, 4238.5], [196.0, 3010.0], [101.0, 1431.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 613.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1431.0, "minX": 101.0, "maxY": 5748.0, "series": [{"data": [[284.0, 2385.5], [613.0, 5341.0], [321.0, 5748.0], [360.0, 4238.5], [196.0, 3010.0], [101.0, 1431.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 613.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559022E12, "maxY": 31.25, "series": [{"data": [[1.75559022E12, 31.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559022E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559022E12, "maxY": 31.25, "series": [{"data": [[1.75559022E12, 31.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559022E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559022E12, "maxY": 31.25, "series": [{"data": [[1.75559022E12, 31.25]], "isOverall": false, "label": "ดึงข้อมูล Visit ทั้งหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559022E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75559022E12, "maxY": 31.25, "series": [{"data": [[1.75559022E12, 31.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559022E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

