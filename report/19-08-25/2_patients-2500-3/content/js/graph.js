/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1864.0, "minX": 0.0, "maxY": 8863.0, "series": [{"data": [[0.0, 1864.0], [0.1, 1972.0], [0.2, 2026.0], [0.3, 2066.0], [0.4, 2316.0], [0.5, 2454.0], [0.6, 2473.0], [0.7, 2498.0], [0.8, 2516.0], [0.9, 2534.0], [1.0, 2542.0], [1.1, 2555.0], [1.2, 2557.0], [1.3, 2565.0], [1.4, 2580.0], [1.5, 2598.0], [1.6, 2624.0], [1.7, 2639.0], [1.8, 2640.0], [1.9, 2650.0], [2.0, 2667.0], [2.1, 2685.0], [2.2, 2687.0], [2.3, 2690.0], [2.4, 2695.0], [2.5, 2701.0], [2.6, 2704.0], [2.7, 2709.0], [2.8, 2713.0], [2.9, 2719.0], [3.0, 2723.0], [3.1, 2728.0], [3.2, 2737.0], [3.3, 2748.0], [3.4, 2759.0], [3.5, 2764.0], [3.6, 2774.0], [3.7, 2780.0], [3.8, 2784.0], [3.9, 2795.0], [4.0, 2799.0], [4.1, 2807.0], [4.2, 2808.0], [4.3, 2813.0], [4.4, 2828.0], [4.5, 2842.0], [4.6, 2854.0], [4.7, 2861.0], [4.8, 2869.0], [4.9, 2875.0], [5.0, 2877.0], [5.1, 2885.0], [5.2, 2889.0], [5.3, 2904.0], [5.4, 2910.0], [5.5, 2922.0], [5.6, 2925.0], [5.7, 2929.0], [5.8, 2932.0], [5.9, 2938.0], [6.0, 2953.0], [6.1, 2961.0], [6.2, 2970.0], [6.3, 2972.0], [6.4, 2973.0], [6.5, 2981.0], [6.6, 2984.0], [6.7, 2988.0], [6.8, 2995.0], [6.9, 2997.0], [7.0, 3012.0], [7.1, 3015.0], [7.2, 3019.0], [7.3, 3026.0], [7.4, 3036.0], [7.5, 3038.0], [7.6, 3044.0], [7.7, 3067.0], [7.8, 3086.0], [7.9, 3089.0], [8.0, 3093.0], [8.1, 3096.0], [8.2, 3099.0], [8.3, 3105.0], [8.4, 3111.0], [8.5, 3135.0], [8.6, 3137.0], [8.7, 3145.0], [8.8, 3158.0], [8.9, 3169.0], [9.0, 3173.0], [9.1, 3177.0], [9.2, 3186.0], [9.3, 3191.0], [9.4, 3195.0], [9.5, 3200.0], [9.6, 3211.0], [9.7, 3217.0], [9.8, 3220.0], [9.9, 3224.0], [10.0, 3227.0], [10.1, 3229.0], [10.2, 3235.0], [10.3, 3239.0], [10.4, 3243.0], [10.5, 3244.0], [10.6, 3247.0], [10.7, 3259.0], [10.8, 3267.0], [10.9, 3272.0], [11.0, 3284.0], [11.1, 3287.0], [11.2, 3296.0], [11.3, 3300.0], [11.4, 3305.0], [11.5, 3308.0], [11.6, 3343.0], [11.7, 3353.0], [11.8, 3359.0], [11.9, 3362.0], [12.0, 3378.0], [12.1, 3380.0], [12.2, 3392.0], [12.3, 3400.0], [12.4, 3405.0], [12.5, 3407.0], [12.6, 3418.0], [12.7, 3433.0], [12.8, 3439.0], [12.9, 3445.0], [13.0, 3464.0], [13.1, 3468.0], [13.2, 3478.0], [13.3, 3483.0], [13.4, 3489.0], [13.5, 3491.0], [13.6, 3504.0], [13.7, 3508.0], [13.8, 3519.0], [13.9, 3523.0], [14.0, 3529.0], [14.1, 3548.0], [14.2, 3563.0], [14.3, 3569.0], [14.4, 3574.0], [14.5, 3580.0], [14.6, 3595.0], [14.7, 3604.0], [14.8, 3613.0], [14.9, 3615.0], [15.0, 3624.0], [15.1, 3629.0], [15.2, 3640.0], [15.3, 3646.0], [15.4, 3659.0], [15.5, 3660.0], [15.6, 3671.0], [15.7, 3682.0], [15.8, 3685.0], [15.9, 3689.0], [16.0, 3699.0], [16.1, 3708.0], [16.2, 3712.0], [16.3, 3714.0], [16.4, 3717.0], [16.5, 3722.0], [16.6, 3730.0], [16.7, 3734.0], [16.8, 3754.0], [16.9, 3755.0], [17.0, 3760.0], [17.1, 3761.0], [17.2, 3772.0], [17.3, 3777.0], [17.4, 3788.0], [17.5, 3795.0], [17.6, 3809.0], [17.7, 3811.0], [17.8, 3818.0], [17.9, 3822.0], [18.0, 3847.0], [18.1, 3853.0], [18.2, 3866.0], [18.3, 3878.0], [18.4, 3881.0], [18.5, 3887.0], [18.6, 3902.0], [18.7, 3910.0], [18.8, 3920.0], [18.9, 3925.0], [19.0, 3934.0], [19.1, 3935.0], [19.2, 3947.0], [19.3, 3948.0], [19.4, 3958.0], [19.5, 3961.0], [19.6, 3974.0], [19.7, 3977.0], [19.8, 3988.0], [19.9, 3990.0], [20.0, 3993.0], [20.1, 4001.0], [20.2, 4005.0], [20.3, 4008.0], [20.4, 4021.0], [20.5, 4025.0], [20.6, 4035.0], [20.7, 4044.0], [20.8, 4050.0], [20.9, 4054.0], [21.0, 4057.0], [21.1, 4060.0], [21.2, 4070.0], [21.3, 4075.0], [21.4, 4098.0], [21.5, 4101.0], [21.6, 4106.0], [21.7, 4107.0], [21.8, 4121.0], [21.9, 4123.0], [22.0, 4136.0], [22.1, 4140.0], [22.2, 4142.0], [22.3, 4145.0], [22.4, 4157.0], [22.5, 4170.0], [22.6, 4183.0], [22.7, 4188.0], [22.8, 4195.0], [22.9, 4198.0], [23.0, 4200.0], [23.1, 4204.0], [23.2, 4212.0], [23.3, 4225.0], [23.4, 4227.0], [23.5, 4228.0], [23.6, 4245.0], [23.7, 4248.0], [23.8, 4256.0], [23.9, 4261.0], [24.0, 4273.0], [24.1, 4278.0], [24.2, 4280.0], [24.3, 4291.0], [24.4, 4297.0], [24.5, 4301.0], [24.6, 4309.0], [24.7, 4310.0], [24.8, 4315.0], [24.9, 4318.0], [25.0, 4323.0], [25.1, 4324.0], [25.2, 4336.0], [25.3, 4338.0], [25.4, 4347.0], [25.5, 4352.0], [25.6, 4356.0], [25.7, 4362.0], [25.8, 4369.0], [25.9, 4375.0], [26.0, 4394.0], [26.1, 4395.0], [26.2, 4399.0], [26.3, 4405.0], [26.4, 4407.0], [26.5, 4409.0], [26.6, 4417.0], [26.7, 4422.0], [26.8, 4429.0], [26.9, 4433.0], [27.0, 4439.0], [27.1, 4463.0], [27.2, 4464.0], [27.3, 4467.0], [27.4, 4472.0], [27.5, 4474.0], [27.6, 4499.0], [27.7, 4509.0], [27.8, 4510.0], [27.9, 4518.0], [28.0, 4527.0], [28.1, 4533.0], [28.2, 4549.0], [28.3, 4551.0], [28.4, 4559.0], [28.5, 4563.0], [28.6, 4574.0], [28.7, 4585.0], [28.8, 4593.0], [28.9, 4594.0], [29.0, 4604.0], [29.1, 4606.0], [29.2, 4612.0], [29.3, 4618.0], [29.4, 4626.0], [29.5, 4640.0], [29.6, 4644.0], [29.7, 4646.0], [29.8, 4657.0], [29.9, 4663.0], [30.0, 4668.0], [30.1, 4670.0], [30.2, 4672.0], [30.3, 4681.0], [30.4, 4693.0], [30.5, 4699.0], [30.6, 4703.0], [30.7, 4710.0], [30.8, 4738.0], [30.9, 4739.0], [31.0, 4744.0], [31.1, 4745.0], [31.2, 4747.0], [31.3, 4755.0], [31.4, 4763.0], [31.5, 4764.0], [31.6, 4767.0], [31.7, 4770.0], [31.8, 4772.0], [31.9, 4777.0], [32.0, 4781.0], [32.1, 4787.0], [32.2, 4795.0], [32.3, 4796.0], [32.4, 4804.0], [32.5, 4807.0], [32.6, 4809.0], [32.7, 4816.0], [32.8, 4823.0], [32.9, 4824.0], [33.0, 4829.0], [33.1, 4836.0], [33.2, 4840.0], [33.3, 4844.0], [33.4, 4854.0], [33.5, 4860.0], [33.6, 4867.0], [33.7, 4876.0], [33.8, 4882.0], [33.9, 4887.0], [34.0, 4898.0], [34.1, 4913.0], [34.2, 4916.0], [34.3, 4922.0], [34.4, 4935.0], [34.5, 4935.0], [34.6, 4944.0], [34.7, 4946.0], [34.8, 4951.0], [34.9, 4955.0], [35.0, 4957.0], [35.1, 4961.0], [35.2, 4968.0], [35.3, 4977.0], [35.4, 4992.0], [35.5, 4993.0], [35.6, 5004.0], [35.7, 5006.0], [35.8, 5014.0], [35.9, 5021.0], [36.0, 5023.0], [36.1, 5028.0], [36.2, 5036.0], [36.3, 5045.0], [36.4, 5048.0], [36.5, 5050.0], [36.6, 5060.0], [36.7, 5061.0], [36.8, 5072.0], [36.9, 5077.0], [37.0, 5086.0], [37.1, 5093.0], [37.2, 5101.0], [37.3, 5101.0], [37.4, 5108.0], [37.5, 5111.0], [37.6, 5127.0], [37.7, 5128.0], [37.8, 5136.0], [37.9, 5140.0], [38.0, 5143.0], [38.1, 5145.0], [38.2, 5156.0], [38.3, 5165.0], [38.4, 5174.0], [38.5, 5186.0], [38.6, 5190.0], [38.7, 5198.0], [38.8, 5208.0], [38.9, 5215.0], [39.0, 5217.0], [39.1, 5221.0], [39.2, 5231.0], [39.3, 5237.0], [39.4, 5247.0], [39.5, 5267.0], [39.6, 5288.0], [39.7, 5289.0], [39.8, 5293.0], [39.9, 5298.0], [40.0, 5306.0], [40.1, 5325.0], [40.2, 5333.0], [40.3, 5345.0], [40.4, 5350.0], [40.5, 5368.0], [40.6, 5373.0], [40.7, 5390.0], [40.8, 5398.0], [40.9, 5399.0], [41.0, 5411.0], [41.1, 5426.0], [41.2, 5434.0], [41.3, 5437.0], [41.4, 5439.0], [41.5, 5442.0], [41.6, 5453.0], [41.7, 5455.0], [41.8, 5468.0], [41.9, 5476.0], [42.0, 5501.0], [42.1, 5518.0], [42.2, 5532.0], [42.3, 5538.0], [42.4, 5548.0], [42.5, 5552.0], [42.6, 5574.0], [42.7, 5588.0], [42.8, 5608.0], [42.9, 5614.0], [43.0, 5625.0], [43.1, 5643.0], [43.2, 5664.0], [43.3, 5674.0], [43.4, 5679.0], [43.5, 5690.0], [43.6, 5701.0], [43.7, 5710.0], [43.8, 5716.0], [43.9, 5717.0], [44.0, 5727.0], [44.1, 5740.0], [44.2, 5750.0], [44.3, 5758.0], [44.4, 5776.0], [44.5, 5786.0], [44.6, 5795.0], [44.7, 5805.0], [44.8, 5820.0], [44.9, 5829.0], [45.0, 5832.0], [45.1, 5842.0], [45.2, 5860.0], [45.3, 5877.0], [45.4, 5898.0], [45.5, 5902.0], [45.6, 5919.0], [45.7, 5930.0], [45.8, 5951.0], [45.9, 5977.0], [46.0, 5989.0], [46.1, 5992.0], [46.2, 6003.0], [46.3, 6014.0], [46.4, 6024.0], [46.5, 6037.0], [46.6, 6048.0], [46.7, 6065.0], [46.8, 6081.0], [46.9, 6084.0], [47.0, 6130.0], [47.1, 6139.0], [47.2, 6149.0], [47.3, 6168.0], [47.4, 6186.0], [47.5, 6190.0], [47.6, 6205.0], [47.7, 6211.0], [47.8, 6216.0], [47.9, 6217.0], [48.0, 6223.0], [48.1, 6231.0], [48.2, 6232.0], [48.3, 6234.0], [48.4, 6239.0], [48.5, 6246.0], [48.6, 6248.0], [48.7, 6250.0], [48.8, 6260.0], [48.9, 6272.0], [49.0, 6286.0], [49.1, 6301.0], [49.2, 6309.0], [49.3, 6317.0], [49.4, 6320.0], [49.5, 6330.0], [49.6, 6334.0], [49.7, 6334.0], [49.8, 6339.0], [49.9, 6342.0], [50.0, 6350.0], [50.1, 6355.0], [50.2, 6358.0], [50.3, 6359.0], [50.4, 6363.0], [50.5, 6364.0], [50.6, 6369.0], [50.7, 6370.0], [50.8, 6372.0], [50.9, 6373.0], [51.0, 6374.0], [51.1, 6377.0], [51.2, 6378.0], [51.3, 6378.0], [51.4, 6386.0], [51.5, 6388.0], [51.6, 6391.0], [51.7, 6394.0], [51.8, 6401.0], [51.9, 6405.0], [52.0, 6406.0], [52.1, 6414.0], [52.2, 6417.0], [52.3, 6418.0], [52.4, 6423.0], [52.5, 6425.0], [52.6, 6427.0], [52.7, 6428.0], [52.8, 6430.0], [52.9, 6433.0], [53.0, 6436.0], [53.1, 6439.0], [53.2, 6442.0], [53.3, 6442.0], [53.4, 6448.0], [53.5, 6449.0], [53.6, 6451.0], [53.7, 6456.0], [53.8, 6463.0], [53.9, 6466.0], [54.0, 6468.0], [54.1, 6472.0], [54.2, 6475.0], [54.3, 6476.0], [54.4, 6479.0], [54.5, 6482.0], [54.6, 6491.0], [54.7, 6494.0], [54.8, 6496.0], [54.9, 6497.0], [55.0, 6498.0], [55.1, 6499.0], [55.2, 6501.0], [55.3, 6501.0], [55.4, 6505.0], [55.5, 6505.0], [55.6, 6507.0], [55.7, 6509.0], [55.8, 6511.0], [55.9, 6512.0], [56.0, 6514.0], [56.1, 6516.0], [56.2, 6518.0], [56.3, 6519.0], [56.4, 6520.0], [56.5, 6525.0], [56.6, 6527.0], [56.7, 6527.0], [56.8, 6530.0], [56.9, 6531.0], [57.0, 6533.0], [57.1, 6535.0], [57.2, 6538.0], [57.3, 6541.0], [57.4, 6545.0], [57.5, 6546.0], [57.6, 6547.0], [57.7, 6549.0], [57.8, 6552.0], [57.9, 6552.0], [58.0, 6553.0], [58.1, 6554.0], [58.2, 6554.0], [58.3, 6555.0], [58.4, 6559.0], [58.5, 6561.0], [58.6, 6562.0], [58.7, 6563.0], [58.8, 6565.0], [58.9, 6573.0], [59.0, 6580.0], [59.1, 6584.0], [59.2, 6585.0], [59.3, 6590.0], [59.4, 6591.0], [59.5, 6596.0], [59.6, 6598.0], [59.7, 6600.0], [59.8, 6612.0], [59.9, 6614.0], [60.0, 6616.0], [60.1, 6618.0], [60.2, 6619.0], [60.3, 6621.0], [60.4, 6622.0], [60.5, 6623.0], [60.6, 6627.0], [60.7, 6630.0], [60.8, 6634.0], [60.9, 6636.0], [61.0, 6639.0], [61.1, 6647.0], [61.2, 6649.0], [61.3, 6653.0], [61.4, 6655.0], [61.5, 6656.0], [61.6, 6663.0], [61.7, 6665.0], [61.8, 6671.0], [61.9, 6672.0], [62.0, 6681.0], [62.1, 6684.0], [62.2, 6690.0], [62.3, 6696.0], [62.4, 6699.0], [62.5, 6701.0], [62.6, 6704.0], [62.7, 6705.0], [62.8, 6713.0], [62.9, 6715.0], [63.0, 6717.0], [63.1, 6721.0], [63.2, 6724.0], [63.3, 6726.0], [63.4, 6729.0], [63.5, 6731.0], [63.6, 6735.0], [63.7, 6737.0], [63.8, 6738.0], [63.9, 6740.0], [64.0, 6744.0], [64.1, 6750.0], [64.2, 6762.0], [64.3, 6771.0], [64.4, 6805.0], [64.5, 6810.0], [64.6, 6814.0], [64.7, 6818.0], [64.8, 6820.0], [64.9, 6821.0], [65.0, 6821.0], [65.1, 6823.0], [65.2, 6824.0], [65.3, 6826.0], [65.4, 6827.0], [65.5, 6828.0], [65.6, 6829.0], [65.7, 6831.0], [65.8, 6832.0], [65.9, 6834.0], [66.0, 6836.0], [66.1, 6840.0], [66.2, 6846.0], [66.3, 6848.0], [66.4, 6852.0], [66.5, 6853.0], [66.6, 6854.0], [66.7, 6855.0], [66.8, 6860.0], [66.9, 6862.0], [67.0, 6869.0], [67.1, 6871.0], [67.2, 6871.0], [67.3, 6872.0], [67.4, 6877.0], [67.5, 6884.0], [67.6, 6885.0], [67.7, 6886.0], [67.8, 6890.0], [67.9, 6892.0], [68.0, 6908.0], [68.1, 6908.0], [68.2, 6909.0], [68.3, 6910.0], [68.4, 6913.0], [68.5, 6923.0], [68.6, 6929.0], [68.7, 6931.0], [68.8, 6932.0], [68.9, 6941.0], [69.0, 6945.0], [69.1, 6953.0], [69.2, 6973.0], [69.3, 6974.0], [69.4, 6976.0], [69.5, 6978.0], [69.6, 6988.0], [69.7, 6996.0], [69.8, 7000.0], [69.9, 7005.0], [70.0, 7010.0], [70.1, 7010.0], [70.2, 7011.0], [70.3, 7015.0], [70.4, 7022.0], [70.5, 7022.0], [70.6, 7024.0], [70.7, 7025.0], [70.8, 7033.0], [70.9, 7034.0], [71.0, 7036.0], [71.1, 7038.0], [71.2, 7041.0], [71.3, 7042.0], [71.4, 7045.0], [71.5, 7046.0], [71.6, 7052.0], [71.7, 7053.0], [71.8, 7054.0], [71.9, 7055.0], [72.0, 7057.0], [72.1, 7058.0], [72.2, 7060.0], [72.3, 7064.0], [72.4, 7071.0], [72.5, 7076.0], [72.6, 7082.0], [72.7, 7085.0], [72.8, 7089.0], [72.9, 7099.0], [73.0, 7107.0], [73.1, 7111.0], [73.2, 7120.0], [73.3, 7122.0], [73.4, 7123.0], [73.5, 7133.0], [73.6, 7140.0], [73.7, 7149.0], [73.8, 7151.0], [73.9, 7153.0], [74.0, 7162.0], [74.1, 7166.0], [74.2, 7169.0], [74.3, 7173.0], [74.4, 7175.0], [74.5, 7178.0], [74.6, 7189.0], [74.7, 7194.0], [74.8, 7197.0], [74.9, 7200.0], [75.0, 7205.0], [75.1, 7207.0], [75.2, 7211.0], [75.3, 7214.0], [75.4, 7221.0], [75.5, 7223.0], [75.6, 7226.0], [75.7, 7226.0], [75.8, 7229.0], [75.9, 7231.0], [76.0, 7234.0], [76.1, 7234.0], [76.2, 7236.0], [76.3, 7237.0], [76.4, 7239.0], [76.5, 7241.0], [76.6, 7241.0], [76.7, 7242.0], [76.8, 7244.0], [76.9, 7247.0], [77.0, 7249.0], [77.1, 7252.0], [77.2, 7254.0], [77.3, 7256.0], [77.4, 7258.0], [77.5, 7261.0], [77.6, 7263.0], [77.7, 7266.0], [77.8, 7268.0], [77.9, 7271.0], [78.0, 7273.0], [78.1, 7275.0], [78.2, 7277.0], [78.3, 7279.0], [78.4, 7280.0], [78.5, 7281.0], [78.6, 7283.0], [78.7, 7284.0], [78.8, 7286.0], [78.9, 7287.0], [79.0, 7289.0], [79.1, 7291.0], [79.2, 7293.0], [79.3, 7294.0], [79.4, 7295.0], [79.5, 7296.0], [79.6, 7298.0], [79.7, 7303.0], [79.8, 7307.0], [79.9, 7310.0], [80.0, 7312.0], [80.1, 7313.0], [80.2, 7316.0], [80.3, 7318.0], [80.4, 7319.0], [80.5, 7320.0], [80.6, 7323.0], [80.7, 7324.0], [80.8, 7328.0], [80.9, 7328.0], [81.0, 7331.0], [81.1, 7337.0], [81.2, 7341.0], [81.3, 7342.0], [81.4, 7343.0], [81.5, 7344.0], [81.6, 7350.0], [81.7, 7361.0], [81.8, 7371.0], [81.9, 7377.0], [82.0, 7377.0], [82.1, 7380.0], [82.2, 7382.0], [82.3, 7387.0], [82.4, 7388.0], [82.5, 7390.0], [82.6, 7392.0], [82.7, 7394.0], [82.8, 7396.0], [82.9, 7397.0], [83.0, 7401.0], [83.1, 7402.0], [83.2, 7404.0], [83.3, 7408.0], [83.4, 7411.0], [83.5, 7413.0], [83.6, 7418.0], [83.7, 7421.0], [83.8, 7429.0], [83.9, 7433.0], [84.0, 7443.0], [84.1, 7452.0], [84.2, 7463.0], [84.3, 7464.0], [84.4, 7465.0], [84.5, 7472.0], [84.6, 7473.0], [84.7, 7479.0], [84.8, 7483.0], [84.9, 7486.0], [85.0, 7489.0], [85.1, 7502.0], [85.2, 7505.0], [85.3, 7509.0], [85.4, 7511.0], [85.5, 7515.0], [85.6, 7518.0], [85.7, 7518.0], [85.8, 7520.0], [85.9, 7521.0], [86.0, 7522.0], [86.1, 7524.0], [86.2, 7527.0], [86.3, 7529.0], [86.4, 7530.0], [86.5, 7535.0], [86.6, 7537.0], [86.7, 7538.0], [86.8, 7540.0], [86.9, 7543.0], [87.0, 7545.0], [87.1, 7547.0], [87.2, 7549.0], [87.3, 7555.0], [87.4, 7558.0], [87.5, 7559.0], [87.6, 7561.0], [87.7, 7563.0], [87.8, 7566.0], [87.9, 7568.0], [88.0, 7569.0], [88.1, 7571.0], [88.2, 7575.0], [88.3, 7577.0], [88.4, 7578.0], [88.5, 7580.0], [88.6, 7584.0], [88.7, 7587.0], [88.8, 7588.0], [88.9, 7595.0], [89.0, 7597.0], [89.1, 7598.0], [89.2, 7598.0], [89.3, 7599.0], [89.4, 7600.0], [89.5, 7604.0], [89.6, 7612.0], [89.7, 7624.0], [89.8, 7629.0], [89.9, 7645.0], [90.0, 7666.0], [90.1, 7679.0], [90.2, 7680.0], [90.3, 7705.0], [90.4, 7729.0], [90.5, 7739.0], [90.6, 7751.0], [90.7, 7758.0], [90.8, 7766.0], [90.9, 7786.0], [91.0, 7789.0], [91.1, 7794.0], [91.2, 7799.0], [91.3, 7802.0], [91.4, 7807.0], [91.5, 7842.0], [91.6, 7853.0], [91.7, 7857.0], [91.8, 7863.0], [91.9, 7874.0], [92.0, 7885.0], [92.1, 7907.0], [92.2, 7923.0], [92.3, 7938.0], [92.4, 7956.0], [92.5, 7962.0], [92.6, 7966.0], [92.7, 7979.0], [92.8, 7986.0], [92.9, 7992.0], [93.0, 7997.0], [93.1, 7999.0], [93.2, 8001.0], [93.3, 8005.0], [93.4, 8008.0], [93.5, 8015.0], [93.6, 8029.0], [93.7, 8045.0], [93.8, 8050.0], [93.9, 8053.0], [94.0, 8060.0], [94.1, 8066.0], [94.2, 8071.0], [94.3, 8087.0], [94.4, 8089.0], [94.5, 8105.0], [94.6, 8111.0], [94.7, 8123.0], [94.8, 8130.0], [94.9, 8160.0], [95.0, 8170.0], [95.1, 8175.0], [95.2, 8179.0], [95.3, 8187.0], [95.4, 8196.0], [95.5, 8205.0], [95.6, 8214.0], [95.7, 8214.0], [95.8, 8222.0], [95.9, 8237.0], [96.0, 8242.0], [96.1, 8246.0], [96.2, 8255.0], [96.3, 8269.0], [96.4, 8273.0], [96.5, 8280.0], [96.6, 8282.0], [96.7, 8292.0], [96.8, 8301.0], [96.9, 8313.0], [97.0, 8316.0], [97.1, 8325.0], [97.2, 8337.0], [97.3, 8340.0], [97.4, 8350.0], [97.5, 8354.0], [97.6, 8359.0], [97.7, 8380.0], [97.8, 8391.0], [97.9, 8409.0], [98.0, 8416.0], [98.1, 8421.0], [98.2, 8422.0], [98.3, 8429.0], [98.4, 8431.0], [98.5, 8444.0], [98.6, 8455.0], [98.7, 8471.0], [98.8, 8477.0], [98.9, 8487.0], [99.0, 8496.0], [99.1, 8499.0], [99.2, 8501.0], [99.3, 8515.0], [99.4, 8517.0], [99.5, 8567.0], [99.6, 8576.0], [99.7, 8592.0], [99.8, 8611.0], [99.9, 8706.0], [100.0, 8863.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1800.0, "maxY": 120.0, "series": [{"data": [[1800.0, 1.0], [1900.0, 4.0], [2000.0, 3.0], [2100.0, 1.0], [2300.0, 2.0], [2200.0, 1.0], [2400.0, 6.0], [2500.0, 20.0], [2600.0, 24.0], [2700.0, 38.0], [2800.0, 32.0], [2900.0, 42.0], [3000.0, 31.0], [3100.0, 31.0], [3200.0, 46.0], [3300.0, 25.0], [3400.0, 33.0], [3500.0, 26.0], [3600.0, 35.0], [3700.0, 37.0], [3800.0, 27.0], [3900.0, 36.0], [4000.0, 35.0], [4100.0, 38.0], [4200.0, 37.0], [4300.0, 45.0], [4400.0, 35.0], [4500.0, 33.0], [4600.0, 40.0], [4700.0, 45.0], [4800.0, 43.0], [4900.0, 38.0], [5000.0, 40.0], [5100.0, 38.0], [5200.0, 30.0], [5300.0, 25.0], [5400.0, 27.0], [5500.0, 20.0], [5600.0, 20.0], [5700.0, 27.0], [5800.0, 20.0], [5900.0, 17.0], [6000.0, 20.0], [6100.0, 16.0], [6200.0, 37.0], [6300.0, 68.0], [6400.0, 83.0], [6500.0, 114.0], [6600.0, 70.0], [6700.0, 48.0], [6800.0, 89.0], [6900.0, 46.0], [7000.0, 78.0], [7100.0, 49.0], [7200.0, 120.0], [7300.0, 82.0], [7400.0, 53.0], [7600.0, 23.0], [7500.0, 106.0], [7700.0, 24.0], [7800.0, 22.0], [7900.0, 26.0], [8100.0, 26.0], [8000.0, 33.0], [8300.0, 28.0], [8200.0, 31.0], [8400.0, 33.0], [8500.0, 15.0], [8600.0, 3.0], [8700.0, 1.0], [8800.0, 2.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2500.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2500.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2500.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1251.372800000001, "minX": 1.75558536E12, "maxY": 1251.372800000001, "series": [{"data": [[1.75558536E12, 1251.372800000001]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558536E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1948.5, "minX": 2.0, "maxY": 8863.0, "series": [{"data": [[2.0, 7537.5], [7.0, 8863.0], [8.0, 7479.0], [9.0, 7600.0], [10.0, 7702.333333333333], [13.0, 7680.0], [15.0, 7987.0], [18.0, 7595.333333333333], [19.0, 7595.0], [20.0, 7587.0], [21.0, 7578.0], [22.0, 7578.0], [24.0, 7576.0], [25.0, 7571.0], [26.0, 7570.0], [27.0, 7563.0], [28.0, 7561.0], [32.0, 7559.5], [35.0, 7555.0], [34.0, 7555.0], [37.0, 7547.0], [36.0, 7552.0], [39.0, 7545.0], [40.0, 7542.0], [42.0, 7542.0], [47.0, 7541.0], [46.0, 7537.75], [49.0, 7529.0], [50.0, 7529.0], [55.0, 7523.0], [54.0, 7529.25], [61.0, 7519.5], [60.0, 7521.0], [67.0, 7515.0], [66.0, 7515.0], [65.0, 7520.25], [64.0, 7520.0], [71.0, 7489.0], [70.0, 7504.0], [68.0, 7510.0], [74.0, 7511.0], [73.0, 7483.0], [72.0, 7484.0], [79.0, 7480.6], [86.0, 7454.0], [85.0, 7464.5], [91.0, 7417.0], [90.0, 7428.0], [89.0, 7441.5], [88.0, 7432.0], [92.0, 7421.0], [98.0, 7408.0], [103.0, 7408.5], [102.0, 7402.0], [101.0, 7408.0], [100.0, 7413.0], [106.0, 7394.5], [105.0, 7402.5], [111.0, 7394.666666666668], [115.0, 7381.0], [114.0, 7389.0], [113.0, 7390.0], [112.0, 7392.0], [119.0, 7343.0], [118.0, 7377.666666666667], [122.0, 7342.0], [121.0, 7344.0], [120.0, 7345.0], [126.0, 7337.0], [125.0, 7340.0], [124.0, 7339.0], [133.0, 7318.0], [132.0, 7326.2], [128.0, 7329.0], [141.0, 7303.0], [140.0, 7312.0], [139.0, 7323.0], [138.0, 7316.4], [150.0, 7310.0], [149.0, 7313.5], [147.0, 7310.0], [146.0, 7315.0], [145.0, 7312.0], [158.0, 7293.0], [155.0, 7298.333333333333], [152.0, 7304.0], [167.0, 7295.0], [166.0, 7277.0], [164.0, 7293.5], [163.0, 7286.5], [160.0, 7295.0], [175.0, 7273.0], [174.0, 7284.0], [172.0, 7286.6], [183.0, 7252.0], [182.0, 7256.5], [180.0, 7262.5], [178.0, 7260.0], [177.0, 7263.0], [176.0, 7270.0], [191.0, 7242.5], [190.0, 7241.5], [189.0, 7245.0], [186.0, 7247.0], [199.0, 7977.5], [195.0, 7234.0], [194.0, 7237.0], [193.0, 7236.0], [207.0, 8028.666666666667], [204.0, 7770.0], [202.0, 7563.0], [201.0, 7232.0], [200.0, 7225.0], [215.0, 8452.0], [213.0, 8044.0], [211.0, 8611.0], [210.0, 8313.0], [208.0, 8421.0], [223.0, 8166.0], [219.0, 8105.0], [217.0, 8501.0], [231.0, 8621.0], [230.0, 8350.75], [229.0, 8608.0], [224.0, 8471.0], [233.0, 8247.0], [232.0, 8419.0], [255.0, 8283.5], [254.0, 8227.571428571428], [253.0, 8272.5], [252.0, 8166.0], [250.0, 8443.2], [249.0, 8273.0], [258.0, 8183.5], [269.0, 8255.0], [270.0, 8008.0], [268.0, 8101.0], [267.0, 8301.333333333334], [264.0, 8053.0], [263.0, 8367.0], [261.0, 8099.0], [257.0, 8213.0], [256.0, 8543.0], [284.0, 8239.0], [282.0, 8515.0], [281.0, 8226.0], [280.0, 8448.0], [279.0, 7998.0], [278.0, 7986.5], [277.0, 8237.0], [276.0, 8503.0], [274.0, 8375.0], [273.0, 8128.333333333333], [300.0, 7610.5], [302.0, 8417.0], [303.0, 7900.25], [301.0, 8015.5], [299.0, 8232.0], [296.0, 7852.666666666667], [295.0, 8026.0], [288.0, 8444.0], [291.0, 8109.333333333333], [289.0, 8517.0], [318.0, 8404.0], [316.0, 8214.0], [315.0, 7540.5], [311.0, 8204.833333333334], [310.0, 8288.0], [335.0, 7227.0], [334.0, 8491.0], [333.0, 8052.0], [332.0, 8038.0], [331.0, 8431.0], [330.0, 7636.0], [328.0, 8222.0], [327.0, 8203.333333333334], [350.0, 8432.0], [349.0, 7626.0], [339.0, 8266.0], [338.0, 8149.5], [337.0, 8175.0], [347.0, 8380.0], [346.0, 7235.0], [345.0, 8477.0], [344.0, 8036.0], [343.0, 7403.0], [342.0, 7994.0], [341.0, 8282.0], [340.0, 8130.0], [360.0, 8171.5], [366.0, 7731.333333333333], [363.0, 7165.0], [362.0, 7170.0], [361.0, 7185.0], [358.0, 7937.333333333333], [355.0, 7239.0], [354.0, 8066.0], [353.0, 7764.0], [382.0, 8025.25], [378.0, 7785.5], [376.0, 8261.0], [375.0, 7655.0], [374.0, 7169.0], [371.0, 8416.0], [369.0, 7351.0], [368.0, 7549.0], [398.0, 7560.0], [396.0, 8004.0], [394.0, 7912.0], [393.0, 7883.666666666667], [390.0, 7773.5], [386.0, 7934.5], [414.0, 8002.0], [415.0, 7201.0], [412.0, 7221.0], [411.0, 8392.0], [410.0, 8119.5], [408.0, 7698.666666666667], [405.0, 8455.0], [401.0, 7604.0], [400.0, 8403.0], [431.0, 7468.0], [429.0, 7763.857142857143], [422.0, 7928.0], [421.0, 7667.5], [419.0, 8354.0], [418.0, 8053.0], [446.0, 8338.0], [445.0, 8222.0], [444.0, 7151.0], [443.0, 7120.0], [441.0, 7912.5], [438.0, 7135.0], [435.0, 7071.0], [434.0, 7863.333333333333], [461.0, 7060.0], [462.0, 7053.0], [460.0, 7853.0], [448.0, 7608.0], [459.0, 7855.0], [458.0, 7785.0], [457.0, 7064.0], [456.0, 7123.5], [454.0, 7999.5], [452.0, 8248.25], [478.0, 7666.0], [479.0, 7842.0], [477.0, 7226.0], [476.0, 7107.0], [475.0, 7673.0], [474.0, 8198.0], [473.0, 7123.0], [472.0, 7038.0], [471.0, 7045.0], [465.0, 7056.0], [464.0, 7066.0], [467.0, 8199.0], [466.0, 7075.0], [470.0, 7133.0], [469.0, 7054.0], [468.0, 7122.0], [492.0, 6949.0], [494.0, 7374.0], [495.0, 7371.0], [493.0, 7518.0], [491.0, 7575.0], [490.0, 7233.2], [487.0, 6976.0], [484.0, 7612.0], [483.0, 8022.666666666667], [481.0, 7151.0], [499.0, 7287.0], [511.0, 7491.0], [509.0, 7273.5], [508.0, 7282.0], [506.0, 7380.0], [502.0, 7320.0], [501.0, 7800.0], [498.0, 7343.0], [497.0, 7364.0], [496.0, 7361.0], [538.0, 7110.0], [536.0, 7122.0], [542.0, 7380.0], [528.0, 7178.0], [540.0, 7387.0], [512.0, 7256.0], [516.0, 7239.0], [518.0, 7236.0], [526.0, 7200.0], [524.0, 7213.0], [522.0, 7216.0], [534.0, 7166.0], [530.0, 7174.0], [570.0, 7057.0], [564.0, 7394.5], [560.0, 7057.0], [562.0, 7055.0], [568.0, 7571.0], [548.0, 7599.0], [546.0, 7318.5], [544.0, 7089.0], [554.0, 7191.0], [552.0, 7422.75], [566.0, 7729.0], [606.0, 7027.0], [600.0, 7599.0], [596.0, 7038.5], [594.0, 7027.5], [578.0, 7465.5], [582.0, 7041.0], [588.0, 7038.0], [584.0, 7413.0], [632.0, 7023.666666666667], [638.0, 7543.0], [636.0, 6839.0], [634.0, 7577.0], [612.0, 7310.5], [608.0, 7360.5], [630.0, 7017.0], [622.0, 7378.0], [620.0, 7580.0], [618.0, 7795.5], [616.0, 7190.25], [666.0, 6630.0], [660.0, 7884.0], [664.0, 6618.0], [654.0, 7359.5], [642.0, 6621.0], [644.0, 7588.0], [650.0, 7811.0], [648.0, 7766.0], [662.0, 7567.0], [658.0, 7451.0], [700.0, 7272.0], [702.0, 6612.0], [690.0, 7394.0], [692.0, 6582.0], [698.0, 7384.0], [678.0, 7008.0], [676.0, 7121.333333333333], [686.0, 6974.0], [684.0, 7404.5], [682.0, 7161.0], [694.0, 7807.0], [728.0, 6929.5], [730.0, 7579.0], [718.0, 7221.0], [706.0, 7790.0], [704.0, 7244.0], [712.0, 7258.0], [726.0, 7307.0], [722.0, 6942.0], [720.0, 7067.0], [760.0, 7776.0], [764.0, 6921.0], [754.0, 6923.333333333333], [762.0, 7558.0], [736.0, 7319.0], [738.0, 6531.0], [742.0, 7293.25], [750.0, 7299.75], [746.0, 6805.0], [758.0, 6942.0], [756.0, 7645.0], [794.0, 6894.0], [792.0, 6872.0], [796.0, 6889.5], [786.0, 6990.75], [782.0, 6891.666666666667], [770.0, 7014.333333333333], [772.0, 6910.0], [824.0, 7236.0], [828.0, 7005.0], [830.0, 7041.666666666667], [826.0, 7182.0], [820.0, 6813.5], [818.0, 6814.5], [800.0, 7527.0], [804.0, 7191.0], [806.0, 7233.0], [812.0, 7241.0], [808.0, 7242.0], [860.0, 6870.0], [862.0, 6869.5], [858.0, 6887.0], [846.0, 6852.0], [844.0, 6853.0], [842.0, 7063.0], [848.0, 6860.0], [892.0, 7051.0], [888.0, 6837.333333333333], [882.0, 6823.5], [884.0, 6831.0], [864.0, 6884.5], [876.0, 6820.0], [874.0, 6836.5], [902.0, 6825.0], [924.0, 7073.5], [922.0, 7285.0], [920.0, 6769.0], [896.0, 6828.5], [908.0, 6821.0], [906.0, 6864.0], [904.0, 6996.0], [918.0, 7291.0], [916.0, 6826.0], [952.0, 6722.5], [958.0, 6729.0], [944.0, 6703.0], [946.0, 6717.0], [956.0, 6738.0], [928.0, 6730.0], [930.0, 6729.0], [932.0, 6713.0], [934.0, 6709.0], [940.0, 6704.0], [938.0, 6694.0], [950.0, 6704.0], [948.0, 6725.0], [986.0, 6598.0], [990.0, 6632.0], [980.0, 6653.0], [976.0, 6683.0], [984.0, 6619.0], [966.0, 6671.0], [964.0, 6875.666666666667], [960.0, 6717.0], [974.0, 6663.0], [972.0, 7140.0], [970.0, 6696.0], [968.0, 6687.0], [982.0, 6681.0], [996.0, 6837.5], [1022.0, 6534.0], [1020.0, 6622.0], [998.0, 6570.0], [994.0, 6565.0], [1014.0, 6636.0], [1008.0, 6538.0], [1006.0, 6552.0], [1004.0, 6554.0], [1002.0, 6554.0], [1000.0, 6608.5], [1076.0, 6516.0], [1084.0, 6515.0], [1060.0, 6519.0], [1080.0, 6369.0], [1024.0, 6593.0], [1032.0, 6558.5], [1036.0, 6498.0], [1048.0, 6560.5], [1044.0, 6516.0], [1040.0, 6494.0], [1068.0, 6406.0], [1064.0, 6540.0], [1140.0, 6461.0], [1148.0, 6394.0], [1136.0, 6514.666666666667], [1096.0, 6501.0], [1092.0, 6475.5], [1116.0, 6515.0], [1112.0, 6530.0], [1128.0, 6186.0], [1160.0, 6378.0], [1200.0, 6479.0], [1152.0, 6373.0], [1180.0, 6359.0], [1172.0, 6399.0], [1168.0, 6199.0], [1196.0, 6358.0], [1192.0, 6276.0], [1264.0, 6386.0], [1252.0, 6713.0], [1248.0, 6531.0], [1272.0, 6625.5], [1228.0, 6201.0], [1224.0, 6226.0], [1220.0, 6240.5], [1216.0, 6248.0], [1232.0, 6363.0], [1256.0, 6738.0], [1336.0, 5495.0], [1340.0, 6492.0], [1312.0, 6066.0], [1316.0, 6228.5], [1320.0, 6065.0], [1332.0, 5985.0], [1328.0, 6372.0], [1292.0, 5679.0], [1288.0, 5806.0], [1284.0, 6284.5], [1308.0, 6084.0], [1296.0, 6532.0], [1324.0, 6039.0], [1396.0, 5750.5], [1404.0, 6002.0], [1376.0, 5730.0], [1380.0, 6184.0], [1400.0, 5529.0], [1356.0, 5850.5], [1352.0, 6286.0], [1348.0, 5947.0], [1372.0, 6378.0], [1368.0, 5830.0], [1364.0, 5817.0], [1360.0, 6085.0], [1388.0, 5151.0], [1468.0, 4824.0], [1444.0, 4840.0], [1448.0, 5455.0], [1452.0, 5493.0], [1464.0, 5667.5], [1460.0, 4765.0], [1456.0, 4804.0], [1420.0, 5019.0], [1416.0, 5674.0], [1436.0, 5536.5], [1432.0, 5619.0], [1428.0, 5936.0], [1524.0, 5351.333333333333], [1528.0, 5456.0], [1512.0, 4464.0], [1504.0, 5253.5], [1508.0, 5278.0], [1516.0, 4510.0], [1520.0, 5711.0], [1484.0, 5467.5], [1480.0, 5544.0], [1476.0, 5552.0], [1472.0, 4772.0], [1500.0, 4509.0], [1496.0, 5399.0], [1492.0, 5410.0], [1488.0, 5297.0], [1588.0, 4766.5], [1572.0, 5141.0], [1596.0, 4301.0], [1568.0, 4348.0], [1576.0, 5338.0], [1580.0, 5536.0], [1544.0, 5050.0], [1540.0, 4397.0], [1564.0, 5289.0], [1560.0, 5176.5], [1552.0, 4907.0], [1652.0, 5004.0], [1660.0, 5190.0], [1632.0, 5029.0], [1636.0, 4922.0], [1640.0, 4605.0], [1644.0, 5426.0], [1648.0, 4836.0], [1600.0, 4993.0], [1628.0, 4195.0], [1624.0, 5193.0], [1676.0, 4854.0], [1716.0, 4393.5], [1724.0, 4025.0], [1712.0, 4728.5], [1672.0, 5240.0], [1668.0, 5208.0], [1664.0, 4787.0], [1692.0, 4988.333333333333], [1688.0, 4463.333333333333], [1684.0, 4777.0], [1784.0, 4702.666666666667], [1760.0, 4747.0], [1768.0, 4731.0], [1788.0, 4913.0], [1780.0, 3879.0], [1776.0, 5101.0], [1728.0, 5109.0], [1732.0, 4611.0], [1736.0, 4802.0], [1740.0, 4218.333333333333], [1756.0, 4903.333333333333], [1752.0, 4373.0], [1748.0, 4862.0], [1744.0, 4915.0], [1844.0, 4764.0], [1828.0, 3921.0], [1832.0, 4714.0], [1836.0, 4409.0], [1852.0, 4879.0], [1840.0, 4468.0], [1804.0, 4671.0], [1796.0, 4563.0], [1792.0, 5092.0], [1820.0, 3750.0], [1812.0, 4510.0], [1908.0, 4193.0], [1916.0, 4171.0], [1892.0, 4623.0], [1896.0, 3571.0], [1900.0, 4354.0], [1904.0, 4738.0], [1864.0, 4596.0], [1860.0, 4053.5], [1856.0, 3715.0], [1876.0, 3660.0], [1872.0, 4336.0], [1972.0, 4586.0], [1976.0, 4257.0], [1980.0, 3380.0], [1952.0, 4344.0], [1956.0, 4100.0], [1964.0, 4355.5], [1968.0, 4050.0], [1920.0, 4345.0], [1924.0, 3865.5], [1928.0, 4693.0], [1948.0, 4098.0], [1944.0, 4214.0], [1940.0, 4527.0], [1936.0, 4665.0], [2032.0, 3219.0], [2024.0, 4034.5], [2040.0, 4056.0], [2036.0, 3874.0], [1996.0, 3303.0], [1992.0, 4394.0], [1988.0, 4037.0], [1984.0, 4438.0], [2012.0, 3948.0], [2008.0, 4318.0], [2004.0, 3727.5], [2000.0, 3660.5], [2152.0, 3235.5], [2112.0, 3811.0], [2128.0, 3974.0], [2168.0, 3367.0], [2144.0, 3642.0], [2048.0, 3481.0], [2072.0, 3958.0], [2104.0, 2970.0], [2096.0, 4140.0], [2088.0, 3360.0], [2080.0, 4061.0], [2296.0, 3613.0], [2240.0, 3400.0], [2256.0, 3462.0], [2264.0, 2798.6666666666665], [2288.0, 3404.5], [2280.0, 2463.0], [2176.0, 3181.5], [2200.0, 3576.3333333333335], [2232.0, 3497.0], [2224.0, 3063.0], [2216.0, 3553.5], [2208.0, 3326.75], [2424.0, 2812.5], [2368.0, 2996.0], [2376.0, 3307.0], [2392.0, 2925.0], [2416.0, 3122.0], [2408.0, 2186.0], [2312.0, 3483.0], [2360.0, 3121.25], [2352.0, 2936.0], [2344.0, 3243.0], [2336.0, 3135.0], [2440.0, 2760.0], [2488.0, 2598.0], [2456.0, 2689.0], [2448.0, 2577.0], [2464.0, 2721.0], [2161.0, 3196.5], [2153.0, 3659.0], [2113.0, 3958.0], [2129.0, 2895.0], [2137.0, 2879.0], [2169.0, 2760.0], [2145.0, 2861.0], [2049.0, 3149.0], [2057.0, 4088.5], [2065.0, 3527.0], [2073.0, 4011.0], [2105.0, 3748.0], [2097.0, 4055.0], [2089.0, 4225.0], [2281.0, 3672.0], [2257.0, 3478.0], [2297.0, 3621.0], [2289.0, 3543.0], [2273.0, 3187.3333333333335], [2177.0, 3498.0], [2185.0, 3533.5], [2193.0, 3273.75], [2201.0, 2708.0], [2233.0, 2593.0], [2225.0, 3847.0], [2217.0, 2642.0], [2209.0, 2640.0], [2401.0, 2936.5], [2409.0, 2887.0], [2369.0, 2973.0], [2377.0, 3244.0], [2385.0, 2854.0], [2393.0, 2896.5], [2321.0, 3301.5], [2313.0, 3211.0], [2305.0, 3016.0], [2353.0, 3284.0], [2345.0, 3434.0], [2337.0, 3177.0], [2441.0, 2066.0], [2497.0, 2561.0], [2457.0, 2938.0], [2449.0, 3020.0], [2433.0, 1948.5], [2489.0, 2565.0], [2481.0, 2207.6666666666665], [2473.0, 2690.0], [1085.0, 6497.0], [1061.0, 6418.0], [1077.0, 6373.0], [1073.0, 6427.0], [1053.0, 6546.5], [1041.0, 6450.0], [1069.0, 6478.0], [1065.0, 6405.0], [1137.0, 6483.0], [1125.0, 6428.166666666666], [1145.0, 6431.0], [1141.0, 6744.0], [1101.0, 6526.5], [1093.0, 6498.0], [1089.0, 6532.0], [1117.0, 6311.0], [1109.0, 6481.5], [1133.0, 6426.75], [1129.0, 6434.0], [1157.0, 6406.0], [1201.0, 6443.0], [1213.0, 6464.0], [1209.0, 6408.5], [1153.0, 6320.0], [1161.0, 6339.0], [1165.0, 6383.5], [1181.0, 6359.0], [1177.0, 6364.0], [1173.0, 6352.0], [1193.0, 6554.0], [1185.0, 6334.0], [1225.0, 6217.0], [1269.0, 6489.0], [1257.0, 6737.0], [1249.0, 6797.0], [1217.0, 6246.0], [1245.0, 6447.166666666667], [1237.0, 6550.5], [1233.0, 5827.0], [1261.0, 6366.0], [1253.0, 6377.0], [1337.0, 6168.0], [1341.0, 6433.0], [1313.0, 6472.0], [1317.0, 6065.0], [1281.0, 6356.333333333333], [1289.0, 6288.0], [1285.0, 6014.0], [1309.0, 6512.0], [1305.0, 5439.0], [1301.0, 6153.0], [1297.0, 5989.0], [1325.0, 6530.0], [1321.0, 6065.0], [1357.0, 6301.0], [1385.0, 5809.333333333333], [1405.0, 5795.0], [1401.0, 5758.0], [1349.0, 5844.0], [1345.0, 6432.0], [1389.0, 6342.0], [1377.0, 6388.0], [1373.0, 6393.0], [1369.0, 5201.0], [1365.0, 5751.0], [1361.0, 6417.0], [1461.0, 5786.0], [1445.0, 4832.0], [1449.0, 5579.0], [1465.0, 4789.0], [1457.0, 5350.5], [1421.0, 5661.0], [1417.0, 5025.0], [1437.0, 6137.0], [1433.0, 4965.0], [1429.0, 4992.0], [1425.0, 5372.333333333333], [1529.0, 5701.0], [1533.0, 5005.5], [1505.0, 5346.0], [1509.0, 4533.0], [1513.0, 5333.0], [1517.0, 5430.0], [1525.0, 4498.0], [1521.0, 5306.0], [1485.0, 5551.0], [1477.0, 4879.0], [1473.0, 5664.0], [1501.0, 5717.0], [1497.0, 4594.0], [1493.0, 5347.0], [1489.0, 5345.0], [1589.0, 4709.0], [1597.0, 5140.0], [1569.0, 5400.0], [1573.0, 4914.0], [1581.0, 4951.0], [1585.0, 4659.0], [1545.0, 4429.0], [1541.0, 5050.0], [1537.0, 5600.0], [1565.0, 5023.0], [1557.0, 4774.0], [1553.0, 4336.0], [1657.0, 4783.666666666667], [1633.0, 5437.0], [1641.0, 4823.0], [1661.0, 4921.0], [1653.0, 4748.0], [1605.0, 4859.0], [1601.0, 5190.0], [1621.0, 5087.0], [1617.0, 5092.333333333333], [1721.0, 4929.5], [1697.0, 4807.0], [1705.0, 5093.0], [1725.0, 4808.0], [1713.0, 4916.0], [1677.0, 4448.0], [1673.0, 5129.0], [1693.0, 4227.0], [1689.0, 4035.0], [1685.0, 4935.0], [1681.0, 4605.333333333333], [1781.0, 3929.0], [1765.0, 4827.5], [1761.0, 4574.0], [1769.0, 4761.0], [1773.0, 4910.0], [1777.0, 4744.0], [1737.0, 4770.0], [1757.0, 3925.0], [1753.0, 3972.0], [1749.0, 4710.0], [1849.0, 4473.5], [1829.0, 4549.0], [1853.0, 4655.0], [1833.0, 4996.0], [1845.0, 4935.0], [1841.0, 4395.0], [1797.0, 4946.0], [1817.0, 4165.5], [1917.0, 4027.0], [1889.0, 4231.5], [1893.0, 3585.0], [1901.0, 4703.0], [1913.0, 4557.0], [1905.0, 4796.0], [1861.0, 3682.0], [1857.0, 3690.0], [1881.0, 4720.5], [1873.0, 4539.0], [1977.0, 4408.0], [1981.0, 3380.0], [1953.0, 4256.0], [1957.0, 4075.0], [1961.0, 4388.0], [1965.0, 4170.0], [1973.0, 4199.0], [1969.0, 4309.0], [1921.0, 4157.0], [1925.0, 4369.0], [1929.0, 4280.0], [1949.0, 4374.0], [1941.0, 3439.0], [1937.0, 4681.0], [2045.0, 3801.0], [2017.0, 4471.0], [2025.0, 3992.0], [2029.0, 3961.0], [2037.0, 4395.0], [2033.0, 4141.0], [1997.0, 4303.0], [1985.0, 4263.0], [2013.0, 4301.0], [2005.0, 3245.0], [2001.0, 4464.0], [2058.0, 3093.0], [2162.0, 3765.0], [2170.0, 3615.0], [2114.0, 3649.0], [2122.0, 3567.3333333333335], [2050.0, 3948.0], [2074.0, 3853.0], [2106.0, 4024.0], [2098.0, 2987.0], [2090.0, 3012.0], [2290.0, 3343.0], [2242.0, 3167.0], [2250.0, 3544.0], [2266.0, 3480.5], [2298.0, 3435.0], [2274.0, 3418.0], [2178.0, 2774.0], [2186.0, 3578.0], [2202.0, 3638.0], [2234.0, 3287.0], [2226.0, 3640.0], [2218.0, 3828.0], [2210.0, 3519.0], [2426.0, 2563.0], [2378.0, 2958.0], [2370.0, 3099.0], [2386.0, 2965.5], [2394.0, 2717.0], [2418.0, 2964.0], [2410.0, 3169.0], [2402.0, 2904.0], [2330.0, 3212.3333333333335], [2322.0, 3407.0], [2314.0, 3211.0], [2306.0, 3229.0], [2362.0, 3042.0], [2346.0, 2855.0], [2338.0, 3122.0], [2498.0, 2525.0], [2442.0, 2724.0], [2434.0, 2777.0], [2482.0, 2693.0], [2466.0, 2429.0], [2155.0, 3261.5], [2171.0, 2799.0], [2123.0, 3714.0], [2139.0, 3751.5], [2163.0, 3600.0], [2147.0, 3952.0], [2051.0, 4189.0], [2059.0, 4120.0], [2107.0, 3820.0], [2091.0, 3217.0], [2291.0, 3359.0], [2299.0, 3086.0], [2251.0, 3445.0], [2259.0, 2524.0], [2275.0, 3191.0], [2195.0, 3039.5], [2203.0, 2703.0], [2219.0, 2624.0], [2331.0, 2951.0], [2403.0, 2706.0], [2411.0, 3137.0], [2379.0, 2984.0], [2427.0, 2738.5], [2419.0, 2687.0], [2323.0, 2988.0], [2315.0, 3246.0], [2307.0, 3276.0], [2363.0, 2997.0], [2355.0, 3170.5], [2347.0, 3111.0], [2339.0, 3350.0], [2435.0, 2588.0], [2451.0, 2846.5], [2459.0, 2637.0], [2443.0, 2650.0], [2491.0, 2555.0], [2483.0, 2995.0], [2475.0, 2684.0], [2467.0, 2748.0], [515.0, 7232.0], [543.0, 7095.0], [529.0, 7183.0], [537.0, 7111.0], [527.0, 7197.0], [517.0, 6767.0], [519.0, 7230.0], [525.0, 7211.0], [523.0, 7214.0], [521.0, 7241.0], [535.0, 7124.0], [533.0, 7655.666666666667], [575.0, 7337.0], [573.0, 7056.0], [561.0, 7741.0], [571.0, 7300.0], [559.0, 7466.5], [557.0, 7537.0], [555.0, 7571.0], [567.0, 7060.0], [565.0, 7599.0], [581.0, 7045.0], [603.0, 7492.0], [601.0, 7612.0], [599.0, 7214.666666666667], [593.0, 7799.0], [591.0, 7156.0], [577.0, 7052.0], [579.0, 7038.0], [583.0, 7045.0], [587.0, 7035.0], [613.0, 7015.0], [637.0, 7342.0], [611.0, 7895.0], [631.0, 7011.666666666667], [625.0, 7481.0], [623.0, 7532.0], [621.0, 7288.0], [619.0, 7380.0], [617.0, 7843.0], [665.0, 7495.0], [669.0, 7193.333333333333], [641.0, 7149.333333333333], [643.0, 6992.0], [647.0, 7404.5], [645.0, 6877.0], [653.0, 7525.0], [651.0, 6996.0], [663.0, 7483.0], [661.0, 7712.5], [657.0, 7171.0], [701.0, 7419.0], [703.0, 6549.0], [689.0, 6557.0], [693.0, 6618.0], [699.0, 7489.0], [697.0, 7524.0], [679.0, 7324.5], [673.0, 7126.5], [687.0, 7398.0], [685.0, 7321.0], [695.0, 6591.0], [735.0, 7210.0], [721.0, 6809.0], [733.0, 7071.5], [711.0, 7117.5], [709.0, 6667.0], [717.0, 7158.8], [723.0, 7637.0], [761.0, 7479.0], [767.0, 7065.0], [755.0, 6578.0], [763.0, 6553.0], [751.0, 6581.0], [741.0, 7254.0], [743.0, 7732.0], [747.0, 6506.0], [749.0, 7328.0], [759.0, 6560.0], [757.0, 6927.0], [797.0, 7100.0], [789.0, 6871.5], [773.0, 6553.0], [781.0, 7149.5], [777.0, 6733.0], [801.0, 7162.0], [823.0, 7284.666666666667], [817.0, 6545.0], [815.0, 7388.0], [803.0, 7409.5], [805.0, 7624.0], [813.0, 7142.0], [811.0, 6843.0], [809.0, 6847.0], [857.0, 6876.0], [849.0, 6879.0], [847.0, 6911.5], [833.0, 7167.0], [837.0, 7244.25], [835.0, 7022.0], [843.0, 6880.333333333333], [841.0, 7182.0], [855.0, 6826.0], [853.0, 6855.0], [851.0, 6885.5], [893.0, 7078.0], [891.0, 6828.0], [885.0, 6826.5], [879.0, 6828.333333333333], [871.0, 6830.75], [867.0, 6858.0], [877.0, 6819.0], [921.0, 6761.0], [925.0, 6750.0], [927.0, 6735.0], [913.0, 6838.0], [911.0, 6841.333333333333], [901.0, 6837.333333333333], [907.0, 6824.0], [905.0, 6837.333333333333], [917.0, 7279.0], [915.0, 7064.0], [953.0, 6738.0], [957.0, 6721.0], [945.0, 6730.5], [955.0, 7207.0], [943.0, 6715.0], [929.0, 6731.0], [931.0, 6724.0], [933.0, 6722.0], [935.0, 6719.0], [941.0, 6705.0], [939.0, 6715.0], [937.0, 6706.0], [949.0, 6649.0], [947.0, 6747.0], [985.0, 6591.0], [991.0, 6622.75], [979.0, 6705.0], [977.0, 6647.0], [967.0, 6681.0], [965.0, 6951.0], [973.0, 6664.0], [971.0, 6655.0], [969.0, 6721.0], [983.0, 6639.0], [981.0, 6683.0], [1017.0, 6570.0], [1009.0, 6639.0], [993.0, 6629.5], [1015.0, 6513.0], [1013.0, 6610.5], [1007.0, 6527.0], [1005.0, 6552.0], [1003.0, 6551.0], [1001.0, 6663.0], [1074.0, 6520.0], [1086.0, 6334.0], [1058.0, 6478.0], [1062.0, 6417.0], [1082.0, 6433.0], [1054.0, 6528.0], [1030.0, 6613.666666666667], [1026.0, 6573.0], [1034.0, 6554.0], [1038.0, 6545.0], [1046.0, 6555.0], [1070.0, 6436.0], [1066.0, 6439.0], [1138.0, 6467.0], [1142.0, 6451.0], [1150.0, 6307.5], [1146.0, 6442.0], [1098.0, 6554.0], [1094.0, 6500.0], [1090.0, 6505.0], [1114.0, 6525.0], [1110.0, 6466.0], [1106.0, 6411.333333333333], [1126.0, 6442.0], [1202.0, 6358.0], [1190.0, 6378.333333333333], [1214.0, 6223.0], [1206.0, 6402.2], [1182.0, 6350.0], [1154.0, 6385.0], [1166.0, 6371.0], [1178.0, 6262.0], [1174.0, 6397.0], [1194.0, 6552.0], [1186.0, 6586.0], [1230.0, 6379.0], [1270.0, 6048.0], [1274.0, 5726.0], [1278.0, 6178.0], [1250.0, 6653.0], [1226.0, 6211.0], [1222.0, 6216.5], [1246.0, 6428.0], [1234.0, 6387.0], [1262.0, 6752.0], [1258.0, 6614.0], [1330.0, 5974.0], [1342.0, 6345.0], [1314.0, 5393.0], [1322.0, 6009.0], [1334.0, 5867.5], [1294.0, 5537.5], [1290.0, 6552.0], [1282.0, 6516.0], [1306.0, 5842.0], [1302.0, 5456.0], [1298.0, 5438.0], [1326.0, 6549.0], [1398.0, 5924.0], [1406.0, 5783.0], [1378.0, 5829.0], [1402.0, 5145.0], [1394.0, 5549.0], [1358.0, 6037.0], [1354.0, 6175.5], [1374.0, 5740.0], [1366.0, 5186.0], [1362.0, 5898.0], [1382.0, 5459.5], [1466.0, 5992.0], [1446.0, 5836.0], [1450.0, 6003.0], [1454.0, 5683.0], [1470.0, 5146.0], [1462.0, 5977.0], [1458.0, 5552.0], [1422.0, 6235.0], [1418.0, 5022.0], [1438.0, 5608.0], [1434.0, 5596.0], [1430.0, 5797.0], [1426.0, 6188.0], [1534.0, 4474.0], [1530.0, 5222.0], [1506.0, 5427.0], [1510.0, 5615.0], [1514.0, 5145.0], [1518.0, 4623.0], [1526.0, 4699.0], [1486.0, 5776.0], [1482.0, 5256.0], [1478.0, 5831.0], [1502.0, 5740.0], [1498.0, 4526.0], [1494.0, 5221.0], [1490.0, 5399.0], [1574.0, 4354.0], [1570.0, 5156.0], [1578.0, 4844.5], [1598.0, 4341.0], [1538.0, 5217.0], [1554.0, 4604.0], [1662.0, 5372.0], [1638.0, 4211.0], [1634.0, 4123.0], [1642.0, 4954.0], [1646.0, 4582.0], [1658.0, 5398.0], [1654.0, 5333.0], [1630.0, 5319.0], [1626.0, 5216.0], [1622.0, 4963.0], [1714.0, 5055.0], [1678.0, 4183.0], [1698.0, 4863.5], [1710.0, 4726.727272727273], [1718.0, 4013.0], [1674.0, 4107.0], [1670.0, 4511.0], [1666.0, 4577.5], [1694.0, 5311.0], [1682.0, 4104.0], [1734.0, 5101.0], [1778.0, 3934.0], [1766.0, 4779.0], [1762.0, 4625.0], [1770.0, 4838.0], [1774.0, 4607.0], [1730.0, 5003.5], [1742.0, 4478.5], [1758.0, 4747.0], [1750.0, 4787.0], [1746.0, 4845.0], [1846.0, 3721.0], [1826.0, 4821.333333333333], [1830.0, 4795.0], [1838.0, 4557.0], [1842.0, 4663.0], [1798.0, 3858.0], [1794.0, 4818.0], [1822.0, 4432.0], [1818.0, 4717.0], [1814.0, 4989.5], [1810.0, 4617.333333333333], [1918.0, 4388.0], [1890.0, 4825.0], [1894.0, 4276.0], [1898.0, 4084.5], [1902.0, 4352.0], [1914.0, 4314.0], [1910.0, 4434.0], [1906.0, 4334.0], [1870.0, 4694.333333333333], [1862.0, 4829.0], [1858.0, 4951.0], [1878.0, 4812.5], [1874.0, 4318.0], [1978.0, 4200.0], [1970.0, 3392.0], [1954.0, 4600.0], [1958.0, 3411.0], [1962.0, 4435.0], [1966.0, 3388.0], [1982.0, 4159.0], [1974.0, 4642.0], [1950.0, 4212.0], [1922.0, 3490.0], [1930.0, 4326.0], [1934.0, 4319.333333333333], [1946.0, 4335.0], [1942.0, 4464.0], [1938.0, 4297.0], [1998.0, 4075.0], [2042.0, 4196.5], [2046.0, 4044.0], [2018.0, 3224.0], [2030.0, 4417.0], [2038.0, 4123.0], [1994.0, 3520.1666666666665], [2010.0, 4147.0], [2006.0, 4499.0], [2002.0, 3967.0], [2164.0, 3754.0], [2116.0, 3382.5], [2124.0, 3977.0], [2132.0, 3528.0], [2140.0, 4106.0], [2172.0, 3722.0], [2156.0, 3916.0], [2148.0, 3838.0], [2052.0, 3898.0], [2060.0, 3091.0], [2068.0, 3776.0], [2108.0, 3666.0], [2100.0, 3786.0], [2092.0, 3781.0], [2292.0, 3235.0], [2284.0, 3360.0], [2252.0, 3239.0], [2268.0, 3381.5], [2300.0, 3243.0], [2276.0, 3415.0], [2180.0, 3784.0], [2188.0, 3121.0], [2196.0, 3548.0], [2204.0, 3570.0], [2228.0, 3478.0], [2212.0, 3493.0], [2332.0, 2961.0], [2412.0, 3195.0], [2428.0, 3142.0], [2372.0, 2764.0], [2380.0, 3266.0], [2388.0, 2972.0], [2316.0, 2982.0], [2308.0, 3227.0], [2364.0, 3019.0], [2356.0, 2808.0], [2348.0, 2927.0], [2340.0, 3109.0], [2492.0, 2547.0], [2500.0, 2546.6666666666665], [2436.0, 2636.0], [2484.0, 2640.0], [2468.0, 2979.0], [2165.0, 2784.0], [2133.0, 3761.0], [2141.0, 4121.0], [2173.0, 3574.0], [2157.0, 4070.0], [2149.0, 2795.0], [2053.0, 3772.0], [2061.0, 4268.0], [2069.0, 3086.0], [2077.0, 3572.3333333333335], [2109.0, 4142.0], [2101.0, 3910.0], [2093.0, 2997.0], [2085.0, 3917.0], [2293.0, 3062.0], [2245.0, 3025.0], [2253.0, 3623.0], [2261.0, 3200.0], [2269.0, 3689.0], [2285.0, 3362.0], [2181.0, 3715.0], [2189.0, 3808.0], [2197.0, 3976.0], [2237.0, 3265.6666666666665], [2229.0, 3477.5], [2221.0, 3355.0], [2429.0, 2614.0], [2381.0, 2932.0], [2389.0, 2947.0], [2397.0, 2850.0], [2421.0, 2759.0], [2405.0, 3031.0], [2333.0, 3284.0], [2325.0, 2972.0], [2309.0, 3580.0], [2365.0, 3035.0], [2349.0, 3086.0], [2453.0, 2477.0], [2461.0, 2784.5], [2437.0, 2026.0], [2485.0, 2969.0], [2477.0, 2741.0], [2469.0, 1972.0], [1075.0, 6551.5], [1087.0, 6495.0], [1059.0, 6442.0], [1079.0, 6439.5], [1055.0, 6656.0], [1027.0, 6619.0], [1039.0, 6585.0], [1035.0, 6547.0], [1051.0, 6508.333333333333], [1047.0, 6456.0], [1071.0, 6527.0], [1063.0, 6541.0], [1139.0, 6476.0], [1147.0, 6246.0], [1151.0, 6390.0], [1127.0, 6440.0], [1143.0, 6405.0], [1103.0, 6491.666666666667], [1099.0, 6500.0], [1095.0, 6499.0], [1119.0, 6512.0], [1111.0, 6731.0], [1107.0, 6491.0], [1211.0, 6467.0], [1215.0, 6249.0], [1207.0, 6541.0], [1183.0, 6338.0], [1155.0, 6422.0], [1159.0, 6377.5], [1167.0, 6367.0], [1179.0, 6363.0], [1171.0, 6371.0], [1191.0, 6585.0], [1187.0, 6247.0], [1231.0, 6171.0], [1279.0, 6272.5], [1251.0, 6130.0], [1267.0, 6156.333333333333], [1247.0, 6324.0], [1243.0, 6424.0], [1239.0, 6440.0], [1235.0, 6358.0], [1263.0, 6255.0], [1259.0, 6653.0], [1255.0, 6659.5], [1335.0, 5832.0], [1331.0, 5748.5], [1343.0, 6428.0], [1319.0, 5881.0], [1339.0, 5897.5], [1311.0, 5951.0], [1295.0, 5411.0], [1291.0, 6152.0], [1307.0, 6620.0], [1303.0, 6355.0], [1299.0, 5350.0], [1327.0, 5991.0], [1323.0, 6510.0], [1351.0, 6091.5], [1407.0, 6317.0], [1347.0, 6160.0], [1391.0, 5788.5], [1387.0, 5717.5], [1371.0, 5244.0], [1367.0, 5750.0], [1363.0, 5842.0], [1471.0, 4882.0], [1467.0, 5930.0], [1443.0, 5340.6], [1447.0, 5645.0], [1451.0, 6036.0], [1459.0, 5716.0], [1419.0, 5037.0], [1415.0, 5666.5], [1431.0, 5727.0], [1531.0, 5252.0], [1507.0, 5290.0], [1511.0, 5518.0], [1515.0, 5215.0], [1519.0, 5298.0], [1487.0, 4594.0], [1479.0, 5442.0], [1499.0, 5745.0], [1495.0, 5247.0], [1491.0, 5518.0], [1595.0, 4929.25], [1599.0, 5501.0], [1571.0, 5437.0], [1575.0, 4558.0], [1579.0, 5372.0], [1583.0, 4716.0], [1591.0, 5523.0], [1547.0, 5376.0], [1543.0, 5171.5], [1539.0, 5275.0], [1567.0, 5016.0], [1563.0, 5105.666666666667], [1559.0, 5305.0], [1555.0, 5102.0], [1651.0, 4693.333333333333], [1663.0, 4208.0], [1635.0, 4838.0], [1643.0, 4993.0], [1647.0, 5231.0], [1603.0, 4877.5], [1631.0, 5104.0], [1627.0, 4248.0], [1619.0, 4868.625], [1723.0, 4917.0], [1727.0, 4892.5], [1719.0, 4825.0], [1671.0, 4915.0], [1667.0, 5062.0], [1695.0, 4058.0], [1683.0, 5325.0], [1787.0, 4667.5], [1791.0, 4822.0], [1763.0, 4001.0], [1771.0, 4770.0], [1775.0, 3905.0], [1779.0, 4849.0], [1759.0, 5152.0], [1731.0, 4670.0], [1735.0, 4790.0], [1747.0, 4777.0], [1807.0, 4212.0], [1843.0, 4671.0], [1847.0, 4980.0], [1827.0, 3772.0], [1835.0, 4548.5], [1839.0, 4505.0], [1803.0, 4810.5], [1799.0, 3818.0], [1795.0, 3993.0], [1823.0, 4552.0], [1819.0, 4618.0], [1815.0, 4467.0], [1811.0, 3790.0], [1907.0, 3528.0], [1911.0, 4415.0], [1895.0, 4645.0], [1919.0, 3525.0], [1899.0, 4396.0], [1903.0, 4208.0], [1871.0, 4745.0], [1867.0, 4337.666666666667], [1879.0, 4781.0], [1875.0, 4439.0], [1971.0, 4612.0], [1983.0, 4292.0], [1955.0, 3441.0], [1959.0, 3569.0], [1967.0, 3393.0], [1927.0, 4437.0], [1931.0, 4139.0], [1935.0, 4357.0], [1947.0, 4365.0], [1939.0, 4246.0], [2039.0, 4413.0], [2023.0, 3234.0], [2019.0, 3220.0], [2027.0, 4048.0], [2031.0, 4026.0], [2043.0, 4048.0], [1995.0, 3292.0], [1987.0, 4252.0], [2015.0, 3633.5], [2011.0, 3259.0], [2007.0, 3267.0], [2158.0, 2847.0], [2166.0, 3878.0], [2174.0, 2794.0], [2118.0, 3917.0], [2126.0, 3655.5], [2134.0, 3986.0], [2150.0, 3636.0], [2054.0, 4347.0], [2062.0, 4356.0], [2070.0, 3866.0], [2110.0, 2929.0], [2102.0, 3366.0], [2086.0, 3947.0], [2294.0, 3096.0], [2286.0, 3183.0], [2246.0, 3515.0], [2254.0, 3247.0], [2270.0, 3699.0], [2302.0, 3443.0], [2278.0, 3552.5], [2238.0, 3484.0], [2230.0, 3671.0], [2222.0, 3468.0], [2214.0, 3889.0], [2422.0, 2717.0], [2414.0, 2986.5], [2374.0, 3141.3333333333335], [2390.0, 2246.0], [2398.0, 2680.0], [2430.0, 2817.0], [2406.0, 2780.0], [2334.0, 3474.0], [2326.0, 3199.0], [2318.0, 3093.5], [2310.0, 3225.0], [2366.0, 3019.0], [2342.0, 3229.5], [2454.0, 2639.0], [2446.0, 2909.6666666666665], [2462.0, 2869.0], [2438.0, 2741.0], [2486.0, 2802.0], [2478.0, 2953.0], [2470.0, 2511.0], [2159.0, 4047.0], [2119.0, 2928.0], [2127.0, 3852.0], [2143.0, 4008.5], [2111.0, 4136.0], [2055.0, 3102.0], [2063.0, 4237.0], [2071.0, 3037.0], [2079.0, 3486.5], [2103.0, 2970.0], [2095.0, 3990.0], [2087.0, 3026.0], [2295.0, 3300.0], [2303.0, 3238.0], [2247.0, 2556.0], [2279.0, 3482.0], [2239.0, 3661.0], [2231.0, 3454.0], [2415.0, 2855.0], [2431.0, 2761.0], [2375.0, 2996.0], [2383.0, 3193.0], [2399.0, 2869.0], [2407.0, 2885.0], [2335.0, 3177.0], [2327.0, 2984.0], [2319.0, 3067.0], [2311.0, 3219.0], [2367.0, 3148.0], [2351.0, 2884.0], [2343.0, 3104.0], [2495.0, 2539.0], [2463.0, 3036.0], [2455.0, 2780.5], [2487.0, 2932.0], [2479.0, 2699.0]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}, {"data": [[1251.372800000001, 5769.161600000001]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 2500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 19000.0, "minX": 1.75558536E12, "maxY": 246750.0, "series": [{"data": [[1.75558536E12, 246750.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75558536E12, 19000.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558536E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5769.161600000001, "minX": 1.75558536E12, "maxY": 5769.161600000001, "series": [{"data": [[1.75558536E12, 5769.161600000001]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558536E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5769.0883999999905, "minX": 1.75558536E12, "maxY": 5769.0883999999905, "series": [{"data": [[1.75558536E12, 5769.0883999999905]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558536E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 5488.779200000002, "minX": 1.75558536E12, "maxY": 5488.779200000002, "series": [{"data": [[1.75558536E12, 5488.779200000002]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558536E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1864.0, "minX": 1.75558536E12, "maxY": 8863.0, "series": [{"data": [[1.75558536E12, 8863.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75558536E12, 7672.300000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75558536E12, 8496.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75558536E12, 8170.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75558536E12, 1864.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75558536E12, 6350.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558536E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2753.5, "minX": 124.0, "maxY": 7559.0, "series": [{"data": [[291.0, 3371.0], [288.0, 5138.0], [579.0, 6953.0], [345.0, 6369.0], [390.0, 4367.0], [483.0, 7559.0], [124.0, 2753.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 579.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2753.5, "minX": 124.0, "maxY": 7559.0, "series": [{"data": [[291.0, 3371.0], [288.0, 5138.0], [579.0, 6952.0], [345.0, 6367.0], [390.0, 4366.5], [483.0, 7559.0], [124.0, 2753.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 579.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558536E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558536E12, 41.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558536E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558536E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558536E12, 41.666666666666664]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558536E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558536E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558536E12, 41.666666666666664]], "isOverall": false, "label": "ดึงข้อมูลการส่งตัวภายในระบบ NCDs-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558536E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 41.666666666666664, "minX": 1.75558536E12, "maxY": 41.666666666666664, "series": [{"data": [[1.75558536E12, 41.666666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558536E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

