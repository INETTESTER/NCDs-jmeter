/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "maxY": 4892.0, "series": [{"data": [[0.0, 31.0], [0.1, 32.0], [0.2, 33.0], [0.3, 33.0], [0.4, 34.0], [0.5, 34.0], [0.6, 34.0], [0.7, 35.0], [0.8, 37.0], [0.9, 38.0], [1.0, 39.0], [1.1, 40.0], [1.2, 41.0], [1.3, 41.0], [1.4, 42.0], [1.5, 43.0], [1.6, 44.0], [1.7, 45.0], [1.8, 48.0], [1.9, 49.0], [2.0, 50.0], [2.1, 52.0], [2.2, 53.0], [2.3, 55.0], [2.4, 56.0], [2.5, 58.0], [2.6, 59.0], [2.7, 60.0], [2.8, 60.0], [2.9, 61.0], [3.0, 62.0], [3.1, 62.0], [3.2, 62.0], [3.3, 65.0], [3.4, 66.0], [3.5, 68.0], [3.6, 69.0], [3.7, 70.0], [3.8, 70.0], [3.9, 76.0], [4.0, 77.0], [4.1, 78.0], [4.2, 78.0], [4.3, 78.0], [4.4, 83.0], [4.5, 87.0], [4.6, 92.0], [4.7, 95.0], [4.8, 99.0], [4.9, 101.0], [5.0, 102.0], [5.1, 106.0], [5.2, 106.0], [5.3, 108.0], [5.4, 113.0], [5.5, 124.0], [5.6, 126.0], [5.7, 131.0], [5.8, 140.0], [5.9, 141.0], [6.0, 156.0], [6.1, 157.0], [6.2, 187.0], [6.3, 187.0], [6.4, 195.0], [6.5, 200.0], [6.6, 215.0], [6.7, 217.0], [6.8, 232.0], [6.9, 235.0], [7.0, 245.0], [7.1, 248.0], [7.2, 275.0], [7.3, 283.0], [7.4, 304.0], [7.5, 304.0], [7.6, 342.0], [7.7, 441.0], [7.8, 445.0], [7.9, 447.0], [8.0, 468.0], [8.1, 484.0], [8.2, 485.0], [8.3, 500.0], [8.4, 537.0], [8.5, 545.0], [8.6, 564.0], [8.7, 580.0], [8.8, 601.0], [8.9, 602.0], [9.0, 608.0], [9.1, 609.0], [9.2, 653.0], [9.3, 672.0], [9.4, 694.0], [9.5, 705.0], [9.6, 713.0], [9.7, 716.0], [9.8, 727.0], [9.9, 730.0], [10.0, 736.0], [10.1, 737.0], [10.2, 743.0], [10.3, 753.0], [10.4, 760.0], [10.5, 765.0], [10.6, 791.0], [10.7, 792.0], [10.8, 793.0], [10.9, 796.0], [11.0, 825.0], [11.1, 829.0], [11.2, 832.0], [11.3, 844.0], [11.4, 860.0], [11.5, 880.0], [11.6, 890.0], [11.7, 896.0], [11.8, 918.0], [11.9, 936.0], [12.0, 953.0], [12.1, 954.0], [12.2, 967.0], [12.3, 968.0], [12.4, 974.0], [12.5, 975.0], [12.6, 980.0], [12.7, 989.0], [12.8, 991.0], [12.9, 994.0], [13.0, 999.0], [13.1, 1003.0], [13.2, 1004.0], [13.3, 1005.0], [13.4, 1012.0], [13.5, 1013.0], [13.6, 1041.0], [13.7, 1043.0], [13.8, 1056.0], [13.9, 1060.0], [14.0, 1069.0], [14.1, 1073.0], [14.2, 1084.0], [14.3, 1095.0], [14.4, 1102.0], [14.5, 1106.0], [14.6, 1125.0], [14.7, 1130.0], [14.8, 1141.0], [14.9, 1146.0], [15.0, 1151.0], [15.1, 1152.0], [15.2, 1163.0], [15.3, 1178.0], [15.4, 1180.0], [15.5, 1191.0], [15.6, 1213.0], [15.7, 1229.0], [15.8, 1250.0], [15.9, 1255.0], [16.0, 1265.0], [16.1, 1272.0], [16.2, 1284.0], [16.3, 1288.0], [16.4, 1290.0], [16.5, 1295.0], [16.6, 1315.0], [16.7, 1317.0], [16.8, 1322.0], [16.9, 1330.0], [17.0, 1338.0], [17.1, 1340.0], [17.2, 1341.0], [17.3, 1343.0], [17.4, 1348.0], [17.5, 1350.0], [17.6, 1351.0], [17.7, 1360.0], [17.8, 1365.0], [17.9, 1365.0], [18.0, 1368.0], [18.1, 1369.0], [18.2, 1377.0], [18.3, 1380.0], [18.4, 1391.0], [18.5, 1392.0], [18.6, 1410.0], [18.7, 1418.0], [18.8, 1429.0], [18.9, 1444.0], [19.0, 1446.0], [19.1, 1460.0], [19.2, 1462.0], [19.3, 1467.0], [19.4, 1483.0], [19.5, 1484.0], [19.6, 1489.0], [19.7, 1492.0], [19.8, 1505.0], [19.9, 1507.0], [20.0, 1525.0], [20.1, 1525.0], [20.2, 1552.0], [20.3, 1558.0], [20.4, 1563.0], [20.5, 1572.0], [20.6, 1589.0], [20.7, 1595.0], [20.8, 1609.0], [20.9, 1612.0], [21.0, 1617.0], [21.1, 1629.0], [21.2, 1649.0], [21.3, 1655.0], [21.4, 1659.0], [21.5, 1664.0], [21.6, 1669.0], [21.7, 1678.0], [21.8, 1682.0], [21.9, 1682.0], [22.0, 1690.0], [22.1, 1691.0], [22.2, 1693.0], [22.3, 1693.0], [22.4, 1706.0], [22.5, 1728.0], [22.6, 1731.0], [22.7, 1733.0], [22.8, 1739.0], [22.9, 1740.0], [23.0, 1751.0], [23.1, 1758.0], [23.2, 1762.0], [23.3, 1770.0], [23.4, 1793.0], [23.5, 1797.0], [23.6, 1800.0], [23.7, 1808.0], [23.8, 1814.0], [23.9, 1816.0], [24.0, 1826.0], [24.1, 1834.0], [24.2, 1875.0], [24.3, 1883.0], [24.4, 1905.0], [24.5, 1906.0], [24.6, 1911.0], [24.7, 1912.0], [24.8, 1917.0], [24.9, 1917.0], [25.0, 1929.0], [25.1, 1930.0], [25.2, 1935.0], [25.3, 1937.0], [25.4, 1942.0], [25.5, 1950.0], [25.6, 1956.0], [25.7, 1958.0], [25.8, 1963.0], [25.9, 1964.0], [26.0, 1970.0], [26.1, 1970.0], [26.2, 1984.0], [26.3, 1985.0], [26.4, 1988.0], [26.5, 1993.0], [26.6, 1995.0], [26.7, 1997.0], [26.8, 2007.0], [26.9, 2009.0], [27.0, 2016.0], [27.1, 2019.0], [27.2, 2033.0], [27.3, 2035.0], [27.4, 2044.0], [27.5, 2046.0], [27.6, 2053.0], [27.7, 2054.0], [27.8, 2056.0], [27.9, 2056.0], [28.0, 2066.0], [28.1, 2069.0], [28.2, 2075.0], [28.3, 2075.0], [28.4, 2085.0], [28.5, 2093.0], [28.6, 2100.0], [28.7, 2102.0], [28.8, 2105.0], [28.9, 2108.0], [29.0, 2109.0], [29.1, 2110.0], [29.2, 2124.0], [29.3, 2125.0], [29.4, 2129.0], [29.5, 2139.0], [29.6, 2168.0], [29.7, 2178.0], [29.8, 2185.0], [29.9, 2185.0], [30.0, 2190.0], [30.1, 2190.0], [30.2, 2199.0], [30.3, 2208.0], [30.4, 2220.0], [30.5, 2222.0], [30.6, 2225.0], [30.7, 2230.0], [30.8, 2237.0], [30.9, 2240.0], [31.0, 2250.0], [31.1, 2252.0], [31.2, 2259.0], [31.3, 2272.0], [31.4, 2279.0], [31.5, 2279.0], [31.6, 2287.0], [31.7, 2287.0], [31.8, 2290.0], [31.9, 2295.0], [32.0, 2296.0], [32.1, 2296.0], [32.2, 2302.0], [32.3, 2303.0], [32.4, 2311.0], [32.5, 2314.0], [32.6, 2318.0], [32.7, 2318.0], [32.8, 2319.0], [32.9, 2322.0], [33.0, 2324.0], [33.1, 2324.0], [33.2, 2328.0], [33.3, 2329.0], [33.4, 2332.0], [33.5, 2340.0], [33.6, 2343.0], [33.7, 2346.0], [33.8, 2351.0], [33.9, 2352.0], [34.0, 2360.0], [34.1, 2363.0], [34.2, 2368.0], [34.3, 2377.0], [34.4, 2379.0], [34.5, 2381.0], [34.6, 2381.0], [34.7, 2384.0], [34.8, 2384.0], [34.9, 2386.0], [35.0, 2388.0], [35.1, 2393.0], [35.2, 2394.0], [35.3, 2398.0], [35.4, 2404.0], [35.5, 2407.0], [35.6, 2407.0], [35.7, 2408.0], [35.8, 2410.0], [35.9, 2412.0], [36.0, 2413.0], [36.1, 2414.0], [36.2, 2415.0], [36.3, 2417.0], [36.4, 2418.0], [36.5, 2419.0], [36.6, 2420.0], [36.7, 2427.0], [36.8, 2428.0], [36.9, 2434.0], [37.0, 2437.0], [37.1, 2447.0], [37.2, 2450.0], [37.3, 2455.0], [37.4, 2457.0], [37.5, 2458.0], [37.6, 2460.0], [37.7, 2464.0], [37.8, 2465.0], [37.9, 2470.0], [38.0, 2471.0], [38.1, 2473.0], [38.2, 2473.0], [38.3, 2478.0], [38.4, 2481.0], [38.5, 2485.0], [38.6, 2488.0], [38.7, 2493.0], [38.8, 2493.0], [38.9, 2504.0], [39.0, 2507.0], [39.1, 2508.0], [39.2, 2509.0], [39.3, 2516.0], [39.4, 2519.0], [39.5, 2522.0], [39.6, 2525.0], [39.7, 2531.0], [39.8, 2532.0], [39.9, 2535.0], [40.0, 2536.0], [40.1, 2539.0], [40.2, 2540.0], [40.3, 2542.0], [40.4, 2544.0], [40.5, 2551.0], [40.6, 2553.0], [40.7, 2558.0], [40.8, 2562.0], [40.9, 2564.0], [41.0, 2566.0], [41.1, 2566.0], [41.2, 2567.0], [41.3, 2577.0], [41.4, 2581.0], [41.5, 2597.0], [41.6, 2603.0], [41.7, 2607.0], [41.8, 2608.0], [41.9, 2609.0], [42.0, 2614.0], [42.1, 2621.0], [42.2, 2625.0], [42.3, 2644.0], [42.4, 2644.0], [42.5, 2665.0], [42.6, 2669.0], [42.7, 2674.0], [42.8, 2676.0], [42.9, 2682.0], [43.0, 2685.0], [43.1, 2690.0], [43.2, 2690.0], [43.3, 2697.0], [43.4, 2698.0], [43.5, 2702.0], [43.6, 2703.0], [43.7, 2705.0], [43.8, 2715.0], [43.9, 2717.0], [44.0, 2719.0], [44.1, 2721.0], [44.2, 2729.0], [44.3, 2731.0], [44.4, 2733.0], [44.5, 2734.0], [44.6, 2734.0], [44.7, 2741.0], [44.8, 2741.0], [44.9, 2743.0], [45.0, 2744.0], [45.1, 2744.0], [45.2, 2746.0], [45.3, 2750.0], [45.4, 2751.0], [45.5, 2752.0], [45.6, 2752.0], [45.7, 2758.0], [45.8, 2758.0], [45.9, 2762.0], [46.0, 2764.0], [46.1, 2767.0], [46.2, 2771.0], [46.3, 2772.0], [46.4, 2773.0], [46.5, 2775.0], [46.6, 2775.0], [46.7, 2776.0], [46.8, 2778.0], [46.9, 2780.0], [47.0, 2782.0], [47.1, 2785.0], [47.2, 2787.0], [47.3, 2793.0], [47.4, 2794.0], [47.5, 2803.0], [47.6, 2805.0], [47.7, 2808.0], [47.8, 2809.0], [47.9, 2811.0], [48.0, 2812.0], [48.1, 2816.0], [48.2, 2819.0], [48.3, 2828.0], [48.4, 2829.0], [48.5, 2831.0], [48.6, 2832.0], [48.7, 2833.0], [48.8, 2844.0], [48.9, 2855.0], [49.0, 2859.0], [49.1, 2862.0], [49.2, 2868.0], [49.3, 2887.0], [49.4, 2893.0], [49.5, 2895.0], [49.6, 2896.0], [49.7, 2897.0], [49.8, 2897.0], [49.9, 2905.0], [50.0, 2905.0], [50.1, 2915.0], [50.2, 2916.0], [50.3, 2926.0], [50.4, 2929.0], [50.5, 2930.0], [50.6, 2931.0], [50.7, 2936.0], [50.8, 2941.0], [50.9, 2949.0], [51.0, 2957.0], [51.1, 2959.0], [51.2, 2960.0], [51.3, 2966.0], [51.4, 2967.0], [51.5, 2971.0], [51.6, 2972.0], [51.7, 2977.0], [51.8, 2979.0], [51.9, 2979.0], [52.0, 2980.0], [52.1, 2986.0], [52.2, 2987.0], [52.3, 2990.0], [52.4, 2990.0], [52.5, 2991.0], [52.6, 2991.0], [52.7, 2996.0], [52.8, 2997.0], [52.9, 3004.0], [53.0, 3004.0], [53.1, 3007.0], [53.2, 3008.0], [53.3, 3013.0], [53.4, 3017.0], [53.5, 3023.0], [53.6, 3024.0], [53.7, 3028.0], [53.8, 3036.0], [53.9, 3038.0], [54.0, 3038.0], [54.1, 3039.0], [54.2, 3040.0], [54.3, 3045.0], [54.4, 3045.0], [54.5, 3057.0], [54.6, 3058.0], [54.7, 3059.0], [54.8, 3060.0], [54.9, 3067.0], [55.0, 3071.0], [55.1, 3071.0], [55.2, 3075.0], [55.3, 3078.0], [55.4, 3078.0], [55.5, 3081.0], [55.6, 3082.0], [55.7, 3083.0], [55.8, 3083.0], [55.9, 3085.0], [56.0, 3088.0], [56.1, 3096.0], [56.2, 3097.0], [56.3, 3100.0], [56.4, 3106.0], [56.5, 3110.0], [56.6, 3111.0], [56.7, 3113.0], [56.8, 3114.0], [56.9, 3115.0], [57.0, 3117.0], [57.1, 3120.0], [57.2, 3121.0], [57.3, 3123.0], [57.4, 3123.0], [57.5, 3126.0], [57.6, 3129.0], [57.7, 3140.0], [57.8, 3151.0], [57.9, 3151.0], [58.0, 3161.0], [58.1, 3164.0], [58.2, 3167.0], [58.3, 3167.0], [58.4, 3167.0], [58.5, 3177.0], [58.6, 3181.0], [58.7, 3190.0], [58.8, 3192.0], [58.9, 3196.0], [59.0, 3198.0], [59.1, 3201.0], [59.2, 3202.0], [59.3, 3206.0], [59.4, 3209.0], [59.5, 3218.0], [59.6, 3222.0], [59.7, 3230.0], [59.8, 3234.0], [59.9, 3238.0], [60.0, 3239.0], [60.1, 3243.0], [60.2, 3247.0], [60.3, 3251.0], [60.4, 3253.0], [60.5, 3257.0], [60.6, 3259.0], [60.7, 3261.0], [60.8, 3266.0], [60.9, 3269.0], [61.0, 3270.0], [61.1, 3275.0], [61.2, 3279.0], [61.3, 3284.0], [61.4, 3284.0], [61.5, 3286.0], [61.6, 3286.0], [61.7, 3287.0], [61.8, 3290.0], [61.9, 3290.0], [62.0, 3293.0], [62.1, 3299.0], [62.2, 3301.0], [62.3, 3304.0], [62.4, 3305.0], [62.5, 3310.0], [62.6, 3311.0], [62.7, 3315.0], [62.8, 3315.0], [62.9, 3318.0], [63.0, 3319.0], [63.1, 3323.0], [63.2, 3326.0], [63.3, 3327.0], [63.4, 3327.0], [63.5, 3332.0], [63.6, 3336.0], [63.7, 3339.0], [63.8, 3339.0], [63.9, 3341.0], [64.0, 3342.0], [64.1, 3345.0], [64.2, 3345.0], [64.3, 3351.0], [64.4, 3358.0], [64.5, 3360.0], [64.6, 3362.0], [64.7, 3367.0], [64.8, 3369.0], [64.9, 3377.0], [65.0, 3380.0], [65.1, 3382.0], [65.2, 3384.0], [65.3, 3386.0], [65.4, 3387.0], [65.5, 3392.0], [65.6, 3398.0], [65.7, 3402.0], [65.8, 3406.0], [65.9, 3407.0], [66.0, 3408.0], [66.1, 3409.0], [66.2, 3410.0], [66.3, 3412.0], [66.4, 3412.0], [66.5, 3415.0], [66.6, 3415.0], [66.7, 3416.0], [66.8, 3419.0], [66.9, 3422.0], [67.0, 3425.0], [67.1, 3432.0], [67.2, 3433.0], [67.3, 3435.0], [67.4, 3435.0], [67.5, 3438.0], [67.6, 3438.0], [67.7, 3440.0], [67.8, 3442.0], [67.9, 3453.0], [68.0, 3455.0], [68.1, 3456.0], [68.2, 3457.0], [68.3, 3458.0], [68.4, 3460.0], [68.5, 3470.0], [68.6, 3470.0], [68.7, 3476.0], [68.8, 3478.0], [68.9, 3480.0], [69.0, 3480.0], [69.1, 3485.0], [69.2, 3489.0], [69.3, 3493.0], [69.4, 3494.0], [69.5, 3497.0], [69.6, 3497.0], [69.7, 3505.0], [69.8, 3506.0], [69.9, 3507.0], [70.0, 3509.0], [70.1, 3511.0], [70.2, 3515.0], [70.3, 3520.0], [70.4, 3521.0], [70.5, 3524.0], [70.6, 3525.0], [70.7, 3529.0], [70.8, 3531.0], [70.9, 3538.0], [71.0, 3542.0], [71.1, 3544.0], [71.2, 3545.0], [71.3, 3551.0], [71.4, 3551.0], [71.5, 3553.0], [71.6, 3554.0], [71.7, 3557.0], [71.8, 3558.0], [71.9, 3563.0], [72.0, 3565.0], [72.1, 3570.0], [72.2, 3572.0], [72.3, 3576.0], [72.4, 3578.0], [72.5, 3580.0], [72.6, 3584.0], [72.7, 3585.0], [72.8, 3590.0], [72.9, 3592.0], [73.0, 3592.0], [73.1, 3594.0], [73.2, 3595.0], [73.3, 3605.0], [73.4, 3605.0], [73.5, 3606.0], [73.6, 3608.0], [73.7, 3610.0], [73.8, 3610.0], [73.9, 3610.0], [74.0, 3610.0], [74.1, 3615.0], [74.2, 3616.0], [74.3, 3617.0], [74.4, 3619.0], [74.5, 3622.0], [74.6, 3624.0], [74.7, 3626.0], [74.8, 3628.0], [74.9, 3631.0], [75.0, 3634.0], [75.1, 3637.0], [75.2, 3639.0], [75.3, 3649.0], [75.4, 3652.0], [75.5, 3653.0], [75.6, 3653.0], [75.7, 3656.0], [75.8, 3657.0], [75.9, 3660.0], [76.0, 3666.0], [76.1, 3676.0], [76.2, 3680.0], [76.3, 3688.0], [76.4, 3689.0], [76.5, 3694.0], [76.6, 3694.0], [76.7, 3695.0], [76.8, 3698.0], [76.9, 3703.0], [77.0, 3704.0], [77.1, 3706.0], [77.2, 3710.0], [77.3, 3718.0], [77.4, 3718.0], [77.5, 3722.0], [77.6, 3723.0], [77.7, 3727.0], [77.8, 3730.0], [77.9, 3735.0], [78.0, 3738.0], [78.1, 3741.0], [78.2, 3741.0], [78.3, 3742.0], [78.4, 3742.0], [78.5, 3747.0], [78.6, 3747.0], [78.7, 3752.0], [78.8, 3753.0], [78.9, 3754.0], [79.0, 3760.0], [79.1, 3761.0], [79.2, 3763.0], [79.3, 3769.0], [79.4, 3770.0], [79.5, 3777.0], [79.6, 3783.0], [79.7, 3787.0], [79.8, 3788.0], [79.9, 3800.0], [80.0, 3803.0], [80.1, 3805.0], [80.2, 3805.0], [80.3, 3807.0], [80.4, 3810.0], [80.5, 3821.0], [80.6, 3823.0], [80.7, 3828.0], [80.8, 3833.0], [80.9, 3842.0], [81.0, 3845.0], [81.1, 3852.0], [81.2, 3853.0], [81.3, 3854.0], [81.4, 3859.0], [81.5, 3864.0], [81.6, 3864.0], [81.7, 3867.0], [81.8, 3868.0], [81.9, 3872.0], [82.0, 3872.0], [82.1, 3874.0], [82.2, 3875.0], [82.3, 3877.0], [82.4, 3881.0], [82.5, 3881.0], [82.6, 3883.0], [82.7, 3887.0], [82.8, 3889.0], [82.9, 3890.0], [83.0, 3893.0], [83.1, 3898.0], [83.2, 3898.0], [83.3, 3906.0], [83.4, 3909.0], [83.5, 3915.0], [83.6, 3917.0], [83.7, 3926.0], [83.8, 3928.0], [83.9, 3930.0], [84.0, 3939.0], [84.1, 3941.0], [84.2, 3943.0], [84.3, 3947.0], [84.4, 3947.0], [84.5, 3949.0], [84.6, 3950.0], [84.7, 3951.0], [84.8, 3954.0], [84.9, 3955.0], [85.0, 3955.0], [85.1, 3962.0], [85.2, 3964.0], [85.3, 3970.0], [85.4, 3970.0], [85.5, 3971.0], [85.6, 3972.0], [85.7, 3977.0], [85.8, 3987.0], [85.9, 3989.0], [86.0, 3989.0], [86.1, 3993.0], [86.2, 3999.0], [86.3, 4007.0], [86.4, 4008.0], [86.5, 4019.0], [86.6, 4020.0], [86.7, 4029.0], [86.8, 4032.0], [86.9, 4033.0], [87.0, 4036.0], [87.1, 4039.0], [87.2, 4042.0], [87.3, 4043.0], [87.4, 4045.0], [87.5, 4046.0], [87.6, 4052.0], [87.7, 4056.0], [87.8, 4061.0], [87.9, 4064.0], [88.0, 4066.0], [88.1, 4076.0], [88.2, 4078.0], [88.3, 4080.0], [88.4, 4081.0], [88.5, 4085.0], [88.6, 4088.0], [88.7, 4089.0], [88.8, 4096.0], [88.9, 4105.0], [89.0, 4111.0], [89.1, 4114.0], [89.2, 4115.0], [89.3, 4117.0], [89.4, 4118.0], [89.5, 4122.0], [89.6, 4131.0], [89.7, 4137.0], [89.8, 4137.0], [89.9, 4147.0], [90.0, 4150.0], [90.1, 4152.0], [90.2, 4152.0], [90.3, 4156.0], [90.4, 4156.0], [90.5, 4165.0], [90.6, 4168.0], [90.7, 4170.0], [90.8, 4170.0], [90.9, 4175.0], [91.0, 4176.0], [91.1, 4178.0], [91.2, 4181.0], [91.3, 4186.0], [91.4, 4187.0], [91.5, 4195.0], [91.6, 4197.0], [91.7, 4200.0], [91.8, 4212.0], [91.9, 4226.0], [92.0, 4226.0], [92.1, 4228.0], [92.2, 4228.0], [92.3, 4229.0], [92.4, 4233.0], [92.5, 4237.0], [92.6, 4243.0], [92.7, 4247.0], [92.8, 4249.0], [92.9, 4266.0], [93.0, 4271.0], [93.1, 4281.0], [93.2, 4282.0], [93.3, 4288.0], [93.4, 4289.0], [93.5, 4297.0], [93.6, 4309.0], [93.7, 4314.0], [93.8, 4323.0], [93.9, 4325.0], [94.0, 4326.0], [94.1, 4331.0], [94.2, 4342.0], [94.3, 4352.0], [94.4, 4366.0], [94.5, 4373.0], [94.6, 4375.0], [94.7, 4378.0], [94.8, 4380.0], [94.9, 4394.0], [95.0, 4394.0], [95.1, 4406.0], [95.2, 4413.0], [95.3, 4420.0], [95.4, 4425.0], [95.5, 4429.0], [95.6, 4436.0], [95.7, 4447.0], [95.8, 4454.0], [95.9, 4468.0], [96.0, 4474.0], [96.1, 4511.0], [96.2, 4515.0], [96.3, 4581.0], [96.4, 4590.0], [96.5, 4649.0], [96.6, 4651.0], [96.7, 4674.0], [96.8, 4678.0], [96.9, 4686.0], [97.0, 4692.0], [97.1, 4694.0], [97.2, 4696.0], [97.3, 4705.0], [97.4, 4708.0], [97.5, 4717.0], [97.6, 4723.0], [97.7, 4733.0], [97.8, 4738.0], [97.9, 4749.0], [98.0, 4757.0], [98.1, 4761.0], [98.2, 4767.0], [98.3, 4777.0], [98.4, 4780.0], [98.5, 4795.0], [98.6, 4804.0], [98.7, 4809.0], [98.8, 4809.0], [98.9, 4810.0], [99.0, 4812.0], [99.1, 4814.0], [99.2, 4817.0], [99.3, 4827.0], [99.4, 4836.0], [99.5, 4846.0], [99.6, 4847.0], [99.7, 4857.0], [99.8, 4873.0], [99.9, 4878.0], [100.0, 4892.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 73.0, "series": [{"data": [[0.0, 73.0], [600.0, 10.0], [700.0, 22.0], [800.0, 13.0], [900.0, 19.0], [1000.0, 19.0], [1100.0, 19.0], [1200.0, 14.0], [1300.0, 30.0], [1400.0, 19.0], [1500.0, 14.0], [1600.0, 24.0], [1700.0, 19.0], [1800.0, 12.0], [1900.0, 36.0], [2000.0, 27.0], [2100.0, 25.0], [2200.0, 29.0], [2300.0, 47.0], [2400.0, 53.0], [2500.0, 40.0], [2600.0, 28.0], [2700.0, 60.0], [2800.0, 36.0], [2900.0, 45.0], [3000.0, 51.0], [3100.0, 42.0], [3200.0, 47.0], [3300.0, 52.0], [3400.0, 61.0], [3500.0, 53.0], [3600.0, 54.0], [3700.0, 46.0], [3800.0, 50.0], [3900.0, 45.0], [4000.0, 39.0], [4100.0, 42.0], [4200.0, 29.0], [4300.0, 23.0], [4400.0, 15.0], [4500.0, 5.0], [4600.0, 12.0], [4700.0, 20.0], [4800.0, 22.0], [100.0, 24.0], [200.0, 14.0], [300.0, 4.0], [400.0, 9.0], [500.0, 8.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 125.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1203.0, "series": [{"data": [[0.0, 125.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 172.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1203.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 752.6486666666657, "minX": 1.75559646E12, "maxY": 752.6486666666657, "series": [{"data": [[1.75559646E12, 752.6486666666657]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559646E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.0, "maxY": 4875.0, "series": [{"data": [[2.0, 4150.0], [3.0, 4474.0], [5.0, 4330.0], [7.0, 4410.0], [8.0, 4827.0], [9.0, 4694.0], [11.0, 4210.0], [12.0, 4717.0], [14.0, 4449.0], [16.0, 4792.5], [17.0, 4809.0], [18.0, 4175.0], [19.0, 4875.0], [20.0, 4674.0], [22.0, 4385.5], [23.0, 2329.0], [24.0, 3917.0], [25.0, 2185.0], [27.0, 2190.0], [28.0, 2418.0], [29.0, 2191.0], [31.0, 3646.0], [33.0, 3458.5], [35.0, 3228.0], [36.0, 4212.0], [39.0, 4406.0], [38.0, 4295.5], [41.0, 4200.0], [40.0, 3950.0], [43.0, 4844.0], [42.0, 2450.0], [44.0, 3889.0], [47.0, 4730.5], [46.0, 4043.0], [49.0, 4249.0], [48.0, 2458.0], [51.0, 4247.0], [50.0, 4246.0], [53.0, 4372.0], [54.0, 2439.0], [57.0, 4708.0], [56.0, 4457.0], [58.0, 2785.0], [61.0, 4384.5], [60.0, 2591.0], [67.0, 4233.0], [66.0, 4812.0], [65.0, 3597.0], [64.0, 4365.5], [71.0, 3867.0], [70.0, 4848.0], [69.0, 4229.0], [68.0, 2813.0], [74.0, 3522.5], [72.0, 4176.0], [79.0, 4008.0], [78.0, 4847.0], [77.0, 4819.0], [76.0, 4149.0], [82.0, 4814.0], [81.0, 4733.0], [80.0, 4352.0], [86.0, 4153.5], [84.0, 2258.0], [91.0, 4723.0], [90.0, 4002.5], [88.0, 3765.0], [95.0, 3832.6666666666665], [94.0, 4805.0], [99.0, 4556.5], [97.0, 3915.0], [96.0, 4809.0], [102.0, 4791.0], [101.0, 4485.0], [107.0, 4181.0], [106.0, 4200.0], [105.0, 4767.0], [104.0, 4371.0], [111.0, 4136.5], [109.0, 4156.0], [108.0, 3954.0], [115.0, 4615.0], [114.0, 4323.0], [113.0, 4817.0], [112.0, 3273.0], [119.0, 4810.0], [118.0, 4382.5], [123.0, 4143.0], [122.0, 4458.0], [120.0, 4165.0], [127.0, 3893.0], [126.0, 4164.0], [125.0, 4777.0], [124.0, 3971.0], [133.0, 4299.0], [131.0, 4757.0], [130.0, 4795.0], [129.0, 4761.0], [128.0, 4590.0], [143.0, 3947.0], [142.0, 3521.0], [141.0, 3626.0], [140.0, 3839.5], [138.0, 3628.0], [137.0, 3621.0], [136.0, 4161.333333333333], [150.0, 4436.0], [149.0, 4581.0], [148.0, 4292.5], [146.0, 3489.0], [145.0, 4288.0], [144.0, 3617.0], [159.0, 3828.0], [158.0, 3827.0], [157.0, 3833.0], [156.0, 3604.0], [155.0, 3610.0], [154.0, 3853.0], [153.0, 3804.0], [152.0, 4528.5], [167.0, 3754.0], [166.0, 3761.0], [165.0, 3783.0], [164.0, 3971.0], [163.0, 3580.0], [162.0, 3972.0], [161.0, 3845.0], [160.0, 3872.0], [175.0, 3538.0], [174.0, 3545.0], [173.0, 3723.0], [172.0, 4663.0], [171.0, 3739.0], [170.0, 3551.0], [169.0, 3752.0], [168.0, 3754.0], [183.0, 3440.0], [182.0, 3489.4], [177.0, 3529.0], [176.0, 3715.0], [191.0, 3852.3333333333335], [188.0, 3284.0], [187.0, 3287.0], [186.0, 3432.0], [185.0, 3438.0], [184.0, 3442.0], [198.0, 4135.0], [197.0, 3695.0], [195.0, 3257.0], [194.0, 3259.0], [193.0, 4082.0], [192.0, 4553.0], [207.0, 3886.0], [206.0, 3679.5], [204.0, 3027.0], [203.0, 3894.0], [202.0, 2986.0], [201.0, 3777.0], [215.0, 4515.0], [214.0, 3756.0], [212.0, 3610.0], [211.0, 3883.0], [210.0, 3688.0], [209.0, 4019.0], [208.0, 4468.0], [223.0, 4373.0], [222.0, 4138.5], [220.0, 4104.0], [219.0, 3989.0], [218.0, 4200.5], [216.0, 3873.0], [231.0, 4292.5], [229.0, 3770.0], [228.0, 4121.0], [227.0, 4271.0], [226.0, 3842.0], [225.0, 3838.0], [239.0, 4314.0], [238.0, 3731.6666666666665], [235.0, 3616.0], [234.0, 3763.0], [233.0, 3619.0], [232.0, 4325.0], [246.0, 3805.0], [245.0, 4416.0], [244.0, 4396.0], [243.0, 4174.0], [241.0, 4425.0], [240.0, 3955.0], [255.0, 3507.0], [254.0, 3800.0], [253.0, 4439.0], [252.0, 3989.0], [250.0, 4152.0], [249.0, 3805.0], [248.0, 4356.5], [258.0, 3788.0], [271.0, 3742.0], [269.0, 4062.4], [264.0, 4033.0], [263.0, 3858.0], [261.0, 4080.0], [260.0, 4325.5], [257.0, 4394.0], [256.0, 4429.0], [285.0, 4375.0], [279.0, 3864.0], [278.0, 3589.0], [275.0, 3628.5], [272.0, 3617.0], [301.0, 4324.0], [302.0, 3473.0], [300.0, 3718.0], [291.0, 4118.0], [288.0, 3445.25], [299.0, 3819.0], [297.0, 3721.0], [296.0, 3718.0], [295.0, 3485.0], [294.0, 4314.0], [293.0, 3679.1666666666665], [292.0, 4378.0], [307.0, 4025.0], [319.0, 2772.0], [318.0, 3850.5], [314.0, 3810.0], [313.0, 3883.5], [311.0, 4292.0], [310.0, 3080.5], [308.0, 4342.0], [305.0, 3859.0], [304.0, 3228.0], [334.0, 4282.0], [335.0, 3634.0], [333.0, 3838.0], [332.0, 3769.0], [331.0, 3591.0], [329.0, 3433.0], [328.0, 3017.0], [327.0, 4088.0], [320.0, 3787.0], [322.0, 3961.0], [321.0, 4188.0], [326.0, 3964.0], [325.0, 3038.0], [324.0, 3890.0], [350.0, 3605.0], [351.0, 4229.0], [349.0, 3606.0], [348.0, 3410.0], [347.0, 3763.0], [346.0, 3294.0], [345.0, 3610.0], [344.0, 3362.0], [343.0, 3386.0], [337.0, 3008.0], [336.0, 3408.0], [339.0, 3409.0], [338.0, 3406.0], [342.0, 4243.0], [340.0, 3615.0], [355.0, 3493.5], [365.0, 3694.0], [366.0, 4237.0], [364.0, 3461.5], [353.0, 4227.0], [352.0, 4228.0], [362.0, 3553.5], [360.0, 3747.0], [359.0, 3544.0], [358.0, 4042.0], [357.0, 3392.0], [356.0, 3414.0], [381.0, 3341.0], [383.0, 3638.5], [380.0, 4187.0], [370.0, 3572.0], [369.0, 3286.0], [368.0, 3823.0], [379.0, 3382.0], [378.0, 4064.0], [377.0, 3402.0], [376.0, 4221.5], [374.0, 3884.5], [372.0, 3584.5], [396.0, 3934.5], [398.0, 3317.0], [399.0, 3319.0], [397.0, 3332.0], [394.0, 3517.0], [392.0, 3705.0], [391.0, 3854.0], [385.0, 4182.0], [384.0, 3553.0], [387.0, 4056.0], [386.0, 4178.0], [390.0, 3710.0], [389.0, 4146.0], [388.0, 3544.0], [414.0, 3880.5], [415.0, 3480.0], [412.0, 4115.0], [403.0, 4153.5], [401.0, 3341.0], [400.0, 3305.0], [411.0, 4085.0], [410.0, 3270.0], [409.0, 3741.0], [408.0, 3793.0], [407.0, 3853.0], [406.0, 4152.0], [404.0, 3494.0], [430.0, 3612.0], [431.0, 4076.0], [428.0, 4052.0], [419.0, 4105.0], [418.0, 2862.0], [417.0, 4081.0], [416.0, 3624.0], [427.0, 3218.0], [426.0, 3815.0], [425.0, 4114.0], [424.0, 4007.0], [423.0, 4088.0], [422.0, 3192.0], [421.0, 3610.0], [420.0, 3928.0], [435.0, 4046.0], [446.0, 3508.5], [444.0, 4042.5], [443.0, 2915.0], [441.0, 3679.0], [439.0, 3605.0], [438.0, 3520.5], [436.0, 2831.0], [434.0, 4073.0], [433.0, 2819.0], [432.0, 3726.0], [462.0, 4032.0], [463.0, 2553.0], [461.0, 4032.0], [460.0, 4061.0], [459.0, 4039.0], [458.0, 3411.0], [457.0, 3267.0], [456.0, 3412.0], [454.0, 3253.0], [451.0, 3585.0], [450.0, 3590.0], [449.0, 4078.0], [448.0, 3120.5], [453.0, 3730.0], [477.0, 3200.0], [476.0, 3374.0], [475.0, 4037.0], [474.0, 3885.0], [472.0, 2966.5], [470.0, 3384.0], [469.0, 3951.0], [468.0, 3559.0], [467.0, 3218.6666666666665], [464.0, 3760.0], [494.0, 2741.0], [495.0, 3656.0], [493.0, 3633.5], [483.0, 3909.0], [482.0, 2775.0], [481.0, 3367.0], [480.0, 3270.6666666666665], [491.0, 3177.0], [490.0, 3987.0], [489.0, 3926.0], [488.0, 3606.5], [486.0, 3315.0], [485.0, 3613.0], [484.0, 3360.0], [508.0, 3698.0], [510.0, 3695.0], [511.0, 3987.0], [509.0, 3628.0], [507.0, 3515.0], [506.0, 3880.75], [502.0, 3970.0], [496.0, 3951.0], [499.0, 3622.0], [498.0, 3659.5], [501.0, 3551.0], [500.0, 3293.0], [538.0, 1922.5], [542.0, 3100.0], [543.0, 3903.0], [529.0, 3935.5], [531.0, 3930.0], [530.0, 3110.0], [541.0, 1956.0], [540.0, 3297.0], [539.0, 3939.0], [536.0, 2588.3333333333335], [519.0, 3631.6666666666665], [516.0, 3613.5], [514.0, 2811.0], [513.0, 3650.5], [527.0, 1941.0], [526.0, 3304.0], [525.0, 3941.0], [524.0, 3939.0], [523.0, 3605.5], [521.0, 3306.0], [520.0, 3140.0], [533.0, 3088.0], [532.0, 2046.0], [570.0, 2832.5], [574.0, 3608.0], [575.0, 3045.0], [560.0, 1813.0], [562.0, 3881.0], [561.0, 3261.0], [565.0, 3445.5], [563.0, 3209.0], [573.0, 3083.0], [572.0, 3240.0], [571.0, 3243.0], [569.0, 3056.0], [551.0, 3877.0], [550.0, 3401.6666666666665], [549.0, 3881.0], [546.0, 3285.0], [545.0, 1883.0], [544.0, 1906.0], [559.0, 3775.0], [558.0, 1816.0], [557.0, 1814.0], [556.0, 3867.0], [555.0, 3863.0], [554.0, 1834.0], [553.0, 3872.0], [552.0, 3872.0], [567.0, 3761.0], [566.0, 2994.0], [600.0, 3489.0], [605.0, 3442.6666666666665], [606.0, 3631.0], [592.0, 3480.0], [603.0, 3315.0], [602.0, 3465.0], [601.0, 3666.0], [591.0, 3578.0], [578.0, 3803.0], [577.0, 2164.0], [581.0, 3514.5], [580.0, 1460.0], [583.0, 1750.0], [582.0, 3013.0], [590.0, 2542.0], [588.0, 3680.0], [587.0, 3164.0], [586.0, 1609.0], [585.0, 3167.0], [584.0, 1771.0], [598.0, 3151.0], [597.0, 3151.0], [595.0, 3299.0], [594.0, 3260.0], [633.0, 1360.0], [637.0, 3470.0], [639.0, 3306.0], [625.0, 3235.0], [627.0, 1368.0], [626.0, 2897.0], [629.0, 3594.0], [628.0, 1365.0], [636.0, 2787.0], [635.0, 3742.0], [634.0, 3446.0], [632.0, 3593.0], [613.0, 3336.0], [612.0, 3703.0], [611.0, 3311.0], [609.0, 3807.0], [608.0, 3185.0], [623.0, 3733.0], [622.0, 3412.0], [621.0, 3115.0], [620.0, 3694.0], [619.0, 3082.0], [618.0, 3123.0], [617.0, 2813.5], [631.0, 3250.0], [630.0, 3251.0], [670.0, 3509.0], [671.0, 2750.0], [657.0, 1060.0], [656.0, 3158.0], [669.0, 2465.0], [666.0, 2721.0], [665.0, 3548.0], [664.0, 2374.5], [653.0, 1321.0], [640.0, 3584.0], [642.0, 2779.0], [641.0, 3235.0], [646.0, 2724.6666666666665], [643.0, 1351.0], [651.0, 1340.0], [650.0, 3652.0], [649.0, 3082.0], [648.0, 2500.5], [662.0, 3676.0], [661.0, 1053.0], [660.0, 1295.0], [659.0, 2008.5], [698.0, 3019.0], [702.0, 1073.0], [703.0, 3525.0], [689.0, 3142.0], [691.0, 3024.0], [690.0, 3590.0], [701.0, 1213.0], [700.0, 968.0], [699.0, 3481.0], [697.0, 2691.3333333333335], [679.0, 3114.0], [678.0, 2690.0], [677.0, 1191.0], [676.0, 3565.0], [675.0, 3493.0], [674.0, 2698.0], [673.0, 2959.0], [672.0, 3181.0], [687.0, 3453.0], [686.0, 3653.0], [685.0, 3657.0], [684.0, 3036.0], [683.0, 1199.0], [682.0, 2775.0], [681.0, 1970.0], [694.0, 3213.0], [692.0, 1160.0], [729.0, 3342.0], [734.0, 2987.0], [735.0, 3387.0], [721.0, 2991.0], [720.0, 3267.5], [723.0, 3007.0], [722.0, 3408.0], [733.0, 1896.0], [731.0, 3566.0], [730.0, 1025.0], [718.0, 936.0], [704.0, 3470.0], [709.0, 3217.5], [707.0, 3046.3333333333335], [711.0, 3407.0], [710.0, 2733.0], [717.0, 3416.0], [716.0, 3419.0], [715.0, 2986.0], [714.0, 3422.0], [713.0, 1056.0], [712.0, 954.0], [727.0, 2751.0], [726.0, 2962.0], [725.0, 3121.0], [724.0, 3406.0], [760.0, 2990.0], [765.0, 2980.0], [766.0, 3339.0], [752.0, 1064.5], [754.0, 994.0], [753.0, 3085.0], [764.0, 915.5], [762.0, 975.0], [761.0, 2653.0], [751.0, 3058.0], [737.0, 3363.0], [736.0, 3570.0], [739.0, 3382.0], [738.0, 3118.0], [742.0, 1012.0], [741.0, 2285.5], [748.0, 2971.0], [747.0, 1004.0], [746.0, 1005.0], [745.0, 1115.0], [744.0, 2195.0], [759.0, 3506.0], [758.0, 3358.0], [757.0, 3351.0], [756.0, 1016.0], [798.0, 757.0], [799.0, 2485.0], [797.0, 760.0], [796.0, 1770.5], [794.0, 1852.0], [792.0, 2169.0], [782.0, 3129.0], [769.0, 3327.0], [768.0, 2078.0], [772.0, 3310.0], [771.0, 2079.0], [775.0, 3408.0], [774.0, 2682.0], [781.0, 2665.0], [780.0, 2144.5], [778.0, 3415.0], [777.0, 3375.0], [791.0, 792.0], [790.0, 793.0], [784.0, 2941.0], [829.0, 2109.6666666666665], [830.0, 2420.0], [826.0, 3301.0], [825.0, 2895.0], [824.0, 713.0], [807.0, 2086.0], [805.0, 2761.0], [804.0, 2829.0], [802.0, 2473.0], [801.0, 1825.0], [814.0, 733.0], [812.0, 731.0], [811.0, 3023.0], [810.0, 3234.0], [809.0, 2069.0], [823.0, 1542.0], [820.0, 3215.0], [819.0, 2493.6666666666665], [817.0, 1816.0], [857.0, 3236.0], [862.0, 3141.5], [863.0, 3238.0], [850.0, 2385.0], [848.0, 644.0], [860.0, 2973.0], [859.0, 2367.0], [858.0, 2816.0], [847.0, 2406.0], [832.0, 1927.0], [834.0, 3005.0], [833.0, 2553.0], [838.0, 2470.0], [836.0, 2849.5], [846.0, 3060.0], [845.0, 2394.0], [844.0, 2871.0], [842.0, 2897.0], [841.0, 2396.0], [840.0, 1598.5], [855.0, 2726.5], [854.0, 3151.0], [852.0, 3167.0], [851.0, 3345.0], [894.0, 2727.6666666666665], [895.0, 2608.0], [881.0, 2470.0], [880.0, 3117.0], [883.0, 3311.0], [882.0, 2488.0], [891.0, 3100.0], [890.0, 2848.0], [889.0, 2771.0], [888.0, 2493.0], [879.0, 2990.0], [866.0, 2924.0], [864.0, 2360.0], [871.0, 2345.6666666666665], [868.0, 608.5], [878.0, 1475.5], [876.0, 2665.5], [874.0, 2738.0], [873.0, 2966.0], [872.0, 3112.0], [887.0, 584.0], [886.0, 2458.0], [885.0, 2758.0], [884.0, 3096.0], [922.0, 2943.6666666666665], [926.0, 2477.0], [927.0, 3123.0], [913.0, 2904.0], [915.0, 2295.0], [914.0, 2296.0], [925.0, 2780.0], [924.0, 2743.0], [923.0, 554.0], [921.0, 2746.0], [903.0, 545.0], [902.0, 3071.0], [900.0, 3253.0], [899.0, 1589.5], [897.0, 2005.0], [910.0, 2302.0], [909.0, 580.0], [908.0, 2102.0], [905.0, 3075.0], [904.0, 537.0], [919.0, 2569.5], [916.0, 2412.0], [953.0, 2393.0], [957.0, 2617.0], [959.0, 2574.5], [944.0, 2829.0], [947.0, 1789.0], [945.0, 2960.0], [949.0, 2756.0], [948.0, 485.0], [956.0, 3040.0], [955.0, 3045.0], [954.0, 3115.0], [952.0, 2949.0], [935.0, 3185.0], [934.0, 2411.0], [933.0, 1771.0], [928.0, 3195.0], [943.0, 3169.0], [942.0, 441.0], [941.0, 2447.0], [940.0, 2464.0], [939.0, 445.0], [938.0, 2673.0], [937.0, 2991.0], [936.0, 2427.0], [951.0, 443.0], [950.0, 2434.0], [986.0, 2744.0], [978.0, 3113.0], [990.0, 2388.0], [991.0, 2384.0], [977.0, 2603.0], [976.0, 2746.0], [989.0, 2643.6666666666665], [985.0, 2905.5], [967.0, 2368.0], [966.0, 2627.0], [965.0, 2729.0], [964.0, 2351.0], [962.0, 2669.0], [961.0, 2916.0], [960.0, 2802.0], [975.0, 2905.0], [974.0, 2597.0], [973.0, 2930.0], [972.0, 2931.0], [971.0, 1785.0], [969.0, 2741.0], [968.0, 2679.0], [983.0, 3078.0], [981.0, 2734.0], [980.0, 2566.0], [1016.0, 2703.0], [1022.0, 3037.0], [1023.0, 3038.0], [1021.0, 2323.0], [1019.0, 2676.0], [1018.0, 3057.0], [1003.0, 2363.0], [992.0, 2332.0], [994.0, 2893.0], [993.0, 3060.0], [997.0, 2788.5], [995.0, 2625.0], [999.0, 3071.0], [998.0, 2734.0], [1002.0, 3071.0], [1001.0, 2621.0], [1000.0, 3071.0], [1013.0, 2705.0], [1015.0, 2651.8], [1008.0, 2303.0], [1078.0, 2807.0], [1082.0, 2774.0], [1062.0, 2793.0], [1064.0, 2936.0], [1080.0, 2521.0], [1076.0, 2525.0], [1038.0, 2519.0], [1032.0, 2581.0], [1050.0, 3011.0], [1046.0, 2558.0], [1068.0, 2782.0], [1144.0, 2007.0], [1140.0, 2055.0], [1134.0, 342.0], [1150.0, 2564.0], [1148.0, 1074.0], [1138.0, 1278.5], [1136.0, 200.0], [1118.0, 1920.25], [1098.0, 2178.0], [1110.0, 2564.0], [1108.0, 2531.0], [1106.0, 2488.0], [1104.0, 2914.0], [1210.0, 2289.5], [1212.0, 2340.0], [1186.0, 1306.0], [1192.0, 130.0], [1188.0, 187.0], [1208.0, 2452.5], [1166.0, 2043.0], [1164.0, 2279.0], [1160.0, 2279.0], [1158.0, 1364.5], [1156.0, 193.0], [1154.0, 2208.0], [1152.0, 203.0], [1182.0, 2407.5], [1176.0, 2324.0], [1174.0, 2332.0], [1172.0, 1935.0], [1168.0, 2124.0], [1198.0, 104.0], [1270.0, 1007.0], [1252.0, 2053.0], [1248.0, 2247.0], [1250.0, 1986.0], [1254.0, 2158.0], [1260.0, 2007.5], [1262.0, 1993.0], [1278.0, 71.0], [1272.0, 2307.0], [1268.0, 49.0], [1266.0, 2035.0], [1264.0, 2417.0], [1230.0, 2348.5], [1228.0, 1629.0], [1226.0, 1799.0], [1224.0, 2305.0], [1222.0, 2109.0], [1218.0, 2310.0], [1216.0, 2190.0], [1246.0, 70.0], [1238.0, 2241.6666666666665], [1232.0, 2048.0], [1328.0, 690.6], [1334.0, 275.8], [1314.0, 763.6666666666666], [1312.0, 460.6666666666667], [1318.0, 129.5], [1326.0, 62.0], [1324.0, 1970.0], [1316.0, 653.8181818181818], [1310.0, 1733.5], [1308.0, 141.0], [1304.0, 55.0], [1302.0, 1563.0], [1300.0, 1875.0], [1294.0, 1971.5], [1288.0, 1985.0], [1286.0, 2398.0], [1284.0, 2005.5], [1280.0, 1937.0], [1330.0, 743.0], [1332.0, 1569.0], [1336.0, 52.0], [1342.0, 1518.0], [1340.0, 885.5], [1376.0, 2108.0], [1382.0, 440.0], [1380.0, 1085.0], [1378.0, 59.0], [1386.0, 1731.0], [1398.0, 1272.0], [1392.0, 1700.0], [1348.0, 38.5], [1346.0, 504.0], [1350.0, 38.0], [1352.0, 35.0], [1354.0, 1649.0], [1356.0, 1377.0], [1358.0, 36.0], [1372.0, 1644.0], [1370.0, 1341.0], [1362.0, 1705.5], [1360.0, 37.0], [1390.0, 1290.0], [1408.0, 2044.0], [1414.0, 1496.0], [1438.0, 965.0], [1436.0, 1069.0], [1440.0, 921.0], [1418.0, 873.5], [1416.0, 1152.0], [1426.0, 1375.5], [1428.0, 1106.0], [1430.0, 1331.8333333333333], [1434.0, 1275.75], [1450.0, 1197.6666666666665], [1448.0, 1214.25], [1087.0, 2563.0], [1085.0, 2765.5], [1059.0, 2769.0], [1057.0, 2551.5], [1061.0, 2806.0], [1065.0, 2542.0], [1081.0, 2508.0], [1079.0, 2522.0], [1037.0, 2578.5], [1035.0, 2257.0], [1031.0, 3004.0], [1029.0, 2683.5], [1027.0, 2261.0], [1053.0, 2278.0], [1049.0, 2541.0], [1067.0, 2539.0], [1143.0, 2457.4], [1147.0, 2391.5], [1151.0, 1979.0], [1121.0, 2544.25], [1123.0, 2917.0], [1141.0, 2601.5], [1139.0, 232.0], [1137.0, 1968.9811320754718], [1115.0, 2168.0], [1091.0, 2823.5], [1089.0, 2607.0], [1097.0, 2948.0], [1093.0, 2930.0], [1101.0, 2667.5], [1111.0, 2742.0], [1211.0, 2314.0], [1215.0, 2075.0], [1185.0, 283.0], [1187.0, 2317.0], [1197.0, 100.5], [1195.0, 124.0], [1207.0, 1937.6153846153845], [1201.0, 138.0], [1167.0, 2220.0], [1165.0, 1800.0], [1163.0, 2703.0], [1161.0, 1826.0], [1159.0, 1852.0], [1155.0, 195.0], [1153.0, 2416.0], [1183.0, 140.0], [1179.0, 2106.0], [1177.0, 1985.5], [1171.0, 2614.0], [1199.0, 126.0], [1275.0, 1731.0], [1279.0, 1964.0], [1249.0, 2452.0], [1251.0, 2102.0], [1257.0, 60.0], [1255.0, 2231.0], [1259.0, 1668.0], [1263.0, 65.0], [1277.0, 2381.0], [1269.0, 69.0], [1265.0, 60.0], [1231.0, 2296.0], [1227.0, 2105.0], [1225.0, 2129.0], [1221.0, 2472.0], [1219.0, 1740.0], [1217.0, 2185.0], [1245.0, 2154.0], [1243.0, 1894.5], [1233.0, 2272.0], [1317.0, 107.0], [1323.0, 1963.0], [1321.0, 68.0], [1327.0, 86.0], [1315.0, 95.5], [1313.0, 61.0], [1311.0, 698.0], [1305.0, 1489.0], [1303.0, 1589.0], [1301.0, 1997.0], [1299.0, 70.5], [1291.0, 1678.0], [1287.0, 1507.0], [1285.0, 1929.0], [1329.0, 45.0], [1331.0, 471.66666666666663], [1343.0, 34.0], [1341.0, 1885.0], [1337.0, 1348.0], [1335.0, 773.0], [1403.0, 1589.0], [1401.0, 1387.0], [1377.0, 78.0], [1385.0, 38.0], [1383.0, 42.0], [1387.0, 1759.0], [1407.0, 1952.0], [1399.0, 60.0], [1397.0, 62.0], [1375.0, 33.0], [1351.0, 39.0], [1353.0, 41.0], [1355.0, 1380.0], [1357.0, 40.0], [1359.0, 40.0], [1373.0, 31.0], [1369.0, 1265.0], [1367.0, 1530.0], [1365.0, 1503.5], [1391.0, 1607.0], [1439.0, 1621.5], [1415.0, 1446.6666666666667], [1445.0, 1504.0], [1411.0, 1150.0], [1437.0, 986.25], [1421.0, 1687.5], [1419.0, 2009.0], [1427.0, 1525.0], [1429.0, 1151.0], [1431.0, 1063.0], [1435.0, 1258.2857142857142], [1433.0, 1419.9285714285713], [1449.0, 1080.6666666666667], [1443.0, 1474.5], [1441.0, 1283.2857142857142], [1.0, 4171.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}, {"data": [[752.6486666666657, 2688.9993333333327]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1450.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12350.0, "minX": 1.75559646E12, "maxY": 17825.0, "series": [{"data": [[1.75559646E12, 17825.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75559646E12, 12350.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559646E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2688.9993333333327, "minX": 1.75559646E12, "maxY": 2688.9993333333327, "series": [{"data": [[1.75559646E12, 2688.9993333333327]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559646E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2688.9219999999987, "minX": 1.75559646E12, "maxY": 2688.9219999999987, "series": [{"data": [[1.75559646E12, 2688.9219999999987]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559646E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2575.29066666667, "minX": 1.75559646E12, "maxY": 2575.29066666667, "series": [{"data": [[1.75559646E12, 2575.29066666667]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559646E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.75559646E12, "maxY": 4892.0, "series": [{"data": [[1.75559646E12, 4892.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75559646E12, 4151.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75559646E12, 4812.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75559646E12, 4395.9]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75559646E12, 31.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75559646E12, 2909.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559646E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1150.5, "minX": 208.0, "maxY": 4013.5, "series": [{"data": [[549.0, 3341.0], [302.0, 4013.5], [208.0, 1150.5], [441.0, 2407.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 549.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1150.5, "minX": 208.0, "maxY": 4013.5, "series": [{"data": [[549.0, 3341.0], [302.0, 4013.5], [208.0, 1150.5], [441.0, 2407.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 549.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75559646E12, "maxY": 25.0, "series": [{"data": [[1.75559646E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559646E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75559646E12, "maxY": 25.0, "series": [{"data": [[1.75559646E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75559646E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75559646E12, "maxY": 25.0, "series": [{"data": [[1.75559646E12, 25.0]], "isOverall": false, "label": "ดึงข้อมูลผลประเมินสุขภาพ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559646E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75559646E12, "maxY": 25.0, "series": [{"data": [[1.75559646E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75559646E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

