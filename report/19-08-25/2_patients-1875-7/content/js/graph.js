/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "maxY": 7286.0, "series": [{"data": [[0.0, 31.0], [0.1, 32.0], [0.2, 33.0], [0.3, 33.0], [0.4, 34.0], [0.5, 34.0], [0.6, 35.0], [0.7, 36.0], [0.8, 36.0], [0.9, 36.0], [1.0, 36.0], [1.1, 37.0], [1.2, 37.0], [1.3, 38.0], [1.4, 38.0], [1.5, 40.0], [1.6, 41.0], [1.7, 41.0], [1.8, 41.0], [1.9, 42.0], [2.0, 43.0], [2.1, 43.0], [2.2, 43.0], [2.3, 44.0], [2.4, 44.0], [2.5, 44.0], [2.6, 45.0], [2.7, 45.0], [2.8, 45.0], [2.9, 46.0], [3.0, 46.0], [3.1, 46.0], [3.2, 47.0], [3.3, 47.0], [3.4, 47.0], [3.5, 47.0], [3.6, 49.0], [3.7, 50.0], [3.8, 50.0], [3.9, 51.0], [4.0, 51.0], [4.1, 51.0], [4.2, 51.0], [4.3, 52.0], [4.4, 52.0], [4.5, 52.0], [4.6, 52.0], [4.7, 52.0], [4.8, 53.0], [4.9, 53.0], [5.0, 55.0], [5.1, 55.0], [5.2, 55.0], [5.3, 56.0], [5.4, 57.0], [5.5, 57.0], [5.6, 57.0], [5.7, 58.0], [5.8, 58.0], [5.9, 58.0], [6.0, 59.0], [6.1, 59.0], [6.2, 60.0], [6.3, 60.0], [6.4, 61.0], [6.5, 61.0], [6.6, 62.0], [6.7, 63.0], [6.8, 63.0], [6.9, 63.0], [7.0, 64.0], [7.1, 65.0], [7.2, 65.0], [7.3, 65.0], [7.4, 66.0], [7.5, 66.0], [7.6, 68.0], [7.7, 69.0], [7.8, 69.0], [7.9, 70.0], [8.0, 71.0], [8.1, 71.0], [8.2, 71.0], [8.3, 73.0], [8.4, 73.0], [8.5, 74.0], [8.6, 76.0], [8.7, 77.0], [8.8, 77.0], [8.9, 77.0], [9.0, 78.0], [9.1, 79.0], [9.2, 79.0], [9.3, 81.0], [9.4, 81.0], [9.5, 83.0], [9.6, 83.0], [9.7, 84.0], [9.8, 85.0], [9.9, 86.0], [10.0, 87.0], [10.1, 88.0], [10.2, 90.0], [10.3, 91.0], [10.4, 92.0], [10.5, 93.0], [10.6, 96.0], [10.7, 101.0], [10.8, 107.0], [10.9, 111.0], [11.0, 112.0], [11.1, 115.0], [11.2, 117.0], [11.3, 118.0], [11.4, 119.0], [11.5, 127.0], [11.6, 130.0], [11.7, 131.0], [11.8, 137.0], [11.9, 154.0], [12.0, 158.0], [12.1, 160.0], [12.2, 163.0], [12.3, 165.0], [12.4, 167.0], [12.5, 183.0], [12.6, 186.0], [12.7, 193.0], [12.8, 207.0], [12.9, 217.0], [13.0, 228.0], [13.1, 239.0], [13.2, 243.0], [13.3, 245.0], [13.4, 253.0], [13.5, 258.0], [13.6, 261.0], [13.7, 264.0], [13.8, 271.0], [13.9, 272.0], [14.0, 280.0], [14.1, 317.0], [14.2, 320.0], [14.3, 322.0], [14.4, 332.0], [14.5, 334.0], [14.6, 341.0], [14.7, 350.0], [14.8, 363.0], [14.9, 389.0], [15.0, 406.0], [15.1, 407.0], [15.2, 408.0], [15.3, 410.0], [15.4, 421.0], [15.5, 421.0], [15.6, 423.0], [15.7, 430.0], [15.8, 443.0], [15.9, 452.0], [16.0, 457.0], [16.1, 518.0], [16.2, 615.0], [16.3, 645.0], [16.4, 649.0], [16.5, 670.0], [16.6, 676.0], [16.7, 676.0], [16.8, 683.0], [16.9, 705.0], [17.0, 733.0], [17.1, 738.0], [17.2, 739.0], [17.3, 744.0], [17.4, 754.0], [17.5, 757.0], [17.6, 763.0], [17.7, 769.0], [17.8, 776.0], [17.9, 791.0], [18.0, 796.0], [18.1, 814.0], [18.2, 820.0], [18.3, 822.0], [18.4, 822.0], [18.5, 824.0], [18.6, 827.0], [18.7, 827.0], [18.8, 829.0], [18.9, 831.0], [19.0, 833.0], [19.1, 835.0], [19.2, 835.0], [19.3, 836.0], [19.4, 842.0], [19.5, 847.0], [19.6, 854.0], [19.7, 856.0], [19.8, 860.0], [19.9, 863.0], [20.0, 865.0], [20.1, 872.0], [20.2, 877.0], [20.3, 878.0], [20.4, 882.0], [20.5, 888.0], [20.6, 889.0], [20.7, 897.0], [20.8, 897.0], [20.9, 920.0], [21.0, 947.0], [21.1, 981.0], [21.2, 1031.0], [21.3, 1040.0], [21.4, 1096.0], [21.5, 1135.0], [21.6, 1143.0], [21.7, 1147.0], [21.8, 1232.0], [21.9, 1284.0], [22.0, 1311.0], [22.1, 1432.0], [22.2, 1448.0], [22.3, 1453.0], [22.4, 1454.0], [22.5, 1463.0], [22.6, 1468.0], [22.7, 1497.0], [22.8, 1514.0], [22.9, 1523.0], [23.0, 1526.0], [23.1, 1536.0], [23.2, 1538.0], [23.3, 1550.0], [23.4, 1584.0], [23.5, 1592.0], [23.6, 1598.0], [23.7, 1599.0], [23.8, 1602.0], [23.9, 1611.0], [24.0, 1613.0], [24.1, 1616.0], [24.2, 1639.0], [24.3, 1640.0], [24.4, 1655.0], [24.5, 1660.0], [24.6, 1662.0], [24.7, 1664.0], [24.8, 1669.0], [24.9, 1671.0], [25.0, 1684.0], [25.1, 1691.0], [25.2, 1697.0], [25.3, 1708.0], [25.4, 1725.0], [25.5, 1736.0], [25.6, 1737.0], [25.7, 1744.0], [25.8, 1750.0], [25.9, 1769.0], [26.0, 1782.0], [26.1, 1794.0], [26.2, 1820.0], [26.3, 1847.0], [26.4, 1848.0], [26.5, 1859.0], [26.6, 1871.0], [26.7, 1878.0], [26.8, 1909.0], [26.9, 1918.0], [27.0, 1920.0], [27.1, 1948.0], [27.2, 1951.0], [27.3, 1965.0], [27.4, 1972.0], [27.5, 1977.0], [27.6, 1987.0], [27.7, 1992.0], [27.8, 1996.0], [27.9, 1998.0], [28.0, 1999.0], [28.1, 2001.0], [28.2, 2010.0], [28.3, 2023.0], [28.4, 2023.0], [28.5, 2034.0], [28.6, 2069.0], [28.7, 2107.0], [28.8, 2127.0], [28.9, 2179.0], [29.0, 2209.0], [29.1, 2256.0], [29.2, 2270.0], [29.3, 2283.0], [29.4, 2306.0], [29.5, 2327.0], [29.6, 2327.0], [29.7, 2340.0], [29.8, 2346.0], [29.9, 2351.0], [30.0, 2383.0], [30.1, 2387.0], [30.2, 2395.0], [30.3, 2403.0], [30.4, 2410.0], [30.5, 2417.0], [30.6, 2425.0], [30.7, 2431.0], [30.8, 2434.0], [30.9, 2465.0], [31.0, 2490.0], [31.1, 2506.0], [31.2, 2508.0], [31.3, 2529.0], [31.4, 2545.0], [31.5, 2553.0], [31.6, 2560.0], [31.7, 2565.0], [31.8, 2576.0], [31.9, 2586.0], [32.0, 2593.0], [32.1, 2608.0], [32.2, 2616.0], [32.3, 2623.0], [32.4, 2636.0], [32.5, 2647.0], [32.6, 2649.0], [32.7, 2663.0], [32.8, 2666.0], [32.9, 2676.0], [33.0, 2679.0], [33.1, 2691.0], [33.2, 2698.0], [33.3, 2708.0], [33.4, 2720.0], [33.5, 2728.0], [33.6, 2728.0], [33.7, 2739.0], [33.8, 2742.0], [33.9, 2759.0], [34.0, 2764.0], [34.1, 2770.0], [34.2, 2773.0], [34.3, 2775.0], [34.4, 2776.0], [34.5, 2780.0], [34.6, 2798.0], [34.7, 2801.0], [34.8, 2807.0], [34.9, 2823.0], [35.0, 2861.0], [35.1, 2871.0], [35.2, 2880.0], [35.3, 2888.0], [35.4, 2894.0], [35.5, 2898.0], [35.6, 2915.0], [35.7, 2921.0], [35.8, 2936.0], [35.9, 2946.0], [36.0, 2954.0], [36.1, 2966.0], [36.2, 2978.0], [36.3, 2980.0], [36.4, 2986.0], [36.5, 3009.0], [36.6, 3017.0], [36.7, 3027.0], [36.8, 3030.0], [36.9, 3032.0], [37.0, 3034.0], [37.1, 3049.0], [37.2, 3058.0], [37.3, 3067.0], [37.4, 3076.0], [37.5, 3081.0], [37.6, 3095.0], [37.7, 3104.0], [37.8, 3144.0], [37.9, 3147.0], [38.0, 3163.0], [38.1, 3165.0], [38.2, 3168.0], [38.3, 3176.0], [38.4, 3178.0], [38.5, 3183.0], [38.6, 3185.0], [38.7, 3197.0], [38.8, 3199.0], [38.9, 3200.0], [39.0, 3206.0], [39.1, 3219.0], [39.2, 3226.0], [39.3, 3228.0], [39.4, 3233.0], [39.5, 3238.0], [39.6, 3257.0], [39.7, 3264.0], [39.8, 3278.0], [39.9, 3283.0], [40.0, 3284.0], [40.1, 3289.0], [40.2, 3302.0], [40.3, 3305.0], [40.4, 3306.0], [40.5, 3314.0], [40.6, 3329.0], [40.7, 3330.0], [40.8, 3331.0], [40.9, 3334.0], [41.0, 3340.0], [41.1, 3358.0], [41.2, 3362.0], [41.3, 3369.0], [41.4, 3381.0], [41.5, 3384.0], [41.6, 3389.0], [41.7, 3393.0], [41.8, 3399.0], [41.9, 3402.0], [42.0, 3420.0], [42.1, 3430.0], [42.2, 3433.0], [42.3, 3450.0], [42.4, 3460.0], [42.5, 3464.0], [42.6, 3472.0], [42.7, 3474.0], [42.8, 3482.0], [42.9, 3485.0], [43.0, 3489.0], [43.1, 3490.0], [43.2, 3492.0], [43.3, 3498.0], [43.4, 3514.0], [43.5, 3532.0], [43.6, 3541.0], [43.7, 3554.0], [43.8, 3562.0], [43.9, 3566.0], [44.0, 3567.0], [44.1, 3567.0], [44.2, 3568.0], [44.3, 3570.0], [44.4, 3571.0], [44.5, 3575.0], [44.6, 3579.0], [44.7, 3584.0], [44.8, 3586.0], [44.9, 3589.0], [45.0, 3599.0], [45.1, 3601.0], [45.2, 3603.0], [45.3, 3605.0], [45.4, 3610.0], [45.5, 3610.0], [45.6, 3610.0], [45.7, 3614.0], [45.8, 3617.0], [45.9, 3620.0], [46.0, 3624.0], [46.1, 3631.0], [46.2, 3633.0], [46.3, 3634.0], [46.4, 3635.0], [46.5, 3636.0], [46.6, 3636.0], [46.7, 3639.0], [46.8, 3639.0], [46.9, 3640.0], [47.0, 3640.0], [47.1, 3641.0], [47.2, 3641.0], [47.3, 3642.0], [47.4, 3644.0], [47.5, 3644.0], [47.6, 3645.0], [47.7, 3649.0], [47.8, 3650.0], [47.9, 3651.0], [48.0, 3651.0], [48.1, 3651.0], [48.2, 3654.0], [48.3, 3658.0], [48.4, 3658.0], [48.5, 3661.0], [48.6, 3663.0], [48.7, 3664.0], [48.8, 3666.0], [48.9, 3667.0], [49.0, 3669.0], [49.1, 3672.0], [49.2, 3675.0], [49.3, 3678.0], [49.4, 3680.0], [49.5, 3682.0], [49.6, 3683.0], [49.7, 3687.0], [49.8, 3688.0], [49.9, 3689.0], [50.0, 3694.0], [50.1, 3696.0], [50.2, 3699.0], [50.3, 3701.0], [50.4, 3704.0], [50.5, 3705.0], [50.6, 3708.0], [50.7, 3710.0], [50.8, 3713.0], [50.9, 3714.0], [51.0, 3717.0], [51.1, 3722.0], [51.2, 3723.0], [51.3, 3723.0], [51.4, 3725.0], [51.5, 3727.0], [51.6, 3727.0], [51.7, 3728.0], [51.8, 3730.0], [51.9, 3732.0], [52.0, 3733.0], [52.1, 3734.0], [52.2, 3738.0], [52.3, 3742.0], [52.4, 3743.0], [52.5, 3746.0], [52.6, 3747.0], [52.7, 3749.0], [52.8, 3750.0], [52.9, 3750.0], [53.0, 3753.0], [53.1, 3754.0], [53.2, 3757.0], [53.3, 3760.0], [53.4, 3761.0], [53.5, 3767.0], [53.6, 3768.0], [53.7, 3771.0], [53.8, 3776.0], [53.9, 3778.0], [54.0, 3779.0], [54.1, 3780.0], [54.2, 3784.0], [54.3, 3786.0], [54.4, 3787.0], [54.5, 3788.0], [54.6, 3791.0], [54.7, 3793.0], [54.8, 3795.0], [54.9, 3798.0], [55.0, 3800.0], [55.1, 3801.0], [55.2, 3801.0], [55.3, 3803.0], [55.4, 3806.0], [55.5, 3808.0], [55.6, 3810.0], [55.7, 3811.0], [55.8, 3813.0], [55.9, 3816.0], [56.0, 3816.0], [56.1, 3817.0], [56.2, 3818.0], [56.3, 3818.0], [56.4, 3820.0], [56.5, 3822.0], [56.6, 3822.0], [56.7, 3822.0], [56.8, 3823.0], [56.9, 3827.0], [57.0, 3829.0], [57.1, 3830.0], [57.2, 3831.0], [57.3, 3834.0], [57.4, 3836.0], [57.5, 3838.0], [57.6, 3838.0], [57.7, 3841.0], [57.8, 3846.0], [57.9, 3852.0], [58.0, 3864.0], [58.1, 3866.0], [58.2, 3870.0], [58.3, 3870.0], [58.4, 3873.0], [58.5, 3877.0], [58.6, 3880.0], [58.7, 3880.0], [58.8, 3883.0], [58.9, 3894.0], [59.0, 3896.0], [59.1, 3897.0], [59.2, 3898.0], [59.3, 3900.0], [59.4, 3902.0], [59.5, 3903.0], [59.6, 3910.0], [59.7, 3918.0], [59.8, 3922.0], [59.9, 3924.0], [60.0, 3924.0], [60.1, 3930.0], [60.2, 3937.0], [60.3, 3940.0], [60.4, 3944.0], [60.5, 3946.0], [60.6, 3950.0], [60.7, 3952.0], [60.8, 3960.0], [60.9, 3962.0], [61.0, 3963.0], [61.1, 3977.0], [61.2, 3988.0], [61.3, 3990.0], [61.4, 4000.0], [61.5, 4012.0], [61.6, 4015.0], [61.7, 4016.0], [61.8, 4017.0], [61.9, 4023.0], [62.0, 4032.0], [62.1, 4044.0], [62.2, 4060.0], [62.3, 4062.0], [62.4, 4065.0], [62.5, 4069.0], [62.6, 4071.0], [62.7, 4079.0], [62.8, 4083.0], [62.9, 4086.0], [63.0, 4087.0], [63.1, 4092.0], [63.2, 4093.0], [63.3, 4094.0], [63.4, 4097.0], [63.5, 4101.0], [63.6, 4104.0], [63.7, 4104.0], [63.8, 4112.0], [63.9, 4120.0], [64.0, 4125.0], [64.1, 4128.0], [64.2, 4130.0], [64.3, 4132.0], [64.4, 4149.0], [64.5, 4156.0], [64.6, 4158.0], [64.7, 4161.0], [64.8, 4161.0], [64.9, 4167.0], [65.0, 4172.0], [65.1, 4176.0], [65.2, 4180.0], [65.3, 4185.0], [65.4, 4197.0], [65.5, 4200.0], [65.6, 4205.0], [65.7, 4215.0], [65.8, 4222.0], [65.9, 4225.0], [66.0, 4229.0], [66.1, 4233.0], [66.2, 4235.0], [66.3, 4236.0], [66.4, 4243.0], [66.5, 4244.0], [66.6, 4247.0], [66.7, 4251.0], [66.8, 4268.0], [66.9, 4270.0], [67.0, 4273.0], [67.1, 4286.0], [67.2, 4288.0], [67.3, 4293.0], [67.4, 4296.0], [67.5, 4299.0], [67.6, 4305.0], [67.7, 4308.0], [67.8, 4312.0], [67.9, 4313.0], [68.0, 4315.0], [68.1, 4323.0], [68.2, 4337.0], [68.3, 4344.0], [68.4, 4350.0], [68.5, 4351.0], [68.6, 4352.0], [68.7, 4353.0], [68.8, 4356.0], [68.9, 4361.0], [69.0, 4365.0], [69.1, 4367.0], [69.2, 4369.0], [69.3, 4374.0], [69.4, 4375.0], [69.5, 4377.0], [69.6, 4384.0], [69.7, 4395.0], [69.8, 4404.0], [69.9, 4421.0], [70.0, 4424.0], [70.1, 4429.0], [70.2, 4431.0], [70.3, 4439.0], [70.4, 4442.0], [70.5, 4450.0], [70.6, 4452.0], [70.7, 4453.0], [70.8, 4454.0], [70.9, 4455.0], [71.0, 4458.0], [71.1, 4460.0], [71.2, 4461.0], [71.3, 4468.0], [71.4, 4476.0], [71.5, 4481.0], [71.6, 4487.0], [71.7, 4499.0], [71.8, 4504.0], [71.9, 4511.0], [72.0, 4511.0], [72.1, 4518.0], [72.2, 4527.0], [72.3, 4529.0], [72.4, 4548.0], [72.5, 4549.0], [72.6, 4553.0], [72.7, 4555.0], [72.8, 4556.0], [72.9, 4564.0], [73.0, 4571.0], [73.1, 4573.0], [73.2, 4577.0], [73.3, 4582.0], [73.4, 4589.0], [73.5, 4593.0], [73.6, 4596.0], [73.7, 4597.0], [73.8, 4600.0], [73.9, 4602.0], [74.0, 4609.0], [74.1, 4612.0], [74.2, 4619.0], [74.3, 4625.0], [74.4, 4634.0], [74.5, 4642.0], [74.6, 4646.0], [74.7, 4649.0], [74.8, 4657.0], [74.9, 4663.0], [75.0, 4668.0], [75.1, 4673.0], [75.2, 4681.0], [75.3, 4684.0], [75.4, 4686.0], [75.5, 4699.0], [75.6, 4701.0], [75.7, 4706.0], [75.8, 4711.0], [75.9, 4718.0], [76.0, 4727.0], [76.1, 4728.0], [76.2, 4732.0], [76.3, 4733.0], [76.4, 4744.0], [76.5, 4745.0], [76.6, 4753.0], [76.7, 4757.0], [76.8, 4770.0], [76.9, 4777.0], [77.0, 4781.0], [77.1, 4788.0], [77.2, 4805.0], [77.3, 4808.0], [77.4, 4812.0], [77.5, 4813.0], [77.6, 4821.0], [77.7, 4822.0], [77.8, 4829.0], [77.9, 4832.0], [78.0, 4834.0], [78.1, 4837.0], [78.2, 4840.0], [78.3, 4840.0], [78.4, 4853.0], [78.5, 4853.0], [78.6, 4856.0], [78.7, 4861.0], [78.8, 4864.0], [78.9, 4866.0], [79.0, 4871.0], [79.1, 4876.0], [79.2, 4877.0], [79.3, 4879.0], [79.4, 4883.0], [79.5, 4893.0], [79.6, 4901.0], [79.7, 4904.0], [79.8, 4910.0], [79.9, 4914.0], [80.0, 4916.0], [80.1, 4925.0], [80.2, 4926.0], [80.3, 4929.0], [80.4, 4942.0], [80.5, 4958.0], [80.6, 4965.0], [80.7, 4967.0], [80.8, 4972.0], [80.9, 4980.0], [81.0, 4982.0], [81.1, 4985.0], [81.2, 4988.0], [81.3, 4998.0], [81.4, 4999.0], [81.5, 5003.0], [81.6, 5009.0], [81.7, 5009.0], [81.8, 5015.0], [81.9, 5020.0], [82.0, 5027.0], [82.1, 5030.0], [82.2, 5036.0], [82.3, 5038.0], [82.4, 5041.0], [82.5, 5043.0], [82.6, 5043.0], [82.7, 5048.0], [82.8, 5052.0], [82.9, 5058.0], [83.0, 5063.0], [83.1, 5072.0], [83.2, 5080.0], [83.3, 5081.0], [83.4, 5096.0], [83.5, 5099.0], [83.6, 5108.0], [83.7, 5118.0], [83.8, 5139.0], [83.9, 5142.0], [84.0, 5150.0], [84.1, 5152.0], [84.2, 5165.0], [84.3, 5177.0], [84.4, 5191.0], [84.5, 5196.0], [84.6, 5204.0], [84.7, 5215.0], [84.8, 5216.0], [84.9, 5217.0], [85.0, 5223.0], [85.1, 5226.0], [85.2, 5240.0], [85.3, 5243.0], [85.4, 5254.0], [85.5, 5268.0], [85.6, 5271.0], [85.7, 5275.0], [85.8, 5276.0], [85.9, 5282.0], [86.0, 5291.0], [86.1, 5298.0], [86.2, 5305.0], [86.3, 5307.0], [86.4, 5327.0], [86.5, 5334.0], [86.6, 5353.0], [86.7, 5372.0], [86.8, 5379.0], [86.9, 5385.0], [87.0, 5398.0], [87.1, 5399.0], [87.2, 5430.0], [87.3, 5433.0], [87.4, 5443.0], [87.5, 5470.0], [87.6, 5476.0], [87.7, 5481.0], [87.8, 5495.0], [87.9, 5497.0], [88.0, 5503.0], [88.1, 5505.0], [88.2, 5516.0], [88.3, 5523.0], [88.4, 5533.0], [88.5, 5536.0], [88.6, 5554.0], [88.7, 5558.0], [88.8, 5566.0], [88.9, 5568.0], [89.0, 5599.0], [89.1, 5613.0], [89.2, 5616.0], [89.3, 5624.0], [89.4, 5638.0], [89.5, 5648.0], [89.6, 5654.0], [89.7, 5661.0], [89.8, 5668.0], [89.9, 5672.0], [90.0, 5675.0], [90.1, 5682.0], [90.2, 5683.0], [90.3, 5690.0], [90.4, 5705.0], [90.5, 5707.0], [90.6, 5720.0], [90.7, 5728.0], [90.8, 5730.0], [90.9, 5746.0], [91.0, 5755.0], [91.1, 5758.0], [91.2, 5762.0], [91.3, 5766.0], [91.4, 5797.0], [91.5, 5798.0], [91.6, 5806.0], [91.7, 5814.0], [91.8, 5828.0], [91.9, 5843.0], [92.0, 5844.0], [92.1, 5844.0], [92.2, 5850.0], [92.3, 5860.0], [92.4, 5866.0], [92.5, 5869.0], [92.6, 5875.0], [92.7, 5883.0], [92.8, 5897.0], [92.9, 5911.0], [93.0, 5915.0], [93.1, 5922.0], [93.2, 5929.0], [93.3, 5936.0], [93.4, 5946.0], [93.5, 5959.0], [93.6, 5982.0], [93.7, 5987.0], [93.8, 5993.0], [93.9, 6000.0], [94.0, 6002.0], [94.1, 6009.0], [94.2, 6016.0], [94.3, 6018.0], [94.4, 6024.0], [94.5, 6028.0], [94.6, 6034.0], [94.7, 6045.0], [94.8, 6054.0], [94.9, 6058.0], [95.0, 6061.0], [95.1, 6066.0], [95.2, 6069.0], [95.3, 6073.0], [95.4, 6087.0], [95.5, 6087.0], [95.6, 6107.0], [95.7, 6118.0], [95.8, 6131.0], [95.9, 6144.0], [96.0, 6150.0], [96.1, 6161.0], [96.2, 6171.0], [96.3, 6191.0], [96.4, 6200.0], [96.5, 6223.0], [96.6, 6229.0], [96.7, 6253.0], [96.8, 6254.0], [96.9, 6284.0], [97.0, 6294.0], [97.1, 6298.0], [97.2, 6305.0], [97.3, 6340.0], [97.4, 6351.0], [97.5, 6386.0], [97.6, 6399.0], [97.7, 6408.0], [97.8, 6416.0], [97.9, 6434.0], [98.0, 6460.0], [98.1, 6471.0], [98.2, 6491.0], [98.3, 6495.0], [98.4, 6577.0], [98.5, 6585.0], [98.6, 6606.0], [98.7, 6627.0], [98.8, 6716.0], [98.9, 6763.0], [99.0, 6779.0], [99.1, 6820.0], [99.2, 6878.0], [99.3, 6879.0], [99.4, 6922.0], [99.5, 6993.0], [99.6, 7000.0], [99.7, 7034.0], [99.8, 7222.0], [99.9, 7240.0]], "isOverall": false, "label": "ดึงข้อมูลทะเบียนบุคคลทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 200.0, "series": [{"data": [[0.0, 200.0], [600.0, 14.0], [700.0, 22.0], [800.0, 52.0], [900.0, 7.0], [1000.0, 5.0], [1100.0, 5.0], [1200.0, 4.0], [1300.0, 3.0], [1400.0, 12.0], [1500.0, 19.0], [1600.0, 28.0], [1700.0, 17.0], [1800.0, 12.0], [1900.0, 24.0], [2000.0, 12.0], [2100.0, 5.0], [2200.0, 8.0], [2300.0, 17.0], [2400.0, 15.0], [2500.0, 18.0], [2600.0, 23.0], [2700.0, 25.0], [2800.0, 17.0], [2900.0, 18.0], [3000.0, 22.0], [3100.0, 23.0], [3200.0, 23.0], [3300.0, 32.0], [3400.0, 28.0], [3500.0, 32.0], [3600.0, 98.0], [3700.0, 89.0], [3800.0, 80.0], [3900.0, 40.0], [4000.0, 38.0], [4300.0, 41.0], [4100.0, 39.0], [4200.0, 38.0], [4400.0, 39.0], [4500.0, 37.0], [4600.0, 33.0], [4700.0, 30.0], [4800.0, 46.0], [4900.0, 35.0], [5000.0, 39.0], [5100.0, 20.0], [5200.0, 29.0], [5300.0, 19.0], [5500.0, 20.0], [5400.0, 15.0], [5600.0, 26.0], [5700.0, 21.0], [5800.0, 25.0], [5900.0, 19.0], [6000.0, 31.0], [6100.0, 16.0], [6200.0, 15.0], [6300.0, 9.0], [6400.0, 13.0], [6500.0, 3.0], [6600.0, 5.0], [6700.0, 5.0], [6800.0, 5.0], [6900.0, 5.0], [7000.0, 3.0], [7200.0, 5.0], [100.0, 39.0], [200.0, 24.0], [300.0, 17.0], [400.0, 21.0], [500.0, 1.0]], "isOverall": false, "label": "ดึงข้อมูลทะเบียนบุคคลทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 125.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1449.0, "series": [{"data": [[0.0, 301.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 125.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1449.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 922.9679999999976, "minX": 1.75558692E12, "maxY": 922.9679999999976, "series": [{"data": [[1.75558692E12, 922.9679999999976]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558692E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32.0, "minX": 1.0, "maxY": 7286.0, "series": [{"data": [[2.0, 5599.0], [3.0, 6491.0], [4.0, 6001.0], [5.0, 5846.0], [6.0, 7028.0], [7.0, 7000.0], [8.0, 6029.0], [9.0, 6921.0], [10.0, 7226.0], [11.0, 7240.0], [12.0, 7222.0], [13.0, 6350.0], [15.0, 6727.0], [17.0, 6636.0], [18.0, 5057.0], [19.0, 6191.0], [20.0, 6200.0], [21.0, 3358.0], [22.0, 6465.0], [23.0, 6818.0], [24.0, 6351.0], [25.0, 5911.0], [26.0, 6471.0], [27.0, 3389.0], [28.0, 5027.0], [29.0, 6993.0], [30.0, 3384.0], [31.0, 6396.0], [33.0, 5860.0], [32.0, 6779.0], [35.0, 6434.0], [34.0, 4015.0], [37.0, 6161.0], [36.0, 6213.0], [39.0, 6298.0], [38.0, 5301.0], [41.0, 6375.0], [40.0, 4856.0], [43.0, 6086.0], [42.0, 6993.0], [45.0, 3302.0], [44.0, 5810.0], [46.0, 6332.0], [49.0, 6820.0], [48.0, 5521.5], [51.0, 6305.0], [50.0, 6254.0], [53.0, 6172.0], [52.0, 3286.0], [55.0, 5756.0], [54.0, 6054.0], [57.0, 3305.0], [59.0, 5481.0], [58.0, 5641.5], [61.0, 5254.0], [60.0, 6294.0], [63.0, 6028.0], [62.0, 6973.0], [65.0, 6061.0], [64.0, 6296.0], [70.0, 6019.666666666667], [69.0, 4732.0], [68.0, 6024.0], [75.0, 5731.5], [73.0, 5137.666666666667], [79.0, 6223.0], [78.0, 6922.0], [77.0, 6120.5], [83.0, 5374.0], [82.0, 6769.0], [81.0, 4985.0], [80.0, 5676.0], [86.0, 5959.0], [85.0, 6879.0], [84.0, 5516.0], [89.0, 6195.0], [88.0, 6313.5], [94.0, 5936.0], [93.0, 4805.0], [92.0, 6367.0], [99.0, 6167.0], [98.0, 5955.0], [97.0, 5598.333333333333], [102.0, 6403.0], [100.0, 5933.0], [107.0, 6144.0], [106.0, 5886.0], [104.0, 6836.0], [111.0, 6118.0], [110.0, 6144.0], [109.0, 5038.0], [108.0, 6034.0], [115.0, 6087.0], [114.0, 5872.0], [113.0, 4861.0], [112.0, 6479.0], [119.0, 5843.0], [118.0, 4856.0], [117.0, 6002.0], [116.0, 6107.0], [123.0, 5978.5], [121.0, 5210.5], [127.0, 5857.0], [126.0, 5118.0], [125.0, 5838.0], [124.0, 6763.0], [135.0, 6149.0], [134.0, 6416.0], [133.0, 6747.0], [132.0, 6087.0], [131.0, 4452.0], [130.0, 4965.0], [129.0, 5975.0], [128.0, 4810.0], [143.0, 5643.333333333333], [140.0, 5869.0], [139.0, 5993.0], [138.0, 5606.5], [136.0, 5843.0], [151.0, 5430.0], [150.0, 5997.0], [149.0, 4893.0], [148.0, 6000.0], [147.0, 2979.0], [146.0, 4911.0], [145.0, 6016.0], [144.0, 4915.0], [158.0, 5922.0], [157.0, 6494.0], [156.0, 6606.0], [155.0, 5015.0], [154.0, 4718.0], [153.0, 5883.0], [152.0, 5063.0], [167.0, 6627.0], [166.0, 5729.5], [164.0, 5381.0], [163.0, 5915.0], [162.0, 4850.0], [161.0, 5887.0], [160.0, 4998.5], [175.0, 5866.0], [174.0, 6606.0], [173.0, 5372.0], [172.0, 4282.0], [170.0, 5929.0], [169.0, 4665.0], [168.0, 4553.0], [183.0, 5030.0], [182.0, 5844.0], [181.0, 6577.0], [180.0, 4657.0], [179.0, 4802.0], [178.0, 5814.0], [177.0, 5865.0], [176.0, 5754.0], [191.0, 5879.0], [190.0, 5828.0], [189.0, 4777.0], [188.0, 2823.0], [187.0, 6399.0], [186.0, 5742.0], [184.0, 5721.0], [199.0, 4744.0], [198.0, 5142.0], [197.0, 5850.0], [196.0, 6288.0], [195.0, 4808.0], [194.0, 5307.0], [193.0, 5690.0], [192.0, 4625.0], [207.0, 5772.0], [205.0, 6091.0], [203.0, 6412.0], [202.0, 6460.0], [201.0, 5422.0], [215.0, 5746.0], [214.0, 6229.0], [213.0, 5798.0], [212.0, 4571.0], [211.0, 4587.0], [210.0, 5797.0], [209.0, 5806.0], [208.0, 6495.0], [223.0, 6386.0], [222.0, 4672.0], [221.0, 6451.0], [220.0, 5945.5], [218.0, 6110.0], [217.0, 6408.0], [231.0, 4642.0], [230.0, 5762.0], [229.0, 5766.0], [228.0, 5672.0], [227.0, 4529.0], [226.0, 4706.0], [224.0, 4521.0], [239.0, 6073.0], [238.0, 5443.0], [237.0, 4616.0], [236.0, 5720.0], [235.0, 5730.0], [234.0, 4871.0], [233.0, 5152.0], [232.0, 5196.0], [247.0, 4455.0], [246.0, 6059.0], [245.0, 4144.5], [243.0, 5623.0], [242.0, 5648.0], [241.0, 6340.0], [240.0, 5652.0], [255.0, 5615.0], [254.0, 5675.0], [253.0, 5668.0], [252.0, 5129.5], [250.0, 4442.0], [249.0, 4575.0], [248.0, 6224.0], [270.0, 6284.0], [271.0, 5497.0], [269.0, 4350.0], [268.0, 5531.5], [266.0, 5509.0], [265.0, 5611.0], [264.0, 5616.0], [263.0, 6299.0], [259.0, 5034.5], [257.0, 5306.5], [262.0, 5565.0], [261.0, 5480.0], [260.0, 5638.0], [284.0, 4247.0], [283.0, 5240.0], [282.0, 5791.0], [280.0, 4301.0], [279.0, 5497.0], [272.0, 5495.0], [278.0, 5334.0], [277.0, 5558.0], [276.0, 4337.0], [275.0, 5375.5], [273.0, 4476.0], [302.0, 4310.0], [303.0, 4573.0], [301.0, 4312.0], [300.0, 6111.0], [299.0, 5282.0], [298.0, 4180.0], [297.0, 5351.0], [296.0, 4351.0], [295.0, 5474.0], [289.0, 5398.0], [288.0, 5577.25], [291.0, 5385.0], [290.0, 5483.0], [294.0, 5369.0], [293.0, 4292.0], [318.0, 5043.0], [319.0, 5298.0], [317.0, 6018.0], [316.0, 5307.0], [315.0, 5268.0], [314.0, 5293.0], [313.0, 6058.0], [312.0, 5728.0], [311.0, 6069.0], [305.0, 4299.0], [304.0, 5409.0], [307.0, 5305.0], [306.0, 5399.0], [310.0, 4806.5], [308.0, 6068.0], [332.0, 4062.0], [331.0, 5946.0], [330.0, 4195.0], [329.0, 4907.5], [327.0, 5135.0], [321.0, 5291.0], [320.0, 5271.0], [325.0, 5661.0], [324.0, 5139.0], [323.0, 5316.0], [322.0, 4073.0], [348.0, 5165.0], [350.0, 5036.0], [351.0, 5225.0], [349.0, 3952.0], [347.0, 4396.333333333333], [346.0, 5248.5], [342.0, 5198.0], [336.0, 4923.75], [339.0, 5009.0], [338.0, 5585.0], [341.0, 4023.0], [340.0, 5216.0], [365.0, 2063.0], [367.0, 4226.0], [364.0, 2107.0], [355.0, 5566.0], [354.0, 5173.0], [353.0, 3963.0], [352.0, 5216.0], [363.0, 5191.0], [362.0, 5048.0], [361.0, 5110.0], [360.0, 5058.0], [359.0, 5052.0], [358.0, 3870.0], [357.0, 5866.0], [356.0, 5158.0], [376.0, 5711.0], [380.0, 3538.0], [379.0, 4806.0], [378.0, 4967.0], [377.0, 3460.0], [374.0, 4876.0], [373.0, 4853.0], [372.0, 5031.5], [370.0, 4127.5], [368.0, 5108.0], [396.0, 3705.0], [398.0, 3705.0], [399.0, 5007.0], [397.0, 5261.5], [395.0, 4833.0], [393.0, 5480.5], [391.0, 3696.0], [385.0, 5755.0], [384.0, 5184.75], [390.0, 5097.0], [389.0, 5317.666666666667], [388.0, 5683.0], [414.0, 4999.0], [415.0, 4128.0], [413.0, 5018.0], [412.0, 4982.0], [411.0, 5664.0], [410.0, 5501.5], [408.0, 4986.0], [407.0, 5705.0], [401.0, 5043.0], [400.0, 5587.0], [403.0, 4982.0], [402.0, 5041.0], [406.0, 4861.0], [405.0, 5707.0], [404.0, 5009.0], [429.0, 3944.0], [430.0, 4044.0], [428.0, 4926.0], [419.0, 4086.0], [418.0, 4168.0], [417.0, 4106.0], [427.0, 5654.0], [426.0, 4938.0], [425.0, 4942.0], [424.0, 4842.5], [422.0, 5003.0], [421.0, 4062.5], [446.0, 4879.0], [447.0, 4829.0], [445.0, 5568.0], [444.0, 3514.0], [443.0, 4910.0], [442.0, 4634.0], [441.0, 5533.0], [440.0, 4226.0], [438.0, 4744.0], [433.0, 4753.0], [432.0, 4241.0], [435.0, 5470.0], [434.0, 4972.0], [437.0, 5534.0], [436.0, 4681.0], [460.0, 4786.0], [462.0, 3433.0], [463.0, 3429.0], [461.0, 3472.0], [459.0, 5540.0], [458.0, 5261.666666666667], [455.0, 4822.0], [449.0, 4876.0], [448.0, 4837.0], [451.0, 4891.0], [450.0, 3768.0], [454.0, 3817.0], [453.0, 4190.5], [478.0, 3332.0], [479.0, 3305.0], [477.0, 3362.0], [476.0, 4320.0], [474.0, 4685.0], [473.0, 4770.0], [472.0, 4487.0], [471.0, 5226.0], [465.0, 5151.0], [467.0, 4812.0], [466.0, 3788.0], [470.0, 3880.0], [469.0, 3771.0], [468.0, 5502.0], [494.0, 3163.0], [492.0, 4481.0], [483.0, 3238.0], [482.0, 3278.0], [481.0, 3305.0], [480.0, 5388.0], [491.0, 3168.0], [490.0, 3178.0], [489.0, 3184.0], [488.0, 3199.0], [487.0, 3200.0], [486.0, 3208.0], [485.0, 3219.0], [484.0, 5284.0], [510.0, 4763.5], [511.0, 5223.0], [508.0, 4312.0], [499.0, 4652.0], [496.0, 4185.5], [507.0, 4374.0], [506.0, 4353.0], [505.0, 3145.0], [504.0, 4455.0], [503.0, 4579.0], [502.0, 4148.5], [500.0, 5243.0], [538.0, 4995.0], [542.0, 2946.0], [543.0, 4357.0], [529.0, 3123.0], [528.0, 4821.0], [531.0, 4384.0], [530.0, 4344.0], [533.0, 4226.0], [532.0, 4222.0], [541.0, 4757.0], [540.0, 4361.0], [539.0, 5051.0], [537.0, 5009.5], [515.0, 5127.0], [514.0, 5195.0], [513.0, 4506.0], [512.0, 5215.0], [527.0, 5074.0], [526.0, 5142.0], [525.0, 4298.0], [524.0, 4454.0], [523.0, 4289.0], [522.0, 5142.0], [521.0, 4666.0], [535.0, 4424.0], [534.0, 2954.0], [569.0, 5023.0], [574.0, 4984.0], [575.0, 5020.0], [560.0, 4375.0], [563.0, 4231.0], [562.0, 4703.0], [565.0, 5041.0], [564.0, 4713.0], [573.0, 4149.0], [572.0, 4276.0], [571.0, 4519.5], [568.0, 4367.0], [551.0, 3652.5], [549.0, 4727.666666666667], [547.0, 4294.0], [545.0, 4404.0], [544.0, 4156.0], [559.0, 5037.0], [558.0, 4366.0], [557.0, 5043.5], [555.0, 4727.0], [554.0, 4716.0], [552.0, 4961.0], [567.0, 4966.0], [566.0, 4998.0], [596.0, 3558.5], [605.0, 4507.0], [603.0, 2766.0], [602.0, 4333.0], [601.0, 4250.5], [591.0, 4999.0], [578.0, 4132.0], [577.0, 4586.5], [583.0, 4273.0], [581.0, 4229.666666666667], [590.0, 4270.0], [589.0, 4581.0], [587.0, 2782.0], [586.0, 3454.5], [584.0, 4349.5], [599.0, 2773.0], [598.0, 2773.0], [597.0, 2775.0], [594.0, 3455.0], [593.0, 2776.0], [632.0, 4336.666666666667], [637.0, 4640.0], [639.0, 4190.0], [624.0, 4206.0], [636.0, 4308.0], [635.0, 4071.0], [634.0, 4445.0], [622.0, 4926.0], [608.0, 3288.6666666666665], [611.0, 3429.5], [609.0, 2888.0], [613.0, 4268.0], [612.0, 2759.0], [621.0, 4130.0], [620.0, 4251.0], [619.0, 4164.0], [617.0, 4916.0], [616.0, 3466.0], [629.0, 4988.0], [628.0, 4313.0], [627.0, 4486.0], [625.0, 4095.0], [668.0, 4015.0], [671.0, 2728.0], [657.0, 4246.0], [656.0, 4094.0], [659.0, 4017.0], [658.0, 4813.0], [661.0, 4243.0], [660.0, 4836.0], [670.0, 4104.0], [669.0, 4020.0], [667.0, 4105.0], [666.0, 3952.0], [665.0, 4006.0], [664.0, 4233.0], [655.0, 4905.0], [640.0, 2649.0], [642.0, 4032.0], [641.0, 2647.0], [644.0, 4929.0], [643.0, 4060.0], [646.0, 4085.0], [645.0, 4251.0], [654.0, 4125.0], [653.0, 4423.0], [652.0, 4914.0], [650.0, 2625.0], [649.0, 4593.0], [648.0, 4599.0], [663.0, 4235.0], [662.0, 4222.0], [691.0, 4068.0], [703.0, 4837.0], [701.0, 4176.4], [698.0, 4757.0], [677.0, 4156.0], [676.0, 3946.0], [675.0, 2565.0], [674.0, 4199.0], [673.0, 2573.0], [672.0, 2728.0], [687.0, 4104.5], [686.0, 3963.0], [684.0, 3978.0], [683.0, 4813.0], [682.0, 3990.0], [681.0, 4037.5], [694.0, 4016.0], [693.0, 4079.0], [692.0, 3966.5], [690.0, 2560.0], [688.0, 2553.0], [732.0, 3937.0], [735.0, 4527.0], [722.0, 3472.0], [720.0, 4552.0], [724.0, 2892.0], [723.0, 4155.0], [734.0, 2270.0], [733.0, 3838.0], [731.0, 2883.0], [730.0, 3938.0], [729.0, 3865.0], [728.0, 4251.5], [719.0, 4745.0], [708.0, 4675.0], [706.0, 4386.0], [711.0, 4037.0], [709.0, 3940.0], [718.0, 4027.0], [717.0, 4499.0], [716.0, 2443.0], [715.0, 3966.0], [714.0, 4104.0], [713.0, 3653.5], [726.0, 4131.0], [725.0, 3924.0], [761.0, 4781.0], [765.0, 4101.0], [766.0, 2001.0], [753.0, 3883.0], [752.0, 4061.0], [756.0, 2952.0], [755.0, 2127.0], [764.0, 2608.0], [763.0, 2385.0], [762.0, 2387.0], [760.0, 2028.5], [741.0, 4468.0], [740.0, 3523.5], [738.0, 4733.0], [737.0, 3930.0], [736.0, 4701.0], [751.0, 4176.0], [749.0, 3967.5], [748.0, 4047.0], [746.0, 3577.0], [745.0, 3977.0], [758.0, 3913.0], [757.0, 2023.0], [792.0, 3209.0], [797.0, 1896.0], [799.0, 1949.5], [785.0, 1970.0], [784.0, 1972.0], [796.0, 1999.0], [795.0, 4553.5], [793.0, 4419.0], [783.0, 4733.0], [770.0, 3223.5], [768.0, 3356.0], [773.0, 1999.5], [771.0, 1996.0], [775.0, 2069.0], [774.0, 1992.0], [782.0, 3214.0], [780.0, 1981.0], [779.0, 3879.0], [778.0, 4083.0], [777.0, 1989.0], [776.0, 1987.0], [790.0, 4728.0], [789.0, 3940.0], [788.0, 4463.0], [786.0, 4735.0], [824.0, 1918.0], [829.0, 4685.0], [831.0, 2709.0], [816.0, 1599.0], [827.0, 1737.0], [826.0, 4678.0], [825.0, 1910.0], [815.0, 4404.0], [800.0, 4432.0], [803.0, 1863.0], [802.0, 4494.5], [805.0, 4706.0], [804.0, 4429.0], [807.0, 1963.0], [806.0, 4706.0], [814.0, 1603.0], [813.0, 1813.0], [812.0, 1844.0], [811.0, 1847.0], [810.0, 4655.5], [808.0, 1848.0], [823.0, 4377.0], [822.0, 3235.5], [820.0, 3161.5], [818.0, 4573.5], [850.0, 4649.0], [861.0, 1459.3333333333333], [860.0, 4646.0], [857.0, 2727.0], [856.0, 1453.0], [844.0, 4493.0], [834.0, 4659.0], [832.0, 3699.0], [837.0, 4573.0], [836.0, 3537.3333333333335], [839.0, 4352.0], [838.0, 1794.0], [843.0, 4351.0], [842.0, 4365.0], [841.0, 3151.0], [854.0, 1662.0], [853.0, 3088.0], [851.0, 1143.0], [849.0, 4653.0], [848.0, 2400.75], [881.0, 4555.0], [893.0, 3362.3333333333335], [895.0, 4576.0], [880.0, 3076.0], [891.0, 4528.0], [889.0, 4610.0], [888.0, 3006.5], [871.0, 3077.5], [869.0, 1617.3333333333333], [866.0, 1498.5], [864.0, 1147.0], [877.0, 1584.0], [876.0, 4612.0], [875.0, 950.0], [874.0, 920.0], [873.0, 1538.0], [872.0, 1593.0], [887.0, 4236.666666666667], [885.0, 1232.0], [882.0, 2806.0], [921.0, 863.0], [914.0, 860.0], [925.0, 4236.0], [926.0, 843.0], [913.0, 4582.0], [912.0, 4474.0], [923.0, 2591.0], [920.0, 2711.5], [903.0, 4597.0], [902.0, 4428.0], [901.0, 4599.0], [900.0, 900.0], [899.0, 2745.0], [897.0, 4597.0], [896.0, 4449.0], [911.0, 877.0], [910.0, 1432.0], [909.0, 877.0], [908.0, 854.0], [907.0, 869.0], [906.0, 1463.0], [905.0, 888.0], [904.0, 1464.0], [918.0, 854.0], [917.0, 858.5], [915.0, 865.0], [952.0, 878.0], [958.0, 788.5], [959.0, 705.0], [944.0, 790.0], [947.0, 888.0], [946.0, 810.5], [956.0, 754.0], [955.0, 757.0], [954.0, 825.0], [943.0, 836.0], [929.0, 835.0], [928.0, 863.0], [932.0, 829.0], [931.0, 834.0], [935.0, 825.0], [933.0, 836.0], [942.0, 897.0], [941.0, 832.0], [940.0, 819.0], [939.0, 820.0], [938.0, 824.0], [937.0, 842.0], [936.0, 827.0], [951.0, 878.0], [950.0, 4205.0], [949.0, 827.0], [948.0, 4197.0], [977.0, 738.0], [989.0, 1896.6666666666665], [986.0, 821.5], [984.0, 2629.5], [966.0, 4163.0], [965.0, 4430.0], [964.0, 2455.0], [962.0, 754.0], [961.0, 826.0], [960.0, 4172.0], [982.0, 4455.5], [980.0, 1935.0], [978.0, 805.0], [976.0, 739.0], [974.0, 676.0], [972.0, 710.0], [970.0, 4175.0], [969.0, 4176.0], [968.0, 4169.5], [1021.0, 3822.0], [1023.0, 3869.0], [1020.0, 2076.5], [1018.0, 331.0], [1017.0, 3822.5], [998.0, 3939.5], [996.0, 3864.0], [995.0, 3982.0], [994.0, 2170.0], [992.0, 1802.0], [1007.0, 3921.0], [1006.0, 3924.0], [1005.0, 3811.0], [1002.0, 3593.0], [1001.0, 3858.0], [1000.0, 3884.0], [1015.0, 3579.0], [1014.0, 2159.0], [1012.0, 415.5], [1010.0, 421.6666666666667], [1084.0, 3655.5], [1056.0, 3778.0], [1058.0, 3870.0], [1060.0, 3831.0], [1064.0, 3819.0], [1066.0, 3774.0], [1068.0, 3755.0], [1070.0, 3738.0], [1086.0, 3836.0], [1082.0, 3816.0], [1080.0, 3649.5], [1078.0, 3483.0], [1074.0, 3671.0], [1072.0, 3760.5], [1038.0, 3862.5], [1036.0, 3823.5], [1034.0, 3886.75], [1030.0, 3865.5], [1028.0, 3758.6666666666665], [1024.0, 3960.0], [1054.0, 3791.0], [1052.0, 3873.0], [1050.0, 3876.5], [1046.0, 3910.0], [1042.0, 3806.0], [1040.0, 3823.0], [1142.0, 3654.0], [1146.0, 3722.0], [1150.0, 3651.0], [1120.0, 3748.0], [1122.0, 3678.0], [1124.0, 3688.0], [1128.0, 3750.0], [1132.0, 3704.5], [1130.0, 3682.0], [1144.0, 3723.0], [1140.0, 3725.0], [1138.0, 3727.0], [1136.0, 3669.0], [1100.0, 3766.0], [1096.0, 3799.0], [1094.0, 3801.0], [1092.0, 3708.0], [1090.0, 3811.0], [1088.0, 3830.0], [1118.0, 3751.0], [1116.0, 3642.0], [1114.0, 3746.0], [1112.0, 3753.0], [1110.0, 3743.75], [1204.0, 3728.0], [1184.0, 56.0], [1186.0, 52.0], [1192.0, 1874.5], [1190.0, 47.0], [1196.0, 1872.0], [1194.0, 1871.5], [1208.0, 2759.75], [1206.0, 3672.0], [1202.0, 3639.0], [1166.0, 3689.0], [1164.0, 1882.5], [1162.0, 2078.5], [1160.0, 68.0], [1158.0, 3639.0], [1156.0, 60.0], [1154.0, 1818.0], [1152.0, 3716.0], [1182.0, 3589.0], [1180.0, 43.0], [1178.0, 50.0], [1176.0, 3600.0], [1174.0, 3680.0], [1168.0, 54.0], [1272.0, 61.0], [1278.0, 3636.0], [1248.0, 3611.0], [1252.0, 57.0], [1250.0, 3623.0], [1254.0, 52.0], [1256.0, 56.0], [1258.0, 47.0], [1262.0, 76.0], [1276.0, 97.0], [1270.0, 3639.0], [1268.0, 1862.5], [1264.0, 87.0], [1228.0, 51.0], [1224.0, 3415.0], [1222.0, 1743.75], [1220.0, 3697.5], [1244.0, 1839.5], [1242.0, 3610.0], [1238.0, 3619.0], [1236.0, 3640.0], [1234.0, 3624.0], [1232.0, 3612.0], [1292.0, 112.0], [1294.0, 65.0], [1340.0, 3743.0], [1330.0, 3852.0], [1288.0, 64.0], [1282.0, 131.0], [1280.0, 965.7499999999999], [1308.0, 78.0], [1306.0, 258.0], [1304.0, 1906.0], [1302.0, 90.0], [1298.0, 84.0], [1398.0, 91.0], [1384.0, 3557.0], [1380.0, 3717.0], [1390.0, 3794.0], [1406.0, 3604.0], [1404.0, 3640.0], [1402.0, 77.0], [1400.0, 3578.0], [1396.0, 87.0], [1394.0, 3680.0], [1392.0, 101.0], [1356.0, 3780.5], [1354.0, 3805.0], [1350.0, 3822.0], [1348.0, 3494.0], [1346.0, 3821.0], [1374.0, 3663.0], [1368.0, 3810.0], [1366.0, 168.0], [1434.0, 54.5], [1430.0, 865.3], [1428.0, 69.0], [1426.0, 3417.5], [1424.0, 62.0], [1432.0, 398.1111111111111], [1442.0, 1567.3333333333335], [1444.0, 46.0], [1446.0, 3372.0], [1462.0, 412.5], [1460.0, 52.0], [1458.0, 53.0], [1408.0, 58.0], [1410.0, 55.0], [1414.0, 3532.0], [1416.0, 3492.0], [1418.0, 3551.0], [1420.0, 84.5], [1422.0, 3541.0], [1438.0, 51.0], [1436.0, 66.0], [1470.0, 79.0], [1468.0, 34.0], [1484.0, 1020.2], [1472.0, 368.6666666666667], [1502.0, 886.0], [1496.0, 3306.0], [1492.0, 363.0], [1482.0, 317.5], [1486.0, 381.5], [1478.0, 403.0], [1476.0, 408.0], [1506.0, 969.6666666666666], [1508.0, 2396.0], [1510.0, 1689.5], [1516.0, 1303.5], [1514.0, 266.0], [1512.0, 272.0], [1518.0, 1787.0], [1504.0, 2321.0], [1534.0, 192.0], [1526.0, 1098.6666666666667], [1528.0, 1665.0], [1530.0, 2327.0], [1532.0, 1266.0], [1520.0, 986.0], [1542.0, 161.0], [1560.0, 73.0], [1566.0, 2998.0], [1540.0, 32.0], [1564.0, 3165.0], [1588.0, 1657.5], [1548.0, 277.0], [1546.0, 207.0], [1590.0, 2981.6666666666665], [1568.0, 3227.0], [1576.0, 3110.0], [1574.0, 2882.0], [1592.0, 3030.0], [1562.0, 97.0], [1558.0, 741.0], [1556.0, 41.0], [1554.0, 137.75], [1552.0, 323.2], [1652.0, 1845.3333333333333], [1662.0, 1768.75], [1658.0, 1975.0], [1654.0, 789.25], [1650.0, 1545.5], [1648.0, 2658.0], [1614.0, 3034.0], [1608.0, 3058.0], [1604.0, 2921.0], [1628.0, 3030.0], [1624.0, 3038.0], [1620.0, 3029.5], [1618.0, 2812.0], [1616.0, 3049.0], [1660.0, 1524.4], [1632.0, 2944.0], [1636.0, 2963.0], [1640.0, 2708.0], [1642.0, 2903.0], [1644.0, 2699.0], [1646.0, 1543.0], [1712.0, 1576.0], [1664.0, 1585.75], [1694.0, 1200.5], [1692.0, 2327.0], [1688.0, 2044.5], [1686.0, 907.0], [1684.0, 2336.0], [1682.0, 1459.4], [1680.0, 2182.5], [1698.0, 39.0], [1696.0, 2593.0], [1700.0, 1640.0], [1702.0, 1982.0], [1704.0, 2465.0], [1710.0, 38.0], [1726.0, 1690.0], [1720.0, 1599.0], [1716.0, 1750.0], [1678.0, 2410.0], [1674.0, 2303.5], [1672.0, 2302.5], [1670.0, 2100.0], [1668.0, 1929.0], [1666.0, 1728.1666666666667], [1736.0, 1824.25], [1734.0, 1099.6666666666667], [1732.0, 33.0], [1730.0, 1521.6666666666667], [1728.0, 1526.0], [1738.0, 1669.0], [1057.0, 3803.0], [1063.0, 3781.0], [1087.0, 3740.0], [1061.0, 3866.0], [1065.0, 3776.0], [1067.0, 3750.0], [1069.0, 3841.0], [1085.0, 3809.0], [1081.0, 3800.0], [1077.0, 3601.6666666666665], [1039.0, 3894.0], [1025.0, 3829.0], [1055.0, 3896.0], [1053.0, 3839.0], [1049.0, 3880.0], [1047.0, 3902.0], [1045.0, 3851.5], [1043.0, 3818.0], [1041.0, 3554.0], [1145.0, 88.0], [1125.0, 3689.0], [1121.0, 3634.0], [1123.0, 3747.0], [1127.0, 3744.0], [1129.0, 3744.5], [1135.0, 3730.0], [1133.0, 3667.0], [1149.0, 3608.0], [1147.0, 3567.0], [1143.0, 3727.0], [1141.0, 83.0], [1139.0, 3650.5], [1103.0, 3728.0], [1099.0, 3708.5], [1097.0, 3722.0], [1095.0, 3727.0], [1093.0, 3808.0], [1091.0, 3801.0], [1089.0, 3800.0], [1119.0, 3636.0], [1117.0, 3700.0], [1115.0, 3707.0], [1113.0, 3393.0], [1111.0, 3635.4], [1201.0, 66.0], [1207.0, 3730.0], [1215.0, 1858.5], [1185.0, 55.0], [1189.0, 2433.0], [1199.0, 3644.0], [1197.0, 66.0], [1213.0, 3644.0], [1203.0, 61.0], [1165.0, 48.0], [1159.0, 63.0], [1157.0, 70.0], [1155.0, 3559.0], [1153.0, 3714.0], [1181.0, 3667.0], [1179.0, 3673.0], [1177.0, 44.0], [1175.0, 3843.0], [1173.0, 53.0], [1171.0, 1873.0], [1169.0, 3687.0], [1253.0, 57.0], [1255.0, 96.0], [1249.0, 3601.0], [1257.0, 83.0], [1261.0, 69.0], [1259.0, 3645.0], [1263.0, 3607.0], [1273.0, 1828.5], [1267.0, 88.0], [1265.0, 3641.0], [1229.0, 3527.75], [1223.0, 36.0], [1219.0, 3645.0], [1247.0, 3643.5], [1245.0, 3605.0], [1241.0, 3605.0], [1239.0, 3165.0], [1237.0, 3631.0], [1235.0, 2448.0], [1337.0, 3708.0], [1339.0, 3846.0], [1343.0, 3835.0], [1341.0, 3759.0], [1335.0, 3523.0], [1293.0, 71.0], [1291.0, 1848.5], [1289.0, 70.0], [1287.0, 72.5], [1285.0, 101.0], [1281.0, 137.0], [1311.0, 3573.0], [1307.0, 3571.0], [1305.0, 3822.0], [1299.0, 3067.0], [1297.0, 68.0], [1399.0, 3651.0], [1403.0, 3631.0], [1407.0, 81.0], [1377.0, 3668.0], [1391.0, 2536.2000000000003], [1401.0, 3633.0], [1397.0, 114.0], [1395.0, 57.0], [1393.0, 3684.0], [1359.0, 3485.0], [1353.0, 3677.0], [1351.0, 2888.25], [1349.0, 3740.5], [1347.0, 3503.0], [1345.0, 3761.5], [1375.0, 3810.0], [1365.0, 3809.5], [1461.0, 2094.0], [1469.0, 3400.0], [1429.0, 46.0], [1427.0, 3324.0], [1433.0, 691.0], [1431.0, 744.0], [1441.0, 50.0], [1443.0, 3330.0], [1445.0, 3390.0], [1447.0, 55.0], [1451.0, 3424.5], [1449.0, 1937.0], [1455.0, 3404.0], [1453.0, 1845.0], [1457.0, 1359.3333333333335], [1439.0, 2636.0], [1409.0, 3567.0], [1411.0, 3563.0], [1413.0, 3615.5], [1415.0, 109.0], [1417.0, 75.0], [1421.0, 56.0], [1423.0, 76.0], [1437.0, 3398.0], [1435.0, 1769.0], [1471.0, 45.0], [1467.0, 1241.3333333333335], [1465.0, 457.0], [1463.0, 3381.0], [1483.0, 239.14285714285714], [1521.0, 51.0], [1503.0, 2492.0], [1501.0, 1298.5], [1499.0, 406.5], [1497.0, 1856.5], [1491.0, 1800.0], [1489.0, 247.33333333333334], [1481.0, 42.0], [1479.0, 3300.0], [1477.0, 443.0], [1475.0, 1438.0], [1473.0, 271.0], [1485.0, 724.0], [1507.0, 475.0], [1509.0, 1313.25], [1511.0, 1637.0], [1517.0, 45.0], [1513.0, 3204.5], [1505.0, 1401.6], [1535.0, 3283.0], [1533.0, 3233.0], [1525.0, 254.0], [1523.0, 430.0], [1529.0, 3199.0], [1543.0, 835.6666666666667], [1537.0, 3238.5], [1539.0, 3206.5], [1541.0, 389.0], [1563.0, 3236.0], [1549.0, 166.0], [1547.0, 1374.0], [1545.0, 165.0], [1589.0, 3064.0], [1593.0, 2852.25], [1571.0, 2807.0], [1559.0, 1969.3333333333335], [1561.0, 71.5], [1557.0, 1846.8], [1555.0, 3203.0], [1553.0, 73.4], [1649.0, 1369.6666666666665], [1651.0, 1107.3333333333333], [1653.0, 2762.0], [1657.0, 914.0], [1655.0, 1029.3333333333335], [1607.0, 2978.0], [1605.0, 3058.0], [1629.0, 2986.0], [1627.0, 3018.0], [1625.0, 2731.0], [1623.0, 2739.0], [1617.0, 2880.0], [1661.0, 375.0], [1659.0, 699.5], [1663.0, 1357.0], [1635.0, 2720.5], [1639.0, 3011.0], [1641.0, 2898.0], [1643.0, 2896.0], [1645.0, 2986.0], [1647.0, 2659.25], [1719.0, 455.75], [1717.0, 44.0], [1701.0, 923.8571428571429], [1723.0, 1607.0], [1665.0, 1860.0], [1695.0, 1769.0], [1693.0, 2319.0], [1691.0, 856.5], [1689.0, 46.0], [1687.0, 1638.5], [1685.0, 2586.0], [1683.0, 891.0], [1681.0, 2679.0], [1727.0, 781.0], [1699.0, 1782.0], [1703.0, 2012.0], [1709.0, 1831.0], [1705.0, 2506.0], [1711.0, 1530.0], [1725.0, 1744.0], [1721.0, 2158.5], [1679.0, 2417.0], [1677.0, 1232.0], [1675.0, 2390.0], [1669.0, 1487.0], [1667.0, 2510.3333333333335], [1713.0, 2497.0], [1733.0, 1107.5], [1737.0, 1474.0], [1731.0, 1859.0], [1729.0, 1311.0], [1.0, 7286.0]], "isOverall": false, "label": "ดึงข้อมูลทะเบียนบุคคลทั้งหน่วยบริการ", "isController": false}, {"data": [[922.9679999999976, 3264.1071999999945]], "isOverall": false, "label": "ดึงข้อมูลทะเบียนบุคคลทั้งหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1738.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14218.75, "minX": 1.75558692E12, "maxY": 113718.75, "series": [{"data": [[1.75558692E12, 113718.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75558692E12, 14218.75]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558692E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3264.1071999999945, "minX": 1.75558692E12, "maxY": 3264.1071999999945, "series": [{"data": [[1.75558692E12, 3264.1071999999945]], "isOverall": false, "label": "ดึงข้อมูลทะเบียนบุคคลทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558692E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3263.913599999997, "minX": 1.75558692E12, "maxY": 3263.913599999997, "series": [{"data": [[1.75558692E12, 3263.913599999997]], "isOverall": false, "label": "ดึงข้อมูลทะเบียนบุคคลทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558692E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2859.4581333333344, "minX": 1.75558692E12, "maxY": 2859.4581333333344, "series": [{"data": [[1.75558692E12, 2859.4581333333344]], "isOverall": false, "label": "ดึงข้อมูลทะเบียนบุคคลทั้งหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558692E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 31.0, "minX": 1.75558692E12, "maxY": 7286.0, "series": [{"data": [[1.75558692E12, 7286.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75558692E12, 5675.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75558692E12, 6788.360000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75558692E12, 6061.4]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75558692E12, 31.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75558692E12, 3694.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558692E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 480.0, "minX": 55.0, "maxY": 6238.0, "series": [{"data": [[267.0, 5672.0], [274.0, 4821.5], [638.0, 3741.0], [182.0, 1803.0], [367.0, 3030.0], [92.0, 480.0], [55.0, 6238.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 638.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 477.0, "minX": 55.0, "maxY": 6238.0, "series": [{"data": [[267.0, 5672.0], [274.0, 4821.5], [638.0, 3741.0], [182.0, 1803.0], [367.0, 3030.0], [92.0, 477.0], [55.0, 6238.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 638.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75558692E12, "maxY": 31.25, "series": [{"data": [[1.75558692E12, 31.25]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558692E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75558692E12, "maxY": 31.25, "series": [{"data": [[1.75558692E12, 31.25]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75558692E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75558692E12, "maxY": 31.25, "series": [{"data": [[1.75558692E12, 31.25]], "isOverall": false, "label": "ดึงข้อมูลทะเบียนบุคคลทั้งหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558692E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 31.25, "minX": 1.75558692E12, "maxY": 31.25, "series": [{"data": [[1.75558692E12, 31.25]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75558692E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

