/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "maxY": 4404.0, "series": [{"data": [[0.0, 22.0], [0.1, 23.0], [0.2, 25.0], [0.3, 25.0], [0.4, 25.0], [0.5, 25.0], [0.6, 25.0], [0.7, 25.0], [0.8, 26.0], [0.9, 26.0], [1.0, 26.0], [1.1, 26.0], [1.2, 26.0], [1.3, 26.0], [1.4, 26.0], [1.5, 27.0], [1.6, 27.0], [1.7, 27.0], [1.8, 27.0], [1.9, 27.0], [2.0, 27.0], [2.1, 27.0], [2.2, 27.0], [2.3, 28.0], [2.4, 28.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 28.0], [2.9, 28.0], [3.0, 28.0], [3.1, 28.0], [3.2, 28.0], [3.3, 28.0], [3.4, 28.0], [3.5, 28.0], [3.6, 28.0], [3.7, 28.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 29.0], [4.2, 29.0], [4.3, 29.0], [4.4, 29.0], [4.5, 29.0], [4.6, 29.0], [4.7, 29.0], [4.8, 29.0], [4.9, 29.0], [5.0, 29.0], [5.1, 29.0], [5.2, 29.0], [5.3, 29.0], [5.4, 29.0], [5.5, 29.0], [5.6, 29.0], [5.7, 30.0], [5.8, 30.0], [5.9, 30.0], [6.0, 30.0], [6.1, 30.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 30.0], [6.6, 30.0], [6.7, 30.0], [6.8, 30.0], [6.9, 30.0], [7.0, 30.0], [7.1, 30.0], [7.2, 30.0], [7.3, 30.0], [7.4, 30.0], [7.5, 30.0], [7.6, 30.0], [7.7, 30.0], [7.8, 30.0], [7.9, 30.0], [8.0, 30.0], [8.1, 31.0], [8.2, 31.0], [8.3, 31.0], [8.4, 31.0], [8.5, 31.0], [8.6, 31.0], [8.7, 31.0], [8.8, 31.0], [8.9, 31.0], [9.0, 31.0], [9.1, 31.0], [9.2, 31.0], [9.3, 31.0], [9.4, 31.0], [9.5, 31.0], [9.6, 31.0], [9.7, 31.0], [9.8, 31.0], [9.9, 31.0], [10.0, 31.0], [10.1, 31.0], [10.2, 31.0], [10.3, 31.0], [10.4, 32.0], [10.5, 32.0], [10.6, 32.0], [10.7, 32.0], [10.8, 32.0], [10.9, 32.0], [11.0, 32.0], [11.1, 32.0], [11.2, 32.0], [11.3, 32.0], [11.4, 32.0], [11.5, 32.0], [11.6, 32.0], [11.7, 32.0], [11.8, 32.0], [11.9, 32.0], [12.0, 32.0], [12.1, 32.0], [12.2, 32.0], [12.3, 32.0], [12.4, 33.0], [12.5, 33.0], [12.6, 33.0], [12.7, 33.0], [12.8, 33.0], [12.9, 33.0], [13.0, 33.0], [13.1, 33.0], [13.2, 33.0], [13.3, 33.0], [13.4, 33.0], [13.5, 33.0], [13.6, 33.0], [13.7, 33.0], [13.8, 33.0], [13.9, 33.0], [14.0, 33.0], [14.1, 33.0], [14.2, 33.0], [14.3, 33.0], [14.4, 33.0], [14.5, 33.0], [14.6, 34.0], [14.7, 34.0], [14.8, 34.0], [14.9, 34.0], [15.0, 34.0], [15.1, 34.0], [15.2, 34.0], [15.3, 34.0], [15.4, 34.0], [15.5, 34.0], [15.6, 34.0], [15.7, 34.0], [15.8, 34.0], [15.9, 34.0], [16.0, 34.0], [16.1, 34.0], [16.2, 34.0], [16.3, 34.0], [16.4, 34.0], [16.5, 34.0], [16.6, 34.0], [16.7, 34.0], [16.8, 34.0], [16.9, 34.0], [17.0, 34.0], [17.1, 34.0], [17.2, 34.0], [17.3, 34.0], [17.4, 34.0], [17.5, 34.0], [17.6, 35.0], [17.7, 35.0], [17.8, 35.0], [17.9, 35.0], [18.0, 35.0], [18.1, 35.0], [18.2, 35.0], [18.3, 35.0], [18.4, 35.0], [18.5, 35.0], [18.6, 35.0], [18.7, 35.0], [18.8, 35.0], [18.9, 35.0], [19.0, 35.0], [19.1, 36.0], [19.2, 36.0], [19.3, 36.0], [19.4, 36.0], [19.5, 36.0], [19.6, 36.0], [19.7, 36.0], [19.8, 36.0], [19.9, 36.0], [20.0, 36.0], [20.1, 36.0], [20.2, 36.0], [20.3, 36.0], [20.4, 36.0], [20.5, 36.0], [20.6, 37.0], [20.7, 37.0], [20.8, 37.0], [20.9, 37.0], [21.0, 37.0], [21.1, 37.0], [21.2, 37.0], [21.3, 37.0], [21.4, 37.0], [21.5, 37.0], [21.6, 37.0], [21.7, 37.0], [21.8, 37.0], [21.9, 37.0], [22.0, 37.0], [22.1, 37.0], [22.2, 37.0], [22.3, 37.0], [22.4, 37.0], [22.5, 37.0], [22.6, 37.0], [22.7, 37.0], [22.8, 37.0], [22.9, 37.0], [23.0, 38.0], [23.1, 38.0], [23.2, 38.0], [23.3, 38.0], [23.4, 38.0], [23.5, 38.0], [23.6, 38.0], [23.7, 38.0], [23.8, 38.0], [23.9, 38.0], [24.0, 38.0], [24.1, 38.0], [24.2, 38.0], [24.3, 38.0], [24.4, 38.0], [24.5, 38.0], [24.6, 38.0], [24.7, 38.0], [24.8, 39.0], [24.9, 39.0], [25.0, 39.0], [25.1, 39.0], [25.2, 39.0], [25.3, 39.0], [25.4, 39.0], [25.5, 39.0], [25.6, 39.0], [25.7, 39.0], [25.8, 39.0], [25.9, 39.0], [26.0, 39.0], [26.1, 39.0], [26.2, 40.0], [26.3, 40.0], [26.4, 40.0], [26.5, 40.0], [26.6, 40.0], [26.7, 40.0], [26.8, 40.0], [26.9, 40.0], [27.0, 40.0], [27.1, 40.0], [27.2, 40.0], [27.3, 40.0], [27.4, 40.0], [27.5, 41.0], [27.6, 41.0], [27.7, 41.0], [27.8, 41.0], [27.9, 41.0], [28.0, 41.0], [28.1, 41.0], [28.2, 41.0], [28.3, 41.0], [28.4, 42.0], [28.5, 42.0], [28.6, 42.0], [28.7, 42.0], [28.8, 42.0], [28.9, 42.0], [29.0, 42.0], [29.1, 42.0], [29.2, 42.0], [29.3, 42.0], [29.4, 42.0], [29.5, 42.0], [29.6, 43.0], [29.7, 43.0], [29.8, 43.0], [29.9, 43.0], [30.0, 43.0], [30.1, 43.0], [30.2, 43.0], [30.3, 43.0], [30.4, 43.0], [30.5, 44.0], [30.6, 44.0], [30.7, 44.0], [30.8, 44.0], [30.9, 44.0], [31.0, 44.0], [31.1, 45.0], [31.2, 45.0], [31.3, 45.0], [31.4, 45.0], [31.5, 45.0], [31.6, 45.0], [31.7, 45.0], [31.8, 45.0], [31.9, 45.0], [32.0, 45.0], [32.1, 45.0], [32.2, 45.0], [32.3, 46.0], [32.4, 46.0], [32.5, 46.0], [32.6, 46.0], [32.7, 46.0], [32.8, 47.0], [32.9, 47.0], [33.0, 47.0], [33.1, 47.0], [33.2, 47.0], [33.3, 47.0], [33.4, 47.0], [33.5, 47.0], [33.6, 47.0], [33.7, 47.0], [33.8, 47.0], [33.9, 47.0], [34.0, 48.0], [34.1, 48.0], [34.2, 48.0], [34.3, 48.0], [34.4, 48.0], [34.5, 48.0], [34.6, 48.0], [34.7, 48.0], [34.8, 48.0], [34.9, 49.0], [35.0, 49.0], [35.1, 49.0], [35.2, 49.0], [35.3, 49.0], [35.4, 49.0], [35.5, 49.0], [35.6, 49.0], [35.7, 50.0], [35.8, 50.0], [35.9, 50.0], [36.0, 50.0], [36.1, 50.0], [36.2, 51.0], [36.3, 51.0], [36.4, 51.0], [36.5, 51.0], [36.6, 52.0], [36.7, 52.0], [36.8, 52.0], [36.9, 52.0], [37.0, 52.0], [37.1, 52.0], [37.2, 52.0], [37.3, 52.0], [37.4, 53.0], [37.5, 53.0], [37.6, 54.0], [37.7, 54.0], [37.8, 54.0], [37.9, 54.0], [38.0, 55.0], [38.1, 55.0], [38.2, 55.0], [38.3, 55.0], [38.4, 55.0], [38.5, 56.0], [38.6, 56.0], [38.7, 56.0], [38.8, 56.0], [38.9, 57.0], [39.0, 57.0], [39.1, 57.0], [39.2, 57.0], [39.3, 57.0], [39.4, 57.0], [39.5, 57.0], [39.6, 58.0], [39.7, 58.0], [39.8, 58.0], [39.9, 58.0], [40.0, 59.0], [40.1, 59.0], [40.2, 60.0], [40.3, 62.0], [40.4, 62.0], [40.5, 62.0], [40.6, 62.0], [40.7, 63.0], [40.8, 63.0], [40.9, 63.0], [41.0, 63.0], [41.1, 63.0], [41.2, 64.0], [41.3, 65.0], [41.4, 65.0], [41.5, 65.0], [41.6, 65.0], [41.7, 65.0], [41.8, 66.0], [41.9, 66.0], [42.0, 67.0], [42.1, 67.0], [42.2, 67.0], [42.3, 68.0], [42.4, 69.0], [42.5, 69.0], [42.6, 69.0], [42.7, 70.0], [42.8, 70.0], [42.9, 70.0], [43.0, 71.0], [43.1, 71.0], [43.2, 71.0], [43.3, 73.0], [43.4, 74.0], [43.5, 74.0], [43.6, 74.0], [43.7, 75.0], [43.8, 75.0], [43.9, 75.0], [44.0, 76.0], [44.1, 76.0], [44.2, 77.0], [44.3, 78.0], [44.4, 78.0], [44.5, 78.0], [44.6, 78.0], [44.7, 80.0], [44.8, 80.0], [44.9, 81.0], [45.0, 82.0], [45.1, 82.0], [45.2, 83.0], [45.3, 83.0], [45.4, 83.0], [45.5, 84.0], [45.6, 84.0], [45.7, 85.0], [45.8, 86.0], [45.9, 87.0], [46.0, 87.0], [46.1, 88.0], [46.2, 88.0], [46.3, 89.0], [46.4, 89.0], [46.5, 90.0], [46.6, 90.0], [46.7, 91.0], [46.8, 91.0], [46.9, 93.0], [47.0, 93.0], [47.1, 94.0], [47.2, 94.0], [47.3, 95.0], [47.4, 96.0], [47.5, 97.0], [47.6, 97.0], [47.7, 99.0], [47.8, 99.0], [47.9, 101.0], [48.0, 102.0], [48.1, 105.0], [48.2, 106.0], [48.3, 107.0], [48.4, 109.0], [48.5, 112.0], [48.6, 114.0], [48.7, 118.0], [48.8, 119.0], [48.9, 120.0], [49.0, 126.0], [49.1, 134.0], [49.2, 135.0], [49.3, 136.0], [49.4, 139.0], [49.5, 146.0], [49.6, 147.0], [49.7, 154.0], [49.8, 156.0], [49.9, 157.0], [50.0, 157.0], [50.1, 157.0], [50.2, 157.0], [50.3, 162.0], [50.4, 162.0], [50.5, 179.0], [50.6, 193.0], [50.7, 208.0], [50.8, 222.0], [50.9, 229.0], [51.0, 231.0], [51.1, 252.0], [51.2, 253.0], [51.3, 280.0], [51.4, 289.0], [51.5, 323.0], [51.6, 354.0], [51.7, 372.0], [51.8, 389.0], [51.9, 405.0], [52.0, 460.0], [52.1, 462.0], [52.2, 478.0], [52.3, 509.0], [52.4, 513.0], [52.5, 525.0], [52.6, 527.0], [52.7, 534.0], [52.8, 536.0], [52.9, 544.0], [53.0, 544.0], [53.1, 552.0], [53.2, 562.0], [53.3, 579.0], [53.4, 579.0], [53.5, 590.0], [53.6, 592.0], [53.7, 616.0], [53.8, 619.0], [53.9, 635.0], [54.0, 638.0], [54.1, 642.0], [54.2, 645.0], [54.3, 660.0], [54.4, 661.0], [54.5, 699.0], [54.6, 708.0], [54.7, 745.0], [54.8, 748.0], [54.9, 767.0], [55.0, 852.0], [55.1, 862.0], [55.2, 866.0], [55.3, 869.0], [55.4, 870.0], [55.5, 892.0], [55.6, 899.0], [55.7, 903.0], [55.8, 916.0], [55.9, 925.0], [56.0, 932.0], [56.1, 951.0], [56.2, 955.0], [56.3, 956.0], [56.4, 960.0], [56.5, 962.0], [56.6, 964.0], [56.7, 967.0], [56.8, 969.0], [56.9, 1015.0], [57.0, 1019.0], [57.1, 1038.0], [57.2, 1046.0], [57.3, 1067.0], [57.4, 1074.0], [57.5, 1084.0], [57.6, 1089.0], [57.7, 1100.0], [57.8, 1109.0], [57.9, 1124.0], [58.0, 1126.0], [58.1, 1133.0], [58.2, 1145.0], [58.3, 1151.0], [58.4, 1159.0], [58.5, 1171.0], [58.6, 1184.0], [58.7, 1205.0], [58.8, 1206.0], [58.9, 1234.0], [59.0, 1236.0], [59.1, 1243.0], [59.2, 1282.0], [59.3, 1306.0], [59.4, 1310.0], [59.5, 1335.0], [59.6, 1361.0], [59.7, 1380.0], [59.8, 1381.0], [59.9, 1384.0], [60.0, 1386.0], [60.1, 1396.0], [60.2, 1400.0], [60.3, 1403.0], [60.4, 1407.0], [60.5, 1443.0], [60.6, 1446.0], [60.7, 1458.0], [60.8, 1466.0], [60.9, 1490.0], [61.0, 1491.0], [61.1, 1523.0], [61.2, 1531.0], [61.3, 1561.0], [61.4, 1567.0], [61.5, 1586.0], [61.6, 1591.0], [61.7, 1597.0], [61.8, 1611.0], [61.9, 1626.0], [62.0, 1678.0], [62.1, 1685.0], [62.2, 1686.0], [62.3, 1715.0], [62.4, 1724.0], [62.5, 1731.0], [62.6, 1736.0], [62.7, 1750.0], [62.8, 1782.0], [62.9, 1798.0], [63.0, 1813.0], [63.1, 1822.0], [63.2, 1823.0], [63.3, 1846.0], [63.4, 1866.0], [63.5, 1875.0], [63.6, 1878.0], [63.7, 1884.0], [63.8, 1886.0], [63.9, 1928.0], [64.0, 1930.0], [64.1, 1952.0], [64.2, 1982.0], [64.3, 2010.0], [64.4, 2013.0], [64.5, 2020.0], [64.6, 2027.0], [64.7, 2030.0], [64.8, 2036.0], [64.9, 2038.0], [65.0, 2038.0], [65.1, 2045.0], [65.2, 2063.0], [65.3, 2083.0], [65.4, 2084.0], [65.5, 2091.0], [65.6, 2093.0], [65.7, 2134.0], [65.8, 2134.0], [65.9, 2145.0], [66.0, 2149.0], [66.1, 2151.0], [66.2, 2165.0], [66.3, 2181.0], [66.4, 2184.0], [66.5, 2196.0], [66.6, 2197.0], [66.7, 2231.0], [66.8, 2235.0], [66.9, 2274.0], [67.0, 2294.0], [67.1, 2319.0], [67.2, 2319.0], [67.3, 2329.0], [67.4, 2340.0], [67.5, 2358.0], [67.6, 2363.0], [67.7, 2393.0], [67.8, 2396.0], [67.9, 2407.0], [68.0, 2408.0], [68.1, 2415.0], [68.2, 2420.0], [68.3, 2431.0], [68.4, 2433.0], [68.5, 2434.0], [68.6, 2435.0], [68.7, 2436.0], [68.8, 2440.0], [68.9, 2452.0], [69.0, 2468.0], [69.1, 2472.0], [69.2, 2485.0], [69.3, 2487.0], [69.4, 2493.0], [69.5, 2515.0], [69.6, 2521.0], [69.7, 2537.0], [69.8, 2539.0], [69.9, 2563.0], [70.0, 2574.0], [70.1, 2579.0], [70.2, 2607.0], [70.3, 2639.0], [70.4, 2640.0], [70.5, 2650.0], [70.6, 2658.0], [70.7, 2664.0], [70.8, 2666.0], [70.9, 2683.0], [71.0, 2688.0], [71.1, 2697.0], [71.2, 2698.0], [71.3, 2735.0], [71.4, 2744.0], [71.5, 2761.0], [71.6, 2762.0], [71.7, 2778.0], [71.8, 2792.0], [71.9, 2814.0], [72.0, 2822.0], [72.1, 2851.0], [72.2, 2870.0], [72.3, 2887.0], [72.4, 2888.0], [72.5, 2891.0], [72.6, 2896.0], [72.7, 2902.0], [72.8, 2903.0], [72.9, 2914.0], [73.0, 2915.0], [73.1, 2917.0], [73.2, 2923.0], [73.3, 2942.0], [73.4, 2947.0], [73.5, 2948.0], [73.6, 2949.0], [73.7, 2950.0], [73.8, 2953.0], [73.9, 2962.0], [74.0, 2967.0], [74.1, 2976.0], [74.2, 2977.0], [74.3, 2981.0], [74.4, 2991.0], [74.5, 2993.0], [74.6, 3006.0], [74.7, 3016.0], [74.8, 3017.0], [74.9, 3027.0], [75.0, 3029.0], [75.1, 3033.0], [75.2, 3033.0], [75.3, 3051.0], [75.4, 3056.0], [75.5, 3057.0], [75.6, 3059.0], [75.7, 3071.0], [75.8, 3074.0], [75.9, 3079.0], [76.0, 3082.0], [76.1, 3108.0], [76.2, 3112.0], [76.3, 3114.0], [76.4, 3117.0], [76.5, 3123.0], [76.6, 3126.0], [76.7, 3136.0], [76.8, 3149.0], [76.9, 3182.0], [77.0, 3200.0], [77.1, 3218.0], [77.2, 3221.0], [77.3, 3225.0], [77.4, 3231.0], [77.5, 3244.0], [77.6, 3246.0], [77.7, 3258.0], [77.8, 3260.0], [77.9, 3261.0], [78.0, 3262.0], [78.1, 3267.0], [78.2, 3268.0], [78.3, 3275.0], [78.4, 3275.0], [78.5, 3281.0], [78.6, 3293.0], [78.7, 3295.0], [78.8, 3303.0], [78.9, 3315.0], [79.0, 3321.0], [79.1, 3322.0], [79.2, 3329.0], [79.3, 3343.0], [79.4, 3344.0], [79.5, 3350.0], [79.6, 3350.0], [79.7, 3353.0], [79.8, 3354.0], [79.9, 3358.0], [80.0, 3359.0], [80.1, 3370.0], [80.2, 3375.0], [80.3, 3380.0], [80.4, 3389.0], [80.5, 3392.0], [80.6, 3392.0], [80.7, 3394.0], [80.8, 3396.0], [80.9, 3406.0], [81.0, 3408.0], [81.1, 3412.0], [81.2, 3412.0], [81.3, 3421.0], [81.4, 3425.0], [81.5, 3428.0], [81.6, 3429.0], [81.7, 3438.0], [81.8, 3439.0], [81.9, 3440.0], [82.0, 3440.0], [82.1, 3441.0], [82.2, 3444.0], [82.3, 3448.0], [82.4, 3449.0], [82.5, 3450.0], [82.6, 3450.0], [82.7, 3452.0], [82.8, 3454.0], [82.9, 3460.0], [83.0, 3460.0], [83.1, 3469.0], [83.2, 3471.0], [83.3, 3471.0], [83.4, 3475.0], [83.5, 3478.0], [83.6, 3480.0], [83.7, 3482.0], [83.8, 3483.0], [83.9, 3485.0], [84.0, 3485.0], [84.1, 3489.0], [84.2, 3490.0], [84.3, 3492.0], [84.4, 3493.0], [84.5, 3496.0], [84.6, 3497.0], [84.7, 3500.0], [84.8, 3501.0], [84.9, 3509.0], [85.0, 3513.0], [85.1, 3516.0], [85.2, 3520.0], [85.3, 3525.0], [85.4, 3527.0], [85.5, 3529.0], [85.6, 3531.0], [85.7, 3544.0], [85.8, 3545.0], [85.9, 3547.0], [86.0, 3552.0], [86.1, 3558.0], [86.2, 3564.0], [86.3, 3566.0], [86.4, 3570.0], [86.5, 3571.0], [86.6, 3577.0], [86.7, 3581.0], [86.8, 3610.0], [86.9, 3611.0], [87.0, 3613.0], [87.1, 3620.0], [87.2, 3632.0], [87.3, 3632.0], [87.4, 3644.0], [87.5, 3646.0], [87.6, 3651.0], [87.7, 3653.0], [87.8, 3655.0], [87.9, 3655.0], [88.0, 3659.0], [88.1, 3671.0], [88.2, 3675.0], [88.3, 3680.0], [88.4, 3688.0], [88.5, 3689.0], [88.6, 3690.0], [88.7, 3695.0], [88.8, 3699.0], [88.9, 3700.0], [89.0, 3701.0], [89.1, 3703.0], [89.2, 3706.0], [89.3, 3710.0], [89.4, 3713.0], [89.5, 3717.0], [89.6, 3719.0], [89.7, 3721.0], [89.8, 3721.0], [89.9, 3722.0], [90.0, 3722.0], [90.1, 3723.0], [90.2, 3724.0], [90.3, 3729.0], [90.4, 3734.0], [90.5, 3735.0], [90.6, 3749.0], [90.7, 3754.0], [90.8, 3754.0], [90.9, 3757.0], [91.0, 3759.0], [91.1, 3760.0], [91.2, 3770.0], [91.3, 3777.0], [91.4, 3794.0], [91.5, 3800.0], [91.6, 3803.0], [91.7, 3810.0], [91.8, 3816.0], [91.9, 3827.0], [92.0, 3832.0], [92.1, 3835.0], [92.2, 3840.0], [92.3, 3843.0], [92.4, 3844.0], [92.5, 3845.0], [92.6, 3850.0], [92.7, 3855.0], [92.8, 3880.0], [92.9, 3888.0], [93.0, 3904.0], [93.1, 3904.0], [93.2, 3914.0], [93.3, 3919.0], [93.4, 3941.0], [93.5, 3943.0], [93.6, 3945.0], [93.7, 3965.0], [93.8, 3972.0], [93.9, 3981.0], [94.0, 3990.0], [94.1, 3991.0], [94.2, 3993.0], [94.3, 3996.0], [94.4, 3997.0], [94.5, 3999.0], [94.6, 4002.0], [94.7, 4007.0], [94.8, 4020.0], [94.9, 4025.0], [95.0, 4029.0], [95.1, 4029.0], [95.2, 4034.0], [95.3, 4038.0], [95.4, 4040.0], [95.5, 4040.0], [95.6, 4048.0], [95.7, 4052.0], [95.8, 4056.0], [95.9, 4059.0], [96.0, 4075.0], [96.1, 4081.0], [96.2, 4083.0], [96.3, 4085.0], [96.4, 4091.0], [96.5, 4096.0], [96.6, 4104.0], [96.7, 4104.0], [96.8, 4118.0], [96.9, 4119.0], [97.0, 4126.0], [97.1, 4126.0], [97.2, 4142.0], [97.3, 4152.0], [97.4, 4167.0], [97.5, 4170.0], [97.6, 4201.0], [97.7, 4203.0], [97.8, 4224.0], [97.9, 4238.0], [98.0, 4242.0], [98.1, 4244.0], [98.2, 4245.0], [98.3, 4246.0], [98.4, 4250.0], [98.5, 4270.0], [98.6, 4284.0], [98.7, 4284.0], [98.8, 4289.0], [98.9, 4300.0], [99.0, 4313.0], [99.1, 4331.0], [99.2, 4358.0], [99.3, 4359.0], [99.4, 4374.0], [99.5, 4378.0], [99.6, 4401.0], [99.7, 4401.0], [99.8, 4402.0], [99.9, 4403.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 717.0, "series": [{"data": [[0.0, 717.0], [600.0, 14.0], [700.0, 6.0], [800.0, 10.0], [900.0, 18.0], [1000.0, 13.0], [1100.0, 15.0], [1200.0, 8.0], [1300.0, 14.0], [1400.0, 13.0], [1500.0, 11.0], [100.0, 42.0], [1600.0, 8.0], [1700.0, 10.0], [1800.0, 13.0], [1900.0, 6.0], [2000.0, 21.0], [2100.0, 15.0], [2200.0, 6.0], [2300.0, 12.0], [2400.0, 25.0], [2500.0, 10.0], [2600.0, 16.0], [2700.0, 10.0], [2800.0, 12.0], [2900.0, 28.0], [3000.0, 23.0], [3100.0, 13.0], [200.0, 13.0], [3200.0, 27.0], [3300.0, 31.0], [3400.0, 57.0], [3500.0, 33.0], [3600.0, 31.0], [3700.0, 39.0], [3800.0, 23.0], [3900.0, 23.0], [4000.0, 30.0], [4100.0, 16.0], [4200.0, 19.0], [4300.0, 11.0], [4400.0, 6.0], [300.0, 5.0], [400.0, 7.0], [500.0, 20.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 783.0, "series": [{"data": [[0.0, 783.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 131.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 585.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 687.9613333333347, "minX": 1.75637214E12, "maxY": 687.9613333333347, "series": [{"data": [[1.75637214E12, 687.9613333333347]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637214E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.0, "maxY": 4401.0, "series": [{"data": [[2.0, 3850.0], [3.0, 4167.0], [4.0, 4100.0], [5.0, 4367.0], [6.0, 3880.0], [8.0, 4352.0], [10.0, 4147.0], [14.0, 4323.5], [16.0, 3835.0], [18.0, 4152.0], [21.0, 4207.5], [22.0, 4301.333333333333], [26.0, 4104.0], [27.0, 4158.0], [30.0, 4264.5], [31.0, 4288.0], [33.0, 4126.0], [32.0, 4164.0], [35.0, 4240.5], [36.0, 4289.0], [39.0, 4308.0], [38.0, 4238.0], [43.0, 4215.0], [42.0, 4197.333333333333], [45.0, 4266.0], [49.0, 4074.6666666666665], [48.0, 4052.0], [51.0, 4073.0], [53.0, 4039.0], [52.0, 4358.0], [55.0, 3989.0], [59.0, 4019.0], [58.0, 4051.6666666666665], [61.0, 3993.0], [60.0, 4029.0], [67.0, 4095.666666666667], [71.0, 4007.0], [70.0, 4203.0], [69.0, 4029.0], [75.0, 3719.0], [74.0, 4248.0], [73.0, 4002.0], [72.0, 4054.0], [79.0, 4120.0], [77.0, 3997.0], [76.0, 4278.0], [82.0, 3945.0], [81.0, 4065.0], [86.0, 4105.25], [91.0, 4170.0], [90.0, 3904.0], [89.0, 3966.0], [88.0, 4182.0], [95.0, 3840.0], [94.0, 3844.0], [93.0, 3909.0], [99.0, 4116.0], [98.0, 3803.0], [97.0, 3816.0], [96.0, 3813.0], [102.0, 3544.0], [101.0, 3801.0], [100.0, 3810.0], [107.0, 3754.0], [106.0, 4075.0], [105.0, 4088.0], [104.0, 3669.0], [111.0, 3844.0], [110.0, 3754.0], [109.0, 3845.0], [108.0, 4056.0], [115.0, 4033.0], [114.0, 4041.0], [113.0, 4038.0], [112.0, 4040.0], [119.0, 3458.0], [118.0, 3695.0], [117.0, 4028.0], [116.0, 3757.0], [123.0, 3866.5], [121.0, 3832.0], [120.0, 4025.0], [127.0, 3701.0], [126.0, 3778.0], [125.0, 3747.0], [135.0, 3870.0], [134.0, 3671.0], [133.0, 3944.0], [132.0, 3996.0], [131.0, 3699.0], [130.0, 3761.5], [128.0, 3706.0], [143.0, 3919.0], [142.0, 3965.0], [141.0, 3855.0], [140.0, 3848.0], [139.0, 3775.5], [137.0, 3815.5], [149.0, 3551.5], [147.0, 3830.0], [146.0, 3646.0], [145.0, 3677.0], [159.0, 3558.0], [158.0, 3888.0], [157.0, 3732.0], [156.0, 3749.0], [155.0, 3581.0], [154.0, 3594.0], [153.0, 3632.0], [152.0, 3732.0], [167.0, 3794.0], [166.0, 3525.0], [165.0, 3560.0], [164.0, 3552.0], [163.0, 3620.0], [162.0, 3843.0], [161.0, 3409.0], [160.0, 3549.0], [174.0, 3566.0], [173.0, 3372.5], [171.0, 3497.0], [170.0, 3827.0], [169.0, 3516.0], [168.0, 3529.0], [183.0, 3770.0], [182.0, 3478.0], [176.0, 3493.0], [186.0, 3690.0], [196.0, 3471.0], [192.0, 3471.0], [207.0, 3613.0], [205.0, 3642.5], [204.0, 3655.0], [200.0, 3462.5], [212.0, 3651.0], [211.0, 3450.0], [221.0, 3759.0], [220.0, 3601.5], [216.0, 3572.5], [227.0, 3454.0], [236.0, 3700.0], [234.0, 3746.0], [244.0, 3734.0], [243.0, 3429.0], [242.0, 3439.0], [254.0, 3486.0], [253.0, 3573.0], [252.0, 3452.0], [251.0, 3646.0], [259.0, 3520.0], [271.0, 3570.0], [269.0, 3721.3333333333335], [268.0, 3482.0], [264.0, 3443.5], [263.0, 3688.0], [261.0, 3644.0], [258.0, 3485.0], [256.0, 3568.5], [284.0, 3343.0], [286.0, 3350.0], [287.0, 3460.0], [285.0, 3700.0], [283.0, 3612.0], [282.0, 3440.75], [279.0, 3394.0], [272.0, 3722.0], [275.0, 3491.0], [273.0, 3646.5], [278.0, 3598.0], [277.0, 3490.0], [276.0, 3559.5], [303.0, 3406.0], [300.0, 3126.0], [298.0, 3547.0], [296.0, 3380.0], [295.0, 135.0], [294.0, 3689.5], [293.0, 3492.0], [291.0, 3655.0], [290.0, 3545.0], [317.0, 3393.0], [315.0, 3428.0], [314.0, 3599.0], [311.0, 3680.0], [309.0, 3653.0], [308.0, 3546.0], [307.0, 3527.0], [335.0, 30.0], [325.0, 3570.0], [320.0, 3389.0], [346.0, 1838.0], [344.0, 3559.5], [338.0, 3655.0], [364.0, 89.0], [363.0, 3403.0], [359.0, 62.0], [355.0, 99.0], [354.0, 58.0], [353.0, 58.0], [382.0, 3499.0], [380.0, 3279.0], [369.0, 58.0], [399.0, 49.0], [398.0, 2307.666666666667], [414.0, 2915.0], [415.0, 3334.6666666666665], [413.0, 1659.0], [411.0, 2310.3333333333335], [410.0, 3406.0], [409.0, 1120.3333333333333], [412.0, 3488.3333333333335], [408.0, 3250.0], [407.0, 2556.75], [400.0, 901.375], [403.0, 36.0], [402.0, 36.0], [406.0, 3509.0], [405.0, 3442.6666666666665], [404.0, 3524.0], [430.0, 3440.0], [427.0, 3180.0], [425.0, 32.0], [424.0, 33.0], [423.0, 3169.0], [417.0, 34.0], [416.0, 2276.6666666666665], [422.0, 3451.0], [421.0, 3260.0], [420.0, 37.0], [419.0, 37.0], [418.0, 2903.0], [446.0, 83.0], [447.0, 1156.0], [445.0, 60.5], [444.0, 1751.5], [442.0, 96.0], [441.0, 1730.0], [440.0, 38.0], [439.0, 55.666666666666664], [433.0, 3171.0], [432.0, 2928.1428571428573], [435.0, 3433.0], [434.0, 37.0], [438.0, 1726.0], [436.0, 3409.5], [461.0, 1019.0], [462.0, 28.0], [460.0, 3308.0], [451.0, 3126.6666666666665], [450.0, 3358.0], [449.0, 3377.0], [448.0, 1041.0], [459.0, 37.0], [458.0, 2214.333333333333], [456.0, 1584.9999999999998], [455.0, 3149.0], [454.0, 3335.3333333333335], [452.0, 2202.3333333333335], [453.0, 3359.0], [478.0, 43.5], [479.0, 3006.0], [476.0, 42.0], [475.0, 43.0], [474.0, 33.0], [473.0, 32.0], [472.0, 35.0], [471.0, 33.0], [466.0, 39.0], [465.0, 39.0], [467.0, 3298.5], [483.0, 3272.0], [493.0, 3237.0], [492.0, 34.0], [482.0, 3223.0], [481.0, 2124.6666666666665], [480.0, 3037.0], [491.0, 37.0], [490.0, 37.5], [489.0, 34.0], [487.0, 34.0], [486.0, 3261.0], [485.0, 31.0], [484.0, 40.0], [508.0, 44.0], [510.0, 3221.0], [511.0, 3218.0], [509.0, 3051.0], [506.0, 1405.5], [504.0, 2987.0], [502.0, 3231.0], [501.0, 38.0], [499.0, 1472.5], [497.0, 41.5], [496.0, 1083.6666666666665], [536.0, 3074.0], [540.0, 2945.5], [543.0, 29.0], [528.0, 788.25], [529.0, 65.0], [533.0, 2095.3333333333335], [530.0, 42.5], [542.0, 1531.0], [541.0, 1884.3333333333333], [539.0, 29.0], [538.0, 33.0], [537.0, 1038.3333333333333], [535.0, 1061.0], [534.0, 45.0], [527.0, 383.25], [515.0, 2018.3333333333333], [513.0, 3059.3333333333335], [518.0, 2750.0], [517.0, 1575.0], [525.0, 57.5], [524.0, 3136.0], [523.0, 1534.0], [522.0, 1548.5], [521.0, 38.0], [520.0, 2037.3333333333335], [526.0, 70.0], [572.0, 42.0], [575.0, 39.0], [562.0, 1535.0], [561.0, 44.0], [564.0, 45.0], [563.0, 41.0], [574.0, 42.0], [573.0, 43.0], [571.0, 46.0], [570.0, 2807.5], [569.0, 44.0], [568.0, 51.0], [559.0, 1814.3333333333335], [546.0, 28.0], [544.0, 2521.0], [549.0, 1519.5], [547.0, 33.0], [551.0, 860.3333333333334], [550.0, 1553.0], [558.0, 35.5], [556.0, 37.0], [554.0, 35.0], [553.0, 3037.0], [567.0, 51.5], [565.0, 1530.5], [601.0, 2899.0], [595.0, 2930.3333333333335], [604.0, 2792.0], [606.0, 2861.5], [593.0, 2972.5], [592.0, 71.0], [603.0, 32.0], [600.0, 2272.8], [583.0, 32.0], [582.0, 2954.0], [580.0, 2434.0], [579.0, 919.6666666666667], [578.0, 35.0], [577.0, 34.0], [576.0, 35.0], [591.0, 2777.0], [590.0, 2870.0], [589.0, 2978.0], [588.0, 29.0], [586.0, 30.0], [585.0, 2981.0], [584.0, 2814.0], [599.0, 55.0], [598.0, 1755.2], [596.0, 1244.8571428571427], [597.0, 2760.3333333333335], [633.0, 45.0], [635.0, 2851.0], [636.0, 1362.5], [634.0, 45.0], [632.0, 34.0], [613.0, 35.0], [611.0, 29.0], [610.0, 31.0], [608.0, 36.0], [631.0, 1271.0], [629.0, 2498.0], [623.0, 43.0], [622.0, 1376.5], [620.0, 57.0], [668.0, 609.1538461538461], [670.0, 30.0], [667.0, 38.0], [665.0, 2408.0], [664.0, 1355.3333333333335], [646.0, 54.0], [644.0, 2568.0], [642.0, 40.0], [640.0, 2294.0], [655.0, 33.0], [653.0, 42.0], [652.0, 2468.0], [650.0, 902.3333333333333], [648.0, 32.0], [662.0, 1247.5], [659.0, 29.5], [657.0, 34.0], [656.0, 30.0], [701.0, 70.0], [703.0, 69.0], [690.0, 37.0], [689.0, 2611.5], [700.0, 53.5], [698.0, 77.0], [697.0, 44.0], [696.0, 34.0], [687.0, 37.5], [674.0, 49.0], [673.0, 2383.0], [679.0, 842.1666666666667], [675.0, 2697.0], [685.0, 2351.0], [684.0, 1383.0], [682.0, 2165.0], [681.0, 2576.0], [695.0, 45.0], [694.0, 35.0], [693.0, 34.0], [692.0, 35.333333333333336], [734.0, 37.0], [735.0, 42.0], [733.0, 765.3333333333333], [729.0, 1259.0], [727.0, 2431.0], [724.0, 38.0], [723.0, 1092.4], [719.0, 923.6666666666666], [707.0, 2538.0], [705.0, 1361.5], [704.0, 67.0], [718.0, 2666.0], [761.0, 862.0], [753.0, 876.0], [750.0, 124.19999999999999], [751.0, 119.75], [737.0, 1150.5], [740.0, 2197.0], [738.0, 29.0], [760.0, 163.66666666666669], [741.0, 37.0], [762.0, 475.5], [764.0, 36.5], [766.0, 65.0], [767.0, 2292.0], [765.0, 34.5], [763.0, 55.0], [745.0, 160.5], [744.0, 35.0], [749.0, 177.5], [748.0, 2207.0], [746.0, 1299.0], [757.0, 106.0], [755.0, 764.0], [754.0, 191.0], [759.0, 178.33333333333331], [758.0, 383.4285714285714], [795.0, 67.0], [784.0, 195.0], [783.0, 28.0], [768.0, 107.0], [770.0, 79.0], [769.0, 2181.0], [775.0, 85.66666666666667], [773.0, 89.0], [786.0, 231.0], [790.0, 536.0], [796.0, 154.0], [799.0, 2145.0], [782.0, 88.0], [780.0, 86.5], [779.0, 94.0], [778.0, 80.0], [776.0, 88.0], [825.0, 2091.0], [817.0, 1002.0], [800.0, 321.5], [815.0, 142.0], [814.0, 75.0], [813.0, 83.0], [812.0, 117.0], [810.0, 1248.5], [808.0, 764.6666666666667], [824.0, 68.0], [805.0, 2231.5], [804.0, 45.0], [803.0, 2149.0], [802.0, 2151.0], [801.0, 2358.0], [822.0, 802.0], [821.0, 469.33333333333337], [820.0, 409.0], [818.0, 2324.0], [823.0, 1028.0], [830.0, 146.0], [816.0, 2084.0], [827.0, 636.4444444444445], [826.0, 162.0], [862.0, 1408.6666666666667], [863.0, 525.0], [848.0, 2452.0], [850.0, 2030.0], [849.0, 31.0], [860.0, 2393.0], [859.0, 29.0], [858.0, 2017.0], [856.0, 30.0], [846.0, 2063.0], [839.0, 2038.0], [835.0, 1062.5], [843.0, 139.0], [841.0, 2038.0], [855.0, 2433.0], [854.0, 135.0], [853.0, 35.0], [851.0, 2440.0], [894.0, 37.0], [875.0, 153.5], [865.0, 2038.0], [864.0, 1982.0], [867.0, 106.0], [866.0, 102.0], [869.0, 97.0], [868.0, 98.0], [873.0, 101.0], [872.0, 807.3333333333333], [882.0, 422.25], [884.0, 78.0], [883.0, 50.0], [881.0, 403.0], [885.0, 299.5], [886.0, 388.0], [895.0, 31.0], [893.0, 44.0], [892.0, 55.5], [891.0, 40.0], [890.0, 47.5], [889.0, 552.8571428571427], [923.0, 25.0], [908.0, 289.0], [907.0, 33.0], [905.0, 27.0], [910.0, 1782.0], [909.0, 36.0], [927.0, 433.2], [913.0, 33.0], [912.0, 32.0], [915.0, 1798.0], [914.0, 34.0], [916.0, 631.6666666666667], [917.0, 27.0], [926.0, 35.0], [924.0, 39.0], [922.0, 119.0], [921.0, 2029.0], [920.0, 120.0], [902.0, 1275.5], [901.0, 712.6666666666666], [900.0, 1297.3333333333333], [898.0, 32.0], [899.0, 28.5], [897.0, 33.5], [896.0, 1039.5], [911.0, 35.0], [919.0, 30.0], [918.0, 40.0], [953.0, 954.5], [939.0, 93.5], [932.0, 657.0], [943.0, 1611.0], [929.0, 35.0], [928.0, 734.3333333333333], [931.0, 39.0], [930.0, 38.0], [942.0, 2134.0], [941.0, 1685.5], [940.0, 1678.0], [952.0, 48.0], [935.0, 35.0], [934.0, 32.0], [933.0, 1728.0], [938.0, 647.0], [936.0, 114.0], [955.0, 26.0], [959.0, 31.0], [944.0, 2132.0], [946.0, 1731.0], [945.0, 1055.0], [948.0, 92.0], [947.0, 93.0], [950.0, 70.33333333333333], [951.0, 63.0], [949.0, 58.666666666666664], [957.0, 45.0], [956.0, 34.5], [954.0, 53.5], [988.0, 141.0], [973.0, 790.75], [972.0, 937.5], [971.0, 1080.6666666666665], [970.0, 33.0], [975.0, 956.5], [961.0, 33.0], [963.0, 30.0], [962.0, 30.0], [967.0, 1561.0], [965.0, 34.0], [974.0, 1540.0], [989.0, 362.33333333333337], [986.0, 646.0], [990.0, 198.75], [991.0, 52.0], [976.0, 37.666666666666664], [979.0, 25.0], [978.0, 827.0], [981.0, 796.5], [980.0, 33.111111111111114], [983.0, 558.3333333333333], [982.0, 45.0], [987.0, 29.0], [985.0, 33.0], [984.0, 52.0], [1018.0, 661.0], [994.0, 1221.0], [1001.0, 613.3333333333333], [1002.0, 1886.0], [1004.0, 37.0], [1003.0, 37.0], [1007.0, 30.0], [993.0, 736.0], [992.0, 506.9999999999999], [1005.0, 32.0], [1015.0, 240.33333333333331], [1014.0, 28.0], [1013.0, 33.0], [1012.0, 36.0], [1011.0, 28.0], [1010.0, 27.5], [1017.0, 558.3333333333334], [1016.0, 714.0], [999.0, 1437.0], [998.0, 1447.0], [997.0, 1466.0], [996.0, 1750.0], [995.0, 34.0], [1019.0, 638.0], [1023.0, 820.5000000000001], [1022.0, 38.0], [1020.0, 710.0], [1079.0, 40.0], [1074.0, 350.41666666666663], [1032.0, 1153.3333333333333], [1033.0, 668.0], [1036.0, 338.16666666666663], [1039.0, 64.5], [1038.0, 1382.0], [1037.0, 510.0], [1053.0, 806.0], [1051.0, 29.0], [1050.0, 1310.0], [1049.0, 30.0], [1048.0, 74.0], [1047.0, 37.0], [1046.0, 1335.0], [1045.0, 697.5], [1043.0, 937.5], [1041.0, 69.0], [1040.0, 41.0], [1054.0, 42.4], [1055.0, 1310.0], [1024.0, 35.0], [1026.0, 1400.0], [1025.0, 34.0], [1028.0, 33.0], [1027.0, 34.0], [1031.0, 753.5], [1030.0, 1351.0], [1071.0, 1235.0], [1070.0, 39.0], [1069.0, 621.5], [1068.0, 38.0], [1067.0, 43.0], [1066.0, 1234.0], [1065.0, 1569.0], [1064.0, 1171.0], [1063.0, 30.0], [1062.0, 34.5], [1061.0, 34.0], [1060.0, 37.0], [1059.0, 451.33333333333337], [1058.0, 34.0], [1057.0, 641.5], [1056.0, 871.0], [1081.0, 722.0], [1080.0, 39.0], [1083.0, 40.0], [1082.0, 31.0], [1086.0, 35.333333333333336], [1085.0, 43.0], [1087.0, 40.5], [1078.0, 619.3333333333333], [1077.0, 32.0], [1073.0, 352.66666666666663], [1076.0, 462.4], [1075.0, 89.0], [1072.0, 457.0], [1102.0, 40.0], [1094.0, 307.0], [1088.0, 37.5], [1090.0, 28.0], [1089.0, 1188.0], [1119.0, 1074.0], [1118.0, 1093.0], [1117.0, 37.0], [1115.0, 35.0], [1096.0, 582.0], [1095.0, 265.6], [1093.0, 598.0], [1092.0, 404.66666666666663], [1098.0, 50.0], [1097.0, 41.0], [1099.0, 34.0], [1101.0, 582.5], [1100.0, 33.0], [1104.0, 383.5], [1105.0, 1586.0], [1108.0, 620.7777777777778], [1107.0, 30.5], [1110.0, 391.3333333333333], [1109.0, 315.5], [1112.0, 37.0], [1111.0, 25.0], [1114.0, 639.6666666666666], [1103.0, 606.5], [1136.0, 433.0], [1142.0, 62.666666666666664], [1140.0, 33.0], [1139.0, 36.0], [1138.0, 480.5], [1137.0, 42.0], [1143.0, 456.1666666666667], [1144.0, 498.77777777777777], [1146.0, 136.0], [1121.0, 40.0], [1120.0, 964.0], [1123.0, 765.5], [1122.0, 37.0], [1145.0, 892.0], [1125.0, 54.75], [1124.0, 51.8], [1127.0, 501.0], [1126.0, 234.8], [1129.0, 52.0], [1130.0, 68.0], [1135.0, 508.83333333333337], [1133.0, 499.8333333333333], [1132.0, 31.0], [1131.0, 33.0], [1134.0, 966.0], [1128.0, 343.33333333333337], [1.0, 4401.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}, {"data": [[687.9613333333347, 1364.0553333333344]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1146.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12225.0, "minX": 1.75637214E12, "maxY": 29413.283333333333, "series": [{"data": [[1.75637214E12, 29413.283333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75637214E12, 12225.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637214E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1364.0553333333344, "minX": 1.75637214E12, "maxY": 1364.0553333333344, "series": [{"data": [[1.75637214E12, 1364.0553333333344]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637214E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1363.9920000000004, "minX": 1.75637214E12, "maxY": 1363.9920000000004, "series": [{"data": [[1.75637214E12, 1363.9920000000004]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637214E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1324.2246666666667, "minX": 1.75637214E12, "maxY": 1324.2246666666667, "series": [{"data": [[1.75637214E12, 1324.2246666666667]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637214E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.75637214E12, "maxY": 4404.0, "series": [{"data": [[1.75637214E12, 4404.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75637214E12, 3722.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75637214E12, 4313.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75637214E12, 4029.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75637214E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75637214E12, 157.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637214E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 38.0, "minX": 197.0, "maxY": 3941.0, "series": [{"data": [[348.0, 62.0], [197.0, 3941.0], [469.0, 59.0], [486.0, 2620.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[348.0, 38.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 486.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 38.0, "minX": 197.0, "maxY": 3941.0, "series": [{"data": [[348.0, 62.0], [197.0, 3941.0], [469.0, 59.0], [486.0, 2620.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[348.0, 38.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 486.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75637214E12, "maxY": 25.0, "series": [{"data": [[1.75637214E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637214E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75637214E12, "maxY": 24.983333333333334, "series": [{"data": [[1.75637214E12, 24.983333333333334]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75637214E12, 0.016666666666666666]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637214E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75637214E12, "maxY": 24.983333333333334, "series": [{"data": [[1.75637214E12, 24.983333333333334]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-success", "isController": false}, {"data": [[1.75637214E12, 0.016666666666666666]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637214E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75637214E12, "maxY": 24.983333333333334, "series": [{"data": [[1.75637214E12, 24.983333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75637214E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637214E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

