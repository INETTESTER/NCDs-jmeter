/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 62.0, "minX": 0.0, "maxY": 7157.0, "series": [{"data": [[0.0, 62.0], [0.1, 66.0], [0.2, 69.0], [0.3, 72.0], [0.4, 83.0], [0.5, 83.0], [0.6, 87.0], [0.7, 124.0], [0.8, 125.0], [0.9, 130.0], [1.0, 132.0], [1.1, 132.0], [1.2, 133.0], [1.3, 134.0], [1.4, 138.0], [1.5, 140.0], [1.6, 142.0], [1.7, 145.0], [1.8, 153.0], [1.9, 154.0], [2.0, 176.0], [2.1, 176.0], [2.2, 179.0], [2.3, 182.0], [2.4, 185.0], [2.5, 188.0], [2.6, 191.0], [2.7, 192.0], [2.8, 193.0], [2.9, 194.0], [3.0, 196.0], [3.1, 199.0], [3.2, 200.0], [3.3, 203.0], [3.4, 203.0], [3.5, 203.0], [3.6, 204.0], [3.7, 208.0], [3.8, 208.0], [3.9, 209.0], [4.0, 210.0], [4.1, 212.0], [4.2, 213.0], [4.3, 220.0], [4.4, 221.0], [4.5, 226.0], [4.6, 227.0], [4.7, 232.0], [4.8, 232.0], [4.9, 235.0], [5.0, 235.0], [5.1, 237.0], [5.2, 237.0], [5.3, 240.0], [5.4, 242.0], [5.5, 244.0], [5.6, 244.0], [5.7, 245.0], [5.8, 246.0], [5.9, 247.0], [6.0, 248.0], [6.1, 251.0], [6.2, 251.0], [6.3, 252.0], [6.4, 252.0], [6.5, 253.0], [6.6, 254.0], [6.7, 256.0], [6.8, 263.0], [6.9, 266.0], [7.0, 267.0], [7.1, 268.0], [7.2, 269.0], [7.3, 270.0], [7.4, 274.0], [7.5, 294.0], [7.6, 300.0], [7.7, 305.0], [7.8, 305.0], [7.9, 313.0], [8.0, 314.0], [8.1, 316.0], [8.2, 317.0], [8.3, 325.0], [8.4, 335.0], [8.5, 337.0], [8.6, 340.0], [8.7, 341.0], [8.8, 349.0], [8.9, 349.0], [9.0, 350.0], [9.1, 350.0], [9.2, 352.0], [9.3, 354.0], [9.4, 354.0], [9.5, 356.0], [9.6, 356.0], [9.7, 358.0], [9.8, 358.0], [9.9, 359.0], [10.0, 362.0], [10.1, 365.0], [10.2, 369.0], [10.3, 375.0], [10.4, 386.0], [10.5, 389.0], [10.6, 393.0], [10.7, 398.0], [10.8, 409.0], [10.9, 414.0], [11.0, 421.0], [11.1, 426.0], [11.2, 438.0], [11.3, 453.0], [11.4, 468.0], [11.5, 470.0], [11.6, 475.0], [11.7, 477.0], [11.8, 503.0], [11.9, 515.0], [12.0, 532.0], [12.1, 534.0], [12.2, 538.0], [12.3, 539.0], [12.4, 544.0], [12.5, 545.0], [12.6, 554.0], [12.7, 557.0], [12.8, 561.0], [12.9, 565.0], [13.0, 571.0], [13.1, 576.0], [13.2, 582.0], [13.3, 586.0], [13.4, 601.0], [13.5, 607.0], [13.6, 610.0], [13.7, 614.0], [13.8, 627.0], [13.9, 628.0], [14.0, 633.0], [14.1, 638.0], [14.2, 640.0], [14.3, 643.0], [14.4, 647.0], [14.5, 651.0], [14.6, 654.0], [14.7, 656.0], [14.8, 660.0], [14.9, 664.0], [15.0, 672.0], [15.1, 680.0], [15.2, 681.0], [15.3, 685.0], [15.4, 685.0], [15.5, 687.0], [15.6, 698.0], [15.7, 699.0], [15.8, 700.0], [15.9, 706.0], [16.0, 715.0], [16.1, 715.0], [16.2, 719.0], [16.3, 720.0], [16.4, 727.0], [16.5, 735.0], [16.6, 737.0], [16.7, 739.0], [16.8, 757.0], [16.9, 766.0], [17.0, 824.0], [17.1, 842.0], [17.2, 855.0], [17.3, 868.0], [17.4, 878.0], [17.5, 882.0], [17.6, 885.0], [17.7, 895.0], [17.8, 900.0], [17.9, 909.0], [18.0, 917.0], [18.1, 920.0], [18.2, 935.0], [18.3, 939.0], [18.4, 946.0], [18.5, 951.0], [18.6, 951.0], [18.7, 951.0], [18.8, 965.0], [18.9, 966.0], [19.0, 969.0], [19.1, 970.0], [19.2, 971.0], [19.3, 972.0], [19.4, 975.0], [19.5, 975.0], [19.6, 976.0], [19.7, 976.0], [19.8, 980.0], [19.9, 980.0], [20.0, 987.0], [20.1, 988.0], [20.2, 1004.0], [20.3, 1009.0], [20.4, 1018.0], [20.5, 1029.0], [20.6, 1029.0], [20.7, 1030.0], [20.8, 1034.0], [20.9, 1040.0], [21.0, 1043.0], [21.1, 1051.0], [21.2, 1052.0], [21.3, 1055.0], [21.4, 1057.0], [21.5, 1058.0], [21.6, 1062.0], [21.7, 1065.0], [21.8, 1071.0], [21.9, 1072.0], [22.0, 1074.0], [22.1, 1081.0], [22.2, 1088.0], [22.3, 1089.0], [22.4, 1093.0], [22.5, 1093.0], [22.6, 1094.0], [22.7, 1095.0], [22.8, 1096.0], [22.9, 1096.0], [23.0, 1108.0], [23.1, 1109.0], [23.2, 1112.0], [23.3, 1113.0], [23.4, 1125.0], [23.5, 1129.0], [23.6, 1134.0], [23.7, 1135.0], [23.8, 1139.0], [23.9, 1142.0], [24.0, 1145.0], [24.1, 1145.0], [24.2, 1152.0], [24.3, 1154.0], [24.4, 1166.0], [24.5, 1166.0], [24.6, 1169.0], [24.7, 1173.0], [24.8, 1185.0], [24.9, 1188.0], [25.0, 1194.0], [25.1, 1195.0], [25.2, 1200.0], [25.3, 1201.0], [25.4, 1201.0], [25.5, 1202.0], [25.6, 1204.0], [25.7, 1205.0], [25.8, 1207.0], [25.9, 1208.0], [26.0, 1217.0], [26.1, 1217.0], [26.2, 1220.0], [26.3, 1236.0], [26.4, 1253.0], [26.5, 1255.0], [26.6, 1264.0], [26.7, 1267.0], [26.8, 1275.0], [26.9, 1276.0], [27.0, 1279.0], [27.1, 1282.0], [27.2, 1288.0], [27.3, 1293.0], [27.4, 1294.0], [27.5, 1294.0], [27.6, 1313.0], [27.7, 1314.0], [27.8, 1323.0], [27.9, 1340.0], [28.0, 1351.0], [28.1, 1352.0], [28.2, 1357.0], [28.3, 1358.0], [28.4, 1360.0], [28.5, 1361.0], [28.6, 1362.0], [28.7, 1362.0], [28.8, 1363.0], [28.9, 1363.0], [29.0, 1366.0], [29.1, 1367.0], [29.2, 1379.0], [29.3, 1382.0], [29.4, 1396.0], [29.5, 1396.0], [29.6, 1400.0], [29.7, 1401.0], [29.8, 1405.0], [29.9, 1405.0], [30.0, 1407.0], [30.1, 1411.0], [30.2, 1449.0], [30.3, 1453.0], [30.4, 1457.0], [30.5, 1458.0], [30.6, 1467.0], [30.7, 1468.0], [30.8, 1469.0], [30.9, 1469.0], [31.0, 1470.0], [31.1, 1472.0], [31.2, 1476.0], [31.3, 1478.0], [31.4, 1485.0], [31.5, 1485.0], [31.6, 1489.0], [31.7, 1519.0], [31.8, 1528.0], [31.9, 1543.0], [32.0, 1547.0], [32.1, 1548.0], [32.2, 1550.0], [32.3, 1552.0], [32.4, 1560.0], [32.5, 1569.0], [32.6, 1575.0], [32.7, 1576.0], [32.8, 1598.0], [32.9, 1605.0], [33.0, 1618.0], [33.1, 1628.0], [33.2, 1634.0], [33.3, 1636.0], [33.4, 1639.0], [33.5, 1640.0], [33.6, 1662.0], [33.7, 1669.0], [33.8, 1670.0], [33.9, 1685.0], [34.0, 1685.0], [34.1, 1692.0], [34.2, 1696.0], [34.3, 1715.0], [34.4, 1733.0], [34.5, 1760.0], [34.6, 1769.0], [34.7, 1770.0], [34.8, 1779.0], [34.9, 1809.0], [35.0, 1811.0], [35.1, 1827.0], [35.2, 1832.0], [35.3, 1836.0], [35.4, 1842.0], [35.5, 1852.0], [35.6, 1854.0], [35.7, 1864.0], [35.8, 1866.0], [35.9, 1867.0], [36.0, 1867.0], [36.1, 1874.0], [36.2, 1875.0], [36.3, 1876.0], [36.4, 1877.0], [36.5, 1882.0], [36.6, 1883.0], [36.7, 1885.0], [36.8, 1892.0], [36.9, 1895.0], [37.0, 1900.0], [37.1, 1916.0], [37.2, 1919.0], [37.3, 1921.0], [37.4, 1921.0], [37.5, 1923.0], [37.6, 1924.0], [37.7, 1928.0], [37.8, 1928.0], [37.9, 1928.0], [38.0, 1928.0], [38.1, 1929.0], [38.2, 1930.0], [38.3, 1932.0], [38.4, 1933.0], [38.5, 1933.0], [38.6, 1934.0], [38.7, 1939.0], [38.8, 1943.0], [38.9, 1952.0], [39.0, 1955.0], [39.1, 1959.0], [39.2, 1960.0], [39.3, 1961.0], [39.4, 1962.0], [39.5, 1968.0], [39.6, 1970.0], [39.7, 1971.0], [39.8, 1972.0], [39.9, 1974.0], [40.0, 1975.0], [40.1, 1975.0], [40.2, 1976.0], [40.3, 1977.0], [40.4, 1977.0], [40.5, 1983.0], [40.6, 1985.0], [40.7, 1987.0], [40.8, 1987.0], [40.9, 1991.0], [41.0, 1992.0], [41.1, 1994.0], [41.2, 1996.0], [41.3, 1999.0], [41.4, 1999.0], [41.5, 2001.0], [41.6, 2002.0], [41.7, 2006.0], [41.8, 2007.0], [41.9, 2013.0], [42.0, 2013.0], [42.1, 2022.0], [42.2, 2022.0], [42.3, 2025.0], [42.4, 2026.0], [42.5, 2028.0], [42.6, 2053.0], [42.7, 2076.0], [42.8, 2083.0], [42.9, 2085.0], [43.0, 2087.0], [43.1, 2092.0], [43.2, 2093.0], [43.3, 2109.0], [43.4, 2110.0], [43.5, 2113.0], [43.6, 2114.0], [43.7, 2142.0], [43.8, 2144.0], [43.9, 2148.0], [44.0, 2151.0], [44.1, 2151.0], [44.2, 2153.0], [44.3, 2166.0], [44.4, 2184.0], [44.5, 2187.0], [44.6, 2193.0], [44.7, 2206.0], [44.8, 2210.0], [44.9, 2215.0], [45.0, 2217.0], [45.1, 2220.0], [45.2, 2222.0], [45.3, 2225.0], [45.4, 2225.0], [45.5, 2234.0], [45.6, 2234.0], [45.7, 2240.0], [45.8, 2241.0], [45.9, 2248.0], [46.0, 2254.0], [46.1, 2262.0], [46.2, 2271.0], [46.3, 2275.0], [46.4, 2281.0], [46.5, 2284.0], [46.6, 2292.0], [46.7, 2316.0], [46.8, 2331.0], [46.9, 2345.0], [47.0, 2365.0], [47.1, 2374.0], [47.2, 2391.0], [47.3, 2413.0], [47.4, 2424.0], [47.5, 2433.0], [47.6, 2447.0], [47.7, 2465.0], [47.8, 2491.0], [47.9, 2569.0], [48.0, 2571.0], [48.1, 2583.0], [48.2, 2586.0], [48.3, 2589.0], [48.4, 2592.0], [48.5, 2621.0], [48.6, 2622.0], [48.7, 2639.0], [48.8, 2648.0], [48.9, 2669.0], [49.0, 2678.0], [49.1, 2696.0], [49.2, 2698.0], [49.3, 2703.0], [49.4, 2709.0], [49.5, 2715.0], [49.6, 2728.0], [49.7, 2741.0], [49.8, 2741.0], [49.9, 2750.0], [50.0, 2753.0], [50.1, 2754.0], [50.2, 2757.0], [50.3, 2761.0], [50.4, 2762.0], [50.5, 2774.0], [50.6, 2775.0], [50.7, 2784.0], [50.8, 2784.0], [50.9, 2796.0], [51.0, 2798.0], [51.1, 2812.0], [51.2, 2816.0], [51.3, 2818.0], [51.4, 2819.0], [51.5, 2822.0], [51.6, 2823.0], [51.7, 2825.0], [51.8, 2826.0], [51.9, 2832.0], [52.0, 2832.0], [52.1, 2841.0], [52.2, 2842.0], [52.3, 2847.0], [52.4, 2847.0], [52.5, 2855.0], [52.6, 2858.0], [52.7, 2861.0], [52.8, 2867.0], [52.9, 2869.0], [53.0, 2871.0], [53.1, 2872.0], [53.2, 2873.0], [53.3, 2879.0], [53.4, 2890.0], [53.5, 2894.0], [53.6, 2897.0], [53.7, 2902.0], [53.8, 2910.0], [53.9, 2912.0], [54.0, 2915.0], [54.1, 2930.0], [54.2, 2938.0], [54.3, 2944.0], [54.4, 2950.0], [54.5, 2975.0], [54.6, 2995.0], [54.7, 3025.0], [54.8, 3027.0], [54.9, 3033.0], [55.0, 3033.0], [55.1, 3037.0], [55.2, 3037.0], [55.3, 3041.0], [55.4, 3046.0], [55.5, 3056.0], [55.6, 3059.0], [55.7, 3067.0], [55.8, 3068.0], [55.9, 3071.0], [56.0, 3072.0], [56.1, 3081.0], [56.2, 3100.0], [56.3, 3108.0], [56.4, 3108.0], [56.5, 3111.0], [56.6, 3112.0], [56.7, 3114.0], [56.8, 3114.0], [56.9, 3125.0], [57.0, 3136.0], [57.1, 3147.0], [57.2, 3149.0], [57.3, 3154.0], [57.4, 3158.0], [57.5, 3160.0], [57.6, 3160.0], [57.7, 3163.0], [57.8, 3171.0], [57.9, 3176.0], [58.0, 3181.0], [58.1, 3187.0], [58.2, 3190.0], [58.3, 3197.0], [58.4, 3198.0], [58.5, 3204.0], [58.6, 3208.0], [58.7, 3220.0], [58.8, 3222.0], [58.9, 3230.0], [59.0, 3234.0], [59.1, 3239.0], [59.2, 3240.0], [59.3, 3241.0], [59.4, 3244.0], [59.5, 3246.0], [59.6, 3248.0], [59.7, 3257.0], [59.8, 3257.0], [59.9, 3271.0], [60.0, 3272.0], [60.1, 3281.0], [60.2, 3286.0], [60.3, 3292.0], [60.4, 3294.0], [60.5, 3305.0], [60.6, 3306.0], [60.7, 3312.0], [60.8, 3314.0], [60.9, 3319.0], [61.0, 3322.0], [61.1, 3335.0], [61.2, 3336.0], [61.3, 3340.0], [61.4, 3343.0], [61.5, 3368.0], [61.6, 3378.0], [61.7, 3383.0], [61.8, 3383.0], [61.9, 3390.0], [62.0, 3395.0], [62.1, 3429.0], [62.2, 3431.0], [62.3, 3434.0], [62.4, 3434.0], [62.5, 3447.0], [62.6, 3448.0], [62.7, 3463.0], [62.8, 3472.0], [62.9, 3488.0], [63.0, 3492.0], [63.1, 3513.0], [63.2, 3518.0], [63.3, 3533.0], [63.4, 3533.0], [63.5, 3541.0], [63.6, 3541.0], [63.7, 3546.0], [63.8, 3546.0], [63.9, 3556.0], [64.0, 3558.0], [64.1, 3566.0], [64.2, 3567.0], [64.3, 3582.0], [64.4, 3604.0], [64.5, 3607.0], [64.6, 3609.0], [64.7, 3621.0], [64.8, 3627.0], [64.9, 3637.0], [65.0, 3637.0], [65.1, 3678.0], [65.2, 3699.0], [65.3, 3734.0], [65.4, 3739.0], [65.5, 3752.0], [65.6, 3805.0], [65.7, 3844.0], [65.8, 3858.0], [65.9, 3864.0], [66.0, 3924.0], [66.1, 3933.0], [66.2, 3944.0], [66.3, 3955.0], [66.4, 3969.0], [66.5, 3973.0], [66.6, 4016.0], [66.7, 4020.0], [66.8, 4022.0], [66.9, 4037.0], [67.0, 4047.0], [67.1, 4092.0], [67.2, 4094.0], [67.3, 4115.0], [67.4, 4117.0], [67.5, 4129.0], [67.6, 4166.0], [67.7, 4182.0], [67.8, 4186.0], [67.9, 4230.0], [68.0, 4235.0], [68.1, 4317.0], [68.2, 4317.0], [68.3, 4339.0], [68.4, 4370.0], [68.5, 4393.0], [68.6, 4406.0], [68.7, 4438.0], [68.8, 4440.0], [68.9, 4445.0], [69.0, 4465.0], [69.1, 4469.0], [69.2, 4485.0], [69.3, 4505.0], [69.4, 4521.0], [69.5, 4567.0], [69.6, 4592.0], [69.7, 4658.0], [69.8, 4677.0], [69.9, 4719.0], [70.0, 4752.0], [70.1, 4814.0], [70.2, 4816.0], [70.3, 4985.0], [70.4, 5034.0], [70.5, 5065.0], [70.6, 5095.0], [70.7, 5108.0], [70.8, 5151.0], [70.9, 5160.0], [71.0, 5172.0], [71.1, 5190.0], [71.2, 5202.0], [71.3, 5213.0], [71.4, 5231.0], [71.5, 5242.0], [71.6, 5248.0], [71.7, 5262.0], [71.8, 5262.0], [71.9, 5273.0], [72.0, 5277.0], [72.1, 5291.0], [72.2, 5292.0], [72.3, 5307.0], [72.4, 5309.0], [72.5, 5313.0], [72.6, 5318.0], [72.7, 5353.0], [72.8, 5354.0], [72.9, 5361.0], [73.0, 5364.0], [73.1, 5371.0], [73.2, 5372.0], [73.3, 5380.0], [73.4, 5382.0], [73.5, 5392.0], [73.6, 5393.0], [73.7, 5399.0], [73.8, 5404.0], [73.9, 5411.0], [74.0, 5412.0], [74.1, 5420.0], [74.2, 5442.0], [74.3, 5460.0], [74.4, 5461.0], [74.5, 5468.0], [74.6, 5468.0], [74.7, 5477.0], [74.8, 5479.0], [74.9, 5505.0], [75.0, 5507.0], [75.1, 5512.0], [75.2, 5512.0], [75.3, 5521.0], [75.4, 5524.0], [75.5, 5544.0], [75.6, 5544.0], [75.7, 5559.0], [75.8, 5568.0], [75.9, 5592.0], [76.0, 5607.0], [76.1, 5668.0], [76.2, 5673.0], [76.3, 5679.0], [76.4, 5681.0], [76.5, 5686.0], [76.6, 5694.0], [76.7, 5703.0], [76.8, 5719.0], [76.9, 5726.0], [77.0, 5748.0], [77.1, 5761.0], [77.2, 5766.0], [77.3, 5772.0], [77.4, 5777.0], [77.5, 5788.0], [77.6, 5789.0], [77.7, 5833.0], [77.8, 5838.0], [77.9, 5850.0], [78.0, 5854.0], [78.1, 5862.0], [78.2, 5864.0], [78.3, 5870.0], [78.4, 5871.0], [78.5, 5875.0], [78.6, 5877.0], [78.7, 5880.0], [78.8, 5884.0], [78.9, 5887.0], [79.0, 5890.0], [79.1, 5901.0], [79.2, 5906.0], [79.3, 5909.0], [79.4, 5914.0], [79.5, 5925.0], [79.6, 5926.0], [79.7, 5935.0], [79.8, 5945.0], [79.9, 5951.0], [80.0, 5955.0], [80.1, 5967.0], [80.2, 5969.0], [80.3, 5973.0], [80.4, 5973.0], [80.5, 5979.0], [80.6, 5993.0], [80.7, 6004.0], [80.8, 6004.0], [80.9, 6006.0], [81.0, 6011.0], [81.1, 6017.0], [81.2, 6018.0], [81.3, 6019.0], [81.4, 6028.0], [81.5, 6032.0], [81.6, 6034.0], [81.7, 6035.0], [81.8, 6035.0], [81.9, 6038.0], [82.0, 6040.0], [82.1, 6043.0], [82.2, 6044.0], [82.3, 6044.0], [82.4, 6045.0], [82.5, 6046.0], [82.6, 6046.0], [82.7, 6047.0], [82.8, 6047.0], [82.9, 6049.0], [83.0, 6050.0], [83.1, 6051.0], [83.2, 6054.0], [83.3, 6055.0], [83.4, 6055.0], [83.5, 6058.0], [83.6, 6060.0], [83.7, 6060.0], [83.8, 6060.0], [83.9, 6061.0], [84.0, 6061.0], [84.1, 6062.0], [84.2, 6063.0], [84.3, 6066.0], [84.4, 6067.0], [84.5, 6068.0], [84.6, 6069.0], [84.7, 6069.0], [84.8, 6070.0], [84.9, 6073.0], [85.0, 6075.0], [85.1, 6076.0], [85.2, 6077.0], [85.3, 6077.0], [85.4, 6079.0], [85.5, 6080.0], [85.6, 6080.0], [85.7, 6083.0], [85.8, 6085.0], [85.9, 6085.0], [86.0, 6086.0], [86.1, 6089.0], [86.2, 6091.0], [86.3, 6096.0], [86.4, 6098.0], [86.5, 6105.0], [86.6, 6108.0], [86.7, 6110.0], [86.8, 6113.0], [86.9, 6119.0], [87.0, 6120.0], [87.1, 6120.0], [87.2, 6125.0], [87.3, 6128.0], [87.4, 6130.0], [87.5, 6154.0], [87.6, 6187.0], [87.7, 6209.0], [87.8, 6211.0], [87.9, 6231.0], [88.0, 6256.0], [88.1, 6259.0], [88.2, 6264.0], [88.3, 6273.0], [88.4, 6307.0], [88.5, 6322.0], [88.6, 6326.0], [88.7, 6335.0], [88.8, 6344.0], [88.9, 6387.0], [89.0, 6387.0], [89.1, 6400.0], [89.2, 6404.0], [89.3, 6414.0], [89.4, 6414.0], [89.5, 6427.0], [89.6, 6433.0], [89.7, 6440.0], [89.8, 6443.0], [89.9, 6461.0], [90.0, 6462.0], [90.1, 6469.0], [90.2, 6474.0], [90.3, 6476.0], [90.4, 6480.0], [90.5, 6490.0], [90.6, 6494.0], [90.7, 6501.0], [90.8, 6506.0], [90.9, 6509.0], [91.0, 6512.0], [91.1, 6516.0], [91.2, 6521.0], [91.3, 6537.0], [91.4, 6557.0], [91.5, 6570.0], [91.6, 6572.0], [91.7, 6574.0], [91.8, 6576.0], [91.9, 6586.0], [92.0, 6591.0], [92.1, 6595.0], [92.2, 6597.0], [92.3, 6606.0], [92.4, 6608.0], [92.5, 6610.0], [92.6, 6611.0], [92.7, 6612.0], [92.8, 6613.0], [92.9, 6619.0], [93.0, 6621.0], [93.1, 6626.0], [93.2, 6628.0], [93.3, 6639.0], [93.4, 6649.0], [93.5, 6656.0], [93.6, 6657.0], [93.7, 6658.0], [93.8, 6660.0], [93.9, 6662.0], [94.0, 6664.0], [94.1, 6668.0], [94.2, 6676.0], [94.3, 6677.0], [94.4, 6680.0], [94.5, 6682.0], [94.6, 6686.0], [94.7, 6699.0], [94.8, 6704.0], [94.9, 6716.0], [95.0, 6731.0], [95.1, 6736.0], [95.2, 6753.0], [95.3, 6772.0], [95.4, 6776.0], [95.5, 6805.0], [95.6, 6805.0], [95.7, 6830.0], [95.8, 6843.0], [95.9, 6865.0], [96.0, 6866.0], [96.1, 6867.0], [96.2, 6882.0], [96.3, 6900.0], [96.4, 6901.0], [96.5, 6907.0], [96.6, 6913.0], [96.7, 6916.0], [96.8, 6922.0], [96.9, 6929.0], [97.0, 6932.0], [97.1, 6945.0], [97.2, 6948.0], [97.3, 6952.0], [97.4, 6958.0], [97.5, 6962.0], [97.6, 6963.0], [97.7, 6967.0], [97.8, 6972.0], [97.9, 6993.0], [98.0, 7009.0], [98.1, 7013.0], [98.2, 7019.0], [98.3, 7027.0], [98.4, 7031.0], [98.5, 7034.0], [98.6, 7052.0], [98.7, 7054.0], [98.8, 7056.0], [98.9, 7061.0], [99.0, 7073.0], [99.1, 7073.0], [99.2, 7075.0], [99.3, 7078.0], [99.4, 7091.0], [99.5, 7097.0], [99.6, 7120.0], [99.7, 7134.0], [99.8, 7145.0], [99.9, 7151.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 87.0, "series": [{"data": [[0.0, 10.0], [600.0, 36.0], [700.0, 17.0], [800.0, 13.0], [900.0, 36.0], [1000.0, 41.0], [1100.0, 34.0], [1200.0, 35.0], [1300.0, 31.0], [1400.0, 31.0], [1500.0, 18.0], [1600.0, 20.0], [1700.0, 10.0], [1800.0, 31.0], [1900.0, 67.0], [2000.0, 28.0], [2100.0, 20.0], [2200.0, 30.0], [2300.0, 9.0], [2400.0, 9.0], [2500.0, 10.0], [2600.0, 12.0], [2700.0, 26.0], [2800.0, 39.0], [2900.0, 15.0], [3000.0, 23.0], [3100.0, 35.0], [3200.0, 30.0], [3300.0, 23.0], [3400.0, 15.0], [3500.0, 20.0], [3600.0, 13.0], [3700.0, 5.0], [3800.0, 6.0], [3900.0, 9.0], [4000.0, 10.0], [4100.0, 9.0], [4200.0, 4.0], [4300.0, 7.0], [4400.0, 11.0], [4500.0, 5.0], [4600.0, 4.0], [4700.0, 3.0], [4800.0, 3.0], [5000.0, 4.0], [4900.0, 1.0], [5100.0, 8.0], [5200.0, 17.0], [5300.0, 22.0], [5400.0, 16.0], [5500.0, 17.0], [5600.0, 11.0], [5800.0, 21.0], [5700.0, 15.0], [5900.0, 23.0], [6100.0, 19.0], [6000.0, 87.0], [6200.0, 10.0], [6300.0, 11.0], [6400.0, 24.0], [6600.0, 38.0], [6500.0, 23.0], [6900.0, 25.0], [6800.0, 12.0], [6700.0, 11.0], [7000.0, 24.0], [7100.0, 7.0], [100.0, 37.0], [200.0, 66.0], [300.0, 49.0], [400.0, 14.0], [500.0, 25.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 176.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1025.0, "series": [{"data": [[0.0, 176.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 299.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1025.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 790.5353333333343, "minX": 1.75635474E12, "maxY": 790.5353333333343, "series": [{"data": [[1.75635474E12, 790.5353333333343]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635474E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 375.0, "minX": 1.0, "maxY": 7157.0, "series": [{"data": [[2.0, 5681.0], [4.0, 6153.5], [5.0, 5788.0], [6.0, 7145.0], [9.0, 5968.333333333333], [10.0, 5925.0], [12.0, 6720.0], [13.0, 5766.0], [15.0, 6625.0], [16.0, 6271.5], [18.0, 6912.5], [20.0, 7026.0], [23.0, 5966.5], [24.0, 5789.0], [25.0, 5761.0], [27.0, 6242.5], [30.0, 6567.333333333333], [32.0, 6590.0], [34.0, 5762.0], [36.0, 6188.5], [38.0, 6379.5], [40.0, 6008.5], [42.0, 5807.5], [45.0, 6209.0], [44.0, 6690.0], [46.0, 6676.0], [49.0, 6677.0], [48.0, 6787.5], [50.0, 7083.0], [52.0, 6443.0], [55.0, 6545.333333333333], [54.0, 5354.0], [57.0, 7120.0], [56.0, 6440.0], [59.0, 6786.0], [58.0, 6682.0], [61.0, 6805.0], [62.0, 5873.0], [66.0, 7114.0], [65.0, 6586.0], [64.0, 6343.5], [70.0, 6122.5], [68.0, 6718.0], [75.0, 5823.333333333333], [73.0, 6777.0], [79.0, 6658.0], [78.0, 6963.0], [77.0, 6861.5], [83.0, 6772.0], [82.0, 5726.0], [81.0, 6952.0], [80.0, 6657.0], [87.0, 5318.0], [84.0, 6764.0], [91.0, 6913.0], [95.0, 6184.5], [94.0, 6374.5], [93.0, 6576.0], [92.0, 6105.0], [99.0, 6548.0], [97.0, 6406.0], [102.0, 6613.0], [101.0, 6637.5], [107.0, 6662.0], [106.0, 6883.5], [104.0, 6766.0], [111.0, 7091.0], [110.0, 5309.0], [109.0, 5960.5], [115.0, 7043.0], [119.0, 7073.0], [118.0, 5898.0], [117.0, 6929.0], [116.0, 6456.0], [122.0, 6259.0], [121.0, 5307.0], [120.0, 6753.0], [127.0, 6949.0], [126.0, 6565.0], [124.0, 5635.0], [133.0, 6197.0], [132.0, 5719.0], [131.0, 6512.0], [130.0, 6649.0], [129.0, 7056.0], [128.0, 6105.0], [142.0, 6176.0], [140.0, 5766.0], [139.0, 6011.5], [137.0, 6618.0], [136.0, 6831.666666666667], [151.0, 5668.0], [150.0, 6932.0], [149.0, 5284.0], [148.0, 6920.333333333333], [146.0, 5684.0], [144.0, 6630.0], [159.0, 6916.0], [158.0, 6570.0], [157.0, 6611.0], [156.0, 6901.0], [155.0, 5654.0], [154.0, 5568.0], [153.0, 6231.0], [152.0, 5277.0], [167.0, 6343.5], [165.0, 6494.0], [164.0, 5266.0], [163.0, 6606.0], [162.0, 6296.5], [160.0, 5748.0], [175.0, 5539.0], [174.0, 6063.0], [173.0, 7027.0], [172.0, 6660.5], [170.0, 6694.5], [168.0, 6993.0], [183.0, 6892.0], [182.0, 6595.0], [181.0, 5736.5], [179.0, 6335.0], [178.0, 6597.0], [177.0, 6414.0], [176.0, 6612.0], [191.0, 6760.5], [189.0, 5442.0], [188.0, 5248.0], [187.0, 6565.0], [185.0, 6344.0], [184.0, 6583.0], [199.0, 6557.0], [198.0, 6882.0], [197.0, 5242.0], [196.0, 6480.0], [195.0, 6506.0], [194.0, 6098.0], [193.0, 7018.5], [207.0, 5514.0], [206.0, 6307.0], [205.0, 5232.0], [204.0, 6228.5], [202.0, 6476.0], [201.0, 6933.5], [214.0, 6546.5], [212.0, 5190.0], [211.0, 6851.0], [210.0, 5512.0], [209.0, 6816.5], [223.0, 6438.0], [222.0, 6900.0], [221.0, 6466.0], [220.0, 5988.0], [218.0, 5694.0], [217.0, 6866.0], [216.0, 6664.5], [231.0, 6495.0], [230.0, 5151.0], [229.0, 6482.0], [227.0, 6501.0], [226.0, 6967.0], [225.0, 6975.0], [224.0, 6480.0], [239.0, 6427.0], [238.0, 6516.0], [237.0, 6806.0], [236.0, 6923.0], [235.0, 6515.0], [234.0, 5981.0], [232.0, 6096.0], [247.0, 6387.0], [246.0, 6453.0], [245.0, 5108.0], [244.0, 6902.0], [243.0, 6598.5], [241.0, 5172.0], [240.0, 6865.0], [255.0, 6076.0], [254.0, 4816.0], [253.0, 6677.0], [252.0, 6187.0], [251.0, 6309.0], [250.0, 6362.0], [249.0, 6331.0], [248.0, 5065.0], [259.0, 6414.0], [270.0, 6165.333333333333], [271.0, 6118.5], [268.0, 6119.0], [265.0, 6110.0], [264.0, 6259.0], [262.0, 6125.0], [261.0, 6130.0], [260.0, 6273.0], [258.0, 5945.0], [257.0, 5949.0], [256.0, 5914.0], [285.0, 6214.0], [287.0, 6071.0], [284.0, 5833.0], [275.0, 6163.333333333333], [272.0, 6326.0], [283.0, 6390.0], [282.0, 6128.0], [281.0, 6103.0], [280.0, 6387.0], [279.0, 6400.0], [278.0, 5975.5], [276.0, 6265.0], [302.0, 6057.5], [303.0, 6070.0], [300.0, 6077.0], [291.0, 5951.0], [290.0, 6047.0], [289.0, 6125.0], [288.0, 6154.0], [299.0, 6080.0], [298.0, 6084.0], [297.0, 6044.0], [295.0, 6096.0], [294.0, 6086.0], [293.0, 6089.0], [292.0, 6091.0], [317.0, 6080.0], [318.0, 6060.0], [316.0, 6077.0], [307.0, 6064.0], [306.0, 6086.0], [305.0, 6069.0], [304.0, 6085.0], [315.0, 6062.0], [314.0, 6060.0], [313.0, 6062.0], [311.0, 6067.0], [310.0, 6062.0], [309.0, 6074.0], [334.0, 6055.0], [335.0, 6028.0], [333.0, 5980.0], [330.0, 6075.0], [329.0, 6045.0], [328.0, 6058.0], [326.0, 6011.0], [324.0, 6051.5], [322.0, 6071.5], [320.0, 6018.0], [348.0, 6037.0], [351.0, 6051.0], [350.0, 6057.0], [349.0, 6060.0], [346.0, 6053.666666666667], [343.0, 6061.0], [342.0, 6043.333333333333], [339.0, 6058.0], [338.0, 6044.0], [337.0, 6046.0], [366.0, 6040.0], [367.0, 5973.0], [365.0, 6004.0], [364.0, 5984.0], [363.0, 6004.0], [361.0, 6006.0], [360.0, 6046.0], [359.0, 6046.0], [353.0, 6044.0], [355.0, 6047.0], [354.0, 5999.0], [358.0, 6048.0], [357.0, 6018.0], [356.0, 6016.0], [381.0, 5901.0], [382.0, 5877.0], [380.0, 6141.0], [379.0, 5923.5], [377.0, 5993.0], [376.0, 5955.0], [375.0, 5967.0], [374.0, 5992.0], [370.0, 6032.0], [369.0, 6034.0], [368.0, 6000.0], [398.0, 5862.0], [399.0, 5907.0], [397.0, 5854.0], [396.0, 5877.0], [395.0, 5926.0], [394.0, 5875.0], [393.0, 5878.333333333333], [390.0, 5880.0], [387.0, 5883.0], [384.0, 5881.5], [389.0, 5903.0], [414.0, 5407.0], [415.0, 5414.0], [413.0, 5411.0], [412.0, 5412.0], [411.0, 5547.0], [410.0, 5468.0], [409.0, 5461.0], [408.0, 5463.0], [407.0, 5468.0], [401.0, 5857.0], [400.0, 5906.0], [403.0, 5544.0], [402.0, 5850.0], [406.0, 5477.0], [405.0, 5509.0], [404.0, 5544.0], [430.0, 5380.0], [431.0, 5382.0], [429.0, 5420.0], [428.0, 5260.0], [427.0, 5469.0], [426.0, 5460.0], [425.0, 5479.0], [424.0, 5319.0], [423.0, 5372.0], [417.0, 5393.0], [416.0, 5399.0], [422.0, 5450.0], [421.0, 5375.0], [420.0, 5397.0], [446.0, 4305.0], [447.0, 4016.0], [444.0, 5183.0], [435.0, 5353.0], [434.0, 5367.0], [433.0, 5371.0], [432.0, 5359.0], [443.0, 5211.0], [442.0, 5231.0], [441.0, 5107.0], [440.0, 5095.0], [439.0, 5262.0], [438.0, 5291.0], [437.0, 5153.0], [436.0, 5160.0], [462.0, 3642.0], [463.0, 3607.0], [461.0, 3637.0], [460.0, 4235.0], [459.0, 3933.0], [458.0, 3949.0], [457.0, 4764.0], [456.0, 3973.0], [455.0, 4657.0], [449.0, 4444.0], [448.0, 4658.0], [451.0, 5043.0], [450.0, 4692.0], [454.0, 5034.0], [453.0, 4470.0], [467.0, 3554.0], [478.0, 3908.5], [476.0, 4752.0], [466.0, 4875.0], [465.0, 3567.0], [464.0, 3609.0], [475.0, 4392.0], [473.0, 3699.0], [472.0, 3701.0], [471.0, 3502.0], [470.0, 3541.0], [469.0, 3545.0], [468.0, 3518.0], [494.0, 4469.0], [495.0, 3162.0], [493.0, 4469.0], [492.0, 4166.0], [491.0, 4182.0], [490.0, 3230.0], [489.0, 3239.0], [488.0, 3270.0], [487.0, 3292.0], [480.0, 4745.5], [482.0, 4438.0], [481.0, 3434.0], [486.0, 4719.0], [485.0, 3378.0], [484.0, 3500.5], [510.0, 4521.0], [511.0, 3033.0], [509.0, 4113.0], [508.0, 4206.0], [507.0, 4465.0], [506.0, 3065.0], [505.0, 3068.0], [504.0, 3071.0], [503.0, 3072.0], [499.0, 3598.0], [498.0, 3125.0], [502.0, 4092.0], [501.0, 3612.5], [537.0, 4036.0], [542.0, 3887.0], [543.0, 2403.0], [529.0, 4361.0], [528.0, 4408.0], [531.0, 4129.0], [530.0, 3944.0], [533.0, 4230.0], [532.0, 2703.0], [540.0, 4166.0], [539.0, 4124.0], [538.0, 4186.0], [536.0, 4037.0], [519.0, 4445.0], [518.0, 4485.0], [517.0, 4074.0], [516.0, 4505.0], [515.0, 4308.0], [513.0, 3029.0], [512.0, 3018.0], [525.0, 2891.0], [524.0, 4288.0], [523.0, 4440.0], [522.0, 4317.0], [521.0, 4317.0], [520.0, 4495.0], [535.0, 3739.0], [534.0, 2680.0], [569.0, 3627.0], [574.0, 2829.0], [575.0, 3864.0], [560.0, 1543.0], [563.0, 2113.0], [561.0, 1350.0], [565.0, 1866.0], [564.0, 3924.0], [573.0, 2283.0], [572.0, 2626.0], [570.0, 3972.0], [568.0, 2292.0], [551.0, 1835.0], [550.0, 1779.0], [549.0, 1916.0], [548.0, 2365.0], [547.0, 1411.0], [546.0, 4115.0], [545.0, 1955.0], [544.0, 4020.0], [559.0, 1560.0], [558.0, 2631.5], [556.0, 4047.0], [555.0, 2331.0], [554.0, 2338.0], [553.0, 1388.0], [552.0, 1576.0], [567.0, 1527.0], [566.0, 2391.0], [605.0, 2578.0], [595.0, 3844.0], [607.0, 3087.0], [592.0, 1970.0], [594.0, 3842.0], [593.0, 3463.0], [604.0, 2213.0], [603.0, 2393.0], [601.0, 2433.5], [583.0, 1784.0], [582.0, 3558.0], [581.0, 1489.0], [580.0, 3863.0], [579.0, 1681.0], [578.0, 2429.0], [577.0, 1951.0], [591.0, 2589.0], [589.0, 3074.5], [587.0, 2234.0], [586.0, 1479.0], [585.0, 2193.0], [584.0, 1459.0], [599.0, 2586.0], [598.0, 2306.0], [597.0, 2115.5], [634.0, 2146.0], [627.0, 1965.6666666666667], [638.0, 2152.3333333333335], [639.0, 2465.0], [626.0, 2090.0], [624.0, 1811.0], [635.0, 2151.0], [633.0, 2146.0], [615.0, 1367.0], [614.0, 2206.0], [613.0, 2855.0], [612.0, 3533.0], [611.0, 2316.0], [610.0, 2237.0], [609.0, 2251.0], [622.0, 1715.0], [621.0, 2166.0], [620.0, 1608.0], [619.0, 1634.0], [618.0, 1637.0], [617.0, 1396.0], [616.0, 1366.0], [631.0, 2122.5], [630.0, 2141.0], [629.0, 2142.0], [666.0, 1976.5], [659.0, 2017.0], [670.0, 2407.3333333333335], [671.0, 3751.0], [658.0, 2022.0], [657.0, 2038.5], [667.0, 1975.0], [664.0, 1975.0], [647.0, 2083.0], [646.0, 2225.0], [645.0, 2109.0], [644.0, 2173.0], [643.0, 2241.0], [641.0, 2114.0], [640.0, 3734.0], [655.0, 2025.0], [654.0, 2027.0], [653.0, 2028.0], [652.0, 2210.0], [651.0, 2076.0], [650.0, 3037.5], [649.0, 2219.0], [663.0, 1980.0], [662.0, 2084.5], [660.0, 3540.0], [696.0, 1986.6666666666667], [700.0, 1970.0], [703.0, 1972.0], [688.0, 1992.0], [691.0, 1997.0], [690.0, 1996.0], [702.0, 1974.0], [701.0, 1977.0], [699.0, 1983.0], [698.0, 1985.0], [697.0, 1987.0], [687.0, 1997.5], [673.0, 2022.0], [672.0, 2026.0], [675.0, 2013.0], [674.0, 3220.0], [678.0, 1936.0], [677.0, 2012.5], [685.0, 2006.0], [684.0, 2007.0], [683.0, 1999.0], [682.0, 2813.5], [680.0, 2002.0], [693.0, 1916.0], [692.0, 1994.0], [709.0, 3432.0], [735.0, 1929.3333333333333], [731.0, 1934.0], [717.0, 1940.0], [706.0, 3434.0], [705.0, 1971.0], [714.0, 1961.0], [713.0, 1961.3333333333333], [710.0, 1962.0], [708.0, 2770.5], [707.0, 1970.0], [762.0, 1685.0], [755.0, 2629.5], [766.0, 3373.0], [767.0, 1866.0], [753.0, 1884.0], [764.0, 2859.0], [760.0, 1686.0], [743.0, 2421.0], [740.0, 3546.0], [739.0, 1546.0], [738.0, 2251.5], [736.0, 1926.857142857143], [751.0, 1882.0], [750.0, 1889.0], [748.0, 1895.0], [747.0, 1892.0], [746.0, 1900.0], [745.0, 2647.0], [759.0, 1669.0], [758.0, 1880.0], [757.0, 1772.0], [793.0, 3533.0], [798.0, 3482.5], [799.0, 3604.0], [784.0, 3222.0], [787.0, 1842.0], [786.0, 3327.0], [796.0, 3310.0], [795.0, 3281.0], [794.0, 3336.0], [792.0, 2375.5], [774.0, 1854.0], [773.0, 3198.0], [772.0, 3368.0], [771.0, 1760.5], [769.0, 1864.0], [768.0, 1875.0], [783.0, 3538.0], [781.0, 3298.0], [780.0, 1849.0], [779.0, 3481.0], [778.0, 2579.5], [790.0, 2382.0], [788.0, 3582.0], [826.0, 2951.0], [817.0, 3444.0], [829.0, 1201.0], [831.0, 1207.5], [816.0, 1331.0], [828.0, 1346.0], [825.0, 2344.25], [807.0, 1549.0], [806.0, 2354.5], [804.0, 1552.0], [803.0, 3325.0], [802.0, 3559.0], [801.0, 3516.5], [814.0, 1713.0], [813.0, 2215.5], [812.0, 3390.0], [810.0, 1745.0], [809.0, 1769.0], [808.0, 1547.0], [821.0, 3149.0], [820.0, 1267.0], [819.0, 2406.0], [856.0, 3114.0], [861.0, 1200.0], [863.0, 1164.5], [849.0, 1185.0], [848.0, 3395.0], [851.0, 3448.0], [850.0, 1253.0], [860.0, 1188.0], [859.0, 3383.0], [857.0, 3103.0], [847.0, 1264.0], [834.0, 1288.0], [832.0, 1207.0], [836.0, 1264.5], [835.0, 1197.0], [839.0, 1206.5], [837.0, 1276.0], [846.0, 3190.0], [845.0, 1201.0], [843.0, 1229.0], [842.0, 1202.0], [840.0, 1193.0], [855.0, 3120.0], [854.0, 3136.0], [853.0, 1217.0], [852.0, 3401.0], [889.0, 1042.0], [894.0, 1095.0], [895.0, 3070.0], [881.0, 2533.0], [885.0, 1788.3333333333333], [884.0, 3244.0], [893.0, 3073.0], [892.0, 1166.0], [890.0, 1093.0], [888.0, 1043.0], [871.0, 1074.0], [870.0, 1874.3333333333335], [867.0, 1217.0], [866.0, 1155.5], [865.0, 1204.0], [878.0, 1108.0], [877.0, 2868.0], [876.0, 1113.0], [875.0, 1068.0], [874.0, 3257.0], [873.0, 3100.0], [872.0, 1148.0], [887.0, 1139.0], [886.0, 1052.0], [916.0, 3346.0], [924.0, 1061.0], [927.0, 1845.3333333333333], [912.0, 1093.0], [915.0, 1268.5], [914.0, 1134.0], [923.0, 1105.0], [921.0, 3248.0], [920.0, 1112.0], [902.0, 2820.0], [901.0, 1149.5], [899.0, 2150.0], [897.0, 1120.0], [911.0, 1133.5], [909.0, 2003.5], [907.0, 1999.8], [919.0, 1101.0], [918.0, 1093.0], [917.0, 3051.0], [946.0, 3240.0], [958.0, 2846.5], [959.0, 2847.0], [944.0, 3037.0], [957.0, 2827.6666666666665], [955.0, 3335.0], [954.0, 2936.0], [934.0, 3188.0], [932.0, 1086.0], [930.0, 3146.6666666666665], [943.0, 2973.5], [941.0, 3340.0], [940.0, 3037.0], [939.0, 3290.0], [938.0, 2889.0], [937.0, 3248.5], [951.0, 2950.0], [950.0, 3137.0], [948.0, 3070.0], [990.0, 3198.0], [991.0, 2757.0], [976.0, 2949.6666666666665], [980.0, 2964.5], [978.0, 1397.5], [989.0, 1088.0], [988.0, 1970.5], [986.0, 2816.0], [985.0, 2825.0], [984.0, 2838.0], [967.0, 3187.0], [966.0, 2438.3333333333335], [963.0, 2869.0], [962.0, 2846.0], [961.0, 2875.0], [960.0, 2872.0], [973.0, 3150.3333333333335], [971.0, 3257.0], [969.0, 3093.0], [983.0, 3078.0], [981.0, 2861.0], [1017.0, 3171.0], [1011.0, 1007.0], [1021.0, 955.5], [1023.0, 951.0], [1010.0, 979.0], [1019.0, 3024.5], [1016.0, 1034.0], [999.0, 976.0], [998.0, 2728.0], [997.0, 966.0], [996.0, 1858.0], [995.0, 975.0], [993.0, 980.0], [992.0, 987.0], [1007.0, 971.0], [1006.0, 996.0], [1005.0, 2120.0], [1003.0, 824.0], [1002.0, 3224.0], [1001.0, 976.0], [1000.0, 966.0], [1015.0, 975.0], [1014.0, 987.0], [1013.0, 967.5], [1038.0, 1040.0], [1058.0, 1324.5], [1064.0, 1316.6666666666667], [1080.0, 1359.0], [1084.0, 1358.0], [1056.0, 706.0], [1062.0, 1294.0], [1076.0, 1360.0], [1074.0, 2713.0], [1036.0, 917.0], [1032.0, 934.0], [1030.0, 3153.0], [1026.0, 3147.0], [1024.0, 935.0], [1054.0, 1029.0], [1052.0, 2890.0], [1050.0, 3158.0], [1046.0, 3160.0], [1044.0, 3160.0], [1042.0, 2229.6666666666665], [1070.0, 1362.0], [1066.0, 1372.0], [1102.0, 681.0], [1144.0, 651.0], [1120.0, 2648.0], [1138.0, 643.0], [1090.0, 685.0], [1088.0, 1022.0], [1118.0, 2130.5], [1114.0, 855.0], [1112.0, 974.0], [1134.0, 1467.0], [1132.0, 1469.0], [1160.0, 2995.0], [1202.0, 819.5], [1200.0, 2754.0], [1166.0, 3081.0], [1158.0, 1043.0], [1152.0, 2775.0], [1182.0, 1595.6666666666667], [1172.0, 2762.0], [1170.0, 3154.0], [1168.0, 946.0], [1196.0, 1057.0], [1194.0, 2317.6666666666665], [1270.0, 586.0], [1254.0, 1016.0], [1276.0, 536.0], [1278.0, 557.0], [1266.0, 499.5], [1264.0, 609.0], [1230.0, 622.0], [1222.0, 414.0], [1220.0, 2818.0], [1260.0, 607.0], [1292.0, 473.0], [1334.0, 2741.0], [1340.0, 2873.0], [1328.0, 976.0], [1322.0, 539.0], [1312.0, 1648.5], [1284.0, 375.0], [1310.0, 521.0], [1308.0, 1061.5], [1306.0, 561.0], [1304.0, 565.0], [1300.0, 3046.0], [1386.0, 2625.0], [1346.0, 1486.0], [1500.0, 857.9428571428568], [1039.0, 1092.0], [1059.0, 1294.0], [1061.0, 700.0], [1075.0, 2879.0], [1035.0, 2980.0], [1033.0, 3208.0], [1031.0, 3013.3333333333335], [1029.0, 3176.0], [1025.0, 939.0], [1055.0, 1029.0], [1053.0, 1962.0], [1049.0, 1808.0], [1047.0, 1941.5], [1043.0, 3059.0], [1069.0, 1361.3333333333333], [1137.0, 1722.0], [1131.0, 656.0], [1097.0, 681.0], [1091.0, 685.0], [1109.0, 2796.0], [1135.0, 1468.0], [1125.0, 657.0], [1123.0, 1453.0], [1167.0, 2767.0], [1207.0, 838.3333333333334], [1211.0, 571.0], [1203.0, 2823.0], [1157.0, 638.0], [1155.0, 640.0], [1177.0, 2592.0], [1175.0, 2759.5], [1199.0, 2750.0], [1193.0, 2819.0], [1249.0, 1029.0], [1251.0, 1018.0], [1227.0, 2743.0], [1223.0, 601.0], [1219.0, 576.0], [1245.0, 1041.5], [1241.0, 638.6666666666666], [1257.0, 895.0], [1255.0, 592.0], [1311.0, 2944.0], [1331.0, 502.0], [1319.0, 1519.0], [1283.0, 485.5], [1305.0, 559.0], [1301.0, 538.0], [1299.0, 565.5], [1297.0, 568.0], [1367.0, 2791.5], [1363.0, 2930.0], [1345.0, 1472.0], [1.0, 7157.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}, {"data": [[790.5353333333343, 3139.1879999999987]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15775.0, "minX": 1.75635474E12, "maxY": 21550.0, "series": [{"data": [[1.75635474E12, 21550.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75635474E12, 15775.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635474E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3139.1879999999987, "minX": 1.75635474E12, "maxY": 3139.1879999999987, "series": [{"data": [[1.75635474E12, 3139.1879999999987]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635474E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3138.858000000002, "minX": 1.75635474E12, "maxY": 3138.858000000002, "series": [{"data": [[1.75635474E12, 3138.858000000002]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635474E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1870.5359999999991, "minX": 1.75635474E12, "maxY": 1870.5359999999991, "series": [{"data": [[1.75635474E12, 1870.5359999999991]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635474E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 62.0, "minX": 1.75635474E12, "maxY": 7157.0, "series": [{"data": [[1.75635474E12, 7157.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75635474E12, 6465.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75635474E12, 7072.95]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75635474E12, 6731.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75635474E12, 62.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75635474E12, 2753.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635474E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1042.0, "minX": 49.0, "maxY": 6570.0, "series": [{"data": [[599.0, 1042.0], [330.0, 2012.5], [172.0, 6040.0], [95.0, 4235.0], [49.0, 1867.0], [255.0, 6570.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 599.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1042.0, "minX": 49.0, "maxY": 6570.0, "series": [{"data": [[599.0, 1042.0], [330.0, 2012.5], [172.0, 6040.0], [95.0, 4235.0], [49.0, 1856.0], [255.0, 6570.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 599.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635474E12, "maxY": 25.0, "series": [{"data": [[1.75635474E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635474E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635474E12, "maxY": 25.0, "series": [{"data": [[1.75635474E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635474E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635474E12, "maxY": 25.0, "series": [{"data": [[1.75635474E12, 25.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635474E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635474E12, "maxY": 25.0, "series": [{"data": [[1.75635474E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635474E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

