/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 56035.0, "series": [{"data": [[0.0, 7.0], [0.1, 7.0], [0.2, 8.0], [0.3, 8.0], [0.4, 8.0], [0.5, 8.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 8.0], [1.1, 8.0], [1.2, 8.0], [1.3, 8.0], [1.4, 8.0], [1.5, 8.0], [1.6, 8.0], [1.7, 8.0], [1.8, 8.0], [1.9, 8.0], [2.0, 8.0], [2.1, 8.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 8.0], [2.7, 8.0], [2.8, 8.0], [2.9, 8.0], [3.0, 8.0], [3.1, 8.0], [3.2, 9.0], [3.3, 9.0], [3.4, 9.0], [3.5, 9.0], [3.6, 9.0], [3.7, 9.0], [3.8, 9.0], [3.9, 9.0], [4.0, 9.0], [4.1, 9.0], [4.2, 9.0], [4.3, 9.0], [4.4, 9.0], [4.5, 9.0], [4.6, 9.0], [4.7, 9.0], [4.8, 9.0], [4.9, 9.0], [5.0, 9.0], [5.1, 9.0], [5.2, 9.0], [5.3, 9.0], [5.4, 9.0], [5.5, 9.0], [5.6, 9.0], [5.7, 9.0], [5.8, 9.0], [5.9, 9.0], [6.0, 9.0], [6.1, 9.0], [6.2, 9.0], [6.3, 9.0], [6.4, 10.0], [6.5, 10.0], [6.6, 10.0], [6.7, 10.0], [6.8, 10.0], [6.9, 10.0], [7.0, 10.0], [7.1, 10.0], [7.2, 10.0], [7.3, 10.0], [7.4, 10.0], [7.5, 10.0], [7.6, 10.0], [7.7, 10.0], [7.8, 10.0], [7.9, 10.0], [8.0, 10.0], [8.1, 10.0], [8.2, 10.0], [8.3, 10.0], [8.4, 10.0], [8.5, 11.0], [8.6, 11.0], [8.7, 11.0], [8.8, 11.0], [8.9, 11.0], [9.0, 11.0], [9.1, 11.0], [9.2, 11.0], [9.3, 11.0], [9.4, 11.0], [9.5, 11.0], [9.6, 11.0], [9.7, 11.0], [9.8, 11.0], [9.9, 12.0], [10.0, 12.0], [10.1, 12.0], [10.2, 12.0], [10.3, 12.0], [10.4, 12.0], [10.5, 12.0], [10.6, 12.0], [10.7, 12.0], [10.8, 12.0], [10.9, 12.0], [11.0, 13.0], [11.1, 13.0], [11.2, 13.0], [11.3, 13.0], [11.4, 13.0], [11.5, 13.0], [11.6, 14.0], [11.7, 14.0], [11.8, 14.0], [11.9, 14.0], [12.0, 15.0], [12.1, 15.0], [12.2, 15.0], [12.3, 15.0], [12.4, 15.0], [12.5, 15.0], [12.6, 16.0], [12.7, 16.0], [12.8, 17.0], [12.9, 18.0], [13.0, 19.0], [13.1, 19.0], [13.2, 21.0], [13.3, 22.0], [13.4, 22.0], [13.5, 28.0], [13.6, 29.0], [13.7, 31.0], [13.8, 31.0], [13.9, 32.0], [14.0, 33.0], [14.1, 35.0], [14.2, 35.0], [14.3, 35.0], [14.4, 35.0], [14.5, 36.0], [14.6, 46.0], [14.7, 58.0], [14.8, 64.0], [14.9, 75.0], [15.0, 75.0], [15.1, 79.0], [15.2, 80.0], [15.3, 81.0], [15.4, 84.0], [15.5, 85.0], [15.6, 85.0], [15.7, 89.0], [15.8, 89.0], [15.9, 91.0], [16.0, 91.0], [16.1, 95.0], [16.2, 95.0], [16.3, 96.0], [16.4, 97.0], [16.5, 98.0], [16.6, 110.0], [16.7, 115.0], [16.8, 115.0], [16.9, 131.0], [17.0, 133.0], [17.1, 137.0], [17.2, 138.0], [17.3, 140.0], [17.4, 140.0], [17.5, 141.0], [17.6, 144.0], [17.7, 144.0], [17.8, 145.0], [17.9, 150.0], [18.0, 166.0], [18.1, 174.0], [18.2, 182.0], [18.3, 184.0], [18.4, 184.0], [18.5, 193.0], [18.6, 199.0], [18.7, 203.0], [18.8, 203.0], [18.9, 211.0], [19.0, 221.0], [19.1, 223.0], [19.2, 225.0], [19.3, 226.0], [19.4, 229.0], [19.5, 234.0], [19.6, 242.0], [19.7, 309.0], [19.8, 327.0], [19.9, 329.0], [20.0, 331.0], [20.1, 334.0], [20.2, 337.0], [20.3, 344.0], [20.4, 347.0], [20.5, 352.0], [20.6, 387.0], [20.7, 492.0], [20.8, 504.0], [20.9, 511.0], [21.0, 517.0], [21.1, 618.0], [21.2, 897.0], [21.3, 901.0], [21.4, 979.0], [21.5, 1023.0], [21.6, 1031.0], [21.7, 1055.0], [21.8, 1061.0], [21.9, 1062.0], [22.0, 1065.0], [22.1, 1111.0], [22.2, 1130.0], [22.3, 1150.0], [22.4, 1152.0], [22.5, 1154.0], [22.6, 1154.0], [22.7, 1162.0], [22.8, 1167.0], [22.9, 1171.0], [23.0, 1179.0], [23.1, 1184.0], [23.2, 1205.0], [23.3, 1209.0], [23.4, 1213.0], [23.5, 1403.0], [23.6, 1432.0], [23.7, 1504.0], [23.8, 1550.0], [23.9, 1555.0], [24.0, 2207.0], [24.1, 2515.0], [24.2, 2552.0], [24.3, 2589.0], [24.4, 2753.0], [24.5, 2858.0], [24.6, 2927.0], [24.7, 2945.0], [24.8, 15900.0], [24.9, 15903.0], [25.0, 15909.0], [25.1, 15942.0], [25.2, 15957.0], [25.3, 15966.0], [25.4, 15975.0], [25.5, 16010.0], [25.6, 16013.0], [25.7, 16030.0], [25.8, 16046.0], [25.9, 16061.0], [26.0, 16070.0], [26.1, 16076.0], [26.2, 16084.0], [26.3, 16089.0], [26.4, 16098.0], [26.5, 16100.0], [26.6, 16100.0], [26.7, 16101.0], [26.8, 16101.0], [26.9, 16268.0], [27.0, 16311.0], [27.1, 16332.0], [27.2, 16374.0], [27.3, 16399.0], [27.4, 16439.0], [27.5, 16488.0], [27.6, 16528.0], [27.7, 16531.0], [27.8, 16607.0], [27.9, 16615.0], [28.0, 16648.0], [28.1, 16688.0], [28.2, 16689.0], [28.3, 16691.0], [28.4, 16695.0], [28.5, 16695.0], [28.6, 16697.0], [28.7, 16713.0], [28.8, 16714.0], [28.9, 16728.0], [29.0, 16729.0], [29.1, 16756.0], [29.2, 16760.0], [29.3, 16760.0], [29.4, 16760.0], [29.5, 16762.0], [29.6, 16764.0], [29.7, 16769.0], [29.8, 16771.0], [29.9, 16775.0], [30.0, 16775.0], [30.1, 16776.0], [30.2, 16783.0], [30.3, 16783.0], [30.4, 16787.0], [30.5, 16789.0], [30.6, 16790.0], [30.7, 16792.0], [30.8, 16792.0], [30.9, 16795.0], [31.0, 16795.0], [31.1, 16800.0], [31.2, 16805.0], [31.3, 16805.0], [31.4, 16808.0], [31.5, 16809.0], [31.6, 16818.0], [31.7, 16820.0], [31.8, 16821.0], [31.9, 16822.0], [32.0, 16823.0], [32.1, 16824.0], [32.2, 16824.0], [32.3, 16825.0], [32.4, 16827.0], [32.5, 16827.0], [32.6, 16828.0], [32.7, 16830.0], [32.8, 16831.0], [32.9, 16833.0], [33.0, 16833.0], [33.1, 16834.0], [33.2, 16834.0], [33.3, 16836.0], [33.4, 16837.0], [33.5, 16841.0], [33.6, 16843.0], [33.7, 16844.0], [33.8, 16844.0], [33.9, 16845.0], [34.0, 16846.0], [34.1, 16846.0], [34.2, 16847.0], [34.3, 16856.0], [34.4, 16857.0], [34.5, 16857.0], [34.6, 16859.0], [34.7, 16862.0], [34.8, 16862.0], [34.9, 16863.0], [35.0, 16863.0], [35.1, 16866.0], [35.2, 16866.0], [35.3, 16867.0], [35.4, 16867.0], [35.5, 16868.0], [35.6, 16868.0], [35.7, 16871.0], [35.8, 16872.0], [35.9, 16874.0], [36.0, 16874.0], [36.1, 16877.0], [36.2, 16878.0], [36.3, 16881.0], [36.4, 16882.0], [36.5, 16883.0], [36.6, 16883.0], [36.7, 16896.0], [36.8, 16898.0], [36.9, 16900.0], [37.0, 16900.0], [37.1, 16902.0], [37.2, 16902.0], [37.3, 16905.0], [37.4, 16910.0], [37.5, 16911.0], [37.6, 16911.0], [37.7, 16912.0], [37.8, 16917.0], [37.9, 16917.0], [38.0, 16918.0], [38.1, 16921.0], [38.2, 16923.0], [38.3, 16925.0], [38.4, 16925.0], [38.5, 16925.0], [38.6, 16929.0], [38.7, 16929.0], [38.8, 16931.0], [38.9, 16934.0], [39.0, 16936.0], [39.1, 16936.0], [39.2, 16936.0], [39.3, 16938.0], [39.4, 16939.0], [39.5, 16940.0], [39.6, 16944.0], [39.7, 16946.0], [39.8, 16948.0], [39.9, 16952.0], [40.0, 16955.0], [40.1, 16957.0], [40.2, 16957.0], [40.3, 16958.0], [40.4, 16959.0], [40.5, 16959.0], [40.6, 16959.0], [40.7, 16959.0], [40.8, 16961.0], [40.9, 16964.0], [41.0, 16965.0], [41.1, 16966.0], [41.2, 16966.0], [41.3, 16968.0], [41.4, 16974.0], [41.5, 16976.0], [41.6, 16976.0], [41.7, 16978.0], [41.8, 16978.0], [41.9, 16979.0], [42.0, 16980.0], [42.1, 16980.0], [42.2, 16982.0], [42.3, 16983.0], [42.4, 16983.0], [42.5, 16987.0], [42.6, 16990.0], [42.7, 16993.0], [42.8, 16994.0], [42.9, 16994.0], [43.0, 16995.0], [43.1, 16997.0], [43.2, 16997.0], [43.3, 16997.0], [43.4, 16998.0], [43.5, 17000.0], [43.6, 17001.0], [43.7, 17002.0], [43.8, 17003.0], [43.9, 17003.0], [44.0, 17003.0], [44.1, 17003.0], [44.2, 17003.0], [44.3, 17004.0], [44.4, 17004.0], [44.5, 17005.0], [44.6, 17005.0], [44.7, 17007.0], [44.8, 17007.0], [44.9, 17008.0], [45.0, 17010.0], [45.1, 17013.0], [45.2, 17014.0], [45.3, 17015.0], [45.4, 17017.0], [45.5, 17017.0], [45.6, 17017.0], [45.7, 17018.0], [45.8, 17020.0], [45.9, 17020.0], [46.0, 17024.0], [46.1, 17025.0], [46.2, 17025.0], [46.3, 17026.0], [46.4, 17026.0], [46.5, 17030.0], [46.6, 17030.0], [46.7, 17031.0], [46.8, 17034.0], [46.9, 17034.0], [47.0, 17034.0], [47.1, 17035.0], [47.2, 17035.0], [47.3, 17036.0], [47.4, 17037.0], [47.5, 17037.0], [47.6, 17039.0], [47.7, 17040.0], [47.8, 17040.0], [47.9, 17041.0], [48.0, 17044.0], [48.1, 17046.0], [48.2, 17048.0], [48.3, 17048.0], [48.4, 17048.0], [48.5, 17048.0], [48.6, 17049.0], [48.7, 17049.0], [48.8, 17049.0], [48.9, 17050.0], [49.0, 17050.0], [49.1, 17051.0], [49.2, 17052.0], [49.3, 17053.0], [49.4, 17053.0], [49.5, 17055.0], [49.6, 17055.0], [49.7, 17056.0], [49.8, 17058.0], [49.9, 17060.0], [50.0, 17062.0], [50.1, 17063.0], [50.2, 17063.0], [50.3, 17063.0], [50.4, 17064.0], [50.5, 17064.0], [50.6, 17064.0], [50.7, 17064.0], [50.8, 17065.0], [50.9, 17065.0], [51.0, 17065.0], [51.1, 17069.0], [51.2, 17072.0], [51.3, 17075.0], [51.4, 17075.0], [51.5, 17076.0], [51.6, 17078.0], [51.7, 17079.0], [51.8, 17080.0], [51.9, 17080.0], [52.0, 17081.0], [52.1, 17082.0], [52.2, 17086.0], [52.3, 17094.0], [52.4, 17096.0], [52.5, 17096.0], [52.6, 17100.0], [52.7, 17101.0], [52.8, 17111.0], [52.9, 17131.0], [53.0, 17141.0], [53.1, 17146.0], [53.2, 17150.0], [53.3, 17158.0], [53.4, 17160.0], [53.5, 17163.0], [53.6, 17165.0], [53.7, 17165.0], [53.8, 17165.0], [53.9, 17166.0], [54.0, 17172.0], [54.1, 17172.0], [54.2, 17173.0], [54.3, 17173.0], [54.4, 17174.0], [54.5, 17175.0], [54.6, 17176.0], [54.7, 17177.0], [54.8, 17181.0], [54.9, 17189.0], [55.0, 17212.0], [55.1, 17216.0], [55.2, 17238.0], [55.3, 17246.0], [55.4, 17249.0], [55.5, 17262.0], [55.6, 17347.0], [55.7, 17364.0], [55.8, 17382.0], [55.9, 17384.0], [56.0, 17396.0], [56.1, 17398.0], [56.2, 17399.0], [56.3, 17401.0], [56.4, 17401.0], [56.5, 17405.0], [56.6, 17412.0], [56.7, 17424.0], [56.8, 17444.0], [56.9, 17448.0], [57.0, 17453.0], [57.1, 17454.0], [57.2, 17465.0], [57.3, 17498.0], [57.4, 17502.0], [57.5, 17502.0], [57.6, 17502.0], [57.7, 17510.0], [57.8, 17539.0], [57.9, 17550.0], [58.0, 17558.0], [58.1, 17566.0], [58.2, 17574.0], [58.3, 17584.0], [58.4, 17630.0], [58.5, 17631.0], [58.6, 17662.0], [58.7, 17662.0], [58.8, 17684.0], [58.9, 17717.0], [59.0, 17729.0], [59.1, 17730.0], [59.2, 17736.0], [59.3, 17738.0], [59.4, 17747.0], [59.5, 17765.0], [59.6, 17787.0], [59.7, 17798.0], [59.8, 17834.0], [59.9, 17889.0], [60.0, 17908.0], [60.1, 18284.0], [60.2, 18343.0], [60.3, 18426.0], [60.4, 18612.0], [60.5, 18744.0], [60.6, 53917.0], [60.7, 53935.0], [60.8, 53939.0], [60.9, 53940.0], [61.0, 53943.0], [61.1, 53958.0], [61.2, 53958.0], [61.3, 53958.0], [61.4, 53962.0], [61.5, 53973.0], [61.6, 53974.0], [61.7, 53975.0], [61.8, 53975.0], [61.9, 53978.0], [62.0, 53982.0], [62.1, 53987.0], [62.2, 53988.0], [62.3, 53993.0], [62.4, 53994.0], [62.5, 53996.0], [62.6, 53996.0], [62.7, 53997.0], [62.8, 54014.0], [62.9, 54014.0], [63.0, 54017.0], [63.1, 54021.0], [63.2, 54027.0], [63.3, 54033.0], [63.4, 54034.0], [63.5, 54038.0], [63.6, 54038.0], [63.7, 54040.0], [63.8, 54040.0], [63.9, 54040.0], [64.0, 54042.0], [64.1, 54043.0], [64.2, 54051.0], [64.3, 54056.0], [64.4, 54059.0], [64.5, 54068.0], [64.6, 54078.0], [64.7, 54087.0], [64.8, 54088.0], [64.9, 54094.0], [65.0, 54146.0], [65.1, 54220.0], [65.2, 54246.0], [65.3, 54249.0], [65.4, 54257.0], [65.5, 54264.0], [65.6, 54277.0], [65.7, 54321.0], [65.8, 54528.0], [65.9, 54551.0], [66.0, 54554.0], [66.1, 54558.0], [66.2, 54569.0], [66.3, 54582.0], [66.4, 54594.0], [66.5, 54595.0], [66.6, 54606.0], [66.7, 54635.0], [66.8, 54660.0], [66.9, 54664.0], [67.0, 54665.0], [67.1, 54665.0], [67.2, 54676.0], [67.3, 54679.0], [67.4, 54685.0], [67.5, 54686.0], [67.6, 54698.0], [67.7, 54702.0], [67.8, 54702.0], [67.9, 54724.0], [68.0, 54729.0], [68.1, 54729.0], [68.2, 54731.0], [68.3, 54744.0], [68.4, 54752.0], [68.5, 54753.0], [68.6, 54760.0], [68.7, 54841.0], [68.8, 54861.0], [68.9, 54862.0], [69.0, 54863.0], [69.1, 54863.0], [69.2, 54864.0], [69.3, 54867.0], [69.4, 54869.0], [69.5, 54872.0], [69.6, 54876.0], [69.7, 54876.0], [69.8, 54877.0], [69.9, 54878.0], [70.0, 54879.0], [70.1, 54879.0], [70.2, 54880.0], [70.3, 54881.0], [70.4, 54881.0], [70.5, 54882.0], [70.6, 54883.0], [70.7, 54883.0], [70.8, 54884.0], [70.9, 54884.0], [71.0, 54885.0], [71.1, 54886.0], [71.2, 54887.0], [71.3, 54889.0], [71.4, 54890.0], [71.5, 54894.0], [71.6, 54894.0], [71.7, 54899.0], [71.8, 54905.0], [71.9, 54906.0], [72.0, 54906.0], [72.1, 54907.0], [72.2, 54911.0], [72.3, 54945.0], [72.4, 54957.0], [72.5, 54964.0], [72.6, 54965.0], [72.7, 54967.0], [72.8, 54967.0], [72.9, 54987.0], [73.0, 54990.0], [73.1, 54998.0], [73.2, 55002.0], [73.3, 55004.0], [73.4, 55010.0], [73.5, 55012.0], [73.6, 55013.0], [73.7, 55020.0], [73.8, 55034.0], [73.9, 55047.0], [74.0, 55054.0], [74.1, 55060.0], [74.2, 55062.0], [74.3, 55063.0], [74.4, 55063.0], [74.5, 55072.0], [74.6, 55078.0], [74.7, 55081.0], [74.8, 55081.0], [74.9, 55123.0], [75.0, 55126.0], [75.1, 55149.0], [75.2, 55155.0], [75.3, 55158.0], [75.4, 55160.0], [75.5, 55161.0], [75.6, 55166.0], [75.7, 55168.0], [75.8, 55170.0], [75.9, 55170.0], [76.0, 55170.0], [76.1, 55174.0], [76.2, 55175.0], [76.3, 55176.0], [76.4, 55176.0], [76.5, 55178.0], [76.6, 55179.0], [76.7, 55179.0], [76.8, 55180.0], [76.9, 55180.0], [77.0, 55181.0], [77.1, 55182.0], [77.2, 55184.0], [77.3, 55184.0], [77.4, 55185.0], [77.5, 55185.0], [77.6, 55185.0], [77.7, 55187.0], [77.8, 55188.0], [77.9, 55189.0], [78.0, 55191.0], [78.1, 55191.0], [78.2, 55192.0], [78.3, 55193.0], [78.4, 55194.0], [78.5, 55194.0], [78.6, 55194.0], [78.7, 55195.0], [78.8, 55195.0], [78.9, 55197.0], [79.0, 55197.0], [79.1, 55198.0], [79.2, 55199.0], [79.3, 55200.0], [79.4, 55201.0], [79.5, 55202.0], [79.6, 55202.0], [79.7, 55202.0], [79.8, 55204.0], [79.9, 55204.0], [80.0, 55205.0], [80.1, 55205.0], [80.2, 55209.0], [80.3, 55211.0], [80.4, 55212.0], [80.5, 55213.0], [80.6, 55214.0], [80.7, 55215.0], [80.8, 55215.0], [80.9, 55218.0], [81.0, 55218.0], [81.1, 55221.0], [81.2, 55223.0], [81.3, 55224.0], [81.4, 55225.0], [81.5, 55229.0], [81.6, 55233.0], [81.7, 55234.0], [81.8, 55235.0], [81.9, 55237.0], [82.0, 55240.0], [82.1, 55241.0], [82.2, 55243.0], [82.3, 55244.0], [82.4, 55245.0], [82.5, 55246.0], [82.6, 55259.0], [82.7, 55259.0], [82.8, 55259.0], [82.9, 55263.0], [83.0, 55263.0], [83.1, 55264.0], [83.2, 55264.0], [83.3, 55264.0], [83.4, 55266.0], [83.5, 55266.0], [83.6, 55268.0], [83.7, 55273.0], [83.8, 55275.0], [83.9, 55283.0], [84.0, 55283.0], [84.1, 55284.0], [84.2, 55284.0], [84.3, 55284.0], [84.4, 55285.0], [84.5, 55286.0], [84.6, 55289.0], [84.7, 55290.0], [84.8, 55291.0], [84.9, 55296.0], [85.0, 55298.0], [85.1, 55302.0], [85.2, 55302.0], [85.3, 55303.0], [85.4, 55306.0], [85.5, 55309.0], [85.6, 55310.0], [85.7, 55310.0], [85.8, 55314.0], [85.9, 55315.0], [86.0, 55315.0], [86.1, 55320.0], [86.2, 55321.0], [86.3, 55322.0], [86.4, 55324.0], [86.5, 55328.0], [86.6, 55328.0], [86.7, 55329.0], [86.8, 55329.0], [86.9, 55329.0], [87.0, 55331.0], [87.1, 55332.0], [87.2, 55332.0], [87.3, 55333.0], [87.4, 55333.0], [87.5, 55333.0], [87.6, 55334.0], [87.7, 55335.0], [87.8, 55336.0], [87.9, 55336.0], [88.0, 55336.0], [88.1, 55336.0], [88.2, 55337.0], [88.3, 55337.0], [88.4, 55338.0], [88.5, 55338.0], [88.6, 55338.0], [88.7, 55339.0], [88.8, 55339.0], [88.9, 55340.0], [89.0, 55340.0], [89.1, 55340.0], [89.2, 55340.0], [89.3, 55340.0], [89.4, 55341.0], [89.5, 55341.0], [89.6, 55341.0], [89.7, 55341.0], [89.8, 55342.0], [89.9, 55343.0], [90.0, 55343.0], [90.1, 55344.0], [90.2, 55345.0], [90.3, 55345.0], [90.4, 55346.0], [90.5, 55346.0], [90.6, 55346.0], [90.7, 55347.0], [90.8, 55347.0], [90.9, 55348.0], [91.0, 55348.0], [91.1, 55348.0], [91.2, 55349.0], [91.3, 55349.0], [91.4, 55349.0], [91.5, 55349.0], [91.6, 55349.0], [91.7, 55350.0], [91.8, 55350.0], [91.9, 55350.0], [92.0, 55351.0], [92.1, 55351.0], [92.2, 55351.0], [92.3, 55351.0], [92.4, 55351.0], [92.5, 55351.0], [92.6, 55352.0], [92.7, 55353.0], [92.8, 55353.0], [92.9, 55353.0], [93.0, 55354.0], [93.1, 55354.0], [93.2, 55355.0], [93.3, 55355.0], [93.4, 55355.0], [93.5, 55355.0], [93.6, 55356.0], [93.7, 55356.0], [93.8, 55357.0], [93.9, 55357.0], [94.0, 55357.0], [94.1, 55358.0], [94.2, 55358.0], [94.3, 55358.0], [94.4, 55359.0], [94.5, 55359.0], [94.6, 55360.0], [94.7, 55360.0], [94.8, 55360.0], [94.9, 55360.0], [95.0, 55361.0], [95.1, 55361.0], [95.2, 55362.0], [95.3, 55362.0], [95.4, 55362.0], [95.5, 55363.0], [95.6, 55363.0], [95.7, 55364.0], [95.8, 55364.0], [95.9, 55364.0], [96.0, 55365.0], [96.1, 55365.0], [96.2, 55365.0], [96.3, 55366.0], [96.4, 55366.0], [96.5, 55366.0], [96.6, 55366.0], [96.7, 55367.0], [96.8, 55367.0], [96.9, 55367.0], [97.0, 55368.0], [97.1, 55368.0], [97.2, 55369.0], [97.3, 55369.0], [97.4, 55369.0], [97.5, 55369.0], [97.6, 55370.0], [97.7, 55370.0], [97.8, 55370.0], [97.9, 55370.0], [98.0, 55373.0], [98.1, 55374.0], [98.2, 55377.0], [98.3, 55377.0], [98.4, 55377.0], [98.5, 55378.0], [98.6, 55379.0], [98.7, 55379.0], [98.8, 55381.0], [98.9, 55381.0], [99.0, 55382.0], [99.1, 55382.0], [99.2, 55688.0], [99.3, 55786.0], [99.4, 55813.0], [99.5, 55818.0], [99.6, 55963.0], [99.7, 55967.0], [99.8, 55993.0], [99.9, 56035.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 166.0, "series": [{"data": [[0.0, 166.0], [600.0, 1.0], [800.0, 1.0], [900.0, 2.0], [1000.0, 6.0], [1100.0, 11.0], [1200.0, 3.0], [1400.0, 2.0], [1500.0, 3.0], [2200.0, 1.0], [2500.0, 3.0], [2800.0, 1.0], [2700.0, 1.0], [2900.0, 2.0], [16300.0, 4.0], [15900.0, 7.0], [16000.0, 10.0], [16100.0, 4.0], [16200.0, 1.0], [16600.0, 9.0], [16700.0, 24.0], [16800.0, 58.0], [16900.0, 66.0], [17000.0, 91.0], [17100.0, 24.0], [16500.0, 2.0], [16400.0, 2.0], [17200.0, 6.0], [17300.0, 7.0], [17400.0, 11.0], [17500.0, 10.0], [17600.0, 5.0], [17700.0, 9.0], [17800.0, 2.0], [17900.0, 1.0], [18300.0, 1.0], [18400.0, 1.0], [18200.0, 1.0], [18600.0, 1.0], [18700.0, 1.0], [100.0, 20.0], [200.0, 10.0], [54900.0, 14.0], [55100.0, 45.0], [54800.0, 31.0], [54600.0, 11.0], [55000.0, 17.0], [55200.0, 58.0], [54500.0, 8.0], [54300.0, 1.0], [54200.0, 6.0], [54700.0, 10.0], [54100.0, 1.0], [53900.0, 22.0], [54000.0, 22.0], [55300.0, 141.0], [55600.0, 1.0], [55700.0, 1.0], [55900.0, 3.0], [55800.0, 2.0], [56000.0, 1.0], [300.0, 10.0], [400.0, 1.0], [500.0, 3.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 56000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 762.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 762.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 231.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 254.13164556962002, "minX": 1.75636992E12, "maxY": 709.2958677685945, "series": [{"data": [[1.75636998E12, 254.13164556962002], [1.75636992E12, 709.2958677685945]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636998E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.0, "maxY": 56035.0, "series": [{"data": [[2.0, 56035.0], [3.0, 55993.0], [4.0, 55818.0], [9.0, 54808.0], [10.0, 54321.0], [11.0, 55967.0], [13.0, 54575.5], [14.0, 55963.0], [17.0, 54596.0], [18.0, 55786.0], [19.0, 55688.0], [114.0, 54004.0], [133.0, 54772.38461538462], [132.0, 54265.0], [129.0, 53935.0], [143.0, 54014.0], [173.0, 54965.25], [172.0, 55148.68], [181.0, 55227.4], [179.0, 54051.0], [176.0, 54277.0], [207.0, 53975.0], [214.0, 54906.0], [212.0, 55121.00000000001], [211.0, 55164.62499999999], [223.0, 55202.0], [222.0, 55275.0], [220.0, 53943.0], [219.0, 54799.0], [218.0, 55120.5], [217.0, 53917.0], [216.0, 55148.666666666664], [231.0, 55191.0], [228.0, 55004.0], [227.0, 53996.0], [226.0, 55363.666666666664], [225.0, 55121.0], [224.0, 55358.0], [239.0, 55358.0], [238.0, 55188.5], [237.0, 54744.0], [236.0, 55243.0], [233.0, 55105.5], [232.0, 54233.5], [246.0, 55199.0], [245.0, 55333.0], [244.0, 55362.0], [243.0, 55189.0], [242.0, 55364.0], [241.0, 55201.0], [240.0, 55352.5], [254.0, 54911.0], [253.0, 55132.666666666664], [252.0, 55354.5], [251.0, 55023.5], [248.0, 55162.8], [269.0, 55002.0], [270.0, 54694.0], [268.0, 54713.0], [267.0, 54930.5], [266.0, 55218.0], [265.0, 55019.0], [263.0, 55266.0], [261.0, 55338.0], [259.0, 55215.0], [258.0, 54987.0], [256.0, 54685.0], [275.0, 55253.333333333336], [287.0, 55235.5], [286.0, 55219.0], [283.0, 55275.5], [280.0, 55195.0], [278.0, 55018.75], [279.0, 54883.0], [274.0, 55154.6], [272.0, 54882.333333333336], [301.0, 54962.0], [302.0, 55072.0], [300.0, 54615.0], [298.0, 54684.5], [297.0, 54967.0], [295.0, 55263.0], [293.0, 55012.0], [291.0, 55057.6], [290.0, 55130.666666666664], [318.0, 54964.666666666664], [316.0, 54864.0], [315.0, 55010.0], [314.0, 55302.0], [311.0, 55262.0], [310.0, 54943.666666666664], [308.0, 55155.0], [307.0, 54964.0], [304.0, 55185.666666666664], [334.0, 55325.666666666664], [335.0, 55264.0], [332.0, 54732.333333333336], [322.0, 55109.0], [320.0, 55332.333333333336], [331.0, 55347.0], [329.0, 55123.5], [328.0, 55345.0], [327.0, 55101.5], [326.0, 55352.0], [324.0, 55349.0], [351.0, 55072.0], [347.0, 55175.0], [346.0, 54846.333333333336], [345.0, 55211.0], [343.0, 54422.5], [341.0, 55185.0], [339.0, 55037.0], [338.0, 54997.75], [337.0, 55350.0], [365.0, 55197.6], [367.0, 55340.0], [364.0, 55023.666666666664], [361.0, 55275.0], [359.0, 54869.0], [358.0, 55316.0], [357.0, 55200.25], [353.0, 55289.0], [352.0, 55181.8], [376.0, 55244.0], [382.0, 55180.0], [379.0, 54910.6], [378.0, 55340.0], [377.0, 55179.0], [375.0, 53958.0], [373.0, 55287.0], [372.0, 53992.0], [371.0, 55273.0], [370.0, 54571.0], [396.0, 17662.0], [399.0, 18612.0], [398.0, 18744.0], [397.0, 18284.0], [395.0, 55100.37499999999], [391.0, 55168.0], [390.0, 54794.5], [389.0, 54566.5], [385.0, 55252.75], [384.0, 55001.0], [412.0, 17741.0], [414.0, 17574.0], [415.0, 17246.0], [413.0, 17798.0], [411.0, 17312.0], [408.0, 17782.666666666668], [405.0, 17769.0], [401.0, 17448.0], [400.0, 18426.0], [403.0, 17216.0], [402.0, 18343.0], [419.0, 17747.0], [431.0, 17495.666666666668], [428.0, 17589.333333333332], [425.0, 17684.0], [424.0, 17584.5], [422.0, 17003.0], [420.0, 17662.0], [418.0, 17177.0], [417.0, 17558.0], [416.0, 17738.0], [446.0, 17566.0], [447.0, 17465.0], [445.0, 17313.5], [435.0, 17232.0], [432.0, 17502.0], [443.0, 16488.0], [442.0, 17163.0], [441.0, 17502.0], [440.0, 17425.5], [438.0, 17510.0], [437.0, 17249.0], [436.0, 17539.0], [461.0, 17364.0], [463.0, 17143.5], [460.0, 16897.5], [458.0, 17347.0], [457.0, 17176.0], [456.0, 17335.5], [452.0, 17055.0], [450.0, 16439.0], [448.0, 17444.0], [472.0, 17042.0], [470.0, 17030.0], [469.0, 17181.0], [468.0, 17053.0], [467.0, 17160.0], [466.0, 16900.0], [465.0, 16900.0], [464.0, 17262.0], [595.0, 17003.0], [607.0, 16818.0], [606.0, 16926.5], [601.0, 16963.25], [600.0, 16805.0], [591.0, 17075.0], [582.0, 17101.0], [579.0, 16789.0], [577.0, 17034.0], [584.0, 16883.0], [599.0, 17026.0], [597.0, 17082.0], [596.0, 16696.75], [593.0, 16920.0], [592.0, 16668.0], [638.0, 17067.0], [639.0, 16567.0], [628.0, 16528.0], [625.0, 16707.25], [636.0, 16868.0], [635.0, 17072.0], [634.0, 16013.0], [633.0, 17065.0], [632.0, 16936.0], [614.0, 16762.0], [613.0, 16809.0], [612.0, 16974.0], [609.0, 16650.5], [622.0, 16972.333333333332], [619.0, 16780.666666666668], [616.0, 16473.0], [630.0, 16925.0], [629.0, 16361.0], [657.0, 16857.0], [671.0, 16936.25], [669.0, 16863.0], [667.0, 16915.0], [664.0, 16993.5], [653.0, 16934.2], [645.0, 16658.166666666668], [643.0, 16800.0], [641.0, 16100.0], [640.0, 16795.0], [648.0, 16863.666666666668], [662.0, 16901.5], [661.0, 16919.0], [658.0, 16929.0], [656.0, 16955.0], [689.0, 17051.0], [701.0, 16939.0], [703.0, 16917.0], [688.0, 17096.0], [699.0, 16911.0], [698.0, 16916.5], [697.0, 16923.886597938148], [678.0, 17001.0], [676.0, 16844.0], [674.0, 16787.0], [673.0, 16966.0], [686.0, 16954.5], [685.0, 17062.0], [683.0, 17050.0], [681.0, 16760.0], [680.0, 17064.0], [695.0, 17050.0], [694.0, 16934.0], [691.0, 16919.75], [734.0, 16046.0], [719.0, 8527.5], [718.0, 16923.0], [716.0, 16941.333333333332], [715.0, 17165.0], [714.0, 17037.0], [712.0, 17012.333333333332], [735.0, 15903.0], [721.0, 17165.0], [720.0, 16808.0], [733.0, 16795.0], [732.0, 16841.0], [730.0, 16463.0], [709.0, 16934.5], [708.0, 16760.0], [706.0, 16952.0], [704.0, 16914.5], [727.0, 16909.0], [724.0, 16924.0], [723.0, 16910.0], [722.0, 16905.0], [764.0, 221.0], [741.0, 11338.333333333334], [739.0, 16881.0], [738.0, 17014.0], [737.0, 16959.0], [736.0, 15900.0], [742.0, 16892.0], [751.0, 16824.0], [750.0, 16615.0], [749.0, 16374.0], [748.0, 16839.0], [746.0, 16792.0], [745.0, 16832.0], [744.0, 15966.0], [767.0, 203.0], [752.0, 16691.0], [754.0, 2589.0], [753.0, 16764.0], [757.0, 2901.5], [755.0, 2753.0], [759.0, 2927.0], [758.0, 2552.0], [766.0, 223.0], [765.0, 211.0], [763.0, 226.0], [762.0, 234.0], [761.0, 2207.0], [760.0, 2515.0], [795.0, 137.0], [771.0, 321.0], [783.0, 229.0], [770.0, 277.5], [768.0, 199.0], [782.0, 327.0], [781.0, 309.0], [780.0, 329.0], [779.0, 331.0], [778.0, 242.0], [777.0, 337.0], [776.0, 360.5], [799.0, 115.0], [784.0, 182.0], [786.0, 184.0], [785.0, 184.0], [789.0, 162.0], [788.0, 166.0], [798.0, 115.0], [797.0, 136.5], [794.0, 138.0], [793.0, 141.0], [792.0, 144.0], [774.0, 492.0], [773.0, 504.0], [772.0, 347.0], [791.0, 144.0], [790.0, 145.0], [828.0, 286.5], [806.0, 232.0], [810.0, 754.0], [808.0, 91.0], [813.0, 85.0], [812.0, 82.5], [815.0, 81.0], [801.0, 98.0], [800.0, 110.0], [804.0, 96.0], [802.0, 96.0], [814.0, 84.0], [831.0, 20.5], [817.0, 75.0], [816.0, 79.0], [819.0, 1179.0], [818.0, 1184.0], [821.0, 58.0], [820.0, 1205.0], [823.0, 1213.0], [822.0, 1171.0], [830.0, 303.5], [829.0, 22.0], [827.0, 399.66666666666663], [826.0, 757.5], [825.0, 24.333333333333336], [824.0, 252.2], [807.0, 89.0], [861.0, 9.5], [839.0, 74.66666666666666], [838.0, 537.0], [837.0, 8.0], [836.0, 12.0], [835.0, 12.0], [834.0, 493.0], [833.0, 23.5], [832.0, 35.0], [847.0, 10.5], [846.0, 10.5], [845.0, 219.0], [843.0, 310.75], [844.0, 273.25], [841.0, 8.75], [840.0, 8.333333333333334], [842.0, 12.666666666666666], [854.0, 333.5], [853.0, 9.666666666666666], [852.0, 9.4], [851.0, 328.625], [850.0, 12.166666666666666], [849.0, 10.2], [848.0, 10.0], [855.0, 473.0], [856.0, 157.33333333333337], [863.0, 14.0], [862.0, 12.5], [860.0, 9.0], [859.0, 11.25], [857.0, 11.0], [877.0, 8.5], [866.0, 495.0], [865.0, 19.428571428571427], [864.0, 12.0], [868.0, 613.0], [867.0, 8.0], [872.0, 218.6], [878.0, 10.333333333333334], [879.0, 8.5], [876.0, 12.0], [875.0, 569.5], [874.0, 8.0], [873.0, 10.0], [871.0, 581.0], [869.0, 392.6666666666667], [1.0, 54729.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}, {"data": [[529.5010000000002, 27890.77599999999]], "isOverall": false, "label": "สร้าง Visit-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 879.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3322.366666666667, "minX": 1.75636992E12, "maxY": 20451.933333333334, "series": [{"data": [[1.75636998E12, 4628.083333333333], [1.75636992E12, 20451.933333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75636998E12, 3508.9166666666665], [1.75636992E12, 3322.366666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636998E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 10166.128925619838, "minX": 1.75636992E12, "maxY": 55038.653164556956, "series": [{"data": [[1.75636998E12, 55038.653164556956], [1.75636992E12, 10166.128925619838]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636998E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 10103.413223140498, "minX": 1.75636992E12, "maxY": 55038.61772151899, "series": [{"data": [[1.75636998E12, 55038.61772151899], [1.75636992E12, 10103.413223140498]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636998E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1056.8033057851246, "minX": 1.75636992E12, "maxY": 12249.650632911384, "series": [{"data": [[1.75636998E12, 12249.650632911384], [1.75636992E12, 1056.8033057851246]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636998E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 901.0, "minX": 1.75636992E12, "maxY": 56035.0, "series": [{"data": [[1.75636998E12, 56035.0], [1.75636992E12, 18744.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75636998E12, 55365.0], [1.75636992E12, 17446.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75636998E12, 55963.16], [1.75636992E12, 18363.75]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75636998E12, 55373.2], [1.75636992E12, 17667.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75636998E12, 53917.0], [1.75636992E12, 901.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75636998E12, 55209.0], [1.75636992E12, 16978.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636998E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 5.0, "maxY": 55211.5, "series": [{"data": [[8.0, 2671.0], [308.0, 16959.0], [19.0, 54635.0], [5.0, 18426.0], [45.0, 17510.0], [185.0, 1211.0], [376.0, 55211.5], [54.0, 983.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[185.0, 15.0], [54.0, 11.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 376.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 5.0, "maxY": 55211.5, "series": [{"data": [[8.0, 2671.0], [308.0, 16959.0], [19.0, 54635.0], [5.0, 18426.0], [45.0, 17510.0], [185.0, 1211.0], [376.0, 55211.5], [54.0, 977.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[185.0, 0.0], [54.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 376.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636992E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636992E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636992E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.85, "minX": 1.75636992E12, "maxY": 6.583333333333333, "series": [{"data": [[1.75636992E12, 3.85]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.75636998E12, 6.583333333333333], [1.75636992E12, 6.233333333333333]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636998E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.85, "minX": 1.75636992E12, "maxY": 6.583333333333333, "series": [{"data": [[1.75636992E12, 3.85]], "isOverall": false, "label": "สร้าง Visit-failure", "isController": false}, {"data": [[1.75636998E12, 6.583333333333333], [1.75636992E12, 6.233333333333333]], "isOverall": false, "label": "สร้าง Visit-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636998E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.85, "minX": 1.75636992E12, "maxY": 6.583333333333333, "series": [{"data": [[1.75636998E12, 6.583333333333333], [1.75636992E12, 6.233333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75636992E12, 3.85]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636998E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

