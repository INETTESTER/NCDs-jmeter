/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 16670.0, "series": [{"data": [[0.0, 10.0], [0.1, 11.0], [0.2, 11.0], [0.3, 11.0], [0.4, 12.0], [0.5, 13.0], [0.6, 13.0], [0.7, 13.0], [0.8, 13.0], [0.9, 14.0], [1.0, 14.0], [1.1, 14.0], [1.2, 15.0], [1.3, 15.0], [1.4, 15.0], [1.5, 15.0], [1.6, 16.0], [1.7, 16.0], [1.8, 16.0], [1.9, 16.0], [2.0, 16.0], [2.1, 16.0], [2.2, 16.0], [2.3, 17.0], [2.4, 18.0], [2.5, 18.0], [2.6, 18.0], [2.7, 18.0], [2.8, 19.0], [2.9, 21.0], [3.0, 22.0], [3.1, 22.0], [3.2, 22.0], [3.3, 22.0], [3.4, 23.0], [3.5, 24.0], [3.6, 26.0], [3.7, 28.0], [3.8, 28.0], [3.9, 28.0], [4.0, 33.0], [4.1, 36.0], [4.2, 37.0], [4.3, 37.0], [4.4, 37.0], [4.5, 37.0], [4.6, 38.0], [4.7, 38.0], [4.8, 39.0], [4.9, 40.0], [5.0, 40.0], [5.1, 41.0], [5.2, 41.0], [5.3, 42.0], [5.4, 42.0], [5.5, 42.0], [5.6, 42.0], [5.7, 43.0], [5.8, 44.0], [5.9, 44.0], [6.0, 45.0], [6.1, 47.0], [6.2, 48.0], [6.3, 48.0], [6.4, 50.0], [6.5, 54.0], [6.6, 55.0], [6.7, 58.0], [6.8, 59.0], [6.9, 61.0], [7.0, 69.0], [7.1, 73.0], [7.2, 77.0], [7.3, 81.0], [7.4, 87.0], [7.5, 87.0], [7.6, 87.0], [7.7, 91.0], [7.8, 91.0], [7.9, 98.0], [8.0, 105.0], [8.1, 107.0], [8.2, 144.0], [8.3, 151.0], [8.4, 154.0], [8.5, 154.0], [8.6, 155.0], [8.7, 155.0], [8.8, 156.0], [8.9, 156.0], [9.0, 156.0], [9.1, 156.0], [9.2, 156.0], [9.3, 159.0], [9.4, 160.0], [9.5, 160.0], [9.6, 161.0], [9.7, 166.0], [9.8, 166.0], [9.9, 168.0], [10.0, 168.0], [10.1, 170.0], [10.2, 171.0], [10.3, 173.0], [10.4, 176.0], [10.5, 183.0], [10.6, 188.0], [10.7, 189.0], [10.8, 195.0], [10.9, 196.0], [11.0, 198.0], [11.1, 198.0], [11.2, 204.0], [11.3, 208.0], [11.4, 209.0], [11.5, 209.0], [11.6, 212.0], [11.7, 213.0], [11.8, 213.0], [11.9, 214.0], [12.0, 215.0], [12.1, 220.0], [12.2, 222.0], [12.3, 222.0], [12.4, 227.0], [12.5, 229.0], [12.6, 233.0], [12.7, 236.0], [12.8, 237.0], [12.9, 257.0], [13.0, 260.0], [13.1, 262.0], [13.2, 263.0], [13.3, 265.0], [13.4, 266.0], [13.5, 266.0], [13.6, 268.0], [13.7, 270.0], [13.8, 271.0], [13.9, 271.0], [14.0, 274.0], [14.1, 274.0], [14.2, 277.0], [14.3, 294.0], [14.4, 303.0], [14.5, 355.0], [14.6, 376.0], [14.7, 377.0], [14.8, 455.0], [14.9, 501.0], [15.0, 510.0], [15.1, 516.0], [15.2, 535.0], [15.3, 539.0], [15.4, 556.0], [15.5, 561.0], [15.6, 562.0], [15.7, 569.0], [15.8, 575.0], [15.9, 625.0], [16.0, 687.0], [16.1, 729.0], [16.2, 738.0], [16.3, 739.0], [16.4, 745.0], [16.5, 754.0], [16.6, 767.0], [16.7, 789.0], [16.8, 796.0], [16.9, 803.0], [17.0, 803.0], [17.1, 809.0], [17.2, 813.0], [17.3, 821.0], [17.4, 832.0], [17.5, 847.0], [17.6, 856.0], [17.7, 858.0], [17.8, 859.0], [17.9, 861.0], [18.0, 876.0], [18.1, 883.0], [18.2, 886.0], [18.3, 893.0], [18.4, 905.0], [18.5, 908.0], [18.6, 913.0], [18.7, 913.0], [18.8, 918.0], [18.9, 921.0], [19.0, 924.0], [19.1, 929.0], [19.2, 932.0], [19.3, 946.0], [19.4, 948.0], [19.5, 963.0], [19.6, 963.0], [19.7, 974.0], [19.8, 979.0], [19.9, 985.0], [20.0, 989.0], [20.1, 989.0], [20.2, 989.0], [20.3, 991.0], [20.4, 991.0], [20.5, 993.0], [20.6, 995.0], [20.7, 997.0], [20.8, 1000.0], [20.9, 1002.0], [21.0, 1006.0], [21.1, 1010.0], [21.2, 1011.0], [21.3, 1011.0], [21.4, 1012.0], [21.5, 1012.0], [21.6, 1013.0], [21.7, 1014.0], [21.8, 1020.0], [21.9, 1024.0], [22.0, 1026.0], [22.1, 1026.0], [22.2, 1027.0], [22.3, 1034.0], [22.4, 1034.0], [22.5, 1046.0], [22.6, 1061.0], [22.7, 1070.0], [22.8, 1071.0], [22.9, 1082.0], [23.0, 1092.0], [23.1, 1095.0], [23.2, 1100.0], [23.3, 1103.0], [23.4, 1104.0], [23.5, 1108.0], [23.6, 1110.0], [23.7, 1111.0], [23.8, 1121.0], [23.9, 1132.0], [24.0, 1135.0], [24.1, 1153.0], [24.2, 1154.0], [24.3, 1159.0], [24.4, 1165.0], [24.5, 1165.0], [24.6, 1169.0], [24.7, 1169.0], [24.8, 1176.0], [24.9, 1182.0], [25.0, 1183.0], [25.1, 1187.0], [25.2, 1193.0], [25.3, 1198.0], [25.4, 1199.0], [25.5, 1203.0], [25.6, 1210.0], [25.7, 1210.0], [25.8, 1210.0], [25.9, 1211.0], [26.0, 1211.0], [26.1, 1214.0], [26.2, 1216.0], [26.3, 1217.0], [26.4, 1223.0], [26.5, 1227.0], [26.6, 1227.0], [26.7, 1228.0], [26.8, 1229.0], [26.9, 1231.0], [27.0, 1234.0], [27.1, 1236.0], [27.2, 1242.0], [27.3, 1243.0], [27.4, 1252.0], [27.5, 1253.0], [27.6, 1277.0], [27.7, 1281.0], [27.8, 1281.0], [27.9, 1288.0], [28.0, 1296.0], [28.1, 1298.0], [28.2, 1311.0], [28.3, 1315.0], [28.4, 1316.0], [28.5, 1317.0], [28.6, 1317.0], [28.7, 1322.0], [28.8, 1326.0], [28.9, 1328.0], [29.0, 1330.0], [29.1, 1333.0], [29.2, 1335.0], [29.3, 1337.0], [29.4, 1342.0], [29.5, 1343.0], [29.6, 1352.0], [29.7, 1354.0], [29.8, 1363.0], [29.9, 1376.0], [30.0, 1386.0], [30.1, 1387.0], [30.2, 1389.0], [30.3, 1400.0], [30.4, 1404.0], [30.5, 1406.0], [30.6, 1409.0], [30.7, 1410.0], [30.8, 1410.0], [30.9, 1422.0], [31.0, 1422.0], [31.1, 1424.0], [31.2, 1427.0], [31.3, 1436.0], [31.4, 1436.0], [31.5, 1444.0], [31.6, 1455.0], [31.7, 1467.0], [31.8, 1480.0], [31.9, 1486.0], [32.0, 1487.0], [32.1, 1493.0], [32.2, 1499.0], [32.3, 1501.0], [32.4, 1502.0], [32.5, 1503.0], [32.6, 1504.0], [32.7, 1504.0], [32.8, 1507.0], [32.9, 1526.0], [33.0, 1532.0], [33.1, 1544.0], [33.2, 1545.0], [33.3, 1549.0], [33.4, 1551.0], [33.5, 1555.0], [33.6, 1558.0], [33.7, 1564.0], [33.8, 1564.0], [33.9, 1565.0], [34.0, 1571.0], [34.1, 1576.0], [34.2, 1578.0], [34.3, 1578.0], [34.4, 1580.0], [34.5, 1581.0], [34.6, 1587.0], [34.7, 1587.0], [34.8, 1591.0], [34.9, 1591.0], [35.0, 1594.0], [35.1, 1602.0], [35.2, 1603.0], [35.3, 1607.0], [35.4, 1622.0], [35.5, 1624.0], [35.6, 1629.0], [35.7, 1634.0], [35.8, 1635.0], [35.9, 1636.0], [36.0, 1637.0], [36.1, 1638.0], [36.2, 1639.0], [36.3, 1639.0], [36.4, 1641.0], [36.5, 1647.0], [36.6, 1653.0], [36.7, 1655.0], [36.8, 1656.0], [36.9, 1668.0], [37.0, 1670.0], [37.1, 1679.0], [37.2, 1682.0], [37.3, 1682.0], [37.4, 1684.0], [37.5, 1700.0], [37.6, 1740.0], [37.7, 1747.0], [37.8, 1749.0], [37.9, 1750.0], [38.0, 1755.0], [38.1, 1770.0], [38.2, 1776.0], [38.3, 1776.0], [38.4, 1782.0], [38.5, 1807.0], [38.6, 1809.0], [38.7, 1850.0], [38.8, 1852.0], [38.9, 1885.0], [39.0, 1910.0], [39.1, 1917.0], [39.2, 1927.0], [39.3, 1957.0], [39.4, 1958.0], [39.5, 1970.0], [39.6, 1971.0], [39.7, 1974.0], [39.8, 1982.0], [39.9, 1993.0], [40.0, 2009.0], [40.1, 2014.0], [40.2, 2020.0], [40.3, 2031.0], [40.4, 2037.0], [40.5, 2046.0], [40.6, 2050.0], [40.7, 2091.0], [40.8, 2106.0], [40.9, 2109.0], [41.0, 2110.0], [41.1, 2115.0], [41.2, 2150.0], [41.3, 2154.0], [41.4, 2180.0], [41.5, 2189.0], [41.6, 2190.0], [41.7, 2190.0], [41.8, 2207.0], [41.9, 2234.0], [42.0, 2295.0], [42.1, 2334.0], [42.2, 2339.0], [42.3, 2347.0], [42.4, 2376.0], [42.5, 2401.0], [42.6, 2403.0], [42.7, 2473.0], [42.8, 2516.0], [42.9, 2519.0], [43.0, 2533.0], [43.1, 2563.0], [43.2, 2635.0], [43.3, 2639.0], [43.4, 2641.0], [43.5, 2671.0], [43.6, 2672.0], [43.7, 2676.0], [43.8, 2689.0], [43.9, 2727.0], [44.0, 2728.0], [44.1, 2766.0], [44.2, 2781.0], [44.3, 2812.0], [44.4, 2813.0], [44.5, 2826.0], [44.6, 2838.0], [44.7, 2845.0], [44.8, 2846.0], [44.9, 2857.0], [45.0, 2862.0], [45.1, 2877.0], [45.2, 2883.0], [45.3, 2893.0], [45.4, 2916.0], [45.5, 2926.0], [45.6, 2936.0], [45.7, 2965.0], [45.8, 3109.0], [45.9, 3112.0], [46.0, 3114.0], [46.1, 3144.0], [46.2, 3157.0], [46.3, 3159.0], [46.4, 3165.0], [46.5, 3172.0], [46.6, 3183.0], [46.7, 3186.0], [46.8, 3199.0], [46.9, 3310.0], [47.0, 3382.0], [47.1, 3473.0], [47.2, 3705.0], [47.3, 3722.0], [47.4, 3759.0], [47.5, 3796.0], [47.6, 3855.0], [47.7, 3891.0], [47.8, 4076.0], [47.9, 4094.0], [48.0, 4100.0], [48.1, 4212.0], [48.2, 4446.0], [48.3, 4490.0], [48.4, 4565.0], [48.5, 4607.0], [48.6, 4880.0], [48.7, 5495.0], [48.8, 5587.0], [48.9, 5860.0], [49.0, 5931.0], [49.1, 5965.0], [49.2, 5973.0], [49.3, 6016.0], [49.4, 6192.0], [49.5, 6251.0], [49.6, 6271.0], [49.7, 6272.0], [49.8, 6301.0], [49.9, 6320.0], [50.0, 6350.0], [50.1, 6352.0], [50.2, 6363.0], [50.3, 6364.0], [50.4, 6422.0], [50.5, 6452.0], [50.6, 6529.0], [50.7, 6586.0], [50.8, 6695.0], [50.9, 6724.0], [51.0, 6747.0], [51.1, 6832.0], [51.2, 6839.0], [51.3, 6847.0], [51.4, 6863.0], [51.5, 6915.0], [51.6, 7097.0], [51.7, 7114.0], [51.8, 7123.0], [51.9, 7590.0], [52.0, 7601.0], [52.1, 7606.0], [52.2, 7822.0], [52.3, 7828.0], [52.4, 7947.0], [52.5, 7968.0], [52.6, 7991.0], [52.7, 8031.0], [52.8, 8054.0], [52.9, 8093.0], [53.0, 8101.0], [53.1, 8121.0], [53.2, 8147.0], [53.3, 8148.0], [53.4, 8170.0], [53.5, 8194.0], [53.6, 8220.0], [53.7, 8234.0], [53.8, 8245.0], [53.9, 8249.0], [54.0, 8257.0], [54.1, 8271.0], [54.2, 8272.0], [54.3, 8297.0], [54.4, 8405.0], [54.5, 8475.0], [54.6, 8492.0], [54.7, 8509.0], [54.8, 8515.0], [54.9, 8520.0], [55.0, 8577.0], [55.1, 8581.0], [55.2, 8586.0], [55.3, 8592.0], [55.4, 8614.0], [55.5, 8624.0], [55.6, 8710.0], [55.7, 8760.0], [55.8, 8791.0], [55.9, 8836.0], [56.0, 8847.0], [56.1, 8850.0], [56.2, 8877.0], [56.3, 8893.0], [56.4, 8900.0], [56.5, 8904.0], [56.6, 8909.0], [56.7, 8910.0], [56.8, 8911.0], [56.9, 8916.0], [57.0, 8921.0], [57.1, 8922.0], [57.2, 8924.0], [57.3, 8926.0], [57.4, 8934.0], [57.5, 8937.0], [57.6, 8939.0], [57.7, 8947.0], [57.8, 8956.0], [57.9, 8990.0], [58.0, 9026.0], [58.1, 9046.0], [58.2, 9048.0], [58.3, 9053.0], [58.4, 9061.0], [58.5, 9108.0], [58.6, 9127.0], [58.7, 9139.0], [58.8, 9191.0], [58.9, 9201.0], [59.0, 9261.0], [59.1, 9267.0], [59.2, 9270.0], [59.3, 9274.0], [59.4, 9285.0], [59.5, 9290.0], [59.6, 9291.0], [59.7, 9294.0], [59.8, 9301.0], [59.9, 9313.0], [60.0, 9327.0], [60.1, 9341.0], [60.2, 9352.0], [60.3, 9367.0], [60.4, 9392.0], [60.5, 9416.0], [60.6, 9439.0], [60.7, 9441.0], [60.8, 9447.0], [60.9, 9466.0], [61.0, 9504.0], [61.1, 9504.0], [61.2, 9516.0], [61.3, 9525.0], [61.4, 9531.0], [61.5, 9576.0], [61.6, 9581.0], [61.7, 9605.0], [61.8, 9659.0], [61.9, 9686.0], [62.0, 9716.0], [62.1, 9731.0], [62.2, 9752.0], [62.3, 9765.0], [62.4, 9781.0], [62.5, 9788.0], [62.6, 9806.0], [62.7, 9807.0], [62.8, 9822.0], [62.9, 9823.0], [63.0, 9823.0], [63.1, 9824.0], [63.2, 9845.0], [63.3, 9847.0], [63.4, 9859.0], [63.5, 9861.0], [63.6, 9875.0], [63.7, 9888.0], [63.8, 9894.0], [63.9, 9901.0], [64.0, 9914.0], [64.1, 9919.0], [64.2, 10022.0], [64.3, 10031.0], [64.4, 10040.0], [64.5, 10043.0], [64.6, 10047.0], [64.7, 10057.0], [64.8, 10059.0], [64.9, 10062.0], [65.0, 10082.0], [65.1, 10090.0], [65.2, 10098.0], [65.3, 10099.0], [65.4, 10119.0], [65.5, 10135.0], [65.6, 10138.0], [65.7, 10139.0], [65.8, 10152.0], [65.9, 10171.0], [66.0, 10214.0], [66.1, 10246.0], [66.2, 10254.0], [66.3, 10295.0], [66.4, 10299.0], [66.5, 10312.0], [66.6, 10314.0], [66.7, 10335.0], [66.8, 10379.0], [66.9, 10399.0], [67.0, 10403.0], [67.1, 10408.0], [67.2, 10408.0], [67.3, 10421.0], [67.4, 10425.0], [67.5, 10429.0], [67.6, 10433.0], [67.7, 10437.0], [67.8, 10439.0], [67.9, 10474.0], [68.0, 10485.0], [68.1, 10486.0], [68.2, 10494.0], [68.3, 10524.0], [68.4, 10547.0], [68.5, 10595.0], [68.6, 10676.0], [68.7, 10691.0], [68.8, 10698.0], [68.9, 10712.0], [69.0, 10747.0], [69.1, 10756.0], [69.2, 10786.0], [69.3, 10799.0], [69.4, 10811.0], [69.5, 10823.0], [69.6, 10829.0], [69.7, 10839.0], [69.8, 10882.0], [69.9, 10945.0], [70.0, 10951.0], [70.1, 10978.0], [70.2, 10985.0], [70.3, 11022.0], [70.4, 11147.0], [70.5, 11209.0], [70.6, 11225.0], [70.7, 11232.0], [70.8, 11246.0], [70.9, 11288.0], [71.0, 11297.0], [71.1, 11304.0], [71.2, 11305.0], [71.3, 11328.0], [71.4, 11328.0], [71.5, 11338.0], [71.6, 11345.0], [71.7, 11377.0], [71.8, 11388.0], [71.9, 11400.0], [72.0, 11408.0], [72.1, 11436.0], [72.2, 11437.0], [72.3, 11456.0], [72.4, 11459.0], [72.5, 11490.0], [72.6, 11490.0], [72.7, 11530.0], [72.8, 11555.0], [72.9, 11559.0], [73.0, 11560.0], [73.1, 11575.0], [73.2, 11581.0], [73.3, 11584.0], [73.4, 11592.0], [73.5, 11671.0], [73.6, 11672.0], [73.7, 11682.0], [73.8, 11690.0], [73.9, 11704.0], [74.0, 11722.0], [74.1, 11731.0], [74.2, 11736.0], [74.3, 11742.0], [74.4, 11777.0], [74.5, 11792.0], [74.6, 11800.0], [74.7, 11804.0], [74.8, 11890.0], [74.9, 11902.0], [75.0, 11914.0], [75.1, 11916.0], [75.2, 11918.0], [75.3, 11929.0], [75.4, 11930.0], [75.5, 11947.0], [75.6, 11973.0], [75.7, 11983.0], [75.8, 11988.0], [75.9, 11990.0], [76.0, 12012.0], [76.1, 12026.0], [76.2, 12062.0], [76.3, 12077.0], [76.4, 12098.0], [76.5, 12117.0], [76.6, 12141.0], [76.7, 12161.0], [76.8, 12190.0], [76.9, 12202.0], [77.0, 12254.0], [77.1, 12259.0], [77.2, 12270.0], [77.3, 12299.0], [77.4, 12322.0], [77.5, 12329.0], [77.6, 12342.0], [77.7, 12355.0], [77.8, 12371.0], [77.9, 12384.0], [78.0, 12404.0], [78.1, 12416.0], [78.2, 12423.0], [78.3, 12433.0], [78.4, 12437.0], [78.5, 12447.0], [78.6, 12475.0], [78.7, 12485.0], [78.8, 12512.0], [78.9, 12518.0], [79.0, 12534.0], [79.1, 12541.0], [79.2, 12545.0], [79.3, 12551.0], [79.4, 12571.0], [79.5, 12574.0], [79.6, 12576.0], [79.7, 12577.0], [79.8, 12653.0], [79.9, 12661.0], [80.0, 12717.0], [80.1, 12728.0], [80.2, 12750.0], [80.3, 12768.0], [80.4, 12789.0], [80.5, 12791.0], [80.6, 12827.0], [80.7, 12837.0], [80.8, 12838.0], [80.9, 12839.0], [81.0, 12860.0], [81.1, 12876.0], [81.2, 12902.0], [81.3, 12906.0], [81.4, 12933.0], [81.5, 12940.0], [81.6, 12948.0], [81.7, 12959.0], [81.8, 12993.0], [81.9, 13015.0], [82.0, 13018.0], [82.1, 13120.0], [82.2, 13121.0], [82.3, 13144.0], [82.4, 13145.0], [82.5, 13152.0], [82.6, 13184.0], [82.7, 13188.0], [82.8, 13193.0], [82.9, 13208.0], [83.0, 13226.0], [83.1, 13230.0], [83.2, 13256.0], [83.3, 13257.0], [83.4, 13264.0], [83.5, 13276.0], [83.6, 13287.0], [83.7, 13302.0], [83.8, 13303.0], [83.9, 13336.0], [84.0, 13363.0], [84.1, 13368.0], [84.2, 13429.0], [84.3, 13443.0], [84.4, 13450.0], [84.5, 13460.0], [84.6, 13493.0], [84.7, 13501.0], [84.8, 13507.0], [84.9, 13524.0], [85.0, 13596.0], [85.1, 13600.0], [85.2, 13602.0], [85.3, 13660.0], [85.4, 13714.0], [85.5, 13732.0], [85.6, 13734.0], [85.7, 13736.0], [85.8, 13754.0], [85.9, 13766.0], [86.0, 13766.0], [86.1, 13805.0], [86.2, 13808.0], [86.3, 13808.0], [86.4, 13862.0], [86.5, 13872.0], [86.6, 13883.0], [86.7, 13895.0], [86.8, 13911.0], [86.9, 13911.0], [87.0, 13923.0], [87.1, 13929.0], [87.2, 13934.0], [87.3, 13937.0], [87.4, 13957.0], [87.5, 13961.0], [87.6, 13962.0], [87.7, 13970.0], [87.8, 13974.0], [87.9, 14027.0], [88.0, 14107.0], [88.1, 14148.0], [88.2, 14181.0], [88.3, 14186.0], [88.4, 14203.0], [88.5, 14217.0], [88.6, 14220.0], [88.7, 14229.0], [88.8, 14236.0], [88.9, 14242.0], [89.0, 14274.0], [89.1, 14279.0], [89.2, 14287.0], [89.3, 14292.0], [89.4, 14314.0], [89.5, 14320.0], [89.6, 14322.0], [89.7, 14338.0], [89.8, 14346.0], [89.9, 14366.0], [90.0, 14402.0], [90.1, 14446.0], [90.2, 14448.0], [90.3, 14452.0], [90.4, 14455.0], [90.5, 14456.0], [90.6, 14464.0], [90.7, 14469.0], [90.8, 14493.0], [90.9, 14495.0], [91.0, 14496.0], [91.1, 14497.0], [91.2, 14498.0], [91.3, 14500.0], [91.4, 14507.0], [91.5, 14540.0], [91.6, 14545.0], [91.7, 14560.0], [91.8, 14571.0], [91.9, 14588.0], [92.0, 14592.0], [92.1, 14600.0], [92.2, 14601.0], [92.3, 14609.0], [92.4, 14610.0], [92.5, 14610.0], [92.6, 14613.0], [92.7, 14633.0], [92.8, 14637.0], [92.9, 14657.0], [93.0, 14677.0], [93.1, 14688.0], [93.2, 14702.0], [93.3, 14706.0], [93.4, 14712.0], [93.5, 14714.0], [93.6, 14716.0], [93.7, 14717.0], [93.8, 14728.0], [93.9, 14741.0], [94.0, 14774.0], [94.1, 14787.0], [94.2, 14788.0], [94.3, 14789.0], [94.4, 14790.0], [94.5, 14798.0], [94.6, 14821.0], [94.7, 14821.0], [94.8, 14822.0], [94.9, 14830.0], [95.0, 14831.0], [95.1, 14834.0], [95.2, 14839.0], [95.3, 14846.0], [95.4, 14853.0], [95.5, 14859.0], [95.6, 14867.0], [95.7, 14873.0], [95.8, 14893.0], [95.9, 14911.0], [96.0, 14919.0], [96.1, 14925.0], [96.2, 14936.0], [96.3, 14967.0], [96.4, 14982.0], [96.5, 14994.0], [96.6, 15042.0], [96.7, 15049.0], [96.8, 15050.0], [96.9, 15063.0], [97.0, 15071.0], [97.1, 15075.0], [97.2, 15084.0], [97.3, 15094.0], [97.4, 15123.0], [97.5, 15133.0], [97.6, 15144.0], [97.7, 15146.0], [97.8, 15146.0], [97.9, 15157.0], [98.0, 15161.0], [98.1, 15167.0], [98.2, 15241.0], [98.3, 15267.0], [98.4, 15314.0], [98.5, 15319.0], [98.6, 15326.0], [98.7, 15480.0], [98.8, 15529.0], [98.9, 15714.0], [99.0, 15846.0], [99.1, 16130.0], [99.2, 16308.0], [99.3, 16332.0], [99.4, 16410.0], [99.5, 16514.0], [99.6, 16553.0], [99.7, 16593.0], [99.8, 16598.0], [99.9, 16670.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 80.0, "series": [{"data": [[0.0, 80.0], [100.0, 32.0], [200.0, 32.0], [300.0, 4.0], [400.0, 1.0], [500.0, 10.0], [600.0, 2.0], [700.0, 8.0], [800.0, 15.0], [900.0, 23.0], [1000.0, 24.0], [1100.0, 23.0], [1200.0, 27.0], [1300.0, 21.0], [1400.0, 20.0], [1500.0, 28.0], [1600.0, 24.0], [1700.0, 10.0], [1800.0, 5.0], [1900.0, 10.0], [2000.0, 8.0], [2100.0, 10.0], [2200.0, 3.0], [2300.0, 4.0], [2400.0, 3.0], [2500.0, 4.0], [2600.0, 7.0], [2700.0, 4.0], [2800.0, 11.0], [2900.0, 4.0], [3100.0, 11.0], [3300.0, 2.0], [3400.0, 1.0], [3700.0, 4.0], [3800.0, 2.0], [4000.0, 2.0], [4100.0, 1.0], [4200.0, 1.0], [4400.0, 2.0], [4500.0, 1.0], [4600.0, 1.0], [4800.0, 1.0], [5400.0, 1.0], [5500.0, 1.0], [5800.0, 1.0], [5900.0, 3.0], [6000.0, 1.0], [6100.0, 1.0], [6300.0, 6.0], [6200.0, 3.0], [6500.0, 2.0], [6600.0, 1.0], [6400.0, 2.0], [6800.0, 4.0], [6700.0, 2.0], [6900.0, 1.0], [7000.0, 1.0], [7100.0, 2.0], [7500.0, 1.0], [7600.0, 2.0], [7800.0, 2.0], [7900.0, 3.0], [8100.0, 6.0], [8000.0, 3.0], [8200.0, 8.0], [8400.0, 3.0], [8500.0, 7.0], [8600.0, 2.0], [8700.0, 3.0], [8900.0, 16.0], [8800.0, 5.0], [9000.0, 5.0], [9100.0, 4.0], [9200.0, 9.0], [9300.0, 7.0], [9400.0, 5.0], [9500.0, 7.0], [9700.0, 6.0], [9600.0, 3.0], [9800.0, 13.0], [9900.0, 3.0], [10000.0, 12.0], [10100.0, 6.0], [10200.0, 5.0], [10300.0, 5.0], [10400.0, 13.0], [10500.0, 3.0], [10600.0, 3.0], [10700.0, 5.0], [11000.0, 1.0], [10800.0, 5.0], [10900.0, 4.0], [11100.0, 1.0], [11200.0, 6.0], [11300.0, 8.0], [11500.0, 8.0], [11400.0, 8.0], [11700.0, 7.0], [11600.0, 4.0], [11800.0, 4.0], [11900.0, 11.0], [12000.0, 5.0], [12100.0, 4.0], [12200.0, 5.0], [12300.0, 6.0], [12400.0, 8.0], [12500.0, 10.0], [12700.0, 6.0], [12600.0, 2.0], [12800.0, 6.0], [13000.0, 2.0], [12900.0, 7.0], [13100.0, 8.0], [13200.0, 8.0], [13300.0, 5.0], [13500.0, 4.0], [13400.0, 5.0], [13700.0, 7.0], [13600.0, 3.0], [13800.0, 7.0], [13900.0, 11.0], [14100.0, 4.0], [14200.0, 10.0], [14300.0, 6.0], [14000.0, 1.0], [14400.0, 13.0], [14500.0, 8.0], [14600.0, 11.0], [14700.0, 14.0], [14800.0, 13.0], [14900.0, 7.0], [15000.0, 8.0], [15100.0, 8.0], [15300.0, 3.0], [15200.0, 2.0], [15400.0, 1.0], [15500.0, 1.0], [15700.0, 1.0], [15800.0, 1.0], [16100.0, 1.0], [16300.0, 2.0], [16500.0, 4.0], [16400.0, 1.0], [16600.0, 1.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 678.0, "series": [{"data": [[0.0, 7.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 164.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 678.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 151.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 499.5070000000002, "minX": 1.7563713E12, "maxY": 499.5070000000002, "series": [{"data": [[1.7563713E12, 499.5070000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563713E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.0, "maxY": 16593.0, "series": [{"data": [[4.0, 16531.333333333332], [6.0, 14519.0], [7.0, 14314.0], [9.0, 15643.0], [10.0, 16593.0], [11.0, 16553.0], [12.0, 16308.0], [13.0, 14448.0], [14.0, 14571.0], [15.0, 14402.0], [16.0, 14497.0], [17.0, 14107.0], [19.0, 15349.0], [20.0, 14279.0], [21.0, 13937.0], [22.0, 14320.0], [23.0, 14287.0], [24.0, 14027.0], [25.0, 13970.0], [26.0, 16130.0], [27.0, 15846.0], [28.0, 13256.0], [29.0, 13808.0], [30.0, 15714.0], [31.0, 15529.0], [33.0, 15314.0], [32.0, 13226.0], [34.0, 15480.0], [37.0, 14671.666666666666], [38.0, 15167.0], [40.0, 13366.0], [47.0, 14152.2], [46.0, 14243.0], [53.0, 15146.0], [52.0, 14571.6], [61.0, 14671.125], [67.0, 14968.0], [66.0, 14366.333333333334], [65.0, 14967.0], [68.0, 14994.0], [74.0, 14498.0], [79.0, 14829.333333333334], [76.0, 14842.5], [83.0, 14830.0], [82.0, 14845.333333333334], [85.0, 14821.0], [84.0, 14853.0], [90.0, 14790.0], [89.0, 14717.0], [88.0, 14774.0], [94.0, 14706.0], [92.0, 14788.0], [98.0, 12993.0], [97.0, 14362.0], [103.0, 14031.0], [100.0, 13726.0], [106.0, 14610.5], [104.0, 14637.0], [111.0, 14600.0], [110.0, 14613.0], [108.0, 13489.5], [114.0, 14609.0], [113.0, 13409.5], [112.0, 12574.0], [118.0, 14338.0], [117.0, 13427.5], [116.0, 14610.0], [123.0, 12534.0], [122.0, 11983.0], [121.0, 14452.0], [120.0, 13526.0], [125.0, 13460.5], [135.0, 12551.0], [134.0, 14455.5], [132.0, 13573.0], [130.0, 14446.0], [129.0, 13548.75], [142.0, 14394.0], [139.0, 13332.0], [137.0, 12342.0], [136.0, 14346.0], [151.0, 14229.0], [150.0, 14220.0], [149.0, 14242.0], [148.0, 14464.0], [147.0, 14469.0], [146.0, 14236.0], [145.0, 14500.0], [144.0, 14401.666666666666], [158.0, 13934.0], [157.0, 13042.0], [154.0, 13632.333333333334], [166.0, 13805.0], [165.0, 13872.5], [163.0, 13974.0], [162.0, 11973.0], [161.0, 13808.0], [160.0, 13891.5], [173.0, 11297.0], [172.0, 13039.5], [170.0, 13895.0], [169.0, 12630.5], [168.0, 13929.0], [182.0, 12529.5], [180.0, 13957.0], [179.0, 13660.0], [177.0, 13734.0], [176.0, 13134.666666666666], [190.0, 12672.0], [188.0, 13596.0], [187.0, 13815.666666666666], [186.0, 13714.0], [184.0, 13751.0], [199.0, 11530.0], [198.0, 11671.0], [196.0, 13460.0], [195.0, 13450.0], [194.0, 12611.5], [192.0, 12663.0], [207.0, 13368.0], [206.0, 11348.0], [204.0, 11377.0], [203.0, 12490.0], [201.0, 13414.5], [200.0, 13443.0], [215.0, 11437.0], [212.0, 13302.0], [211.0, 13260.5], [209.0, 13253.0], [223.0, 11232.0], [222.0, 11209.0], [221.0, 10823.0], [220.0, 13144.0], [219.0, 11225.0], [218.0, 13184.0], [217.0, 13120.0], [216.0, 12607.666666666666], [231.0, 12902.0], [230.0, 13152.0], [229.0, 11885.0], [227.0, 13188.0], [226.0, 13015.0], [225.0, 12093.0], [239.0, 11886.0], [237.0, 12837.0], [236.0, 12839.0], [235.0, 12933.0], [234.0, 12768.0], [233.0, 12891.0], [247.0, 12577.0], [246.0, 12717.0], [245.0, 10882.0], [244.0, 10831.5], [242.0, 12791.0], [241.0, 12860.0], [240.0, 13018.0], [255.0, 12355.0], [254.0, 12416.0], [253.0, 12329.0], [252.0, 12545.0], [251.0, 12573.5], [249.0, 12728.0], [248.0, 12661.0], [270.0, 12062.0], [271.0, 11930.0], [269.0, 12077.0], [268.0, 12026.0], [267.0, 11952.0], [265.0, 12098.0], [264.0, 12141.0], [263.0, 12161.0], [257.0, 10295.0], [256.0, 12299.0], [259.0, 12190.0], [258.0, 12270.0], [262.0, 12371.0], [261.0, 12202.0], [260.0, 10254.0], [286.0, 11672.0], [287.0, 11777.0], [285.0, 11741.0], [275.0, 11988.0], [274.0, 11890.0], [273.0, 11924.5], [283.0, 11800.0], [282.0, 11804.0], [281.0, 11990.0], [280.0, 11682.0], [279.0, 11918.0], [278.0, 11929.0], [277.0, 11916.0], [276.0, 11914.0], [301.0, 11304.0], [303.0, 11451.5], [300.0, 11400.0], [291.0, 11704.0], [290.0, 9788.0], [289.0, 11584.0], [288.0, 11736.0], [299.0, 11388.0], [298.0, 11436.0], [297.0, 11490.0], [296.0, 11731.0], [295.0, 11490.0], [294.0, 11555.0], [293.0, 11581.0], [292.0, 11592.0], [316.0, 10889.0], [319.0, 10494.0], [318.0, 10698.0], [317.0, 10691.0], [314.0, 10790.666666666666], [311.0, 10799.0], [305.0, 9686.0], [304.0, 11559.0], [307.0, 11305.0], [306.0, 11147.0], [310.0, 10829.0], [309.0, 10985.0], [308.0, 10978.0], [333.0, 10062.0], [335.0, 10341.5], [332.0, 10299.0], [322.0, 10474.0], [321.0, 10433.0], [320.0, 10676.0], [331.0, 10547.0], [330.0, 10312.0], [329.0, 10425.0], [328.0, 10439.0], [327.0, 10522.0], [324.0, 10461.5], [351.0, 10214.0], [350.0, 10314.0], [349.0, 10204.0], [346.0, 10045.0], [344.0, 10261.857142857143], [337.0, 10425.0], [364.0, 9832.0], [367.0, 10022.0], [366.0, 10047.0], [365.0, 8297.0], [362.0, 9967.0], [357.0, 9979.5], [355.0, 10099.0], [354.0, 10119.0], [353.0, 10135.0], [352.0, 10057.0], [382.0, 9729.6], [377.0, 9833.25], [373.0, 9888.0], [372.0, 9740.666666666666], [369.0, 9709.0], [398.0, 9525.0], [397.0, 9139.0], [396.0, 9578.5], [394.0, 8031.0], [393.0, 9765.0], [392.0, 9781.0], [391.0, 9487.0], [387.0, 9675.2], [414.0, 9115.5], [410.0, 9084.333333333334], [407.0, 9141.5], [405.0, 9301.5], [401.0, 9269.666666666666], [429.0, 8843.0], [427.0, 9287.5], [425.0, 9095.666666666666], [419.0, 9067.8], [442.0, 8850.0], [440.0, 8816.0], [437.0, 9054.0], [434.0, 8943.5], [432.0, 9146.0], [462.0, 8416.0], [459.0, 8454.333333333334], [456.0, 8486.0], [453.0, 8354.5], [451.0, 8710.0], [450.0, 8759.25], [479.0, 7606.0], [478.0, 8073.666666666667], [475.0, 8266.666666666666], [472.0, 8147.0], [471.0, 8107.8], [466.0, 8098.0], [464.0, 8097.0], [492.0, 6710.333333333333], [494.0, 6363.0], [495.0, 6422.0], [493.0, 6839.0], [489.0, 6863.0], [488.0, 7014.5], [484.0, 6747.0], [481.0, 7595.5], [483.0, 6915.0], [482.0, 7822.0], [509.0, 5860.0], [510.0, 6016.0], [508.0, 6285.5], [506.0, 6172.333333333333], [503.0, 6364.0], [502.0, 6350.0], [501.0, 6586.0], [500.0, 6271.5], [498.0, 6508.333333333333], [537.0, 1026.0], [542.0, 1012.0], [543.0, 1012.0], [529.0, 3705.0], [528.0, 3855.0], [531.0, 1199.0], [530.0, 1013.0], [533.0, 3114.0], [532.0, 1555.0], [541.0, 1011.0], [540.0, 1012.5], [538.0, 1024.0], [536.0, 3382.0], [519.0, 4076.0], [518.0, 4490.0], [517.0, 4880.0], [516.0, 4565.0], [515.0, 4607.0], [514.0, 5495.0], [513.0, 5931.0], [512.0, 5776.0], [527.0, 3891.0], [526.0, 4094.0], [525.0, 4100.0], [524.0, 3722.0], [523.0, 3796.0], [522.0, 3759.0], [521.0, 4212.0], [520.0, 4446.0], [535.0, 3112.0], [534.0, 3473.0], [569.0, 209.0], [574.0, 97.0], [575.0, 198.0], [560.0, 3157.0], [562.0, 1234.0], [561.0, 3144.0], [565.0, 2727.0], [564.0, 2134.0], [572.0, 2037.0], [571.0, 2639.0], [570.0, 156.0], [568.0, 189.0], [550.0, 2812.0], [549.0, 3186.0], [548.0, 3199.0], [547.0, 1467.0], [546.0, 2926.0], [545.0, 3310.0], [544.0, 2965.0], [559.0, 3165.0], [558.0, 3172.0], [557.0, 1229.0], [556.0, 3159.0], [555.0, 2826.0], [554.0, 1277.0], [553.0, 2947.3333333333335], [567.0, 2672.0], [566.0, 2671.0], [604.0, 222.0], [605.0, 1275.5], [602.0, 1463.0], [601.0, 277.0], [600.0, 2916.0], [583.0, 156.0], [582.0, 153.5], [580.0, 160.0], [579.0, 158.0], [577.0, 176.0], [576.0, 1242.0], [591.0, 1169.0], [590.0, 1875.5], [586.0, 2936.0], [585.0, 154.0], [584.0, 156.0], [599.0, 2193.6666666666665], [596.0, 2847.5], [595.0, 69.0], [593.0, 997.0], [634.0, 2862.0], [638.0, 929.0], [639.0, 274.0], [624.0, 963.0], [626.0, 40.0], [625.0, 2533.0], [629.0, 1750.0], [628.0, 61.0], [637.0, 1082.0], [636.0, 1006.0], [635.0, 886.0], [633.0, 1535.25], [614.0, 41.0], [613.0, 49.0], [611.0, 38.0], [610.0, 1132.0], [609.0, 1252.6666666666665], [608.0, 38.0], [623.0, 42.0], [621.0, 39.0], [620.0, 42.0], [619.0, 42.75], [617.0, 45.0], [631.0, 1043.0], [630.0, 2877.0], [669.0, 523.5], [660.0, 234.5], [670.0, 2403.0], [656.0, 229.0], [658.0, 237.0], [657.0, 222.0], [667.0, 213.0], [666.0, 604.5], [665.0, 209.0], [647.0, 274.0], [646.0, 265.0], [645.0, 268.0], [644.0, 271.0], [643.0, 257.0], [642.0, 270.0], [641.0, 263.0], [640.0, 266.0], [655.0, 1026.0], [653.0, 1907.5], [651.0, 263.0], [649.0, 262.0], [648.0, 213.0], [663.0, 212.0], [662.0, 227.0], [661.0, 214.0], [696.0, 166.0], [700.0, 159.0], [703.0, 2635.0], [690.0, 168.0], [689.0, 1568.5], [692.0, 179.5], [691.0, 183.0], [702.0, 876.0], [701.0, 155.0], [699.0, 107.0], [698.0, 821.0], [697.0, 170.0], [687.0, 924.0], [672.0, 2317.5], [675.0, 1446.5], [673.0, 979.0], [677.0, 198.0], [676.0, 208.0], [679.0, 809.0], [678.0, 196.0], [686.0, 144.0], [684.0, 156.0], [683.0, 195.0], [682.0, 160.0], [681.0, 166.0], [680.0, 558.0], [695.0, 858.5], [693.0, 2676.0], [729.0, 48.0], [733.0, 1549.0], [734.0, 37.0], [723.0, 1681.5], [721.0, 858.5], [725.0, 59.0], [724.0, 796.0], [732.0, 37.0], [731.0, 36.0], [730.0, 37.0], [728.0, 43.0], [711.0, 750.3333333333334], [710.0, 91.0], [707.0, 105.0], [706.0, 2641.0], [705.0, 812.0], [719.0, 471.0], [717.0, 77.0], [716.0, 87.0], [715.0, 729.0], [714.0, 1068.5], [712.0, 2106.0], [727.0, 47.0], [726.0, 2207.0], [761.0, 16.0], [766.0, 87.0], [767.0, 15.0], [752.0, 16.0], [754.0, 1993.0], [753.0, 1343.0], [756.0, 12.0], [755.0, 58.0], [765.0, 91.0], [764.0, 22.0], [763.0, 23.0], [760.0, 1333.0], [742.0, 1177.0], [740.0, 23.0], [739.0, 19.5], [737.0, 1656.0], [736.0, 1024.0], [751.0, 17.0], [750.0, 1504.0], [749.0, 16.0], [748.0, 16.0], [747.0, 13.0], [746.0, 11.0], [745.0, 738.0], [744.0, 1002.0], [759.0, 1263.5], [757.0, 55.0], [775.0, 2150.0], [796.0, 17.5], [799.0, 1386.0], [785.0, 1852.0], [784.0, 28.0], [787.0, 2347.0], [786.0, 1503.0], [798.0, 1970.0], [797.0, 2295.0], [795.0, 16.0], [793.0, 18.0], [792.0, 18.0], [774.0, 16.0], [773.0, 16.0], [772.0, 12.0], [771.0, 15.0], [770.0, 10.0], [769.0, 13.0], [783.0, 18.0], [782.0, 18.0], [781.0, 1893.0], [779.0, 1885.0], [778.0, 12.5], [776.0, 19.0], [791.0, 15.0], [789.0, 47.5], [794.0, 14.0], [817.0, 1636.0], [829.0, 1639.0], [830.0, 1650.3333333333333], [816.0, 1317.0], [828.0, 2180.0], [827.0, 1639.0], [825.0, 1659.6666666666667], [804.0, 1252.0], [803.0, 1228.0], [801.0, 1428.5], [812.0, 2154.0], [811.0, 1647.0], [810.0, 1736.5], [822.0, 1662.6666666666667], [820.0, 1813.3333333333333], [819.0, 1637.0], [850.0, 1351.5], [839.0, 1157.5], [846.0, 2091.0], [834.0, 1769.0], [832.0, 1692.5], [838.0, 1591.0], [837.0, 1759.6666666666667], [845.0, 1576.0], [844.0, 1578.0], [843.0, 1243.0], [842.0, 1296.5], [841.0, 2109.0], [860.0, 1742.25], [857.0, 1558.0], [856.0, 1971.0], [855.0, 1564.0], [854.0, 1198.0], [852.0, 1210.5], [849.0, 1532.0], [893.0, 1360.0], [867.0, 874.5], [865.0, 2014.0], [869.0, 1809.0], [868.0, 1398.0], [875.0, 1534.0], [874.0, 666.0], [873.0, 1429.0], [894.0, 1514.6666666666667], [895.0, 1127.3333333333335], [892.0, 1070.0], [871.0, 1488.6666666666667], [885.0, 1335.0], [884.0, 1337.0], [883.0, 1387.0], [882.0, 1382.0], [922.0, 1219.5], [927.0, 1470.0], [923.0, 803.0], [924.0, 1306.25], [925.0, 1629.0], [911.0, 1182.0], [898.0, 1176.0], [897.0, 1325.5], [901.0, 1398.3333333333333], [899.0, 1747.0], [903.0, 1755.0], [902.0, 1498.8333333333333], [910.0, 1309.6], [909.0, 1214.0], [908.0, 1214.0], [907.0, 1406.0], [905.0, 1300.3333333333333], [919.0, 1111.0], [918.0, 1216.0], [917.0, 1178.5], [916.0, 1682.0], [914.0, 1352.0], [912.0, 1432.0], [956.0, 963.0], [935.0, 637.6666666666666], [933.0, 995.0], [931.0, 1587.0], [930.0, 1587.0], [929.0, 625.0], [928.0, 1594.0], [939.0, 501.0], [937.0, 1271.0], [936.0, 1564.0], [941.0, 1211.75], [942.0, 377.0], [946.0, 993.3333333333334], [945.0, 1427.0], [944.0, 1041.2], [959.0, 906.5], [957.0, 1455.0], [955.0, 1229.25], [954.0, 1480.0], [953.0, 1328.0], [951.0, 1225.6666666666667], [948.0, 1499.0], [966.0, 376.0], [965.0, 856.0], [964.0, 931.5], [962.0, 931.2], [961.0, 824.6666666666666], [960.0, 1354.0], [1.0, 14728.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[499.50399999999945, 6557.267999999999]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 966.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 20283.966666666667, "minX": 1.7563713E12, "maxY": 6108754.0, "series": [{"data": [[1.7563713E12, 20283.966666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7563713E12, 6108754.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563713E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 6557.267999999999, "minX": 1.7563713E12, "maxY": 6557.267999999999, "series": [{"data": [[1.7563713E12, 6557.267999999999]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563713E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 6532.537000000001, "minX": 1.7563713E12, "maxY": 6532.537000000001, "series": [{"data": [[1.7563713E12, 6532.537000000001]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563713E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1899.6369999999986, "minX": 1.7563713E12, "maxY": 1899.6369999999986, "series": [{"data": [[1.7563713E12, 1899.6369999999986]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563713E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 271.0, "minX": 1.7563713E12, "maxY": 16670.0, "series": [{"data": [[1.7563713E12, 16670.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7563713E12, 14540.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7563713E12, 16219.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7563713E12, 14883.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7563713E12, 271.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7563713E12, 8939.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563713E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 71.0, "minX": 5.0, "maxY": 14534.0, "series": [{"data": [[149.0, 1288.0], [39.0, 3113.0], [10.0, 7118.5], [42.0, 12119.5], [44.0, 8500.5], [12.0, 4156.0], [54.0, 11703.0], [61.0, 13152.0], [286.0, 1635.5], [70.0, 9346.5], [5.0, 5931.0], [21.0, 6363.0], [94.0, 14239.0], [28.0, 14534.0], [31.0, 11559.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[286.0, 71.0], [39.0, 1013.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 286.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 5.0, "maxY": 14533.5, "series": [{"data": [[149.0, 1288.0], [39.0, 3113.0], [10.0, 7118.5], [42.0, 12119.5], [44.0, 8500.5], [12.0, 4156.0], [54.0, 11703.0], [61.0, 13152.0], [286.0, 1635.5], [70.0, 9346.5], [5.0, 5931.0], [21.0, 6363.0], [94.0, 14239.0], [28.0, 14533.5], [31.0, 11559.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[286.0, 0.0], [39.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 286.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7563713E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7563713E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563713E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.5166666666666666, "minX": 1.7563713E12, "maxY": 14.15, "series": [{"data": [[1.7563713E12, 2.5166666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.7563713E12, 14.15]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563713E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.5166666666666666, "minX": 1.7563713E12, "maxY": 14.15, "series": [{"data": [[1.7563713E12, 14.15]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}, {"data": [[1.7563713E12, 2.5166666666666666]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563713E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.5166666666666666, "minX": 1.7563713E12, "maxY": 14.15, "series": [{"data": [[1.7563713E12, 14.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7563713E12, 2.5166666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563713E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

