/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "maxY": 3518.0, "series": [{"data": [[0.0, 24.0], [0.1, 27.0], [0.2, 27.0], [0.3, 27.0], [0.4, 28.0], [0.5, 28.0], [0.6, 28.0], [0.7, 29.0], [0.8, 29.0], [0.9, 29.0], [1.0, 30.0], [1.1, 30.0], [1.2, 31.0], [1.3, 32.0], [1.4, 32.0], [1.5, 33.0], [1.6, 34.0], [1.7, 35.0], [1.8, 35.0], [1.9, 35.0], [2.0, 36.0], [2.1, 37.0], [2.2, 37.0], [2.3, 39.0], [2.4, 40.0], [2.5, 46.0], [2.6, 47.0], [2.7, 51.0], [2.8, 114.0], [2.9, 226.0], [3.0, 230.0], [3.1, 257.0], [3.2, 272.0], [3.3, 301.0], [3.4, 320.0], [3.5, 366.0], [3.6, 372.0], [3.7, 373.0], [3.8, 388.0], [3.9, 392.0], [4.0, 393.0], [4.1, 398.0], [4.2, 420.0], [4.3, 424.0], [4.4, 427.0], [4.5, 427.0], [4.6, 433.0], [4.7, 436.0], [4.8, 454.0], [4.9, 467.0], [5.0, 481.0], [5.1, 485.0], [5.2, 546.0], [5.3, 546.0], [5.4, 570.0], [5.5, 580.0], [5.6, 580.0], [5.7, 586.0], [5.8, 604.0], [5.9, 610.0], [6.0, 613.0], [6.1, 628.0], [6.2, 677.0], [6.3, 760.0], [6.4, 766.0], [6.5, 778.0], [6.6, 782.0], [6.7, 784.0], [6.8, 789.0], [6.9, 790.0], [7.0, 823.0], [7.1, 868.0], [7.2, 907.0], [7.3, 920.0], [7.4, 926.0], [7.5, 932.0], [7.6, 939.0], [7.7, 940.0], [7.8, 940.0], [7.9, 942.0], [8.0, 973.0], [8.1, 978.0], [8.2, 983.0], [8.3, 986.0], [8.4, 1013.0], [8.5, 1016.0], [8.6, 1028.0], [8.7, 1036.0], [8.8, 1068.0], [8.9, 1071.0], [9.0, 1075.0], [9.1, 1093.0], [9.2, 1106.0], [9.3, 1108.0], [9.4, 1125.0], [9.5, 1127.0], [9.6, 1128.0], [9.7, 1135.0], [9.8, 1153.0], [9.9, 1162.0], [10.0, 1164.0], [10.1, 1169.0], [10.2, 1173.0], [10.3, 1178.0], [10.4, 1178.0], [10.5, 1179.0], [10.6, 1179.0], [10.7, 1183.0], [10.8, 1189.0], [10.9, 1200.0], [11.0, 1201.0], [11.1, 1211.0], [11.2, 1220.0], [11.3, 1220.0], [11.4, 1223.0], [11.5, 1224.0], [11.6, 1225.0], [11.7, 1228.0], [11.8, 1232.0], [11.9, 1233.0], [12.0, 1249.0], [12.1, 1252.0], [12.2, 1256.0], [12.3, 1260.0], [12.4, 1261.0], [12.5, 1263.0], [12.6, 1280.0], [12.7, 1284.0], [12.8, 1287.0], [12.9, 1289.0], [13.0, 1293.0], [13.1, 1301.0], [13.2, 1303.0], [13.3, 1304.0], [13.4, 1309.0], [13.5, 1318.0], [13.6, 1325.0], [13.7, 1333.0], [13.8, 1333.0], [13.9, 1334.0], [14.0, 1350.0], [14.1, 1351.0], [14.2, 1352.0], [14.3, 1358.0], [14.4, 1360.0], [14.5, 1362.0], [14.6, 1365.0], [14.7, 1370.0], [14.8, 1372.0], [14.9, 1373.0], [15.0, 1380.0], [15.1, 1383.0], [15.2, 1384.0], [15.3, 1396.0], [15.4, 1400.0], [15.5, 1402.0], [15.6, 1405.0], [15.7, 1408.0], [15.8, 1408.0], [15.9, 1411.0], [16.0, 1413.0], [16.1, 1414.0], [16.2, 1429.0], [16.3, 1433.0], [16.4, 1435.0], [16.5, 1438.0], [16.6, 1439.0], [16.7, 1442.0], [16.8, 1443.0], [16.9, 1448.0], [17.0, 1448.0], [17.1, 1450.0], [17.2, 1454.0], [17.3, 1455.0], [17.4, 1457.0], [17.5, 1460.0], [17.6, 1460.0], [17.7, 1465.0], [17.8, 1472.0], [17.9, 1473.0], [18.0, 1474.0], [18.1, 1475.0], [18.2, 1478.0], [18.3, 1478.0], [18.4, 1481.0], [18.5, 1486.0], [18.6, 1488.0], [18.7, 1489.0], [18.8, 1489.0], [18.9, 1491.0], [19.0, 1503.0], [19.1, 1516.0], [19.2, 1519.0], [19.3, 1521.0], [19.4, 1522.0], [19.5, 1534.0], [19.6, 1538.0], [19.7, 1543.0], [19.8, 1544.0], [19.9, 1544.0], [20.0, 1545.0], [20.1, 1546.0], [20.2, 1548.0], [20.3, 1551.0], [20.4, 1552.0], [20.5, 1558.0], [20.6, 1560.0], [20.7, 1565.0], [20.8, 1566.0], [20.9, 1581.0], [21.0, 1586.0], [21.1, 1586.0], [21.2, 1588.0], [21.3, 1590.0], [21.4, 1591.0], [21.5, 1598.0], [21.6, 1607.0], [21.7, 1607.0], [21.8, 1612.0], [21.9, 1613.0], [22.0, 1614.0], [22.1, 1615.0], [22.2, 1618.0], [22.3, 1618.0], [22.4, 1619.0], [22.5, 1622.0], [22.6, 1623.0], [22.7, 1624.0], [22.8, 1625.0], [22.9, 1632.0], [23.0, 1633.0], [23.1, 1637.0], [23.2, 1650.0], [23.3, 1650.0], [23.4, 1652.0], [23.5, 1654.0], [23.6, 1655.0], [23.7, 1655.0], [23.8, 1656.0], [23.9, 1660.0], [24.0, 1662.0], [24.1, 1662.0], [24.2, 1664.0], [24.3, 1665.0], [24.4, 1666.0], [24.5, 1670.0], [24.6, 1671.0], [24.7, 1674.0], [24.8, 1675.0], [24.9, 1676.0], [25.0, 1677.0], [25.1, 1677.0], [25.2, 1682.0], [25.3, 1683.0], [25.4, 1686.0], [25.5, 1690.0], [25.6, 1691.0], [25.7, 1692.0], [25.8, 1694.0], [25.9, 1694.0], [26.0, 1694.0], [26.1, 1700.0], [26.2, 1707.0], [26.3, 1714.0], [26.4, 1715.0], [26.5, 1718.0], [26.6, 1719.0], [26.7, 1724.0], [26.8, 1729.0], [26.9, 1729.0], [27.0, 1731.0], [27.1, 1733.0], [27.2, 1733.0], [27.3, 1737.0], [27.4, 1739.0], [27.5, 1741.0], [27.6, 1743.0], [27.7, 1746.0], [27.8, 1749.0], [27.9, 1761.0], [28.0, 1761.0], [28.1, 1762.0], [28.2, 1765.0], [28.3, 1765.0], [28.4, 1765.0], [28.5, 1769.0], [28.6, 1776.0], [28.7, 1776.0], [28.8, 1777.0], [28.9, 1784.0], [29.0, 1786.0], [29.1, 1787.0], [29.2, 1787.0], [29.3, 1789.0], [29.4, 1791.0], [29.5, 1799.0], [29.6, 1803.0], [29.7, 1804.0], [29.8, 1813.0], [29.9, 1831.0], [30.0, 1832.0], [30.1, 1836.0], [30.2, 1840.0], [30.3, 1849.0], [30.4, 1850.0], [30.5, 1856.0], [30.6, 1856.0], [30.7, 1857.0], [30.8, 1859.0], [30.9, 1862.0], [31.0, 1865.0], [31.1, 1865.0], [31.2, 1869.0], [31.3, 1871.0], [31.4, 1871.0], [31.5, 1874.0], [31.6, 1884.0], [31.7, 1884.0], [31.8, 1885.0], [31.9, 1891.0], [32.0, 1892.0], [32.1, 1894.0], [32.2, 1901.0], [32.3, 1901.0], [32.4, 1901.0], [32.5, 1909.0], [32.6, 1911.0], [32.7, 1912.0], [32.8, 1913.0], [32.9, 1915.0], [33.0, 1916.0], [33.1, 1916.0], [33.2, 1916.0], [33.3, 1918.0], [33.4, 1920.0], [33.5, 1924.0], [33.6, 1924.0], [33.7, 1925.0], [33.8, 1928.0], [33.9, 1929.0], [34.0, 1929.0], [34.1, 1929.0], [34.2, 1933.0], [34.3, 1936.0], [34.4, 1944.0], [34.5, 1945.0], [34.6, 1948.0], [34.7, 1950.0], [34.8, 1952.0], [34.9, 1955.0], [35.0, 1959.0], [35.1, 1961.0], [35.2, 1961.0], [35.3, 1966.0], [35.4, 1967.0], [35.5, 1969.0], [35.6, 1969.0], [35.7, 1971.0], [35.8, 1971.0], [35.9, 1973.0], [36.0, 1973.0], [36.1, 1973.0], [36.2, 1974.0], [36.3, 1974.0], [36.4, 1976.0], [36.5, 1979.0], [36.6, 1979.0], [36.7, 1982.0], [36.8, 1985.0], [36.9, 1985.0], [37.0, 1986.0], [37.1, 1990.0], [37.2, 1992.0], [37.3, 1992.0], [37.4, 1995.0], [37.5, 2001.0], [37.6, 2001.0], [37.7, 2001.0], [37.8, 2002.0], [37.9, 2004.0], [38.0, 2010.0], [38.1, 2012.0], [38.2, 2014.0], [38.3, 2018.0], [38.4, 2019.0], [38.5, 2021.0], [38.6, 2023.0], [38.7, 2026.0], [38.8, 2032.0], [38.9, 2040.0], [39.0, 2045.0], [39.1, 2052.0], [39.2, 2063.0], [39.3, 2064.0], [39.4, 2065.0], [39.5, 2066.0], [39.6, 2069.0], [39.7, 2069.0], [39.8, 2071.0], [39.9, 2073.0], [40.0, 2074.0], [40.1, 2075.0], [40.2, 2082.0], [40.3, 2084.0], [40.4, 2091.0], [40.5, 2095.0], [40.6, 2096.0], [40.7, 2097.0], [40.8, 2098.0], [40.9, 2099.0], [41.0, 2101.0], [41.1, 2110.0], [41.2, 2111.0], [41.3, 2111.0], [41.4, 2114.0], [41.5, 2118.0], [41.6, 2119.0], [41.7, 2123.0], [41.8, 2124.0], [41.9, 2125.0], [42.0, 2125.0], [42.1, 2127.0], [42.2, 2128.0], [42.3, 2129.0], [42.4, 2130.0], [42.5, 2133.0], [42.6, 2140.0], [42.7, 2141.0], [42.8, 2143.0], [42.9, 2144.0], [43.0, 2144.0], [43.1, 2145.0], [43.2, 2146.0], [43.3, 2147.0], [43.4, 2147.0], [43.5, 2148.0], [43.6, 2152.0], [43.7, 2153.0], [43.8, 2173.0], [43.9, 2174.0], [44.0, 2174.0], [44.1, 2176.0], [44.2, 2177.0], [44.3, 2179.0], [44.4, 2189.0], [44.5, 2192.0], [44.6, 2195.0], [44.7, 2196.0], [44.8, 2198.0], [44.9, 2205.0], [45.0, 2215.0], [45.1, 2215.0], [45.2, 2216.0], [45.3, 2222.0], [45.4, 2223.0], [45.5, 2230.0], [45.6, 2232.0], [45.7, 2237.0], [45.8, 2242.0], [45.9, 2254.0], [46.0, 2255.0], [46.1, 2257.0], [46.2, 2260.0], [46.3, 2261.0], [46.4, 2266.0], [46.5, 2269.0], [46.6, 2270.0], [46.7, 2271.0], [46.8, 2275.0], [46.9, 2278.0], [47.0, 2280.0], [47.1, 2283.0], [47.2, 2284.0], [47.3, 2286.0], [47.4, 2290.0], [47.5, 2290.0], [47.6, 2290.0], [47.7, 2290.0], [47.8, 2290.0], [47.9, 2292.0], [48.0, 2293.0], [48.1, 2308.0], [48.2, 2309.0], [48.3, 2317.0], [48.4, 2319.0], [48.5, 2321.0], [48.6, 2325.0], [48.7, 2334.0], [48.8, 2337.0], [48.9, 2339.0], [49.0, 2345.0], [49.1, 2345.0], [49.2, 2348.0], [49.3, 2348.0], [49.4, 2353.0], [49.5, 2362.0], [49.6, 2363.0], [49.7, 2365.0], [49.8, 2368.0], [49.9, 2373.0], [50.0, 2376.0], [50.1, 2377.0], [50.2, 2379.0], [50.3, 2379.0], [50.4, 2387.0], [50.5, 2387.0], [50.6, 2390.0], [50.7, 2394.0], [50.8, 2397.0], [50.9, 2399.0], [51.0, 2399.0], [51.1, 2403.0], [51.2, 2404.0], [51.3, 2405.0], [51.4, 2411.0], [51.5, 2412.0], [51.6, 2412.0], [51.7, 2413.0], [51.8, 2415.0], [51.9, 2416.0], [52.0, 2418.0], [52.1, 2419.0], [52.2, 2419.0], [52.3, 2431.0], [52.4, 2433.0], [52.5, 2434.0], [52.6, 2438.0], [52.7, 2439.0], [52.8, 2442.0], [52.9, 2443.0], [53.0, 2443.0], [53.1, 2448.0], [53.2, 2456.0], [53.3, 2456.0], [53.4, 2461.0], [53.5, 2468.0], [53.6, 2469.0], [53.7, 2469.0], [53.8, 2472.0], [53.9, 2478.0], [54.0, 2480.0], [54.1, 2483.0], [54.2, 2484.0], [54.3, 2486.0], [54.4, 2490.0], [54.5, 2496.0], [54.6, 2497.0], [54.7, 2499.0], [54.8, 2506.0], [54.9, 2521.0], [55.0, 2521.0], [55.1, 2523.0], [55.2, 2534.0], [55.3, 2540.0], [55.4, 2541.0], [55.5, 2553.0], [55.6, 2554.0], [55.7, 2555.0], [55.8, 2557.0], [55.9, 2557.0], [56.0, 2570.0], [56.1, 2578.0], [56.2, 2578.0], [56.3, 2579.0], [56.4, 2581.0], [56.5, 2581.0], [56.6, 2583.0], [56.7, 2585.0], [56.8, 2585.0], [56.9, 2590.0], [57.0, 2591.0], [57.1, 2596.0], [57.2, 2609.0], [57.3, 2609.0], [57.4, 2619.0], [57.5, 2623.0], [57.6, 2633.0], [57.7, 2636.0], [57.8, 2637.0], [57.9, 2649.0], [58.0, 2651.0], [58.1, 2653.0], [58.2, 2655.0], [58.3, 2655.0], [58.4, 2659.0], [58.5, 2661.0], [58.6, 2663.0], [58.7, 2664.0], [58.8, 2666.0], [58.9, 2669.0], [59.0, 2670.0], [59.1, 2679.0], [59.2, 2682.0], [59.3, 2686.0], [59.4, 2686.0], [59.5, 2693.0], [59.6, 2695.0], [59.7, 2699.0], [59.8, 2700.0], [59.9, 2709.0], [60.0, 2711.0], [60.1, 2714.0], [60.2, 2717.0], [60.3, 2718.0], [60.4, 2721.0], [60.5, 2721.0], [60.6, 2723.0], [60.7, 2725.0], [60.8, 2738.0], [60.9, 2745.0], [61.0, 2752.0], [61.1, 2752.0], [61.2, 2756.0], [61.3, 2757.0], [61.4, 2758.0], [61.5, 2760.0], [61.6, 2761.0], [61.7, 2766.0], [61.8, 2782.0], [61.9, 2788.0], [62.0, 2804.0], [62.1, 2808.0], [62.2, 2811.0], [62.3, 2813.0], [62.4, 2816.0], [62.5, 2820.0], [62.6, 2830.0], [62.7, 2830.0], [62.8, 2834.0], [62.9, 2837.0], [63.0, 2837.0], [63.1, 2842.0], [63.2, 2843.0], [63.3, 2851.0], [63.4, 2851.0], [63.5, 2851.0], [63.6, 2857.0], [63.7, 2858.0], [63.8, 2859.0], [63.9, 2861.0], [64.0, 2861.0], [64.1, 2862.0], [64.2, 2865.0], [64.3, 2867.0], [64.4, 2872.0], [64.5, 2872.0], [64.6, 2884.0], [64.7, 2884.0], [64.8, 2890.0], [64.9, 2890.0], [65.0, 2893.0], [65.1, 2894.0], [65.2, 2897.0], [65.3, 2901.0], [65.4, 2902.0], [65.5, 2902.0], [65.6, 2902.0], [65.7, 2902.0], [65.8, 2903.0], [65.9, 2904.0], [66.0, 2908.0], [66.1, 2909.0], [66.2, 2911.0], [66.3, 2924.0], [66.4, 2925.0], [66.5, 2930.0], [66.6, 2931.0], [66.7, 2933.0], [66.8, 2939.0], [66.9, 2942.0], [67.0, 2945.0], [67.1, 2947.0], [67.2, 2947.0], [67.3, 2948.0], [67.4, 2949.0], [67.5, 2951.0], [67.6, 2951.0], [67.7, 2952.0], [67.8, 2952.0], [67.9, 2952.0], [68.0, 2955.0], [68.1, 2956.0], [68.2, 2960.0], [68.3, 2962.0], [68.4, 2966.0], [68.5, 2966.0], [68.6, 2968.0], [68.7, 2971.0], [68.8, 2973.0], [68.9, 2975.0], [69.0, 2979.0], [69.1, 2986.0], [69.2, 2990.0], [69.3, 2992.0], [69.4, 3000.0], [69.5, 3008.0], [69.6, 3013.0], [69.7, 3014.0], [69.8, 3015.0], [69.9, 3016.0], [70.0, 3019.0], [70.1, 3020.0], [70.2, 3021.0], [70.3, 3022.0], [70.4, 3023.0], [70.5, 3026.0], [70.6, 3027.0], [70.7, 3027.0], [70.8, 3029.0], [70.9, 3030.0], [71.0, 3032.0], [71.1, 3043.0], [71.2, 3044.0], [71.3, 3051.0], [71.4, 3058.0], [71.5, 3059.0], [71.6, 3061.0], [71.7, 3061.0], [71.8, 3065.0], [71.9, 3067.0], [72.0, 3074.0], [72.1, 3074.0], [72.2, 3082.0], [72.3, 3086.0], [72.4, 3088.0], [72.5, 3090.0], [72.6, 3090.0], [72.7, 3092.0], [72.8, 3093.0], [72.9, 3094.0], [73.0, 3098.0], [73.1, 3099.0], [73.2, 3099.0], [73.3, 3100.0], [73.4, 3102.0], [73.5, 3107.0], [73.6, 3108.0], [73.7, 3108.0], [73.8, 3109.0], [73.9, 3110.0], [74.0, 3111.0], [74.1, 3112.0], [74.2, 3115.0], [74.3, 3116.0], [74.4, 3119.0], [74.5, 3120.0], [74.6, 3123.0], [74.7, 3124.0], [74.8, 3124.0], [74.9, 3124.0], [75.0, 3125.0], [75.1, 3126.0], [75.2, 3127.0], [75.3, 3127.0], [75.4, 3127.0], [75.5, 3128.0], [75.6, 3131.0], [75.7, 3132.0], [75.8, 3135.0], [75.9, 3135.0], [76.0, 3136.0], [76.1, 3137.0], [76.2, 3138.0], [76.3, 3139.0], [76.4, 3140.0], [76.5, 3140.0], [76.6, 3145.0], [76.7, 3150.0], [76.8, 3150.0], [76.9, 3151.0], [77.0, 3151.0], [77.1, 3153.0], [77.2, 3153.0], [77.3, 3153.0], [77.4, 3156.0], [77.5, 3162.0], [77.6, 3164.0], [77.7, 3165.0], [77.8, 3165.0], [77.9, 3166.0], [78.0, 3166.0], [78.1, 3167.0], [78.2, 3170.0], [78.3, 3170.0], [78.4, 3172.0], [78.5, 3173.0], [78.6, 3176.0], [78.7, 3177.0], [78.8, 3178.0], [78.9, 3179.0], [79.0, 3180.0], [79.1, 3180.0], [79.2, 3180.0], [79.3, 3182.0], [79.4, 3185.0], [79.5, 3185.0], [79.6, 3187.0], [79.7, 3189.0], [79.8, 3189.0], [79.9, 3191.0], [80.0, 3191.0], [80.1, 3192.0], [80.2, 3192.0], [80.3, 3192.0], [80.4, 3194.0], [80.5, 3194.0], [80.6, 3197.0], [80.7, 3198.0], [80.8, 3198.0], [80.9, 3205.0], [81.0, 3205.0], [81.1, 3205.0], [81.2, 3207.0], [81.3, 3207.0], [81.4, 3209.0], [81.5, 3211.0], [81.6, 3212.0], [81.7, 3214.0], [81.8, 3215.0], [81.9, 3217.0], [82.0, 3218.0], [82.1, 3219.0], [82.2, 3221.0], [82.3, 3223.0], [82.4, 3225.0], [82.5, 3225.0], [82.6, 3225.0], [82.7, 3227.0], [82.8, 3228.0], [82.9, 3229.0], [83.0, 3229.0], [83.1, 3230.0], [83.2, 3231.0], [83.3, 3231.0], [83.4, 3232.0], [83.5, 3232.0], [83.6, 3233.0], [83.7, 3234.0], [83.8, 3235.0], [83.9, 3236.0], [84.0, 3236.0], [84.1, 3237.0], [84.2, 3242.0], [84.3, 3243.0], [84.4, 3245.0], [84.5, 3253.0], [84.6, 3254.0], [84.7, 3255.0], [84.8, 3256.0], [84.9, 3256.0], [85.0, 3259.0], [85.1, 3259.0], [85.2, 3260.0], [85.3, 3260.0], [85.4, 3260.0], [85.5, 3261.0], [85.6, 3261.0], [85.7, 3261.0], [85.8, 3261.0], [85.9, 3262.0], [86.0, 3262.0], [86.1, 3262.0], [86.2, 3263.0], [86.3, 3264.0], [86.4, 3265.0], [86.5, 3266.0], [86.6, 3267.0], [86.7, 3268.0], [86.8, 3268.0], [86.9, 3269.0], [87.0, 3270.0], [87.1, 3272.0], [87.2, 3273.0], [87.3, 3273.0], [87.4, 3275.0], [87.5, 3275.0], [87.6, 3275.0], [87.7, 3276.0], [87.8, 3280.0], [87.9, 3280.0], [88.0, 3280.0], [88.1, 3281.0], [88.2, 3281.0], [88.3, 3282.0], [88.4, 3282.0], [88.5, 3283.0], [88.6, 3283.0], [88.7, 3284.0], [88.8, 3284.0], [88.9, 3284.0], [89.0, 3285.0], [89.1, 3285.0], [89.2, 3285.0], [89.3, 3285.0], [89.4, 3286.0], [89.5, 3286.0], [89.6, 3287.0], [89.7, 3287.0], [89.8, 3288.0], [89.9, 3290.0], [90.0, 3292.0], [90.1, 3292.0], [90.2, 3293.0], [90.3, 3293.0], [90.4, 3293.0], [90.5, 3295.0], [90.6, 3296.0], [90.7, 3297.0], [90.8, 3297.0], [90.9, 3298.0], [91.0, 3298.0], [91.1, 3301.0], [91.2, 3303.0], [91.3, 3304.0], [91.4, 3305.0], [91.5, 3306.0], [91.6, 3308.0], [91.7, 3309.0], [91.8, 3309.0], [91.9, 3311.0], [92.0, 3312.0], [92.1, 3312.0], [92.2, 3312.0], [92.3, 3312.0], [92.4, 3312.0], [92.5, 3314.0], [92.6, 3314.0], [92.7, 3315.0], [92.8, 3316.0], [92.9, 3316.0], [93.0, 3316.0], [93.1, 3317.0], [93.2, 3318.0], [93.3, 3318.0], [93.4, 3319.0], [93.5, 3321.0], [93.6, 3322.0], [93.7, 3325.0], [93.8, 3325.0], [93.9, 3328.0], [94.0, 3328.0], [94.1, 3330.0], [94.2, 3332.0], [94.3, 3332.0], [94.4, 3333.0], [94.5, 3333.0], [94.6, 3334.0], [94.7, 3335.0], [94.8, 3335.0], [94.9, 3336.0], [95.0, 3337.0], [95.1, 3337.0], [95.2, 3340.0], [95.3, 3340.0], [95.4, 3352.0], [95.5, 3353.0], [95.6, 3372.0], [95.7, 3372.0], [95.8, 3373.0], [95.9, 3376.0], [96.0, 3376.0], [96.1, 3377.0], [96.2, 3377.0], [96.3, 3379.0], [96.4, 3379.0], [96.5, 3384.0], [96.6, 3390.0], [96.7, 3391.0], [96.8, 3391.0], [96.9, 3391.0], [97.0, 3392.0], [97.1, 3392.0], [97.2, 3402.0], [97.3, 3404.0], [97.4, 3409.0], [97.5, 3410.0], [97.6, 3421.0], [97.7, 3427.0], [97.8, 3427.0], [97.9, 3430.0], [98.0, 3432.0], [98.1, 3433.0], [98.2, 3436.0], [98.3, 3436.0], [98.4, 3438.0], [98.5, 3439.0], [98.6, 3448.0], [98.7, 3450.0], [98.8, 3453.0], [98.9, 3454.0], [99.0, 3461.0], [99.1, 3475.0], [99.2, 3476.0], [99.3, 3479.0], [99.4, 3481.0], [99.5, 3482.0], [99.6, 3496.0], [99.7, 3503.0], [99.8, 3505.0], [99.9, 3518.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 102.0, "series": [{"data": [[0.0, 27.0], [600.0, 5.0], [700.0, 7.0], [800.0, 2.0], [900.0, 12.0], [1000.0, 8.0], [1100.0, 17.0], [1200.0, 22.0], [1300.0, 23.0], [1400.0, 36.0], [1500.0, 25.0], [1600.0, 45.0], [100.0, 1.0], [1700.0, 35.0], [1800.0, 26.0], [1900.0, 53.0], [2000.0, 35.0], [2100.0, 39.0], [2200.0, 32.0], [2300.0, 30.0], [2400.0, 37.0], [2500.0, 24.0], [2600.0, 26.0], [2700.0, 22.0], [2800.0, 33.0], [2900.0, 41.0], [3000.0, 39.0], [3100.0, 77.0], [200.0, 4.0], [3200.0, 102.0], [3300.0, 61.0], [3400.0, 25.0], [3500.0, 3.0], [300.0, 9.0], [400.0, 11.0], [500.0, 6.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 808.0, "series": [{"data": [[0.0, 52.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 138.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 808.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 271.2096474953619, "minX": 1.75635552E12, "maxY": 771.5075921908893, "series": [{"data": [[1.75635558E12, 271.2096474953619], [1.75635552E12, 771.5075921908893]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635558E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 3461.0, "series": [{"data": [[4.0, 3272.0], [5.0, 3283.0], [7.0, 3318.0], [8.0, 3135.0], [11.0, 3285.0], [13.0, 3291.0], [15.0, 3281.0], [16.0, 3399.5], [19.0, 3377.3333333333335], [21.0, 3282.0], [22.0, 3315.0], [24.0, 3461.0], [25.0, 3347.6666666666665], [29.0, 3384.5], [30.0, 3301.0], [32.0, 3174.0], [35.0, 3264.5], [34.0, 3292.0], [40.0, 3309.0], [43.0, 3306.0], [42.0, 3253.833333333333], [47.0, 3231.0], [46.0, 3229.0], [48.0, 3371.5], [50.0, 3180.0], [53.0, 3275.6666666666665], [57.0, 3261.0], [56.0, 3265.6666666666665], [58.0, 3264.0], [61.0, 3298.0], [60.0, 3305.0], [66.0, 3377.0], [64.0, 3282.0], [70.0, 3267.0], [69.0, 3275.0], [74.0, 3144.3333333333335], [73.0, 3258.0], [79.0, 3247.0], [78.0, 3269.0], [77.0, 3266.0], [83.0, 3262.0], [82.0, 3298.3333333333335], [86.0, 3384.0], [85.0, 3330.0], [91.0, 3316.0], [90.0, 3164.5], [89.0, 3261.0], [95.0, 3309.0], [92.0, 3261.3333333333335], [99.0, 3109.6666666666665], [96.0, 3336.6666666666665], [103.0, 3334.0], [102.0, 2740.0], [101.0, 3259.0], [106.0, 3376.0], [104.0, 3325.0], [108.0, 3020.0], [115.0, 2865.8888888888887], [119.0, 2727.5], [117.0, 2486.0], [116.0, 3402.0], [123.0, 2596.0], [122.0, 2484.0], [127.0, 3180.5], [125.0, 2975.0], [133.0, 2469.0], [132.0, 2918.5], [130.0, 3198.0], [143.0, 2578.0], [142.0, 2666.0], [141.0, 3014.5], [138.0, 2992.5], [137.0, 3181.0], [136.0, 3236.0], [151.0, 2345.0], [147.0, 2443.6666666666665], [146.0, 2066.0], [145.0, 2439.0], [158.0, 3319.0], [155.0, 3002.5], [156.0, 3280.0], [154.0, 2675.0], [153.0, 2651.0], [152.0, 3331.0], [167.0, 3225.0], [165.0, 2202.0], [163.0, 2552.0], [162.0, 3326.5], [174.0, 3321.0], [171.0, 1945.0], [170.0, 3177.0], [182.0, 3225.5], [181.0, 3250.5], [176.0, 2995.5], [184.0, 3254.0], [199.0, 3013.3333333333335], [198.0, 3176.0], [197.0, 3348.6666666666665], [194.0, 3245.0], [193.0, 3380.0], [207.0, 3271.5], [205.0, 3312.0], [203.0, 3292.0], [202.0, 3297.0], [201.0, 2397.0], [200.0, 3180.0], [214.0, 3166.0], [213.0, 2930.0], [212.0, 3127.0], [211.0, 2951.0], [208.0, 3094.0], [222.0, 3191.0], [221.0, 3207.0], [220.0, 3210.0], [217.0, 3353.0], [216.0, 3328.0], [231.0, 2837.0], [230.0, 2446.0], [228.0, 3046.0], [225.0, 3390.0], [224.0, 2509.5], [239.0, 2956.0], [238.0, 3140.0], [237.0, 3377.0], [236.0, 3146.5], [234.0, 3263.5], [233.0, 3287.0], [232.0, 3074.0], [247.0, 2902.0], [246.0, 3269.0], [245.0, 3145.0], [244.0, 2939.0], [243.0, 3132.0], [242.0, 3410.0], [241.0, 2884.0], [240.0, 2890.0], [252.0, 3152.0], [250.0, 3260.0], [249.0, 3129.5], [271.0, 3232.0], [266.0, 3284.0], [265.0, 3012.5], [264.0, 3136.5], [260.0, 3157.5], [259.0, 3205.0], [258.0, 3232.3333333333335], [257.0, 3192.0], [275.0, 3260.0], [285.0, 3337.0], [286.0, 3111.0], [284.0, 2694.3333333333335], [281.0, 3139.0], [280.0, 3185.0], [279.0, 3333.0], [278.0, 3228.0], [277.0, 3301.5], [274.0, 3179.0], [272.0, 3129.2], [303.0, 3171.6666666666665], [300.0, 3255.0], [299.0, 3113.3333333333335], [296.0, 3372.0], [295.0, 3294.5], [293.0, 3126.5], [292.0, 3197.0], [291.0, 3232.0], [288.0, 3000.0], [306.0, 3135.0], [316.0, 3256.0], [314.0, 3059.6666666666665], [310.0, 3022.0], [309.0, 3223.0], [308.0, 2902.0], [307.0, 3088.0], [305.0, 2073.0], [304.0, 2075.0], [323.0, 3165.0], [334.0, 3332.0], [335.0, 2830.0], [333.0, 3333.0], [329.0, 3011.0], [328.0, 3067.0], [326.0, 3085.3333333333335], [320.0, 3050.0], [322.0, 3172.5], [321.0, 3194.0], [350.0, 3115.0], [351.0, 2851.0], [349.0, 3044.0], [348.0, 2963.5], [346.0, 2811.0], [345.0, 3275.0], [344.0, 3211.0], [343.0, 3120.0], [338.0, 3099.0], [342.0, 3039.5], [340.0, 3054.1428571428573], [355.0, 3172.0], [367.0, 2849.3333333333335], [365.0, 2990.0], [364.0, 3041.3333333333335], [360.0, 3189.0], [357.0, 3100.0], [354.0, 3293.0], [353.0, 3030.0], [352.0, 3218.0], [380.0, 3135.0], [382.0, 2700.0], [383.0, 2404.0], [381.0, 2757.0], [379.0, 3015.0], [378.0, 2547.6666666666665], [375.0, 2955.0], [368.0, 2766.0], [371.0, 2952.0], [369.0, 2842.0], [374.0, 2918.5], [372.0, 3173.5], [398.0, 1402.0], [399.0, 3187.0], [397.0, 2960.0], [396.0, 2758.0], [395.0, 3180.0], [394.0, 2971.0], [393.0, 2968.0], [392.0, 3229.0], [391.0, 3112.0], [385.0, 2721.0], [384.0, 3109.0], [387.0, 2679.0], [386.0, 2925.0], [390.0, 2973.0], [389.0, 2950.0], [414.0, 2655.0], [415.0, 2001.0], [413.0, 2695.0], [412.0, 2619.0], [411.0, 2902.0], [410.0, 2399.0], [409.0, 3090.0], [408.0, 3136.0], [407.0, 2952.0], [400.0, 3061.0], [403.0, 1976.0], [402.0, 2794.5], [406.0, 2931.0], [405.0, 2933.0], [404.0, 2945.0], [430.0, 2826.5], [431.0, 2851.0], [428.0, 2770.5], [416.0, 2699.0], [426.0, 2902.0], [425.0, 2880.0], [423.0, 2368.0], [422.0, 2979.0], [421.0, 2947.0], [420.0, 2735.5], [445.0, 2609.0], [446.0, 3086.0], [444.0, 1859.5], [442.0, 1969.0], [441.0, 2795.75], [440.0, 2661.0], [436.0, 2894.0], [435.0, 1731.0], [434.0, 2881.0], [433.0, 2714.0], [462.0, 2782.0], [463.0, 3023.0], [461.0, 2040.0], [460.0, 2904.0], [459.0, 2045.0], [458.0, 1591.0], [457.0, 2816.0], [456.0, 1598.0], [455.0, 2069.0], [449.0, 2390.3333333333335], [454.0, 2060.0], [452.0, 2943.6666666666665], [476.0, 2378.0], [478.0, 2523.0], [479.0, 1351.0], [477.0, 2738.0], [474.0, 2433.0], [473.0, 1963.0], [471.0, 2123.0], [465.0, 2032.0], [464.0, 2069.0], [467.0, 2862.0], [466.0, 2461.0], [470.0, 2365.0], [469.0, 2686.0], [468.0, 2951.0], [488.0, 2469.0], [495.0, 1167.75], [491.0, 2723.0], [490.0, 2448.0], [489.0, 2788.0], [487.0, 2820.0], [486.0, 2635.5], [484.0, 2609.0], [483.0, 2542.5], [482.0, 2752.0], [480.0, 2872.0], [499.0, 1788.5], [509.0, 2745.0], [508.0, 1694.0], [506.0, 2362.0], [505.0, 907.0], [504.0, 926.0], [503.0, 920.0], [501.0, 2570.0], [500.0, 2636.0], [497.0, 1840.0], [496.0, 2709.0], [538.0, 2717.0], [530.0, 2521.0], [541.0, 789.0], [543.0, 1319.3333333333333], [529.0, 1613.0], [528.0, 1614.0], [540.0, 2499.0], [537.0, 2571.0], [519.0, 1671.0], [518.0, 2309.0], [517.0, 2014.0], [516.0, 2622.0], [514.0, 2591.0], [513.0, 2216.0], [512.0, 2379.5], [527.0, 1618.5], [525.0, 1643.0], [523.0, 1622.0], [522.0, 2541.0], [521.0, 2649.0], [520.0, 2725.0], [534.0, 2458.0], [532.0, 2419.0], [531.0, 1612.0], [568.0, 2496.0], [572.0, 1384.0], [575.0, 2114.0], [563.0, 2295.0], [561.0, 2153.0], [565.0, 2125.0], [564.0, 1954.0], [574.0, 1380.0], [573.0, 2133.0], [571.0, 2456.0], [570.0, 2148.0], [569.0, 1405.0], [559.0, 1413.0], [545.0, 1489.0], [544.0, 778.0], [547.0, 1400.0], [546.0, 1489.0], [549.0, 1465.0], [548.0, 1396.0], [551.0, 2237.0], [550.0, 2308.0], [558.0, 2472.0], [557.0, 2323.6666666666665], [554.0, 2418.0], [553.0, 1783.5], [567.0, 2290.0], [566.0, 2521.0], [600.0, 2585.0], [604.0, 1153.0], [607.0, 986.0], [593.0, 2128.0], [592.0, 1125.0], [596.0, 2260.0], [594.0, 2325.0], [606.0, 1256.0], [605.0, 1249.0], [603.0, 1162.0], [602.0, 2394.0], [601.0, 1016.0], [591.0, 2334.0], [576.0, 2353.0], [578.0, 2431.0], [577.0, 2111.0], [581.0, 2348.0], [580.0, 2282.0], [583.0, 2387.0], [582.0, 2110.0], [590.0, 2655.0], [589.0, 1700.0], [588.0, 2442.0], [587.0, 2283.0], [586.0, 1362.0], [585.0, 2246.5], [599.0, 2390.0], [598.0, 1906.3333333333333], [626.0, 2223.0], [638.0, 1093.0], [637.0, 1353.0], [633.0, 1706.0], [615.0, 1233.0], [614.0, 1589.0], [613.0, 2119.0], [612.0, 2290.0], [610.0, 1834.0], [608.0, 2290.0], [623.0, 2292.5], [622.0, 2286.0], [620.0, 1183.0], [619.0, 2443.0], [618.0, 1301.0], [617.0, 1224.0], [616.0, 2144.0], [631.0, 1135.0], [629.0, 1013.0], [628.0, 2222.5], [625.0, 2415.0], [624.0, 2411.0], [670.0, 1071.0], [671.0, 1036.0], [656.0, 1807.3333333333333], [669.0, 1624.5], [667.0, 2480.0], [666.0, 1243.0], [664.0, 2271.0], [653.0, 1729.0], [641.0, 1068.0], [640.0, 2475.0], [644.0, 1642.0], [642.0, 2554.0], [647.0, 677.0], [646.0, 1730.5], [652.0, 1959.0], [651.0, 1028.0], [650.0, 1534.0], [649.0, 1269.0], [663.0, 1903.5], [662.0, 1971.0], [660.0, 2404.0], [658.0, 2337.0], [701.0, 1931.0], [702.0, 1707.0], [699.0, 2072.0], [697.0, 2088.5], [695.0, 2050.25], [691.0, 1392.0], [689.0, 2140.0], [688.0, 1916.0], [687.0, 2348.0], [677.0, 2153.3333333333335], [674.0, 1982.6666666666667], [679.0, 2290.0], [678.0, 2232.0], [686.0, 2144.0], [685.0, 1920.0], [684.0, 2173.0], [683.0, 2456.0], [682.0, 1915.3333333333333], [729.0, 1982.5], [721.0, 1857.0], [732.0, 1918.0], [734.0, 1204.5], [720.0, 1928.0], [731.0, 1338.5], [728.0, 1865.0], [711.0, 1885.0], [710.0, 784.0], [709.0, 1986.0], [708.0, 1974.0], [707.0, 1997.2], [719.0, 2018.0], [718.0, 2095.0], [717.0, 1862.0], [716.0, 2070.0], [714.0, 1716.0], [712.0, 1909.0], [726.0, 2298.0], [724.0, 2216.5], [722.0, 2413.0], [762.0, 1228.5], [766.0, 1869.0], [767.0, 1915.0], [752.0, 433.0], [754.0, 301.0], [753.0, 1856.0], [756.0, 398.0], [755.0, 1849.0], [765.0, 1925.0], [764.0, 388.0], [763.0, 393.0], [761.0, 1625.0], [743.0, 420.0], [742.0, 823.0], [741.0, 1894.0], [740.0, 427.0], [739.0, 1254.5], [737.0, 900.6666666666666], [751.0, 1950.0], [750.0, 766.0], [749.0, 1408.0], [747.0, 760.0], [746.0, 790.0], [745.0, 1804.0], [744.0, 2198.0], [759.0, 1913.0], [758.0, 1891.0], [792.0, 1777.0], [797.0, 586.0], [798.0, 580.0], [796.0, 1859.0], [795.0, 604.0], [794.0, 2019.5], [783.0, 2015.0], [769.0, 373.0], [768.0, 1884.0], [771.0, 372.0], [770.0, 2145.0], [775.0, 2078.3333333333335], [772.0, 2147.0], [781.0, 1831.0], [780.0, 904.0], [778.0, 272.0], [777.0, 1588.0], [776.0, 366.0], [791.0, 1112.3333333333333], [788.0, 1317.0], [786.0, 1167.5], [784.0, 546.0], [828.0, 467.0], [830.0, 1589.0], [817.0, 1739.0], [816.0, 1288.0], [827.0, 2141.0], [826.0, 1729.0], [825.0, 1831.0], [824.0, 1637.0], [814.0, 1749.0], [800.0, 1296.0], [803.0, 1520.0], [801.0, 570.0], [807.0, 1876.6666666666667], [804.0, 1776.0], [813.0, 1838.5], [811.0, 2053.0], [809.0, 1765.0], [822.0, 1672.0], [820.0, 1686.0], [819.0, 1473.0], [818.0, 1677.0], [851.0, 1667.6666666666667], [863.0, 1597.75], [859.0, 1871.5], [857.0, 1439.0], [856.0, 1601.5], [847.0, 1655.0], [833.0, 2026.0], [832.0, 1457.0], [837.0, 2023.0], [834.0, 2001.0], [839.0, 1454.0], [838.0, 1877.6666666666667], [846.0, 1936.5], [845.0, 1613.0], [844.0, 1633.0], [840.0, 1669.0], [854.0, 2174.0], [853.0, 1933.0], [852.0, 1442.0], [850.0, 1448.0], [849.0, 2084.0], [889.0, 1365.0], [894.0, 1805.0], [895.0, 2097.0], [881.0, 1688.5], [883.0, 1615.0], [882.0, 1383.0], [892.0, 1358.0], [891.0, 1360.0], [890.0, 1691.0], [888.0, 1682.0], [871.0, 1414.0], [870.0, 1741.0], [869.0, 1650.0], [868.0, 1692.0], [867.0, 1654.0], [865.0, 424.0], [864.0, 2004.0], [879.0, 1791.8333333333335], [877.0, 2143.0], [872.0, 1985.0], [887.0, 1396.0], [885.0, 1371.0], [922.0, 1318.0], [915.0, 1289.0], [924.0, 1309.0], [926.0, 1901.0], [914.0, 1636.3333333333333], [923.0, 1543.0], [921.0, 910.5], [903.0, 976.5], [901.0, 836.0], [899.0, 1683.0], [898.0, 1225.0], [897.0, 1573.5], [911.0, 1334.0], [910.0, 1665.0], [909.0, 1169.0], [908.0, 28.0], [907.0, 667.0], [905.0, 1220.0], [904.0, 1350.0], [919.0, 838.5], [917.0, 30.0], [916.0, 1325.0], [952.0, 1263.0], [957.0, 29.0], [958.0, 1586.0], [946.0, 912.0], [944.0, 1607.0], [956.0, 29.0], [955.0, 1260.0], [954.0, 1246.5], [943.0, 1280.0], [930.0, 35.0], [929.0, 1100.0], [933.0, 1419.0], [931.0, 1548.0], [935.0, 35.0], [934.0, 1623.0], [942.0, 1892.0], [941.0, 29.0], [940.0, 1284.0], [939.0, 1561.5], [938.0, 1452.5], [951.0, 138.0], [949.0, 226.0], [948.0, 1856.0], [947.0, 31.0], [985.0, 114.0], [977.0, 1491.0], [990.0, 1498.0], [989.0, 1178.0], [987.0, 1401.0], [982.0, 757.0], [980.0, 1481.0], [979.0, 1200.5], [976.0, 1486.5], [973.0, 27.0], [960.0, 1667.5], [962.0, 51.0], [961.0, 29.0], [964.0, 1429.0], [963.0, 47.0], [967.0, 40.0], [965.0, 1228.0], [971.0, 1803.0], [970.0, 35.0], [969.0, 629.5], [968.0, 1690.0], [1000.0, 29.333333333333332], [998.0, 33.0], [997.0, 1164.0], [996.0, 1448.0], [995.0, 1694.0], [994.0, 1575.0], [992.0, 1325.5], [1.0, 3290.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}, {"data": [[501.84500000000065, 2289.009000000001]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4827.15, "minX": 1.75635552E12, "maxY": 7743.633333333333, "series": [{"data": [[1.75635558E12, 7743.633333333333], [1.75635552E12, 6733.433333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75635558E12, 5668.483333333334], [1.75635552E12, 4827.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635558E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1565.8373101952272, "minX": 1.75635552E12, "maxY": 2907.5287569573256, "series": [{"data": [[1.75635558E12, 2907.5287569573256], [1.75635552E12, 1565.8373101952272]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635558E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1558.9002169197393, "minX": 1.75635552E12, "maxY": 2904.2170686456384, "series": [{"data": [[1.75635558E12, 2904.2170686456384], [1.75635552E12, 1558.9002169197393]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635558E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1207.5336225596527, "minX": 1.75635552E12, "maxY": 1720.9053803339514, "series": [{"data": [[1.75635558E12, 1720.9053803339514], [1.75635552E12, 1207.5336225596527]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635558E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.75635552E12, "maxY": 3518.0, "series": [{"data": [[1.75635558E12, 3518.0], [1.75635552E12, 2655.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75635558E12, 3334.0], [1.75635552E12, 2290.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75635558E12, 3481.6], [1.75635552E12, 2541.9999999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75635558E12, 3404.0], [1.75635552E12, 2413.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75635558E12, 789.0], [1.75635552E12, 24.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75635558E12, 3099.0], [1.75635552E12, 1686.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635558E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1588.0, "minX": 461.0, "maxY": 3099.0, "series": [{"data": [[539.0, 3099.0], [461.0, 1686.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[461.0, 1588.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 539.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 461.0, "maxY": 3099.0, "series": [{"data": [[539.0, 3099.0], [461.0, 1686.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[461.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 539.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75635552E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75635552E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635552E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75635552E12, "maxY": 8.983333333333333, "series": [{"data": [[1.75635552E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.75635558E12, 8.983333333333333], [1.75635552E12, 7.65]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635558E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75635552E12, "maxY": 8.983333333333333, "series": [{"data": [[1.75635552E12, 0.03333333333333333]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-failure", "isController": false}, {"data": [[1.75635558E12, 8.983333333333333], [1.75635552E12, 7.65]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635558E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75635552E12, "maxY": 8.983333333333333, "series": [{"data": [[1.75635558E12, 8.983333333333333], [1.75635552E12, 7.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75635552E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635558E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

