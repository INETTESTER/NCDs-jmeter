/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 62.0, "minX": 0.0, "maxY": 7362.0, "series": [{"data": [[0.0, 62.0], [0.1, 63.0], [0.2, 63.0], [0.3, 63.0], [0.4, 65.0], [0.5, 65.0], [0.6, 65.0], [0.7, 68.0], [0.8, 69.0], [0.9, 69.0], [1.0, 69.0], [1.1, 69.0], [1.2, 69.0], [1.3, 71.0], [1.4, 71.0], [1.5, 71.0], [1.6, 71.0], [1.7, 71.0], [1.8, 71.0], [1.9, 71.0], [2.0, 72.0], [2.1, 72.0], [2.2, 72.0], [2.3, 72.0], [2.4, 72.0], [2.5, 73.0], [2.6, 73.0], [2.7, 73.0], [2.8, 73.0], [2.9, 73.0], [3.0, 73.0], [3.1, 74.0], [3.2, 74.0], [3.3, 74.0], [3.4, 75.0], [3.5, 76.0], [3.6, 76.0], [3.7, 77.0], [3.8, 77.0], [3.9, 77.0], [4.0, 77.0], [4.1, 77.0], [4.2, 78.0], [4.3, 78.0], [4.4, 79.0], [4.5, 79.0], [4.6, 80.0], [4.7, 80.0], [4.8, 80.0], [4.9, 80.0], [5.0, 80.0], [5.1, 81.0], [5.2, 81.0], [5.3, 82.0], [5.4, 82.0], [5.5, 82.0], [5.6, 82.0], [5.7, 82.0], [5.8, 82.0], [5.9, 82.0], [6.0, 83.0], [6.1, 83.0], [6.2, 83.0], [6.3, 83.0], [6.4, 83.0], [6.5, 84.0], [6.6, 84.0], [6.7, 85.0], [6.8, 85.0], [6.9, 85.0], [7.0, 85.0], [7.1, 86.0], [7.2, 86.0], [7.3, 86.0], [7.4, 87.0], [7.5, 87.0], [7.6, 87.0], [7.7, 87.0], [7.8, 88.0], [7.9, 88.0], [8.0, 88.0], [8.1, 88.0], [8.2, 89.0], [8.3, 90.0], [8.4, 90.0], [8.5, 90.0], [8.6, 90.0], [8.7, 91.0], [8.8, 100.0], [8.9, 100.0], [9.0, 100.0], [9.1, 100.0], [9.2, 103.0], [9.3, 103.0], [9.4, 103.0], [9.5, 105.0], [9.6, 107.0], [9.7, 108.0], [9.8, 116.0], [9.9, 117.0], [10.0, 117.0], [10.1, 118.0], [10.2, 126.0], [10.3, 130.0], [10.4, 131.0], [10.5, 136.0], [10.6, 137.0], [10.7, 137.0], [10.8, 139.0], [10.9, 141.0], [11.0, 147.0], [11.1, 152.0], [11.2, 156.0], [11.3, 160.0], [11.4, 168.0], [11.5, 191.0], [11.6, 256.0], [11.7, 259.0], [11.8, 260.0], [11.9, 260.0], [12.0, 265.0], [12.1, 351.0], [12.2, 354.0], [12.3, 365.0], [12.4, 368.0], [12.5, 372.0], [12.6, 379.0], [12.7, 563.0], [12.8, 585.0], [12.9, 587.0], [13.0, 599.0], [13.1, 629.0], [13.2, 660.0], [13.3, 666.0], [13.4, 676.0], [13.5, 695.0], [13.6, 704.0], [13.7, 718.0], [13.8, 721.0], [13.9, 732.0], [14.0, 732.0], [14.1, 734.0], [14.2, 771.0], [14.3, 778.0], [14.4, 786.0], [14.5, 791.0], [14.6, 800.0], [14.7, 804.0], [14.8, 808.0], [14.9, 813.0], [15.0, 815.0], [15.1, 816.0], [15.2, 817.0], [15.3, 849.0], [15.4, 857.0], [15.5, 860.0], [15.6, 881.0], [15.7, 891.0], [15.8, 898.0], [15.9, 899.0], [16.0, 927.0], [16.1, 936.0], [16.2, 937.0], [16.3, 943.0], [16.4, 954.0], [16.5, 959.0], [16.6, 964.0], [16.7, 999.0], [16.8, 999.0], [16.9, 1009.0], [17.0, 1017.0], [17.1, 1019.0], [17.2, 1025.0], [17.3, 1027.0], [17.4, 1055.0], [17.5, 1067.0], [17.6, 1072.0], [17.7, 1073.0], [17.8, 1075.0], [17.9, 1075.0], [18.0, 1078.0], [18.1, 1081.0], [18.2, 1081.0], [18.3, 1082.0], [18.4, 1087.0], [18.5, 1093.0], [18.6, 1094.0], [18.7, 1100.0], [18.8, 1102.0], [18.9, 1105.0], [19.0, 1109.0], [19.1, 1115.0], [19.2, 1116.0], [19.3, 1119.0], [19.4, 1128.0], [19.5, 1131.0], [19.6, 1132.0], [19.7, 1134.0], [19.8, 1138.0], [19.9, 1154.0], [20.0, 1161.0], [20.1, 1163.0], [20.2, 1169.0], [20.3, 1171.0], [20.4, 1185.0], [20.5, 1189.0], [20.6, 1193.0], [20.7, 1193.0], [20.8, 1195.0], [20.9, 1197.0], [21.0, 1202.0], [21.1, 1214.0], [21.2, 1217.0], [21.3, 1218.0], [21.4, 1219.0], [21.5, 1232.0], [21.6, 1234.0], [21.7, 1236.0], [21.8, 1237.0], [21.9, 1242.0], [22.0, 1244.0], [22.1, 1244.0], [22.2, 1251.0], [22.3, 1254.0], [22.4, 1254.0], [22.5, 1256.0], [22.6, 1271.0], [22.7, 1276.0], [22.8, 1278.0], [22.9, 1279.0], [23.0, 1283.0], [23.1, 1287.0], [23.2, 1287.0], [23.3, 1288.0], [23.4, 1288.0], [23.5, 1294.0], [23.6, 1295.0], [23.7, 1307.0], [23.8, 1313.0], [23.9, 1313.0], [24.0, 1314.0], [24.1, 1319.0], [24.2, 1319.0], [24.3, 1325.0], [24.4, 1339.0], [24.5, 1343.0], [24.6, 1349.0], [24.7, 1351.0], [24.8, 1368.0], [24.9, 1372.0], [25.0, 1385.0], [25.1, 1387.0], [25.2, 1390.0], [25.3, 1391.0], [25.4, 1394.0], [25.5, 1403.0], [25.6, 1404.0], [25.7, 1406.0], [25.8, 1414.0], [25.9, 1419.0], [26.0, 1421.0], [26.1, 1426.0], [26.2, 1428.0], [26.3, 1428.0], [26.4, 1430.0], [26.5, 1437.0], [26.6, 1440.0], [26.7, 1442.0], [26.8, 1444.0], [26.9, 1445.0], [27.0, 1446.0], [27.1, 1449.0], [27.2, 1453.0], [27.3, 1453.0], [27.4, 1457.0], [27.5, 1457.0], [27.6, 1458.0], [27.7, 1461.0], [27.8, 1464.0], [27.9, 1464.0], [28.0, 1477.0], [28.1, 1481.0], [28.2, 1489.0], [28.3, 1498.0], [28.4, 1503.0], [28.5, 1508.0], [28.6, 1516.0], [28.7, 1519.0], [28.8, 1520.0], [28.9, 1521.0], [29.0, 1524.0], [29.1, 1525.0], [29.2, 1527.0], [29.3, 1528.0], [29.4, 1531.0], [29.5, 1533.0], [29.6, 1534.0], [29.7, 1537.0], [29.8, 1538.0], [29.9, 1541.0], [30.0, 1549.0], [30.1, 1554.0], [30.2, 1556.0], [30.3, 1557.0], [30.4, 1557.0], [30.5, 1559.0], [30.6, 1559.0], [30.7, 1563.0], [30.8, 1563.0], [30.9, 1563.0], [31.0, 1571.0], [31.1, 1572.0], [31.2, 1574.0], [31.3, 1579.0], [31.4, 1583.0], [31.5, 1584.0], [31.6, 1585.0], [31.7, 1586.0], [31.8, 1590.0], [31.9, 1592.0], [32.0, 1595.0], [32.1, 1597.0], [32.2, 1599.0], [32.3, 1606.0], [32.4, 1609.0], [32.5, 1612.0], [32.6, 1615.0], [32.7, 1623.0], [32.8, 1624.0], [32.9, 1627.0], [33.0, 1628.0], [33.1, 1629.0], [33.2, 1631.0], [33.3, 1634.0], [33.4, 1634.0], [33.5, 1634.0], [33.6, 1638.0], [33.7, 1639.0], [33.8, 1646.0], [33.9, 1650.0], [34.0, 1651.0], [34.1, 1653.0], [34.2, 1653.0], [34.3, 1655.0], [34.4, 1657.0], [34.5, 1657.0], [34.6, 1660.0], [34.7, 1665.0], [34.8, 1670.0], [34.9, 1670.0], [35.0, 1680.0], [35.1, 1681.0], [35.2, 1685.0], [35.3, 1687.0], [35.4, 1688.0], [35.5, 1690.0], [35.6, 1691.0], [35.7, 1694.0], [35.8, 1702.0], [35.9, 1707.0], [36.0, 1708.0], [36.1, 1714.0], [36.2, 1714.0], [36.3, 1721.0], [36.4, 1722.0], [36.5, 1725.0], [36.6, 1726.0], [36.7, 1729.0], [36.8, 1733.0], [36.9, 1735.0], [37.0, 1741.0], [37.1, 1743.0], [37.2, 1743.0], [37.3, 1743.0], [37.4, 1745.0], [37.5, 1745.0], [37.6, 1745.0], [37.7, 1748.0], [37.8, 1758.0], [37.9, 1762.0], [38.0, 1771.0], [38.1, 1776.0], [38.2, 1778.0], [38.3, 1784.0], [38.4, 1788.0], [38.5, 1794.0], [38.6, 1797.0], [38.7, 1799.0], [38.8, 1799.0], [38.9, 1800.0], [39.0, 1800.0], [39.1, 1805.0], [39.2, 1811.0], [39.3, 1819.0], [39.4, 1822.0], [39.5, 1833.0], [39.6, 1834.0], [39.7, 1841.0], [39.8, 1844.0], [39.9, 1853.0], [40.0, 1858.0], [40.1, 1859.0], [40.2, 1860.0], [40.3, 1862.0], [40.4, 1868.0], [40.5, 1869.0], [40.6, 1873.0], [40.7, 1876.0], [40.8, 1877.0], [40.9, 1886.0], [41.0, 1888.0], [41.1, 1888.0], [41.2, 1896.0], [41.3, 1899.0], [41.4, 1902.0], [41.5, 1909.0], [41.6, 1912.0], [41.7, 1917.0], [41.8, 1917.0], [41.9, 1918.0], [42.0, 1919.0], [42.1, 1927.0], [42.2, 1933.0], [42.3, 1939.0], [42.4, 1943.0], [42.5, 1944.0], [42.6, 1945.0], [42.7, 1950.0], [42.8, 1956.0], [42.9, 1958.0], [43.0, 1962.0], [43.1, 1963.0], [43.2, 1964.0], [43.3, 1965.0], [43.4, 1966.0], [43.5, 1967.0], [43.6, 1970.0], [43.7, 1973.0], [43.8, 1979.0], [43.9, 1980.0], [44.0, 1980.0], [44.1, 1980.0], [44.2, 1989.0], [44.3, 1992.0], [44.4, 1993.0], [44.5, 1996.0], [44.6, 1999.0], [44.7, 2001.0], [44.8, 2003.0], [44.9, 2004.0], [45.0, 2006.0], [45.1, 2006.0], [45.2, 2016.0], [45.3, 2020.0], [45.4, 2020.0], [45.5, 2022.0], [45.6, 2023.0], [45.7, 2023.0], [45.8, 2024.0], [45.9, 2024.0], [46.0, 2027.0], [46.1, 2029.0], [46.2, 2030.0], [46.3, 2031.0], [46.4, 2031.0], [46.5, 2035.0], [46.6, 2036.0], [46.7, 2036.0], [46.8, 2043.0], [46.9, 2044.0], [47.0, 2051.0], [47.1, 2052.0], [47.2, 2053.0], [47.3, 2059.0], [47.4, 2060.0], [47.5, 2071.0], [47.6, 2075.0], [47.7, 2085.0], [47.8, 2085.0], [47.9, 2087.0], [48.0, 2092.0], [48.1, 2094.0], [48.2, 2094.0], [48.3, 2095.0], [48.4, 2096.0], [48.5, 2098.0], [48.6, 2102.0], [48.7, 2103.0], [48.8, 2106.0], [48.9, 2107.0], [49.0, 2109.0], [49.1, 2110.0], [49.2, 2110.0], [49.3, 2117.0], [49.4, 2124.0], [49.5, 2124.0], [49.6, 2129.0], [49.7, 2140.0], [49.8, 2143.0], [49.9, 2147.0], [50.0, 2160.0], [50.1, 2168.0], [50.2, 2168.0], [50.3, 2171.0], [50.4, 2171.0], [50.5, 2185.0], [50.6, 2190.0], [50.7, 2195.0], [50.8, 2195.0], [50.9, 2203.0], [51.0, 2206.0], [51.1, 2207.0], [51.2, 2209.0], [51.3, 2213.0], [51.4, 2215.0], [51.5, 2216.0], [51.6, 2223.0], [51.7, 2224.0], [51.8, 2228.0], [51.9, 2231.0], [52.0, 2232.0], [52.1, 2238.0], [52.2, 2240.0], [52.3, 2250.0], [52.4, 2251.0], [52.5, 2255.0], [52.6, 2255.0], [52.7, 2258.0], [52.8, 2260.0], [52.9, 2260.0], [53.0, 2260.0], [53.1, 2262.0], [53.2, 2263.0], [53.3, 2266.0], [53.4, 2267.0], [53.5, 2280.0], [53.6, 2280.0], [53.7, 2281.0], [53.8, 2285.0], [53.9, 2295.0], [54.0, 2298.0], [54.1, 2308.0], [54.2, 2321.0], [54.3, 2322.0], [54.4, 2322.0], [54.5, 2328.0], [54.6, 2335.0], [54.7, 2344.0], [54.8, 2344.0], [54.9, 2348.0], [55.0, 2350.0], [55.1, 2351.0], [55.2, 2355.0], [55.3, 2355.0], [55.4, 2362.0], [55.5, 2363.0], [55.6, 2365.0], [55.7, 2366.0], [55.8, 2371.0], [55.9, 2374.0], [56.0, 2376.0], [56.1, 2377.0], [56.2, 2381.0], [56.3, 2382.0], [56.4, 2384.0], [56.5, 2385.0], [56.6, 2388.0], [56.7, 2389.0], [56.8, 2389.0], [56.9, 2389.0], [57.0, 2390.0], [57.1, 2390.0], [57.2, 2393.0], [57.3, 2394.0], [57.4, 2395.0], [57.5, 2397.0], [57.6, 2398.0], [57.7, 2400.0], [57.8, 2402.0], [57.9, 2402.0], [58.0, 2404.0], [58.1, 2406.0], [58.2, 2410.0], [58.3, 2412.0], [58.4, 2414.0], [58.5, 2419.0], [58.6, 2420.0], [58.7, 2425.0], [58.8, 2426.0], [58.9, 2431.0], [59.0, 2432.0], [59.1, 2435.0], [59.2, 2436.0], [59.3, 2441.0], [59.4, 2444.0], [59.5, 2463.0], [59.6, 2465.0], [59.7, 2465.0], [59.8, 2466.0], [59.9, 2467.0], [60.0, 2472.0], [60.1, 2473.0], [60.2, 2475.0], [60.3, 2476.0], [60.4, 2478.0], [60.5, 2479.0], [60.6, 2480.0], [60.7, 2480.0], [60.8, 2480.0], [60.9, 2482.0], [61.0, 2486.0], [61.1, 2489.0], [61.2, 2493.0], [61.3, 2495.0], [61.4, 2496.0], [61.5, 2499.0], [61.6, 2504.0], [61.7, 2505.0], [61.8, 2510.0], [61.9, 2510.0], [62.0, 2513.0], [62.1, 2514.0], [62.2, 2514.0], [62.3, 2520.0], [62.4, 2527.0], [62.5, 2536.0], [62.6, 2536.0], [62.7, 2539.0], [62.8, 2540.0], [62.9, 2544.0], [63.0, 2553.0], [63.1, 2558.0], [63.2, 2567.0], [63.3, 2579.0], [63.4, 2584.0], [63.5, 2590.0], [63.6, 2591.0], [63.7, 2600.0], [63.8, 2607.0], [63.9, 2608.0], [64.0, 2610.0], [64.1, 2622.0], [64.2, 2629.0], [64.3, 2630.0], [64.4, 2632.0], [64.5, 2642.0], [64.6, 2642.0], [64.7, 2650.0], [64.8, 2651.0], [64.9, 2655.0], [65.0, 2673.0], [65.1, 2676.0], [65.2, 2676.0], [65.3, 2676.0], [65.4, 2679.0], [65.5, 2682.0], [65.6, 2687.0], [65.7, 2690.0], [65.8, 2691.0], [65.9, 2695.0], [66.0, 2695.0], [66.1, 2698.0], [66.2, 2700.0], [66.3, 2700.0], [66.4, 2708.0], [66.5, 2711.0], [66.6, 2716.0], [66.7, 2724.0], [66.8, 2725.0], [66.9, 2733.0], [67.0, 2738.0], [67.1, 2740.0], [67.2, 2746.0], [67.3, 2757.0], [67.4, 2758.0], [67.5, 2759.0], [67.6, 2759.0], [67.7, 2763.0], [67.8, 2766.0], [67.9, 2769.0], [68.0, 2774.0], [68.1, 2775.0], [68.2, 2776.0], [68.3, 2777.0], [68.4, 2778.0], [68.5, 2782.0], [68.6, 2786.0], [68.7, 2787.0], [68.8, 2788.0], [68.9, 2792.0], [69.0, 2795.0], [69.1, 2798.0], [69.2, 2798.0], [69.3, 2800.0], [69.4, 2805.0], [69.5, 2806.0], [69.6, 2807.0], [69.7, 2825.0], [69.8, 2848.0], [69.9, 2849.0], [70.0, 2850.0], [70.1, 2851.0], [70.2, 2857.0], [70.3, 2859.0], [70.4, 2859.0], [70.5, 2862.0], [70.6, 2863.0], [70.7, 2871.0], [70.8, 2879.0], [70.9, 2885.0], [71.0, 2885.0], [71.1, 2886.0], [71.2, 2890.0], [71.3, 2894.0], [71.4, 2906.0], [71.5, 2910.0], [71.6, 2920.0], [71.7, 2928.0], [71.8, 2929.0], [71.9, 2929.0], [72.0, 2931.0], [72.1, 2932.0], [72.2, 2940.0], [72.3, 2972.0], [72.4, 2972.0], [72.5, 2973.0], [72.6, 2973.0], [72.7, 2975.0], [72.8, 2978.0], [72.9, 2978.0], [73.0, 2981.0], [73.1, 2987.0], [73.2, 2988.0], [73.3, 3010.0], [73.4, 3013.0], [73.5, 3023.0], [73.6, 3028.0], [73.7, 3028.0], [73.8, 3032.0], [73.9, 3033.0], [74.0, 3035.0], [74.1, 3053.0], [74.2, 3056.0], [74.3, 3059.0], [74.4, 3064.0], [74.5, 3069.0], [74.6, 3073.0], [74.7, 3074.0], [74.8, 3076.0], [74.9, 3083.0], [75.0, 3086.0], [75.1, 3088.0], [75.2, 3096.0], [75.3, 3098.0], [75.4, 3100.0], [75.5, 3108.0], [75.6, 3124.0], [75.7, 3125.0], [75.8, 3143.0], [75.9, 3145.0], [76.0, 3148.0], [76.1, 3158.0], [76.2, 3164.0], [76.3, 3166.0], [76.4, 3166.0], [76.5, 3166.0], [76.6, 3171.0], [76.7, 3174.0], [76.8, 3184.0], [76.9, 3193.0], [77.0, 3193.0], [77.1, 3195.0], [77.2, 3200.0], [77.3, 3208.0], [77.4, 3220.0], [77.5, 3223.0], [77.6, 3238.0], [77.7, 3246.0], [77.8, 3250.0], [77.9, 3260.0], [78.0, 3261.0], [78.1, 3268.0], [78.2, 3270.0], [78.3, 3281.0], [78.4, 3309.0], [78.5, 3309.0], [78.6, 3336.0], [78.7, 3353.0], [78.8, 3354.0], [78.9, 3391.0], [79.0, 3396.0], [79.1, 3424.0], [79.2, 3431.0], [79.3, 3444.0], [79.4, 3447.0], [79.5, 3448.0], [79.6, 3514.0], [79.7, 3533.0], [79.8, 3540.0], [79.9, 3545.0], [80.0, 3554.0], [80.1, 3561.0], [80.2, 3587.0], [80.3, 3589.0], [80.4, 3595.0], [80.5, 3597.0], [80.6, 3610.0], [80.7, 3612.0], [80.8, 3632.0], [80.9, 3633.0], [81.0, 3648.0], [81.1, 3652.0], [81.2, 3685.0], [81.3, 3694.0], [81.4, 3696.0], [81.5, 3705.0], [81.6, 3709.0], [81.7, 3726.0], [81.8, 3727.0], [81.9, 3749.0], [82.0, 3750.0], [82.1, 3755.0], [82.2, 3766.0], [82.3, 3803.0], [82.4, 3808.0], [82.5, 3846.0], [82.6, 3847.0], [82.7, 3863.0], [82.8, 3863.0], [82.9, 3869.0], [83.0, 3874.0], [83.1, 3883.0], [83.2, 3906.0], [83.3, 3933.0], [83.4, 3934.0], [83.5, 3946.0], [83.6, 3966.0], [83.7, 3968.0], [83.8, 3991.0], [83.9, 3992.0], [84.0, 4005.0], [84.1, 4022.0], [84.2, 4031.0], [84.3, 4038.0], [84.4, 4040.0], [84.5, 4042.0], [84.6, 4071.0], [84.7, 4077.0], [84.8, 4091.0], [84.9, 4098.0], [85.0, 4099.0], [85.1, 4108.0], [85.2, 4111.0], [85.3, 4112.0], [85.4, 4115.0], [85.5, 4118.0], [85.6, 4122.0], [85.7, 4126.0], [85.8, 4133.0], [85.9, 4137.0], [86.0, 4142.0], [86.1, 4144.0], [86.2, 4176.0], [86.3, 4178.0], [86.4, 4187.0], [86.5, 4188.0], [86.6, 4191.0], [86.7, 4196.0], [86.8, 4198.0], [86.9, 4219.0], [87.0, 4225.0], [87.1, 4232.0], [87.2, 4237.0], [87.3, 4273.0], [87.4, 4273.0], [87.5, 4291.0], [87.6, 4300.0], [87.7, 4309.0], [87.8, 4321.0], [87.9, 4392.0], [88.0, 4395.0], [88.1, 4432.0], [88.2, 4442.0], [88.3, 4479.0], [88.4, 4486.0], [88.5, 4487.0], [88.6, 4490.0], [88.7, 4496.0], [88.8, 4512.0], [88.9, 4523.0], [89.0, 4531.0], [89.1, 4544.0], [89.2, 4548.0], [89.3, 4551.0], [89.4, 4558.0], [89.5, 4560.0], [89.6, 4562.0], [89.7, 4568.0], [89.8, 4579.0], [89.9, 4596.0], [90.0, 4601.0], [90.1, 4603.0], [90.2, 4607.0], [90.3, 4658.0], [90.4, 4664.0], [90.5, 4668.0], [90.6, 4669.0], [90.7, 4673.0], [90.8, 4693.0], [90.9, 4695.0], [91.0, 4703.0], [91.1, 4713.0], [91.2, 4720.0], [91.3, 4727.0], [91.4, 4728.0], [91.5, 4735.0], [91.6, 4807.0], [91.7, 4820.0], [91.8, 4836.0], [91.9, 4853.0], [92.0, 4864.0], [92.1, 4877.0], [92.2, 4877.0], [92.3, 4893.0], [92.4, 4898.0], [92.5, 4907.0], [92.6, 4911.0], [92.7, 4912.0], [92.8, 4932.0], [92.9, 4945.0], [93.0, 4953.0], [93.1, 4954.0], [93.2, 4971.0], [93.3, 4983.0], [93.4, 4983.0], [93.5, 4984.0], [93.6, 4993.0], [93.7, 4996.0], [93.8, 4996.0], [93.9, 5010.0], [94.0, 5011.0], [94.1, 5030.0], [94.2, 5048.0], [94.3, 5050.0], [94.4, 5060.0], [94.5, 5062.0], [94.6, 5076.0], [94.7, 5104.0], [94.8, 5122.0], [94.9, 5127.0], [95.0, 5128.0], [95.1, 5134.0], [95.2, 5136.0], [95.3, 5180.0], [95.4, 5190.0], [95.5, 5196.0], [95.6, 5205.0], [95.7, 5213.0], [95.8, 5248.0], [95.9, 5254.0], [96.0, 5274.0], [96.1, 5304.0], [96.2, 5364.0], [96.3, 5391.0], [96.4, 5407.0], [96.5, 5410.0], [96.6, 5411.0], [96.7, 5434.0], [96.8, 5441.0], [96.9, 5455.0], [97.0, 5466.0], [97.1, 5467.0], [97.2, 5515.0], [97.3, 5562.0], [97.4, 5572.0], [97.5, 5578.0], [97.6, 5585.0], [97.7, 5620.0], [97.8, 5696.0], [97.9, 5720.0], [98.0, 5778.0], [98.1, 5849.0], [98.2, 5850.0], [98.3, 5994.0], [98.4, 6036.0], [98.5, 6058.0], [98.6, 6077.0], [98.7, 6080.0], [98.8, 6098.0], [98.9, 6134.0], [99.0, 6374.0], [99.1, 6428.0], [99.2, 6550.0], [99.3, 6552.0], [99.4, 6575.0], [99.5, 6741.0], [99.6, 6802.0], [99.7, 7108.0], [99.8, 7172.0], [99.9, 7362.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 88.0, "series": [{"data": [[0.0, 88.0], [600.0, 5.0], [700.0, 10.0], [800.0, 14.0], [900.0, 9.0], [1000.0, 17.0], [1100.0, 23.0], [1200.0, 27.0], [1300.0, 18.0], [1400.0, 29.0], [1500.0, 39.0], [1600.0, 35.0], [1700.0, 31.0], [1800.0, 25.0], [1900.0, 33.0], [2000.0, 39.0], [2100.0, 23.0], [2200.0, 32.0], [2300.0, 36.0], [2400.0, 39.0], [2500.0, 21.0], [2600.0, 25.0], [2700.0, 31.0], [2800.0, 21.0], [2900.0, 19.0], [3000.0, 21.0], [3100.0, 18.0], [3200.0, 13.0], [3300.0, 7.0], [3400.0, 5.0], [3500.0, 10.0], [3600.0, 9.0], [3700.0, 8.0], [3800.0, 9.0], [3900.0, 8.0], [4000.0, 11.0], [4100.0, 18.0], [4200.0, 7.0], [4300.0, 5.0], [4400.0, 7.0], [4500.0, 12.0], [4600.0, 10.0], [4800.0, 9.0], [4700.0, 6.0], [4900.0, 14.0], [5000.0, 8.0], [5100.0, 9.0], [5300.0, 3.0], [5200.0, 5.0], [5400.0, 8.0], [5500.0, 5.0], [5600.0, 2.0], [5700.0, 2.0], [5800.0, 2.0], [5900.0, 1.0], [6000.0, 5.0], [6100.0, 1.0], [6300.0, 1.0], [6500.0, 3.0], [6400.0, 1.0], [6700.0, 1.0], [6800.0, 1.0], [7100.0, 2.0], [7300.0, 1.0], [100.0, 28.0], [200.0, 5.0], [300.0, 6.0], [500.0, 4.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 127.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 717.0, "series": [{"data": [[0.0, 127.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 156.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 717.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.8449999999997, "minX": 1.75636776E12, "maxY": 500.8449999999997, "series": [{"data": [[1.75636776E12, 500.8449999999997]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636776E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 62.0, "minX": 1.0, "maxY": 7362.0, "series": [{"data": [[2.0, 7108.0], [3.0, 7172.0], [4.0, 6428.0], [5.0, 6802.0], [7.0, 6645.5], [8.0, 6374.0], [9.0, 6575.0], [10.0, 6552.0], [11.0, 6058.0], [14.0, 5821.666666666667], [15.0, 5778.0], [16.0, 6080.0], [17.0, 6098.0], [19.0, 5130.5], [20.0, 5515.0], [21.0, 5994.0], [22.0, 5274.0], [23.0, 5572.0], [26.0, 5453.0], [27.0, 5122.0], [28.0, 5410.0], [29.0, 5850.0], [31.0, 5220.5], [32.0, 5696.0], [35.0, 5104.0], [34.0, 5074.5], [37.0, 5011.0], [36.0, 3968.0], [41.0, 4392.0], [40.0, 5466.5], [43.0, 5180.0], [45.0, 4836.0], [44.0, 5620.0], [47.0, 5145.0], [48.0, 5180.0], [50.0, 4900.5], [55.0, 4947.4], [63.0, 4727.0], [67.0, 5441.0], [65.0, 5298.0], [71.0, 5190.0], [70.0, 4560.0], [69.0, 4983.0], [68.0, 5162.875], [75.0, 4237.0], [73.0, 4577.5], [78.0, 5136.0], [76.0, 5127.0], [81.0, 4273.0], [80.0, 4810.5], [87.0, 4670.166666666667], [90.0, 4996.0], [89.0, 4191.0], [88.0, 4144.0], [93.0, 4807.0], [92.0, 4759.5], [98.0, 4187.0], [96.0, 4669.0], [103.0, 4454.0], [102.0, 4833.5], [100.0, 4971.0], [107.0, 4111.0], [109.0, 4573.0], [114.0, 4142.0], [113.0, 4462.0], [118.0, 4548.0], [117.0, 4835.666666666667], [122.0, 4893.0], [121.0, 4747.333333333333], [127.0, 4343.333333333333], [126.0, 4898.0], [125.0, 3966.0], [135.0, 3838.0], [133.0, 4040.0], [132.0, 4820.0], [131.0, 4392.0], [130.0, 4042.0], [129.0, 4721.5], [142.0, 3750.0], [141.0, 3883.0], [140.0, 4263.5], [138.0, 4309.0], [137.0, 4198.0], [151.0, 4568.0], [150.0, 4558.0], [149.0, 3985.5], [147.0, 4603.0], [146.0, 3986.25], [159.0, 4315.0], [157.0, 4496.0], [156.0, 4099.0], [155.0, 4459.5], [153.0, 3883.5], [167.0, 4014.5], [165.0, 4005.6666666666665], [162.0, 4091.0], [161.0, 4049.0], [183.0, 3570.6666666666665], [180.0, 4024.6666666666665], [179.0, 4219.0], [176.0, 3857.777777777778], [191.0, 3874.0], [190.0, 3648.0], [189.0, 3841.0], [186.0, 3837.0], [184.0, 4137.0], [198.0, 3497.5], [194.0, 3409.0], [193.0, 3143.0], [201.0, 3595.0], [200.0, 3517.0], [215.0, 3412.6666666666665], [213.0, 2972.0], [211.0, 2981.0], [210.0, 3705.0], [209.0, 3013.0], [208.0, 3573.4285714285716], [220.0, 3610.0], [219.0, 3589.0], [218.0, 2849.0], [217.0, 2894.0], [216.0, 3431.0], [231.0, 3074.0], [230.0, 3238.0], [229.0, 3270.0], [228.0, 3309.0], [227.0, 3309.0], [226.0, 3554.0], [225.0, 3561.0], [224.0, 3141.25], [239.0, 2579.0], [238.0, 2608.0], [237.0, 3164.0], [236.0, 3282.5], [234.0, 2911.0], [232.0, 3193.0], [247.0, 3059.0], [246.0, 2814.0], [242.0, 2824.5], [240.0, 3100.0], [250.0, 3261.0], [249.0, 3035.0], [248.0, 3250.0], [270.0, 2420.0], [271.0, 2973.0], [269.0, 3195.0], [268.0, 3077.0], [266.0, 2978.0], [265.0, 2431.0], [264.0, 2877.0], [261.0, 3088.2999999999997], [258.0, 2480.0], [286.0, 3060.0], [287.0, 2266.0], [284.0, 3246.0], [275.0, 2384.0], [274.0, 3148.0], [273.0, 3171.0], [272.0, 2388.0], [283.0, 3268.0], [282.0, 3069.0], [281.0, 3166.0], [280.0, 2344.0], [279.0, 3145.0], [278.0, 2727.0], [276.0, 3158.0], [300.0, 2578.5], [302.0, 2931.0], [303.0, 2940.0], [301.0, 2630.0], [298.0, 2586.5], [296.0, 2763.0], [295.0, 1624.0], [289.0, 2736.5], [291.0, 3023.0], [290.0, 3124.0], [294.0, 2603.0], [292.0, 2238.0], [318.0, 3030.0], [319.0, 1197.0], [316.0, 1242.0], [307.0, 2863.0], [306.0, 2906.5], [304.0, 1254.0], [315.0, 3053.0], [314.0, 1531.0], [313.0, 1534.0], [312.0, 2906.0], [311.0, 1521.0], [310.0, 3074.5], [308.0, 2885.0], [332.0, 1453.0], [334.0, 1442.0], [335.0, 964.0], [333.0, 1446.0], [331.0, 2707.6666666666665], [328.0, 1461.0], [327.0, 2910.0], [320.0, 2871.0], [323.0, 2680.5], [321.0, 3010.0], [326.0, 2879.0], [325.0, 2733.0], [324.0, 2859.0], [338.0, 1132.0], [351.0, 2555.0], [348.0, 2024.0], [347.0, 2757.0], [346.0, 2929.0], [345.0, 2384.0], [343.0, 2726.5], [342.0, 2932.0], [340.0, 2024.0], [337.0, 1134.0], [336.0, 1516.0], [366.0, 2726.0], [362.0, 2171.5], [360.0, 2490.0], [358.0, 2716.0], [356.0, 2890.0], [355.0, 2742.3333333333335], [352.0, 1970.0], [371.0, 2155.5], [381.0, 2695.0], [382.0, 2393.0], [380.0, 2516.0], [376.0, 2486.0], [375.0, 2700.0], [374.0, 2480.0], [373.0, 2001.0], [372.0, 2071.0], [369.0, 2725.0], [368.0, 2385.5], [387.0, 2766.6666666666665], [397.0, 2807.0], [399.0, 2650.0], [396.0, 2242.0], [394.0, 1911.5], [393.0, 1430.0], [391.0, 2711.0], [390.0, 1863.5], [388.0, 1319.0], [385.0, 2589.0], [384.0, 2389.0], [415.0, 1917.0], [414.0, 2353.0], [412.0, 2504.0], [411.0, 2774.0], [410.0, 2614.6666666666665], [407.0, 2718.0], [403.0, 1985.6666666666667], [400.0, 2724.0], [419.0, 721.0], [431.0, 2283.0], [429.0, 2575.75], [425.0, 2759.0], [424.0, 2398.0], [423.0, 2632.0], [422.0, 2280.0], [421.0, 2788.0], [420.0, 2782.0], [418.0, 732.0], [417.0, 1876.0], [416.0, 2350.0], [445.0, 2348.0], [447.0, 2157.5], [444.0, 2281.0], [435.0, 2026.0], [432.0, 2030.0], [443.0, 2738.0], [442.0, 2740.0], [441.0, 2590.0], [440.0, 1778.0], [439.0, 2295.0], [438.0, 2022.0], [437.0, 2023.0], [436.0, 2362.0], [463.0, 2286.5], [461.0, 2687.0], [450.0, 2724.0], [449.0, 1745.0], [459.0, 2496.0], [458.0, 1733.0], [457.0, 2260.0], [456.0, 2558.0], [455.0, 2263.0], [454.0, 2292.5], [452.0, 2004.0], [476.0, 2216.0], [479.0, 2489.0], [478.0, 2426.0], [477.0, 2258.0], [473.0, 2674.5], [471.0, 2560.0], [465.0, 2544.0], [464.0, 2210.5], [470.0, 2463.0], [468.0, 2467.0], [467.0, 1714.0], [466.0, 2308.0], [494.0, 2029.5], [493.0, 2465.0], [481.0, 2642.0], [480.0, 2190.0], [491.0, 2092.0], [490.0, 2224.0], [489.0, 2419.0], [488.0, 2610.0], [487.0, 1681.0], [486.0, 2402.0], [485.0, 2288.5], [484.0, 2464.0], [509.0, 2085.0], [511.0, 1816.0], [508.0, 2406.0], [499.0, 1665.0], [498.0, 2584.0], [497.0, 2390.0], [496.0, 1634.0], [506.0, 2539.0], [505.0, 2120.5], [504.0, 2085.0], [502.0, 2607.0], [501.0, 2466.0], [500.0, 2600.0], [538.0, 2423.0], [529.0, 1574.0], [542.0, 1559.0], [543.0, 1368.0], [528.0, 2291.0], [541.0, 1556.0], [536.0, 2044.0], [518.0, 2078.0], [516.0, 2382.0], [515.0, 2390.0], [514.0, 2540.0], [513.0, 2087.0], [512.0, 2262.0], [526.0, 1847.0], [524.0, 1586.0], [523.0, 2482.0], [522.0, 2478.0], [521.0, 2514.0], [520.0, 2255.5], [535.0, 2436.0], [533.0, 2034.6666666666667], [530.0, 2476.0], [573.0, 1419.0], [575.0, 2141.0], [560.0, 1704.0], [572.0, 2029.0], [571.0, 2395.0], [570.0, 1944.0], [569.0, 2131.0], [558.0, 2272.0], [545.0, 2075.0], [544.0, 2107.0], [548.0, 2363.0], [547.0, 2087.0], [551.0, 1972.0], [549.0, 2031.0], [556.0, 2389.0], [555.0, 1958.0], [554.0, 1799.0], [553.0, 2199.0], [566.0, 1962.0], [565.0, 1926.0], [563.0, 2000.5], [561.0, 2397.0], [601.0, 1859.0], [606.0, 2228.0], [607.0, 1189.0], [593.0, 2322.0], [596.0, 1787.6666666666667], [595.0, 2365.0], [605.0, 1218.0], [604.0, 2158.0], [602.0, 1945.0], [600.0, 2190.0], [583.0, 2326.5], [581.0, 1288.0], [580.0, 1403.0], [579.0, 2240.0], [578.0, 1279.0], [577.0, 2102.0], [576.0, 1414.0], [591.0, 2358.5], [589.0, 2016.0], [588.0, 1251.0], [587.0, 2215.0], [586.0, 2375.0], [584.0, 2377.0], [598.0, 2124.0], [597.0, 1933.0], [632.0, 2220.5], [638.0, 1193.0], [639.0, 1788.0], [626.0, 1858.0], [625.0, 1887.0], [637.0, 2054.6666666666665], [634.0, 2207.0], [633.0, 1217.0], [623.0, 156.0], [610.0, 2270.0], [609.0, 1844.0], [612.0, 2213.0], [611.0, 1909.0], [614.0, 2195.0], [613.0, 2147.0], [622.0, 1992.0], [621.0, 1850.5], [619.0, 1904.5], [618.0, 2260.0], [616.0, 1001.0], [630.0, 2203.0], [629.0, 1343.0], [628.0, 139.0], [627.0, 1138.0], [665.0, 1844.5], [659.0, 1655.0], [670.0, 1634.0], [669.0, 1841.0], [668.0, 645.6666666666666], [655.0, 160.0], [640.0, 1726.0], [642.0, 1771.0], [641.0, 2168.0], [645.0, 1908.5], [643.0, 1670.0], [647.0, 2059.0], [646.0, 2168.0], [654.0, 2124.0], [653.0, 2136.0], [651.0, 2117.0], [650.0, 1254.0], [649.0, 147.0], [648.0, 2160.0], [663.0, 1653.0], [662.0, 999.0], [661.0, 1655.0], [658.0, 1100.5], [656.0, 2060.0], [700.0, 84.0], [703.0, 1735.0], [688.0, 1993.0], [690.0, 1967.0], [689.0, 1131.0], [693.0, 2020.0], [691.0, 1999.0], [702.0, 88.0], [701.0, 1102.0], [699.0, 1583.0], [698.0, 1979.0], [697.0, 1939.0], [696.0, 88.0], [687.0, 79.0], [673.0, 2106.0], [672.0, 1831.5], [677.0, 1680.0], [675.0, 1858.0], [679.0, 1080.5], [678.0, 137.0], [686.0, 2053.0], [685.0, 2023.0], [684.0, 1675.0], [681.0, 1584.0], [680.0, 2096.0], [695.0, 90.0], [694.0, 1425.0], [733.0, 808.0], [734.0, 1394.0], [720.0, 849.0], [724.0, 1862.0], [723.0, 1790.3333333333333], [732.0, 100.0], [731.0, 107.0], [730.0, 1873.0], [729.0, 1868.0], [728.0, 851.0], [711.0, 1616.0], [709.0, 1659.5], [705.0, 1638.5], [719.0, 1841.0], [717.0, 1901.5], [715.0, 1980.0], [714.0, 85.0], [713.0, 1685.0], [712.0, 72.0], [727.0, 65.0], [726.0, 734.0], [765.0, 1762.0], [767.0, 1578.0], [762.0, 1567.5], [760.0, 1579.0], [759.0, 1743.0], [758.0, 984.0], [756.0, 591.5], [752.0, 273.66666666666663], [749.0, 72.0], [738.0, 1584.0], [741.0, 1612.0], [740.0, 1896.0], [748.0, 926.5], [746.0, 1101.0], [745.0, 1536.5], [793.0, 1479.5], [798.0, 934.5], [799.0, 63.0], [786.0, 71.0], [784.0, 1449.0], [788.0, 800.0], [787.0, 1444.0], [796.0, 77.0], [795.0, 69.0], [794.0, 1437.0], [792.0, 86.0], [775.0, 918.0], [773.0, 1192.5], [771.0, 1549.6666666666667], [768.0, 1595.0], [783.0, 629.0], [782.0, 1822.0], [781.0, 1458.0], [780.0, 68.0], [779.0, 74.0], [778.0, 80.0], [777.0, 72.0], [776.0, 1428.0], [790.0, 1489.0], [789.0, 78.0], [825.0, 1232.0], [830.0, 1361.5], [831.0, 1421.0], [816.0, 1464.0], [819.0, 87.0], [818.0, 914.5], [828.0, 1638.0], [827.0, 1202.0], [826.0, 71.0], [824.0, 881.5], [806.0, 379.0], [805.0, 1519.0], [803.0, 1776.0], [802.0, 71.0], [801.0, 73.0], [800.0, 62.0], [815.0, 988.5], [813.0, 1426.0], [812.0, 372.0], [811.0, 1477.0], [810.0, 83.0], [809.0, 1481.0], [808.0, 769.5], [823.0, 1325.0], [821.0, 1476.0], [861.0, 1294.0], [862.0, 191.0], [848.0, 904.0], [850.0, 71.0], [849.0, 131.0], [853.0, 857.0], [851.0, 1533.0], [860.0, 1109.0], [859.0, 1349.0], [858.0, 1237.0], [857.0, 105.0], [856.0, 1660.0], [839.0, 1391.0], [838.0, 1625.0], [837.0, 1276.0], [836.0, 73.0], [834.0, 1485.5], [832.0, 71.0], [846.0, 1459.5], [845.0, 71.0], [842.0, 1687.0], [841.0, 757.0], [855.0, 1185.0], [854.0, 1592.0], [892.0, 1105.0], [867.0, 130.0], [868.0, 1445.0], [879.0, 88.0], [877.0, 623.0], [889.0, 77.0], [888.0, 1498.0], [874.0, 376.0], [873.0, 1541.0], [872.0, 373.77777777777777], [875.0, 136.0], [876.0, 881.0], [895.0, 857.0], [881.0, 599.5], [884.0, 117.5], [883.0, 1017.0], [887.0, 659.0], [885.0, 113.0], [894.0, 65.0], [893.0, 1100.0], [891.0, 815.0], [890.0, 76.0], [925.0, 721.0], [916.0, 685.5], [926.0, 1093.0], [912.0, 90.0], [915.0, 1230.0], [914.0, 71.0], [923.0, 76.0], [921.0, 80.0], [920.0, 860.0], [903.0, 1388.0], [901.0, 80.5], [899.0, 82.5], [897.0, 88.0], [896.0, 87.0], [911.0, 804.0], [910.0, 732.0], [908.0, 82.0], [906.0, 73.0], [905.0, 86.0], [904.0, 83.0], [919.0, 73.0], [918.0, 79.0], [917.0, 891.0], [952.0, 899.0], [957.0, 1093.5], [934.0, 411.5], [932.0, 813.0], [931.0, 1081.0], [930.0, 1082.0], [929.0, 116.0], [928.0, 1207.0], [935.0, 103.0], [943.0, 899.3333333333333], [940.0, 1278.0], [939.0, 80.0], [938.0, 82.0], [937.0, 172.0], [936.0, 927.0], [958.0, 1256.0], [945.0, 737.5], [949.0, 83.0], [948.0, 714.0], [955.0, 354.0], [954.0, 937.0], [953.0, 1154.0], [951.0, 82.0], [950.0, 85.0], [987.0, 778.0], [989.0, 999.0], [985.0, 1094.0], [984.0, 1081.0], [981.0, 327.5], [979.0, 817.0], [978.0, 816.0], [975.0, 936.0], [962.0, 260.0], [961.0, 841.0], [965.0, 1214.0], [964.0, 737.5], [967.0, 718.0], [966.0, 1234.0], [974.0, 791.0], [973.0, 1110.0], [971.0, 105.0], [969.0, 1193.0], [1000.0, 712.3076923076923], [1.0, 7362.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}, {"data": [[500.8449999999997, 2336.384000000002]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11266.666666666666, "minX": 1.75636776E12, "maxY": 27466.666666666668, "series": [{"data": [[1.75636776E12, 11266.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75636776E12, 27466.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636776E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2336.384000000002, "minX": 1.75636776E12, "maxY": 2336.384000000002, "series": [{"data": [[1.75636776E12, 2336.384000000002]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636776E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2336.3459999999973, "minX": 1.75636776E12, "maxY": 2336.3459999999973, "series": [{"data": [[1.75636776E12, 2336.3459999999973]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636776E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1642.085000000001, "minX": 1.75636776E12, "maxY": 1642.085000000001, "series": [{"data": [[1.75636776E12, 1642.085000000001]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636776E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 62.0, "minX": 1.75636776E12, "maxY": 7362.0, "series": [{"data": [[1.75636776E12, 7362.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75636776E12, 4600.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75636776E12, 6371.600000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75636776E12, 5127.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75636776E12, 62.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75636776E12, 2164.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636776E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 849.0, "minX": 3.0, "maxY": 7172.0, "series": [{"data": [[323.0, 1161.0], [356.0, 2262.5], [12.0, 6401.0], [3.0, 7172.0], [26.0, 849.0], [110.0, 4315.0], [112.0, 3161.0], [58.0, 5200.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 356.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 849.0, "minX": 3.0, "maxY": 7172.0, "series": [{"data": [[323.0, 1161.0], [356.0, 2262.5], [12.0, 6401.0], [3.0, 7172.0], [26.0, 849.0], [110.0, 4315.0], [112.0, 3161.0], [58.0, 5200.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 356.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636776E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636776E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636776E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636776E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636776E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636776E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636776E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636776E12, 16.666666666666668]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636776E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636776E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636776E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636776E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

