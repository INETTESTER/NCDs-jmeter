/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "maxY": 4507.0, "series": [{"data": [[0.0, 24.0], [0.1, 24.0], [0.2, 24.0], [0.3, 24.0], [0.4, 25.0], [0.5, 25.0], [0.6, 25.0], [0.7, 25.0], [0.8, 26.0], [0.9, 26.0], [1.0, 26.0], [1.1, 26.0], [1.2, 26.0], [1.3, 26.0], [1.4, 26.0], [1.5, 26.0], [1.6, 27.0], [1.7, 27.0], [1.8, 27.0], [1.9, 27.0], [2.0, 27.0], [2.1, 27.0], [2.2, 27.0], [2.3, 27.0], [2.4, 27.0], [2.5, 28.0], [2.6, 28.0], [2.7, 28.0], [2.8, 28.0], [2.9, 28.0], [3.0, 28.0], [3.1, 28.0], [3.2, 28.0], [3.3, 28.0], [3.4, 28.0], [3.5, 28.0], [3.6, 29.0], [3.7, 29.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 29.0], [4.2, 29.0], [4.3, 29.0], [4.4, 29.0], [4.5, 29.0], [4.6, 29.0], [4.7, 29.0], [4.8, 29.0], [4.9, 29.0], [5.0, 29.0], [5.1, 29.0], [5.2, 29.0], [5.3, 29.0], [5.4, 30.0], [5.5, 30.0], [5.6, 30.0], [5.7, 30.0], [5.8, 30.0], [5.9, 30.0], [6.0, 30.0], [6.1, 30.0], [6.2, 30.0], [6.3, 30.0], [6.4, 31.0], [6.5, 31.0], [6.6, 31.0], [6.7, 31.0], [6.8, 31.0], [6.9, 31.0], [7.0, 31.0], [7.1, 31.0], [7.2, 31.0], [7.3, 31.0], [7.4, 31.0], [7.5, 31.0], [7.6, 31.0], [7.7, 31.0], [7.8, 31.0], [7.9, 31.0], [8.0, 32.0], [8.1, 32.0], [8.2, 32.0], [8.3, 32.0], [8.4, 32.0], [8.5, 32.0], [8.6, 32.0], [8.7, 32.0], [8.8, 32.0], [8.9, 32.0], [9.0, 33.0], [9.1, 33.0], [9.2, 33.0], [9.3, 33.0], [9.4, 33.0], [9.5, 33.0], [9.6, 33.0], [9.7, 33.0], [9.8, 33.0], [9.9, 33.0], [10.0, 33.0], [10.1, 33.0], [10.2, 33.0], [10.3, 33.0], [10.4, 34.0], [10.5, 34.0], [10.6, 34.0], [10.7, 34.0], [10.8, 34.0], [10.9, 34.0], [11.0, 34.0], [11.1, 34.0], [11.2, 34.0], [11.3, 34.0], [11.4, 34.0], [11.5, 34.0], [11.6, 35.0], [11.7, 35.0], [11.8, 35.0], [11.9, 35.0], [12.0, 35.0], [12.1, 35.0], [12.2, 35.0], [12.3, 36.0], [12.4, 36.0], [12.5, 36.0], [12.6, 36.0], [12.7, 36.0], [12.8, 36.0], [12.9, 36.0], [13.0, 37.0], [13.1, 37.0], [13.2, 37.0], [13.3, 37.0], [13.4, 37.0], [13.5, 37.0], [13.6, 37.0], [13.7, 37.0], [13.8, 37.0], [13.9, 37.0], [14.0, 37.0], [14.1, 37.0], [14.2, 38.0], [14.3, 38.0], [14.4, 38.0], [14.5, 38.0], [14.6, 38.0], [14.7, 38.0], [14.8, 38.0], [14.9, 38.0], [15.0, 38.0], [15.1, 39.0], [15.2, 39.0], [15.3, 39.0], [15.4, 39.0], [15.5, 39.0], [15.6, 39.0], [15.7, 39.0], [15.8, 39.0], [15.9, 39.0], [16.0, 40.0], [16.1, 40.0], [16.2, 40.0], [16.3, 40.0], [16.4, 40.0], [16.5, 40.0], [16.6, 40.0], [16.7, 40.0], [16.8, 41.0], [16.9, 41.0], [17.0, 41.0], [17.1, 41.0], [17.2, 41.0], [17.3, 41.0], [17.4, 41.0], [17.5, 41.0], [17.6, 41.0], [17.7, 41.0], [17.8, 41.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 43.0], [19.2, 43.0], [19.3, 43.0], [19.4, 43.0], [19.5, 43.0], [19.6, 43.0], [19.7, 43.0], [19.8, 43.0], [19.9, 43.0], [20.0, 44.0], [20.1, 44.0], [20.2, 44.0], [20.3, 44.0], [20.4, 44.0], [20.5, 44.0], [20.6, 44.0], [20.7, 44.0], [20.8, 44.0], [20.9, 44.0], [21.0, 44.0], [21.1, 45.0], [21.2, 45.0], [21.3, 45.0], [21.4, 45.0], [21.5, 45.0], [21.6, 45.0], [21.7, 45.0], [21.8, 46.0], [21.9, 46.0], [22.0, 46.0], [22.1, 46.0], [22.2, 46.0], [22.3, 46.0], [22.4, 46.0], [22.5, 47.0], [22.6, 47.0], [22.7, 47.0], [22.8, 47.0], [22.9, 48.0], [23.0, 48.0], [23.1, 48.0], [23.2, 48.0], [23.3, 48.0], [23.4, 48.0], [23.5, 48.0], [23.6, 48.0], [23.7, 49.0], [23.8, 49.0], [23.9, 49.0], [24.0, 49.0], [24.1, 49.0], [24.2, 50.0], [24.3, 50.0], [24.4, 50.0], [24.5, 50.0], [24.6, 50.0], [24.7, 50.0], [24.8, 51.0], [24.9, 51.0], [25.0, 51.0], [25.1, 51.0], [25.2, 51.0], [25.3, 52.0], [25.4, 53.0], [25.5, 53.0], [25.6, 53.0], [25.7, 54.0], [25.8, 54.0], [25.9, 55.0], [26.0, 55.0], [26.1, 55.0], [26.2, 55.0], [26.3, 56.0], [26.4, 56.0], [26.5, 56.0], [26.6, 56.0], [26.7, 57.0], [26.8, 57.0], [26.9, 57.0], [27.0, 58.0], [27.1, 58.0], [27.2, 58.0], [27.3, 58.0], [27.4, 60.0], [27.5, 60.0], [27.6, 61.0], [27.7, 61.0], [27.8, 62.0], [27.9, 64.0], [28.0, 64.0], [28.1, 64.0], [28.2, 65.0], [28.3, 67.0], [28.4, 68.0], [28.5, 71.0], [28.6, 73.0], [28.7, 74.0], [28.8, 77.0], [28.9, 79.0], [29.0, 82.0], [29.1, 84.0], [29.2, 90.0], [29.3, 91.0], [29.4, 95.0], [29.5, 100.0], [29.6, 101.0], [29.7, 107.0], [29.8, 123.0], [29.9, 129.0], [30.0, 135.0], [30.1, 142.0], [30.2, 143.0], [30.3, 145.0], [30.4, 148.0], [30.5, 150.0], [30.6, 153.0], [30.7, 155.0], [30.8, 169.0], [30.9, 170.0], [31.0, 182.0], [31.1, 185.0], [31.2, 188.0], [31.3, 191.0], [31.4, 194.0], [31.5, 195.0], [31.6, 198.0], [31.7, 199.0], [31.8, 200.0], [31.9, 204.0], [32.0, 209.0], [32.1, 219.0], [32.2, 232.0], [32.3, 235.0], [32.4, 237.0], [32.5, 238.0], [32.6, 246.0], [32.7, 246.0], [32.8, 253.0], [32.9, 255.0], [33.0, 262.0], [33.1, 270.0], [33.2, 271.0], [33.3, 272.0], [33.4, 275.0], [33.5, 279.0], [33.6, 280.0], [33.7, 292.0], [33.8, 293.0], [33.9, 293.0], [34.0, 298.0], [34.1, 302.0], [34.2, 303.0], [34.3, 312.0], [34.4, 316.0], [34.5, 317.0], [34.6, 317.0], [34.7, 318.0], [34.8, 318.0], [34.9, 319.0], [35.0, 320.0], [35.1, 324.0], [35.2, 327.0], [35.3, 339.0], [35.4, 339.0], [35.5, 342.0], [35.6, 342.0], [35.7, 347.0], [35.8, 349.0], [35.9, 364.0], [36.0, 364.0], [36.1, 383.0], [36.2, 395.0], [36.3, 417.0], [36.4, 474.0], [36.5, 489.0], [36.6, 496.0], [36.7, 566.0], [36.8, 575.0], [36.9, 600.0], [37.0, 604.0], [37.1, 608.0], [37.2, 609.0], [37.3, 611.0], [37.4, 612.0], [37.5, 619.0], [37.6, 623.0], [37.7, 627.0], [37.8, 633.0], [37.9, 644.0], [38.0, 649.0], [38.1, 652.0], [38.2, 657.0], [38.3, 681.0], [38.4, 684.0], [38.5, 687.0], [38.6, 689.0], [38.7, 698.0], [38.8, 698.0], [38.9, 709.0], [39.0, 725.0], [39.1, 842.0], [39.2, 857.0], [39.3, 890.0], [39.4, 893.0], [39.5, 925.0], [39.6, 926.0], [39.7, 937.0], [39.8, 944.0], [39.9, 949.0], [40.0, 959.0], [40.1, 964.0], [40.2, 969.0], [40.3, 973.0], [40.4, 982.0], [40.5, 988.0], [40.6, 992.0], [40.7, 1011.0], [40.8, 1012.0], [40.9, 1027.0], [41.0, 1030.0], [41.1, 1038.0], [41.2, 1039.0], [41.3, 1046.0], [41.4, 1046.0], [41.5, 1056.0], [41.6, 1058.0], [41.7, 1070.0], [41.8, 1074.0], [41.9, 1074.0], [42.0, 1075.0], [42.1, 1078.0], [42.2, 1095.0], [42.3, 1098.0], [42.4, 1099.0], [42.5, 1107.0], [42.6, 1111.0], [42.7, 1120.0], [42.8, 1120.0], [42.9, 1140.0], [43.0, 1142.0], [43.1, 1148.0], [43.2, 1150.0], [43.3, 1215.0], [43.4, 1216.0], [43.5, 1224.0], [43.6, 1227.0], [43.7, 1246.0], [43.8, 1247.0], [43.9, 1252.0], [44.0, 1254.0], [44.1, 1256.0], [44.2, 1256.0], [44.3, 1314.0], [44.4, 1315.0], [44.5, 1325.0], [44.6, 1326.0], [44.7, 1337.0], [44.8, 1339.0], [44.9, 1345.0], [45.0, 1356.0], [45.1, 1371.0], [45.2, 1381.0], [45.3, 1386.0], [45.4, 1432.0], [45.5, 1461.0], [45.6, 1546.0], [45.7, 1580.0], [45.8, 1599.0], [45.9, 1609.0], [46.0, 1617.0], [46.1, 1645.0], [46.2, 1645.0], [46.3, 1647.0], [46.4, 1651.0], [46.5, 1654.0], [46.6, 1657.0], [46.7, 1658.0], [46.8, 1658.0], [46.9, 1661.0], [47.0, 1667.0], [47.1, 1668.0], [47.2, 1670.0], [47.3, 1672.0], [47.4, 1675.0], [47.5, 1676.0], [47.6, 1678.0], [47.7, 1680.0], [47.8, 1681.0], [47.9, 1685.0], [48.0, 1689.0], [48.1, 1694.0], [48.2, 1696.0], [48.3, 1698.0], [48.4, 1701.0], [48.5, 1703.0], [48.6, 1703.0], [48.7, 1706.0], [48.8, 1707.0], [48.9, 1710.0], [49.0, 1712.0], [49.1, 1717.0], [49.2, 1717.0], [49.3, 1721.0], [49.4, 1726.0], [49.5, 1726.0], [49.6, 1730.0], [49.7, 1736.0], [49.8, 1736.0], [49.9, 1740.0], [50.0, 1741.0], [50.1, 1742.0], [50.2, 1742.0], [50.3, 1746.0], [50.4, 1748.0], [50.5, 1750.0], [50.6, 1753.0], [50.7, 1755.0], [50.8, 1756.0], [50.9, 1759.0], [51.0, 1765.0], [51.1, 1768.0], [51.2, 1769.0], [51.3, 1774.0], [51.4, 1775.0], [51.5, 1778.0], [51.6, 1781.0], [51.7, 1785.0], [51.8, 1789.0], [51.9, 1798.0], [52.0, 1800.0], [52.1, 1804.0], [52.2, 1808.0], [52.3, 1827.0], [52.4, 1829.0], [52.5, 1830.0], [52.6, 1834.0], [52.7, 1852.0], [52.8, 1853.0], [52.9, 1872.0], [53.0, 1876.0], [53.1, 1878.0], [53.2, 1879.0], [53.3, 1880.0], [53.4, 1880.0], [53.5, 1881.0], [53.6, 1882.0], [53.7, 1885.0], [53.8, 1888.0], [53.9, 1889.0], [54.0, 1890.0], [54.1, 1892.0], [54.2, 1894.0], [54.3, 1902.0], [54.4, 1902.0], [54.5, 1903.0], [54.6, 1904.0], [54.7, 1906.0], [54.8, 1907.0], [54.9, 1909.0], [55.0, 1910.0], [55.1, 1925.0], [55.2, 1927.0], [55.3, 1936.0], [55.4, 1937.0], [55.5, 1947.0], [55.6, 1970.0], [55.7, 2010.0], [55.8, 2012.0], [55.9, 2022.0], [56.0, 2024.0], [56.1, 2029.0], [56.2, 2031.0], [56.3, 2031.0], [56.4, 2032.0], [56.5, 2042.0], [56.6, 2042.0], [56.7, 2045.0], [56.8, 2045.0], [56.9, 2048.0], [57.0, 2049.0], [57.1, 2051.0], [57.2, 2057.0], [57.3, 2064.0], [57.4, 2066.0], [57.5, 2070.0], [57.6, 2075.0], [57.7, 2077.0], [57.8, 2078.0], [57.9, 2080.0], [58.0, 2081.0], [58.1, 2091.0], [58.2, 2103.0], [58.3, 2109.0], [58.4, 2111.0], [58.5, 2129.0], [58.6, 2133.0], [58.7, 2142.0], [58.8, 2154.0], [58.9, 2164.0], [59.0, 2167.0], [59.1, 2176.0], [59.2, 2185.0], [59.3, 2199.0], [59.4, 2204.0], [59.5, 2204.0], [59.6, 2217.0], [59.7, 2217.0], [59.8, 2228.0], [59.9, 2269.0], [60.0, 2282.0], [60.1, 2293.0], [60.2, 2293.0], [60.3, 2296.0], [60.4, 2296.0], [60.5, 2298.0], [60.6, 2301.0], [60.7, 2304.0], [60.8, 2313.0], [60.9, 2344.0], [61.0, 2355.0], [61.1, 2358.0], [61.2, 2358.0], [61.3, 2368.0], [61.4, 2375.0], [61.5, 2378.0], [61.6, 2400.0], [61.7, 2416.0], [61.8, 2417.0], [61.9, 2429.0], [62.0, 2430.0], [62.1, 2439.0], [62.2, 2443.0], [62.3, 2457.0], [62.4, 2460.0], [62.5, 2477.0], [62.6, 2487.0], [62.7, 2497.0], [62.8, 2497.0], [62.9, 2501.0], [63.0, 2514.0], [63.1, 2520.0], [63.2, 2527.0], [63.3, 2530.0], [63.4, 2543.0], [63.5, 2558.0], [63.6, 2558.0], [63.7, 2569.0], [63.8, 2571.0], [63.9, 2576.0], [64.0, 2577.0], [64.1, 2579.0], [64.2, 2583.0], [64.3, 2585.0], [64.4, 2589.0], [64.5, 2590.0], [64.6, 2594.0], [64.7, 2606.0], [64.8, 2607.0], [64.9, 2607.0], [65.0, 2610.0], [65.1, 2613.0], [65.2, 2613.0], [65.3, 2618.0], [65.4, 2619.0], [65.5, 2623.0], [65.6, 2623.0], [65.7, 2642.0], [65.8, 2650.0], [65.9, 2654.0], [66.0, 2655.0], [66.1, 2660.0], [66.2, 2662.0], [66.3, 2667.0], [66.4, 2671.0], [66.5, 2674.0], [66.6, 2675.0], [66.7, 2678.0], [66.8, 2679.0], [66.9, 2681.0], [67.0, 2683.0], [67.1, 2689.0], [67.2, 2693.0], [67.3, 2701.0], [67.4, 2703.0], [67.5, 2712.0], [67.6, 2715.0], [67.7, 2716.0], [67.8, 2721.0], [67.9, 2729.0], [68.0, 2732.0], [68.1, 2735.0], [68.2, 2736.0], [68.3, 2739.0], [68.4, 2742.0], [68.5, 2749.0], [68.6, 2759.0], [68.7, 2781.0], [68.8, 2784.0], [68.9, 2786.0], [69.0, 2794.0], [69.1, 2801.0], [69.2, 2808.0], [69.3, 2817.0], [69.4, 2836.0], [69.5, 2847.0], [69.6, 2850.0], [69.7, 2864.0], [69.8, 2865.0], [69.9, 2874.0], [70.0, 2882.0], [70.1, 2904.0], [70.2, 2909.0], [70.3, 2912.0], [70.4, 2923.0], [70.5, 2950.0], [70.6, 2950.0], [70.7, 2953.0], [70.8, 2958.0], [70.9, 2980.0], [71.0, 2996.0], [71.1, 3017.0], [71.2, 3018.0], [71.3, 3020.0], [71.4, 3030.0], [71.5, 3034.0], [71.6, 3034.0], [71.7, 3055.0], [71.8, 3058.0], [71.9, 3094.0], [72.0, 3101.0], [72.1, 3114.0], [72.2, 3129.0], [72.3, 3142.0], [72.4, 3144.0], [72.5, 3146.0], [72.6, 3148.0], [72.7, 3150.0], [72.8, 3150.0], [72.9, 3156.0], [73.0, 3159.0], [73.1, 3159.0], [73.2, 3160.0], [73.3, 3174.0], [73.4, 3177.0], [73.5, 3187.0], [73.6, 3187.0], [73.7, 3191.0], [73.8, 3197.0], [73.9, 3204.0], [74.0, 3204.0], [74.1, 3205.0], [74.2, 3205.0], [74.3, 3207.0], [74.4, 3207.0], [74.5, 3209.0], [74.6, 3210.0], [74.7, 3220.0], [74.8, 3221.0], [74.9, 3223.0], [75.0, 3226.0], [75.1, 3231.0], [75.2, 3232.0], [75.3, 3237.0], [75.4, 3241.0], [75.5, 3248.0], [75.6, 3250.0], [75.7, 3252.0], [75.8, 3253.0], [75.9, 3258.0], [76.0, 3262.0], [76.1, 3266.0], [76.2, 3266.0], [76.3, 3273.0], [76.4, 3274.0], [76.5, 3275.0], [76.6, 3275.0], [76.7, 3282.0], [76.8, 3285.0], [76.9, 3290.0], [77.0, 3300.0], [77.1, 3302.0], [77.2, 3303.0], [77.3, 3306.0], [77.4, 3306.0], [77.5, 3313.0], [77.6, 3314.0], [77.7, 3315.0], [77.8, 3317.0], [77.9, 3323.0], [78.0, 3326.0], [78.1, 3328.0], [78.2, 3328.0], [78.3, 3337.0], [78.4, 3346.0], [78.5, 3348.0], [78.6, 3348.0], [78.7, 3352.0], [78.8, 3353.0], [78.9, 3361.0], [79.0, 3362.0], [79.1, 3368.0], [79.2, 3369.0], [79.3, 3371.0], [79.4, 3371.0], [79.5, 3374.0], [79.6, 3377.0], [79.7, 3379.0], [79.8, 3382.0], [79.9, 3393.0], [80.0, 3396.0], [80.1, 3397.0], [80.2, 3407.0], [80.3, 3414.0], [80.4, 3414.0], [80.5, 3420.0], [80.6, 3427.0], [80.7, 3429.0], [80.8, 3430.0], [80.9, 3434.0], [81.0, 3434.0], [81.1, 3440.0], [81.2, 3440.0], [81.3, 3441.0], [81.4, 3442.0], [81.5, 3446.0], [81.6, 3446.0], [81.7, 3447.0], [81.8, 3448.0], [81.9, 3449.0], [82.0, 3449.0], [82.1, 3449.0], [82.2, 3451.0], [82.3, 3454.0], [82.4, 3455.0], [82.5, 3456.0], [82.6, 3457.0], [82.7, 3458.0], [82.8, 3459.0], [82.9, 3460.0], [83.0, 3460.0], [83.1, 3460.0], [83.2, 3462.0], [83.3, 3462.0], [83.4, 3462.0], [83.5, 3462.0], [83.6, 3464.0], [83.7, 3465.0], [83.8, 3466.0], [83.9, 3467.0], [84.0, 3468.0], [84.1, 3468.0], [84.2, 3470.0], [84.3, 3473.0], [84.4, 3473.0], [84.5, 3474.0], [84.6, 3475.0], [84.7, 3477.0], [84.8, 3478.0], [84.9, 3481.0], [85.0, 3484.0], [85.1, 3487.0], [85.2, 3491.0], [85.3, 3493.0], [85.4, 3496.0], [85.5, 3499.0], [85.6, 3500.0], [85.7, 3504.0], [85.8, 3506.0], [85.9, 3509.0], [86.0, 3511.0], [86.1, 3515.0], [86.2, 3518.0], [86.3, 3518.0], [86.4, 3519.0], [86.5, 3521.0], [86.6, 3521.0], [86.7, 3526.0], [86.8, 3526.0], [86.9, 3526.0], [87.0, 3527.0], [87.1, 3530.0], [87.2, 3532.0], [87.3, 3534.0], [87.4, 3537.0], [87.5, 3538.0], [87.6, 3539.0], [87.7, 3541.0], [87.8, 3542.0], [87.9, 3547.0], [88.0, 3549.0], [88.1, 3550.0], [88.2, 3551.0], [88.3, 3553.0], [88.4, 3554.0], [88.5, 3558.0], [88.6, 3558.0], [88.7, 3569.0], [88.8, 3570.0], [88.9, 3574.0], [89.0, 3574.0], [89.1, 3575.0], [89.2, 3575.0], [89.3, 3581.0], [89.4, 3581.0], [89.5, 3585.0], [89.6, 3586.0], [89.7, 3587.0], [89.8, 3587.0], [89.9, 3589.0], [90.0, 3590.0], [90.1, 3591.0], [90.2, 3591.0], [90.3, 3593.0], [90.4, 3594.0], [90.5, 3597.0], [90.6, 3598.0], [90.7, 3598.0], [90.8, 3602.0], [90.9, 3605.0], [91.0, 3606.0], [91.1, 3614.0], [91.2, 3615.0], [91.3, 3623.0], [91.4, 3623.0], [91.5, 3625.0], [91.6, 3626.0], [91.7, 3630.0], [91.8, 3633.0], [91.9, 3635.0], [92.0, 3636.0], [92.1, 3637.0], [92.2, 3637.0], [92.3, 3644.0], [92.4, 3647.0], [92.5, 3650.0], [92.6, 3651.0], [92.7, 3653.0], [92.8, 3654.0], [92.9, 3657.0], [93.0, 3662.0], [93.1, 3663.0], [93.2, 3664.0], [93.3, 3665.0], [93.4, 3666.0], [93.5, 3675.0], [93.6, 3675.0], [93.7, 3682.0], [93.8, 3683.0], [93.9, 3687.0], [94.0, 3688.0], [94.1, 3690.0], [94.2, 3692.0], [94.3, 3695.0], [94.4, 3696.0], [94.5, 3699.0], [94.6, 3700.0], [94.7, 3701.0], [94.8, 3705.0], [94.9, 3710.0], [95.0, 3711.0], [95.1, 3713.0], [95.2, 3714.0], [95.3, 3721.0], [95.4, 3722.0], [95.5, 3740.0], [95.6, 3741.0], [95.7, 3795.0], [95.8, 3809.0], [95.9, 3823.0], [96.0, 3824.0], [96.1, 3828.0], [96.2, 3837.0], [96.3, 3845.0], [96.4, 3852.0], [96.5, 3856.0], [96.6, 3858.0], [96.7, 3861.0], [96.8, 3862.0], [96.9, 3871.0], [97.0, 3871.0], [97.1, 3873.0], [97.2, 3879.0], [97.3, 3884.0], [97.4, 3885.0], [97.5, 3891.0], [97.6, 3892.0], [97.7, 3902.0], [97.8, 3907.0], [97.9, 3913.0], [98.0, 3914.0], [98.1, 3917.0], [98.2, 3917.0], [98.3, 3932.0], [98.4, 3932.0], [98.5, 3938.0], [98.6, 3954.0], [98.7, 3967.0], [98.8, 3968.0], [98.9, 3981.0], [99.0, 3984.0], [99.1, 3991.0], [99.2, 3991.0], [99.3, 3997.0], [99.4, 4001.0], [99.5, 4033.0], [99.6, 4035.0], [99.7, 4053.0], [99.8, 4125.0], [99.9, 4462.0], [100.0, 4507.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 442.0, "series": [{"data": [[0.0, 442.0], [600.0, 29.0], [700.0, 4.0], [800.0, 5.0], [900.0, 18.0], [1000.0, 28.0], [1100.0, 11.0], [1200.0, 15.0], [1300.0, 17.0], [1400.0, 3.0], [1500.0, 4.0], [100.0, 34.0], [1600.0, 38.0], [1700.0, 54.0], [1800.0, 35.0], [1900.0, 21.0], [2000.0, 37.0], [2100.0, 18.0], [2200.0, 18.0], [2300.0, 15.0], [2400.0, 20.0], [2500.0, 26.0], [2600.0, 40.0], [2700.0, 26.0], [2800.0, 16.0], [2900.0, 14.0], [3000.0, 14.0], [3100.0, 28.0], [200.0, 34.0], [3200.0, 47.0], [3300.0, 48.0], [3400.0, 81.0], [3500.0, 78.0], [3600.0, 57.0], [3700.0, 18.0], [3800.0, 29.0], [3900.0, 25.0], [4000.0, 6.0], [4100.0, 1.0], [4300.0, 1.0], [4500.0, 1.0], [4400.0, 1.0], [300.0, 33.0], [400.0, 6.0], [500.0, 4.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 134.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 817.0, "series": [{"data": [[0.0, 549.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 134.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 817.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 715.9693333333319, "minX": 1.75635282E12, "maxY": 715.9693333333319, "series": [{"data": [[1.75635282E12, 715.9693333333319]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635282E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.0, "maxY": 4462.0, "series": [{"data": [[2.0, 4053.0], [3.0, 4462.0], [6.0, 4281.666666666667], [7.0, 2430.0], [8.0, 2439.0], [9.0, 3997.0], [10.0, 3984.0], [11.0, 3938.0], [13.0, 3635.5], [14.0, 3824.0], [16.0, 3952.0], [17.0, 3820.0], [20.0, 4038.0], [21.0, 3704.0], [22.0, 3537.0], [24.0, 4034.0], [25.0, 3274.0], [26.0, 3925.0], [28.0, 3988.0], [30.0, 3910.5], [31.0, 3991.0], [33.0, 3968.0], [32.0, 3209.0], [35.0, 3159.0], [36.0, 3917.0], [39.0, 3995.0], [38.0, 3175.0], [41.0, 3919.0], [43.0, 3879.0], [42.0, 3891.0], [45.0, 3873.0], [44.0, 3873.0], [46.0, 3912.0], [48.0, 3859.5], [51.0, 3843.0], [50.0, 3883.0], [53.0, 3854.0], [52.0, 3934.0], [54.0, 3856.0], [57.0, 3919.0], [59.0, 3917.0], [58.0, 3882.0], [60.0, 3837.0], [63.0, 3860.0], [62.0, 3871.0], [67.0, 3911.0], [64.0, 3871.0], [71.0, 3967.0], [70.0, 2910.0], [69.0, 3809.0], [68.0, 3823.0], [75.0, 2856.0], [74.0, 2864.0], [73.0, 3845.0], [72.0, 2891.0], [79.0, 2658.0], [78.0, 3288.0], [76.0, 2847.0], [83.0, 2958.0], [82.0, 2066.0], [81.0, 3705.0], [80.0, 3914.0], [87.0, 4055.5], [86.0, 2089.0], [84.0, 3587.0], [91.0, 3892.0], [88.0, 2113.0], [94.0, 2999.75], [93.0, 2111.0], [98.0, 2583.0], [103.0, 3530.0], [102.0, 3573.0], [101.0, 2978.8333333333335], [105.0, 3177.0], [104.0, 2729.0], [111.0, 3145.0], [110.0, 3145.0], [108.0, 3171.0], [115.0, 3149.0], [114.0, 2530.0], [113.0, 2874.0], [119.0, 2996.0], [118.0, 3795.0], [117.0, 3526.0], [116.0, 3145.0], [123.0, 3623.0], [121.0, 2710.0], [120.0, 2904.0], [127.0, 2689.0], [126.0, 2998.75], [135.0, 2674.0], [134.0, 2675.5], [132.0, 2678.0], [131.0, 3541.0], [130.0, 2781.0], [129.0, 2679.0], [128.0, 2674.0], [142.0, 3604.0], [141.0, 2673.5], [139.0, 2655.0], [138.0, 2666.5], [136.0, 2695.0], [151.0, 2642.0], [150.0, 3561.3333333333335], [147.0, 3551.0], [146.0, 3598.0], [145.0, 2650.0], [144.0, 3484.0], [158.0, 3462.0], [157.0, 3467.0], [156.0, 3049.0], [154.0, 3462.0], [153.0, 3504.5], [167.0, 3717.0], [165.0, 3710.0], [164.0, 3585.0], [163.0, 3558.0], [162.0, 3217.25], [175.0, 2623.0], [174.0, 3452.5], [172.0, 3442.0], [171.0, 2622.0], [170.0, 2623.0], [169.0, 3518.0], [168.0, 3456.0], [183.0, 3068.5], [181.0, 3521.0], [180.0, 2617.0], [179.0, 3521.0], [178.0, 3022.0], [177.0, 3446.0], [191.0, 3701.0], [190.0, 3020.0], [188.0, 2627.6666666666665], [185.0, 2378.0], [184.0, 3706.0], [199.0, 3496.0], [198.0, 3499.0], [197.0, 2375.0], [196.0, 2608.5], [194.0, 2607.0], [193.0, 2360.0], [192.0, 2612.0], [207.0, 2051.0], [206.0, 2579.0], [205.0, 2590.0], [204.0, 2584.0], [203.0, 2197.0], [202.0, 2585.0], [201.0, 2589.0], [200.0, 2594.0], [215.0, 2474.0], [212.0, 1928.0], [211.0, 3393.0], [210.0, 3542.0], [209.0, 2577.0], [208.0, 2573.0], [223.0, 2558.0], [222.0, 2176.0], [221.0, 2319.5], [219.0, 1829.0], [218.0, 2200.0], [217.0, 1899.0], [230.0, 1907.0], [229.0, 1930.3333333333333], [226.0, 2070.0], [225.0, 1947.0], [224.0, 3662.0], [238.0, 1891.0], [236.0, 1879.0], [235.0, 2020.5], [233.0, 1879.0], [232.0, 1897.0], [247.0, 2031.0], [246.0, 1779.0], [244.0, 1808.0], [243.0, 1743.0], [242.0, 3654.0], [241.0, 1840.6666666666667], [255.0, 2707.0], [253.0, 3637.0], [252.0, 3722.0], [251.0, 1785.0], [250.0, 3615.0], [249.0, 2970.0], [270.0, 1774.0], [271.0, 3720.0], [269.0, 1742.0], [268.0, 3714.0], [267.0, 1712.0], [266.0, 1721.0], [265.0, 1773.0], [264.0, 1775.0], [263.0, 1789.0], [258.0, 2673.5], [256.0, 1798.0], [262.0, 2732.5], [260.0, 2718.5], [286.0, 1759.0], [287.0, 3695.0], [285.0, 2711.0], [274.0, 1736.0], [273.0, 1769.0], [272.0, 1731.0], [283.0, 1756.0], [282.0, 2733.0], [280.0, 2675.0], [279.0, 3670.0], [278.0, 1710.0], [276.0, 1752.5], [301.0, 1703.0], [302.0, 3657.0], [300.0, 1701.0], [291.0, 3451.0], [290.0, 1746.0], [289.0, 1711.0], [299.0, 1702.0], [298.0, 1706.5], [296.0, 1707.0], [295.0, 1740.0], [294.0, 1741.5], [292.0, 3683.0], [317.0, 1704.5], [319.0, 1717.0], [316.0, 1676.0], [315.0, 1676.0], [314.0, 3644.0], [312.0, 1671.0], [310.0, 2682.0], [308.0, 1693.5], [306.0, 1685.0], [305.0, 1689.0], [304.0, 3612.5], [334.0, 3574.5], [335.0, 3597.0], [332.0, 2625.5], [322.0, 1658.0], [321.0, 1679.25], [330.0, 1672.0], [328.0, 3772.0], [327.0, 1652.0], [326.0, 1696.0], [325.0, 2652.5], [324.0, 1678.0], [338.0, 3574.0], [350.0, 2635.5], [351.0, 3574.0], [349.0, 1675.0], [337.0, 3581.0], [336.0, 1657.0], [347.0, 1660.0], [346.0, 1652.0], [343.0, 1658.0], [342.0, 3575.0], [341.0, 3602.0], [340.0, 2627.0], [366.0, 1461.0], [367.0, 3551.0], [364.0, 1251.0], [354.0, 1256.0], [353.0, 3531.5], [362.0, 1580.0], [361.0, 3587.0], [360.0, 3587.5], [358.0, 3570.0], [357.0, 3558.0], [356.0, 1451.5], [382.0, 3589.0], [383.0, 3367.0], [381.0, 3680.0], [380.0, 1617.0], [379.0, 1454.5], [377.0, 3690.0], [376.0, 3348.0], [375.0, 1651.0], [369.0, 1247.0], [368.0, 3550.0], [374.0, 3586.0], [373.0, 2812.6666666666665], [397.0, 1599.0], [399.0, 957.0], [396.0, 2356.0], [387.0, 2280.0], [385.0, 3712.0], [384.0, 3725.0], [395.0, 1070.0], [393.0, 1566.0], [392.0, 963.0], [391.0, 973.0], [390.0, 2380.5], [388.0, 1142.0], [413.0, 1600.0], [415.0, 3653.0], [412.0, 3672.5], [410.0, 1609.0], [409.0, 3699.0], [408.0, 3665.0], [406.0, 2187.5], [404.0, 2171.0], [403.0, 926.0], [401.0, 3692.0], [400.0, 3636.0], [419.0, 3616.0], [430.0, 3369.0], [428.0, 1729.6666666666665], [426.0, 3623.0], [424.0, 3662.0], [423.0, 2383.5], [421.0, 3675.0], [420.0, 3685.0], [417.0, 3694.0], [416.0, 3621.0], [446.0, 3348.0], [447.0, 725.0], [445.0, 279.0], [444.0, 3652.0], [443.0, 3647.0], [442.0, 477.0], [441.0, 959.0], [440.0, 944.0], [439.0, 3675.0], [434.0, 3664.0], [433.0, 2900.5], [438.0, 282.0], [437.0, 689.0], [436.0, 2183.0], [451.0, 3637.0], [461.0, 3465.0], [463.0, 1902.0], [460.0, 3306.0], [459.0, 1665.0], [456.0, 698.0], [455.0, 3460.0], [454.0, 3591.0], [452.0, 3637.0], [450.0, 3346.0], [449.0, 3348.0], [448.0, 3643.0], [467.0, 3581.0], [478.0, 44.0], [476.0, 3311.0], [475.0, 3326.5], [474.0, 71.0], [473.0, 3329.5], [471.0, 3657.0], [469.0, 3635.0], [468.0, 275.0], [466.0, 3605.5], [464.0, 280.0], [494.0, 3255.0], [495.0, 3252.0], [493.0, 30.0], [492.0, 3258.0], [491.0, 27.0], [490.0, 3262.0], [489.0, 2189.0], [486.0, 1651.5], [483.0, 1655.0], [481.0, 859.5], [484.0, 31.0], [510.0, 53.0], [511.0, 33.0], [509.0, 3231.5], [507.0, 3549.0], [506.0, 1650.0], [504.0, 1791.0], [502.0, 1651.0], [500.0, 3250.0], [499.0, 3245.0], [497.0, 3250.0], [496.0, 42.0], [537.0, 3414.0], [541.0, 3518.0], [543.0, 3485.5], [529.0, 3208.5], [540.0, 3473.0], [539.0, 3203.0], [538.0, 3556.0], [526.0, 53.0], [513.0, 48.5], [516.0, 3227.0], [514.0, 3226.0], [519.0, 48.0], [518.0, 1117.0], [525.0, 56.0], [524.0, 1637.0], [522.0, 3221.0], [521.0, 3220.0], [520.0, 50.0], [534.0, 3205.0], [531.0, 3206.5], [532.0, 3204.0], [574.0, 3483.0], [575.0, 3414.0], [572.0, 2343.6666666666665], [571.0, 3323.0], [569.0, 3335.75], [551.0, 3460.0], [548.0, 3508.3333333333335], [545.0, 3514.0], [544.0, 3534.0], [566.0, 3523.5], [563.0, 50.0], [561.0, 3531.3333333333335], [559.0, 3532.0], [558.0, 3527.0], [557.0, 3526.0], [556.0, 3362.0], [554.0, 3498.0], [552.0, 3462.0], [594.0, 3378.0], [606.0, 35.0], [607.0, 26.0], [593.0, 47.0], [592.0, 3466.5], [605.0, 724.8], [603.0, 3373.0], [601.0, 1708.5], [583.0, 3314.0], [581.0, 2347.0], [578.0, 3464.0], [576.0, 3477.0], [590.0, 3431.0], [589.0, 3473.0], [587.0, 3478.0], [586.0, 3486.0], [585.0, 1747.5], [599.0, 1755.0], [597.0, 3497.0], [596.0, 3484.0], [638.0, 3455.0], [639.0, 40.0], [625.0, 3468.0], [624.0, 3452.3333333333335], [637.0, 40.0], [636.0, 41.0], [635.0, 1169.3333333333335], [633.0, 3447.0], [623.0, 3353.0], [608.0, 3462.0], [612.0, 3423.3333333333335], [609.0, 3474.0], [615.0, 3474.0], [614.0, 3411.0], [620.0, 3434.0], [619.0, 28.0], [617.0, 3449.0], [616.0, 3458.0], [631.0, 3448.0], [629.0, 37.0], [627.0, 3449.0], [626.0, 3352.0], [664.0, 3303.0], [669.0, 3364.5], [671.0, 1713.0], [656.0, 3407.0], [658.0, 3427.0], [657.0, 3371.0], [667.0, 3412.0], [666.0, 3306.0], [665.0, 3074.0], [655.0, 3094.0], [640.0, 36.0], [642.0, 33.0], [641.0, 3441.0], [644.0, 3430.0], [643.0, 3446.0], [646.0, 3449.0], [645.0, 3420.0], [654.0, 3440.0], [653.0, 3414.0], [652.0, 3397.0], [651.0, 3434.0], [650.0, 3440.0], [649.0, 3445.0], [648.0, 3243.5], [663.0, 3354.0], [662.0, 3379.0], [661.0, 3313.0], [660.0, 1726.0], [697.0, 26.0], [701.0, 91.0], [703.0, 1684.0], [690.0, 37.0], [689.0, 3018.0], [692.0, 42.0], [691.0, 36.666666666666664], [700.0, 93.0], [699.0, 26.0], [698.0, 26.0], [696.0, 1702.5], [679.0, 38.0], [678.0, 40.0], [677.0, 39.0], [676.0, 44.0], [675.0, 41.0], [674.0, 41.0], [673.0, 49.0], [687.0, 3368.0], [685.0, 3020.0], [684.0, 3030.0], [683.0, 3031.0], [682.0, 3396.0], [681.0, 3034.0], [680.0, 37.0], [694.0, 31.0], [693.0, 39.0], [728.0, 31.0], [733.0, 3275.0], [729.0, 163.66666666666666], [734.0, 1502.0], [720.0, 3273.0], [732.0, 3119.0], [730.0, 3302.0], [719.0, 29.0], [706.0, 1683.0], [704.0, 84.0], [709.0, 3266.0], [708.0, 32.5], [711.0, 28.0], [710.0, 29.0], [718.0, 28.0], [717.0, 73.0], [716.0, 1142.3333333333333], [713.0, 3315.0], [712.0, 29.0], [726.0, 57.5], [725.0, 32.0], [722.0, 61.0], [721.0, 2961.0], [764.0, 50.0], [767.0, 38.0], [753.0, 55.0], [752.0, 48.0], [755.0, 3197.0], [754.0, 3223.0], [757.0, 3221.0], [756.0, 44.0], [766.0, 29.0], [765.0, 3160.0], [763.0, 43.0], [762.0, 31.0], [761.0, 32.0], [760.0, 31.0], [751.0, 3242.0], [738.0, 3274.0], [736.0, 3125.0], [740.0, 3282.0], [739.0, 1663.0], [743.0, 29.0], [742.0, 43.5], [750.0, 31.0], [749.0, 33.0], [748.0, 34.0], [747.0, 2909.0], [746.0, 41.0], [745.0, 47.0], [744.0, 42.0], [759.0, 39.0], [758.0, 57.0], [793.0, 26.0], [798.0, 24.0], [799.0, 3034.0], [786.0, 34.0], [785.0, 34.0], [789.0, 35.0], [788.0, 1580.5], [796.0, 29.0], [795.0, 3058.0], [794.0, 29.0], [792.0, 29.0], [775.0, 3150.0], [774.0, 3156.0], [773.0, 28.0], [772.0, 33.0], [771.0, 29.0], [770.0, 34.0], [769.0, 3162.0], [768.0, 24.0], [783.0, 3130.0], [782.0, 28.0], [781.0, 33.0], [780.0, 3114.0], [779.0, 34.0], [778.0, 29.0], [777.0, 1594.0], [791.0, 3101.0], [790.0, 32.0], [828.0, 2980.0], [814.0, 100.0], [809.0, 97.66666666666667], [808.0, 148.6], [815.0, 2302.5], [801.0, 1034.6666666666667], [803.0, 33.0], [802.0, 3045.0], [806.0, 27.0], [805.0, 1512.5], [824.0, 35.0], [807.0, 33.0], [827.0, 33.0], [826.0, 45.5], [813.0, 79.0], [812.0, 44.0], [811.0, 46.0], [810.0, 67.0], [831.0, 64.0], [816.0, 173.0], [819.0, 169.0], [818.0, 107.5], [821.0, 30.0], [820.0, 33.0], [823.0, 41.0], [822.0, 2953.0], [830.0, 29.0], [829.0, 64.0], [857.0, 2844.0], [862.0, 2749.0], [863.0, 2745.0], [849.0, 38.0], [848.0, 38.0], [851.0, 46.0], [850.0, 36.0], [861.0, 43.0], [859.0, 47.0], [858.0, 1286.5], [856.0, 2759.0], [839.0, 2808.0], [838.0, 40.0], [837.0, 2923.0], [836.0, 45.0], [835.0, 36.0], [834.0, 31.0], [833.0, 35.0], [832.0, 53.0], [847.0, 39.0], [846.0, 43.0], [845.0, 44.0], [844.0, 49.0], [843.0, 48.0], [842.0, 57.0], [841.0, 39.0], [840.0, 2912.0], [854.0, 1458.0], [852.0, 2817.0], [889.0, 2432.0], [893.0, 58.0], [895.0, 2715.0], [880.0, 41.5], [883.0, 48.0], [882.0, 49.0], [885.0, 2794.0], [884.0, 2801.0], [892.0, 2784.0], [891.0, 2785.0], [890.0, 2683.0], [888.0, 2800.0], [871.0, 33.0], [870.0, 2810.0], [869.0, 37.0], [868.0, 39.0], [867.0, 1414.0], [865.0, 2850.0], [864.0, 51.0], [878.0, 2470.0], [877.0, 28.0], [876.0, 2477.0], [875.0, 37.0], [874.0, 33.0], [873.0, 36.5], [887.0, 2460.0], [886.0, 45.0], [920.0, 2716.0], [926.0, 52.0], [927.0, 51.0], [912.0, 2548.5], [924.0, 1378.5], [922.0, 2602.0], [921.0, 51.0], [909.0, 2718.0], [896.0, 2368.0], [898.0, 32.0], [897.0, 2732.0], [900.0, 38.0], [899.0, 50.0], [903.0, 2701.0], [902.0, 2726.5], [908.0, 2358.0], [906.0, 49.0], [905.0, 52.0], [919.0, 2538.0], [917.0, 2671.5], [915.0, 2602.0], [913.0, 2606.0], [952.0, 2514.0], [957.0, 2499.0], [959.0, 2496.5], [945.0, 29.0], [944.0, 24.0], [956.0, 1264.0], [954.0, 30.0], [953.0, 31.0], [943.0, 29.0], [928.0, 64.0], [930.0, 58.0], [929.0, 60.0], [935.0, 2681.0], [933.0, 2662.0], [942.0, 2546.0], [941.0, 674.25], [939.0, 2614.5], [938.0, 56.0], [937.0, 42.0], [951.0, 2514.0], [950.0, 32.666666666666664], [949.0, 31.0], [946.0, 2529.0], [986.0, 30.0], [990.0, 34.0], [991.0, 2185.0], [976.0, 31.0], [979.0, 2456.0], [978.0, 36.5], [981.0, 2589.0], [980.0, 37.0], [989.0, 2217.0], [988.0, 2443.0], [987.0, 38.0], [985.0, 2204.0], [967.0, 46.0], [965.0, 31.0], [964.0, 2487.0], [963.0, 31.5], [961.0, 29.0], [960.0, 2497.0], [974.0, 32.0], [973.0, 2217.0], [972.0, 2217.0], [971.0, 34.0], [970.0, 37.0], [969.0, 41.0], [968.0, 2229.0], [983.0, 2204.0], [982.0, 37.0], [1018.0, 27.0], [1022.0, 534.6666666666666], [1023.0, 608.0], [1008.0, 25.0], [1011.0, 2375.0], [1009.0, 25.0], [1020.0, 488.0], [1021.0, 383.0], [1019.0, 2344.0], [1017.0, 615.75], [999.0, 2429.0], [998.0, 2416.0], [997.0, 2543.0], [996.0, 25.0], [995.0, 30.5], [994.0, 27.0], [993.0, 27.0], [1007.0, 28.5], [1006.0, 28.5], [1004.0, 28.0], [1002.0, 2400.0], [1001.0, 1220.0], [1014.0, 232.0], [1012.0, 417.0], [1036.0, 2296.0], [1086.0, 255.0], [1028.0, 2228.0], [1030.0, 349.0], [1034.0, 2296.0], [1038.0, 2269.0], [1072.0, 28.0], [1074.0, 278.0], [1076.0, 272.0], [1078.0, 271.0], [1082.0, 235.0], [1026.0, 411.3333333333333], [1024.0, 463.25], [1054.0, 328.0], [1052.0, 2293.0], [1050.0, 339.0], [1046.0, 343.0], [1044.0, 2302.0], [1042.0, 293.0], [1064.0, 418.3333333333333], [1066.0, 463.0], [1068.0, 301.0], [1070.0, 292.0], [1056.0, 324.0], [1058.0, 317.0], [1060.0, 319.0], [1062.0, 312.0], [1084.0, 251.0], [1092.0, 206.75], [1108.0, 2129.0], [1106.0, 1137.0], [1104.0, 206.0], [1110.0, 2069.0], [1112.0, 2057.0], [1118.0, 2031.0], [1088.0, 246.0], [1130.0, 1355.0], [1120.0, 194.0], [1128.0, 1116.0], [1144.0, 387.25], [1146.0, 501.0], [1148.0, 1045.25], [1150.0, 51.0], [1134.0, 918.6666666666666], [1136.0, 80.66666666666666], [1102.0, 204.0], [1100.0, 47.0], [1098.0, 1179.0], [1096.0, 2199.0], [1094.0, 24.0], [1142.0, 48.666666666666664], [1140.0, 76.5], [1138.0, 46.0], [1206.0, 41.5], [1156.0, 671.6666666666666], [1154.0, 1256.3333333333333], [1152.0, 162.71428571428572], [1182.0, 1876.0], [1180.0, 1880.0], [1174.0, 1888.0], [1168.0, 1823.5], [1212.0, 692.5], [1210.0, 921.7142857142856], [1208.0, 746.6666666666667], [1204.0, 656.0], [1202.0, 172.75], [1200.0, 32.66666666666667], [1164.0, 1906.0], [1160.0, 1905.0], [1158.0, 1925.0], [1184.0, 1853.0], [1186.0, 1850.0], [1190.0, 1826.5], [1188.0, 29.0], [1192.0, 35.0], [1194.0, 686.6], [1196.0, 423.22222222222223], [1198.0, 199.625], [1214.0, 1526.5], [1228.0, 1696.0], [1220.0, 509.0], [1224.0, 917.6363636363635], [1226.0, 877.0], [1264.0, 55.5], [1230.0, 43.0], [1266.0, 1333.0], [1268.0, 474.0], [1248.0, 60.0], [1250.0, 29.0], [1252.0, 26.0], [1254.0, 34.0], [1232.0, 365.33333333333337], [1234.0, 30.0], [1236.0, 300.5], [1238.0, 1056.0], [1246.0, 146.0], [1244.0, 151.0], [1242.0, 1457.0], [1240.0, 39.5], [1222.0, 297.75], [1218.0, 540.0], [1216.0, 708.0], [1033.0, 2297.5], [1081.0, 242.0], [1027.0, 487.5], [1029.0, 2304.0], [1031.0, 2301.0], [1035.0, 2294.0], [1037.0, 2426.0], [1039.0, 2313.0], [1073.0, 262.0], [1075.0, 2204.0], [1077.0, 271.0], [1079.0, 270.0], [1025.0, 31.0], [1055.0, 327.0], [1053.0, 2293.0], [1051.0, 339.0], [1049.0, 341.0], [1047.0, 342.0], [1045.0, 2290.0], [1043.0, 347.0], [1041.0, 1287.5], [1065.0, 312.0], [1067.0, 302.0], [1069.0, 293.0], [1071.0, 27.0], [1087.0, 440.0], [1057.0, 318.0], [1059.0, 316.0], [1061.0, 317.0], [1085.0, 32.0], [1113.0, 2045.0], [1143.0, 1039.5], [1137.0, 700.2], [1093.0, 416.0], [1109.0, 1398.5], [1107.0, 2154.0], [1111.0, 219.0], [1115.0, 2039.0], [1131.0, 2077.0], [1151.0, 38.0], [1127.0, 1141.0], [1129.0, 2078.0], [1145.0, 847.8], [1149.0, 57.0], [1147.0, 41.0], [1133.0, 1212.2], [1135.0, 906.3333333333334], [1103.0, 2142.0], [1101.0, 2091.0], [1099.0, 186.0], [1095.0, 195.0], [1141.0, 382.99999999999994], [1139.0, 1058.0], [1167.0, 1754.0], [1155.0, 1362.6666666666667], [1153.0, 1160.0], [1177.0, 983.5], [1175.0, 1885.0], [1173.0, 1889.0], [1171.0, 1890.6666666666667], [1213.0, 955.0], [1211.0, 756.0], [1209.0, 579.5], [1207.0, 40.0], [1205.0, 43.0], [1203.0, 32.75], [1201.0, 296.77777777777777], [1165.0, 1755.0], [1163.0, 1902.5], [1161.0, 1902.0], [1159.0, 1950.5], [1157.0, 1936.0], [1215.0, 965.5], [1185.0, 1855.0], [1187.0, 1834.0], [1191.0, 24.0], [1193.0, 915.0], [1195.0, 463.0], [1199.0, 382.2857142857143], [1197.0, 332.49999999999994], [1249.0, 1622.0], [1265.0, 496.0], [1227.0, 32.0], [1229.0, 587.0], [1253.0, 131.0], [1255.0, 1356.0], [1259.0, 1353.0], [1257.0, 704.0], [1263.0, 936.6666666666667], [1261.0, 677.5], [1267.0, 1371.0], [1223.0, 525.75], [1233.0, 1461.0], [1237.0, 1667.0], [1247.0, 41.0], [1245.0, 58.0], [1243.0, 234.0], [1241.0, 36.0], [1219.0, 809.0], [1217.0, 747.0], [1221.0, 200.0], [1.0, 2417.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}, {"data": [[715.9686666666648, 1697.4206666666685]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1268.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15775.0, "minX": 1.75635282E12, "maxY": 21550.0, "series": [{"data": [[1.75635282E12, 21550.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75635282E12, 15775.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635282E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1697.4206666666685, "minX": 1.75635282E12, "maxY": 1697.4206666666685, "series": [{"data": [[1.75635282E12, 1697.4206666666685]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635282E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1697.0079999999998, "minX": 1.75635282E12, "maxY": 1697.0079999999998, "series": [{"data": [[1.75635282E12, 1697.0079999999998]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635282E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1510.8579999999993, "minX": 1.75635282E12, "maxY": 1510.8579999999993, "series": [{"data": [[1.75635282E12, 1510.8579999999993]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635282E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.75635282E12, "maxY": 4507.0, "series": [{"data": [[1.75635282E12, 4507.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75635282E12, 3590.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75635282E12, 3985.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75635282E12, 3711.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75635282E12, 24.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75635282E12, 1741.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635282E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 57.0, "minX": 9.0, "maxY": 3997.0, "series": [{"data": [[133.0, 100.0], [572.0, 3229.0], [9.0, 3997.0], [350.0, 318.0], [436.0, 57.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 572.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 57.0, "minX": 9.0, "maxY": 3997.0, "series": [{"data": [[133.0, 100.0], [572.0, 3229.0], [9.0, 3997.0], [350.0, 318.0], [436.0, 57.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 572.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635282E12, "maxY": 25.0, "series": [{"data": [[1.75635282E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635282E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635282E12, "maxY": 25.0, "series": [{"data": [[1.75635282E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635282E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635282E12, "maxY": 25.0, "series": [{"data": [[1.75635282E12, 25.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635282E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635282E12, "maxY": 25.0, "series": [{"data": [[1.75635282E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635282E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

