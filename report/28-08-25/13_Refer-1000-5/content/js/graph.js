/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 91.0, "minX": 0.0, "maxY": 8814.0, "series": [{"data": [[0.0, 91.0], [0.1, 94.0], [0.2, 104.0], [0.3, 104.0], [0.4, 108.0], [0.5, 109.0], [0.6, 111.0], [0.7, 112.0], [0.8, 114.0], [0.9, 160.0], [1.0, 184.0], [1.1, 327.0], [1.2, 330.0], [1.3, 332.0], [1.4, 332.0], [1.5, 477.0], [1.6, 670.0], [1.7, 857.0], [1.8, 914.0], [1.9, 942.0], [2.0, 944.0], [2.1, 947.0], [2.2, 954.0], [2.3, 956.0], [2.4, 957.0], [2.5, 966.0], [2.6, 978.0], [2.7, 979.0], [2.8, 1008.0], [2.9, 1037.0], [3.0, 1066.0], [3.1, 1090.0], [3.2, 1111.0], [3.3, 1151.0], [3.4, 1170.0], [3.5, 1187.0], [3.6, 1225.0], [3.7, 1264.0], [3.8, 1269.0], [3.9, 1283.0], [4.0, 1284.0], [4.1, 1285.0], [4.2, 1308.0], [4.3, 1315.0], [4.4, 1345.0], [4.5, 1351.0], [4.6, 1354.0], [4.7, 1368.0], [4.8, 1369.0], [4.9, 1415.0], [5.0, 1425.0], [5.1, 1426.0], [5.2, 1430.0], [5.3, 1435.0], [5.4, 1438.0], [5.5, 1444.0], [5.6, 1462.0], [5.7, 1472.0], [5.8, 1486.0], [5.9, 1487.0], [6.0, 1488.0], [6.1, 1497.0], [6.2, 1504.0], [6.3, 1514.0], [6.4, 1523.0], [6.5, 1523.0], [6.6, 1531.0], [6.7, 1532.0], [6.8, 1558.0], [6.9, 1559.0], [7.0, 1565.0], [7.1, 1571.0], [7.2, 1576.0], [7.3, 1591.0], [7.4, 1592.0], [7.5, 1595.0], [7.6, 1596.0], [7.7, 1607.0], [7.8, 1612.0], [7.9, 1622.0], [8.0, 1627.0], [8.1, 1634.0], [8.2, 1639.0], [8.3, 1650.0], [8.4, 1671.0], [8.5, 1679.0], [8.6, 1692.0], [8.7, 1699.0], [8.8, 1708.0], [8.9, 1709.0], [9.0, 1712.0], [9.1, 1715.0], [9.2, 1729.0], [9.3, 1741.0], [9.4, 1747.0], [9.5, 1748.0], [9.6, 1758.0], [9.7, 1759.0], [9.8, 1759.0], [9.9, 1764.0], [10.0, 1765.0], [10.1, 1768.0], [10.2, 1774.0], [10.3, 1778.0], [10.4, 1780.0], [10.5, 1781.0], [10.6, 1786.0], [10.7, 1790.0], [10.8, 1791.0], [10.9, 1796.0], [11.0, 1816.0], [11.1, 1818.0], [11.2, 1821.0], [11.3, 1829.0], [11.4, 1851.0], [11.5, 1852.0], [11.6, 1860.0], [11.7, 1867.0], [11.8, 1871.0], [11.9, 1871.0], [12.0, 1875.0], [12.1, 1877.0], [12.2, 1886.0], [12.3, 1901.0], [12.4, 1911.0], [12.5, 1924.0], [12.6, 1934.0], [12.7, 1936.0], [12.8, 1940.0], [12.9, 1942.0], [13.0, 1947.0], [13.1, 1948.0], [13.2, 1950.0], [13.3, 1951.0], [13.4, 1952.0], [13.5, 1955.0], [13.6, 1960.0], [13.7, 1962.0], [13.8, 1975.0], [13.9, 1980.0], [14.0, 1987.0], [14.1, 2002.0], [14.2, 2007.0], [14.3, 2007.0], [14.4, 2008.0], [14.5, 2014.0], [14.6, 2026.0], [14.7, 2037.0], [14.8, 2038.0], [14.9, 2051.0], [15.0, 2062.0], [15.1, 2099.0], [15.2, 2105.0], [15.3, 2106.0], [15.4, 2109.0], [15.5, 2117.0], [15.6, 2123.0], [15.7, 2139.0], [15.8, 2143.0], [15.9, 2148.0], [16.0, 2149.0], [16.1, 2156.0], [16.2, 2187.0], [16.3, 2195.0], [16.4, 2202.0], [16.5, 2210.0], [16.6, 2218.0], [16.7, 2241.0], [16.8, 2253.0], [16.9, 2255.0], [17.0, 2256.0], [17.1, 2258.0], [17.2, 2262.0], [17.3, 2262.0], [17.4, 2287.0], [17.5, 2293.0], [17.6, 2295.0], [17.7, 2303.0], [17.8, 2313.0], [17.9, 2315.0], [18.0, 2335.0], [18.1, 2340.0], [18.2, 2345.0], [18.3, 2351.0], [18.4, 2357.0], [18.5, 2358.0], [18.6, 2359.0], [18.7, 2362.0], [18.8, 2367.0], [18.9, 2381.0], [19.0, 2398.0], [19.1, 2403.0], [19.2, 2403.0], [19.3, 2411.0], [19.4, 2420.0], [19.5, 2444.0], [19.6, 2446.0], [19.7, 2497.0], [19.8, 2502.0], [19.9, 2504.0], [20.0, 2507.0], [20.1, 2508.0], [20.2, 2517.0], [20.3, 2550.0], [20.4, 2564.0], [20.5, 2575.0], [20.6, 2594.0], [20.7, 2599.0], [20.8, 2601.0], [20.9, 2614.0], [21.0, 2616.0], [21.1, 2625.0], [21.2, 2626.0], [21.3, 2627.0], [21.4, 2631.0], [21.5, 2634.0], [21.6, 2642.0], [21.7, 2642.0], [21.8, 2647.0], [21.9, 2652.0], [22.0, 2666.0], [22.1, 2677.0], [22.2, 2678.0], [22.3, 2692.0], [22.4, 2695.0], [22.5, 2715.0], [22.6, 2728.0], [22.7, 2733.0], [22.8, 2738.0], [22.9, 2750.0], [23.0, 2752.0], [23.1, 2771.0], [23.2, 2796.0], [23.3, 2796.0], [23.4, 2798.0], [23.5, 2824.0], [23.6, 2842.0], [23.7, 2854.0], [23.8, 2855.0], [23.9, 2869.0], [24.0, 2874.0], [24.1, 2891.0], [24.2, 2895.0], [24.3, 2901.0], [24.4, 2953.0], [24.5, 2958.0], [24.6, 2966.0], [24.7, 2986.0], [24.8, 2990.0], [24.9, 3016.0], [25.0, 3024.0], [25.1, 3062.0], [25.2, 3067.0], [25.3, 3105.0], [25.4, 3121.0], [25.5, 3123.0], [25.6, 3139.0], [25.7, 3140.0], [25.8, 3141.0], [25.9, 3173.0], [26.0, 3181.0], [26.1, 3181.0], [26.2, 3195.0], [26.3, 3205.0], [26.4, 3236.0], [26.5, 3245.0], [26.6, 3253.0], [26.7, 3258.0], [26.8, 3267.0], [26.9, 3267.0], [27.0, 3281.0], [27.1, 3310.0], [27.2, 3325.0], [27.3, 3336.0], [27.4, 3343.0], [27.5, 3343.0], [27.6, 3348.0], [27.7, 3349.0], [27.8, 3350.0], [27.9, 3354.0], [28.0, 3390.0], [28.1, 3397.0], [28.2, 3403.0], [28.3, 3417.0], [28.4, 3425.0], [28.5, 3431.0], [28.6, 3432.0], [28.7, 3435.0], [28.8, 3439.0], [28.9, 3455.0], [29.0, 3466.0], [29.1, 3471.0], [29.2, 3482.0], [29.3, 3516.0], [29.4, 3537.0], [29.5, 3557.0], [29.6, 3572.0], [29.7, 3579.0], [29.8, 3588.0], [29.9, 3590.0], [30.0, 3590.0], [30.1, 3598.0], [30.2, 3600.0], [30.3, 3603.0], [30.4, 3613.0], [30.5, 3642.0], [30.6, 3645.0], [30.7, 3648.0], [30.8, 3649.0], [30.9, 3650.0], [31.0, 3653.0], [31.1, 3658.0], [31.2, 3719.0], [31.3, 3722.0], [31.4, 3728.0], [31.5, 3732.0], [31.6, 3742.0], [31.7, 3743.0], [31.8, 3744.0], [31.9, 3745.0], [32.0, 3749.0], [32.1, 3757.0], [32.2, 3758.0], [32.3, 3763.0], [32.4, 3771.0], [32.5, 3774.0], [32.6, 3777.0], [32.7, 3777.0], [32.8, 3779.0], [32.9, 3796.0], [33.0, 3811.0], [33.1, 3816.0], [33.2, 3840.0], [33.3, 3841.0], [33.4, 3855.0], [33.5, 3860.0], [33.6, 3869.0], [33.7, 3898.0], [33.8, 3913.0], [33.9, 3916.0], [34.0, 3917.0], [34.1, 3920.0], [34.2, 3941.0], [34.3, 3953.0], [34.4, 3957.0], [34.5, 3964.0], [34.6, 3984.0], [34.7, 3985.0], [34.8, 3992.0], [34.9, 4008.0], [35.0, 4017.0], [35.1, 4018.0], [35.2, 4019.0], [35.3, 4021.0], [35.4, 4030.0], [35.5, 4033.0], [35.6, 4038.0], [35.7, 4051.0], [35.8, 4051.0], [35.9, 4068.0], [36.0, 4076.0], [36.1, 4083.0], [36.2, 4088.0], [36.3, 4103.0], [36.4, 4108.0], [36.5, 4115.0], [36.6, 4117.0], [36.7, 4118.0], [36.8, 4142.0], [36.9, 4156.0], [37.0, 4157.0], [37.1, 4163.0], [37.2, 4183.0], [37.3, 4190.0], [37.4, 4193.0], [37.5, 4210.0], [37.6, 4213.0], [37.7, 4224.0], [37.8, 4239.0], [37.9, 4240.0], [38.0, 4240.0], [38.1, 4259.0], [38.2, 4271.0], [38.3, 4274.0], [38.4, 4278.0], [38.5, 4293.0], [38.6, 4299.0], [38.7, 4300.0], [38.8, 4317.0], [38.9, 4318.0], [39.0, 4322.0], [39.1, 4336.0], [39.2, 4342.0], [39.3, 4344.0], [39.4, 4344.0], [39.5, 4353.0], [39.6, 4368.0], [39.7, 4369.0], [39.8, 4375.0], [39.9, 4389.0], [40.0, 4393.0], [40.1, 4401.0], [40.2, 4403.0], [40.3, 4423.0], [40.4, 4429.0], [40.5, 4440.0], [40.6, 4446.0], [40.7, 4454.0], [40.8, 4458.0], [40.9, 4459.0], [41.0, 4467.0], [41.1, 4469.0], [41.2, 4480.0], [41.3, 4490.0], [41.4, 4512.0], [41.5, 4529.0], [41.6, 4530.0], [41.7, 4532.0], [41.8, 4535.0], [41.9, 4545.0], [42.0, 4553.0], [42.1, 4564.0], [42.2, 4567.0], [42.3, 4568.0], [42.4, 4568.0], [42.5, 4599.0], [42.6, 4604.0], [42.7, 4604.0], [42.8, 4605.0], [42.9, 4609.0], [43.0, 4610.0], [43.1, 4611.0], [43.2, 4614.0], [43.3, 4617.0], [43.4, 4619.0], [43.5, 4619.0], [43.6, 4643.0], [43.7, 4645.0], [43.8, 4647.0], [43.9, 4657.0], [44.0, 4662.0], [44.1, 4663.0], [44.2, 4665.0], [44.3, 4684.0], [44.4, 4685.0], [44.5, 4687.0], [44.6, 4688.0], [44.7, 4691.0], [44.8, 4696.0], [44.9, 4698.0], [45.0, 4699.0], [45.1, 4702.0], [45.2, 4703.0], [45.3, 4710.0], [45.4, 4723.0], [45.5, 4729.0], [45.6, 4757.0], [45.7, 4770.0], [45.8, 4770.0], [45.9, 4774.0], [46.0, 4784.0], [46.1, 4785.0], [46.2, 4787.0], [46.3, 4795.0], [46.4, 4795.0], [46.5, 4797.0], [46.6, 4802.0], [46.7, 4808.0], [46.8, 4809.0], [46.9, 4820.0], [47.0, 4838.0], [47.1, 4851.0], [47.2, 4858.0], [47.3, 4877.0], [47.4, 4883.0], [47.5, 4883.0], [47.6, 4883.0], [47.7, 4885.0], [47.8, 4885.0], [47.9, 4889.0], [48.0, 4893.0], [48.1, 4899.0], [48.2, 4911.0], [48.3, 4915.0], [48.4, 4916.0], [48.5, 4923.0], [48.6, 4927.0], [48.7, 4928.0], [48.8, 4928.0], [48.9, 4934.0], [49.0, 4952.0], [49.1, 4958.0], [49.2, 4959.0], [49.3, 4959.0], [49.4, 4962.0], [49.5, 4966.0], [49.6, 4967.0], [49.7, 4971.0], [49.8, 4980.0], [49.9, 4990.0], [50.0, 4990.0], [50.1, 4995.0], [50.2, 4999.0], [50.3, 5002.0], [50.4, 5012.0], [50.5, 5022.0], [50.6, 5022.0], [50.7, 5024.0], [50.8, 5024.0], [50.9, 5038.0], [51.0, 5047.0], [51.1, 5060.0], [51.2, 5061.0], [51.3, 5063.0], [51.4, 5064.0], [51.5, 5065.0], [51.6, 5082.0], [51.7, 5087.0], [51.8, 5091.0], [51.9, 5104.0], [52.0, 5132.0], [52.1, 5138.0], [52.2, 5142.0], [52.3, 5157.0], [52.4, 5157.0], [52.5, 5158.0], [52.6, 5171.0], [52.7, 5172.0], [52.8, 5181.0], [52.9, 5187.0], [53.0, 5188.0], [53.1, 5194.0], [53.2, 5195.0], [53.3, 5201.0], [53.4, 5205.0], [53.5, 5206.0], [53.6, 5207.0], [53.7, 5213.0], [53.8, 5215.0], [53.9, 5217.0], [54.0, 5221.0], [54.1, 5229.0], [54.2, 5230.0], [54.3, 5234.0], [54.4, 5238.0], [54.5, 5238.0], [54.6, 5247.0], [54.7, 5250.0], [54.8, 5253.0], [54.9, 5269.0], [55.0, 5277.0], [55.1, 5287.0], [55.2, 5289.0], [55.3, 5295.0], [55.4, 5296.0], [55.5, 5299.0], [55.6, 5303.0], [55.7, 5309.0], [55.8, 5309.0], [55.9, 5315.0], [56.0, 5317.0], [56.1, 5329.0], [56.2, 5335.0], [56.3, 5353.0], [56.4, 5358.0], [56.5, 5365.0], [56.6, 5374.0], [56.7, 5375.0], [56.8, 5384.0], [56.9, 5388.0], [57.0, 5393.0], [57.1, 5408.0], [57.2, 5416.0], [57.3, 5417.0], [57.4, 5425.0], [57.5, 5429.0], [57.6, 5435.0], [57.7, 5436.0], [57.8, 5440.0], [57.9, 5444.0], [58.0, 5445.0], [58.1, 5465.0], [58.2, 5465.0], [58.3, 5468.0], [58.4, 5469.0], [58.5, 5482.0], [58.6, 5489.0], [58.7, 5493.0], [58.8, 5494.0], [58.9, 5496.0], [59.0, 5502.0], [59.1, 5503.0], [59.2, 5517.0], [59.3, 5520.0], [59.4, 5530.0], [59.5, 5536.0], [59.6, 5538.0], [59.7, 5546.0], [59.8, 5568.0], [59.9, 5569.0], [60.0, 5572.0], [60.1, 5572.0], [60.2, 5576.0], [60.3, 5583.0], [60.4, 5583.0], [60.5, 5610.0], [60.6, 5612.0], [60.7, 5613.0], [60.8, 5618.0], [60.9, 5620.0], [61.0, 5628.0], [61.1, 5629.0], [61.2, 5632.0], [61.3, 5632.0], [61.4, 5635.0], [61.5, 5641.0], [61.6, 5642.0], [61.7, 5646.0], [61.8, 5649.0], [61.9, 5649.0], [62.0, 5652.0], [62.1, 5653.0], [62.2, 5657.0], [62.3, 5658.0], [62.4, 5665.0], [62.5, 5668.0], [62.6, 5678.0], [62.7, 5685.0], [62.8, 5687.0], [62.9, 5690.0], [63.0, 5702.0], [63.1, 5702.0], [63.2, 5708.0], [63.3, 5710.0], [63.4, 5712.0], [63.5, 5714.0], [63.6, 5716.0], [63.7, 5716.0], [63.8, 5717.0], [63.9, 5731.0], [64.0, 5743.0], [64.1, 5744.0], [64.2, 5750.0], [64.3, 5752.0], [64.4, 5754.0], [64.5, 5759.0], [64.6, 5765.0], [64.7, 5770.0], [64.8, 5773.0], [64.9, 5774.0], [65.0, 5779.0], [65.1, 5787.0], [65.2, 5787.0], [65.3, 5796.0], [65.4, 5799.0], [65.5, 5817.0], [65.6, 5821.0], [65.7, 5824.0], [65.8, 5827.0], [65.9, 5831.0], [66.0, 5834.0], [66.1, 5834.0], [66.2, 5836.0], [66.3, 5842.0], [66.4, 5842.0], [66.5, 5843.0], [66.6, 5851.0], [66.7, 5854.0], [66.8, 5855.0], [66.9, 5856.0], [67.0, 5860.0], [67.1, 5863.0], [67.2, 5864.0], [67.3, 5866.0], [67.4, 5869.0], [67.5, 5874.0], [67.6, 5875.0], [67.7, 5888.0], [67.8, 5893.0], [67.9, 5894.0], [68.0, 5898.0], [68.1, 5898.0], [68.2, 5899.0], [68.3, 5906.0], [68.4, 5920.0], [68.5, 5927.0], [68.6, 5932.0], [68.7, 5934.0], [68.8, 5936.0], [68.9, 5943.0], [69.0, 5943.0], [69.1, 5945.0], [69.2, 5945.0], [69.3, 5952.0], [69.4, 5954.0], [69.5, 5954.0], [69.6, 5965.0], [69.7, 5967.0], [69.8, 5967.0], [69.9, 5968.0], [70.0, 5970.0], [70.1, 5972.0], [70.2, 5975.0], [70.3, 5977.0], [70.4, 5977.0], [70.5, 5980.0], [70.6, 5986.0], [70.7, 5991.0], [70.8, 5992.0], [70.9, 6001.0], [71.0, 6016.0], [71.1, 6022.0], [71.2, 6024.0], [71.3, 6031.0], [71.4, 6035.0], [71.5, 6037.0], [71.6, 6051.0], [71.7, 6052.0], [71.8, 6054.0], [71.9, 6056.0], [72.0, 6064.0], [72.1, 6065.0], [72.2, 6067.0], [72.3, 6070.0], [72.4, 6078.0], [72.5, 6079.0], [72.6, 6080.0], [72.7, 6081.0], [72.8, 6083.0], [72.9, 6084.0], [73.0, 6085.0], [73.1, 6086.0], [73.2, 6094.0], [73.3, 6096.0], [73.4, 6096.0], [73.5, 6101.0], [73.6, 6101.0], [73.7, 6101.0], [73.8, 6105.0], [73.9, 6106.0], [74.0, 6111.0], [74.1, 6116.0], [74.2, 6122.0], [74.3, 6123.0], [74.4, 6130.0], [74.5, 6131.0], [74.6, 6132.0], [74.7, 6134.0], [74.8, 6135.0], [74.9, 6137.0], [75.0, 6141.0], [75.1, 6141.0], [75.2, 6142.0], [75.3, 6147.0], [75.4, 6148.0], [75.5, 6150.0], [75.6, 6150.0], [75.7, 6150.0], [75.8, 6164.0], [75.9, 6171.0], [76.0, 6173.0], [76.1, 6177.0], [76.2, 6186.0], [76.3, 6190.0], [76.4, 6199.0], [76.5, 6202.0], [76.6, 6203.0], [76.7, 6205.0], [76.8, 6211.0], [76.9, 6213.0], [77.0, 6215.0], [77.1, 6223.0], [77.2, 6223.0], [77.3, 6229.0], [77.4, 6235.0], [77.5, 6247.0], [77.6, 6248.0], [77.7, 6249.0], [77.8, 6250.0], [77.9, 6250.0], [78.0, 6251.0], [78.1, 6252.0], [78.2, 6253.0], [78.3, 6261.0], [78.4, 6261.0], [78.5, 6265.0], [78.6, 6272.0], [78.7, 6277.0], [78.8, 6278.0], [78.9, 6279.0], [79.0, 6280.0], [79.1, 6280.0], [79.2, 6284.0], [79.3, 6284.0], [79.4, 6286.0], [79.5, 6286.0], [79.6, 6288.0], [79.7, 6289.0], [79.8, 6293.0], [79.9, 6293.0], [80.0, 6301.0], [80.1, 6304.0], [80.2, 6308.0], [80.3, 6309.0], [80.4, 6310.0], [80.5, 6313.0], [80.6, 6316.0], [80.7, 6318.0], [80.8, 6324.0], [80.9, 6325.0], [81.0, 6326.0], [81.1, 6329.0], [81.2, 6333.0], [81.3, 6334.0], [81.4, 6335.0], [81.5, 6336.0], [81.6, 6336.0], [81.7, 6353.0], [81.8, 6354.0], [81.9, 6356.0], [82.0, 6358.0], [82.1, 6368.0], [82.2, 6372.0], [82.3, 6373.0], [82.4, 6373.0], [82.5, 6376.0], [82.6, 6378.0], [82.7, 6381.0], [82.8, 6386.0], [82.9, 6387.0], [83.0, 6390.0], [83.1, 6394.0], [83.2, 6397.0], [83.3, 6404.0], [83.4, 6406.0], [83.5, 6414.0], [83.6, 6419.0], [83.7, 6421.0], [83.8, 6422.0], [83.9, 6426.0], [84.0, 6429.0], [84.1, 6431.0], [84.2, 6445.0], [84.3, 6445.0], [84.4, 6445.0], [84.5, 6446.0], [84.6, 6447.0], [84.7, 6449.0], [84.8, 6449.0], [84.9, 6454.0], [85.0, 6455.0], [85.1, 6456.0], [85.2, 6468.0], [85.3, 6471.0], [85.4, 6481.0], [85.5, 6483.0], [85.6, 6484.0], [85.7, 6486.0], [85.8, 6489.0], [85.9, 6497.0], [86.0, 6503.0], [86.1, 6520.0], [86.2, 6522.0], [86.3, 6525.0], [86.4, 6527.0], [86.5, 6527.0], [86.6, 6527.0], [86.7, 6531.0], [86.8, 6535.0], [86.9, 6535.0], [87.0, 6541.0], [87.1, 6542.0], [87.2, 6551.0], [87.3, 6552.0], [87.4, 6554.0], [87.5, 6554.0], [87.6, 6557.0], [87.7, 6561.0], [87.8, 6562.0], [87.9, 6564.0], [88.0, 6565.0], [88.1, 6566.0], [88.2, 6573.0], [88.3, 6575.0], [88.4, 6576.0], [88.5, 6580.0], [88.6, 6591.0], [88.7, 6593.0], [88.8, 6598.0], [88.9, 6604.0], [89.0, 6611.0], [89.1, 6614.0], [89.2, 6620.0], [89.3, 6623.0], [89.4, 6628.0], [89.5, 6635.0], [89.6, 6640.0], [89.7, 6641.0], [89.8, 6643.0], [89.9, 6645.0], [90.0, 6650.0], [90.1, 6651.0], [90.2, 6652.0], [90.3, 6684.0], [90.4, 6686.0], [90.5, 6687.0], [90.6, 6701.0], [90.7, 6704.0], [90.8, 6708.0], [90.9, 6714.0], [91.0, 6716.0], [91.1, 6723.0], [91.2, 6733.0], [91.3, 6750.0], [91.4, 6753.0], [91.5, 6760.0], [91.6, 6762.0], [91.7, 6766.0], [91.8, 6774.0], [91.9, 6780.0], [92.0, 6784.0], [92.1, 6788.0], [92.2, 6795.0], [92.3, 6800.0], [92.4, 6812.0], [92.5, 6818.0], [92.6, 6818.0], [92.7, 6819.0], [92.8, 6821.0], [92.9, 6823.0], [93.0, 6830.0], [93.1, 6834.0], [93.2, 6836.0], [93.3, 6836.0], [93.4, 6836.0], [93.5, 6841.0], [93.6, 6844.0], [93.7, 6875.0], [93.8, 6879.0], [93.9, 6880.0], [94.0, 6884.0], [94.1, 6890.0], [94.2, 6890.0], [94.3, 6896.0], [94.4, 6896.0], [94.5, 6906.0], [94.6, 6912.0], [94.7, 6913.0], [94.8, 6927.0], [94.9, 6929.0], [95.0, 6932.0], [95.1, 6938.0], [95.2, 6939.0], [95.3, 6939.0], [95.4, 6944.0], [95.5, 6954.0], [95.6, 6958.0], [95.7, 6965.0], [95.8, 6968.0], [95.9, 6969.0], [96.0, 6974.0], [96.1, 6982.0], [96.2, 6983.0], [96.3, 6993.0], [96.4, 6996.0], [96.5, 6998.0], [96.6, 7005.0], [96.7, 7011.0], [96.8, 7022.0], [96.9, 7033.0], [97.0, 7039.0], [97.1, 7067.0], [97.2, 7093.0], [97.3, 7098.0], [97.4, 7112.0], [97.5, 7113.0], [97.6, 7122.0], [97.7, 7131.0], [97.8, 7136.0], [97.9, 7141.0], [98.0, 7148.0], [98.1, 7153.0], [98.2, 7194.0], [98.3, 7196.0], [98.4, 7221.0], [98.5, 7226.0], [98.6, 7234.0], [98.7, 7367.0], [98.8, 7386.0], [98.9, 7386.0], [99.0, 7459.0], [99.1, 7542.0], [99.2, 7597.0], [99.3, 7649.0], [99.4, 7652.0], [99.5, 7679.0], [99.6, 7685.0], [99.7, 7909.0], [99.8, 7980.0], [99.9, 8814.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 36.0, "series": [{"data": [[0.0, 2.0], [600.0, 1.0], [800.0, 1.0], [900.0, 10.0], [1000.0, 4.0], [1100.0, 4.0], [1200.0, 6.0], [1300.0, 8.0], [1400.0, 13.0], [1500.0, 15.0], [1600.0, 11.0], [1700.0, 22.0], [1800.0, 13.0], [1900.0, 18.0], [2000.0, 11.0], [2100.0, 12.0], [2200.0, 13.0], [2300.0, 14.0], [2400.0, 6.0], [2500.0, 10.0], [2600.0, 17.0], [2700.0, 10.0], [2800.0, 8.0], [2900.0, 6.0], [3000.0, 4.0], [3100.0, 10.0], [3200.0, 8.0], [3300.0, 11.0], [3400.0, 11.0], [3500.0, 9.0], [3600.0, 10.0], [3700.0, 18.0], [3800.0, 8.0], [3900.0, 11.0], [4000.0, 14.0], [4100.0, 12.0], [4300.0, 14.0], [4200.0, 12.0], [4400.0, 13.0], [4600.0, 25.0], [4500.0, 12.0], [4700.0, 15.0], [4800.0, 16.0], [4900.0, 21.0], [5000.0, 16.0], [5100.0, 14.0], [5200.0, 23.0], [5300.0, 15.0], [5400.0, 19.0], [5500.0, 15.0], [5600.0, 25.0], [5700.0, 25.0], [5800.0, 28.0], [5900.0, 26.0], [6000.0, 26.0], [6100.0, 30.0], [6200.0, 36.0], [6300.0, 33.0], [6400.0, 27.0], [6500.0, 29.0], [6600.0, 17.0], [6700.0, 17.0], [6800.0, 22.0], [6900.0, 21.0], [7000.0, 8.0], [7100.0, 10.0], [7200.0, 3.0], [7400.0, 1.0], [7300.0, 3.0], [7500.0, 2.0], [7600.0, 4.0], [7900.0, 2.0], [8800.0, 1.0], [100.0, 9.0], [300.0, 3.0], [400.0, 1.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 938.0, "series": [{"data": [[0.0, 15.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 47.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 938.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.789000000001, "minX": 1.75636716E12, "maxY": 501.789000000001, "series": [{"data": [[1.75636716E12, 501.789000000001]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636716E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 91.0, "minX": 1.0, "maxY": 8814.0, "series": [{"data": [[2.0, 7685.0], [3.0, 7980.0], [4.0, 7909.0], [5.0, 7652.0], [6.0, 7649.0], [7.0, 7597.0], [8.0, 7679.0], [9.0, 7367.0], [10.0, 7542.0], [12.0, 7386.0], [13.0, 7226.0], [15.0, 6869.5], [17.0, 6900.5], [19.0, 7276.0], [20.0, 7022.0], [22.0, 6836.0], [24.0, 6974.0], [25.0, 6894.333333333333], [30.0, 7135.2], [33.0, 6768.0], [32.0, 6968.0], [34.0, 7136.0], [37.0, 6720.333333333333], [41.0, 6795.75], [42.0, 6503.0], [47.0, 6998.0], [49.0, 6645.5], [50.0, 6939.0], [54.0, 6768.166666666666], [59.0, 6896.0], [60.0, 6874.6], [63.0, 7112.0], [66.0, 6880.0], [65.0, 6922.5], [64.0, 6884.0], [71.0, 6875.0], [70.0, 6497.0], [69.0, 7113.0], [68.0, 6888.333333333333], [75.0, 6837.0], [73.0, 6839.0], [77.0, 6591.0], [83.0, 6818.5], [81.0, 6805.8], [87.0, 6604.0], [86.0, 6951.0], [95.0, 6740.5], [99.0, 6733.0], [98.0, 6913.0], [97.0, 6751.75], [96.0, 6757.5], [103.0, 6223.0], [102.0, 6250.0], [100.0, 6641.0], [107.0, 6830.333333333333], [106.0, 6651.0], [105.0, 6686.0], [108.0, 6261.0], [112.0, 6539.0], [119.0, 6896.0], [118.0, 6795.0], [117.0, 6557.2], [122.0, 6714.0], [121.0, 6558.5], [127.0, 6526.25], [134.0, 6812.0], [133.0, 6762.0], [132.0, 6557.2], [128.0, 6784.0], [140.0, 6372.0], [138.0, 6489.0], [137.0, 6584.666666666667], [150.0, 6340.0], [146.0, 6671.5], [144.0, 6467.2], [159.0, 6105.0], [158.0, 6355.875], [167.0, 6216.5], [166.0, 6584.0], [165.0, 6422.0], [163.0, 6378.0], [162.0, 6394.0], [175.0, 6611.0], [171.0, 6212.5], [170.0, 6445.0], [183.0, 6527.0], [182.0, 6208.0], [179.0, 6286.0], [176.0, 6223.25], [191.0, 6522.0], [190.0, 6425.0], [189.0, 6483.0], [187.0, 5970.0], [184.0, 5920.0], [198.0, 6229.0], [197.0, 6576.0], [196.0, 6133.0], [193.0, 6324.0], [207.0, 6102.166666666666], [205.0, 6149.5], [202.0, 6329.0], [215.0, 5864.0], [214.0, 6286.0], [213.0, 6306.333333333333], [211.0, 6354.0], [210.0, 6527.0], [208.0, 6273.0], [222.0, 6137.6], [217.0, 6375.5], [231.0, 6305.0], [229.0, 6111.0], [228.0, 6161.0], [225.0, 6213.0], [239.0, 5752.0], [237.0, 5863.0], [236.0, 5843.0], [233.0, 6252.0], [246.0, 6337.5], [245.0, 6247.0], [241.0, 6018.4], [240.0, 6119.0], [253.0, 6308.0], [252.0, 6101.0], [251.0, 6083.0], [248.0, 6095.5], [270.0, 6284.0], [269.0, 6131.0], [268.0, 6164.0], [267.0, 6154.5], [266.0, 6231.4], [263.0, 6067.0], [260.0, 6171.0], [258.0, 6098.8], [285.0, 5887.6], [284.0, 6088.0], [282.0, 6339.333333333333], [279.0, 6016.0], [277.0, 5960.0], [276.0, 5678.0], [275.0, 6335.0], [303.0, 5780.333333333333], [301.0, 6298.5], [299.0, 5815.0], [298.0, 6277.0], [294.0, 5924.5], [293.0, 5956.5], [292.0, 6264.0], [288.0, 6003.333333333333], [319.0, 6058.0], [313.0, 6150.0], [312.0, 5576.0], [311.0, 6089.6], [306.0, 5987.0], [304.0, 6101.0], [334.0, 5469.0], [332.0, 5947.5], [324.0, 6022.333333333333], [321.0, 6202.0], [320.0, 6325.0], [351.0, 5759.0], [350.0, 5811.8], [345.0, 5817.0], [344.0, 6122.0], [339.0, 6147.0], [338.0, 5583.0], [336.0, 5842.0], [367.0, 5725.636363636363], [363.0, 5952.0], [355.0, 5766.75], [383.0, 5367.833333333334], [379.0, 5770.0], [376.0, 5358.0], [374.0, 5814.666666666667], [371.0, 5827.0], [368.0, 5977.0], [397.0, 5445.0], [393.0, 5554.5], [391.0, 5888.0], [390.0, 5665.571428571428], [412.0, 5754.0], [411.0, 5261.25], [407.0, 5698.25], [404.0, 5644.0], [401.0, 5714.5], [429.0, 5065.0], [431.0, 5233.5], [428.0, 5142.0], [427.0, 5649.5], [425.0, 5744.5], [421.0, 5543.0], [419.0, 5419.666666666667], [418.0, 5619.0], [417.0, 5653.0], [443.0, 5416.0], [442.0, 5435.0], [441.0, 5445.0], [440.0, 5339.0], [439.0, 5287.0], [435.0, 5104.0], [434.0, 5496.0], [433.0, 5277.0], [461.0, 5325.333333333333], [460.0, 5281.5], [454.0, 5188.0], [453.0, 5194.5], [451.0, 5245.333333333333], [448.0, 5401.8], [476.0, 5395.857142857143], [469.0, 5234.5], [468.0, 5440.0], [467.0, 5530.0], [466.0, 4887.0], [495.0, 5020.666666666667], [492.0, 5045.0], [490.0, 5189.333333333333], [489.0, 5388.0], [486.0, 4838.0], [485.0, 4974.0], [482.0, 5090.333333333333], [509.0, 4663.0], [507.0, 5201.0], [502.0, 4935.0], [499.0, 4742.0], [497.0, 5187.0], [539.0, 4684.0], [541.0, 4893.0], [538.0, 5022.0], [536.0, 4829.0], [535.0, 4714.333333333333], [530.0, 4702.0], [529.0, 4583.333333333333], [526.0, 5069.666666666667], [513.0, 4885.0], [512.0, 4599.0], [515.0, 4875.375], [514.0, 5195.0], [517.0, 5172.0], [516.0, 4662.0], [523.0, 5157.0], [522.0, 5062.0], [520.0, 4700.0], [572.0, 4729.333333333333], [574.0, 4619.0], [575.0, 4429.0], [573.0, 4785.5], [568.0, 4764.6], [547.0, 4605.571428571428], [546.0, 5012.0], [563.0, 4700.5], [561.0, 4958.0], [559.0, 4368.0], [557.0, 4537.0], [555.0, 4757.25], [604.0, 4446.0], [607.0, 4098.333333333333], [603.0, 4142.0], [602.0, 3898.0], [601.0, 4703.0], [600.0, 4506.0], [590.0, 4687.5], [579.0, 4668.5], [577.0, 4908.5], [583.0, 4450.333333333333], [580.0, 4795.0], [588.0, 4774.0], [587.0, 4240.0], [586.0, 4729.0], [585.0, 4770.0], [584.0, 4440.0], [597.0, 4696.0], [596.0, 4464.75], [592.0, 4504.5], [636.0, 4393.0], [638.0, 3887.5], [635.0, 4361.0], [632.0, 4322.0], [631.0, 4142.666666666667], [628.0, 4216.5], [626.0, 4237.5], [624.0, 4117.0], [623.0, 4604.0], [608.0, 4567.0], [610.0, 4553.0], [609.0, 4021.0], [622.0, 4115.25], [618.0, 4183.0], [617.0, 4611.0], [616.0, 4374.333333333333], [645.0, 3719.0], [668.0, 3808.0], [664.0, 3696.5], [662.0, 3557.0], [661.0, 3900.6], [656.0, 3666.5], [654.0, 4005.5], [652.0, 4220.5], [650.0, 3825.0], [644.0, 3855.0], [643.0, 3984.0], [642.0, 4158.0], [691.0, 3471.0], [703.0, 3868.2], [698.0, 3425.0], [697.0, 3258.0], [696.0, 3600.0], [686.0, 3598.0], [672.0, 4163.0], [674.0, 3728.0], [673.0, 3669.5], [679.0, 3865.6666666666665], [676.0, 3786.5], [685.0, 3838.3333333333335], [682.0, 4108.0], [681.0, 4115.0], [680.0, 3742.0], [695.0, 3645.0], [694.0, 3417.0], [693.0, 3753.0], [690.0, 3857.5], [728.0, 3105.0], [732.0, 2966.0], [735.0, 2958.0], [721.0, 3749.0], [720.0, 3658.0], [724.0, 3431.0], [723.0, 3183.5], [734.0, 2990.0], [733.0, 2953.0], [731.0, 3253.0], [730.0, 3482.0], [729.0, 3650.0], [719.0, 3430.6666666666665], [704.0, 3336.0], [706.0, 3390.0], [705.0, 3953.0], [709.0, 3913.0], [708.0, 3285.0], [711.0, 3173.0], [710.0, 3439.0], [716.0, 3397.0], [715.0, 3796.0], [714.0, 3455.0], [713.0, 3537.0], [712.0, 3860.0], [727.0, 3811.0], [726.0, 3181.0], [761.0, 2930.5], [766.0, 2771.0], [767.0, 2626.0], [753.0, 2707.5], [765.0, 2842.0], [764.0, 2744.0], [762.0, 2855.0], [751.0, 2968.0], [737.0, 3123.0], [736.0, 3603.0], [739.0, 3205.0], [738.0, 3466.0], [742.0, 2854.0], [741.0, 3507.0], [749.0, 3121.0], [748.0, 3016.0], [747.0, 2002.0], [746.0, 2715.0], [745.0, 3310.0], [744.0, 2882.0], [759.0, 2575.0], [758.0, 3281.0], [757.0, 3348.0], [756.0, 3347.3333333333335], [798.0, 2195.0], [799.0, 2502.0], [787.0, 2253.0], [786.0, 2664.5], [789.0, 2891.0], [788.0, 2251.5], [797.0, 2105.0], [796.0, 2787.0], [794.0, 2444.0], [793.0, 2303.0], [792.0, 2508.0], [774.0, 2354.0], [772.0, 2695.0], [771.0, 3140.0], [770.0, 3158.3333333333335], [783.0, 2705.3333333333335], [780.0, 2638.0], [778.0, 2733.0], [777.0, 2798.0], [776.0, 2745.0], [791.0, 2340.0], [790.0, 2796.0], [824.0, 2106.0], [829.0, 2218.0], [830.0, 2255.5], [817.0, 2678.0], [816.0, 1883.5], [819.0, 2262.0], [818.0, 1111.0], [827.0, 2627.0], [826.0, 2359.0], [825.0, 2099.0], [814.0, 1345.0], [801.0, 2398.0], [800.0, 2381.0], [803.0, 2258.0], [802.0, 2728.0], [805.0, 2335.0], [804.0, 2295.0], [807.0, 2642.0], [806.0, 2507.0], [813.0, 1708.5], [811.0, 2752.0], [810.0, 2313.0], [809.0, 2652.0], [808.0, 2367.0], [823.0, 2139.0], [822.0, 2666.0], [821.0, 2143.0], [820.0, 2647.0], [857.0, 2041.6666666666667], [862.0, 2241.0], [863.0, 1565.0], [849.0, 2062.0], [848.0, 2403.0], [861.0, 2315.0], [860.0, 2007.0], [859.0, 2036.5], [847.0, 2411.0], [833.0, 2497.0], [832.0, 2557.0], [837.0, 2395.3333333333335], [834.0, 1871.0], [839.0, 2037.0], [838.0, 1867.0], [846.0, 1973.5], [844.0, 1987.0], [843.0, 2303.0], [841.0, 2149.0], [840.0, 2594.0], [854.0, 1940.0], [853.0, 2360.0], [851.0, 2420.0], [850.0, 2446.0], [891.0, 1523.0], [884.0, 1712.0], [895.0, 1828.5], [881.0, 2123.0], [880.0, 2014.0], [890.0, 1877.0], [889.0, 1773.0], [879.0, 1765.0], [865.0, 1860.0], [864.0, 1851.0], [867.0, 1671.0], [866.0, 1748.0], [870.0, 1768.0], [868.0, 2187.0], [877.0, 1634.0], [876.0, 1624.5], [874.0, 1936.0], [873.0, 1699.0], [872.0, 1779.0], [887.0, 1692.0], [886.0, 1595.0], [885.0, 2202.0], [883.0, 1591.0], [882.0, 1592.0], [920.0, 1559.0], [924.0, 1948.0], [927.0, 1764.0], [915.0, 1852.0], [914.0, 1818.0], [917.0, 1679.0], [916.0, 1960.0], [926.0, 1225.0], [925.0, 1947.0], [923.0, 1315.0], [922.0, 1871.0], [921.0, 184.0], [911.0, 1709.0], [897.0, 1855.5], [899.0, 2026.0], [898.0, 1497.0], [903.0, 1890.3333333333333], [900.0, 2109.0], [910.0, 1426.0], [909.0, 1942.0], [908.0, 1435.0], [907.0, 1950.0], [906.0, 1712.0], [904.0, 1962.0], [919.0, 1369.0], [918.0, 1612.0], [952.0, 1741.0], [957.0, 649.5], [959.0, 108.0], [946.0, 1715.0], [945.0, 1789.0], [955.0, 114.0], [954.0, 1351.0], [953.0, 1037.0], [942.0, 1901.0], [929.0, 1523.0], [928.0, 1308.0], [932.0, 1245.5], [931.0, 1818.0], [934.0, 1758.0], [933.0, 1285.0], [941.0, 1531.0], [940.0, 1816.0], [938.0, 1322.0], [937.0, 1579.0], [936.0, 1284.0], [951.0, 1768.0], [950.0, 1668.0], [948.0, 1747.0], [947.0, 1759.0], [974.0, 1310.6666666666667], [990.0, 995.9545454545454], [986.0, 1488.0], [967.0, 946.0], [972.0, 1264.0], [971.0, 1354.0], [970.0, 1066.0], [969.0, 1368.0], [966.0, 1571.0], [965.0, 477.0], [964.0, 111.0], [963.0, 91.0], [962.0, 104.0], [961.0, 618.0], [1.0, 8814.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}, {"data": [[501.78800000000024, 4576.215999999998]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 990.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11266.666666666666, "minX": 1.75636716E12, "maxY": 27466.666666666668, "series": [{"data": [[1.75636716E12, 11266.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75636716E12, 27466.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636716E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 4576.215999999998, "minX": 1.75636716E12, "maxY": 4576.215999999998, "series": [{"data": [[1.75636716E12, 4576.215999999998]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636716E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 4576.062000000003, "minX": 1.75636716E12, "maxY": 4576.062000000003, "series": [{"data": [[1.75636716E12, 4576.062000000003]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636716E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2535.9900000000007, "minX": 1.75636716E12, "maxY": 2535.9900000000007, "series": [{"data": [[1.75636716E12, 2535.9900000000007]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636716E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 91.0, "minX": 1.75636716E12, "maxY": 8814.0, "series": [{"data": [[1.75636716E12, 8814.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75636716E12, 6649.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75636716E12, 7458.27]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75636716E12, 6931.849999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75636716E12, 91.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75636716E12, 4992.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636716E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1415.0, "minX": 1.0, "maxY": 8814.0, "series": [{"data": [[131.0, 4088.0], [2.0, 7832.5], [1.0, 8814.0], [274.0, 6204.0], [82.0, 3131.0], [91.0, 1415.0], [94.0, 6928.0], [202.0, 5184.0], [123.0, 2106.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 274.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1414.0, "minX": 1.0, "maxY": 8814.0, "series": [{"data": [[131.0, 4088.0], [2.0, 7832.5], [1.0, 8814.0], [274.0, 6204.0], [82.0, 3130.5], [91.0, 1414.0], [94.0, 6928.0], [202.0, 5184.0], [123.0, 2106.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 274.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636716E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636716E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636716E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636716E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636716E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636716E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636716E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636716E12, 16.666666666666668]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636716E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636716E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636716E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636716E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

