/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 5118.0, "series": [{"data": [[0.0, 25.0], [0.1, 25.0], [0.2, 25.0], [0.3, 25.0], [0.4, 26.0], [0.5, 26.0], [0.6, 26.0], [0.7, 26.0], [0.8, 27.0], [0.9, 27.0], [1.0, 27.0], [1.1, 27.0], [1.2, 27.0], [1.3, 28.0], [1.4, 28.0], [1.5, 28.0], [1.6, 28.0], [1.7, 28.0], [1.8, 28.0], [1.9, 28.0], [2.0, 28.0], [2.1, 28.0], [2.2, 29.0], [2.3, 29.0], [2.4, 29.0], [2.5, 29.0], [2.6, 29.0], [2.7, 29.0], [2.8, 29.0], [2.9, 29.0], [3.0, 29.0], [3.1, 30.0], [3.2, 30.0], [3.3, 30.0], [3.4, 30.0], [3.5, 30.0], [3.6, 30.0], [3.7, 30.0], [3.8, 31.0], [3.9, 31.0], [4.0, 31.0], [4.1, 31.0], [4.2, 31.0], [4.3, 31.0], [4.4, 31.0], [4.5, 32.0], [4.6, 32.0], [4.7, 32.0], [4.8, 32.0], [4.9, 32.0], [5.0, 32.0], [5.1, 32.0], [5.2, 32.0], [5.3, 32.0], [5.4, 33.0], [5.5, 33.0], [5.6, 33.0], [5.7, 33.0], [5.8, 33.0], [5.9, 33.0], [6.0, 34.0], [6.1, 34.0], [6.2, 34.0], [6.3, 34.0], [6.4, 34.0], [6.5, 34.0], [6.6, 35.0], [6.7, 35.0], [6.8, 35.0], [6.9, 35.0], [7.0, 36.0], [7.1, 36.0], [7.2, 36.0], [7.3, 36.0], [7.4, 36.0], [7.5, 36.0], [7.6, 37.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 38.0], [8.1, 39.0], [8.2, 39.0], [8.3, 40.0], [8.4, 40.0], [8.5, 40.0], [8.6, 41.0], [8.7, 41.0], [8.8, 41.0], [8.9, 41.0], [9.0, 43.0], [9.1, 44.0], [9.2, 48.0], [9.3, 51.0], [9.4, 56.0], [9.5, 57.0], [9.6, 57.0], [9.7, 58.0], [9.8, 63.0], [9.9, 99.0], [10.0, 100.0], [10.1, 103.0], [10.2, 103.0], [10.3, 105.0], [10.4, 107.0], [10.5, 109.0], [10.6, 113.0], [10.7, 117.0], [10.8, 148.0], [10.9, 170.0], [11.0, 213.0], [11.1, 223.0], [11.2, 229.0], [11.3, 247.0], [11.4, 247.0], [11.5, 250.0], [11.6, 259.0], [11.7, 273.0], [11.8, 303.0], [11.9, 305.0], [12.0, 307.0], [12.1, 317.0], [12.2, 334.0], [12.3, 341.0], [12.4, 354.0], [12.5, 391.0], [12.6, 408.0], [12.7, 412.0], [12.8, 420.0], [12.9, 426.0], [13.0, 453.0], [13.1, 463.0], [13.2, 494.0], [13.3, 505.0], [13.4, 507.0], [13.5, 509.0], [13.6, 519.0], [13.7, 520.0], [13.8, 521.0], [13.9, 572.0], [14.0, 594.0], [14.1, 604.0], [14.2, 618.0], [14.3, 628.0], [14.4, 646.0], [14.5, 653.0], [14.6, 658.0], [14.7, 660.0], [14.8, 674.0], [14.9, 674.0], [15.0, 679.0], [15.1, 686.0], [15.2, 694.0], [15.3, 698.0], [15.4, 699.0], [15.5, 709.0], [15.6, 731.0], [15.7, 754.0], [15.8, 767.0], [15.9, 768.0], [16.0, 776.0], [16.1, 790.0], [16.2, 801.0], [16.3, 801.0], [16.4, 801.0], [16.5, 802.0], [16.6, 808.0], [16.7, 818.0], [16.8, 856.0], [16.9, 865.0], [17.0, 866.0], [17.1, 867.0], [17.2, 874.0], [17.3, 875.0], [17.4, 881.0], [17.5, 886.0], [17.6, 887.0], [17.7, 910.0], [17.8, 933.0], [17.9, 945.0], [18.0, 946.0], [18.1, 954.0], [18.2, 954.0], [18.3, 955.0], [18.4, 967.0], [18.5, 975.0], [18.6, 989.0], [18.7, 991.0], [18.8, 992.0], [18.9, 999.0], [19.0, 1079.0], [19.1, 1142.0], [19.2, 1155.0], [19.3, 1159.0], [19.4, 1164.0], [19.5, 1173.0], [19.6, 1192.0], [19.7, 1198.0], [19.8, 1203.0], [19.9, 1209.0], [20.0, 1228.0], [20.1, 1234.0], [20.2, 1237.0], [20.3, 1242.0], [20.4, 1245.0], [20.5, 1249.0], [20.6, 1253.0], [20.7, 1253.0], [20.8, 1262.0], [20.9, 1263.0], [21.0, 1264.0], [21.1, 1270.0], [21.2, 1271.0], [21.3, 1276.0], [21.4, 1282.0], [21.5, 1284.0], [21.6, 1285.0], [21.7, 1308.0], [21.8, 1308.0], [21.9, 1320.0], [22.0, 1325.0], [22.1, 1332.0], [22.2, 1337.0], [22.3, 1355.0], [22.4, 1365.0], [22.5, 1365.0], [22.6, 1367.0], [22.7, 1370.0], [22.8, 1376.0], [22.9, 1380.0], [23.0, 1382.0], [23.1, 1384.0], [23.2, 1388.0], [23.3, 1397.0], [23.4, 1397.0], [23.5, 1410.0], [23.6, 1412.0], [23.7, 1414.0], [23.8, 1415.0], [23.9, 1420.0], [24.0, 1424.0], [24.1, 1424.0], [24.2, 1430.0], [24.3, 1432.0], [24.4, 1439.0], [24.5, 1441.0], [24.6, 1446.0], [24.7, 1449.0], [24.8, 1453.0], [24.9, 1454.0], [25.0, 1460.0], [25.1, 1464.0], [25.2, 1470.0], [25.3, 1474.0], [25.4, 1475.0], [25.5, 1475.0], [25.6, 1497.0], [25.7, 1498.0], [25.8, 1505.0], [25.9, 1513.0], [26.0, 1526.0], [26.1, 1531.0], [26.2, 1531.0], [26.3, 1540.0], [26.4, 1556.0], [26.5, 1558.0], [26.6, 1562.0], [26.7, 1563.0], [26.8, 1566.0], [26.9, 1569.0], [27.0, 1576.0], [27.1, 1577.0], [27.2, 1580.0], [27.3, 1581.0], [27.4, 1588.0], [27.5, 1594.0], [27.6, 1597.0], [27.7, 1603.0], [27.8, 1606.0], [27.9, 1610.0], [28.0, 1613.0], [28.1, 1624.0], [28.2, 1634.0], [28.3, 1645.0], [28.4, 1648.0], [28.5, 1652.0], [28.6, 1659.0], [28.7, 1661.0], [28.8, 1671.0], [28.9, 1674.0], [29.0, 1674.0], [29.1, 1681.0], [29.2, 1686.0], [29.3, 1691.0], [29.4, 1695.0], [29.5, 1696.0], [29.6, 1704.0], [29.7, 1719.0], [29.8, 1730.0], [29.9, 1742.0], [30.0, 1747.0], [30.1, 1753.0], [30.2, 1767.0], [30.3, 1770.0], [30.4, 1780.0], [30.5, 1786.0], [30.6, 1787.0], [30.7, 1791.0], [30.8, 1791.0], [30.9, 1804.0], [31.0, 1805.0], [31.1, 1809.0], [31.2, 1812.0], [31.3, 1812.0], [31.4, 1814.0], [31.5, 1818.0], [31.6, 1821.0], [31.7, 1821.0], [31.8, 1824.0], [31.9, 1826.0], [32.0, 1832.0], [32.1, 1837.0], [32.2, 1838.0], [32.3, 1843.0], [32.4, 1854.0], [32.5, 1857.0], [32.6, 1858.0], [32.7, 1859.0], [32.8, 1866.0], [32.9, 1870.0], [33.0, 1873.0], [33.1, 1873.0], [33.2, 1876.0], [33.3, 1887.0], [33.4, 1889.0], [33.5, 1900.0], [33.6, 1902.0], [33.7, 1909.0], [33.8, 1919.0], [33.9, 1924.0], [34.0, 1929.0], [34.1, 1933.0], [34.2, 1937.0], [34.3, 1942.0], [34.4, 1945.0], [34.5, 1967.0], [34.6, 1974.0], [34.7, 1995.0], [34.8, 2002.0], [34.9, 2005.0], [35.0, 2024.0], [35.1, 2028.0], [35.2, 2039.0], [35.3, 2040.0], [35.4, 2043.0], [35.5, 2044.0], [35.6, 2048.0], [35.7, 2051.0], [35.8, 2051.0], [35.9, 2056.0], [36.0, 2074.0], [36.1, 2085.0], [36.2, 2086.0], [36.3, 2088.0], [36.4, 2094.0], [36.5, 2097.0], [36.6, 2101.0], [36.7, 2107.0], [36.8, 2108.0], [36.9, 2109.0], [37.0, 2121.0], [37.1, 2148.0], [37.2, 2151.0], [37.3, 2163.0], [37.4, 2175.0], [37.5, 2207.0], [37.6, 2214.0], [37.7, 2262.0], [37.8, 2263.0], [37.9, 2266.0], [38.0, 2267.0], [38.1, 2269.0], [38.2, 2272.0], [38.3, 2274.0], [38.4, 2288.0], [38.5, 2289.0], [38.6, 2291.0], [38.7, 2300.0], [38.8, 2302.0], [38.9, 2304.0], [39.0, 2310.0], [39.1, 2310.0], [39.2, 2311.0], [39.3, 2324.0], [39.4, 2341.0], [39.5, 2384.0], [39.6, 2398.0], [39.7, 2402.0], [39.8, 2422.0], [39.9, 2428.0], [40.0, 2460.0], [40.1, 2463.0], [40.2, 2463.0], [40.3, 2469.0], [40.4, 2504.0], [40.5, 2509.0], [40.6, 2520.0], [40.7, 2523.0], [40.8, 2525.0], [40.9, 2534.0], [41.0, 2538.0], [41.1, 2543.0], [41.2, 2547.0], [41.3, 2556.0], [41.4, 2565.0], [41.5, 2566.0], [41.6, 2570.0], [41.7, 2576.0], [41.8, 2582.0], [41.9, 2609.0], [42.0, 2622.0], [42.1, 2631.0], [42.2, 2647.0], [42.3, 2694.0], [42.4, 2705.0], [42.5, 2727.0], [42.6, 2748.0], [42.7, 2751.0], [42.8, 2757.0], [42.9, 2766.0], [43.0, 2769.0], [43.1, 2776.0], [43.2, 2784.0], [43.3, 2794.0], [43.4, 2798.0], [43.5, 2809.0], [43.6, 2809.0], [43.7, 2811.0], [43.8, 2870.0], [43.9, 3042.0], [44.0, 3522.0], [44.1, 3621.0], [44.2, 3770.0], [44.3, 3866.0], [44.4, 3868.0], [44.5, 3884.0], [44.6, 3906.0], [44.7, 3926.0], [44.8, 3940.0], [44.9, 3982.0], [45.0, 3983.0], [45.1, 3988.0], [45.2, 4013.0], [45.3, 4024.0], [45.4, 4027.0], [45.5, 4072.0], [45.6, 4074.0], [45.7, 4080.0], [45.8, 4085.0], [45.9, 4088.0], [46.0, 4100.0], [46.1, 4101.0], [46.2, 4111.0], [46.3, 4115.0], [46.4, 4132.0], [46.5, 4133.0], [46.6, 4143.0], [46.7, 4145.0], [46.8, 4145.0], [46.9, 4147.0], [47.0, 4153.0], [47.1, 4153.0], [47.2, 4154.0], [47.3, 4158.0], [47.4, 4166.0], [47.5, 4167.0], [47.6, 4167.0], [47.7, 4178.0], [47.8, 4178.0], [47.9, 4179.0], [48.0, 4179.0], [48.1, 4179.0], [48.2, 4182.0], [48.3, 4188.0], [48.4, 4193.0], [48.5, 4193.0], [48.6, 4195.0], [48.7, 4198.0], [48.8, 4200.0], [48.9, 4201.0], [49.0, 4203.0], [49.1, 4207.0], [49.2, 4207.0], [49.3, 4220.0], [49.4, 4220.0], [49.5, 4221.0], [49.6, 4226.0], [49.7, 4229.0], [49.8, 4229.0], [49.9, 4230.0], [50.0, 4233.0], [50.1, 4233.0], [50.2, 4242.0], [50.3, 4243.0], [50.4, 4246.0], [50.5, 4247.0], [50.6, 4250.0], [50.7, 4251.0], [50.8, 4252.0], [50.9, 4254.0], [51.0, 4255.0], [51.1, 4256.0], [51.2, 4256.0], [51.3, 4258.0], [51.4, 4258.0], [51.5, 4259.0], [51.6, 4259.0], [51.7, 4260.0], [51.8, 4262.0], [51.9, 4264.0], [52.0, 4265.0], [52.1, 4267.0], [52.2, 4267.0], [52.3, 4270.0], [52.4, 4273.0], [52.5, 4273.0], [52.6, 4273.0], [52.7, 4275.0], [52.8, 4276.0], [52.9, 4276.0], [53.0, 4279.0], [53.1, 4279.0], [53.2, 4281.0], [53.3, 4282.0], [53.4, 4284.0], [53.5, 4286.0], [53.6, 4286.0], [53.7, 4287.0], [53.8, 4288.0], [53.9, 4289.0], [54.0, 4290.0], [54.1, 4291.0], [54.2, 4296.0], [54.3, 4303.0], [54.4, 4306.0], [54.5, 4307.0], [54.6, 4309.0], [54.7, 4317.0], [54.8, 4320.0], [54.9, 4325.0], [55.0, 4328.0], [55.1, 4332.0], [55.2, 4332.0], [55.3, 4332.0], [55.4, 4336.0], [55.5, 4338.0], [55.6, 4340.0], [55.7, 4341.0], [55.8, 4342.0], [55.9, 4345.0], [56.0, 4348.0], [56.1, 4350.0], [56.2, 4351.0], [56.3, 4354.0], [56.4, 4355.0], [56.5, 4358.0], [56.6, 4364.0], [56.7, 4364.0], [56.8, 4365.0], [56.9, 4368.0], [57.0, 4384.0], [57.1, 4390.0], [57.2, 4391.0], [57.3, 4394.0], [57.4, 4401.0], [57.5, 4403.0], [57.6, 4405.0], [57.7, 4419.0], [57.8, 4421.0], [57.9, 4423.0], [58.0, 4425.0], [58.1, 4427.0], [58.2, 4428.0], [58.3, 4431.0], [58.4, 4435.0], [58.5, 4438.0], [58.6, 4449.0], [58.7, 4450.0], [58.8, 4453.0], [58.9, 4455.0], [59.0, 4457.0], [59.1, 4457.0], [59.2, 4458.0], [59.3, 4459.0], [59.4, 4463.0], [59.5, 4468.0], [59.6, 4468.0], [59.7, 4468.0], [59.8, 4469.0], [59.9, 4469.0], [60.0, 4472.0], [60.1, 4472.0], [60.2, 4473.0], [60.3, 4478.0], [60.4, 4479.0], [60.5, 4481.0], [60.6, 4482.0], [60.7, 4488.0], [60.8, 4488.0], [60.9, 4490.0], [61.0, 4493.0], [61.1, 4494.0], [61.2, 4495.0], [61.3, 4496.0], [61.4, 4497.0], [61.5, 4498.0], [61.6, 4498.0], [61.7, 4499.0], [61.8, 4502.0], [61.9, 4502.0], [62.0, 4505.0], [62.1, 4505.0], [62.2, 4506.0], [62.3, 4506.0], [62.4, 4507.0], [62.5, 4507.0], [62.6, 4508.0], [62.7, 4509.0], [62.8, 4509.0], [62.9, 4509.0], [63.0, 4510.0], [63.1, 4513.0], [63.2, 4514.0], [63.3, 4514.0], [63.4, 4515.0], [63.5, 4515.0], [63.6, 4516.0], [63.7, 4517.0], [63.8, 4519.0], [63.9, 4522.0], [64.0, 4525.0], [64.1, 4525.0], [64.2, 4531.0], [64.3, 4537.0], [64.4, 4537.0], [64.5, 4537.0], [64.6, 4538.0], [64.7, 4538.0], [64.8, 4540.0], [64.9, 4541.0], [65.0, 4542.0], [65.1, 4543.0], [65.2, 4543.0], [65.3, 4544.0], [65.4, 4544.0], [65.5, 4545.0], [65.6, 4547.0], [65.7, 4547.0], [65.8, 4547.0], [65.9, 4548.0], [66.0, 4548.0], [66.1, 4548.0], [66.2, 4548.0], [66.3, 4550.0], [66.4, 4555.0], [66.5, 4556.0], [66.6, 4557.0], [66.7, 4558.0], [66.8, 4558.0], [66.9, 4558.0], [67.0, 4560.0], [67.1, 4561.0], [67.2, 4564.0], [67.3, 4565.0], [67.4, 4566.0], [67.5, 4566.0], [67.6, 4567.0], [67.7, 4567.0], [67.8, 4568.0], [67.9, 4573.0], [68.0, 4573.0], [68.1, 4574.0], [68.2, 4574.0], [68.3, 4577.0], [68.4, 4577.0], [68.5, 4579.0], [68.6, 4579.0], [68.7, 4579.0], [68.8, 4580.0], [68.9, 4581.0], [69.0, 4582.0], [69.1, 4583.0], [69.2, 4585.0], [69.3, 4586.0], [69.4, 4588.0], [69.5, 4589.0], [69.6, 4590.0], [69.7, 4590.0], [69.8, 4591.0], [69.9, 4591.0], [70.0, 4591.0], [70.1, 4594.0], [70.2, 4594.0], [70.3, 4595.0], [70.4, 4595.0], [70.5, 4595.0], [70.6, 4599.0], [70.7, 4603.0], [70.8, 4604.0], [70.9, 4605.0], [71.0, 4609.0], [71.1, 4609.0], [71.2, 4610.0], [71.3, 4611.0], [71.4, 4611.0], [71.5, 4614.0], [71.6, 4618.0], [71.7, 4619.0], [71.8, 4619.0], [71.9, 4622.0], [72.0, 4627.0], [72.1, 4631.0], [72.2, 4636.0], [72.3, 4636.0], [72.4, 4637.0], [72.5, 4640.0], [72.6, 4642.0], [72.7, 4644.0], [72.8, 4645.0], [72.9, 4647.0], [73.0, 4647.0], [73.1, 4648.0], [73.2, 4650.0], [73.3, 4651.0], [73.4, 4653.0], [73.5, 4654.0], [73.6, 4655.0], [73.7, 4655.0], [73.8, 4657.0], [73.9, 4657.0], [74.0, 4658.0], [74.1, 4658.0], [74.2, 4659.0], [74.3, 4659.0], [74.4, 4663.0], [74.5, 4666.0], [74.6, 4666.0], [74.7, 4668.0], [74.8, 4670.0], [74.9, 4671.0], [75.0, 4672.0], [75.1, 4673.0], [75.2, 4676.0], [75.3, 4678.0], [75.4, 4679.0], [75.5, 4681.0], [75.6, 4684.0], [75.7, 4686.0], [75.8, 4687.0], [75.9, 4689.0], [76.0, 4690.0], [76.1, 4691.0], [76.2, 4694.0], [76.3, 4695.0], [76.4, 4696.0], [76.5, 4699.0], [76.6, 4704.0], [76.7, 4705.0], [76.8, 4706.0], [76.9, 4709.0], [77.0, 4710.0], [77.1, 4710.0], [77.2, 4712.0], [77.3, 4713.0], [77.4, 4714.0], [77.5, 4715.0], [77.6, 4715.0], [77.7, 4715.0], [77.8, 4716.0], [77.9, 4716.0], [78.0, 4716.0], [78.1, 4717.0], [78.2, 4717.0], [78.3, 4718.0], [78.4, 4718.0], [78.5, 4721.0], [78.6, 4721.0], [78.7, 4722.0], [78.8, 4722.0], [78.9, 4723.0], [79.0, 4723.0], [79.1, 4723.0], [79.2, 4724.0], [79.3, 4724.0], [79.4, 4725.0], [79.5, 4728.0], [79.6, 4729.0], [79.7, 4730.0], [79.8, 4731.0], [79.9, 4733.0], [80.0, 4734.0], [80.1, 4734.0], [80.2, 4736.0], [80.3, 4737.0], [80.4, 4737.0], [80.5, 4739.0], [80.6, 4739.0], [80.7, 4740.0], [80.8, 4740.0], [80.9, 4741.0], [81.0, 4741.0], [81.1, 4742.0], [81.2, 4743.0], [81.3, 4743.0], [81.4, 4745.0], [81.5, 4747.0], [81.6, 4748.0], [81.7, 4748.0], [81.8, 4749.0], [81.9, 4750.0], [82.0, 4750.0], [82.1, 4751.0], [82.2, 4751.0], [82.3, 4752.0], [82.4, 4754.0], [82.5, 4754.0], [82.6, 4754.0], [82.7, 4755.0], [82.8, 4756.0], [82.9, 4757.0], [83.0, 4757.0], [83.1, 4758.0], [83.2, 4758.0], [83.3, 4759.0], [83.4, 4762.0], [83.5, 4765.0], [83.6, 4766.0], [83.7, 4769.0], [83.8, 4771.0], [83.9, 4771.0], [84.0, 4775.0], [84.1, 4775.0], [84.2, 4776.0], [84.3, 4776.0], [84.4, 4777.0], [84.5, 4778.0], [84.6, 4779.0], [84.7, 4779.0], [84.8, 4781.0], [84.9, 4781.0], [85.0, 4785.0], [85.1, 4786.0], [85.2, 4787.0], [85.3, 4787.0], [85.4, 4788.0], [85.5, 4792.0], [85.6, 4795.0], [85.7, 4797.0], [85.8, 4797.0], [85.9, 4798.0], [86.0, 4800.0], [86.1, 4801.0], [86.2, 4805.0], [86.3, 4811.0], [86.4, 4814.0], [86.5, 4818.0], [86.6, 4819.0], [86.7, 4820.0], [86.8, 4827.0], [86.9, 4830.0], [87.0, 4831.0], [87.1, 4832.0], [87.2, 4834.0], [87.3, 4836.0], [87.4, 4836.0], [87.5, 4840.0], [87.6, 4845.0], [87.7, 4846.0], [87.8, 4847.0], [87.9, 4848.0], [88.0, 4848.0], [88.1, 4849.0], [88.2, 4853.0], [88.3, 4857.0], [88.4, 4861.0], [88.5, 4863.0], [88.6, 4865.0], [88.7, 4865.0], [88.8, 4866.0], [88.9, 4870.0], [89.0, 4871.0], [89.1, 4873.0], [89.2, 4875.0], [89.3, 4876.0], [89.4, 4879.0], [89.5, 4883.0], [89.6, 4884.0], [89.7, 4889.0], [89.8, 4890.0], [89.9, 4890.0], [90.0, 4895.0], [90.1, 4897.0], [90.2, 4897.0], [90.3, 4900.0], [90.4, 4900.0], [90.5, 4900.0], [90.6, 4911.0], [90.7, 4913.0], [90.8, 4913.0], [90.9, 4915.0], [91.0, 4921.0], [91.1, 4924.0], [91.2, 4925.0], [91.3, 4926.0], [91.4, 4931.0], [91.5, 4931.0], [91.6, 4933.0], [91.7, 4937.0], [91.8, 4938.0], [91.9, 4939.0], [92.0, 4942.0], [92.1, 4944.0], [92.2, 4945.0], [92.3, 4946.0], [92.4, 4948.0], [92.5, 4953.0], [92.6, 4955.0], [92.7, 4956.0], [92.8, 4956.0], [92.9, 4956.0], [93.0, 4962.0], [93.1, 4970.0], [93.2, 4971.0], [93.3, 4971.0], [93.4, 4973.0], [93.5, 4977.0], [93.6, 4984.0], [93.7, 4986.0], [93.8, 4987.0], [93.9, 4989.0], [94.0, 4997.0], [94.1, 4999.0], [94.2, 5001.0], [94.3, 5002.0], [94.4, 5009.0], [94.5, 5010.0], [94.6, 5011.0], [94.7, 5012.0], [94.8, 5013.0], [94.9, 5015.0], [95.0, 5018.0], [95.1, 5023.0], [95.2, 5023.0], [95.3, 5025.0], [95.4, 5026.0], [95.5, 5027.0], [95.6, 5027.0], [95.7, 5028.0], [95.8, 5029.0], [95.9, 5030.0], [96.0, 5031.0], [96.1, 5034.0], [96.2, 5035.0], [96.3, 5035.0], [96.4, 5035.0], [96.5, 5037.0], [96.6, 5038.0], [96.7, 5040.0], [96.8, 5040.0], [96.9, 5044.0], [97.0, 5047.0], [97.1, 5047.0], [97.2, 5052.0], [97.3, 5061.0], [97.4, 5065.0], [97.5, 5075.0], [97.6, 5075.0], [97.7, 5076.0], [97.8, 5077.0], [97.9, 5078.0], [98.0, 5078.0], [98.1, 5082.0], [98.2, 5087.0], [98.3, 5087.0], [98.4, 5090.0], [98.5, 5090.0], [98.6, 5091.0], [98.7, 5093.0], [98.8, 5095.0], [98.9, 5095.0], [99.0, 5097.0], [99.1, 5098.0], [99.2, 5101.0], [99.3, 5101.0], [99.4, 5104.0], [99.5, 5104.0], [99.6, 5116.0], [99.7, 5116.0], [99.8, 5116.0], [99.9, 5118.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 100.0, "series": [{"data": [[0.0, 100.0], [600.0, 14.0], [700.0, 7.0], [800.0, 15.0], [900.0, 12.0], [1000.0, 1.0], [1100.0, 7.0], [1200.0, 19.0], [1300.0, 18.0], [1400.0, 23.0], [1500.0, 19.0], [100.0, 10.0], [1600.0, 19.0], [1700.0, 13.0], [1800.0, 26.0], [1900.0, 13.0], [2000.0, 18.0], [2100.0, 9.0], [2200.0, 12.0], [2300.0, 10.0], [2400.0, 7.0], [2500.0, 15.0], [2600.0, 5.0], [2700.0, 11.0], [2800.0, 4.0], [3000.0, 1.0], [200.0, 8.0], [3500.0, 1.0], [3600.0, 1.0], [3700.0, 1.0], [3800.0, 3.0], [3900.0, 6.0], [4000.0, 8.0], [4300.0, 31.0], [4200.0, 55.0], [4100.0, 28.0], [4400.0, 44.0], [4500.0, 89.0], [4600.0, 59.0], [300.0, 8.0], [4700.0, 94.0], [4800.0, 44.0], [4900.0, 39.0], [5000.0, 50.0], [5100.0, 8.0], [400.0, 7.0], [500.0, 8.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 124.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 743.0, "series": [{"data": [[0.0, 133.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 124.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 743.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.3180000000001, "minX": 1.75635516E12, "maxY": 501.3180000000001, "series": [{"data": [[1.75635516E12, 501.3180000000001]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635516E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.0, "maxY": 5116.0, "series": [{"data": [[2.0, 4610.0], [3.0, 4267.0], [4.0, 5087.0], [6.0, 4772.0], [7.0, 5101.0], [9.0, 5116.0], [11.0, 4624.666666666667], [12.0, 4469.0], [13.0, 4953.0], [14.0, 4756.0], [15.0, 4609.0], [17.0, 4956.0], [18.0, 4554.0], [19.0, 4759.0], [22.0, 4100.0], [23.0, 4911.0], [24.0, 4738.0], [26.0, 4923.5], [29.0, 4543.0], [30.0, 4328.5], [32.0, 4951.333333333333], [35.0, 4408.333333333333], [37.0, 4545.0], [38.0, 5027.0], [41.0, 4745.0], [44.0, 4658.8], [47.0, 4466.0], [46.0, 5031.0], [48.0, 5116.0], [50.0, 4819.0], [53.0, 4915.0], [52.0, 4720.0], [55.0, 4871.0], [54.0, 4752.0], [57.0, 5104.0], [56.0, 4542.0], [59.0, 4723.0], [61.0, 4233.0], [60.0, 4977.0], [63.0, 4786.0], [62.0, 4332.0], [67.0, 4449.0], [66.0, 4514.5], [64.0, 4602.5], [71.0, 4599.75], [75.0, 4725.0], [73.0, 4970.0], [72.0, 4883.0], [77.0, 4801.666666666667], [82.0, 4563.4], [87.0, 4911.0], [85.0, 4686.0], [91.0, 4826.5], [89.0, 4865.0], [88.0, 5076.0], [94.0, 5075.0], [92.0, 4718.0], [99.0, 4785.0], [98.0, 4857.0], [96.0, 4787.333333333333], [103.0, 4788.0], [101.0, 4589.0], [107.0, 5010.0], [106.0, 4798.0], [105.0, 5082.0], [110.0, 4745.0], [109.0, 5091.0], [108.0, 4220.0], [114.0, 5087.0], [113.0, 4910.666666666667], [118.0, 4995.5], [116.0, 4864.5], [122.0, 4797.0], [121.0, 4754.0], [120.0, 4849.0], [127.0, 4719.0], [125.0, 4659.0], [124.0, 4828.5], [135.0, 4588.0], [133.0, 5078.0], [132.0, 4774.5], [131.0, 4404.5], [130.0, 4207.0], [142.0, 4815.5], [141.0, 4987.0], [140.0, 4495.5], [137.0, 4686.0], [136.0, 4287.0], [150.0, 4543.0], [149.0, 4193.0], [148.0, 4895.0], [147.0, 4088.0], [146.0, 4574.0], [145.0, 4516.0], [144.0, 4858.0], [158.0, 4510.285714285714], [152.0, 4973.0], [165.0, 4537.0], [164.0, 4620.0], [162.0, 4401.0], [161.0, 4670.0], [160.0, 4690.5], [171.0, 4179.0], [169.0, 4279.0], [168.0, 4720.0], [182.0, 4734.0], [181.0, 5035.0], [180.0, 4546.666666666667], [179.0, 5016.0], [178.0, 5009.0], [177.0, 4468.0], [189.0, 4350.0], [188.0, 4178.0], [187.0, 4273.0], [186.0, 4429.0], [184.0, 4172.0], [198.0, 4498.0], [197.0, 4913.0], [196.0, 4720.5], [194.0, 4814.0], [193.0, 5044.0], [192.0, 4514.0], [207.0, 5026.333333333333], [204.0, 4262.0], [203.0, 4946.0], [202.0, 4515.0], [201.0, 4900.0], [200.0, 4659.5], [215.0, 5035.0], [214.0, 4651.0], [212.0, 4013.0], [211.0, 4752.5], [209.0, 4503.5], [223.0, 4724.666666666667], [222.0, 4721.0], [218.0, 4538.0], [216.0, 4830.0], [231.0, 5029.0], [228.0, 4256.0], [227.0, 4797.0], [226.0, 5034.0], [225.0, 4897.0], [224.0, 4738.0], [239.0, 4842.5], [237.0, 4801.0], [236.0, 4406.75], [232.0, 4763.666666666667], [247.0, 5018.0], [246.0, 5023.0], [245.0, 4598.0], [243.0, 4739.5], [255.0, 4458.0], [254.0, 5027.0], [253.0, 4921.0], [252.0, 4938.0], [251.0, 4242.0], [250.0, 4438.0], [249.0, 4423.0], [266.0, 4622.166666666667], [265.0, 4781.0], [259.0, 4845.0], [258.0, 4695.0], [257.0, 5015.0], [256.0, 4143.0], [285.0, 3522.0], [286.0, 4736.0], [284.0, 4514.0], [274.0, 4657.428571428572], [272.0, 4468.0], [282.0, 4619.0], [280.0, 4547.0], [279.0, 4926.0], [278.0, 5011.0], [277.0, 4315.0], [276.0, 3982.0], [291.0, 4819.0], [303.0, 4888.0], [301.0, 4611.5], [299.0, 4587.0], [298.0, 4853.0], [296.0, 4997.0], [295.0, 4778.0], [294.0, 4805.0], [293.0, 4770.0], [290.0, 4423.0], [289.0, 4831.0], [288.0, 4373.0], [317.0, 4494.0], [318.0, 4203.0], [316.0, 4956.0], [307.0, 4897.0], [306.0, 4264.5], [304.0, 4585.0], [315.0, 4598.5], [313.0, 4609.0], [312.0, 4595.0], [311.0, 4473.0], [310.0, 3983.0], [309.0, 4111.0], [308.0, 4603.0], [323.0, 4812.0], [334.0, 4577.5], [332.0, 4663.0], [330.0, 4175.0], [329.0, 4942.0], [327.0, 4604.0], [326.0, 4594.0], [325.0, 4579.0], [324.0, 4836.0], [321.0, 4795.0], [320.0, 4675.0], [339.0, 4575.5], [351.0, 4766.0], [349.0, 4769.666666666667], [346.0, 4374.5], [344.0, 4544.0], [343.0, 4116.5], [341.0, 4567.0], [340.0, 4931.0], [337.0, 4933.0], [336.0, 4706.5], [366.0, 4516.5], [367.0, 4925.0], [364.0, 4931.0], [355.0, 4924.0], [353.0, 4847.0], [352.0, 4153.0], [363.0, 3906.0], [362.0, 4528.0], [360.0, 4577.0], [359.0, 4472.0], [358.0, 4548.0], [357.0, 4558.0], [356.0, 3926.0], [382.0, 4578.0], [383.0, 4419.0], [380.0, 4787.0], [371.0, 4739.0], [370.0, 4709.0], [368.0, 4509.0], [379.0, 4339.5], [377.0, 4890.0], [376.0, 4640.0], [375.0, 4540.0], [374.0, 4687.0], [373.0, 4710.0], [398.0, 4394.0], [399.0, 4325.0], [397.0, 4667.0], [387.0, 4522.0], [386.0, 4433.333333333333], [395.0, 4787.0], [394.0, 4666.0], [393.0, 4488.0], [392.0, 4391.0], [391.0, 4508.0], [390.0, 4861.0], [389.0, 4848.0], [388.0, 4364.0], [413.0, 4775.0], [414.0, 4345.0], [412.0, 4538.0], [411.0, 4207.0], [410.0, 4508.5], [408.0, 4580.0], [406.0, 4685.0], [404.0, 4656.0], [402.0, 4463.0], [401.0, 4427.0], [400.0, 4758.0], [429.0, 4493.5], [427.0, 4725.5], [426.0, 4446.0], [423.0, 4769.0], [422.0, 4595.0], [421.0, 4591.0], [418.0, 4723.0], [417.0, 4277.5], [435.0, 4290.0], [446.0, 4182.0], [444.0, 4762.0], [442.0, 4603.4], [441.0, 4193.0], [436.0, 4288.0], [434.0, 4289.0], [433.0, 4466.5], [432.0, 4633.5], [461.0, 4716.0], [463.0, 4512.666666666667], [460.0, 4684.5], [459.0, 4733.0], [458.0, 4282.0], [457.0, 4459.0], [455.0, 4581.0], [453.0, 4630.25], [449.0, 4386.8], [478.0, 4325.25], [474.0, 4645.6], [473.0, 4750.5], [468.0, 4751.0], [467.0, 4494.0], [464.0, 4498.0], [493.0, 4540.0], [490.0, 4691.0], [489.0, 4523.75], [484.0, 4626.666666666667], [481.0, 4555.0], [480.0, 4656.0], [509.0, 4402.0], [508.0, 4592.5], [506.0, 4514.0], [504.0, 4547.0], [502.0, 4515.0], [500.0, 4507.0], [499.0, 4358.333333333333], [497.0, 4259.0], [539.0, 4718.0], [542.0, 4574.75], [543.0, 4599.666666666667], [541.0, 4221.0], [537.0, 4743.0], [536.0, 4548.0], [534.0, 4528.5], [533.0, 4343.25], [525.0, 4179.0], [512.0, 4556.0], [514.0, 4721.0], [513.0, 4254.5], [519.0, 4614.0], [516.0, 4448.0], [524.0, 4558.5], [522.0, 4601.0], [569.0, 2108.0], [573.0, 2622.0], [575.0, 2672.5], [561.0, 4309.0], [560.0, 4247.0], [563.0, 3042.0], [562.0, 2811.0], [565.0, 2384.0], [564.0, 2538.0], [572.0, 2870.0], [571.0, 2101.0], [570.0, 2109.0], [568.0, 2040.0], [551.0, 4538.0], [550.0, 4450.5], [548.0, 4072.0], [547.0, 4414.75], [544.0, 4483.5], [559.0, 4198.0], [558.0, 4145.0], [557.0, 4348.0], [556.0, 3866.0], [555.0, 4166.0], [554.0, 4364.0], [553.0, 3940.0], [552.0, 4453.0], [567.0, 2043.0], [566.0, 463.0], [606.0, 2547.0], [607.0, 2539.0], [605.0, 1242.0], [604.0, 2609.0], [601.0, 1929.0], [600.0, 992.0], [591.0, 1437.5], [576.0, 2324.0], [580.0, 859.3333333333334], [579.0, 910.0], [582.0, 1271.0], [581.0, 801.0], [590.0, 2751.0], [589.0, 875.0], [587.0, 1273.6666666666667], [584.0, 1457.5], [599.0, 977.0], [597.0, 2466.0], [595.0, 1677.25], [628.0, 2263.0], [637.0, 694.0], [636.0, 2266.5], [634.0, 1408.0], [632.0, 334.0], [623.0, 2504.0], [610.0, 1658.3333333333333], [609.0, 2310.0], [613.0, 2683.0], [611.0, 2304.0], [622.0, 2566.0], [621.0, 2556.0], [620.0, 1821.0], [619.0, 1742.0], [618.0, 2393.3333333333335], [617.0, 439.5], [631.0, 247.0], [630.0, 2272.0], [629.0, 801.0], [627.0, 1816.0], [625.0, 2725.5], [665.0, 30.0], [669.0, 2543.0], [670.0, 36.0], [658.0, 29.5], [656.0, 32.0], [660.0, 38.0], [659.0, 28.0], [668.0, 39.0], [667.0, 40.0], [666.0, 28.0], [664.0, 37.0], [646.0, 2520.0], [645.0, 2705.0], [644.0, 2748.0], [643.0, 2727.0], [642.0, 303.0], [641.0, 317.0], [640.0, 1891.6666666666667], [655.0, 32.0], [654.0, 28.0], [653.0, 28.0], [652.0, 25.0], [651.0, 32.0], [650.0, 29.0], [649.0, 2614.3333333333335], [663.0, 51.0], [662.0, 1284.5], [700.0, 34.0], [703.0, 29.0], [689.0, 1037.5], [691.0, 26.0], [690.0, 33.0], [693.0, 2289.0], [692.0, 2005.0], [702.0, 33.0], [701.0, 28.0], [699.0, 33.0], [698.0, 40.0], [697.0, 38.0], [696.0, 41.0], [687.0, 273.0], [674.0, 2402.0], [673.0, 866.6666666666666], [678.0, 2411.5], [676.0, 32.0], [686.0, 1224.5], [684.0, 31.0], [683.0, 2286.5], [681.0, 1666.0], [695.0, 34.0], [694.0, 36.0], [730.0, 1812.0], [721.0, 25.0], [732.0, 2090.5], [733.0, 56.0], [720.0, 28.0], [731.0, 1791.0], [728.0, 2302.0], [711.0, 148.0], [710.0, 1889.0], [709.0, 32.0], [708.0, 25.0], [707.0, 2214.0], [706.0, 32.0], [705.0, 31.0], [704.0, 27.0], [719.0, 34.0], [718.0, 48.0], [717.0, 30.0], [715.0, 34.0], [713.0, 30.0], [712.0, 29.0], [726.0, 1809.0], [725.0, 33.333333333333336], [722.0, 25.0], [760.0, 996.5], [764.0, 1919.0], [767.0, 43.0], [753.0, 851.0], [756.0, 1805.5], [754.0, 30.0], [766.0, 1900.0], [765.0, 1909.0], [763.0, 26.0], [762.0, 2148.0], [761.0, 2085.0], [751.0, 1995.0], [736.0, 2184.0], [739.0, 1888.5], [738.0, 2188.0], [741.0, 31.0], [740.0, 1042.0], [743.0, 32.0], [742.0, 28.0], [750.0, 1695.0], [749.0, 2207.0], [748.0, 1704.0], [747.0, 28.0], [746.0, 27.0], [745.0, 30.0], [744.0, 2163.0], [758.0, 2151.0], [757.0, 1681.0], [797.0, 950.0], [788.0, 29.0], [798.0, 1556.0], [785.0, 1873.0], [784.0, 1610.0], [787.0, 1838.0], [786.0, 1606.0], [796.0, 1824.0], [793.0, 1876.0], [792.0, 2097.0], [774.0, 1887.0], [773.0, 2044.0], [772.0, 99.0], [771.0, 2002.0], [770.0, 1902.0], [769.0, 2051.0], [768.0, 2051.0], [783.0, 39.0], [782.0, 2121.0], [781.0, 1843.0], [780.0, 1854.0], [779.0, 1624.0], [778.0, 945.0], [777.0, 2039.0], [776.0, 1866.0], [791.0, 2028.0], [790.0, 1594.0], [789.0, 29.0], [824.0, 1933.0], [830.0, 1401.5], [831.0, 989.0], [818.0, 967.0], [828.0, 1653.0], [826.0, 1652.0], [825.0, 1945.0], [815.0, 57.0], [801.0, 1826.0], [800.0, 920.5], [803.0, 1730.0], [802.0, 1804.0], [805.0, 29.0], [804.0, 29.0], [807.0, 1780.0], [806.0, 1475.0], [814.0, 1747.0], [813.0, 1441.0], [812.0, 1974.0], [811.0, 1719.0], [810.0, 1859.0], [809.0, 1812.5], [823.0, 1541.5], [821.0, 1420.0], [820.0, 1397.0], [819.0, 1942.0], [856.0, 1265.5], [862.0, 1355.0], [863.0, 1832.0], [848.0, 1388.0], [861.0, 453.5], [859.0, 521.0], [858.0, 983.5], [847.0, 1308.0], [832.0, 1397.0], [836.0, 892.3333333333334], [833.0, 30.0], [839.0, 36.0], [837.0, 945.0], [846.0, 223.0], [845.0, 1401.5], [843.0, 1384.0], [842.0, 1380.0], [841.0, 1376.0], [840.0, 1415.0], [854.0, 1366.0], [852.0, 1367.5], [850.0, 1873.0], [849.0, 32.0], [892.0, 1234.0], [893.0, 1787.0], [881.0, 1818.0], [880.0, 1597.0], [883.0, 1814.0], [882.0, 604.0], [891.0, 33.0], [890.0, 1569.0], [889.0, 1577.0], [888.0, 1671.0], [879.0, 1572.0], [865.0, 679.0], [864.0, 874.0], [868.0, 687.0], [866.0, 509.0], [878.0, 1325.0], [876.0, 1821.0], [875.0, 1308.0], [874.0, 41.0], [873.0, 769.6], [887.0, 1581.0], [886.0, 1276.0], [885.0, 1786.0], [884.0, 594.0], [925.0, 44.0], [927.0, 767.5], [913.0, 968.0], [915.0, 1192.0], [914.0, 420.0], [917.0, 36.0], [916.0, 1253.0], [924.0, 1526.0], [923.0, 1464.0], [922.0, 1237.0], [921.0, 38.0], [920.0, 1245.0], [903.0, 1228.0], [900.0, 1020.0], [899.0, 1264.0], [896.0, 1212.0], [911.0, 38.5], [910.0, 1378.0], [907.0, 1615.3333333333333], [905.0, 1263.0], [904.0, 1551.5], [919.0, 57.0], [918.0, 58.0], [952.0, 1453.0], [958.0, 31.0], [959.0, 1079.0], [945.0, 808.0], [944.0, 1403.5], [957.0, 1136.0], [954.0, 1446.0], [953.0, 32.0], [942.0, 1474.0], [929.0, 170.0], [928.0, 1696.0], [933.0, 1497.0], [932.0, 1392.6666666666667], [935.0, 1580.0], [934.0, 1432.0], [941.0, 1691.0], [940.0, 586.5], [938.0, 1173.0], [937.0, 408.0], [936.0, 412.0], [951.0, 614.0], [949.0, 731.0], [948.0, 889.0], [947.0, 1460.0], [985.0, 247.0], [990.0, 1262.0], [991.0, 109.0], [976.0, 1410.0], [988.0, 1270.0], [987.0, 213.0], [986.0, 628.0], [984.0, 658.0], [967.0, 259.0], [966.0, 1280.0], [965.0, 1155.0], [962.0, 1120.0], [960.0, 699.0], [975.0, 1449.0], [974.0, 1414.0], [973.0, 1412.0], [972.0, 35.0], [971.0, 36.0], [970.0, 1613.0], [969.0, 1513.0], [968.0, 674.0], [983.0, 1253.0], [982.0, 1022.3333333333333], [979.0, 1003.0], [977.0, 1531.0], [1000.0, 421.0], [995.0, 1229.0], [992.0, 113.0], [1.0, 4115.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}, {"data": [[501.3159999999999, 3108.4209999999985]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10516.666666666666, "minX": 1.75635516E12, "maxY": 14366.666666666666, "series": [{"data": [[1.75635516E12, 14366.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75635516E12, 10516.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635516E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3108.4209999999985, "minX": 1.75635516E12, "maxY": 3108.4209999999985, "series": [{"data": [[1.75635516E12, 3108.4209999999985]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635516E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3108.3889999999988, "minX": 1.75635516E12, "maxY": 3108.3889999999988, "series": [{"data": [[1.75635516E12, 3108.3889999999988]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635516E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2200.302999999998, "minX": 1.75635516E12, "maxY": 2200.302999999998, "series": [{"data": [[1.75635516E12, 2200.302999999998]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635516E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635516E12, "maxY": 5118.0, "series": [{"data": [[1.75635516E12, 5118.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75635516E12, 4894.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75635516E12, 5096.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75635516E12, 5017.849999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75635516E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75635516E12, 4233.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635516E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 992.0, "minX": 189.0, "maxY": 4627.0, "series": [{"data": [[561.0, 4627.0], [189.0, 992.0], [250.0, 1360.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 561.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 992.0, "minX": 189.0, "maxY": 4627.0, "series": [{"data": [[561.0, 4627.0], [189.0, 992.0], [250.0, 1360.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 561.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75635516E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75635516E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635516E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75635516E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75635516E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635516E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75635516E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75635516E12, 16.666666666666668]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635516E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75635516E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75635516E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635516E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

