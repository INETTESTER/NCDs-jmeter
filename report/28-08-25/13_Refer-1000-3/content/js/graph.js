/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 43.0, "minX": 0.0, "maxY": 3794.0, "series": [{"data": [[0.0, 43.0], [0.1, 43.0], [0.2, 43.0], [0.3, 44.0], [0.4, 45.0], [0.5, 45.0], [0.6, 45.0], [0.7, 46.0], [0.8, 48.0], [0.9, 48.0], [1.0, 48.0], [1.1, 48.0], [1.2, 48.0], [1.3, 49.0], [1.4, 49.0], [1.5, 49.0], [1.6, 50.0], [1.7, 51.0], [1.8, 51.0], [1.9, 51.0], [2.0, 52.0], [2.1, 53.0], [2.2, 54.0], [2.3, 54.0], [2.4, 54.0], [2.5, 54.0], [2.6, 54.0], [2.7, 54.0], [2.8, 55.0], [2.9, 55.0], [3.0, 55.0], [3.1, 55.0], [3.2, 55.0], [3.3, 57.0], [3.4, 58.0], [3.5, 60.0], [3.6, 70.0], [3.7, 70.0], [3.8, 75.0], [3.9, 76.0], [4.0, 79.0], [4.1, 80.0], [4.2, 82.0], [4.3, 83.0], [4.4, 85.0], [4.5, 85.0], [4.6, 93.0], [4.7, 98.0], [4.8, 104.0], [4.9, 109.0], [5.0, 229.0], [5.1, 254.0], [5.2, 255.0], [5.3, 255.0], [5.4, 269.0], [5.5, 277.0], [5.6, 278.0], [5.7, 279.0], [5.8, 280.0], [5.9, 289.0], [6.0, 307.0], [6.1, 310.0], [6.2, 316.0], [6.3, 412.0], [6.4, 414.0], [6.5, 415.0], [6.6, 417.0], [6.7, 437.0], [6.8, 440.0], [6.9, 443.0], [7.0, 470.0], [7.1, 728.0], [7.2, 788.0], [7.3, 789.0], [7.4, 813.0], [7.5, 814.0], [7.6, 815.0], [7.7, 827.0], [7.8, 868.0], [7.9, 890.0], [8.0, 894.0], [8.1, 906.0], [8.2, 913.0], [8.3, 913.0], [8.4, 914.0], [8.5, 919.0], [8.6, 929.0], [8.7, 931.0], [8.8, 936.0], [8.9, 958.0], [9.0, 958.0], [9.1, 961.0], [9.2, 963.0], [9.3, 967.0], [9.4, 969.0], [9.5, 969.0], [9.6, 974.0], [9.7, 975.0], [9.8, 982.0], [9.9, 985.0], [10.0, 992.0], [10.1, 993.0], [10.2, 995.0], [10.3, 998.0], [10.4, 1000.0], [10.5, 1002.0], [10.6, 1003.0], [10.7, 1020.0], [10.8, 1021.0], [10.9, 1038.0], [11.0, 1040.0], [11.1, 1042.0], [11.2, 1044.0], [11.3, 1052.0], [11.4, 1080.0], [11.5, 1085.0], [11.6, 1097.0], [11.7, 1114.0], [11.8, 1135.0], [11.9, 1155.0], [12.0, 1159.0], [12.1, 1160.0], [12.2, 1164.0], [12.3, 1173.0], [12.4, 1188.0], [12.5, 1190.0], [12.6, 1201.0], [12.7, 1204.0], [12.8, 1206.0], [12.9, 1215.0], [13.0, 1234.0], [13.1, 1234.0], [13.2, 1237.0], [13.3, 1237.0], [13.4, 1243.0], [13.5, 1244.0], [13.6, 1258.0], [13.7, 1259.0], [13.8, 1276.0], [13.9, 1280.0], [14.0, 1288.0], [14.1, 1289.0], [14.2, 1295.0], [14.3, 1299.0], [14.4, 1300.0], [14.5, 1300.0], [14.6, 1303.0], [14.7, 1309.0], [14.8, 1312.0], [14.9, 1315.0], [15.0, 1316.0], [15.1, 1316.0], [15.2, 1320.0], [15.3, 1326.0], [15.4, 1334.0], [15.5, 1335.0], [15.6, 1338.0], [15.7, 1339.0], [15.8, 1345.0], [15.9, 1348.0], [16.0, 1350.0], [16.1, 1352.0], [16.2, 1353.0], [16.3, 1353.0], [16.4, 1355.0], [16.5, 1357.0], [16.6, 1357.0], [16.7, 1358.0], [16.8, 1363.0], [16.9, 1364.0], [17.0, 1364.0], [17.1, 1366.0], [17.2, 1368.0], [17.3, 1368.0], [17.4, 1369.0], [17.5, 1375.0], [17.6, 1376.0], [17.7, 1377.0], [17.8, 1382.0], [17.9, 1386.0], [18.0, 1398.0], [18.1, 1401.0], [18.2, 1401.0], [18.3, 1406.0], [18.4, 1411.0], [18.5, 1413.0], [18.6, 1415.0], [18.7, 1420.0], [18.8, 1422.0], [18.9, 1429.0], [19.0, 1430.0], [19.1, 1436.0], [19.2, 1440.0], [19.3, 1444.0], [19.4, 1445.0], [19.5, 1452.0], [19.6, 1457.0], [19.7, 1461.0], [19.8, 1461.0], [19.9, 1462.0], [20.0, 1464.0], [20.1, 1470.0], [20.2, 1472.0], [20.3, 1474.0], [20.4, 1474.0], [20.5, 1476.0], [20.6, 1476.0], [20.7, 1478.0], [20.8, 1480.0], [20.9, 1480.0], [21.0, 1481.0], [21.1, 1488.0], [21.2, 1490.0], [21.3, 1492.0], [21.4, 1493.0], [21.5, 1503.0], [21.6, 1504.0], [21.7, 1506.0], [21.8, 1506.0], [21.9, 1507.0], [22.0, 1508.0], [22.1, 1509.0], [22.2, 1511.0], [22.3, 1515.0], [22.4, 1518.0], [22.5, 1518.0], [22.6, 1521.0], [22.7, 1523.0], [22.8, 1535.0], [22.9, 1537.0], [23.0, 1539.0], [23.1, 1539.0], [23.2, 1539.0], [23.3, 1543.0], [23.4, 1548.0], [23.5, 1551.0], [23.6, 1551.0], [23.7, 1551.0], [23.8, 1553.0], [23.9, 1554.0], [24.0, 1557.0], [24.1, 1558.0], [24.2, 1563.0], [24.3, 1565.0], [24.4, 1566.0], [24.5, 1567.0], [24.6, 1569.0], [24.7, 1585.0], [24.8, 1591.0], [24.9, 1604.0], [25.0, 1605.0], [25.1, 1606.0], [25.2, 1608.0], [25.3, 1609.0], [25.4, 1609.0], [25.5, 1611.0], [25.6, 1612.0], [25.7, 1614.0], [25.8, 1614.0], [25.9, 1617.0], [26.0, 1621.0], [26.1, 1621.0], [26.2, 1623.0], [26.3, 1627.0], [26.4, 1635.0], [26.5, 1636.0], [26.6, 1644.0], [26.7, 1645.0], [26.8, 1648.0], [26.9, 1649.0], [27.0, 1651.0], [27.1, 1653.0], [27.2, 1654.0], [27.3, 1656.0], [27.4, 1658.0], [27.5, 1660.0], [27.6, 1676.0], [27.7, 1682.0], [27.8, 1682.0], [27.9, 1683.0], [28.0, 1684.0], [28.1, 1693.0], [28.2, 1694.0], [28.3, 1694.0], [28.4, 1699.0], [28.5, 1700.0], [28.6, 1701.0], [28.7, 1701.0], [28.8, 1701.0], [28.9, 1702.0], [29.0, 1708.0], [29.1, 1710.0], [29.2, 1710.0], [29.3, 1713.0], [29.4, 1715.0], [29.5, 1715.0], [29.6, 1719.0], [29.7, 1720.0], [29.8, 1721.0], [29.9, 1724.0], [30.0, 1732.0], [30.1, 1734.0], [30.2, 1738.0], [30.3, 1740.0], [30.4, 1741.0], [30.5, 1743.0], [30.6, 1745.0], [30.7, 1748.0], [30.8, 1748.0], [30.9, 1749.0], [31.0, 1754.0], [31.1, 1756.0], [31.2, 1764.0], [31.3, 1766.0], [31.4, 1767.0], [31.5, 1769.0], [31.6, 1771.0], [31.7, 1777.0], [31.8, 1788.0], [31.9, 1790.0], [32.0, 1792.0], [32.1, 1792.0], [32.2, 1795.0], [32.3, 1796.0], [32.4, 1802.0], [32.5, 1804.0], [32.6, 1805.0], [32.7, 1806.0], [32.8, 1806.0], [32.9, 1806.0], [33.0, 1806.0], [33.1, 1808.0], [33.2, 1816.0], [33.3, 1817.0], [33.4, 1820.0], [33.5, 1828.0], [33.6, 1828.0], [33.7, 1830.0], [33.8, 1833.0], [33.9, 1834.0], [34.0, 1843.0], [34.1, 1844.0], [34.2, 1849.0], [34.3, 1869.0], [34.4, 1869.0], [34.5, 1870.0], [34.6, 1872.0], [34.7, 1873.0], [34.8, 1878.0], [34.9, 1882.0], [35.0, 1883.0], [35.1, 1883.0], [35.2, 1886.0], [35.3, 1886.0], [35.4, 1887.0], [35.5, 1888.0], [35.6, 1890.0], [35.7, 1897.0], [35.8, 1899.0], [35.9, 1901.0], [36.0, 1902.0], [36.1, 1906.0], [36.2, 1907.0], [36.3, 1908.0], [36.4, 1909.0], [36.5, 1911.0], [36.6, 1912.0], [36.7, 1928.0], [36.8, 1928.0], [36.9, 1933.0], [37.0, 1934.0], [37.1, 1939.0], [37.2, 1951.0], [37.3, 1952.0], [37.4, 1957.0], [37.5, 1958.0], [37.6, 1960.0], [37.7, 1966.0], [37.8, 1970.0], [37.9, 1971.0], [38.0, 1976.0], [38.1, 1991.0], [38.2, 1992.0], [38.3, 1996.0], [38.4, 1998.0], [38.5, 2000.0], [38.6, 2006.0], [38.7, 2016.0], [38.8, 2019.0], [38.9, 2026.0], [39.0, 2037.0], [39.1, 2043.0], [39.2, 2044.0], [39.3, 2054.0], [39.4, 2062.0], [39.5, 2064.0], [39.6, 2068.0], [39.7, 2076.0], [39.8, 2079.0], [39.9, 2084.0], [40.0, 2084.0], [40.1, 2087.0], [40.2, 2087.0], [40.3, 2089.0], [40.4, 2093.0], [40.5, 2097.0], [40.6, 2105.0], [40.7, 2110.0], [40.8, 2110.0], [40.9, 2114.0], [41.0, 2115.0], [41.1, 2125.0], [41.2, 2129.0], [41.3, 2139.0], [41.4, 2146.0], [41.5, 2146.0], [41.6, 2150.0], [41.7, 2156.0], [41.8, 2157.0], [41.9, 2167.0], [42.0, 2167.0], [42.1, 2167.0], [42.2, 2169.0], [42.3, 2173.0], [42.4, 2174.0], [42.5, 2176.0], [42.6, 2177.0], [42.7, 2181.0], [42.8, 2181.0], [42.9, 2184.0], [43.0, 2187.0], [43.1, 2192.0], [43.2, 2196.0], [43.3, 2200.0], [43.4, 2201.0], [43.5, 2202.0], [43.6, 2204.0], [43.7, 2206.0], [43.8, 2210.0], [43.9, 2211.0], [44.0, 2216.0], [44.1, 2218.0], [44.2, 2219.0], [44.3, 2220.0], [44.4, 2221.0], [44.5, 2224.0], [44.6, 2228.0], [44.7, 2233.0], [44.8, 2234.0], [44.9, 2239.0], [45.0, 2241.0], [45.1, 2244.0], [45.2, 2252.0], [45.3, 2256.0], [45.4, 2271.0], [45.5, 2271.0], [45.6, 2271.0], [45.7, 2273.0], [45.8, 2277.0], [45.9, 2280.0], [46.0, 2281.0], [46.1, 2282.0], [46.2, 2285.0], [46.3, 2285.0], [46.4, 2287.0], [46.5, 2287.0], [46.6, 2288.0], [46.7, 2289.0], [46.8, 2291.0], [46.9, 2291.0], [47.0, 2292.0], [47.1, 2297.0], [47.2, 2305.0], [47.3, 2307.0], [47.4, 2307.0], [47.5, 2308.0], [47.6, 2308.0], [47.7, 2311.0], [47.8, 2312.0], [47.9, 2312.0], [48.0, 2318.0], [48.1, 2319.0], [48.2, 2319.0], [48.3, 2321.0], [48.4, 2324.0], [48.5, 2330.0], [48.6, 2332.0], [48.7, 2334.0], [48.8, 2335.0], [48.9, 2336.0], [49.0, 2339.0], [49.1, 2340.0], [49.2, 2340.0], [49.3, 2341.0], [49.4, 2345.0], [49.5, 2346.0], [49.6, 2349.0], [49.7, 2354.0], [49.8, 2355.0], [49.9, 2357.0], [50.0, 2359.0], [50.1, 2359.0], [50.2, 2368.0], [50.3, 2372.0], [50.4, 2374.0], [50.5, 2375.0], [50.6, 2377.0], [50.7, 2381.0], [50.8, 2382.0], [50.9, 2388.0], [51.0, 2390.0], [51.1, 2391.0], [51.2, 2391.0], [51.3, 2393.0], [51.4, 2394.0], [51.5, 2396.0], [51.6, 2398.0], [51.7, 2409.0], [51.8, 2412.0], [51.9, 2418.0], [52.0, 2419.0], [52.1, 2425.0], [52.2, 2431.0], [52.3, 2431.0], [52.4, 2443.0], [52.5, 2445.0], [52.6, 2449.0], [52.7, 2449.0], [52.8, 2462.0], [52.9, 2465.0], [53.0, 2469.0], [53.1, 2473.0], [53.2, 2476.0], [53.3, 2477.0], [53.4, 2482.0], [53.5, 2484.0], [53.6, 2492.0], [53.7, 2494.0], [53.8, 2497.0], [53.9, 2500.0], [54.0, 2505.0], [54.1, 2509.0], [54.2, 2510.0], [54.3, 2512.0], [54.4, 2518.0], [54.5, 2525.0], [54.6, 2533.0], [54.7, 2542.0], [54.8, 2544.0], [54.9, 2547.0], [55.0, 2547.0], [55.1, 2549.0], [55.2, 2557.0], [55.3, 2559.0], [55.4, 2560.0], [55.5, 2563.0], [55.6, 2567.0], [55.7, 2569.0], [55.8, 2571.0], [55.9, 2571.0], [56.0, 2574.0], [56.1, 2575.0], [56.2, 2576.0], [56.3, 2585.0], [56.4, 2589.0], [56.5, 2592.0], [56.6, 2594.0], [56.7, 2596.0], [56.8, 2599.0], [56.9, 2603.0], [57.0, 2606.0], [57.1, 2606.0], [57.2, 2609.0], [57.3, 2611.0], [57.4, 2615.0], [57.5, 2619.0], [57.6, 2620.0], [57.7, 2622.0], [57.8, 2622.0], [57.9, 2631.0], [58.0, 2633.0], [58.1, 2635.0], [58.2, 2637.0], [58.3, 2653.0], [58.4, 2658.0], [58.5, 2661.0], [58.6, 2663.0], [58.7, 2668.0], [58.8, 2672.0], [58.9, 2675.0], [59.0, 2680.0], [59.1, 2684.0], [59.2, 2686.0], [59.3, 2689.0], [59.4, 2692.0], [59.5, 2695.0], [59.6, 2698.0], [59.7, 2701.0], [59.8, 2703.0], [59.9, 2703.0], [60.0, 2707.0], [60.1, 2709.0], [60.2, 2710.0], [60.3, 2712.0], [60.4, 2724.0], [60.5, 2725.0], [60.6, 2725.0], [60.7, 2726.0], [60.8, 2729.0], [60.9, 2734.0], [61.0, 2736.0], [61.1, 2739.0], [61.2, 2740.0], [61.3, 2758.0], [61.4, 2767.0], [61.5, 2776.0], [61.6, 2778.0], [61.7, 2786.0], [61.8, 2791.0], [61.9, 2794.0], [62.0, 2794.0], [62.1, 2794.0], [62.2, 2796.0], [62.3, 2797.0], [62.4, 2800.0], [62.5, 2800.0], [62.6, 2802.0], [62.7, 2806.0], [62.8, 2808.0], [62.9, 2810.0], [63.0, 2815.0], [63.1, 2818.0], [63.2, 2819.0], [63.3, 2820.0], [63.4, 2828.0], [63.5, 2828.0], [63.6, 2833.0], [63.7, 2835.0], [63.8, 2837.0], [63.9, 2838.0], [64.0, 2838.0], [64.1, 2842.0], [64.2, 2844.0], [64.3, 2846.0], [64.4, 2851.0], [64.5, 2852.0], [64.6, 2853.0], [64.7, 2857.0], [64.8, 2857.0], [64.9, 2858.0], [65.0, 2859.0], [65.1, 2861.0], [65.2, 2861.0], [65.3, 2868.0], [65.4, 2869.0], [65.5, 2870.0], [65.6, 2870.0], [65.7, 2871.0], [65.8, 2873.0], [65.9, 2875.0], [66.0, 2886.0], [66.1, 2890.0], [66.2, 2893.0], [66.3, 2894.0], [66.4, 2895.0], [66.5, 2898.0], [66.6, 2900.0], [66.7, 2900.0], [66.8, 2901.0], [66.9, 2901.0], [67.0, 2902.0], [67.1, 2905.0], [67.2, 2905.0], [67.3, 2906.0], [67.4, 2908.0], [67.5, 2908.0], [67.6, 2913.0], [67.7, 2913.0], [67.8, 2916.0], [67.9, 2918.0], [68.0, 2924.0], [68.1, 2926.0], [68.2, 2929.0], [68.3, 2932.0], [68.4, 2934.0], [68.5, 2937.0], [68.6, 2938.0], [68.7, 2940.0], [68.8, 2943.0], [68.9, 2944.0], [69.0, 2945.0], [69.1, 2946.0], [69.2, 2948.0], [69.3, 2949.0], [69.4, 2953.0], [69.5, 2957.0], [69.6, 2957.0], [69.7, 2960.0], [69.8, 2963.0], [69.9, 2964.0], [70.0, 2965.0], [70.1, 2965.0], [70.2, 2966.0], [70.3, 2966.0], [70.4, 2970.0], [70.5, 2971.0], [70.6, 2971.0], [70.7, 2974.0], [70.8, 2977.0], [70.9, 2982.0], [71.0, 2982.0], [71.1, 2983.0], [71.2, 2983.0], [71.3, 2988.0], [71.4, 2989.0], [71.5, 2989.0], [71.6, 2990.0], [71.7, 2990.0], [71.8, 2992.0], [71.9, 2996.0], [72.0, 2999.0], [72.1, 3000.0], [72.2, 3002.0], [72.3, 3004.0], [72.4, 3005.0], [72.5, 3005.0], [72.6, 3007.0], [72.7, 3007.0], [72.8, 3008.0], [72.9, 3009.0], [73.0, 3009.0], [73.1, 3014.0], [73.2, 3016.0], [73.3, 3016.0], [73.4, 3017.0], [73.5, 3017.0], [73.6, 3018.0], [73.7, 3021.0], [73.8, 3021.0], [73.9, 3022.0], [74.0, 3023.0], [74.1, 3023.0], [74.2, 3023.0], [74.3, 3024.0], [74.4, 3024.0], [74.5, 3026.0], [74.6, 3028.0], [74.7, 3029.0], [74.8, 3030.0], [74.9, 3034.0], [75.0, 3034.0], [75.1, 3035.0], [75.2, 3035.0], [75.3, 3035.0], [75.4, 3036.0], [75.5, 3036.0], [75.6, 3038.0], [75.7, 3040.0], [75.8, 3040.0], [75.9, 3045.0], [76.0, 3046.0], [76.1, 3049.0], [76.2, 3050.0], [76.3, 3051.0], [76.4, 3054.0], [76.5, 3055.0], [76.6, 3056.0], [76.7, 3056.0], [76.8, 3057.0], [76.9, 3057.0], [77.0, 3057.0], [77.1, 3057.0], [77.2, 3058.0], [77.3, 3059.0], [77.4, 3063.0], [77.5, 3065.0], [77.6, 3066.0], [77.7, 3067.0], [77.8, 3067.0], [77.9, 3068.0], [78.0, 3068.0], [78.1, 3069.0], [78.2, 3070.0], [78.3, 3070.0], [78.4, 3070.0], [78.5, 3071.0], [78.6, 3071.0], [78.7, 3073.0], [78.8, 3074.0], [78.9, 3074.0], [79.0, 3074.0], [79.1, 3075.0], [79.2, 3075.0], [79.3, 3076.0], [79.4, 3077.0], [79.5, 3078.0], [79.6, 3078.0], [79.7, 3078.0], [79.8, 3078.0], [79.9, 3080.0], [80.0, 3081.0], [80.1, 3081.0], [80.2, 3082.0], [80.3, 3083.0], [80.4, 3083.0], [80.5, 3086.0], [80.6, 3089.0], [80.7, 3090.0], [80.8, 3094.0], [80.9, 3095.0], [81.0, 3096.0], [81.1, 3096.0], [81.2, 3097.0], [81.3, 3098.0], [81.4, 3099.0], [81.5, 3108.0], [81.6, 3110.0], [81.7, 3111.0], [81.8, 3112.0], [81.9, 3112.0], [82.0, 3113.0], [82.1, 3113.0], [82.2, 3116.0], [82.3, 3118.0], [82.4, 3122.0], [82.5, 3124.0], [82.6, 3125.0], [82.7, 3132.0], [82.8, 3132.0], [82.9, 3133.0], [83.0, 3134.0], [83.1, 3134.0], [83.2, 3135.0], [83.3, 3141.0], [83.4, 3141.0], [83.5, 3142.0], [83.6, 3142.0], [83.7, 3142.0], [83.8, 3144.0], [83.9, 3147.0], [84.0, 3149.0], [84.1, 3152.0], [84.2, 3152.0], [84.3, 3156.0], [84.4, 3156.0], [84.5, 3157.0], [84.6, 3159.0], [84.7, 3162.0], [84.8, 3163.0], [84.9, 3164.0], [85.0, 3165.0], [85.1, 3173.0], [85.2, 3174.0], [85.3, 3176.0], [85.4, 3183.0], [85.5, 3184.0], [85.6, 3185.0], [85.7, 3186.0], [85.8, 3187.0], [85.9, 3187.0], [86.0, 3190.0], [86.1, 3191.0], [86.2, 3194.0], [86.3, 3199.0], [86.4, 3200.0], [86.5, 3205.0], [86.6, 3206.0], [86.7, 3206.0], [86.8, 3210.0], [86.9, 3214.0], [87.0, 3216.0], [87.1, 3216.0], [87.2, 3218.0], [87.3, 3219.0], [87.4, 3220.0], [87.5, 3222.0], [87.6, 3222.0], [87.7, 3223.0], [87.8, 3227.0], [87.9, 3229.0], [88.0, 3231.0], [88.1, 3238.0], [88.2, 3238.0], [88.3, 3240.0], [88.4, 3240.0], [88.5, 3245.0], [88.6, 3248.0], [88.7, 3250.0], [88.8, 3258.0], [88.9, 3271.0], [89.0, 3273.0], [89.1, 3276.0], [89.2, 3278.0], [89.3, 3278.0], [89.4, 3281.0], [89.5, 3282.0], [89.6, 3294.0], [89.7, 3300.0], [89.8, 3300.0], [89.9, 3308.0], [90.0, 3308.0], [90.1, 3311.0], [90.2, 3313.0], [90.3, 3313.0], [90.4, 3314.0], [90.5, 3315.0], [90.6, 3315.0], [90.7, 3316.0], [90.8, 3318.0], [90.9, 3320.0], [91.0, 3321.0], [91.1, 3326.0], [91.2, 3329.0], [91.3, 3335.0], [91.4, 3335.0], [91.5, 3338.0], [91.6, 3340.0], [91.7, 3341.0], [91.8, 3341.0], [91.9, 3342.0], [92.0, 3344.0], [92.1, 3346.0], [92.2, 3348.0], [92.3, 3348.0], [92.4, 3350.0], [92.5, 3356.0], [92.6, 3364.0], [92.7, 3367.0], [92.8, 3374.0], [92.9, 3386.0], [93.0, 3386.0], [93.1, 3395.0], [93.2, 3406.0], [93.3, 3410.0], [93.4, 3419.0], [93.5, 3419.0], [93.6, 3420.0], [93.7, 3421.0], [93.8, 3424.0], [93.9, 3426.0], [94.0, 3434.0], [94.1, 3436.0], [94.2, 3446.0], [94.3, 3451.0], [94.4, 3462.0], [94.5, 3462.0], [94.6, 3479.0], [94.7, 3479.0], [94.8, 3480.0], [94.9, 3481.0], [95.0, 3485.0], [95.1, 3500.0], [95.2, 3510.0], [95.3, 3520.0], [95.4, 3532.0], [95.5, 3535.0], [95.6, 3536.0], [95.7, 3537.0], [95.8, 3538.0], [95.9, 3539.0], [96.0, 3540.0], [96.1, 3541.0], [96.2, 3550.0], [96.3, 3551.0], [96.4, 3554.0], [96.5, 3557.0], [96.6, 3562.0], [96.7, 3565.0], [96.8, 3567.0], [96.9, 3570.0], [97.0, 3571.0], [97.1, 3575.0], [97.2, 3578.0], [97.3, 3582.0], [97.4, 3592.0], [97.5, 3596.0], [97.6, 3607.0], [97.7, 3613.0], [97.8, 3614.0], [97.9, 3645.0], [98.0, 3653.0], [98.1, 3669.0], [98.2, 3678.0], [98.3, 3682.0], [98.4, 3684.0], [98.5, 3684.0], [98.6, 3687.0], [98.7, 3693.0], [98.8, 3696.0], [98.9, 3702.0], [99.0, 3703.0], [99.1, 3704.0], [99.2, 3726.0], [99.3, 3744.0], [99.4, 3746.0], [99.5, 3757.0], [99.6, 3757.0], [99.7, 3766.0], [99.8, 3769.0], [99.9, 3794.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 94.0, "series": [{"data": [[0.0, 48.0], [700.0, 3.0], [800.0, 7.0], [900.0, 23.0], [1000.0, 13.0], [1100.0, 9.0], [1200.0, 18.0], [1300.0, 37.0], [1400.0, 33.0], [1500.0, 34.0], [100.0, 2.0], [1600.0, 36.0], [1700.0, 39.0], [1800.0, 35.0], [1900.0, 26.0], [2000.0, 21.0], [2100.0, 27.0], [2200.0, 39.0], [2300.0, 45.0], [2400.0, 22.0], [2500.0, 30.0], [2600.0, 28.0], [2700.0, 27.0], [2800.0, 42.0], [2900.0, 55.0], [3000.0, 94.0], [3100.0, 50.0], [200.0, 10.0], [3200.0, 33.0], [3300.0, 35.0], [3400.0, 19.0], [3500.0, 25.0], [3600.0, 13.0], [3700.0, 11.0], [300.0, 3.0], [400.0, 8.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 71.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 786.0, "series": [{"data": [[0.0, 71.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 143.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 786.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 502.7950000000008, "minX": 1.75636596E12, "maxY": 502.7950000000008, "series": [{"data": [[1.75636596E12, 502.7950000000008]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636596E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 43.0, "minX": 1.0, "maxY": 3794.0, "series": [{"data": [[2.0, 3551.0], [3.0, 3479.0], [4.0, 3329.0], [6.0, 3570.0], [7.0, 2986.5], [8.0, 3185.0], [9.0, 2965.0], [10.0, 3794.0], [11.0, 3068.0], [14.0, 3061.0], [15.0, 3021.0], [16.0, 2982.5], [20.0, 3578.0], [21.0, 3098.0], [23.0, 3017.0], [24.0, 3205.0], [25.0, 2937.0], [26.0, 3550.0], [27.0, 3017.0], [29.0, 3556.0], [31.0, 3101.0], [33.0, 3173.5], [37.0, 3313.0], [36.0, 3057.0], [39.0, 3510.0], [41.0, 2944.0], [42.0, 2974.0], [45.0, 3159.5], [47.0, 3532.0], [49.0, 2703.0], [48.0, 3279.0], [53.0, 3235.0], [52.0, 3481.0], [59.0, 3163.5], [61.0, 3192.0], [60.0, 3310.2], [67.0, 3028.0], [69.0, 3210.6666666666665], [68.0, 3750.5], [75.0, 3195.6666666666665], [73.0, 3520.0], [79.0, 3116.0], [82.0, 3142.0], [81.0, 2953.0], [80.0, 3320.0], [85.0, 2765.5], [91.0, 3301.8888888888887], [95.0, 2901.0], [94.0, 3592.0], [99.0, 2948.0], [96.0, 3389.5], [101.0, 3364.0], [106.0, 3134.0], [105.0, 3192.375], [111.0, 3342.0], [110.0, 2798.5], [113.0, 3236.75], [116.0, 3682.0], [127.0, 3186.3333333333335], [125.0, 3396.5], [124.0, 3417.5], [131.0, 3165.5], [129.0, 3626.0], [128.0, 2549.0], [142.0, 2913.0], [141.0, 2983.0], [139.0, 2913.0], [137.0, 3263.75], [150.0, 3144.0], [149.0, 3194.0], [148.0, 3197.5], [144.0, 3234.363636363636], [156.0, 3071.6], [154.0, 3607.0], [153.0, 3165.5], [167.0, 2857.0], [166.0, 3222.0], [165.0, 3339.5], [161.0, 3300.0], [174.0, 2842.0], [171.0, 3313.0], [168.0, 3419.0], [183.0, 2870.0], [182.0, 3253.0], [181.0, 3046.0], [180.0, 3026.0], [178.0, 3278.5], [177.0, 3139.5], [176.0, 3500.0], [189.0, 3095.4], [187.0, 2492.0], [185.0, 3035.0], [198.0, 3298.8], [193.0, 3255.25], [201.0, 2820.0], [223.0, 3008.5], [222.0, 3099.187499999999], [221.0, 3135.0], [220.0, 3275.5], [229.0, 3219.833333333333], [225.0, 2875.0], [238.0, 3330.2], [236.0, 2712.0], [235.0, 3240.0], [233.0, 3557.0], [232.0, 3190.0], [247.0, 2909.5], [245.0, 3007.0], [243.0, 3216.0], [242.0, 3247.5], [255.0, 3093.0], [253.0, 3115.5], [251.0, 3113.0], [250.0, 3065.0], [249.0, 3191.0], [248.0, 3142.0], [271.0, 3097.0], [270.0, 3071.0], [269.0, 3063.3333333333335], [266.0, 2992.0], [265.0, 3065.1666666666665], [262.0, 3096.0], [258.0, 3046.5], [256.0, 3125.0], [274.0, 3057.0], [287.0, 3020.0], [285.0, 3019.5], [282.0, 2983.0], [280.0, 3078.0], [278.0, 3078.0], [277.0, 3075.6666666666665], [273.0, 3068.0], [272.0, 3095.0], [291.0, 3067.0], [302.0, 2859.0], [303.0, 3231.0], [301.0, 3057.0], [299.0, 2835.0], [296.0, 3059.0], [294.0, 2949.0], [288.0, 3074.0], [290.0, 3055.0], [289.0, 3073.0], [318.0, 3071.0], [319.0, 3049.0], [317.0, 3196.25], [314.0, 3183.6666666666665], [313.0, 3273.0], [309.0, 3137.0], [307.0, 2893.0], [306.0, 3317.5], [304.0, 3070.0], [323.0, 3083.0], [335.0, 3183.3333333333335], [332.0, 3278.0], [331.0, 2794.0], [330.0, 3220.0], [328.0, 3172.6666666666665], [327.0, 3294.0], [324.0, 2800.0], [322.0, 2928.0], [320.0, 3069.0], [349.0, 2929.0], [351.0, 3040.5], [348.0, 3222.0], [337.0, 3024.0], [336.0, 3141.0], [347.0, 3094.0], [346.0, 3096.0], [345.0, 3250.0], [344.0, 3014.0], [343.0, 3088.5], [341.0, 3281.0], [340.0, 3066.3333333333335], [366.0, 3142.0], [367.0, 2857.0], [365.0, 3122.0], [364.0, 2941.3333333333335], [361.0, 3132.0], [360.0, 3016.6], [355.0, 2847.0], [353.0, 3156.0], [352.0, 3183.0], [371.0, 2675.0], [381.0, 2815.0], [380.0, 2808.0], [370.0, 3108.0], [369.0, 2725.0], [368.0, 2906.0], [379.0, 2837.0], [378.0, 2892.0], [376.0, 3086.0], [375.0, 2710.0], [374.0, 3005.0], [373.0, 2846.0], [372.0, 3124.0], [399.0, 2091.0], [397.0, 2857.0], [387.0, 2994.5], [385.0, 3009.0], [384.0, 2864.0], [395.0, 2945.0], [394.0, 2960.0], [393.0, 2957.0], [392.0, 2868.0], [391.0, 2729.0], [389.0, 2585.0], [388.0, 2999.0], [413.0, 2653.0], [415.0, 2013.5], [412.0, 2716.5], [410.0, 2908.0], [409.0, 2308.0], [408.0, 2357.0], [407.0, 2305.0], [406.0, 2761.3333333333335], [403.0, 2819.0], [402.0, 1621.0], [401.0, 1623.0], [400.0, 1353.0], [430.0, 2615.5], [431.0, 1767.0], [428.0, 2784.0], [419.0, 2087.0], [418.0, 1806.0], [417.0, 2167.0], [416.0, 1648.0], [426.0, 2833.0], [425.0, 2339.0], [424.0, 2079.0], [423.0, 2797.0], [422.0, 2087.0], [421.0, 2437.5], [435.0, 1699.0], [445.0, 1908.0], [447.0, 1819.5], [444.0, 2595.0], [442.0, 2778.0], [441.0, 2149.0], [439.0, 2700.0], [436.0, 2019.0], [434.0, 2629.5], [432.0, 2619.0], [460.0, 2512.0], [462.0, 1280.0], [463.0, 2312.0], [461.0, 2736.0], [459.0, 2733.3333333333335], [456.0, 2609.0], [455.0, 1424.5], [448.0, 2567.0], [451.0, 1897.0], [450.0, 1814.5], [453.0, 1422.0], [452.0, 2776.0], [477.0, 1476.0], [479.0, 1840.0], [476.0, 2024.5], [474.0, 2129.0], [473.0, 2196.0], [471.0, 2307.0], [470.0, 1504.0], [469.0, 2596.25], [465.0, 2003.5], [494.0, 1234.0], [495.0, 1159.0], [493.0, 1243.0], [492.0, 2698.0], [491.0, 2605.5], [489.0, 2375.0], [488.0, 2377.0], [487.0, 2381.0], [480.0, 1481.0], [483.0, 1474.0], [482.0, 2701.0], [486.0, 2351.6666666666665], [484.0, 2390.0], [510.0, 2114.0], [511.0, 2686.0], [509.0, 2703.0], [508.0, 2192.0], [506.0, 2110.0], [505.0, 2218.0], [504.0, 2606.0], [503.0, 1905.0], [499.0, 1040.0], [498.0, 1791.0], [500.0, 1038.0], [540.0, 2449.6666666666665], [532.0, 2571.0], [542.0, 2398.0], [529.0, 2398.0], [528.0, 2359.0], [537.0, 2340.0], [536.0, 2355.0], [527.0, 2542.0], [512.0, 2216.5], [517.0, 2545.75], [513.0, 2672.0], [526.0, 2224.0], [525.0, 2680.0], [524.0, 2507.6666666666665], [522.0, 2167.0], [521.0, 2594.5], [520.0, 2557.0], [535.0, 2409.0], [534.0, 2221.0], [533.0, 2271.0], [531.0, 2431.0], [530.0, 2340.0], [570.0, 2364.0], [574.0, 1998.0], [575.0, 2285.0], [560.0, 2289.0], [563.0, 2426.5], [561.0, 2594.0], [565.0, 1970.0], [564.0, 2425.0], [573.0, 2494.0], [572.0, 2026.0], [571.0, 2308.0], [568.0, 2484.0], [551.0, 2631.0], [550.0, 2346.0], [549.0, 2603.0], [548.0, 2592.0], [547.0, 2559.0], [546.0, 2620.0], [545.0, 2336.0], [544.0, 2376.5], [559.0, 2292.0], [558.0, 2206.0], [557.0, 2416.0], [554.0, 2406.0], [552.0, 2335.0], [567.0, 2560.0], [566.0, 2575.0], [600.0, 2318.0], [604.0, 2382.0], [607.0, 2372.0], [594.0, 2334.0], [592.0, 2259.6], [597.0, 2297.6666666666665], [595.0, 2419.0], [606.0, 2368.0], [605.0, 2354.0], [603.0, 2418.0], [602.0, 1960.0], [601.0, 2359.0], [590.0, 2321.0], [577.0, 2477.0], [576.0, 2469.0], [579.0, 2319.0], [578.0, 2391.0], [581.0, 2332.0], [580.0, 2176.0], [583.0, 2473.0], [582.0, 2391.0], [589.0, 2349.0], [585.0, 2393.0], [584.0, 2330.0], [599.0, 1966.0], [598.0, 2177.0], [633.0, 1979.5], [637.0, 2291.0], [638.0, 1872.0], [636.0, 1749.0], [635.0, 2271.0], [634.0, 2210.0], [623.0, 1683.0], [608.0, 1734.0], [611.0, 2091.0], [609.0, 1887.0], [615.0, 2146.0], [614.0, 2142.3333333333335], [622.0, 1701.0], [621.0, 2016.0], [620.0, 2288.0], [619.0, 2012.0], [617.0, 1792.0], [616.0, 2273.0], [631.0, 2280.0], [630.0, 2251.5], [628.0, 2182.0], [667.0, 1984.0], [659.0, 1742.0], [670.0, 1650.0], [671.0, 1658.0], [657.0, 1682.0], [656.0, 1792.0], [669.0, 1713.0], [664.0, 2202.0], [646.0, 1849.0], [645.0, 1964.0], [643.0, 2081.0], [640.0, 1837.0], [655.0, 2220.0], [654.0, 1795.0], [653.0, 1738.0], [652.0, 2200.0], [651.0, 1991.0], [650.0, 1808.0], [649.0, 1684.0], [648.0, 1974.5], [663.0, 1953.0], [661.0, 1951.0], [660.0, 2211.0], [697.0, 1888.0], [702.0, 2093.0], [703.0, 1609.0], [688.0, 1903.0], [701.0, 2089.0], [700.0, 2106.0], [698.0, 1614.0], [686.0, 1612.0], [673.0, 2162.5], [675.0, 2105.0], [674.0, 1754.0], [677.0, 2157.0], [676.0, 1748.0], [679.0, 1660.0], [678.0, 2084.0], [685.0, 1911.6666666666667], [682.0, 1743.0], [681.0, 1711.0], [695.0, 1971.0], [694.0, 1757.5], [692.0, 1717.0], [689.0, 1636.0], [729.0, 1650.6666666666667], [723.0, 1445.0], [734.0, 1857.0], [732.0, 1934.0], [730.0, 1406.0], [719.0, 1461.0], [705.0, 2062.0], [704.0, 1553.0], [707.0, 2076.0], [706.0, 1493.0], [709.0, 1539.0], [708.0, 2006.0], [711.0, 2044.0], [710.0, 1567.0], [718.0, 1816.0], [717.0, 1772.5], [715.0, 1480.0], [714.0, 2043.0], [713.0, 2068.0], [712.0, 1902.0], [726.0, 1933.0], [725.0, 1909.0], [724.0, 1415.0], [722.0, 1927.0], [720.0, 1952.0], [754.0, 1635.0], [767.0, 1928.0], [763.0, 1588.0], [760.0, 1353.0], [742.0, 1817.0], [741.0, 1368.0], [740.0, 1457.0], [739.0, 1716.0], [737.0, 1828.0], [736.0, 1830.6666666666667], [759.0, 1366.0], [758.0, 1590.6666666666667], [757.0, 1369.0], [752.0, 1634.5], [750.0, 1358.0], [749.0, 1719.0], [748.0, 1788.0], [747.0, 1598.5], [745.0, 1694.0], [744.0, 1547.5], [775.0, 1651.0], [794.0, 1495.6666666666667], [791.0, 1882.0], [784.0, 1847.0], [781.0, 1411.0], [780.0, 1514.0], [778.0, 1886.0], [774.0, 1335.0], [773.0, 1363.0], [772.0, 1883.0], [771.0, 1777.0], [770.0, 1497.5], [828.0, 1802.0], [830.0, 1299.0], [826.0, 1508.0], [807.0, 1557.0], [805.0, 1326.0], [804.0, 1566.0], [803.0, 1339.0], [822.0, 1834.0], [821.0, 1352.0], [820.0, 1830.0], [818.0, 1844.0], [814.0, 1296.0], [813.0, 1316.0], [811.0, 1472.3333333333333], [808.0, 1828.0], [862.0, 57.0], [863.0, 55.0], [861.0, 58.0], [858.0, 1554.0], [855.0, 1766.0], [851.0, 43.0], [845.0, 806.5], [840.0, 1154.5], [837.0, 1453.5], [892.0, 1215.5], [893.0, 1515.0], [881.0, 1267.0], [880.0, 1606.0], [883.0, 1417.5], [882.0, 874.0], [891.0, 1135.0], [890.0, 53.0], [889.0, 1621.0], [888.0, 1530.0], [879.0, 618.0], [865.0, 54.5], [869.0, 51.0], [866.0, 54.0], [878.0, 1676.0], [875.0, 46.0], [874.0, 1357.0], [872.0, 60.0], [887.0, 956.0], [886.0, 1277.5], [885.0, 1518.0], [884.0, 1611.0], [920.0, 1146.0], [926.0, 995.0], [927.0, 1180.5], [913.0, 813.0], [912.0, 1194.0], [924.0, 70.0], [923.0, 1168.0], [922.0, 82.0], [911.0, 961.0], [898.0, 1061.9999999999995], [897.0, 52.0], [900.0, 931.0], [899.0, 1001.3333333333334], [902.0, 904.0], [901.0, 913.0], [910.0, 967.0], [909.0, 386.66666666666663], [907.0, 1185.0], [905.0, 46.0], [904.0, 505.0], [919.0, 1003.0], [916.0, 75.0], [915.0, 78.33333333333333], [914.0, 85.0], [942.0, 277.0], [938.0, 266.8333333333333], [941.0, 289.0], [940.0, 269.0], [947.0, 260.5], [948.0, 727.7894736842105], [939.0, 819.4444444444445], [936.0, 827.0], [935.0, 963.0], [934.0, 1226.0], [933.0, 1300.0], [932.0, 699.5], [931.0, 85.0], [929.0, 1183.5], [928.0, 868.0], [1.0, 2971.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}, {"data": [[502.7940000000008, 2245.8599999999997]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 948.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11266.666666666666, "minX": 1.75636596E12, "maxY": 27466.666666666668, "series": [{"data": [[1.75636596E12, 11266.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75636596E12, 27466.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636596E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2245.8599999999997, "minX": 1.75636596E12, "maxY": 2245.8599999999997, "series": [{"data": [[1.75636596E12, 2245.8599999999997]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636596E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2245.7979999999993, "minX": 1.75636596E12, "maxY": 2245.7979999999993, "series": [{"data": [[1.75636596E12, 2245.7979999999993]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636596E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1856.3699999999985, "minX": 1.75636596E12, "maxY": 1856.3699999999985, "series": [{"data": [[1.75636596E12, 1856.3699999999985]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636596E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 43.0, "minX": 1.75636596E12, "maxY": 3794.0, "series": [{"data": [[1.75636596E12, 3794.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75636596E12, 3308.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75636596E12, 3702.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75636596E12, 3484.7999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75636596E12, 43.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75636596E12, 2359.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636596E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 931.0, "minX": 125.0, "maxY": 3173.0, "series": [{"data": [[310.0, 1748.5], [336.0, 2792.5], [229.0, 3173.0], [125.0, 931.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 336.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 931.0, "minX": 125.0, "maxY": 3173.0, "series": [{"data": [[310.0, 1748.5], [336.0, 2792.5], [229.0, 3173.0], [125.0, 931.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 336.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636596E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636596E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636596E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636596E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636596E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636596E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636596E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636596E12, 16.666666666666668]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636596E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636596E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636596E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636596E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

