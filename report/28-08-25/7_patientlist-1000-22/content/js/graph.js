/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 3028.0, "series": [{"data": [[0.0, 26.0], [0.1, 27.0], [0.2, 28.0], [0.3, 28.0], [0.4, 28.0], [0.5, 29.0], [0.6, 29.0], [0.7, 29.0], [0.8, 30.0], [0.9, 30.0], [1.0, 30.0], [1.1, 30.0], [1.2, 30.0], [1.3, 31.0], [1.4, 31.0], [1.5, 31.0], [1.6, 31.0], [1.7, 31.0], [1.8, 31.0], [1.9, 32.0], [2.0, 32.0], [2.1, 32.0], [2.2, 32.0], [2.3, 32.0], [2.4, 33.0], [2.5, 33.0], [2.6, 33.0], [2.7, 34.0], [2.8, 34.0], [2.9, 34.0], [3.0, 34.0], [3.1, 34.0], [3.2, 34.0], [3.3, 34.0], [3.4, 34.0], [3.5, 35.0], [3.6, 35.0], [3.7, 36.0], [3.8, 36.0], [3.9, 36.0], [4.0, 36.0], [4.1, 36.0], [4.2, 36.0], [4.3, 36.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 38.0], [4.8, 38.0], [4.9, 38.0], [5.0, 38.0], [5.1, 38.0], [5.2, 38.0], [5.3, 38.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 39.0], [5.9, 40.0], [6.0, 40.0], [6.1, 40.0], [6.2, 40.0], [6.3, 40.0], [6.4, 40.0], [6.5, 40.0], [6.6, 40.0], [6.7, 40.0], [6.8, 40.0], [6.9, 41.0], [7.0, 41.0], [7.1, 41.0], [7.2, 41.0], [7.3, 42.0], [7.4, 42.0], [7.5, 42.0], [7.6, 42.0], [7.7, 42.0], [7.8, 43.0], [7.9, 43.0], [8.0, 43.0], [8.1, 43.0], [8.2, 44.0], [8.3, 44.0], [8.4, 44.0], [8.5, 44.0], [8.6, 44.0], [8.7, 44.0], [8.8, 45.0], [8.9, 45.0], [9.0, 45.0], [9.1, 45.0], [9.2, 45.0], [9.3, 45.0], [9.4, 46.0], [9.5, 46.0], [9.6, 46.0], [9.7, 46.0], [9.8, 47.0], [9.9, 47.0], [10.0, 47.0], [10.1, 48.0], [10.2, 49.0], [10.3, 50.0], [10.4, 50.0], [10.5, 50.0], [10.6, 50.0], [10.7, 51.0], [10.8, 52.0], [10.9, 52.0], [11.0, 52.0], [11.1, 52.0], [11.2, 52.0], [11.3, 53.0], [11.4, 54.0], [11.5, 55.0], [11.6, 55.0], [11.7, 56.0], [11.8, 56.0], [11.9, 56.0], [12.0, 57.0], [12.1, 58.0], [12.2, 58.0], [12.3, 59.0], [12.4, 59.0], [12.5, 59.0], [12.6, 60.0], [12.7, 60.0], [12.8, 60.0], [12.9, 60.0], [13.0, 61.0], [13.1, 61.0], [13.2, 62.0], [13.3, 62.0], [13.4, 62.0], [13.5, 63.0], [13.6, 63.0], [13.7, 63.0], [13.8, 63.0], [13.9, 63.0], [14.0, 64.0], [14.1, 64.0], [14.2, 64.0], [14.3, 64.0], [14.4, 65.0], [14.5, 65.0], [14.6, 65.0], [14.7, 65.0], [14.8, 66.0], [14.9, 67.0], [15.0, 67.0], [15.1, 68.0], [15.2, 68.0], [15.3, 69.0], [15.4, 71.0], [15.5, 71.0], [15.6, 73.0], [15.7, 74.0], [15.8, 75.0], [15.9, 75.0], [16.0, 79.0], [16.1, 82.0], [16.2, 83.0], [16.3, 84.0], [16.4, 84.0], [16.5, 89.0], [16.6, 90.0], [16.7, 90.0], [16.8, 91.0], [16.9, 91.0], [17.0, 91.0], [17.1, 92.0], [17.2, 92.0], [17.3, 93.0], [17.4, 94.0], [17.5, 95.0], [17.6, 95.0], [17.7, 96.0], [17.8, 96.0], [17.9, 96.0], [18.0, 97.0], [18.1, 97.0], [18.2, 98.0], [18.3, 101.0], [18.4, 101.0], [18.5, 101.0], [18.6, 101.0], [18.7, 101.0], [18.8, 102.0], [18.9, 102.0], [19.0, 104.0], [19.1, 106.0], [19.2, 107.0], [19.3, 107.0], [19.4, 109.0], [19.5, 111.0], [19.6, 115.0], [19.7, 121.0], [19.8, 128.0], [19.9, 132.0], [20.0, 133.0], [20.1, 143.0], [20.2, 143.0], [20.3, 143.0], [20.4, 144.0], [20.5, 144.0], [20.6, 144.0], [20.7, 145.0], [20.8, 146.0], [20.9, 149.0], [21.0, 154.0], [21.1, 160.0], [21.2, 175.0], [21.3, 192.0], [21.4, 204.0], [21.5, 212.0], [21.6, 212.0], [21.7, 216.0], [21.8, 220.0], [21.9, 229.0], [22.0, 232.0], [22.1, 233.0], [22.2, 237.0], [22.3, 270.0], [22.4, 270.0], [22.5, 271.0], [22.6, 274.0], [22.7, 279.0], [22.8, 283.0], [22.9, 300.0], [23.0, 309.0], [23.1, 316.0], [23.2, 320.0], [23.3, 381.0], [23.4, 385.0], [23.5, 401.0], [23.6, 404.0], [23.7, 406.0], [23.8, 411.0], [23.9, 430.0], [24.0, 442.0], [24.1, 446.0], [24.2, 496.0], [24.3, 497.0], [24.4, 520.0], [24.5, 534.0], [24.6, 535.0], [24.7, 536.0], [24.8, 543.0], [24.9, 546.0], [25.0, 556.0], [25.1, 562.0], [25.2, 569.0], [25.3, 569.0], [25.4, 570.0], [25.5, 587.0], [25.6, 587.0], [25.7, 590.0], [25.8, 596.0], [25.9, 596.0], [26.0, 598.0], [26.1, 602.0], [26.2, 609.0], [26.3, 609.0], [26.4, 621.0], [26.5, 623.0], [26.6, 623.0], [26.7, 624.0], [26.8, 630.0], [26.9, 631.0], [27.0, 636.0], [27.1, 654.0], [27.2, 655.0], [27.3, 662.0], [27.4, 669.0], [27.5, 681.0], [27.6, 691.0], [27.7, 694.0], [27.8, 702.0], [27.9, 709.0], [28.0, 711.0], [28.1, 714.0], [28.2, 715.0], [28.3, 716.0], [28.4, 721.0], [28.5, 724.0], [28.6, 727.0], [28.7, 732.0], [28.8, 734.0], [28.9, 736.0], [29.0, 742.0], [29.1, 746.0], [29.2, 748.0], [29.3, 754.0], [29.4, 758.0], [29.5, 771.0], [29.6, 771.0], [29.7, 771.0], [29.8, 772.0], [29.9, 773.0], [30.0, 777.0], [30.1, 777.0], [30.2, 782.0], [30.3, 782.0], [30.4, 793.0], [30.5, 794.0], [30.6, 807.0], [30.7, 811.0], [30.8, 814.0], [30.9, 816.0], [31.0, 824.0], [31.1, 825.0], [31.2, 828.0], [31.3, 830.0], [31.4, 832.0], [31.5, 833.0], [31.6, 834.0], [31.7, 845.0], [31.8, 846.0], [31.9, 850.0], [32.0, 850.0], [32.1, 851.0], [32.2, 855.0], [32.3, 858.0], [32.4, 860.0], [32.5, 864.0], [32.6, 865.0], [32.7, 865.0], [32.8, 867.0], [32.9, 875.0], [33.0, 878.0], [33.1, 885.0], [33.2, 886.0], [33.3, 886.0], [33.4, 888.0], [33.5, 888.0], [33.6, 891.0], [33.7, 891.0], [33.8, 906.0], [33.9, 906.0], [34.0, 919.0], [34.1, 920.0], [34.2, 921.0], [34.3, 929.0], [34.4, 929.0], [34.5, 940.0], [34.6, 943.0], [34.7, 948.0], [34.8, 954.0], [34.9, 961.0], [35.0, 966.0], [35.1, 967.0], [35.2, 976.0], [35.3, 978.0], [35.4, 981.0], [35.5, 986.0], [35.6, 987.0], [35.7, 988.0], [35.8, 991.0], [35.9, 994.0], [36.0, 1008.0], [36.1, 1008.0], [36.2, 1008.0], [36.3, 1015.0], [36.4, 1017.0], [36.5, 1019.0], [36.6, 1021.0], [36.7, 1025.0], [36.8, 1025.0], [36.9, 1039.0], [37.0, 1040.0], [37.1, 1044.0], [37.2, 1059.0], [37.3, 1063.0], [37.4, 1066.0], [37.5, 1128.0], [37.6, 1131.0], [37.7, 1136.0], [37.8, 1137.0], [37.9, 1146.0], [38.0, 1180.0], [38.1, 1181.0], [38.2, 1190.0], [38.3, 1210.0], [38.4, 1211.0], [38.5, 1224.0], [38.6, 1224.0], [38.7, 1246.0], [38.8, 1248.0], [38.9, 1248.0], [39.0, 1252.0], [39.1, 1254.0], [39.2, 1263.0], [39.3, 1268.0], [39.4, 1269.0], [39.5, 1276.0], [39.6, 1279.0], [39.7, 1279.0], [39.8, 1279.0], [39.9, 1281.0], [40.0, 1281.0], [40.1, 1285.0], [40.2, 1285.0], [40.3, 1286.0], [40.4, 1287.0], [40.5, 1295.0], [40.6, 1312.0], [40.7, 1313.0], [40.8, 1317.0], [40.9, 1320.0], [41.0, 1325.0], [41.1, 1328.0], [41.2, 1332.0], [41.3, 1334.0], [41.4, 1338.0], [41.5, 1343.0], [41.6, 1357.0], [41.7, 1359.0], [41.8, 1372.0], [41.9, 1377.0], [42.0, 1379.0], [42.1, 1379.0], [42.2, 1387.0], [42.3, 1391.0], [42.4, 1400.0], [42.5, 1420.0], [42.6, 1421.0], [42.7, 1421.0], [42.8, 1422.0], [42.9, 1425.0], [43.0, 1426.0], [43.1, 1429.0], [43.2, 1431.0], [43.3, 1434.0], [43.4, 1435.0], [43.5, 1438.0], [43.6, 1439.0], [43.7, 1442.0], [43.8, 1448.0], [43.9, 1451.0], [44.0, 1452.0], [44.1, 1453.0], [44.2, 1454.0], [44.3, 1466.0], [44.4, 1476.0], [44.5, 1476.0], [44.6, 1476.0], [44.7, 1480.0], [44.8, 1481.0], [44.9, 1484.0], [45.0, 1486.0], [45.1, 1488.0], [45.2, 1489.0], [45.3, 1494.0], [45.4, 1496.0], [45.5, 1498.0], [45.6, 1501.0], [45.7, 1510.0], [45.8, 1512.0], [45.9, 1529.0], [46.0, 1530.0], [46.1, 1532.0], [46.2, 1537.0], [46.3, 1543.0], [46.4, 1550.0], [46.5, 1551.0], [46.6, 1565.0], [46.7, 1572.0], [46.8, 1574.0], [46.9, 1577.0], [47.0, 1578.0], [47.1, 1580.0], [47.2, 1582.0], [47.3, 1591.0], [47.4, 1592.0], [47.5, 1597.0], [47.6, 1606.0], [47.7, 1614.0], [47.8, 1615.0], [47.9, 1620.0], [48.0, 1624.0], [48.1, 1624.0], [48.2, 1627.0], [48.3, 1627.0], [48.4, 1631.0], [48.5, 1632.0], [48.6, 1637.0], [48.7, 1644.0], [48.8, 1652.0], [48.9, 1656.0], [49.0, 1661.0], [49.1, 1661.0], [49.2, 1681.0], [49.3, 1689.0], [49.4, 1692.0], [49.5, 1707.0], [49.6, 1710.0], [49.7, 1719.0], [49.8, 1720.0], [49.9, 1721.0], [50.0, 1722.0], [50.1, 1731.0], [50.2, 1738.0], [50.3, 1740.0], [50.4, 1746.0], [50.5, 1747.0], [50.6, 1754.0], [50.7, 1763.0], [50.8, 1767.0], [50.9, 1770.0], [51.0, 1770.0], [51.1, 1774.0], [51.2, 1776.0], [51.3, 1781.0], [51.4, 1783.0], [51.5, 1790.0], [51.6, 1791.0], [51.7, 1791.0], [51.8, 1792.0], [51.9, 1793.0], [52.0, 1795.0], [52.1, 1796.0], [52.2, 1797.0], [52.3, 1802.0], [52.4, 1803.0], [52.5, 1805.0], [52.6, 1806.0], [52.7, 1808.0], [52.8, 1809.0], [52.9, 1811.0], [53.0, 1811.0], [53.1, 1812.0], [53.2, 1817.0], [53.3, 1818.0], [53.4, 1820.0], [53.5, 1822.0], [53.6, 1825.0], [53.7, 1825.0], [53.8, 1832.0], [53.9, 1838.0], [54.0, 1839.0], [54.1, 1848.0], [54.2, 1848.0], [54.3, 1849.0], [54.4, 1851.0], [54.5, 1857.0], [54.6, 1861.0], [54.7, 1861.0], [54.8, 1861.0], [54.9, 1861.0], [55.0, 1862.0], [55.1, 1863.0], [55.2, 1863.0], [55.3, 1866.0], [55.4, 1867.0], [55.5, 1880.0], [55.6, 1884.0], [55.7, 1888.0], [55.8, 1889.0], [55.9, 1891.0], [56.0, 1892.0], [56.1, 1895.0], [56.2, 1895.0], [56.3, 1896.0], [56.4, 1898.0], [56.5, 1901.0], [56.6, 1902.0], [56.7, 1905.0], [56.8, 1905.0], [56.9, 1905.0], [57.0, 1906.0], [57.1, 1909.0], [57.2, 1909.0], [57.3, 1918.0], [57.4, 1918.0], [57.5, 1918.0], [57.6, 1921.0], [57.7, 1921.0], [57.8, 1924.0], [57.9, 1925.0], [58.0, 1925.0], [58.1, 1928.0], [58.2, 1931.0], [58.3, 1933.0], [58.4, 1936.0], [58.5, 1938.0], [58.6, 1940.0], [58.7, 1942.0], [58.8, 1945.0], [58.9, 1946.0], [59.0, 1948.0], [59.1, 1950.0], [59.2, 1950.0], [59.3, 1952.0], [59.4, 1953.0], [59.5, 1953.0], [59.6, 1953.0], [59.7, 1958.0], [59.8, 1958.0], [59.9, 1965.0], [60.0, 1967.0], [60.1, 1968.0], [60.2, 1969.0], [60.3, 1969.0], [60.4, 1970.0], [60.5, 1970.0], [60.6, 1973.0], [60.7, 1976.0], [60.8, 1979.0], [60.9, 1981.0], [61.0, 1985.0], [61.1, 1993.0], [61.2, 1996.0], [61.3, 1998.0], [61.4, 1998.0], [61.5, 1998.0], [61.6, 1998.0], [61.7, 2002.0], [61.8, 2005.0], [61.9, 2007.0], [62.0, 2013.0], [62.1, 2030.0], [62.2, 2032.0], [62.3, 2034.0], [62.4, 2038.0], [62.5, 2039.0], [62.6, 2041.0], [62.7, 2042.0], [62.8, 2043.0], [62.9, 2045.0], [63.0, 2048.0], [63.1, 2048.0], [63.2, 2048.0], [63.3, 2050.0], [63.4, 2056.0], [63.5, 2062.0], [63.6, 2070.0], [63.7, 2073.0], [63.8, 2073.0], [63.9, 2075.0], [64.0, 2103.0], [64.1, 2109.0], [64.2, 2112.0], [64.3, 2117.0], [64.4, 2120.0], [64.5, 2122.0], [64.6, 2139.0], [64.7, 2143.0], [64.8, 2144.0], [64.9, 2147.0], [65.0, 2147.0], [65.1, 2149.0], [65.2, 2154.0], [65.3, 2157.0], [65.4, 2162.0], [65.5, 2164.0], [65.6, 2166.0], [65.7, 2167.0], [65.8, 2168.0], [65.9, 2174.0], [66.0, 2184.0], [66.1, 2185.0], [66.2, 2186.0], [66.3, 2192.0], [66.4, 2193.0], [66.5, 2193.0], [66.6, 2197.0], [66.7, 2199.0], [66.8, 2201.0], [66.9, 2205.0], [67.0, 2208.0], [67.1, 2208.0], [67.2, 2216.0], [67.3, 2220.0], [67.4, 2221.0], [67.5, 2222.0], [67.6, 2223.0], [67.7, 2229.0], [67.8, 2230.0], [67.9, 2232.0], [68.0, 2239.0], [68.1, 2239.0], [68.2, 2239.0], [68.3, 2243.0], [68.4, 2247.0], [68.5, 2248.0], [68.6, 2249.0], [68.7, 2253.0], [68.8, 2254.0], [68.9, 2255.0], [69.0, 2258.0], [69.1, 2260.0], [69.2, 2266.0], [69.3, 2272.0], [69.4, 2276.0], [69.5, 2277.0], [69.6, 2277.0], [69.7, 2277.0], [69.8, 2278.0], [69.9, 2279.0], [70.0, 2279.0], [70.1, 2284.0], [70.2, 2285.0], [70.3, 2291.0], [70.4, 2291.0], [70.5, 2294.0], [70.6, 2296.0], [70.7, 2297.0], [70.8, 2304.0], [70.9, 2307.0], [71.0, 2309.0], [71.1, 2313.0], [71.2, 2314.0], [71.3, 2315.0], [71.4, 2316.0], [71.5, 2327.0], [71.6, 2328.0], [71.7, 2333.0], [71.8, 2335.0], [71.9, 2338.0], [72.0, 2347.0], [72.1, 2354.0], [72.2, 2363.0], [72.3, 2365.0], [72.4, 2368.0], [72.5, 2370.0], [72.6, 2371.0], [72.7, 2372.0], [72.8, 2376.0], [72.9, 2379.0], [73.0, 2381.0], [73.1, 2387.0], [73.2, 2388.0], [73.3, 2388.0], [73.4, 2404.0], [73.5, 2411.0], [73.6, 2412.0], [73.7, 2418.0], [73.8, 2422.0], [73.9, 2422.0], [74.0, 2427.0], [74.1, 2432.0], [74.2, 2435.0], [74.3, 2437.0], [74.4, 2448.0], [74.5, 2455.0], [74.6, 2456.0], [74.7, 2456.0], [74.8, 2458.0], [74.9, 2459.0], [75.0, 2460.0], [75.1, 2460.0], [75.2, 2461.0], [75.3, 2463.0], [75.4, 2465.0], [75.5, 2467.0], [75.6, 2470.0], [75.7, 2470.0], [75.8, 2470.0], [75.9, 2472.0], [76.0, 2473.0], [76.1, 2475.0], [76.2, 2478.0], [76.3, 2479.0], [76.4, 2479.0], [76.5, 2479.0], [76.6, 2480.0], [76.7, 2482.0], [76.8, 2485.0], [76.9, 2490.0], [77.0, 2490.0], [77.1, 2491.0], [77.2, 2493.0], [77.3, 2500.0], [77.4, 2500.0], [77.5, 2501.0], [77.6, 2501.0], [77.7, 2507.0], [77.8, 2509.0], [77.9, 2511.0], [78.0, 2512.0], [78.1, 2513.0], [78.2, 2515.0], [78.3, 2517.0], [78.4, 2522.0], [78.5, 2522.0], [78.6, 2523.0], [78.7, 2523.0], [78.8, 2526.0], [78.9, 2529.0], [79.0, 2531.0], [79.1, 2531.0], [79.2, 2533.0], [79.3, 2535.0], [79.4, 2536.0], [79.5, 2536.0], [79.6, 2540.0], [79.7, 2540.0], [79.8, 2544.0], [79.9, 2547.0], [80.0, 2551.0], [80.1, 2554.0], [80.2, 2555.0], [80.3, 2556.0], [80.4, 2557.0], [80.5, 2558.0], [80.6, 2560.0], [80.7, 2562.0], [80.8, 2565.0], [80.9, 2567.0], [81.0, 2569.0], [81.1, 2574.0], [81.2, 2576.0], [81.3, 2577.0], [81.4, 2578.0], [81.5, 2580.0], [81.6, 2580.0], [81.7, 2583.0], [81.8, 2586.0], [81.9, 2588.0], [82.0, 2588.0], [82.1, 2599.0], [82.2, 2600.0], [82.3, 2604.0], [82.4, 2605.0], [82.5, 2607.0], [82.6, 2611.0], [82.7, 2612.0], [82.8, 2619.0], [82.9, 2620.0], [83.0, 2620.0], [83.1, 2621.0], [83.2, 2621.0], [83.3, 2622.0], [83.4, 2624.0], [83.5, 2626.0], [83.6, 2626.0], [83.7, 2627.0], [83.8, 2630.0], [83.9, 2632.0], [84.0, 2634.0], [84.1, 2635.0], [84.2, 2638.0], [84.3, 2638.0], [84.4, 2638.0], [84.5, 2640.0], [84.6, 2641.0], [84.7, 2643.0], [84.8, 2643.0], [84.9, 2645.0], [85.0, 2645.0], [85.1, 2646.0], [85.2, 2646.0], [85.3, 2647.0], [85.4, 2647.0], [85.5, 2649.0], [85.6, 2649.0], [85.7, 2652.0], [85.8, 2655.0], [85.9, 2657.0], [86.0, 2658.0], [86.1, 2670.0], [86.2, 2671.0], [86.3, 2677.0], [86.4, 2678.0], [86.5, 2681.0], [86.6, 2683.0], [86.7, 2688.0], [86.8, 2691.0], [86.9, 2693.0], [87.0, 2698.0], [87.1, 2699.0], [87.2, 2705.0], [87.3, 2712.0], [87.4, 2718.0], [87.5, 2719.0], [87.6, 2722.0], [87.7, 2723.0], [87.8, 2724.0], [87.9, 2725.0], [88.0, 2729.0], [88.1, 2730.0], [88.2, 2731.0], [88.3, 2733.0], [88.4, 2733.0], [88.5, 2737.0], [88.6, 2740.0], [88.7, 2742.0], [88.8, 2743.0], [88.9, 2749.0], [89.0, 2751.0], [89.1, 2752.0], [89.2, 2754.0], [89.3, 2755.0], [89.4, 2755.0], [89.5, 2758.0], [89.6, 2758.0], [89.7, 2759.0], [89.8, 2760.0], [89.9, 2762.0], [90.0, 2763.0], [90.1, 2764.0], [90.2, 2766.0], [90.3, 2766.0], [90.4, 2767.0], [90.5, 2767.0], [90.6, 2768.0], [90.7, 2769.0], [90.8, 2771.0], [90.9, 2771.0], [91.0, 2771.0], [91.1, 2776.0], [91.2, 2778.0], [91.3, 2788.0], [91.4, 2790.0], [91.5, 2792.0], [91.6, 2792.0], [91.7, 2795.0], [91.8, 2796.0], [91.9, 2797.0], [92.0, 2798.0], [92.1, 2799.0], [92.2, 2800.0], [92.3, 2801.0], [92.4, 2803.0], [92.5, 2803.0], [92.6, 2803.0], [92.7, 2807.0], [92.8, 2808.0], [92.9, 2809.0], [93.0, 2810.0], [93.1, 2812.0], [93.2, 2812.0], [93.3, 2813.0], [93.4, 2822.0], [93.5, 2824.0], [93.6, 2825.0], [93.7, 2827.0], [93.8, 2833.0], [93.9, 2837.0], [94.0, 2838.0], [94.1, 2839.0], [94.2, 2848.0], [94.3, 2852.0], [94.4, 2853.0], [94.5, 2857.0], [94.6, 2857.0], [94.7, 2857.0], [94.8, 2858.0], [94.9, 2867.0], [95.0, 2868.0], [95.1, 2875.0], [95.2, 2876.0], [95.3, 2880.0], [95.4, 2881.0], [95.5, 2883.0], [95.6, 2884.0], [95.7, 2884.0], [95.8, 2893.0], [95.9, 2895.0], [96.0, 2899.0], [96.1, 2899.0], [96.2, 2902.0], [96.3, 2904.0], [96.4, 2906.0], [96.5, 2907.0], [96.6, 2913.0], [96.7, 2921.0], [96.8, 2923.0], [96.9, 2926.0], [97.0, 2926.0], [97.1, 2931.0], [97.2, 2932.0], [97.3, 2933.0], [97.4, 2935.0], [97.5, 2937.0], [97.6, 2948.0], [97.7, 2949.0], [97.8, 2953.0], [97.9, 2955.0], [98.0, 2958.0], [98.1, 2959.0], [98.2, 2959.0], [98.3, 2970.0], [98.4, 2970.0], [98.5, 2973.0], [98.6, 2974.0], [98.7, 2974.0], [98.8, 2989.0], [98.9, 2993.0], [99.0, 2997.0], [99.1, 3007.0], [99.2, 3011.0], [99.3, 3011.0], [99.4, 3012.0], [99.5, 3014.0], [99.6, 3019.0], [99.7, 3021.0], [99.8, 3025.0], [99.9, 3028.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 182.0, "series": [{"data": [[0.0, 182.0], [600.0, 17.0], [700.0, 28.0], [800.0, 32.0], [900.0, 22.0], [1000.0, 15.0], [1100.0, 8.0], [1200.0, 23.0], [1300.0, 18.0], [1400.0, 32.0], [1500.0, 20.0], [1600.0, 19.0], [100.0, 31.0], [1700.0, 28.0], [1800.0, 42.0], [1900.0, 52.0], [2000.0, 23.0], [2100.0, 28.0], [2200.0, 40.0], [2300.0, 26.0], [2400.0, 40.0], [2500.0, 49.0], [2600.0, 50.0], [2700.0, 50.0], [2800.0, 40.0], [2900.0, 29.0], [3000.0, 9.0], [200.0, 15.0], [300.0, 6.0], [400.0, 9.0], [500.0, 17.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 212.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 545.0, "series": [{"data": [[0.0, 243.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 212.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 545.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.8150000000007, "minX": 1.75637088E12, "maxY": 501.8150000000007, "series": [{"data": [[1.75637088E12, 501.8150000000007]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637088E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 3025.0, "series": [{"data": [[2.0, 2921.0], [3.0, 2809.0], [4.0, 2935.0], [5.0, 2803.0], [7.0, 3019.5], [8.0, 2926.0], [9.0, 3025.0], [10.0, 2904.0], [11.0, 3019.0], [12.0, 3014.0], [13.0, 3012.0], [15.0, 2661.0], [16.0, 2953.0], [18.0, 2875.5], [19.0, 3011.0], [21.0, 2867.0], [22.0, 2937.5], [24.0, 2899.0], [26.0, 2803.5], [27.0, 2993.0], [28.0, 2795.0], [30.0, 2802.5], [31.0, 2933.0], [32.0, 2989.0], [35.0, 2827.0], [34.0, 2852.0], [37.0, 2735.0], [39.0, 2973.0], [38.0, 2776.0], [41.0, 2959.0], [40.0, 2970.0], [43.0, 2974.0], [42.0, 2822.0], [45.0, 2771.0], [44.0, 2768.0], [47.0, 2857.0], [46.0, 2913.0], [48.0, 2767.0], [51.0, 2455.0], [50.0, 2874.5], [53.0, 2812.0], [52.0, 2970.0], [55.0, 2896.0], [56.0, 2932.0], [59.0, 2837.0], [58.0, 2825.5], [62.0, 2926.0], [67.0, 2811.0], [71.0, 2111.4], [68.0, 2859.5], [75.0, 2722.0], [74.0, 2907.0], [73.0, 2647.0], [72.0, 2931.0], [79.0, 2658.5], [78.0, 2698.0], [76.0, 2574.0], [83.0, 44.0], [82.0, 2787.6666666666665], [85.0, 44.0], [84.0, 2800.0], [91.0, 232.0], [90.0, 906.0], [89.0, 1519.5], [95.0, 2755.0], [93.0, 1416.0], [99.0, 39.0], [98.0, 855.0], [96.0, 39.0], [103.0, 1693.0], [102.0, 1729.5], [100.0, 2560.0], [106.0, 42.0], [105.0, 2899.0], [104.0, 41.0], [111.0, 2899.0], [110.0, 1291.0], [108.0, 1287.0], [115.0, 2895.0], [114.0, 2876.0], [113.0, 660.5], [119.0, 2893.0], [118.0, 1875.0], [116.0, 2875.0], [123.0, 460.0], [121.0, 1466.5], [127.0, 2729.0], [126.0, 2884.0], [125.0, 2730.0], [124.0, 864.0], [135.0, 568.0], [134.0, 981.0], [133.0, 2880.0], [132.0, 2884.0], [131.0, 58.0], [130.0, 830.0], [128.0, 57.0], [143.0, 771.5], [141.0, 2482.0], [140.0, 773.0], [139.0, 793.0], [138.0, 2857.0], [137.0, 30.0], [136.0, 746.0], [150.0, 782.0], [149.0, 2811.5], [147.0, 736.0], [146.0, 771.0], [145.0, 1008.0], [144.0, 2526.0], [157.0, 2719.0], [156.0, 1382.5], [155.0, 38.0], [154.0, 1233.0], [153.0, 2641.0], [167.0, 986.0], [166.0, 56.0], [165.0, 2853.0], [164.0, 754.0], [163.0, 777.0], [162.0, 777.0], [161.0, 1193.0], [160.0, 987.0], [174.0, 2839.0], [173.0, 569.0], [172.0, 45.0], [171.0, 2733.0], [170.0, 943.0], [169.0, 2649.0], [183.0, 694.0], [181.0, 2611.0], [180.0, 43.5], [178.0, 2490.0], [177.0, 56.0], [176.0, 1773.5], [191.0, 1353.0], [189.0, 1201.5], [187.0, 2688.0], [186.0, 1677.5], [185.0, 2771.0], [184.0, 59.0], [199.0, 2640.5], [197.0, 2365.0], [196.0, 1063.0], [195.0, 144.0], [194.0, 2759.0], [193.0, 2635.0], [192.0, 587.0], [206.0, 2562.0], [205.0, 2751.0], [204.0, 2799.5], [201.0, 145.0], [200.0, 2652.0], [214.0, 1668.0], [213.0, 2387.0], [211.0, 93.0], [210.0, 32.0], [209.0, 2740.0], [208.0, 1260.0], [223.0, 2606.5], [221.0, 2412.0], [220.0, 1066.0], [219.0, 2589.0], [217.0, 1163.5], [216.0, 2600.0], [230.0, 1958.5], [229.0, 2763.0], [228.0, 2790.0], [226.0, 2479.0], [225.0, 1136.0], [239.0, 2638.0], [238.0, 2699.5], [236.0, 2645.0], [235.0, 1843.5], [233.0, 1490.6666666666667], [232.0, 2754.0], [247.0, 28.0], [246.0, 2671.0], [245.0, 2766.0], [244.0, 1609.5], [242.0, 2670.0], [241.0, 566.5], [255.0, 39.0], [254.0, 2522.0], [253.0, 2762.0], [252.0, 38.0], [251.0, 2731.0], [250.0, 32.0], [249.0, 2769.0], [248.0, 1019.0], [270.0, 2588.0], [271.0, 2651.5], [268.0, 75.0], [258.0, 2760.0], [257.0, 42.0], [256.0, 2576.0], [267.0, 702.0], [266.0, 1224.0], [265.0, 39.0], [264.0, 2630.0], [263.0, 1398.5], [261.0, 2577.0], [260.0, 2741.5], [286.0, 2478.5], [287.0, 2643.0], [284.0, 62.0], [275.0, 2622.0], [273.0, 2005.5], [283.0, 1372.0], [282.0, 2733.0], [280.0, 1305.3333333333335], [278.0, 2507.0], [277.0, 2243.0], [276.0, 50.0], [301.0, 2459.0], [303.0, 2614.5], [300.0, 67.0], [299.0, 2277.0], [298.0, 803.0], [295.0, 287.0], [293.0, 64.0], [291.0, 1806.3333333333333], [289.0, 2634.0], [318.0, 36.0], [317.0, 956.6666666666666], [315.0, 47.0], [314.0, 2683.0], [313.0, 1190.0], [312.0, 2523.0], [310.0, 2587.5], [309.0, 2620.0], [307.0, 1378.5], [305.0, 2691.0], [304.0, 33.0], [334.0, 52.0], [335.0, 50.0], [333.0, 52.0], [332.0, 97.0], [330.0, 102.0], [329.0, 61.0], [328.0, 50.0], [327.0, 1213.0], [323.0, 42.0], [322.0, 1808.5], [320.0, 1149.0], [326.0, 1312.5], [348.0, 1814.0], [346.0, 2646.0], [345.0, 52.0], [344.0, 1025.0], [343.0, 52.0], [342.0, 2528.25], [340.0, 2555.0], [337.0, 1616.5], [336.0, 2658.0], [366.0, 2649.0], [367.0, 2640.0], [364.0, 442.0], [355.0, 2208.0], [353.0, 602.0], [352.0, 2607.25], [363.0, 496.0], [362.0, 950.6666666666667], [361.0, 816.0], [358.0, 2645.0], [357.0, 2379.0], [356.0, 1989.5], [382.0, 1021.0], [383.0, 175.0], [381.0, 2621.0], [380.0, 2599.0], [379.0, 2511.0], [378.0, 2053.5], [376.0, 735.5], [374.0, 2627.0], [371.0, 2435.0], [370.0, 2461.0], [369.0, 1039.0], [368.0, 154.0], [373.0, 1348.5], [397.0, 2588.5], [395.0, 1008.0], [394.0, 1301.0], [392.0, 1154.0], [390.0, 2490.0], [384.0, 1359.0], [389.0, 2427.0], [388.0, 1317.0], [386.0, 1015.0], [385.0, 2490.0], [414.0, 1244.0], [415.0, 2540.0], [413.0, 192.0], [402.0, 2450.0], [400.0, 2188.0], [411.0, 2515.0], [410.0, 287.0], [409.0, 1017.0], [407.0, 220.0], [406.0, 2458.0], [404.0, 1943.5], [419.0, 2463.0], [430.0, 2223.0], [431.0, 1632.0], [429.0, 2390.5], [418.0, 1400.0], [417.0, 901.0], [427.0, 2371.5], [424.0, 2588.0], [423.0, 1320.0], [422.0, 45.0], [421.0, 2363.0], [420.0, 2199.0], [446.0, 2544.0], [447.0, 954.0], [445.0, 2294.0], [444.0, 2535.0], [443.0, 2567.0], [442.0, 2167.0], [441.0, 2254.0], [440.0, 1435.0], [439.0, 2297.0], [433.0, 2479.0], [432.0, 2404.0], [435.0, 2513.0], [434.0, 2578.0], [438.0, 901.5], [437.0, 2569.0], [451.0, 216.0], [463.0, 2551.0], [462.0, 2436.0], [458.0, 1439.0], [456.0, 1439.5], [455.0, 2372.0], [453.0, 1287.0], [452.0, 714.0], [450.0, 1420.0], [449.0, 2416.0], [477.0, 2531.0], [478.0, 587.0], [476.0, 1453.0], [475.0, 906.0], [474.0, 2192.0], [473.0, 466.5], [471.0, 2093.0], [468.0, 237.0], [467.0, 2540.0], [466.0, 967.0], [465.0, 929.0], [464.0, 940.0], [494.0, 722.0], [495.0, 2448.0], [493.0, 2208.0], [482.0, 46.0], [481.0, 1880.3333333333333], [491.0, 461.0], [489.0, 2422.0], [488.0, 2509.0], [487.0, 888.5], [485.0, 2197.0], [484.0, 562.0], [499.0, 1328.0], [511.0, 1899.0], [509.0, 463.6666666666667], [507.0, 1224.0], [505.0, 2478.0], [504.0, 2376.0], [503.0, 1285.6666666666667], [500.0, 850.0], [498.0, 1527.5], [496.0, 860.0], [538.0, 2268.5], [530.0, 2338.0], [542.0, 1466.0], [543.0, 2154.0], [529.0, 1813.5], [541.0, 1769.6666666666667], [536.0, 2149.0], [519.0, 825.0], [518.0, 1570.5], [517.0, 1279.0], [515.0, 2333.0], [514.0, 834.0], [513.0, 832.0], [512.0, 2491.0], [527.0, 2348.5], [525.0, 2475.0], [524.0, 2056.0], [523.0, 1615.0], [521.0, 2456.0], [520.0, 133.0], [535.0, 1904.0], [533.0, 2184.0], [532.0, 1302.0], [569.0, 96.0], [564.0, 1240.5], [571.0, 65.0], [573.0, 514.5], [563.0, 2076.0], [560.0, 1211.0], [570.0, 64.0], [568.0, 1281.0], [551.0, 2072.5], [549.0, 2062.0], [548.0, 1476.0], [547.0, 1753.0], [545.0, 2174.0], [544.0, 1950.0], [559.0, 2347.0], [558.0, 2195.0], [556.0, 635.0], [554.0, 961.0], [553.0, 1818.0], [567.0, 609.0], [566.0, 590.0], [565.0, 60.0], [602.0, 74.0], [605.0, 1339.6666666666667], [601.0, 2007.0], [582.0, 1476.0], [581.0, 981.5], [578.0, 728.0], [576.0, 1940.6666666666667], [599.0, 1681.0], [598.0, 2117.0], [595.0, 1685.75], [591.0, 2041.0], [590.0, 2370.0], [588.0, 1266.5], [586.0, 1073.0], [585.0, 654.0], [584.0, 2120.0], [625.0, 658.6666666666666], [636.0, 104.0], [635.0, 1045.0], [633.0, 89.0], [632.0, 2296.5], [621.0, 1045.5], [609.0, 1494.6666666666667], [608.0, 1948.0], [612.0, 1349.5], [611.0, 623.0], [615.0, 1891.0], [614.0, 2027.0], [620.0, 2230.0], [619.0, 609.0], [617.0, 2173.0], [616.0, 109.0], [631.0, 1969.0], [629.0, 62.0], [627.0, 39.0], [624.0, 1880.0], [664.0, 1893.0], [670.0, 36.0], [671.0, 1970.0], [656.0, 1276.0], [669.0, 2304.0], [668.0, 1221.0], [666.0, 1723.5], [655.0, 107.0], [641.0, 1068.5], [640.0, 1806.5], [643.0, 623.0], [642.0, 149.0], [647.0, 1909.5], [645.0, 1861.5], [654.0, 2157.0], [653.0, 2279.0], [652.0, 1252.0], [651.0, 1248.0], [650.0, 352.0], [648.0, 96.0], [662.0, 1947.0], [660.0, 1913.0], [658.0, 111.0], [657.0, 2309.0], [699.0, 2025.6666666666667], [691.0, 1135.5], [702.0, 982.0], [703.0, 1379.0], [689.0, 1421.0], [688.0, 2109.0], [700.0, 2279.0], [696.0, 1934.0], [678.0, 1928.0], [677.0, 969.3333333333334], [674.0, 1281.0], [673.0, 1084.5], [687.0, 2048.0], [685.0, 60.0], [684.0, 143.0], [683.0, 144.0], [682.0, 143.0], [681.0, 1016.0], [680.0, 1973.0], [694.0, 1591.0], [693.0, 669.0], [692.0, 1822.0], [728.0, 32.0], [734.0, 1925.0], [735.0, 1863.0], [720.0, 1439.0], [733.0, 1287.5], [731.0, 34.0], [730.0, 1017.0], [719.0, 1434.0], [706.0, 1958.0], [705.0, 2020.5], [709.0, 1334.0], [707.0, 2185.0], [711.0, 1895.0], [710.0, 1879.0], [718.0, 1751.0], [717.0, 1958.0], [716.0, 1572.0], [715.0, 1959.5], [713.0, 1953.0], [727.0, 1925.0], [726.0, 1938.0], [723.0, 1480.0], [722.0, 825.0], [754.0, 2221.0], [767.0, 58.0], [766.0, 999.5], [764.0, 1014.5], [763.0, 999.5], [750.0, 1969.5], [736.0, 1357.0], [739.0, 101.0], [738.0, 59.0], [742.0, 1131.5], [740.0, 759.5], [746.0, 1781.0], [745.0, 1597.0], [759.0, 1724.5], [758.0, 1988.0], [756.0, 91.0], [753.0, 1965.0], [752.0, 2248.0], [798.0, 1777.5], [799.0, 1898.0], [784.0, 95.0], [786.0, 91.0], [785.0, 95.0], [796.0, 320.0], [795.0, 2001.5], [793.0, 1811.0], [792.0, 83.0], [783.0, 97.0], [769.0, 689.3333333333333], [771.0, 101.0], [770.0, 102.0], [774.0, 86.5], [772.0, 101.0], [782.0, 45.0], [781.0, 90.0], [780.0, 1429.0], [791.0, 84.0], [790.0, 2122.0], [789.0, 33.0], [788.0, 970.0], [828.0, 2043.0], [829.0, 1632.0], [826.0, 1631.0], [825.0, 1770.0], [824.0, 1987.5], [807.0, 1705.0], [804.0, 1801.5], [803.0, 2050.0], [802.0, 1494.0], [801.0, 1797.0], [815.0, 953.0], [813.0, 1049.0], [812.0, 1059.0], [810.0, 1998.0], [808.0, 1783.0], [821.0, 1904.0], [819.0, 1738.0], [818.0, 711.0], [816.0, 1661.0], [860.0, 71.0], [863.0, 596.0], [857.0, 62.0], [839.0, 1624.0], [838.0, 401.0], [834.0, 1582.0], [832.0, 1824.5], [855.0, 536.0], [853.0, 430.0], [852.0, 2141.5], [849.0, 385.0], [847.0, 1887.0], [845.0, 411.0], [843.0, 1372.0], [842.0, 1825.0], [840.0, 405.0], [890.0, 1888.0], [891.0, 1731.0], [888.0, 1448.0], [871.0, 1737.0], [870.0, 44.5], [868.0, 970.1428571428571], [865.0, 1811.0], [864.0, 1480.5], [886.0, 1689.0], [885.0, 1774.0], [884.0, 1719.0], [880.0, 42.0], [879.0, 1592.0], [878.0, 37.0], [877.0, 40.0], [876.0, 40.0], [875.0, 31.0], [874.0, 795.5], [921.0, 1501.0], [926.0, 322.6], [927.0, 1403.3333333333333], [916.0, 1579.25], [915.0, 1354.5], [924.0, 32.0], [923.0, 30.0], [922.0, 1476.0], [920.0, 36.0], [903.0, 32.5], [902.0, 47.0], [901.0, 2030.0], [900.0, 875.2], [897.0, 41.0], [896.0, 433.00000000000006], [911.0, 28.0], [910.0, 1722.0], [909.0, 32.0], [908.0, 31.0], [907.0, 842.0], [906.0, 643.0], [905.0, 902.0], [904.0, 1263.0], [919.0, 38.0], [917.0, 1861.0], [952.0, 1095.8], [957.0, 1242.5], [956.0, 1044.0], [958.0, 1285.0], [955.0, 1582.0], [953.0, 875.1666666666666], [954.0, 1825.0], [951.0, 874.0], [950.0, 1909.0], [949.0, 1557.6666666666667], [947.0, 39.5], [945.0, 991.0], [944.0, 1584.0], [943.0, 44.0], [929.0, 1212.5], [930.0, 570.4], [928.0, 1692.0], [932.0, 1543.0], [931.0, 807.0], [935.0, 1225.6666666666667], [934.0, 43.0], [933.0, 1379.0], [942.0, 514.6666666666666], [941.0, 1834.0], [940.0, 774.0], [939.0, 1509.5], [938.0, 1838.0], [937.0, 1211.5], [936.0, 1203.0], [1.0, 3021.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}, {"data": [[501.8150000000007, 1505.6189999999995]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 958.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10516.666666666666, "minX": 1.75637088E12, "maxY": 14366.666666666666, "series": [{"data": [[1.75637088E12, 14366.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75637088E12, 10516.666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637088E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1505.6189999999995, "minX": 1.75637088E12, "maxY": 1505.6189999999995, "series": [{"data": [[1.75637088E12, 1505.6189999999995]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637088E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1503.5359999999973, "minX": 1.75637088E12, "maxY": 1503.5359999999973, "series": [{"data": [[1.75637088E12, 1503.5359999999973]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637088E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1394.2989999999998, "minX": 1.75637088E12, "maxY": 1394.2989999999998, "series": [{"data": [[1.75637088E12, 1394.2989999999998]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637088E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.75637088E12, "maxY": 3028.0, "series": [{"data": [[1.75637088E12, 3028.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75637088E12, 2762.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75637088E12, 2996.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75637088E12, 2867.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75637088E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75637088E12, 1726.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637088E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 63.0, "minX": 55.0, "maxY": 2314.5, "series": [{"data": [[576.0, 2314.5], [369.0, 587.0], [55.0, 63.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 576.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 63.0, "minX": 55.0, "maxY": 2313.5, "series": [{"data": [[576.0, 2313.5], [369.0, 587.0], [55.0, 63.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 576.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75637088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75637088E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637088E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75637088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75637088E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637088E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75637088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75637088E12, 16.666666666666668]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637088E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75637088E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75637088E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637088E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

