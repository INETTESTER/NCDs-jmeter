/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "maxY": 4242.0, "series": [{"data": [[0.0, 22.0], [0.1, 23.0], [0.2, 23.0], [0.3, 23.0], [0.4, 23.0], [0.5, 23.0], [0.6, 23.0], [0.7, 23.0], [0.8, 24.0], [0.9, 24.0], [1.0, 24.0], [1.1, 24.0], [1.2, 24.0], [1.3, 24.0], [1.4, 24.0], [1.5, 24.0], [1.6, 24.0], [1.7, 24.0], [1.8, 25.0], [1.9, 25.0], [2.0, 25.0], [2.1, 25.0], [2.2, 25.0], [2.3, 25.0], [2.4, 25.0], [2.5, 25.0], [2.6, 25.0], [2.7, 25.0], [2.8, 25.0], [2.9, 25.0], [3.0, 25.0], [3.1, 25.0], [3.2, 25.0], [3.3, 25.0], [3.4, 26.0], [3.5, 26.0], [3.6, 26.0], [3.7, 26.0], [3.8, 26.0], [3.9, 26.0], [4.0, 26.0], [4.1, 26.0], [4.2, 26.0], [4.3, 26.0], [4.4, 26.0], [4.5, 26.0], [4.6, 26.0], [4.7, 26.0], [4.8, 26.0], [4.9, 26.0], [5.0, 26.0], [5.1, 27.0], [5.2, 27.0], [5.3, 27.0], [5.4, 27.0], [5.5, 27.0], [5.6, 27.0], [5.7, 27.0], [5.8, 27.0], [5.9, 27.0], [6.0, 27.0], [6.1, 27.0], [6.2, 27.0], [6.3, 27.0], [6.4, 27.0], [6.5, 28.0], [6.6, 28.0], [6.7, 28.0], [6.8, 28.0], [6.9, 28.0], [7.0, 28.0], [7.1, 28.0], [7.2, 28.0], [7.3, 28.0], [7.4, 28.0], [7.5, 28.0], [7.6, 28.0], [7.7, 28.0], [7.8, 28.0], [7.9, 28.0], [8.0, 28.0], [8.1, 28.0], [8.2, 28.0], [8.3, 28.0], [8.4, 28.0], [8.5, 28.0], [8.6, 28.0], [8.7, 28.0], [8.8, 28.0], [8.9, 29.0], [9.0, 29.0], [9.1, 29.0], [9.2, 29.0], [9.3, 29.0], [9.4, 29.0], [9.5, 29.0], [9.6, 29.0], [9.7, 29.0], [9.8, 29.0], [9.9, 29.0], [10.0, 29.0], [10.1, 29.0], [10.2, 29.0], [10.3, 29.0], [10.4, 29.0], [10.5, 29.0], [10.6, 29.0], [10.7, 29.0], [10.8, 30.0], [10.9, 30.0], [11.0, 30.0], [11.1, 30.0], [11.2, 30.0], [11.3, 30.0], [11.4, 30.0], [11.5, 30.0], [11.6, 30.0], [11.7, 30.0], [11.8, 30.0], [11.9, 30.0], [12.0, 31.0], [12.1, 31.0], [12.2, 31.0], [12.3, 31.0], [12.4, 31.0], [12.5, 31.0], [12.6, 31.0], [12.7, 31.0], [12.8, 31.0], [12.9, 31.0], [13.0, 32.0], [13.1, 32.0], [13.2, 32.0], [13.3, 32.0], [13.4, 32.0], [13.5, 32.0], [13.6, 32.0], [13.7, 32.0], [13.8, 33.0], [13.9, 33.0], [14.0, 33.0], [14.1, 33.0], [14.2, 33.0], [14.3, 33.0], [14.4, 34.0], [14.5, 34.0], [14.6, 34.0], [14.7, 34.0], [14.8, 34.0], [14.9, 34.0], [15.0, 34.0], [15.1, 34.0], [15.2, 34.0], [15.3, 34.0], [15.4, 35.0], [15.5, 35.0], [15.6, 35.0], [15.7, 35.0], [15.8, 35.0], [15.9, 35.0], [16.0, 36.0], [16.1, 36.0], [16.2, 36.0], [16.3, 36.0], [16.4, 37.0], [16.5, 37.0], [16.6, 37.0], [16.7, 37.0], [16.8, 37.0], [16.9, 37.0], [17.0, 37.0], [17.1, 37.0], [17.2, 37.0], [17.3, 38.0], [17.4, 38.0], [17.5, 39.0], [17.6, 39.0], [17.7, 39.0], [17.8, 39.0], [17.9, 39.0], [18.0, 39.0], [18.1, 40.0], [18.2, 40.0], [18.3, 40.0], [18.4, 41.0], [18.5, 41.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 43.0], [19.1, 43.0], [19.2, 43.0], [19.3, 43.0], [19.4, 44.0], [19.5, 44.0], [19.6, 45.0], [19.7, 46.0], [19.8, 46.0], [19.9, 46.0], [20.0, 47.0], [20.1, 48.0], [20.2, 48.0], [20.3, 48.0], [20.4, 49.0], [20.5, 49.0], [20.6, 49.0], [20.7, 50.0], [20.8, 51.0], [20.9, 51.0], [21.0, 52.0], [21.1, 52.0], [21.2, 52.0], [21.3, 53.0], [21.4, 55.0], [21.5, 55.0], [21.6, 56.0], [21.7, 56.0], [21.8, 56.0], [21.9, 57.0], [22.0, 58.0], [22.1, 58.0], [22.2, 60.0], [22.3, 60.0], [22.4, 66.0], [22.5, 67.0], [22.6, 69.0], [22.7, 69.0], [22.8, 71.0], [22.9, 72.0], [23.0, 78.0], [23.1, 81.0], [23.2, 82.0], [23.3, 83.0], [23.4, 84.0], [23.5, 84.0], [23.6, 85.0], [23.7, 86.0], [23.8, 116.0], [23.9, 119.0], [24.0, 131.0], [24.1, 131.0], [24.2, 132.0], [24.3, 145.0], [24.4, 182.0], [24.5, 182.0], [24.6, 205.0], [24.7, 212.0], [24.8, 220.0], [24.9, 221.0], [25.0, 229.0], [25.1, 232.0], [25.2, 250.0], [25.3, 265.0], [25.4, 277.0], [25.5, 293.0], [25.6, 302.0], [25.7, 306.0], [25.8, 313.0], [25.9, 314.0], [26.0, 320.0], [26.1, 325.0], [26.2, 373.0], [26.3, 376.0], [26.4, 386.0], [26.5, 387.0], [26.6, 402.0], [26.7, 402.0], [26.8, 412.0], [26.9, 436.0], [27.0, 453.0], [27.1, 471.0], [27.2, 483.0], [27.3, 515.0], [27.4, 527.0], [27.5, 529.0], [27.6, 575.0], [27.7, 592.0], [27.8, 637.0], [27.9, 650.0], [28.0, 696.0], [28.1, 704.0], [28.2, 736.0], [28.3, 743.0], [28.4, 757.0], [28.5, 765.0], [28.6, 767.0], [28.7, 769.0], [28.8, 776.0], [28.9, 777.0], [29.0, 807.0], [29.1, 809.0], [29.2, 813.0], [29.3, 818.0], [29.4, 818.0], [29.5, 821.0], [29.6, 833.0], [29.7, 834.0], [29.8, 844.0], [29.9, 847.0], [30.0, 848.0], [30.1, 854.0], [30.2, 868.0], [30.3, 868.0], [30.4, 874.0], [30.5, 884.0], [30.6, 891.0], [30.7, 893.0], [30.8, 896.0], [30.9, 899.0], [31.0, 901.0], [31.1, 901.0], [31.2, 903.0], [31.3, 903.0], [31.4, 905.0], [31.5, 907.0], [31.6, 909.0], [31.7, 909.0], [31.8, 912.0], [31.9, 913.0], [32.0, 915.0], [32.1, 916.0], [32.2, 924.0], [32.3, 924.0], [32.4, 929.0], [32.5, 939.0], [32.6, 956.0], [32.7, 959.0], [32.8, 973.0], [32.9, 975.0], [33.0, 984.0], [33.1, 994.0], [33.2, 1010.0], [33.3, 1014.0], [33.4, 1015.0], [33.5, 1021.0], [33.6, 1022.0], [33.7, 1030.0], [33.8, 1036.0], [33.9, 1041.0], [34.0, 1041.0], [34.1, 1047.0], [34.2, 1053.0], [34.3, 1060.0], [34.4, 1060.0], [34.5, 1063.0], [34.6, 1063.0], [34.7, 1075.0], [34.8, 1086.0], [34.9, 1093.0], [35.0, 1094.0], [35.1, 1105.0], [35.2, 1106.0], [35.3, 1110.0], [35.4, 1111.0], [35.5, 1112.0], [35.6, 1112.0], [35.7, 1117.0], [35.8, 1119.0], [35.9, 1120.0], [36.0, 1121.0], [36.1, 1124.0], [36.2, 1125.0], [36.3, 1126.0], [36.4, 1134.0], [36.5, 1137.0], [36.6, 1141.0], [36.7, 1148.0], [36.8, 1150.0], [36.9, 1155.0], [37.0, 1155.0], [37.1, 1157.0], [37.2, 1158.0], [37.3, 1160.0], [37.4, 1169.0], [37.5, 1170.0], [37.6, 1171.0], [37.7, 1174.0], [37.8, 1187.0], [37.9, 1197.0], [38.0, 1199.0], [38.1, 1203.0], [38.2, 1208.0], [38.3, 1212.0], [38.4, 1218.0], [38.5, 1227.0], [38.6, 1243.0], [38.7, 1245.0], [38.8, 1249.0], [38.9, 1254.0], [39.0, 1256.0], [39.1, 1268.0], [39.2, 1270.0], [39.3, 1276.0], [39.4, 1277.0], [39.5, 1283.0], [39.6, 1289.0], [39.7, 1293.0], [39.8, 1307.0], [39.9, 1317.0], [40.0, 1331.0], [40.1, 1340.0], [40.2, 1344.0], [40.3, 1360.0], [40.4, 1360.0], [40.5, 1361.0], [40.6, 1362.0], [40.7, 1367.0], [40.8, 1369.0], [40.9, 1374.0], [41.0, 1378.0], [41.1, 1403.0], [41.2, 1404.0], [41.3, 1417.0], [41.4, 1417.0], [41.5, 1436.0], [41.6, 1448.0], [41.7, 1465.0], [41.8, 1471.0], [41.9, 1490.0], [42.0, 1494.0], [42.1, 1524.0], [42.2, 1525.0], [42.3, 1527.0], [42.4, 1535.0], [42.5, 1540.0], [42.6, 1543.0], [42.7, 1545.0], [42.8, 1546.0], [42.9, 1556.0], [43.0, 1557.0], [43.1, 1568.0], [43.2, 1570.0], [43.3, 1571.0], [43.4, 1578.0], [43.5, 1589.0], [43.6, 1591.0], [43.7, 1595.0], [43.8, 1596.0], [43.9, 1611.0], [44.0, 1611.0], [44.1, 1629.0], [44.2, 1638.0], [44.3, 1643.0], [44.4, 1646.0], [44.5, 1647.0], [44.6, 1647.0], [44.7, 1650.0], [44.8, 1652.0], [44.9, 1662.0], [45.0, 1664.0], [45.1, 1673.0], [45.2, 1674.0], [45.3, 1687.0], [45.4, 1687.0], [45.5, 1693.0], [45.6, 1694.0], [45.7, 1706.0], [45.8, 1707.0], [45.9, 1710.0], [46.0, 1715.0], [46.1, 1735.0], [46.2, 1738.0], [46.3, 1744.0], [46.4, 1748.0], [46.5, 1753.0], [46.6, 1770.0], [46.7, 1773.0], [46.8, 1777.0], [46.9, 1795.0], [47.0, 1796.0], [47.1, 1797.0], [47.2, 1802.0], [47.3, 1810.0], [47.4, 1811.0], [47.5, 1823.0], [47.6, 1830.0], [47.7, 1831.0], [47.8, 1834.0], [47.9, 1846.0], [48.0, 1850.0], [48.1, 1858.0], [48.2, 1858.0], [48.3, 1860.0], [48.4, 1860.0], [48.5, 1864.0], [48.6, 1866.0], [48.7, 1871.0], [48.8, 1879.0], [48.9, 1883.0], [49.0, 1883.0], [49.1, 1887.0], [49.2, 1888.0], [49.3, 1899.0], [49.4, 1901.0], [49.5, 1903.0], [49.6, 1905.0], [49.7, 1915.0], [49.8, 1916.0], [49.9, 1929.0], [50.0, 1931.0], [50.1, 1938.0], [50.2, 1938.0], [50.3, 1942.0], [50.4, 1956.0], [50.5, 1959.0], [50.6, 1961.0], [50.7, 1968.0], [50.8, 1969.0], [50.9, 1975.0], [51.0, 1976.0], [51.1, 1979.0], [51.2, 1983.0], [51.3, 1985.0], [51.4, 1987.0], [51.5, 1988.0], [51.6, 1989.0], [51.7, 1990.0], [51.8, 1991.0], [51.9, 2000.0], [52.0, 2001.0], [52.1, 2005.0], [52.2, 2012.0], [52.3, 2015.0], [52.4, 2015.0], [52.5, 2021.0], [52.6, 2022.0], [52.7, 2025.0], [52.8, 2028.0], [52.9, 2031.0], [53.0, 2031.0], [53.1, 2033.0], [53.2, 2033.0], [53.3, 2037.0], [53.4, 2037.0], [53.5, 2039.0], [53.6, 2042.0], [53.7, 2044.0], [53.8, 2044.0], [53.9, 2048.0], [54.0, 2048.0], [54.1, 2051.0], [54.2, 2053.0], [54.3, 2053.0], [54.4, 2058.0], [54.5, 2066.0], [54.6, 2067.0], [54.7, 2078.0], [54.8, 2080.0], [54.9, 2080.0], [55.0, 2082.0], [55.1, 2086.0], [55.2, 2086.0], [55.3, 2096.0], [55.4, 2097.0], [55.5, 2099.0], [55.6, 2103.0], [55.7, 2105.0], [55.8, 2107.0], [55.9, 2112.0], [56.0, 2112.0], [56.1, 2115.0], [56.2, 2116.0], [56.3, 2119.0], [56.4, 2122.0], [56.5, 2123.0], [56.6, 2126.0], [56.7, 2127.0], [56.8, 2129.0], [56.9, 2141.0], [57.0, 2143.0], [57.1, 2145.0], [57.2, 2145.0], [57.3, 2150.0], [57.4, 2152.0], [57.5, 2166.0], [57.6, 2168.0], [57.7, 2174.0], [57.8, 2180.0], [57.9, 2181.0], [58.0, 2185.0], [58.1, 2186.0], [58.2, 2187.0], [58.3, 2189.0], [58.4, 2190.0], [58.5, 2193.0], [58.6, 2194.0], [58.7, 2204.0], [58.8, 2210.0], [58.9, 2220.0], [59.0, 2221.0], [59.1, 2226.0], [59.2, 2234.0], [59.3, 2245.0], [59.4, 2256.0], [59.5, 2262.0], [59.6, 2262.0], [59.7, 2274.0], [59.8, 2274.0], [59.9, 2278.0], [60.0, 2280.0], [60.1, 2290.0], [60.2, 2291.0], [60.3, 2308.0], [60.4, 2314.0], [60.5, 2317.0], [60.6, 2317.0], [60.7, 2320.0], [60.8, 2320.0], [60.9, 2330.0], [61.0, 2345.0], [61.1, 2369.0], [61.2, 2376.0], [61.3, 2386.0], [61.4, 2396.0], [61.5, 2399.0], [61.6, 2401.0], [61.7, 2404.0], [61.8, 2406.0], [61.9, 2411.0], [62.0, 2415.0], [62.1, 2426.0], [62.2, 2431.0], [62.3, 2435.0], [62.4, 2437.0], [62.5, 2440.0], [62.6, 2440.0], [62.7, 2456.0], [62.8, 2460.0], [62.9, 2465.0], [63.0, 2470.0], [63.1, 2474.0], [63.2, 2481.0], [63.3, 2490.0], [63.4, 2498.0], [63.5, 2509.0], [63.6, 2510.0], [63.7, 2525.0], [63.8, 2526.0], [63.9, 2529.0], [64.0, 2532.0], [64.1, 2554.0], [64.2, 2557.0], [64.3, 2566.0], [64.4, 2577.0], [64.5, 2579.0], [64.6, 2580.0], [64.7, 2583.0], [64.8, 2584.0], [64.9, 2587.0], [65.0, 2588.0], [65.1, 2591.0], [65.2, 2591.0], [65.3, 2592.0], [65.4, 2594.0], [65.5, 2606.0], [65.6, 2607.0], [65.7, 2624.0], [65.8, 2626.0], [65.9, 2629.0], [66.0, 2630.0], [66.1, 2632.0], [66.2, 2633.0], [66.3, 2634.0], [66.4, 2636.0], [66.5, 2640.0], [66.6, 2646.0], [66.7, 2646.0], [66.8, 2651.0], [66.9, 2652.0], [67.0, 2663.0], [67.1, 2668.0], [67.2, 2669.0], [67.3, 2674.0], [67.4, 2674.0], [67.5, 2683.0], [67.6, 2684.0], [67.7, 2687.0], [67.8, 2691.0], [67.9, 2694.0], [68.0, 2700.0], [68.1, 2708.0], [68.2, 2709.0], [68.3, 2716.0], [68.4, 2718.0], [68.5, 2719.0], [68.6, 2720.0], [68.7, 2723.0], [68.8, 2723.0], [68.9, 2726.0], [69.0, 2726.0], [69.1, 2732.0], [69.2, 2733.0], [69.3, 2744.0], [69.4, 2746.0], [69.5, 2756.0], [69.6, 2757.0], [69.7, 2773.0], [69.8, 2775.0], [69.9, 2778.0], [70.0, 2779.0], [70.1, 2782.0], [70.2, 2784.0], [70.3, 2788.0], [70.4, 2789.0], [70.5, 2799.0], [70.6, 2799.0], [70.7, 2802.0], [70.8, 2806.0], [70.9, 2807.0], [71.0, 2809.0], [71.1, 2816.0], [71.2, 2833.0], [71.3, 2835.0], [71.4, 2840.0], [71.5, 2844.0], [71.6, 2844.0], [71.7, 2858.0], [71.8, 2861.0], [71.9, 2863.0], [72.0, 2864.0], [72.1, 2882.0], [72.2, 2888.0], [72.3, 2896.0], [72.4, 2912.0], [72.5, 2916.0], [72.6, 2921.0], [72.7, 2928.0], [72.8, 2929.0], [72.9, 2946.0], [73.0, 2948.0], [73.1, 2949.0], [73.2, 2959.0], [73.3, 2964.0], [73.4, 2964.0], [73.5, 2972.0], [73.6, 2976.0], [73.7, 2979.0], [73.8, 2979.0], [73.9, 2988.0], [74.0, 2991.0], [74.1, 3000.0], [74.2, 3001.0], [74.3, 3002.0], [74.4, 3010.0], [74.5, 3013.0], [74.6, 3022.0], [74.7, 3027.0], [74.8, 3027.0], [74.9, 3031.0], [75.0, 3032.0], [75.1, 3041.0], [75.2, 3044.0], [75.3, 3049.0], [75.4, 3069.0], [75.5, 3072.0], [75.6, 3082.0], [75.7, 3085.0], [75.8, 3089.0], [75.9, 3093.0], [76.0, 3104.0], [76.1, 3105.0], [76.2, 3112.0], [76.3, 3119.0], [76.4, 3122.0], [76.5, 3124.0], [76.6, 3126.0], [76.7, 3129.0], [76.8, 3129.0], [76.9, 3136.0], [77.0, 3138.0], [77.1, 3144.0], [77.2, 3144.0], [77.3, 3150.0], [77.4, 3150.0], [77.5, 3151.0], [77.6, 3152.0], [77.7, 3158.0], [77.8, 3165.0], [77.9, 3173.0], [78.0, 3173.0], [78.1, 3181.0], [78.2, 3183.0], [78.3, 3188.0], [78.4, 3188.0], [78.5, 3190.0], [78.6, 3191.0], [78.7, 3199.0], [78.8, 3200.0], [78.9, 3208.0], [79.0, 3208.0], [79.1, 3220.0], [79.2, 3232.0], [79.3, 3240.0], [79.4, 3241.0], [79.5, 3245.0], [79.6, 3268.0], [79.7, 3271.0], [79.8, 3273.0], [79.9, 3283.0], [80.0, 3286.0], [80.1, 3288.0], [80.2, 3288.0], [80.3, 3290.0], [80.4, 3290.0], [80.5, 3292.0], [80.6, 3292.0], [80.7, 3296.0], [80.8, 3296.0], [80.9, 3299.0], [81.0, 3299.0], [81.1, 3302.0], [81.2, 3302.0], [81.3, 3307.0], [81.4, 3312.0], [81.5, 3315.0], [81.6, 3317.0], [81.7, 3319.0], [81.8, 3320.0], [81.9, 3324.0], [82.0, 3330.0], [82.1, 3341.0], [82.2, 3351.0], [82.3, 3369.0], [82.4, 3378.0], [82.5, 3381.0], [82.6, 3382.0], [82.7, 3389.0], [82.8, 3396.0], [82.9, 3413.0], [83.0, 3414.0], [83.1, 3439.0], [83.2, 3442.0], [83.3, 3450.0], [83.4, 3452.0], [83.5, 3457.0], [83.6, 3457.0], [83.7, 3482.0], [83.8, 3484.0], [83.9, 3501.0], [84.0, 3503.0], [84.1, 3511.0], [84.2, 3515.0], [84.3, 3523.0], [84.4, 3527.0], [84.5, 3538.0], [84.6, 3538.0], [84.7, 3545.0], [84.8, 3546.0], [84.9, 3550.0], [85.0, 3554.0], [85.1, 3559.0], [85.2, 3560.0], [85.3, 3566.0], [85.4, 3568.0], [85.5, 3574.0], [85.6, 3575.0], [85.7, 3577.0], [85.8, 3577.0], [85.9, 3578.0], [86.0, 3582.0], [86.1, 3584.0], [86.2, 3586.0], [86.3, 3589.0], [86.4, 3590.0], [86.5, 3590.0], [86.6, 3590.0], [86.7, 3594.0], [86.8, 3595.0], [86.9, 3597.0], [87.0, 3597.0], [87.1, 3600.0], [87.2, 3600.0], [87.3, 3603.0], [87.4, 3606.0], [87.5, 3607.0], [87.6, 3610.0], [87.7, 3615.0], [87.8, 3616.0], [87.9, 3618.0], [88.0, 3623.0], [88.1, 3624.0], [88.2, 3628.0], [88.3, 3635.0], [88.4, 3636.0], [88.5, 3644.0], [88.6, 3651.0], [88.7, 3656.0], [88.8, 3658.0], [88.9, 3667.0], [89.0, 3670.0], [89.1, 3674.0], [89.2, 3674.0], [89.3, 3680.0], [89.4, 3681.0], [89.5, 3688.0], [89.6, 3688.0], [89.7, 3690.0], [89.8, 3692.0], [89.9, 3699.0], [90.0, 3704.0], [90.1, 3710.0], [90.2, 3710.0], [90.3, 3713.0], [90.4, 3714.0], [90.5, 3716.0], [90.6, 3726.0], [90.7, 3738.0], [90.8, 3741.0], [90.9, 3747.0], [91.0, 3749.0], [91.1, 3751.0], [91.2, 3751.0], [91.3, 3752.0], [91.4, 3752.0], [91.5, 3754.0], [91.6, 3754.0], [91.7, 3758.0], [91.8, 3761.0], [91.9, 3767.0], [92.0, 3770.0], [92.1, 3773.0], [92.2, 3777.0], [92.3, 3780.0], [92.4, 3783.0], [92.5, 3804.0], [92.6, 3807.0], [92.7, 3812.0], [92.8, 3813.0], [92.9, 3822.0], [93.0, 3823.0], [93.1, 3831.0], [93.2, 3831.0], [93.3, 3833.0], [93.4, 3836.0], [93.5, 3845.0], [93.6, 3852.0], [93.7, 3854.0], [93.8, 3857.0], [93.9, 3863.0], [94.0, 3880.0], [94.1, 3896.0], [94.2, 3896.0], [94.3, 3898.0], [94.4, 3898.0], [94.5, 3904.0], [94.6, 3909.0], [94.7, 3927.0], [94.8, 3932.0], [94.9, 3975.0], [95.0, 3975.0], [95.1, 3980.0], [95.2, 3987.0], [95.3, 3998.0], [95.4, 4001.0], [95.5, 4014.0], [95.6, 4014.0], [95.7, 4028.0], [95.8, 4037.0], [95.9, 4041.0], [96.0, 4041.0], [96.1, 4048.0], [96.2, 4055.0], [96.3, 4074.0], [96.4, 4079.0], [96.5, 4087.0], [96.6, 4089.0], [96.7, 4107.0], [96.8, 4108.0], [96.9, 4111.0], [97.0, 4114.0], [97.1, 4122.0], [97.2, 4124.0], [97.3, 4124.0], [97.4, 4127.0], [97.5, 4130.0], [97.6, 4130.0], [97.7, 4131.0], [97.8, 4135.0], [97.9, 4144.0], [98.0, 4147.0], [98.1, 4151.0], [98.2, 4155.0], [98.3, 4158.0], [98.4, 4161.0], [98.5, 4171.0], [98.6, 4171.0], [98.7, 4175.0], [98.8, 4180.0], [98.9, 4189.0], [99.0, 4192.0], [99.1, 4197.0], [99.2, 4197.0], [99.3, 4198.0], [99.4, 4198.0], [99.5, 4207.0], [99.6, 4210.0], [99.7, 4221.0], [99.8, 4222.0], [99.9, 4236.0], [100.0, 4242.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "maxY": 357.0, "series": [{"data": [[0.0, 357.0], [600.0, 4.0], [700.0, 14.0], [800.0, 30.0], [900.0, 32.0], [1000.0, 29.0], [1100.0, 44.0], [1200.0, 26.0], [1300.0, 20.0], [1400.0, 15.0], [1500.0, 26.0], [100.0, 12.0], [1600.0, 27.0], [1700.0, 23.0], [1800.0, 33.0], [1900.0, 38.0], [2000.0, 55.0], [2100.0, 47.0], [2200.0, 24.0], [2300.0, 19.0], [2400.0, 28.0], [2500.0, 31.0], [2600.0, 37.0], [2700.0, 40.0], [2800.0, 26.0], [2900.0, 26.0], [3000.0, 28.0], [3100.0, 42.0], [200.0, 15.0], [3200.0, 34.0], [3300.0, 27.0], [3400.0, 16.0], [3500.0, 48.0], [3600.0, 43.0], [3700.0, 38.0], [3800.0, 29.0], [3900.0, 14.0], [4000.0, 20.0], [4100.0, 42.0], [4200.0, 8.0], [300.0, 15.0], [400.0, 10.0], [500.0, 8.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 222.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 869.0, "series": [{"data": [[0.0, 409.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 222.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 869.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 734.5800000000003, "minX": 1.7563524E12, "maxY": 734.5800000000003, "series": [{"data": [[1.7563524E12, 734.5800000000003]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563524E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 4224.5, "series": [{"data": [[3.0, 1646.5], [5.0, 2715.0], [6.0, 3857.0], [7.0, 1647.0], [8.0, 1344.0], [10.0, 2944.0], [11.0, 1053.0], [14.0, 2924.0], [17.0, 1047.0], [18.0, 2449.0], [22.0, 2799.0], [24.0, 3438.75], [26.0, 3659.0], [27.0, 3752.0], [29.0, 3815.0], [31.0, 3919.0], [35.0, 3635.0], [37.0, 3876.0], [36.0, 3656.0], [39.0, 3846.0], [38.0, 3636.0], [41.0, 3714.0], [43.0, 3674.5], [45.0, 3634.0], [44.0, 3666.25], [47.0, 3623.0], [46.0, 3624.0], [49.0, 3618.0], [48.0, 3623.0], [50.0, 3616.0], [53.0, 3610.0], [52.0, 3615.5], [55.0, 3607.0], [54.0, 3594.0], [59.0, 3543.75], [61.0, 3589.0], [60.0, 3582.0], [63.0, 3511.0], [62.0, 3568.0], [67.0, 3925.0], [64.0, 4197.0], [71.0, 3319.5], [69.0, 3313.0], [68.0, 3324.0], [75.0, 3302.5], [73.0, 3301.0], [79.0, 4207.0], [78.0, 3307.3333333333335], [83.0, 3292.0], [82.0, 3295.0], [81.0, 3296.0], [86.0, 3289.5], [84.0, 3713.0], [91.0, 4205.5], [90.0, 3290.0], [88.0, 3290.0], [95.0, 4158.0], [94.0, 4004.0], [93.0, 3288.0], [98.0, 4224.5], [103.0, 3813.0], [102.0, 3845.0], [101.0, 4155.0], [100.0, 4015.3333333333335], [107.0, 3682.5], [106.0, 3519.5], [111.0, 4025.5], [109.0, 4197.0], [108.0, 3812.0], [115.0, 3752.0], [114.0, 4119.666666666667], [117.0, 3908.0], [122.0, 3860.0], [121.0, 4192.5], [120.0, 4016.5], [127.0, 3871.5], [125.0, 3896.6666666666665], [134.0, 3822.0], [133.0, 4079.0], [132.0, 4192.0], [131.0, 3784.6666666666665], [128.0, 3022.0], [143.0, 4114.0], [142.0, 4144.5], [140.0, 3991.5], [138.0, 3013.0], [137.0, 4122.0], [136.0, 4075.5], [151.0, 3675.5], [149.0, 3586.0], [148.0, 3606.0], [147.0, 3804.0], [146.0, 4164.0], [145.0, 3885.0], [159.0, 3704.0], [157.0, 3356.5], [155.0, 4151.0], [154.0, 3600.0], [153.0, 3710.0], [152.0, 3590.0], [166.0, 3815.3333333333335], [163.0, 3588.0], [162.0, 3576.0], [161.0, 3647.6666666666665], [175.0, 4023.0], [173.0, 3858.0], [172.0, 3578.0], [168.0, 3770.0], [181.0, 3750.6666666666665], [178.0, 3573.0], [177.0, 3755.0], [176.0, 3590.0], [191.0, 4124.0], [190.0, 4131.0], [189.0, 3881.6666666666665], [186.0, 3574.0], [185.0, 4035.5], [199.0, 3821.5], [197.0, 3689.0], [196.0, 4072.0], [194.0, 3732.5], [192.0, 3763.0], [207.0, 3741.0], [206.0, 4107.0], [205.0, 3813.0], [202.0, 4087.0], [201.0, 4038.5], [215.0, 4074.0], [214.0, 3711.0], [213.0, 4110.0], [212.0, 3995.0], [211.0, 3747.0], [210.0, 3903.0], [209.0, 4041.0], [208.0, 3896.0], [222.0, 3726.0], [221.0, 3663.3333333333335], [218.0, 3710.0], [217.0, 4111.0], [216.0, 3904.0], [231.0, 3832.0], [230.0, 4048.0], [229.0, 4064.0], [228.0, 3898.0], [227.0, 3540.0], [226.0, 3700.5], [224.0, 3698.5], [238.0, 3975.0], [237.0, 3833.0], [236.0, 4007.0], [235.0, 3807.0], [232.0, 4037.0], [246.0, 3670.0], [245.0, 3975.0], [243.0, 3975.0], [241.0, 3690.0], [240.0, 3692.0], [255.0, 2719.0], [254.0, 2721.0], [253.0, 2724.0], [252.0, 2726.0], [251.0, 2732.0], [250.0, 3527.0], [249.0, 3656.0], [248.0, 3856.8], [269.0, 2634.0], [270.0, 2632.0], [268.0, 2638.0], [259.0, 2840.0], [258.0, 2708.0], [257.0, 2709.0], [256.0, 2716.0], [267.0, 2636.0], [266.0, 2646.0], [265.0, 2674.0], [264.0, 2674.0], [263.0, 2683.0], [262.0, 2685.5], [260.0, 2700.0], [275.0, 2587.5], [285.0, 2086.0], [284.0, 2080.0], [283.0, 1403.0], [282.0, 2106.0], [280.0, 3754.0], [278.0, 3268.0], [277.0, 2577.0], [276.0, 2718.0], [273.0, 2629.5], [272.0, 2626.0], [302.0, 904.0], [303.0, 899.0], [301.0, 901.0], [300.0, 813.0], [299.0, 854.0], [298.0, 2199.5], [296.0, 907.0], [295.0, 911.0], [288.0, 3842.0], [290.0, 1063.0], [289.0, 3555.3333333333335], [294.0, 3655.5], [292.0, 1060.0], [317.0, 903.0], [319.0, 1887.0], [316.0, 2177.0], [307.0, 2498.0], [306.0, 3831.0], [305.0, 1212.0], [304.0, 901.0], [314.0, 1119.0], [313.0, 720.0], [312.0, 2367.5], [310.0, 848.0], [309.0, 847.0], [308.0, 3396.0], [334.0, 3439.0], [335.0, 527.0], [333.0, 1871.5], [323.0, 896.0], [322.0, 3603.0], [321.0, 526.0], [320.0, 3811.0], [331.0, 596.0], [330.0, 2474.0], [329.0, 2795.0], [327.0, 704.0], [325.0, 834.0], [324.0, 844.0], [338.0, 2320.0], [350.0, 3041.0], [351.0, 3176.0], [348.0, 3455.0], [345.0, 3337.0], [343.0, 3560.0], [341.0, 2936.5], [340.0, 2435.0], [337.0, 3770.0], [336.0, 3413.0], [366.0, 3188.0], [367.0, 3123.0], [365.0, 3128.0], [364.0, 2440.0], [363.0, 3738.0], [362.0, 3136.0], [361.0, 3752.0], [360.0, 3151.0], [359.0, 2921.5], [352.0, 3773.0], [355.0, 3552.0], [353.0, 3142.0], [357.0, 3119.0], [356.0, 3777.0], [371.0, 3261.5], [382.0, 3326.5], [380.0, 3566.0], [379.0, 3144.0], [378.0, 3150.0], [377.0, 3186.5], [375.0, 3478.0], [374.0, 2843.0], [372.0, 3503.0], [369.0, 3194.0], [368.0, 2778.0], [398.0, 3105.0], [399.0, 3104.0], [397.0, 3546.0], [396.0, 3452.0], [395.0, 3315.0], [394.0, 3071.0], [393.0, 2991.0], [392.0, 2437.0], [391.0, 2330.0], [385.0, 2815.0], [384.0, 3459.0], [387.0, 3089.0], [386.0, 3307.0], [390.0, 3365.0], [388.0, 3681.0], [414.0, 3019.5], [415.0, 2440.0], [412.0, 3602.0], [403.0, 2775.0], [402.0, 2773.0], [401.0, 2802.5], [411.0, 3548.0], [410.0, 2274.0], [409.0, 2979.0], [408.0, 2979.0], [407.0, 2961.0], [406.0, 2964.0], [405.0, 3424.0], [404.0, 3628.0], [430.0, 3181.0], [431.0, 3190.0], [429.0, 2262.0], [428.0, 3578.0], [427.0, 3032.0], [426.0, 3366.0], [425.0, 3523.0], [424.0, 3240.0], [423.0, 3378.0], [416.0, 2276.0], [418.0, 2969.0], [417.0, 2438.0], [422.0, 3044.0], [421.0, 3273.0], [420.0, 2408.0], [447.0, 3083.0], [446.0, 3317.6666666666665], [435.0, 3208.0], [434.0, 3317.0], [433.0, 3380.0], [432.0, 3010.0], [443.0, 3138.0], [442.0, 3414.0], [441.0, 2194.0], [440.0, 3533.0], [439.0, 2994.5], [437.0, 3000.0], [436.0, 3199.0], [462.0, 3112.0], [463.0, 3152.0], [461.0, 3283.0], [460.0, 2558.0], [458.0, 3330.0], [457.0, 2893.0], [456.0, 2911.5], [454.0, 2972.0], [448.0, 2181.0], [451.0, 2572.0], [449.0, 3173.0], [453.0, 2171.0], [452.0, 3450.0], [478.0, 2119.0], [479.0, 2105.0], [477.0, 2108.0], [467.0, 2152.0], [466.0, 3082.0], [465.0, 3122.0], [464.0, 2948.0], [475.0, 2127.0], [474.0, 2113.0], [473.0, 2116.0], [472.0, 2135.0], [471.0, 3312.0], [470.0, 2946.0], [469.0, 2141.0], [468.0, 3035.0], [494.0, 2497.0], [495.0, 3369.0], [492.0, 2550.0], [490.0, 31.0], [489.0, 2779.0], [488.0, 2473.0], [486.0, 2080.0], [482.0, 3410.0], [481.0, 2097.0], [480.0, 2928.0], [509.0, 27.0], [511.0, 1915.5], [508.0, 31.0], [507.0, 32.0], [506.0, 1033.0], [504.0, 34.0], [503.0, 1037.5], [501.0, 1035.5], [499.0, 40.0], [498.0, 38.5], [496.0, 41.0], [537.0, 27.0], [542.0, 1858.0], [543.0, 1858.0], [531.0, 649.0], [528.0, 1884.0], [541.0, 1860.0], [540.0, 946.0], [538.0, 1868.0], [536.0, 947.5], [519.0, 1903.0], [518.0, 1905.0], [517.0, 34.0], [516.0, 28.0], [515.0, 2053.0], [514.0, 2714.3333333333335], [527.0, 1883.0], [526.0, 1012.0], [524.0, 960.5], [521.0, 31.0], [520.0, 25.0], [534.0, 27.0], [532.0, 30.0], [568.0, 982.0], [574.0, 3263.0], [575.0, 39.0], [572.0, 2744.0], [570.0, 29.0], [569.0, 3286.0], [559.0, 34.0], [544.0, 2858.0], [546.0, 1854.0], [545.0, 29.0], [549.0, 939.5], [547.0, 28.0], [558.0, 1830.0], [557.0, 3268.0], [556.0, 3165.0], [555.0, 1831.0], [554.0, 30.0], [553.0, 1846.0], [552.0, 28.0], [567.0, 3289.0], [565.0, 2627.0], [563.0, 3102.6666666666665], [561.0, 1809.0], [603.0, 26.5], [593.0, 49.0], [605.0, 3140.0], [607.0, 2844.0], [592.0, 50.0], [604.0, 28.0], [600.0, 29.0], [583.0, 34.0], [582.0, 32.0], [580.0, 34.0], [579.0, 58.0], [578.0, 3190.0], [577.0, 37.0], [576.0, 36.0], [591.0, 2753.6666666666665], [588.0, 56.0], [587.0, 55.5], [585.0, 57.0], [584.0, 58.0], [599.0, 2857.0], [598.0, 28.333333333333332], [595.0, 2996.5], [637.0, 3187.0], [638.0, 2526.0], [624.0, 2663.0], [636.0, 2733.5], [634.0, 29.0], [633.0, 2738.0], [632.0, 3126.0], [622.0, 26.0], [609.0, 2954.3333333333335], [611.0, 29.0], [610.0, 32.0], [614.0, 1374.0], [613.0, 1838.0], [621.0, 3118.0], [619.0, 2564.6666666666665], [616.0, 3164.0], [631.0, 1964.3333333333333], [628.0, 3026.0], [626.0, 29.0], [625.0, 25.0], [665.0, 3124.0], [669.0, 2624.0], [671.0, 3020.5], [657.0, 31.0], [656.0, 32.0], [659.0, 35.0], [658.0, 26.0], [661.0, 2995.0], [660.0, 33.0], [668.0, 27.0], [667.0, 2912.0], [666.0, 2678.0], [664.0, 2646.0], [647.0, 1415.5], [646.0, 3001.0], [644.0, 1689.0], [643.0, 2833.0], [642.0, 1528.5], [640.0, 1277.0], [654.0, 3150.0], [653.0, 2626.0], [652.0, 26.0], [651.0, 3144.0], [650.0, 2807.0], [649.0, 2668.0], [648.0, 30.0], [663.0, 3069.0], [662.0, 3129.0], [697.0, 2949.0], [702.0, 2591.0], [703.0, 26.0], [688.0, 2597.0], [690.0, 29.0], [689.0, 3002.0], [692.0, 3085.0], [691.0, 29.0], [701.0, 2594.0], [700.0, 1308.0], [698.0, 2726.0], [696.0, 2728.0], [678.0, 28.5], [676.0, 2632.0], [675.0, 28.0], [674.0, 3104.0], [673.0, 25.0], [672.0, 2652.0], [687.0, 2733.0], [686.0, 895.6666666666667], [683.0, 3089.0], [682.0, 3112.0], [681.0, 23.0], [680.0, 28.5], [695.0, 28.0], [694.0, 2798.5], [728.0, 2705.5], [721.0, 33.0], [733.0, 3026.0], [732.0, 1004.6666666666666], [730.0, 2620.5], [719.0, 40.0], [704.0, 59.0], [706.0, 2746.0], [705.0, 24.0], [708.0, 56.0], [707.0, 2585.0], [711.0, 43.0], [710.0, 2566.5], [718.0, 39.0], [717.0, 33.0], [716.0, 41.0], [715.0, 43.0], [714.0, 46.0], [713.0, 37.0], [712.0, 83.0], [726.0, 2606.0], [725.0, 2580.0], [723.0, 1217.0], [720.0, 35.0], [763.0, 1360.0], [756.0, 1947.0], [765.0, 2369.0], [766.0, 2330.0], [754.0, 2465.0], [753.0, 892.3333333333333], [764.0, 1360.0], [761.0, 1276.0], [743.0, 2560.5], [742.0, 2515.0], [740.0, 52.0], [739.0, 52.0], [738.0, 51.0], [737.0, 925.6666666666666], [736.0, 55.0], [751.0, 42.0], [749.0, 2801.0], [748.0, 1524.5], [746.0, 52.0], [745.0, 2923.0], [744.0, 2687.0], [759.0, 2882.0], [758.0, 2976.0], [757.0, 1371.0], [798.0, 2532.0], [799.0, 1265.0], [785.0, 2622.0], [784.0, 661.0], [797.0, 24.0], [796.0, 1236.5], [794.0, 26.5], [792.0, 28.0], [782.0, 1751.3333333333333], [769.0, 1355.0], [768.0, 25.0], [772.0, 2706.0], [770.0, 32.0], [775.0, 1171.5], [773.0, 1173.5], [779.0, 2315.0], [778.0, 24.0], [777.0, 1849.0], [791.0, 1210.0], [790.0, 1276.0], [789.0, 1319.6666666666667], [786.0, 28.0], [825.0, 52.0], [818.0, 29.0], [829.0, 49.0], [831.0, 47.666666666666664], [817.0, 1155.0], [816.0, 1157.0], [828.0, 49.0], [824.0, 25.0], [807.0, 1170.0], [806.0, 24.5], [804.0, 30.0], [803.0, 1231.5], [801.0, 25.0], [800.0, 1196.0], [815.0, 1158.0], [814.0, 2396.0], [813.0, 25.0], [812.0, 25.0], [811.0, 28.0], [810.0, 1169.0], [809.0, 600.0], [822.0, 584.0], [821.0, 1134.0], [819.0, 25.0], [857.0, 1137.0], [861.0, 24.0], [862.0, 1041.0], [849.0, 43.0], [848.0, 601.5], [851.0, 36.0], [850.0, 1124.0], [853.0, 34.0], [852.0, 1121.0], [860.0, 1063.0], [859.0, 24.0], [858.0, 26.0], [856.0, 23.0], [839.0, 42.0], [838.0, 46.0], [837.0, 45.5], [835.0, 42.0], [834.0, 44.0], [833.0, 1150.0], [832.0, 47.0], [846.0, 1197.0], [845.0, 1105.0], [844.0, 1106.0], [843.0, 1125.0], [842.0, 1126.0], [841.0, 1119.0], [840.0, 42.0], [855.0, 1086.0], [854.0, 1021.0], [888.0, 2415.0], [881.0, 1030.0], [895.0, 2193.0], [893.0, 2723.0], [890.0, 2524.5], [879.0, 2456.0], [864.0, 35.0], [867.0, 1063.0], [866.0, 547.5], [869.0, 1041.0], [868.0, 34.0], [871.0, 29.0], [870.0, 26.0], [878.0, 1036.0], [877.0, 2361.0], [876.0, 27.0], [875.0, 2287.0], [874.0, 2691.0], [873.0, 2484.0], [872.0, 1019.0], [887.0, 1821.25], [885.0, 2752.0], [882.0, 82.0], [880.0, 2756.0], [924.0, 60.0], [897.0, 991.4], [898.0, 1004.0], [899.0, 2788.0], [920.0, 73.0], [902.0, 2079.6666666666665], [896.0, 310.0], [911.0, 84.0], [909.0, 2640.0], [908.0, 1434.5], [904.0, 2443.5], [927.0, 43.0], [914.0, 79.66666666666667], [912.0, 1654.6666666666665], [917.0, 67.0], [916.0, 1390.0], [919.0, 60.0], [918.0, 67.0], [926.0, 2633.0], [925.0, 2584.0], [923.0, 1833.5], [921.0, 71.0], [952.0, 51.0], [956.0, 992.0], [959.0, 902.0], [946.0, 916.0], [945.0, 32.0], [948.0, 913.0], [947.0, 30.0], [958.0, 2291.0], [957.0, 1785.0], [955.0, 2557.0], [954.0, 28.0], [953.0, 1746.0], [943.0, 2652.0], [929.0, 39.0], [928.0, 42.0], [931.0, 36.0], [930.0, 37.0], [935.0, 33.0], [933.0, 486.0], [942.0, 28.0], [941.0, 28.0], [940.0, 2563.0], [938.0, 924.0], [936.0, 929.0], [951.0, 470.0], [949.0, 917.0], [985.0, 25.0], [989.0, 29.0], [991.0, 427.5], [976.0, 874.0], [978.0, 848.0], [977.0, 23.0], [981.0, 26.0], [980.0, 28.0], [988.0, 831.0], [987.0, 25.0], [986.0, 28.0], [984.0, 24.0], [967.0, 24.5], [965.0, 26.5], [963.0, 896.0], [962.0, 2280.0], [961.0, 903.0], [960.0, 899.0], [974.0, 25.5], [972.0, 28.0], [971.0, 868.0], [970.0, 454.5], [968.0, 27.0], [983.0, 836.0], [982.0, 28.0], [1020.0, 361.0], [1014.0, 704.75], [1012.0, 30.0], [1011.0, 30.0], [1010.0, 2579.0], [1009.0, 893.0], [1008.0, 25.0], [1018.0, 556.6666666666667], [1017.0, 337.0], [1016.0, 1126.0], [999.0, 2591.0], [998.0, 2278.0], [997.0, 34.0], [996.0, 2558.0], [995.0, 1121.0], [992.0, 28.0], [1007.0, 1606.5], [1005.0, 26.0], [1003.0, 2193.0], [1002.0, 1516.5], [1000.0, 860.0], [1023.0, 28.0], [1022.0, 27.5], [1019.0, 809.0], [1015.0, 25.0], [1028.0, 2554.0], [1082.0, 1979.0], [1032.0, 1173.0], [1030.0, 27.0], [1026.0, 795.0], [1054.0, 768.0], [1052.0, 45.0], [1046.0, 2189.0], [1044.0, 2411.0], [1042.0, 1546.5], [1036.0, 956.0], [1034.0, 2433.0], [1072.0, 29.666666666666668], [1056.0, 2194.0], [1058.0, 94.0], [1062.0, 38.0], [1064.0, 32.0], [1070.0, 2015.0], [1066.0, 2510.0], [1086.0, 42.333333333333336], [1080.0, 1209.25], [1148.0, 31.0], [1150.0, 27.0], [1124.0, 26.0], [1128.0, 43.0], [1130.0, 30.0], [1132.0, 2249.0], [1134.0, 29.0], [1122.0, 338.5], [1120.0, 27.0], [1146.0, 33.0], [1144.0, 43.0], [1142.0, 1060.0], [1140.0, 24.0], [1138.0, 30.0], [1136.0, 37.0], [1102.0, 2190.0], [1100.0, 2290.0], [1098.0, 2197.5], [1096.0, 24.0], [1094.0, 2013.0], [1092.0, 26.0], [1090.0, 30.0], [1088.0, 28.0], [1118.0, 2401.0], [1116.0, 2399.0], [1114.0, 24.0], [1112.0, 1988.0], [1106.0, 29.5], [1104.0, 30.0], [1184.0, 2274.0], [1190.0, 2146.0], [1208.0, 2145.0], [1188.0, 2127.0], [1194.0, 2234.0], [1196.0, 1987.0], [1198.0, 1823.0], [1210.0, 471.0], [1206.0, 1314.5], [1200.0, 1595.0], [1152.0, 26.0], [1154.0, 2314.0], [1156.0, 1902.0], [1182.0, 2143.0], [1180.0, 2293.0], [1178.0, 2033.75], [1174.0, 2033.0], [1172.0, 2037.0], [1168.0, 2042.0], [1264.0, 1773.0], [1232.0, 2145.0], [1234.0, 1796.0], [1236.0, 1802.0], [1238.0, 976.0], [1240.0, 387.0], [1246.0, 386.0], [1224.0, 2099.0], [1266.0, 2103.0], [1268.0, 1592.0], [1270.0, 1448.0], [1278.0, 1988.5], [1248.0, 363.0], [1250.0, 1482.0], [1252.0, 376.0], [1254.0, 2123.0], [1256.0, 373.0], [1258.0, 2115.0], [1260.0, 1735.0], [1262.0, 2077.5], [1276.0, 2066.0], [1274.0, 325.0], [1272.0, 2001.0], [1284.0, 2067.0], [1342.0, 35.0], [1312.0, 1841.0], [1314.0, 123.0], [1336.0, 1245.0], [1310.0, 837.5], [1292.0, 1730.0], [1290.0, 1957.0], [1286.0, 1749.0], [1282.0, 1000.0], [1280.0, 1830.5], [1294.0, 983.5], [1308.0, 954.3000000000001], [1304.0, 1937.0], [1306.0, 1773.0], [1302.0, 1842.5], [1300.0, 887.75], [1298.0, 2048.0], [1296.0, 1417.75], [1326.0, 1809.25], [1324.0, 1896.25], [1316.0, 861.5833333333333], [1318.0, 1130.6666666666667], [1322.0, 1566.0], [1320.0, 1516.4], [1352.0, 66.0], [1380.0, 1112.0], [1392.0, 1174.235294117647], [1358.0, 1470.5], [1350.0, 1509.0], [1346.0, 31.0], [1344.0, 31.0], [1374.0, 1417.0], [1372.0, 1545.0], [1370.0, 1156.0], [1368.0, 1010.0], [1366.0, 58.0], [1364.0, 40.0], [1362.0, 1407.0], [1360.0, 1413.5], [1376.0, 1326.5], [1390.0, 1160.0], [1388.0, 1022.0], [1386.0, 30.0], [1382.0, 36.0], [1378.0, 1338.0], [1025.0, 1019.5], [1031.0, 24.0], [1029.0, 25.0], [1027.0, 32.0], [1055.0, 765.0], [1049.0, 27.5], [1047.0, 39.0], [1045.0, 29.0], [1043.0, 182.0], [1041.0, 1498.5], [1033.0, 1055.0], [1035.0, 757.0], [1037.0, 27.0], [1039.0, 1124.5], [1087.0, 2188.0], [1057.0, 41.0], [1059.0, 39.0], [1061.0, 38.0], [1063.0, 35.0], [1083.0, 53.0], [1081.0, 1697.875], [1143.0, 1929.0], [1139.0, 1931.0], [1123.0, 1244.0], [1127.0, 1588.3333333333333], [1129.0, 42.0], [1133.0, 2245.0], [1135.0, 28.0], [1151.0, 28.0], [1121.0, 26.0], [1145.0, 39.0], [1137.0, 1995.0], [1103.0, 32.0], [1101.0, 33.0], [1099.0, 2186.0], [1095.0, 2192.0], [1093.0, 2204.0], [1091.0, 28.0], [1089.0, 2210.0], [1119.0, 32.0], [1117.0, 2397.0], [1115.0, 28.0], [1113.0, 29.0], [1111.0, 1012.0], [1109.0, 2300.0], [1107.0, 37.0], [1207.0, 453.0], [1203.0, 1915.0], [1211.0, 436.0], [1187.0, 2077.0], [1185.0, 2025.0], [1189.0, 2022.0], [1193.0, 1990.0], [1195.0, 1990.0], [1197.0, 2112.0], [1199.0, 1984.0], [1209.0, 575.0], [1205.0, 1975.0], [1201.0, 2103.0], [1183.0, 2015.0], [1153.0, 30.5], [1155.0, 2090.0], [1159.0, 27.0], [1157.0, 28.0], [1163.0, 664.3333333333333], [1161.0, 1901.0], [1167.0, 2112.5], [1165.0, 2116.5], [1181.0, 2225.0], [1179.0, 2044.0], [1173.0, 2033.0], [1171.0, 2046.0], [1169.0, 2180.0], [1243.0, 402.0], [1275.0, 1490.0], [1233.0, 925.5], [1235.0, 1298.5], [1239.0, 403.0], [1245.0, 392.0], [1223.0, 1871.5], [1247.0, 1679.0], [1265.0, 2020.0], [1267.0, 1451.0], [1269.0, 1704.0], [1249.0, 1810.0], [1251.0, 1543.0], [1253.0, 2042.0], [1255.0, 2122.0], [1257.0, 1796.0], [1259.0, 1777.0], [1263.0, 1465.0], [1277.0, 1860.0], [1273.0, 1707.0], [1271.0, 2096.0], [1293.0, 1021.0], [1343.0, 32.0], [1313.0, 1537.0], [1315.0, 27.0], [1341.0, 36.75], [1335.0, 1318.5], [1333.0, 1702.5], [1311.0, 754.3333333333333], [1289.0, 1122.0], [1285.0, 1976.0], [1283.0, 313.5], [1331.0, 1649.0], [1295.0, 1757.25], [1309.0, 1191.1666666666667], [1307.0, 1831.25], [1305.0, 1896.0], [1303.0, 1594.5], [1301.0, 1748.0], [1299.0, 220.0], [1297.0, 1729.3333333333333], [1327.0, 1227.0], [1317.0, 903.0], [1323.0, 116.0], [1353.0, 1340.0], [1387.0, 573.5], [1357.0, 1387.5], [1355.0, 1177.0], [1351.0, 26.0], [1349.0, 866.0], [1347.0, 1208.0], [1345.0, 28.0], [1375.0, 1112.0], [1373.0, 1112.0], [1371.0, 1317.0], [1369.0, 31.0], [1367.0, 1527.0], [1365.0, 172.0], [1363.0, 1187.0], [1377.0, 1226.0], [1389.0, 1093.0], [1381.0, 212.0], [1379.0, 1252.0], [1.0, 1831.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}, {"data": [[734.5793333333336, 1828.369333333333]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1392.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15775.0, "minX": 1.7563524E12, "maxY": 21550.0, "series": [{"data": [[1.7563524E12, 21550.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7563524E12, 15775.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563524E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1828.369333333333, "minX": 1.7563524E12, "maxY": 1828.369333333333, "series": [{"data": [[1.7563524E12, 1828.369333333333]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563524E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1828.1986666666667, "minX": 1.7563524E12, "maxY": 1828.1986666666667, "series": [{"data": [[1.7563524E12, 1828.1986666666667]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563524E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1665.6913333333328, "minX": 1.7563524E12, "maxY": 1665.6913333333328, "series": [{"data": [[1.7563524E12, 1665.6913333333328]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563524E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.7563524E12, "maxY": 4242.0, "series": [{"data": [[1.7563524E12, 4242.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7563524E12, 3704.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7563524E12, 4192.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7563524E12, 3975.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7563524E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7563524E12, 1934.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563524E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 915.0, "minX": 57.0, "maxY": 3564.0, "series": [{"data": [[620.0, 1036.0], [381.0, 1555.0], [442.0, 3564.0], [57.0, 915.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 620.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 915.0, "minX": 57.0, "maxY": 3564.0, "series": [{"data": [[620.0, 1036.0], [381.0, 1555.0], [442.0, 3564.0], [57.0, 915.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 620.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.7563524E12, "maxY": 25.0, "series": [{"data": [[1.7563524E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563524E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.7563524E12, "maxY": 25.0, "series": [{"data": [[1.7563524E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563524E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.7563524E12, "maxY": 25.0, "series": [{"data": [[1.7563524E12, 25.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563524E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.7563524E12, "maxY": 25.0, "series": [{"data": [[1.7563524E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563524E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

