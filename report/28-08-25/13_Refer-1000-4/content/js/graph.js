/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 120.0, "minX": 0.0, "maxY": 8248.0, "series": [{"data": [[0.0, 120.0], [0.1, 128.0], [0.2, 128.0], [0.3, 128.0], [0.4, 129.0], [0.5, 131.0], [0.6, 133.0], [0.7, 134.0], [0.8, 134.0], [0.9, 140.0], [1.0, 141.0], [1.1, 143.0], [1.2, 144.0], [1.3, 145.0], [1.4, 145.0], [1.5, 149.0], [1.6, 150.0], [1.7, 152.0], [1.8, 154.0], [1.9, 159.0], [2.0, 159.0], [2.1, 160.0], [2.2, 172.0], [2.3, 172.0], [2.4, 173.0], [2.5, 173.0], [2.6, 177.0], [2.7, 181.0], [2.8, 182.0], [2.9, 182.0], [3.0, 185.0], [3.1, 188.0], [3.2, 190.0], [3.3, 199.0], [3.4, 205.0], [3.5, 208.0], [3.6, 209.0], [3.7, 215.0], [3.8, 218.0], [3.9, 219.0], [4.0, 231.0], [4.1, 231.0], [4.2, 236.0], [4.3, 239.0], [4.4, 242.0], [4.5, 255.0], [4.6, 262.0], [4.7, 278.0], [4.8, 290.0], [4.9, 299.0], [5.0, 306.0], [5.1, 311.0], [5.2, 319.0], [5.3, 320.0], [5.4, 394.0], [5.5, 423.0], [5.6, 425.0], [5.7, 428.0], [5.8, 475.0], [5.9, 614.0], [6.0, 629.0], [6.1, 663.0], [6.2, 666.0], [6.3, 677.0], [6.4, 714.0], [6.5, 715.0], [6.6, 800.0], [6.7, 852.0], [6.8, 859.0], [6.9, 859.0], [7.0, 860.0], [7.1, 877.0], [7.2, 880.0], [7.3, 882.0], [7.4, 897.0], [7.5, 898.0], [7.6, 898.0], [7.7, 913.0], [7.8, 913.0], [7.9, 924.0], [8.0, 924.0], [8.1, 929.0], [8.2, 934.0], [8.3, 946.0], [8.4, 954.0], [8.5, 960.0], [8.6, 970.0], [8.7, 990.0], [8.8, 1003.0], [8.9, 1029.0], [9.0, 1034.0], [9.1, 1042.0], [9.2, 1070.0], [9.3, 1116.0], [9.4, 1120.0], [9.5, 1125.0], [9.6, 1137.0], [9.7, 1150.0], [9.8, 1180.0], [9.9, 1180.0], [10.0, 1183.0], [10.1, 1187.0], [10.2, 1201.0], [10.3, 1202.0], [10.4, 1202.0], [10.5, 1207.0], [10.6, 1208.0], [10.7, 1211.0], [10.8, 1218.0], [10.9, 1225.0], [11.0, 1230.0], [11.1, 1241.0], [11.2, 1243.0], [11.3, 1257.0], [11.4, 1269.0], [11.5, 1271.0], [11.6, 1273.0], [11.7, 1276.0], [11.8, 1277.0], [11.9, 1285.0], [12.0, 1295.0], [12.1, 1300.0], [12.2, 1308.0], [12.3, 1311.0], [12.4, 1318.0], [12.5, 1323.0], [12.6, 1324.0], [12.7, 1331.0], [12.8, 1333.0], [12.9, 1335.0], [13.0, 1335.0], [13.1, 1337.0], [13.2, 1341.0], [13.3, 1343.0], [13.4, 1358.0], [13.5, 1361.0], [13.6, 1362.0], [13.7, 1370.0], [13.8, 1380.0], [13.9, 1387.0], [14.0, 1392.0], [14.1, 1411.0], [14.2, 1412.0], [14.3, 1417.0], [14.4, 1420.0], [14.5, 1433.0], [14.6, 1438.0], [14.7, 1444.0], [14.8, 1456.0], [14.9, 1466.0], [15.0, 1478.0], [15.1, 1490.0], [15.2, 1501.0], [15.3, 1505.0], [15.4, 1508.0], [15.5, 1515.0], [15.6, 1529.0], [15.7, 1530.0], [15.8, 1536.0], [15.9, 1552.0], [16.0, 1561.0], [16.1, 1577.0], [16.2, 1584.0], [16.3, 1589.0], [16.4, 1591.0], [16.5, 1594.0], [16.6, 1599.0], [16.7, 1599.0], [16.8, 1601.0], [16.9, 1604.0], [17.0, 1604.0], [17.1, 1607.0], [17.2, 1610.0], [17.3, 1616.0], [17.4, 1623.0], [17.5, 1624.0], [17.6, 1624.0], [17.7, 1625.0], [17.8, 1635.0], [17.9, 1636.0], [18.0, 1643.0], [18.1, 1647.0], [18.2, 1647.0], [18.3, 1648.0], [18.4, 1657.0], [18.5, 1658.0], [18.6, 1659.0], [18.7, 1662.0], [18.8, 1662.0], [18.9, 1663.0], [19.0, 1665.0], [19.1, 1665.0], [19.2, 1665.0], [19.3, 1675.0], [19.4, 1675.0], [19.5, 1685.0], [19.6, 1693.0], [19.7, 1699.0], [19.8, 1705.0], [19.9, 1716.0], [20.0, 1719.0], [20.1, 1722.0], [20.2, 1726.0], [20.3, 1741.0], [20.4, 1747.0], [20.5, 1749.0], [20.6, 1751.0], [20.7, 1751.0], [20.8, 1752.0], [20.9, 1755.0], [21.0, 1758.0], [21.1, 1769.0], [21.2, 1770.0], [21.3, 1782.0], [21.4, 1787.0], [21.5, 1787.0], [21.6, 1787.0], [21.7, 1795.0], [21.8, 1796.0], [21.9, 1824.0], [22.0, 1830.0], [22.1, 1834.0], [22.2, 1852.0], [22.3, 1859.0], [22.4, 1859.0], [22.5, 1861.0], [22.6, 1864.0], [22.7, 1871.0], [22.8, 1873.0], [22.9, 1875.0], [23.0, 1876.0], [23.1, 1880.0], [23.2, 1880.0], [23.3, 1884.0], [23.4, 1886.0], [23.5, 1887.0], [23.6, 1892.0], [23.7, 1892.0], [23.8, 1895.0], [23.9, 1900.0], [24.0, 1907.0], [24.1, 1923.0], [24.2, 1934.0], [24.3, 1935.0], [24.4, 1936.0], [24.5, 1939.0], [24.6, 1944.0], [24.7, 1944.0], [24.8, 1947.0], [24.9, 1949.0], [25.0, 1951.0], [25.1, 1951.0], [25.2, 1953.0], [25.3, 1960.0], [25.4, 1978.0], [25.5, 1983.0], [25.6, 1985.0], [25.7, 1989.0], [25.8, 1990.0], [25.9, 2011.0], [26.0, 2015.0], [26.1, 2042.0], [26.2, 2042.0], [26.3, 2043.0], [26.4, 2046.0], [26.5, 2051.0], [26.6, 2067.0], [26.7, 2070.0], [26.8, 2072.0], [26.9, 2088.0], [27.0, 2089.0], [27.1, 2089.0], [27.2, 2090.0], [27.3, 2095.0], [27.4, 2097.0], [27.5, 2100.0], [27.6, 2101.0], [27.7, 2109.0], [27.8, 2113.0], [27.9, 2121.0], [28.0, 2125.0], [28.1, 2133.0], [28.2, 2134.0], [28.3, 2144.0], [28.4, 2144.0], [28.5, 2147.0], [28.6, 2159.0], [28.7, 2163.0], [28.8, 2165.0], [28.9, 2166.0], [29.0, 2167.0], [29.1, 2169.0], [29.2, 2184.0], [29.3, 2185.0], [29.4, 2185.0], [29.5, 2187.0], [29.6, 2191.0], [29.7, 2195.0], [29.8, 2196.0], [29.9, 2205.0], [30.0, 2215.0], [30.1, 2215.0], [30.2, 2215.0], [30.3, 2215.0], [30.4, 2216.0], [30.5, 2227.0], [30.6, 2231.0], [30.7, 2233.0], [30.8, 2237.0], [30.9, 2247.0], [31.0, 2249.0], [31.1, 2250.0], [31.2, 2252.0], [31.3, 2254.0], [31.4, 2272.0], [31.5, 2274.0], [31.6, 2283.0], [31.7, 2287.0], [31.8, 2291.0], [31.9, 2295.0], [32.0, 2306.0], [32.1, 2306.0], [32.2, 2319.0], [32.3, 2323.0], [32.4, 2328.0], [32.5, 2332.0], [32.6, 2333.0], [32.7, 2334.0], [32.8, 2337.0], [32.9, 2341.0], [33.0, 2341.0], [33.1, 2342.0], [33.2, 2344.0], [33.3, 2345.0], [33.4, 2353.0], [33.5, 2360.0], [33.6, 2360.0], [33.7, 2362.0], [33.8, 2365.0], [33.9, 2378.0], [34.0, 2392.0], [34.1, 2430.0], [34.2, 2436.0], [34.3, 2445.0], [34.4, 2448.0], [34.5, 2448.0], [34.6, 2450.0], [34.7, 2452.0], [34.8, 2455.0], [34.9, 2455.0], [35.0, 2461.0], [35.1, 2461.0], [35.2, 2474.0], [35.3, 2474.0], [35.4, 2491.0], [35.5, 2499.0], [35.6, 2508.0], [35.7, 2524.0], [35.8, 2533.0], [35.9, 2537.0], [36.0, 2539.0], [36.1, 2546.0], [36.2, 2548.0], [36.3, 2548.0], [36.4, 2548.0], [36.5, 2554.0], [36.6, 2557.0], [36.7, 2565.0], [36.8, 2567.0], [36.9, 2576.0], [37.0, 2578.0], [37.1, 2578.0], [37.2, 2582.0], [37.3, 2582.0], [37.4, 2583.0], [37.5, 2589.0], [37.6, 2591.0], [37.7, 2596.0], [37.8, 2597.0], [37.9, 2598.0], [38.0, 2602.0], [38.1, 2605.0], [38.2, 2621.0], [38.3, 2622.0], [38.4, 2622.0], [38.5, 2623.0], [38.6, 2631.0], [38.7, 2632.0], [38.8, 2636.0], [38.9, 2639.0], [39.0, 2643.0], [39.1, 2648.0], [39.2, 2649.0], [39.3, 2654.0], [39.4, 2656.0], [39.5, 2657.0], [39.6, 2662.0], [39.7, 2673.0], [39.8, 2676.0], [39.9, 2681.0], [40.0, 2692.0], [40.1, 2704.0], [40.2, 2705.0], [40.3, 2743.0], [40.4, 2746.0], [40.5, 2757.0], [40.6, 2758.0], [40.7, 2758.0], [40.8, 2765.0], [40.9, 2771.0], [41.0, 2782.0], [41.1, 2783.0], [41.2, 2785.0], [41.3, 2787.0], [41.4, 2787.0], [41.5, 2797.0], [41.6, 2797.0], [41.7, 2813.0], [41.8, 2815.0], [41.9, 2823.0], [42.0, 2823.0], [42.1, 2824.0], [42.2, 2826.0], [42.3, 2829.0], [42.4, 2849.0], [42.5, 2863.0], [42.6, 2863.0], [42.7, 2871.0], [42.8, 2875.0], [42.9, 2875.0], [43.0, 2880.0], [43.1, 2882.0], [43.2, 2882.0], [43.3, 2886.0], [43.4, 2889.0], [43.5, 2890.0], [43.6, 2897.0], [43.7, 2899.0], [43.8, 2919.0], [43.9, 2931.0], [44.0, 2932.0], [44.1, 2951.0], [44.2, 2951.0], [44.3, 2963.0], [44.4, 2970.0], [44.5, 2972.0], [44.6, 2973.0], [44.7, 2974.0], [44.8, 3005.0], [44.9, 3007.0], [45.0, 3008.0], [45.1, 3008.0], [45.2, 3009.0], [45.3, 3027.0], [45.4, 3036.0], [45.5, 3041.0], [45.6, 3041.0], [45.7, 3069.0], [45.8, 3072.0], [45.9, 3073.0], [46.0, 3082.0], [46.1, 3083.0], [46.2, 3085.0], [46.3, 3089.0], [46.4, 3094.0], [46.5, 3098.0], [46.6, 3107.0], [46.7, 3134.0], [46.8, 3135.0], [46.9, 3137.0], [47.0, 3141.0], [47.1, 3143.0], [47.2, 3145.0], [47.3, 3153.0], [47.4, 3157.0], [47.5, 3157.0], [47.6, 3162.0], [47.7, 3166.0], [47.8, 3170.0], [47.9, 3172.0], [48.0, 3178.0], [48.1, 3181.0], [48.2, 3186.0], [48.3, 3190.0], [48.4, 3200.0], [48.5, 3203.0], [48.6, 3212.0], [48.7, 3215.0], [48.8, 3215.0], [48.9, 3217.0], [49.0, 3217.0], [49.1, 3218.0], [49.2, 3227.0], [49.3, 3232.0], [49.4, 3237.0], [49.5, 3243.0], [49.6, 3245.0], [49.7, 3245.0], [49.8, 3253.0], [49.9, 3259.0], [50.0, 3267.0], [50.1, 3271.0], [50.2, 3276.0], [50.3, 3277.0], [50.4, 3284.0], [50.5, 3284.0], [50.6, 3284.0], [50.7, 3287.0], [50.8, 3293.0], [50.9, 3300.0], [51.0, 3304.0], [51.1, 3309.0], [51.2, 3315.0], [51.3, 3317.0], [51.4, 3322.0], [51.5, 3330.0], [51.6, 3334.0], [51.7, 3338.0], [51.8, 3341.0], [51.9, 3357.0], [52.0, 3358.0], [52.1, 3359.0], [52.2, 3365.0], [52.3, 3381.0], [52.4, 3387.0], [52.5, 3395.0], [52.6, 3401.0], [52.7, 3401.0], [52.8, 3402.0], [52.9, 3409.0], [53.0, 3413.0], [53.1, 3417.0], [53.2, 3419.0], [53.3, 3424.0], [53.4, 3425.0], [53.5, 3426.0], [53.6, 3439.0], [53.7, 3440.0], [53.8, 3444.0], [53.9, 3452.0], [54.0, 3454.0], [54.1, 3462.0], [54.2, 3465.0], [54.3, 3466.0], [54.4, 3469.0], [54.5, 3474.0], [54.6, 3502.0], [54.7, 3511.0], [54.8, 3523.0], [54.9, 3526.0], [55.0, 3534.0], [55.1, 3535.0], [55.2, 3536.0], [55.3, 3543.0], [55.4, 3547.0], [55.5, 3565.0], [55.6, 3566.0], [55.7, 3576.0], [55.8, 3577.0], [55.9, 3581.0], [56.0, 3590.0], [56.1, 3592.0], [56.2, 3603.0], [56.3, 3605.0], [56.4, 3614.0], [56.5, 3620.0], [56.6, 3621.0], [56.7, 3625.0], [56.8, 3627.0], [56.9, 3635.0], [57.0, 3637.0], [57.1, 3645.0], [57.2, 3649.0], [57.3, 3650.0], [57.4, 3652.0], [57.5, 3654.0], [57.6, 3670.0], [57.7, 3674.0], [57.8, 3675.0], [57.9, 3675.0], [58.0, 3679.0], [58.1, 3679.0], [58.2, 3679.0], [58.3, 3684.0], [58.4, 3691.0], [58.5, 3691.0], [58.6, 3691.0], [58.7, 3697.0], [58.8, 3702.0], [58.9, 3713.0], [59.0, 3721.0], [59.1, 3722.0], [59.2, 3733.0], [59.3, 3745.0], [59.4, 3752.0], [59.5, 3754.0], [59.6, 3755.0], [59.7, 3757.0], [59.8, 3760.0], [59.9, 3762.0], [60.0, 3768.0], [60.1, 3771.0], [60.2, 3787.0], [60.3, 3790.0], [60.4, 3793.0], [60.5, 3797.0], [60.6, 3806.0], [60.7, 3809.0], [60.8, 3810.0], [60.9, 3813.0], [61.0, 3818.0], [61.1, 3819.0], [61.2, 3829.0], [61.3, 3844.0], [61.4, 3849.0], [61.5, 3852.0], [61.6, 3862.0], [61.7, 3881.0], [61.8, 3892.0], [61.9, 3893.0], [62.0, 3896.0], [62.1, 3902.0], [62.2, 3903.0], [62.3, 3904.0], [62.4, 3915.0], [62.5, 3919.0], [62.6, 3922.0], [62.7, 3924.0], [62.8, 3930.0], [62.9, 3930.0], [63.0, 3931.0], [63.1, 3950.0], [63.2, 3956.0], [63.3, 3959.0], [63.4, 3963.0], [63.5, 3965.0], [63.6, 3971.0], [63.7, 3973.0], [63.8, 3975.0], [63.9, 3979.0], [64.0, 3981.0], [64.1, 3989.0], [64.2, 4009.0], [64.3, 4011.0], [64.4, 4013.0], [64.5, 4016.0], [64.6, 4021.0], [64.7, 4029.0], [64.8, 4034.0], [64.9, 4034.0], [65.0, 4034.0], [65.1, 4046.0], [65.2, 4052.0], [65.3, 4070.0], [65.4, 4099.0], [65.5, 4099.0], [65.6, 4106.0], [65.7, 4108.0], [65.8, 4109.0], [65.9, 4115.0], [66.0, 4118.0], [66.1, 4123.0], [66.2, 4133.0], [66.3, 4136.0], [66.4, 4142.0], [66.5, 4145.0], [66.6, 4146.0], [66.7, 4147.0], [66.8, 4149.0], [66.9, 4158.0], [67.0, 4163.0], [67.1, 4169.0], [67.2, 4170.0], [67.3, 4175.0], [67.4, 4193.0], [67.5, 4195.0], [67.6, 4198.0], [67.7, 4202.0], [67.8, 4203.0], [67.9, 4205.0], [68.0, 4219.0], [68.1, 4222.0], [68.2, 4225.0], [68.3, 4227.0], [68.4, 4231.0], [68.5, 4241.0], [68.6, 4247.0], [68.7, 4266.0], [68.8, 4296.0], [68.9, 4305.0], [69.0, 4308.0], [69.1, 4316.0], [69.2, 4327.0], [69.3, 4328.0], [69.4, 4328.0], [69.5, 4330.0], [69.6, 4331.0], [69.7, 4336.0], [69.8, 4342.0], [69.9, 4343.0], [70.0, 4365.0], [70.1, 4366.0], [70.2, 4369.0], [70.3, 4374.0], [70.4, 4386.0], [70.5, 4391.0], [70.6, 4395.0], [70.7, 4408.0], [70.8, 4412.0], [70.9, 4414.0], [71.0, 4416.0], [71.1, 4433.0], [71.2, 4436.0], [71.3, 4437.0], [71.4, 4442.0], [71.5, 4445.0], [71.6, 4449.0], [71.7, 4455.0], [71.8, 4460.0], [71.9, 4469.0], [72.0, 4474.0], [72.1, 4484.0], [72.2, 4486.0], [72.3, 4486.0], [72.4, 4489.0], [72.5, 4491.0], [72.6, 4509.0], [72.7, 4510.0], [72.8, 4511.0], [72.9, 4512.0], [73.0, 4512.0], [73.1, 4512.0], [73.2, 4515.0], [73.3, 4536.0], [73.4, 4541.0], [73.5, 4550.0], [73.6, 4554.0], [73.7, 4568.0], [73.8, 4582.0], [73.9, 4586.0], [74.0, 4587.0], [74.1, 4592.0], [74.2, 4595.0], [74.3, 4611.0], [74.4, 4623.0], [74.5, 4655.0], [74.6, 4655.0], [74.7, 4664.0], [74.8, 4664.0], [74.9, 4688.0], [75.0, 4693.0], [75.1, 4697.0], [75.2, 4699.0], [75.3, 4706.0], [75.4, 4712.0], [75.5, 4722.0], [75.6, 4724.0], [75.7, 4742.0], [75.8, 4743.0], [75.9, 4743.0], [76.0, 4751.0], [76.1, 4772.0], [76.2, 4777.0], [76.3, 4783.0], [76.4, 4787.0], [76.5, 4788.0], [76.6, 4795.0], [76.7, 4798.0], [76.8, 4800.0], [76.9, 4802.0], [77.0, 4802.0], [77.1, 4808.0], [77.2, 4809.0], [77.3, 4813.0], [77.4, 4817.0], [77.5, 4820.0], [77.6, 4832.0], [77.7, 4838.0], [77.8, 4841.0], [77.9, 4842.0], [78.0, 4848.0], [78.1, 4860.0], [78.2, 4881.0], [78.3, 4885.0], [78.4, 4892.0], [78.5, 4895.0], [78.6, 4916.0], [78.7, 4934.0], [78.8, 4944.0], [78.9, 4946.0], [79.0, 4952.0], [79.1, 4953.0], [79.2, 4977.0], [79.3, 4977.0], [79.4, 4980.0], [79.5, 4987.0], [79.6, 4996.0], [79.7, 4997.0], [79.8, 4998.0], [79.9, 4999.0], [80.0, 5033.0], [80.1, 5038.0], [80.2, 5042.0], [80.3, 5056.0], [80.4, 5079.0], [80.5, 5084.0], [80.6, 5088.0], [80.7, 5089.0], [80.8, 5090.0], [80.9, 5098.0], [81.0, 5135.0], [81.1, 5147.0], [81.2, 5148.0], [81.3, 5148.0], [81.4, 5149.0], [81.5, 5162.0], [81.6, 5163.0], [81.7, 5164.0], [81.8, 5166.0], [81.9, 5168.0], [82.0, 5174.0], [82.1, 5176.0], [82.2, 5177.0], [82.3, 5185.0], [82.4, 5188.0], [82.5, 5191.0], [82.6, 5204.0], [82.7, 5204.0], [82.8, 5205.0], [82.9, 5209.0], [83.0, 5222.0], [83.1, 5226.0], [83.2, 5231.0], [83.3, 5233.0], [83.4, 5239.0], [83.5, 5249.0], [83.6, 5258.0], [83.7, 5268.0], [83.8, 5274.0], [83.9, 5278.0], [84.0, 5293.0], [84.1, 5316.0], [84.2, 5327.0], [84.3, 5330.0], [84.4, 5331.0], [84.5, 5333.0], [84.6, 5348.0], [84.7, 5361.0], [84.8, 5369.0], [84.9, 5371.0], [85.0, 5381.0], [85.1, 5383.0], [85.2, 5383.0], [85.3, 5387.0], [85.4, 5390.0], [85.5, 5393.0], [85.6, 5393.0], [85.7, 5420.0], [85.8, 5420.0], [85.9, 5424.0], [86.0, 5429.0], [86.1, 5430.0], [86.2, 5436.0], [86.3, 5444.0], [86.4, 5455.0], [86.5, 5470.0], [86.6, 5485.0], [86.7, 5487.0], [86.8, 5487.0], [86.9, 5492.0], [87.0, 5496.0], [87.1, 5500.0], [87.2, 5501.0], [87.3, 5529.0], [87.4, 5560.0], [87.5, 5565.0], [87.6, 5567.0], [87.7, 5567.0], [87.8, 5574.0], [87.9, 5577.0], [88.0, 5579.0], [88.1, 5581.0], [88.2, 5582.0], [88.3, 5617.0], [88.4, 5619.0], [88.5, 5649.0], [88.6, 5671.0], [88.7, 5688.0], [88.8, 5706.0], [88.9, 5711.0], [89.0, 5727.0], [89.1, 5753.0], [89.2, 5753.0], [89.3, 5773.0], [89.4, 5780.0], [89.5, 5785.0], [89.6, 5801.0], [89.7, 5814.0], [89.8, 5827.0], [89.9, 5827.0], [90.0, 5841.0], [90.1, 5848.0], [90.2, 5849.0], [90.3, 5865.0], [90.4, 5870.0], [90.5, 5872.0], [90.6, 5876.0], [90.7, 5880.0], [90.8, 5903.0], [90.9, 5906.0], [91.0, 5932.0], [91.1, 5942.0], [91.2, 5951.0], [91.3, 5953.0], [91.4, 5988.0], [91.5, 5988.0], [91.6, 5996.0], [91.7, 6006.0], [91.8, 6008.0], [91.9, 6029.0], [92.0, 6060.0], [92.1, 6077.0], [92.2, 6081.0], [92.3, 6096.0], [92.4, 6099.0], [92.5, 6170.0], [92.6, 6205.0], [92.7, 6214.0], [92.8, 6226.0], [92.9, 6226.0], [93.0, 6240.0], [93.1, 6255.0], [93.2, 6260.0], [93.3, 6262.0], [93.4, 6275.0], [93.5, 6276.0], [93.6, 6290.0], [93.7, 6301.0], [93.8, 6317.0], [93.9, 6356.0], [94.0, 6385.0], [94.1, 6413.0], [94.2, 6426.0], [94.3, 6469.0], [94.4, 6471.0], [94.5, 6471.0], [94.6, 6484.0], [94.7, 6521.0], [94.8, 6530.0], [94.9, 6541.0], [95.0, 6541.0], [95.1, 6552.0], [95.2, 6571.0], [95.3, 6616.0], [95.4, 6631.0], [95.5, 6638.0], [95.6, 6663.0], [95.7, 6674.0], [95.8, 6680.0], [95.9, 6732.0], [96.0, 6756.0], [96.1, 6786.0], [96.2, 6788.0], [96.3, 6818.0], [96.4, 6831.0], [96.5, 6837.0], [96.6, 6841.0], [96.7, 6874.0], [96.8, 6890.0], [96.9, 6906.0], [97.0, 6908.0], [97.1, 6913.0], [97.2, 6923.0], [97.3, 7035.0], [97.4, 7093.0], [97.5, 7135.0], [97.6, 7166.0], [97.7, 7176.0], [97.8, 7184.0], [97.9, 7202.0], [98.0, 7234.0], [98.1, 7260.0], [98.2, 7332.0], [98.3, 7359.0], [98.4, 7434.0], [98.5, 7442.0], [98.6, 7479.0], [98.7, 7488.0], [98.8, 7512.0], [98.9, 7515.0], [99.0, 7517.0], [99.1, 7549.0], [99.2, 7655.0], [99.3, 7666.0], [99.4, 7675.0], [99.5, 7699.0], [99.6, 7796.0], [99.7, 7821.0], [99.8, 8011.0], [99.9, 8248.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 33.0, "series": [{"data": [[600.0, 5.0], [700.0, 2.0], [800.0, 11.0], [900.0, 11.0], [1000.0, 5.0], [1100.0, 9.0], [1200.0, 19.0], [1300.0, 20.0], [1400.0, 11.0], [1500.0, 16.0], [1600.0, 30.0], [1700.0, 20.0], [1800.0, 20.0], [1900.0, 20.0], [2000.0, 16.0], [2100.0, 24.0], [2200.0, 21.0], [2300.0, 21.0], [2400.0, 15.0], [2500.0, 24.0], [2600.0, 21.0], [2700.0, 16.0], [2800.0, 21.0], [2900.0, 10.0], [3000.0, 18.0], [3100.0, 18.0], [3200.0, 25.0], [3300.0, 17.0], [3400.0, 20.0], [3500.0, 16.0], [3600.0, 26.0], [3700.0, 18.0], [3800.0, 15.0], [3900.0, 21.0], [4000.0, 14.0], [4100.0, 21.0], [4200.0, 12.0], [4300.0, 18.0], [4400.0, 19.0], [4500.0, 17.0], [4600.0, 11.0], [4700.0, 15.0], [4800.0, 18.0], [4900.0, 14.0], [5100.0, 16.0], [5000.0, 10.0], [5200.0, 15.0], [5300.0, 16.0], [5500.0, 12.0], [5400.0, 14.0], [5600.0, 5.0], [5700.0, 8.0], [5800.0, 12.0], [5900.0, 9.0], [6000.0, 8.0], [6100.0, 1.0], [6200.0, 11.0], [6300.0, 4.0], [6400.0, 6.0], [6500.0, 6.0], [6600.0, 6.0], [6800.0, 6.0], [6900.0, 4.0], [6700.0, 4.0], [7100.0, 4.0], [7000.0, 2.0], [7400.0, 4.0], [7200.0, 3.0], [7300.0, 2.0], [7500.0, 4.0], [7600.0, 4.0], [7700.0, 1.0], [7800.0, 1.0], [8000.0, 1.0], [8200.0, 1.0], [100.0, 33.0], [200.0, 17.0], [300.0, 5.0], [400.0, 4.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 59.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 848.0, "series": [{"data": [[0.0, 59.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 93.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 848.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.06100000000134, "minX": 1.7563665E12, "maxY": 501.06100000000134, "series": [{"data": [[1.7563665E12, 501.06100000000134]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563665E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.0, "maxY": 8248.0, "series": [{"data": [[2.0, 7479.0], [3.0, 8011.0], [4.0, 6923.0], [6.0, 7670.5], [7.0, 7434.0], [9.0, 7280.5], [10.0, 7488.0], [11.0, 7549.0], [12.0, 7517.0], [13.0, 7699.0], [14.0, 7821.0], [15.0, 7796.0], [16.0, 7093.0], [17.0, 7655.0], [18.0, 6890.0], [19.0, 7166.0], [20.0, 6788.0], [21.0, 7332.0], [23.0, 7039.0], [24.0, 7234.0], [25.0, 7512.0], [26.0, 7515.0], [27.0, 7176.0], [28.0, 5579.0], [29.0, 6680.0], [30.0, 7035.0], [31.0, 7442.0], [33.0, 5567.0], [32.0, 6786.0], [35.0, 6841.0], [34.0, 6571.0], [37.0, 6906.0], [36.0, 6471.0], [39.0, 6606.5], [41.0, 6815.0], [42.0, 6908.0], [45.0, 6616.0], [44.0, 6809.5], [47.0, 6837.0], [46.0, 6638.0], [50.0, 6534.333333333333], [53.0, 6301.0], [52.0, 6607.5], [55.0, 6381.0], [56.0, 4997.0], [59.0, 6077.0], [58.0, 6179.0], [61.0, 6831.0], [60.0, 6471.0], [62.0, 6552.0], [67.0, 6438.5], [65.0, 5716.333333333333], [71.0, 6214.0], [70.0, 6266.0], [75.0, 5827.0], [74.0, 6530.0], [73.0, 6060.0], [72.0, 6008.0], [78.0, 6260.0], [77.0, 4742.0], [76.0, 6663.0], [83.0, 5906.0], [82.0, 4697.0], [81.0, 5444.0], [80.0, 6247.0], [87.0, 6355.5], [85.0, 6205.0], [84.0, 4820.0], [90.0, 5870.0], [89.0, 5827.0], [88.0, 4611.0], [92.0, 5587.5], [99.0, 6290.0], [98.0, 4460.0], [97.0, 6385.0], [96.0, 5980.5], [103.0, 6006.0], [102.0, 5951.0], [101.0, 5088.0], [100.0, 5953.0], [107.0, 5841.0], [106.0, 5129.0], [104.0, 6275.0], [111.0, 5693.5], [109.0, 6226.0], [108.0, 5865.0], [113.0, 4331.0], [112.0, 5903.0], [119.0, 5420.0], [118.0, 5327.0], [117.0, 5709.666666666667], [116.0, 5560.0], [122.0, 5773.0], [121.0, 5383.0], [120.0, 5801.0], [127.0, 5753.0], [126.0, 4455.0], [125.0, 4227.0], [124.0, 5637.5], [135.0, 5740.0], [134.0, 5671.0], [132.0, 5249.0], [131.0, 5715.0], [129.0, 5785.0], [128.0, 5565.0], [143.0, 4910.333333333333], [140.0, 5581.0], [139.0, 5467.0], [136.0, 5500.0], [150.0, 5239.0], [149.0, 5529.0], [148.0, 5162.0], [146.0, 5078.0], [156.0, 5876.0], [155.0, 5258.0], [154.0, 5162.0], [153.0, 5168.0], [152.0, 5422.0], [166.0, 5202.0], [164.0, 5880.0], [163.0, 5428.0], [161.0, 5515.4], [175.0, 5393.0], [174.0, 5148.0], [173.0, 5420.0], [171.0, 5655.0], [170.0, 5429.0], [168.0, 5216.0], [183.0, 3801.0], [181.0, 4486.0], [180.0, 4783.0], [179.0, 5316.0], [178.0, 5398.0], [176.0, 4980.0], [190.0, 5274.0], [189.0, 5261.666666666667], [186.0, 3787.0], [185.0, 5353.5], [198.0, 5167.5], [196.0, 5191.0], [195.0, 5169.0], [193.0, 5393.0], [192.0, 5255.5], [207.0, 5293.0], [206.0, 4278.5], [204.0, 5135.0], [203.0, 5207.4], [215.0, 4021.0], [214.0, 4424.0], [212.0, 5056.0], [211.0, 5079.0], [210.0, 4698.0], [209.0, 5183.0], [223.0, 5176.0], [222.0, 5188.5], [220.0, 5387.0], [219.0, 4777.0], [218.0, 5146.5], [216.0, 5226.0], [231.0, 4897.0], [229.0, 5149.0], [228.0, 5093.0], [226.0, 4767.5], [224.0, 4881.0], [237.0, 4955.333333333333], [234.0, 4104.0], [232.0, 4489.0], [246.0, 5197.0], [244.0, 4815.0], [242.0, 4595.0], [241.0, 3635.0], [240.0, 4313.0], [253.0, 4772.0], [252.0, 4817.0], [251.0, 4798.0], [250.0, 5101.5], [248.0, 4632.0], [259.0, 4655.0], [270.0, 4406.5], [271.0, 4655.0], [268.0, 4554.0], [258.0, 5185.0], [257.0, 4944.0], [256.0, 4748.333333333333], [267.0, 3705.0], [264.0, 4688.0], [263.0, 4699.0], [262.0, 4841.0], [261.0, 4365.0], [260.0, 4743.0], [284.0, 4541.5], [282.0, 4508.25], [278.0, 4722.0], [277.0, 3232.0], [276.0, 4069.5], [274.0, 4550.0], [273.0, 4060.5], [299.0, 4718.0], [297.0, 4515.0], [296.0, 4445.0], [295.0, 4034.0], [294.0, 3760.0], [293.0, 4574.4], [288.0, 4353.75], [317.0, 4795.0], [318.0, 4366.0], [316.0, 4541.0], [315.0, 4737.5], [313.0, 4218.666666666667], [310.0, 4693.0], [308.0, 4798.0], [306.0, 4016.0], [305.0, 4413.833333333333], [333.0, 4193.0], [332.0, 3790.0], [331.0, 4305.0], [330.0, 4437.0], [329.0, 4195.0], [328.0, 4057.6666666666665], [325.0, 4412.0], [324.0, 4312.0], [322.0, 4487.25], [348.0, 4312.0], [351.0, 3395.0], [350.0, 3829.0], [349.0, 4142.0], [345.0, 4342.666666666667], [342.0, 4336.0], [341.0, 4343.0], [340.0, 3745.0], [339.0, 4279.666666666667], [336.0, 4328.333333333333], [367.0, 4052.0], [363.0, 4123.0], [362.0, 4118.5], [360.0, 3883.0], [357.0, 4202.0], [356.0, 3971.0], [355.0, 4099.0], [354.0, 3897.0], [352.0, 4433.0], [381.0, 4133.0], [382.0, 4241.0], [380.0, 4109.0], [379.0, 4149.0], [378.0, 3654.0], [377.0, 4330.0], [376.0, 4342.0], [375.0, 3793.6], [369.0, 3855.5], [370.0, 3750.75], [399.0, 3818.0], [398.0, 3991.0], [395.0, 4013.0], [394.0, 3909.3333333333335], [391.0, 4029.0], [390.0, 4042.0], [388.0, 4034.0], [387.0, 3605.0], [386.0, 3771.75], [413.0, 3276.0], [412.0, 3848.6666666666665], [409.0, 3419.0], [408.0, 3946.5], [406.0, 3965.0], [405.0, 3956.0], [404.0, 4170.0], [403.0, 3958.0], [401.0, 3852.0], [424.0, 3465.0], [428.0, 3675.0], [427.0, 4099.0], [426.0, 3300.0], [425.0, 3491.5], [422.0, 3601.5], [420.0, 4108.0], [419.0, 3609.0], [417.0, 3860.5], [444.0, 3691.0], [446.0, 3534.0], [447.0, 3603.0], [445.0, 3973.0], [443.0, 3468.0], [440.0, 3713.0], [439.0, 3733.0], [433.0, 3963.0], [432.0, 3260.75], [435.0, 3217.0], [434.0, 3768.0], [438.0, 3217.0], [437.0, 3727.5], [462.0, 3481.5], [460.0, 3627.0], [450.0, 3919.0], [449.0, 2813.0], [448.0, 3137.0], [459.0, 3810.0], [458.0, 3649.0], [457.0, 3675.0], [456.0, 3773.0], [454.0, 3637.0], [453.0, 3702.0], [452.0, 3500.5], [478.0, 3721.0], [479.0, 3679.0], [477.0, 3357.0], [476.0, 3358.0], [475.0, 3426.0], [474.0, 3523.0], [473.0, 3401.0], [472.0, 3223.5], [471.0, 3844.0], [467.0, 3542.0], [464.0, 3539.5], [470.0, 3565.0], [468.0, 3620.0], [492.0, 3472.5], [490.0, 2829.0], [489.0, 3466.0], [488.0, 3469.0], [487.0, 1796.0], [486.0, 3363.5], [484.0, 2960.5], [482.0, 2972.5], [480.0, 3317.0], [509.0, 3237.0], [511.0, 3120.0], [508.0, 3162.0], [499.0, 2875.0], [498.0, 3284.0], [497.0, 3401.0], [496.0, 3296.25], [507.0, 3581.0], [506.0, 2638.5], [504.0, 3186.0], [503.0, 3390.5], [501.0, 3267.0], [500.0, 3212.0], [529.0, 3069.0], [543.0, 3444.0], [542.0, 2464.5], [540.0, 3311.2], [519.0, 3145.0], [518.0, 3522.5], [516.0, 3322.2], [535.0, 3147.0], [533.0, 3279.5], [531.0, 2818.5], [528.0, 3526.0], [527.0, 3107.0], [526.0, 3293.0], [525.0, 3150.0], [524.0, 3276.0], [521.0, 3134.0], [520.0, 3172.0], [574.0, 1324.0], [575.0, 3009.0], [561.0, 3036.0], [560.0, 3082.0], [573.0, 3008.0], [572.0, 3088.6666666666665], [569.0, 3094.0], [568.0, 3007.0], [559.0, 3098.0], [548.0, 2824.0], [546.0, 3145.0], [558.0, 3041.0], [557.0, 3284.0], [556.0, 2932.0], [555.0, 2951.0], [554.0, 2334.0], [553.0, 3341.0], [552.0, 2933.0], [567.0, 2344.3333333333335], [564.0, 2863.0], [563.0, 2931.0], [562.0, 2654.0], [603.0, 2655.5], [596.0, 2837.5], [606.0, 2632.0], [607.0, 2785.0], [593.0, 2881.0], [605.0, 2832.6666666666665], [600.0, 2673.0], [581.0, 2824.0], [580.0, 3181.0], [579.0, 2771.0], [578.0, 3200.0], [577.0, 3178.0], [576.0, 3245.0], [590.0, 3083.0], [589.0, 2889.0], [588.0, 2927.5], [586.0, 3141.0], [585.0, 1269.0], [584.0, 2861.0], [599.0, 2765.0], [598.0, 1180.0], [597.0, 2881.0], [638.0, 2365.0], [639.0, 2491.0], [628.0, 2578.0], [627.0, 2653.0], [637.0, 2598.0], [636.0, 1741.0], [635.0, 2636.0], [634.0, 2539.0], [633.0, 2690.0], [613.0, 2583.0], [612.0, 3005.0], [611.0, 2651.25], [623.0, 1864.0], [622.0, 2455.0], [621.0, 2758.0], [620.0, 2346.6666666666665], [617.0, 2562.75], [631.0, 1859.0], [630.0, 2838.5], [664.0, 2455.0], [669.0, 1202.0], [670.0, 1944.0], [656.0, 2341.0], [668.0, 2415.0], [666.0, 1201.0], [665.0, 2591.0], [655.0, 2499.0], [641.0, 2709.5], [643.0, 2743.0], [642.0, 2333.0], [645.0, 2051.0], [644.0, 1635.0], [647.0, 2341.0], [646.0, 2582.0], [654.0, 2662.0], [652.0, 2551.0], [650.0, 852.0], [649.0, 2448.0], [648.0, 2011.0], [663.0, 2269.0], [661.0, 2543.5], [659.0, 2327.0], [657.0, 2692.0], [696.0, 2269.5], [690.0, 859.0], [701.0, 2233.0], [700.0, 2110.6666666666665], [697.0, 1895.0], [687.0, 913.0], [672.0, 1795.0], [675.0, 2200.0], [673.0, 2461.0], [677.0, 2185.0], [676.0, 2215.0], [679.0, 1034.0], [678.0, 2597.0], [686.0, 2353.0], [685.0, 1684.5], [683.0, 2388.0], [681.0, 2441.5], [694.0, 2246.0], [693.0, 859.0], [691.0, 1399.5], [688.0, 2436.0], [733.0, 2533.0], [735.0, 2274.0], [721.0, 1501.0], [720.0, 663.0], [723.0, 666.0], [722.0, 2578.0], [732.0, 2589.0], [731.0, 2134.0], [730.0, 2227.0], [729.0, 2090.0], [728.0, 2196.0], [710.0, 1317.6666666666667], [707.0, 2508.0], [706.0, 2215.6], [719.0, 1253.5], [717.0, 2567.0], [716.0, 2249.0], [715.0, 2316.0], [713.0, 2461.0], [712.0, 2447.5], [727.0, 2306.0], [725.0, 1851.5], [760.0, 1952.0], [764.0, 1657.0], [767.0, 1636.0], [753.0, 2196.0], [752.0, 2360.0], [755.0, 2125.0], [754.0, 2070.0], [766.0, 2159.0], [765.0, 960.0], [763.0, 1659.0], [762.0, 2121.0], [761.0, 1663.0], [751.0, 2215.0], [736.0, 1967.0], [740.0, 2474.0], [739.0, 1656.3333333333333], [742.0, 2113.0], [741.0, 2452.0], [750.0, 2043.0], [749.0, 1951.0], [748.0, 2169.0], [747.0, 1751.0], [746.0, 2191.0], [745.0, 1225.0], [744.0, 2320.5], [758.0, 2088.0], [756.0, 2342.0], [792.0, 2101.0], [796.0, 1944.0], [799.0, 2147.0], [785.0, 1822.0], [788.0, 1985.0], [787.0, 2103.5], [798.0, 1070.0], [797.0, 2166.0], [795.0, 394.0], [794.0, 1610.0], [793.0, 2100.0], [783.0, 1624.0], [768.0, 1647.0], [771.0, 1187.5], [769.0, 1923.0], [773.0, 1662.0], [772.0, 2250.0], [775.0, 1960.0], [774.0, 934.0], [782.0, 2291.0], [780.0, 2287.0], [779.0, 946.0], [778.0, 2337.0], [777.0, 2332.0], [776.0, 1876.0], [791.0, 1623.0], [790.0, 1413.5], [824.0, 262.0], [829.0, 239.0], [830.0, 1211.5], [816.0, 1989.0], [818.0, 1884.0], [817.0, 2195.0], [827.0, 1880.0], [826.0, 1875.0], [825.0, 1834.0], [815.0, 1936.0], [801.0, 1949.0], [800.0, 1990.0], [804.0, 2247.0], [803.0, 1977.0], [807.0, 2221.0], [805.0, 1953.0], [814.0, 320.0], [813.0, 2215.0], [812.0, 306.0], [811.0, 1951.0], [810.0, 1530.0], [809.0, 1907.0], [808.0, 319.0], [823.0, 1237.0], [821.0, 1444.0], [820.0, 1752.0], [819.0, 423.0], [861.0, 1751.6666666666667], [852.0, 1665.0], [863.0, 239.0], [849.0, 1748.0], [858.0, 1013.0], [856.0, 231.0], [847.0, 1701.5], [832.0, 2144.0], [834.0, 2144.0], [833.0, 1970.5], [836.0, 2095.0], [835.0, 1380.0], [838.0, 1787.0], [837.0, 2067.0], [846.0, 1299.3333333333333], [842.0, 299.0], [841.0, 1873.0], [840.0, 1109.0], [855.0, 1599.0], [854.0, 1308.0], [853.0, 182.0], [851.0, 1782.0], [850.0, 1323.0], [890.0, 185.0], [883.0, 911.0], [893.0, 910.5], [895.0, 1643.0], [881.0, 219.0], [880.0, 870.5], [891.0, 1125.0], [889.0, 940.0], [871.0, 182.0], [870.0, 1758.0], [869.0, 614.0], [868.0, 1699.0], [867.0, 209.0], [866.0, 1674.3333333333333], [879.0, 181.0], [878.0, 1438.0], [876.0, 208.0], [875.0, 1656.5], [873.0, 1625.0], [872.0, 1208.0], [887.0, 1584.0], [886.0, 1675.0], [885.0, 867.5], [924.0, 1726.0], [927.0, 1043.3333333333333], [923.0, 1307.5], [922.0, 1277.0], [920.0, 707.3333333333334], [899.0, 160.0], [910.0, 823.0], [908.0, 1770.0], [907.0, 1508.0], [906.0, 1755.0], [905.0, 815.375], [904.0, 1495.0], [918.0, 1705.0], [916.0, 1285.0], [915.0, 864.0], [913.0, 662.3333333333334], [946.0, 1295.0], [956.0, 1362.0], [955.0, 1276.0], [954.0, 1278.5], [952.0, 797.0], [943.0, 1410.5], [929.0, 1392.0], [932.0, 937.6666666666667], [931.0, 1271.0], [934.0, 140.0], [933.0, 1604.0], [940.0, 1003.0], [939.0, 679.5], [937.0, 129.0], [936.0, 1330.0], [950.0, 1658.0], [949.0, 150.0], [948.0, 980.0], [945.0, 1267.3333333333333], [984.0, 898.0], [990.0, 128.0], [991.0, 154.0], [989.0, 166.0], [987.0, 1318.0], [986.0, 1058.0], [975.0, 1180.0], [961.0, 213.5], [960.0, 954.0], [965.0, 937.0], [963.0, 1003.25], [967.0, 1241.0], [966.0, 255.0], [974.0, 929.0], [973.0, 1423.6666666666667], [972.0, 913.0], [969.0, 131.0], [968.0, 1594.0], [983.0, 520.5], [981.0, 1233.0], [980.0, 1420.0], [977.0, 533.5], [1000.0, 1169.6666666666667], [997.0, 120.0], [996.0, 1478.0], [995.0, 1577.0], [994.0, 877.0], [993.0, 1235.5], [1.0, 8248.0]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}, {"data": [[501.06100000000134, 3368.686999999997]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11266.666666666666, "minX": 1.7563665E12, "maxY": 27466.666666666668, "series": [{"data": [[1.7563665E12, 11266.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7563665E12, 27466.666666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563665E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3368.686999999997, "minX": 1.7563665E12, "maxY": 3368.686999999997, "series": [{"data": [[1.7563665E12, 3368.686999999997]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563665E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3368.6420000000035, "minX": 1.7563665E12, "maxY": 3368.6420000000035, "series": [{"data": [[1.7563665E12, 3368.6420000000035]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563665E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1566.2310000000004, "minX": 1.7563665E12, "maxY": 1566.2310000000004, "series": [{"data": [[1.7563665E12, 1566.2310000000004]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563665E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.7563665E12, "maxY": 8248.0, "series": [{"data": [[1.7563665E12, 8248.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7563665E12, 5839.599999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7563665E12, 7516.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7563665E12, 6541.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7563665E12, 120.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7563665E12, 3269.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563665E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1308.0, "minX": 3.0, "maxY": 8011.0, "series": [{"data": [[133.0, 5226.0], [34.0, 7218.0], [149.0, 4316.0], [76.0, 6209.5], [177.0, 3401.0], [193.0, 1308.0], [3.0, 8011.0], [235.0, 2274.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 235.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1308.0, "minX": 3.0, "maxY": 8011.0, "series": [{"data": [[133.0, 5226.0], [34.0, 7218.0], [149.0, 4316.0], [76.0, 6209.5], [177.0, 3401.0], [193.0, 1308.0], [3.0, 8011.0], [235.0, 2274.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 235.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7563665E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7563665E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563665E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7563665E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7563665E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563665E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7563665E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7563665E12, 16.666666666666668]], "isOverall": false, "label": "สร้างเอกสารการส่งตัว-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563665E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7563665E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7563665E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563665E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

