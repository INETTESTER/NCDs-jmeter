/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 177.0, "minX": 0.0, "maxY": 32233.0, "series": [{"data": [[0.0, 177.0], [0.1, 199.0], [0.2, 200.0], [0.3, 200.0], [0.4, 226.0], [0.5, 229.0], [0.6, 233.0], [0.7, 255.0], [0.8, 287.0], [0.9, 314.0], [1.0, 338.0], [1.1, 352.0], [1.2, 383.0], [1.3, 430.0], [1.4, 430.0], [1.5, 449.0], [1.6, 473.0], [1.7, 493.0], [1.8, 494.0], [1.9, 507.0], [2.0, 519.0], [2.1, 553.0], [2.2, 565.0], [2.3, 570.0], [2.4, 600.0], [2.5, 604.0], [2.6, 607.0], [2.7, 609.0], [2.8, 636.0], [2.9, 638.0], [3.0, 666.0], [3.1, 681.0], [3.2, 683.0], [3.3, 724.0], [3.4, 745.0], [3.5, 752.0], [3.6, 776.0], [3.7, 787.0], [3.8, 792.0], [3.9, 792.0], [4.0, 818.0], [4.1, 821.0], [4.2, 836.0], [4.3, 841.0], [4.4, 845.0], [4.5, 855.0], [4.6, 862.0], [4.7, 866.0], [4.8, 868.0], [4.9, 871.0], [5.0, 888.0], [5.1, 896.0], [5.2, 906.0], [5.3, 907.0], [5.4, 910.0], [5.5, 926.0], [5.6, 926.0], [5.7, 932.0], [5.8, 933.0], [5.9, 950.0], [6.0, 954.0], [6.1, 964.0], [6.2, 964.0], [6.3, 969.0], [6.4, 973.0], [6.5, 975.0], [6.6, 976.0], [6.7, 985.0], [6.8, 988.0], [6.9, 1000.0], [7.0, 1001.0], [7.1, 1007.0], [7.2, 1011.0], [7.3, 1015.0], [7.4, 1019.0], [7.5, 1023.0], [7.6, 1032.0], [7.7, 1057.0], [7.8, 1058.0], [7.9, 1059.0], [8.0, 1060.0], [8.1, 1064.0], [8.2, 1065.0], [8.3, 1068.0], [8.4, 1076.0], [8.5, 1078.0], [8.6, 1080.0], [8.7, 1085.0], [8.8, 1088.0], [8.9, 1098.0], [9.0, 1104.0], [9.1, 1108.0], [9.2, 1113.0], [9.3, 1120.0], [9.4, 1121.0], [9.5, 1126.0], [9.6, 1136.0], [9.7, 1144.0], [9.8, 1144.0], [9.9, 1157.0], [10.0, 1168.0], [10.1, 1169.0], [10.2, 1169.0], [10.3, 1169.0], [10.4, 1209.0], [10.5, 1218.0], [10.6, 1239.0], [10.7, 1248.0], [10.8, 1287.0], [10.9, 1301.0], [11.0, 1321.0], [11.1, 1322.0], [11.2, 1339.0], [11.3, 1340.0], [11.4, 1342.0], [11.5, 1357.0], [11.6, 1359.0], [11.7, 1360.0], [11.8, 1399.0], [11.9, 1405.0], [12.0, 1416.0], [12.1, 1418.0], [12.2, 1433.0], [12.3, 1461.0], [12.4, 1477.0], [12.5, 1488.0], [12.6, 1510.0], [12.7, 1540.0], [12.8, 1543.0], [12.9, 1595.0], [13.0, 1639.0], [13.1, 1695.0], [13.2, 1739.0], [13.3, 1830.0], [13.4, 1839.0], [13.5, 1845.0], [13.6, 1868.0], [13.7, 1874.0], [13.8, 1893.0], [13.9, 1913.0], [14.0, 1918.0], [14.1, 1946.0], [14.2, 1990.0], [14.3, 2030.0], [14.4, 2057.0], [14.5, 2091.0], [14.6, 2100.0], [14.7, 2103.0], [14.8, 2108.0], [14.9, 2137.0], [15.0, 2161.0], [15.1, 2249.0], [15.2, 2252.0], [15.3, 2307.0], [15.4, 2308.0], [15.5, 2323.0], [15.6, 2345.0], [15.7, 2345.0], [15.8, 2346.0], [15.9, 2350.0], [16.0, 2357.0], [16.1, 2453.0], [16.2, 2488.0], [16.3, 2492.0], [16.4, 2522.0], [16.5, 2525.0], [16.6, 2532.0], [16.7, 2557.0], [16.8, 2604.0], [16.9, 2623.0], [17.0, 2642.0], [17.1, 2672.0], [17.2, 2721.0], [17.3, 2727.0], [17.4, 2747.0], [17.5, 2768.0], [17.6, 2780.0], [17.7, 2802.0], [17.8, 2835.0], [17.9, 2947.0], [18.0, 2948.0], [18.1, 2961.0], [18.2, 3030.0], [18.3, 3119.0], [18.4, 3145.0], [18.5, 3161.0], [18.6, 3230.0], [18.7, 3342.0], [18.8, 3345.0], [18.9, 3345.0], [19.0, 3370.0], [19.1, 3408.0], [19.2, 3535.0], [19.3, 3580.0], [19.4, 3639.0], [19.5, 3654.0], [19.6, 3680.0], [19.7, 3687.0], [19.8, 3744.0], [19.9, 3764.0], [20.0, 4081.0], [20.1, 4136.0], [20.2, 4240.0], [20.3, 4290.0], [20.4, 4377.0], [20.5, 4507.0], [20.6, 4550.0], [20.7, 4606.0], [20.8, 4687.0], [20.9, 4772.0], [21.0, 4828.0], [21.1, 4861.0], [21.2, 5440.0], [21.3, 5803.0], [21.4, 6230.0], [21.5, 6603.0], [21.6, 6702.0], [21.7, 6857.0], [21.8, 6937.0], [21.9, 7067.0], [22.0, 7092.0], [22.1, 7231.0], [22.2, 7279.0], [22.3, 7375.0], [22.4, 7488.0], [22.5, 7609.0], [22.6, 7721.0], [22.7, 7774.0], [22.8, 7886.0], [22.9, 7938.0], [23.0, 8222.0], [23.1, 8348.0], [23.2, 8389.0], [23.3, 8522.0], [23.4, 8555.0], [23.5, 8664.0], [23.6, 8733.0], [23.7, 8831.0], [23.8, 8954.0], [23.9, 9046.0], [24.0, 9059.0], [24.1, 9091.0], [24.2, 9153.0], [24.3, 9263.0], [24.4, 9285.0], [24.5, 9326.0], [24.6, 9354.0], [24.7, 9449.0], [24.8, 9454.0], [24.9, 9540.0], [25.0, 9675.0], [25.1, 9738.0], [25.2, 9815.0], [25.3, 9928.0], [25.4, 9934.0], [25.5, 9985.0], [25.6, 10009.0], [25.7, 10041.0], [25.8, 10046.0], [25.9, 10105.0], [26.0, 10139.0], [26.1, 10140.0], [26.2, 10199.0], [26.3, 10234.0], [26.4, 10247.0], [26.5, 10306.0], [26.6, 10367.0], [26.7, 10372.0], [26.8, 10386.0], [26.9, 10400.0], [27.0, 10441.0], [27.1, 10488.0], [27.2, 10523.0], [27.3, 10554.0], [27.4, 10615.0], [27.5, 10617.0], [27.6, 10649.0], [27.7, 10673.0], [27.8, 10747.0], [27.9, 10780.0], [28.0, 10791.0], [28.1, 10812.0], [28.2, 10845.0], [28.3, 10850.0], [28.4, 10871.0], [28.5, 10933.0], [28.6, 10939.0], [28.7, 10974.0], [28.8, 10987.0], [28.9, 11008.0], [29.0, 11040.0], [29.1, 11046.0], [29.2, 11122.0], [29.3, 11123.0], [29.4, 11169.0], [29.5, 11217.0], [29.6, 11237.0], [29.7, 11245.0], [29.8, 11344.0], [29.9, 11387.0], [30.0, 11400.0], [30.1, 11416.0], [30.2, 11429.0], [30.3, 11505.0], [30.4, 11539.0], [30.5, 11661.0], [30.6, 11673.0], [30.7, 11705.0], [30.8, 11762.0], [30.9, 11838.0], [31.0, 11867.0], [31.1, 11882.0], [31.2, 11920.0], [31.3, 11926.0], [31.4, 11937.0], [31.5, 11958.0], [31.6, 12002.0], [31.7, 12009.0], [31.8, 12022.0], [31.9, 12059.0], [32.0, 12069.0], [32.1, 12083.0], [32.2, 12095.0], [32.3, 12109.0], [32.4, 12119.0], [32.5, 12130.0], [32.6, 12138.0], [32.7, 12190.0], [32.8, 12190.0], [32.9, 12198.0], [33.0, 12205.0], [33.1, 12207.0], [33.2, 12260.0], [33.3, 12263.0], [33.4, 12278.0], [33.5, 12288.0], [33.6, 12292.0], [33.7, 12294.0], [33.8, 12335.0], [33.9, 12347.0], [34.0, 12350.0], [34.1, 12371.0], [34.2, 12381.0], [34.3, 12404.0], [34.4, 12412.0], [34.5, 12439.0], [34.6, 12503.0], [34.7, 12579.0], [34.8, 12609.0], [34.9, 12630.0], [35.0, 12667.0], [35.1, 12695.0], [35.2, 12700.0], [35.3, 12704.0], [35.4, 12716.0], [35.5, 12738.0], [35.6, 12751.0], [35.7, 12782.0], [35.8, 12785.0], [35.9, 12791.0], [36.0, 12798.0], [36.1, 12811.0], [36.2, 12874.0], [36.3, 12889.0], [36.4, 12898.0], [36.5, 12922.0], [36.6, 12932.0], [36.7, 13083.0], [36.8, 13095.0], [36.9, 13104.0], [37.0, 13154.0], [37.1, 13195.0], [37.2, 13236.0], [37.3, 13296.0], [37.4, 13321.0], [37.5, 13355.0], [37.6, 13362.0], [37.7, 13367.0], [37.8, 13396.0], [37.9, 13423.0], [38.0, 13452.0], [38.1, 13461.0], [38.2, 13487.0], [38.3, 13489.0], [38.4, 13512.0], [38.5, 13537.0], [38.6, 13549.0], [38.7, 13550.0], [38.8, 13565.0], [38.9, 13605.0], [39.0, 13614.0], [39.1, 13618.0], [39.2, 13619.0], [39.3, 13627.0], [39.4, 13705.0], [39.5, 13716.0], [39.6, 13741.0], [39.7, 13748.0], [39.8, 13775.0], [39.9, 13781.0], [40.0, 13829.0], [40.1, 13834.0], [40.2, 13883.0], [40.3, 13968.0], [40.4, 14017.0], [40.5, 14027.0], [40.6, 14049.0], [40.7, 14094.0], [40.8, 14102.0], [40.9, 14116.0], [41.0, 14141.0], [41.1, 14167.0], [41.2, 14269.0], [41.3, 14287.0], [41.4, 14383.0], [41.5, 14386.0], [41.6, 14403.0], [41.7, 14409.0], [41.8, 14411.0], [41.9, 14564.0], [42.0, 14598.0], [42.1, 14605.0], [42.2, 14631.0], [42.3, 14642.0], [42.4, 14831.0], [42.5, 14843.0], [42.6, 15050.0], [42.7, 15072.0], [42.8, 15196.0], [42.9, 15238.0], [43.0, 15339.0], [43.1, 15397.0], [43.2, 15433.0], [43.3, 15439.0], [43.4, 15590.0], [43.5, 15602.0], [43.6, 15638.0], [43.7, 15708.0], [43.8, 15709.0], [43.9, 15710.0], [44.0, 15720.0], [44.1, 15777.0], [44.2, 15792.0], [44.3, 15798.0], [44.4, 15807.0], [44.5, 15879.0], [44.6, 15897.0], [44.7, 15908.0], [44.8, 15911.0], [44.9, 15955.0], [45.0, 15973.0], [45.1, 15985.0], [45.2, 16056.0], [45.3, 16074.0], [45.4, 16083.0], [45.5, 16119.0], [45.6, 16232.0], [45.7, 16232.0], [45.8, 16238.0], [45.9, 16244.0], [46.0, 16271.0], [46.1, 16297.0], [46.2, 16343.0], [46.3, 16401.0], [46.4, 16456.0], [46.5, 16483.0], [46.6, 16556.0], [46.7, 16564.0], [46.8, 16564.0], [46.9, 16575.0], [47.0, 16579.0], [47.1, 16583.0], [47.2, 16640.0], [47.3, 16654.0], [47.4, 16685.0], [47.5, 16693.0], [47.6, 16806.0], [47.7, 16846.0], [47.8, 16851.0], [47.9, 16853.0], [48.0, 16863.0], [48.1, 16874.0], [48.2, 16879.0], [48.3, 16887.0], [48.4, 16895.0], [48.5, 16918.0], [48.6, 16925.0], [48.7, 16928.0], [48.8, 16987.0], [48.9, 17004.0], [49.0, 17023.0], [49.1, 17038.0], [49.2, 17099.0], [49.3, 17118.0], [49.4, 17120.0], [49.5, 17124.0], [49.6, 17125.0], [49.7, 17130.0], [49.8, 17132.0], [49.9, 17147.0], [50.0, 17168.0], [50.1, 17169.0], [50.2, 17188.0], [50.3, 17190.0], [50.4, 17214.0], [50.5, 17248.0], [50.6, 17253.0], [50.7, 17274.0], [50.8, 17304.0], [50.9, 17313.0], [51.0, 17321.0], [51.1, 17340.0], [51.2, 17342.0], [51.3, 17353.0], [51.4, 17365.0], [51.5, 17366.0], [51.6, 17368.0], [51.7, 17375.0], [51.8, 17379.0], [51.9, 17384.0], [52.0, 17392.0], [52.1, 17403.0], [52.2, 17418.0], [52.3, 17420.0], [52.4, 17442.0], [52.5, 17465.0], [52.6, 17472.0], [52.7, 17498.0], [52.8, 17502.0], [52.9, 17539.0], [53.0, 17551.0], [53.1, 17578.0], [53.2, 17580.0], [53.3, 17582.0], [53.4, 17597.0], [53.5, 17611.0], [53.6, 17618.0], [53.7, 17618.0], [53.8, 17627.0], [53.9, 17651.0], [54.0, 17651.0], [54.1, 17682.0], [54.2, 17695.0], [54.3, 17702.0], [54.4, 17709.0], [54.5, 17721.0], [54.6, 17721.0], [54.7, 17724.0], [54.8, 17726.0], [54.9, 17726.0], [55.0, 17735.0], [55.1, 17737.0], [55.2, 17748.0], [55.3, 17756.0], [55.4, 17762.0], [55.5, 17762.0], [55.6, 17767.0], [55.7, 17767.0], [55.8, 17774.0], [55.9, 17791.0], [56.0, 17798.0], [56.1, 17838.0], [56.2, 17839.0], [56.3, 17839.0], [56.4, 17841.0], [56.5, 17845.0], [56.6, 17863.0], [56.7, 17864.0], [56.8, 17867.0], [56.9, 17870.0], [57.0, 17876.0], [57.1, 17884.0], [57.2, 17886.0], [57.3, 17899.0], [57.4, 17910.0], [57.5, 17914.0], [57.6, 17924.0], [57.7, 17925.0], [57.8, 17927.0], [57.9, 17950.0], [58.0, 17951.0], [58.1, 17956.0], [58.2, 17970.0], [58.3, 17981.0], [58.4, 17996.0], [58.5, 18000.0], [58.6, 18008.0], [58.7, 18021.0], [58.8, 18031.0], [58.9, 18045.0], [59.0, 18056.0], [59.1, 18070.0], [59.2, 18114.0], [59.3, 18126.0], [59.4, 18133.0], [59.5, 18140.0], [59.6, 18154.0], [59.7, 18156.0], [59.8, 18162.0], [59.9, 18165.0], [60.0, 18166.0], [60.1, 18166.0], [60.2, 18178.0], [60.3, 18189.0], [60.4, 18198.0], [60.5, 18200.0], [60.6, 18235.0], [60.7, 18282.0], [60.8, 18294.0], [60.9, 18304.0], [61.0, 18314.0], [61.1, 18348.0], [61.2, 18354.0], [61.3, 18357.0], [61.4, 18381.0], [61.5, 18389.0], [61.6, 18413.0], [61.7, 18436.0], [61.8, 18520.0], [61.9, 18536.0], [62.0, 18573.0], [62.1, 18590.0], [62.2, 18609.0], [62.3, 18610.0], [62.4, 18610.0], [62.5, 18629.0], [62.6, 18646.0], [62.7, 18680.0], [62.8, 18682.0], [62.9, 18701.0], [63.0, 18704.0], [63.1, 18713.0], [63.2, 18720.0], [63.3, 18752.0], [63.4, 18771.0], [63.5, 18775.0], [63.6, 18805.0], [63.7, 18806.0], [63.8, 18810.0], [63.9, 18814.0], [64.0, 18820.0], [64.1, 18829.0], [64.2, 18851.0], [64.3, 18851.0], [64.4, 18856.0], [64.5, 18873.0], [64.6, 18883.0], [64.7, 18889.0], [64.8, 18893.0], [64.9, 18893.0], [65.0, 18894.0], [65.1, 18898.0], [65.2, 18909.0], [65.3, 18918.0], [65.4, 18920.0], [65.5, 18939.0], [65.6, 18948.0], [65.7, 18990.0], [65.8, 18996.0], [65.9, 19001.0], [66.0, 19002.0], [66.1, 19007.0], [66.2, 19021.0], [66.3, 19024.0], [66.4, 19031.0], [66.5, 19039.0], [66.6, 19048.0], [66.7, 19074.0], [66.8, 19079.0], [66.9, 19093.0], [67.0, 19102.0], [67.1, 19103.0], [67.2, 19112.0], [67.3, 19119.0], [67.4, 19138.0], [67.5, 19144.0], [67.6, 19145.0], [67.7, 19146.0], [67.8, 19146.0], [67.9, 19151.0], [68.0, 19157.0], [68.1, 19158.0], [68.2, 19169.0], [68.3, 19171.0], [68.4, 19174.0], [68.5, 19189.0], [68.6, 19202.0], [68.7, 19203.0], [68.8, 19210.0], [68.9, 19219.0], [69.0, 19221.0], [69.1, 19222.0], [69.2, 19223.0], [69.3, 19239.0], [69.4, 19268.0], [69.5, 19280.0], [69.6, 19282.0], [69.7, 19284.0], [69.8, 19347.0], [69.9, 19367.0], [70.0, 19367.0], [70.1, 19373.0], [70.2, 19378.0], [70.3, 19395.0], [70.4, 19404.0], [70.5, 19431.0], [70.6, 19432.0], [70.7, 19444.0], [70.8, 19446.0], [70.9, 19449.0], [71.0, 19452.0], [71.1, 19463.0], [71.2, 19473.0], [71.3, 19507.0], [71.4, 19597.0], [71.5, 19623.0], [71.6, 19624.0], [71.7, 19662.0], [71.8, 19670.0], [71.9, 19678.0], [72.0, 19705.0], [72.1, 19720.0], [72.2, 19726.0], [72.3, 19740.0], [72.4, 19749.0], [72.5, 19758.0], [72.6, 19768.0], [72.7, 19777.0], [72.8, 19791.0], [72.9, 19799.0], [73.0, 19816.0], [73.1, 19823.0], [73.2, 19833.0], [73.3, 19845.0], [73.4, 19870.0], [73.5, 19882.0], [73.6, 19886.0], [73.7, 19898.0], [73.8, 19905.0], [73.9, 19911.0], [74.0, 19933.0], [74.1, 19960.0], [74.2, 19983.0], [74.3, 19998.0], [74.4, 19998.0], [74.5, 20001.0], [74.6, 20003.0], [74.7, 20008.0], [74.8, 20009.0], [74.9, 20040.0], [75.0, 20054.0], [75.1, 20077.0], [75.2, 20084.0], [75.3, 20086.0], [75.4, 20144.0], [75.5, 20171.0], [75.6, 20181.0], [75.7, 20193.0], [75.8, 20219.0], [75.9, 20224.0], [76.0, 20232.0], [76.1, 20233.0], [76.2, 20238.0], [76.3, 20243.0], [76.4, 20322.0], [76.5, 20324.0], [76.6, 20325.0], [76.7, 20326.0], [76.8, 20328.0], [76.9, 20330.0], [77.0, 20330.0], [77.1, 20332.0], [77.2, 20334.0], [77.3, 20391.0], [77.4, 20393.0], [77.5, 20468.0], [77.6, 20483.0], [77.7, 20507.0], [77.8, 20510.0], [77.9, 20546.0], [78.0, 20564.0], [78.1, 20609.0], [78.2, 20620.0], [78.3, 20748.0], [78.4, 20750.0], [78.5, 20751.0], [78.6, 20757.0], [78.7, 20803.0], [78.8, 20815.0], [78.9, 20820.0], [79.0, 20845.0], [79.1, 20848.0], [79.2, 20883.0], [79.3, 20909.0], [79.4, 20952.0], [79.5, 20952.0], [79.6, 20952.0], [79.7, 20962.0], [79.8, 20978.0], [79.9, 20987.0], [80.0, 20992.0], [80.1, 20996.0], [80.2, 20999.0], [80.3, 21006.0], [80.4, 21011.0], [80.5, 21013.0], [80.6, 21024.0], [80.7, 21025.0], [80.8, 21046.0], [80.9, 21056.0], [81.0, 21057.0], [81.1, 21057.0], [81.2, 21062.0], [81.3, 21069.0], [81.4, 21078.0], [81.5, 21081.0], [81.6, 21083.0], [81.7, 21084.0], [81.8, 21107.0], [81.9, 21111.0], [82.0, 21114.0], [82.1, 21115.0], [82.2, 21118.0], [82.3, 21119.0], [82.4, 21130.0], [82.5, 21166.0], [82.6, 21181.0], [82.7, 21193.0], [82.8, 21193.0], [82.9, 21194.0], [83.0, 21194.0], [83.1, 21200.0], [83.2, 21206.0], [83.3, 21207.0], [83.4, 21234.0], [83.5, 21239.0], [83.6, 21245.0], [83.7, 21245.0], [83.8, 21249.0], [83.9, 21259.0], [84.0, 21263.0], [84.1, 21269.0], [84.2, 21269.0], [84.3, 21270.0], [84.4, 21272.0], [84.5, 21284.0], [84.6, 21286.0], [84.7, 21287.0], [84.8, 21290.0], [84.9, 21293.0], [85.0, 21299.0], [85.1, 21304.0], [85.2, 21417.0], [85.3, 21477.0], [85.4, 21499.0], [85.5, 21540.0], [85.6, 21555.0], [85.7, 21566.0], [85.8, 21580.0], [85.9, 21618.0], [86.0, 21627.0], [86.1, 21689.0], [86.2, 21812.0], [86.3, 21856.0], [86.4, 21998.0], [86.5, 22011.0], [86.6, 22234.0], [86.7, 22236.0], [86.8, 22268.0], [86.9, 22322.0], [87.0, 22365.0], [87.1, 22395.0], [87.2, 22432.0], [87.3, 22435.0], [87.4, 22462.0], [87.5, 22474.0], [87.6, 22519.0], [87.7, 22564.0], [87.8, 22581.0], [87.9, 22599.0], [88.0, 22616.0], [88.1, 22620.0], [88.2, 22651.0], [88.3, 22713.0], [88.4, 22765.0], [88.5, 22924.0], [88.6, 22954.0], [88.7, 22984.0], [88.8, 23018.0], [88.9, 23069.0], [89.0, 23070.0], [89.1, 23256.0], [89.2, 23296.0], [89.3, 23307.0], [89.4, 23313.0], [89.5, 23315.0], [89.6, 23349.0], [89.7, 23389.0], [89.8, 23445.0], [89.9, 23485.0], [90.0, 23538.0], [90.1, 23544.0], [90.2, 23630.0], [90.3, 23645.0], [90.4, 23662.0], [90.5, 23769.0], [90.6, 23793.0], [90.7, 23820.0], [90.8, 23855.0], [90.9, 23893.0], [91.0, 23940.0], [91.1, 23986.0], [91.2, 24023.0], [91.3, 24052.0], [91.4, 24062.0], [91.5, 24068.0], [91.6, 24128.0], [91.7, 24138.0], [91.8, 24293.0], [91.9, 24719.0], [92.0, 24797.0], [92.1, 24842.0], [92.2, 24851.0], [92.3, 24891.0], [92.4, 24904.0], [92.5, 24924.0], [92.6, 24958.0], [92.7, 24997.0], [92.8, 25034.0], [92.9, 25090.0], [93.0, 25134.0], [93.1, 25459.0], [93.2, 25600.0], [93.3, 25601.0], [93.4, 25672.0], [93.5, 25705.0], [93.6, 25747.0], [93.7, 25765.0], [93.8, 25857.0], [93.9, 25876.0], [94.0, 25908.0], [94.1, 25944.0], [94.2, 25989.0], [94.3, 26000.0], [94.4, 26059.0], [94.5, 26114.0], [94.6, 26512.0], [94.7, 26526.0], [94.8, 26541.0], [94.9, 26561.0], [95.0, 26601.0], [95.1, 26621.0], [95.2, 26635.0], [95.3, 26746.0], [95.4, 26764.0], [95.5, 26766.0], [95.6, 26892.0], [95.7, 27097.0], [95.8, 27152.0], [95.9, 27166.0], [96.0, 27231.0], [96.1, 27259.0], [96.2, 27301.0], [96.3, 27389.0], [96.4, 27595.0], [96.5, 27961.0], [96.6, 27981.0], [96.7, 28053.0], [96.8, 28167.0], [96.9, 28180.0], [97.0, 28410.0], [97.1, 28560.0], [97.2, 28918.0], [97.3, 28975.0], [97.4, 28983.0], [97.5, 29335.0], [97.6, 29381.0], [97.7, 29414.0], [97.8, 29458.0], [97.9, 29463.0], [98.0, 29473.0], [98.1, 29507.0], [98.2, 29611.0], [98.3, 29652.0], [98.4, 29653.0], [98.5, 30061.0], [98.6, 30108.0], [98.7, 30121.0], [98.8, 30281.0], [98.9, 30331.0], [99.0, 30369.0], [99.1, 30408.0], [99.2, 30415.0], [99.3, 30547.0], [99.4, 30749.0], [99.5, 30938.0], [99.6, 31685.0], [99.7, 31750.0], [99.8, 31798.0], [99.9, 32233.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 21.0, "series": [{"data": [[100.0, 2.0], [200.0, 7.0], [300.0, 4.0], [400.0, 5.0], [500.0, 5.0], [600.0, 9.0], [700.0, 7.0], [800.0, 13.0], [900.0, 17.0], [1000.0, 21.0], [1100.0, 14.0], [1200.0, 5.0], [1300.0, 10.0], [1400.0, 7.0], [1500.0, 4.0], [1600.0, 2.0], [1700.0, 1.0], [1800.0, 6.0], [1900.0, 4.0], [2000.0, 3.0], [2100.0, 5.0], [2300.0, 8.0], [2200.0, 2.0], [2400.0, 3.0], [2500.0, 4.0], [2600.0, 4.0], [2700.0, 5.0], [2800.0, 2.0], [2900.0, 3.0], [3000.0, 1.0], [3100.0, 3.0], [3300.0, 3.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 2.0], [3600.0, 4.0], [3700.0, 2.0], [4000.0, 1.0], [4100.0, 1.0], [4200.0, 2.0], [4300.0, 1.0], [4500.0, 2.0], [4600.0, 2.0], [4800.0, 2.0], [4700.0, 1.0], [5400.0, 1.0], [5800.0, 1.0], [6200.0, 1.0], [6600.0, 1.0], [6800.0, 1.0], [6700.0, 1.0], [6900.0, 1.0], [7000.0, 2.0], [7400.0, 1.0], [7200.0, 2.0], [7300.0, 1.0], [7600.0, 1.0], [7700.0, 2.0], [7800.0, 1.0], [7900.0, 1.0], [8300.0, 2.0], [8600.0, 1.0], [8500.0, 2.0], [8700.0, 1.0], [8200.0, 1.0], [8900.0, 1.0], [9000.0, 3.0], [9100.0, 1.0], [9200.0, 2.0], [8800.0, 1.0], [9400.0, 2.0], [9300.0, 2.0], [9600.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [10000.0, 3.0], [9800.0, 1.0], [9900.0, 3.0], [10100.0, 4.0], [10200.0, 2.0], [10300.0, 4.0], [10400.0, 3.0], [10600.0, 4.0], [10500.0, 2.0], [10700.0, 3.0], [10900.0, 4.0], [10800.0, 4.0], [11100.0, 3.0], [11000.0, 3.0], [11200.0, 3.0], [11400.0, 3.0], [11500.0, 2.0], [11300.0, 2.0], [11600.0, 2.0], [11700.0, 2.0], [11900.0, 4.0], [12100.0, 7.0], [11800.0, 3.0], [12000.0, 7.0], [12200.0, 8.0], [12300.0, 5.0], [12600.0, 4.0], [12700.0, 9.0], [12400.0, 3.0], [12500.0, 2.0], [12900.0, 2.0], [12800.0, 4.0], [13100.0, 3.0], [13000.0, 2.0], [13200.0, 2.0], [13300.0, 5.0], [13400.0, 5.0], [13700.0, 6.0], [13500.0, 5.0], [13600.0, 5.0], [13800.0, 3.0], [13900.0, 1.0], [14000.0, 4.0], [14100.0, 4.0], [14300.0, 2.0], [14200.0, 2.0], [14400.0, 3.0], [14800.0, 2.0], [14600.0, 3.0], [14500.0, 2.0], [15000.0, 2.0], [15300.0, 2.0], [15200.0, 1.0], [15100.0, 1.0], [15400.0, 2.0], [15500.0, 1.0], [15600.0, 2.0], [15700.0, 7.0], [15800.0, 3.0], [15900.0, 5.0], [16200.0, 6.0], [16100.0, 1.0], [16000.0, 3.0], [16300.0, 1.0], [16600.0, 4.0], [16400.0, 3.0], [16800.0, 9.0], [17200.0, 4.0], [17000.0, 4.0], [17400.0, 7.0], [17600.0, 8.0], [17800.0, 13.0], [18000.0, 7.0], [18400.0, 2.0], [18200.0, 4.0], [18800.0, 16.0], [18600.0, 7.0], [19000.0, 11.0], [19200.0, 12.0], [19400.0, 9.0], [19800.0, 8.0], [19600.0, 5.0], [20000.0, 9.0], [20200.0, 7.0], [20400.0, 2.0], [20600.0, 2.0], [21000.0, 15.0], [21200.0, 20.0], [20800.0, 6.0], [21400.0, 3.0], [21600.0, 3.0], [21800.0, 2.0], [22000.0, 1.0], [22200.0, 3.0], [22400.0, 4.0], [22600.0, 3.0], [23000.0, 3.0], [23200.0, 2.0], [23400.0, 2.0], [23600.0, 3.0], [23800.0, 3.0], [24000.0, 4.0], [24200.0, 1.0], [24800.0, 3.0], [25000.0, 2.0], [25400.0, 1.0], [25600.0, 3.0], [25800.0, 2.0], [26000.0, 2.0], [26600.0, 3.0], [26800.0, 1.0], [27200.0, 2.0], [27000.0, 1.0], [28000.0, 1.0], [28400.0, 1.0], [29600.0, 3.0], [29400.0, 4.0], [30000.0, 1.0], [30400.0, 2.0], [30200.0, 1.0], [31600.0, 1.0], [32200.0, 1.0], [16500.0, 6.0], [16900.0, 4.0], [17100.0, 11.0], [17300.0, 13.0], [17500.0, 7.0], [17700.0, 18.0], [17900.0, 11.0], [18300.0, 7.0], [18100.0, 13.0], [18500.0, 4.0], [18700.0, 7.0], [18900.0, 7.0], [19100.0, 16.0], [19300.0, 6.0], [19700.0, 10.0], [19500.0, 2.0], [19900.0, 7.0], [20300.0, 11.0], [20100.0, 4.0], [20700.0, 4.0], [20500.0, 4.0], [20900.0, 10.0], [21100.0, 13.0], [21300.0, 1.0], [21500.0, 4.0], [21900.0, 1.0], [22300.0, 3.0], [22500.0, 4.0], [22900.0, 3.0], [22700.0, 2.0], [23300.0, 5.0], [23500.0, 2.0], [23700.0, 2.0], [23900.0, 2.0], [24100.0, 2.0], [24900.0, 4.0], [24700.0, 2.0], [25100.0, 1.0], [25700.0, 3.0], [25900.0, 3.0], [26500.0, 4.0], [26100.0, 1.0], [26700.0, 3.0], [27100.0, 2.0], [27300.0, 2.0], [27500.0, 1.0], [27900.0, 2.0], [28100.0, 2.0], [28500.0, 1.0], [28900.0, 3.0], [29300.0, 2.0], [29500.0, 1.0], [30100.0, 2.0], [30300.0, 2.0], [30500.0, 1.0], [30700.0, 1.0], [30900.0, 1.0], [31700.0, 2.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 873.0, "series": [{"data": [[0.0, 18.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 108.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 873.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 496.30399999999986, "minX": 1.75636824E12, "maxY": 496.30399999999986, "series": [{"data": [[1.75636824E12, 496.30399999999986]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636824E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 177.0, "minX": 1.0, "maxY": 32233.0, "series": [{"data": [[2.0, 31750.0], [4.0, 29443.5], [5.0, 31685.0], [6.0, 31798.0], [7.0, 28410.0], [8.0, 30938.0], [9.0, 30749.0], [11.0, 30481.0], [12.0, 30369.0], [14.0, 30344.5], [15.0, 30108.0], [16.0, 30331.0], [18.0, 30091.0], [19.0, 29507.0], [20.0, 29652.0], [22.0, 29537.0], [23.0, 29335.0], [25.0, 29555.5], [26.0, 29381.0], [28.0, 28186.0], [30.0, 28946.5], [31.0, 26114.0], [33.0, 28053.0], [32.0, 28560.0], [35.0, 28167.0], [34.0, 25876.0], [36.0, 28180.0], [41.0, 27595.0], [40.0, 26862.75], [42.0, 27097.0], [45.0, 27259.0], [44.0, 26112.5], [47.0, 27231.0], [46.0, 24851.0], [49.0, 27159.0], [51.0, 26892.0], [50.0, 26766.0], [53.0, 24797.0], [52.0, 26635.0], [55.0, 26611.0], [57.0, 26662.5], [58.0, 24293.0], [61.0, 26541.0], [60.0, 26636.0], [63.0, 26059.0], [62.0, 26512.0], [67.0, 23389.0], [66.0, 25989.0], [65.0, 26000.0], [64.0, 25944.0], [71.0, 25705.0], [70.0, 25094.666666666668], [74.0, 25600.0], [73.0, 25672.0], [72.0, 25747.0], [78.0, 25134.0], [77.0, 25090.0], [76.0, 24221.5], [83.0, 24891.0], [82.0, 24997.0], [81.0, 24944.666666666668], [87.0, 22268.0], [86.0, 23961.0], [84.0, 24719.0], [91.0, 24128.0], [90.0, 24138.0], [89.0, 24062.0], [88.0, 23940.0], [94.0, 23908.0], [92.0, 24068.0], [99.0, 23298.0], [96.0, 22696.0], [103.0, 23769.0], [102.0, 23820.0], [101.0, 23645.0], [100.0, 23855.0], [107.0, 22531.5], [105.0, 21477.0], [104.0, 23538.0], [111.0, 23544.0], [110.0, 22245.333333333332], [115.0, 21259.0], [112.0, 23296.0], [118.0, 23315.0], [117.0, 23307.0], [116.0, 23485.0], [123.0, 22765.0], [122.0, 23284.5], [120.0, 22444.5], [127.0, 22834.5], [125.0, 21046.0], [124.0, 22954.0], [134.0, 22924.0], [133.0, 20751.0], [132.0, 21758.0], [130.0, 21495.0], [142.0, 21683.0], [141.0, 22620.0], [139.0, 22564.0], [138.0, 22519.0], [137.0, 22474.0], [136.0, 22616.0], [148.0, 19960.0], [147.0, 21667.666666666668], [144.0, 22380.0], [159.0, 21788.5], [157.0, 20232.0], [156.0, 22236.0], [155.0, 21019.0], [153.0, 21598.8], [167.0, 21024.0], [166.0, 21239.0], [165.0, 21062.0], [164.0, 21118.0], [163.0, 19007.0], [162.0, 21627.0], [161.0, 21812.0], [160.0, 21555.0], [172.0, 21206.0], [171.0, 21052.0], [169.0, 18752.0], [168.0, 19119.0], [182.0, 21249.0], [181.0, 21299.0], [179.0, 21078.0], [177.0, 21077.5], [176.0, 21286.5], [191.0, 21114.5], [190.0, 19039.0], [188.0, 20499.666666666668], [184.0, 19203.0], [192.0, 20094.833333333332], [207.0, 20992.0], [206.0, 21022.333333333332], [202.0, 21272.0], [201.0, 20245.571428571428], [200.0, 21043.5], [215.0, 21166.75], [223.0, 19280.0], [221.0, 20952.0], [219.0, 21057.0], [217.0, 19777.0], [231.0, 20999.0], [230.0, 21194.0], [229.0, 21159.5], [228.0, 18898.0], [226.0, 21166.0], [224.0, 20847.600000000006], [239.0, 20467.5], [238.0, 20093.75], [247.0, 19976.333333333336], [245.0, 18609.0], [242.0, 20014.5], [255.0, 18520.0], [253.0, 20468.0], [252.0, 20510.0], [251.0, 19888.666666666668], [248.0, 20324.0], [270.0, 20326.0], [268.0, 20353.666666666668], [265.0, 19505.2], [264.0, 20372.5], [258.0, 19511.0], [257.0, 18154.0], [256.0, 20393.0], [286.0, 20086.0], [283.0, 20237.0], [281.0, 20171.0], [278.0, 20120.5], [276.0, 19085.75], [272.0, 18912.333333333332], [296.0, 20119.5], [294.0, 20054.0], [293.0, 19098.66666666667], [288.0, 19194.5], [319.0, 17767.0], [312.0, 19046.0], [311.0, 18788.0], [308.0, 18075.0], [305.0, 19749.0], [304.0, 19263.0], [329.0, 19444.0], [328.0, 18825.18181818182], [327.0, 19726.0], [323.0, 19674.0], [320.0, 19816.0], [347.0, 18673.5], [345.0, 18983.0], [344.0, 19886.0], [340.0, 18509.666666666668], [339.0, 18901.0], [337.0, 19473.0], [367.0, 19347.0], [366.0, 18824.333333333332], [363.0, 18741.125], [355.0, 18392.666666666668], [352.0, 18735.0], [383.0, 18948.0], [380.0, 18825.75], [376.0, 19188.5], [374.0, 19449.0], [373.0, 18395.166666666668], [399.0, 18126.0], [398.0, 19074.0], [397.0, 17912.0], [394.0, 18386.666666666668], [391.0, 19112.0], [390.0, 19102.0], [389.0, 18518.5], [411.0, 18077.454545454544], [400.0, 19210.0], [431.0, 18939.0], [430.0, 16925.0], [428.0, 17720.333333333332], [425.0, 19023.666666666668], [422.0, 17579.333333333332], [419.0, 18978.8], [418.0, 19103.0], [416.0, 18430.0], [442.0, 16853.0], [441.0, 17951.333333333332], [439.0, 16895.0], [437.0, 19048.0], [436.0, 17304.0], [435.0, 18646.0], [434.0, 18194.0], [433.0, 19079.0], [463.0, 17023.0], [462.0, 17099.0], [461.0, 17675.875], [456.0, 18805.0], [452.0, 17979.0], [450.0, 18297.875000000004], [479.0, 17573.285714285714], [472.0, 17602.2], [467.0, 16575.0], [466.0, 18590.0], [465.0, 16343.0], [464.0, 16483.0], [494.0, 17986.4], [489.0, 16867.666666666668], [486.0, 17044.4], [485.0, 17270.5], [508.0, 17798.0], [507.0, 16056.0], [506.0, 17884.0], [505.0, 17651.0], [504.0, 17743.5], [502.0, 17865.0], [498.0, 15807.0], [497.0, 16714.666666666668], [542.0, 17373.666666666668], [540.0, 17384.0], [539.0, 17726.0], [538.0, 17442.0], [536.0, 15709.0], [529.0, 17073.53846153846], [516.0, 17512.625], [572.0, 14564.0], [575.0, 15973.0], [561.0, 16244.0], [560.0, 14411.0], [563.0, 15050.0], [562.0, 16456.0], [565.0, 14269.0], [564.0, 16564.0], [574.0, 14605.0], [573.0, 15792.0], [571.0, 15710.0], [570.0, 15908.0], [569.0, 16232.0], [568.0, 16297.0], [559.0, 16887.0], [547.0, 17168.0], [546.0, 17036.25], [551.0, 17248.0], [550.0, 16359.0], [558.0, 15960.0], [555.0, 15288.5], [553.0, 16987.0], [552.0, 14831.0], [567.0, 15897.0], [566.0, 14598.0], [603.0, 13865.0], [596.0, 13565.0], [607.0, 13944.25], [593.0, 13452.0], [592.0, 13396.0], [601.0, 12785.0], [600.0, 13195.0], [591.0, 13605.0], [576.0, 15708.0], [578.0, 13614.0], [577.0, 15397.0], [580.0, 15602.0], [579.0, 14141.0], [583.0, 15590.0], [581.0, 13512.0], [590.0, 13883.0], [589.0, 13716.0], [588.0, 15072.0], [587.0, 15439.0], [586.0, 14525.5], [584.0, 13683.0], [599.0, 14843.0], [598.0, 13775.0], [597.0, 14642.0], [595.0, 13550.0], [594.0, 13095.0], [626.0, 13834.0], [638.0, 12777.666666666666], [635.0, 12685.5], [633.0, 13013.333333333334], [615.0, 13221.333333333334], [612.0, 12667.0], [611.0, 12932.0], [610.0, 14276.5], [608.0, 12381.0], [621.0, 14116.0], [620.0, 12937.5], [618.0, 14098.0], [616.0, 12294.0], [630.0, 14027.0], [629.0, 12412.0], [628.0, 13154.5], [625.0, 12791.0], [624.0, 12448.666666666666], [659.0, 11661.0], [670.0, 12343.0], [666.0, 12795.666666666666], [640.0, 12771.5], [655.0, 11958.0], [654.0, 12712.5], [652.0, 12812.5], [650.0, 13741.0], [649.0, 13549.0], [648.0, 13004.875], [663.0, 12751.0], [662.0, 13083.0], [661.0, 12503.5], [658.0, 13236.0], [657.0, 11245.0], [656.0, 13154.0], [678.0, 11122.0], [700.0, 11522.666666666666], [703.0, 12323.333333333334], [697.0, 11733.333333333334], [688.0, 11655.333333333334], [685.0, 12205.0], [684.0, 12390.333333333334], [681.0, 10780.0], [680.0, 11027.0], [677.0, 12609.0], [676.0, 11867.0], [675.0, 12434.8], [734.0, 10889.0], [735.0, 10673.0], [732.0, 9285.0], [731.0, 11169.0], [730.0, 11234.5], [728.0, 11269.5], [718.0, 10799.5], [706.0, 10270.0], [704.0, 12009.0], [708.0, 10617.0], [707.0, 11838.0], [711.0, 12022.5], [709.0, 11937.0], [716.0, 11344.0], [715.0, 11530.0], [713.0, 10488.0], [712.0, 9985.0], [726.0, 10041.0], [725.0, 10610.2], [720.0, 10638.5], [761.0, 10009.0], [765.0, 8222.0], [736.0, 2022.1428571428573], [740.0, 10794.0], [739.0, 10016.5], [742.0, 10615.0], [741.0, 9540.0], [760.0, 9300.5], [743.0, 10400.0], [762.0, 9326.0], [753.0, 3607.6666666666665], [754.0, 9928.0], [756.0, 9153.0], [755.0, 9263.0], [758.0, 9815.0], [757.0, 9046.0], [752.0, 3803.0], [751.0, 5539.0], [750.0, 4827.0], [749.0, 6425.666666666667], [747.0, 10386.0], [746.0, 10372.0], [745.0, 10367.0], [744.0, 9675.0], [766.0, 8954.0], [764.0, 9449.0], [763.0, 9091.0], [796.0, 4507.0], [799.0, 3580.0], [785.0, 6702.0], [784.0, 7067.0], [787.0, 5803.0], [786.0, 6857.0], [789.0, 4772.0], [788.0, 6230.0], [798.0, 4377.0], [797.0, 4550.0], [795.0, 4687.0], [794.0, 4861.0], [793.0, 4290.0], [792.0, 4606.0], [783.0, 7488.0], [769.0, 7886.0], [768.0, 8335.5], [771.0, 7721.0], [770.0, 8522.0], [773.0, 8664.0], [772.0, 8389.0], [775.0, 6937.0], [774.0, 8348.0], [782.0, 7231.0], [781.0, 6603.0], [780.0, 7279.0], [779.0, 7574.5], [777.0, 7092.0], [776.0, 7609.0], [791.0, 5440.0], [790.0, 4828.0], [824.0, 2249.0], [818.0, 2522.0], [831.0, 2355.5], [829.0, 2295.0], [826.0, 2481.5], [815.0, 2623.0], [801.0, 3345.0], [800.0, 4240.0], [803.0, 3161.0], [802.0, 3230.0], [805.0, 4136.0], [804.0, 3030.0], [807.0, 3687.0], [806.0, 4081.0], [814.0, 3370.0], [813.0, 3639.0], [812.0, 3654.0], [811.0, 2948.0], [810.0, 3680.0], [809.0, 3744.0], [808.0, 3764.0], [823.0, 3184.5], [821.0, 3132.0], [819.0, 2532.0], [817.0, 3535.0], [816.0, 3342.0], [835.0, 1832.5], [838.0, 1620.3333333333335], [839.0, 2672.0], [857.0, 2091.0], [856.0, 2100.0], [859.0, 2492.0], [858.0, 1433.0], [837.0, 1788.0], [836.0, 1031.5], [834.0, 1476.5], [833.0, 1946.0], [832.0, 2768.0], [841.0, 1874.5], [840.0, 1874.0], [843.0, 177.0], [847.0, 1582.0], [846.0, 2346.0], [845.0, 2488.0], [844.0, 2231.6666666666665], [863.0, 2022.3333333333333], [848.0, 2357.0], [853.0, 1941.0], [849.0, 2604.0], [855.0, 2252.0], [854.0, 2453.0], [860.0, 2350.0], [892.0, 1203.0], [881.0, 1138.0], [864.0, 823.5], [884.0, 871.0], [887.0, 1540.0], [886.0, 1195.3333333333333], [883.0, 1268.5], [882.0, 1157.3333333333333], [880.0, 609.0], [879.0, 896.0], [878.0, 1076.0], [876.0, 1126.0], [875.0, 1108.0], [874.0, 1120.0], [873.0, 1209.0], [872.0, 1218.0], [891.0, 954.0], [890.0, 1595.0], [889.0, 1287.0], [888.0, 1113.0], [871.0, 1868.0], [870.0, 2103.0], [869.0, 2345.0], [867.0, 1340.0], [866.0, 1736.5], [893.0, 933.0], [895.0, 1391.5], [926.0, 600.0], [927.0, 570.0], [914.0, 805.0], [912.0, 792.0], [917.0, 1007.0], [915.0, 836.0], [925.0, 565.0], [924.0, 607.0], [923.0, 666.0], [922.0, 658.5], [920.0, 638.0], [901.0, 1913.0], [900.0, 1133.0], [899.0, 999.0], [897.0, 907.0], [911.0, 821.0], [910.0, 1356.5], [908.0, 1268.5], [906.0, 1739.0], [905.0, 1115.25], [919.0, 683.0], [918.0, 724.0], [957.0, 1078.0], [955.0, 1049.25], [953.0, 687.0], [956.0, 832.3333333333334], [954.0, 1112.0], [959.0, 287.0], [958.0, 338.0], [952.0, 1239.0], [935.0, 1168.0], [934.0, 1399.0], [933.0, 1169.0], [932.0, 473.0], [931.0, 1488.0], [930.0, 553.0], [929.0, 604.0], [928.0, 493.0], [943.0, 1032.0], [942.0, 1359.0], [941.0, 1357.0], [940.0, 1059.0], [939.0, 1143.0], [937.0, 752.0], [936.0, 430.0], [951.0, 314.0], [950.0, 383.0], [949.0, 1000.0], [948.0, 1144.0], [947.0, 932.0], [946.0, 1144.0], [945.0, 1080.0], [944.0, 1169.0], [1.0, 32233.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}, {"data": [[496.3040000000001, 14591.570000000005]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 959.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14770.433333333332, "minX": 1.75636824E12, "maxY": 19330.65, "series": [{"data": [[1.75636824E12, 14770.433333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75636824E12, 19330.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636824E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14591.570000000005, "minX": 1.75636824E12, "maxY": 14591.570000000005, "series": [{"data": [[1.75636824E12, 14591.570000000005]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636824E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 14559.293999999993, "minX": 1.75636824E12, "maxY": 14559.293999999993, "series": [{"data": [[1.75636824E12, 14559.293999999993]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636824E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1109.2990000000004, "minX": 1.75636824E12, "maxY": 1109.2990000000004, "series": [{"data": [[1.75636824E12, 1109.2990000000004]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636824E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 177.0, "minX": 1.75636824E12, "maxY": 31798.0, "series": [{"data": [[1.75636824E12, 31798.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75636824E12, 23485.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75636824E12, 30331.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75636824E12, 26561.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75636824E12, 177.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75636824E12, 17168.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636824E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1027.5, "minX": 3.0, "maxY": 32233.0, "series": [{"data": [[32.0, 22625.0], [36.0, 11879.0], [48.0, 13325.5], [3.0, 30749.0], [76.0, 1027.5], [78.0, 17651.0], [5.0, 4828.0], [90.0, 21009.5], [6.0, 7488.0], [97.0, 18771.0], [7.0, 15487.5], [115.0, 19623.0], [8.0, 7327.0], [9.0, 27961.0], [11.0, 8522.0], [13.0, 25296.5], [15.0, 9454.0], [16.0, 30084.5], [18.0, 3587.0], [19.0, 20428.5], [20.0, 16506.0], [21.0, 23820.0], [23.0, 21998.0], [26.0, 13745.5], [27.0, 10615.0], [29.0, 12695.0], [31.0, 2532.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 32233.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 115.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 30749.0, "series": [{"data": [[32.0, 22625.0], [36.0, 11879.0], [48.0, 13325.5], [3.0, 30749.0], [76.0, 1027.5], [78.0, 17651.0], [5.0, 4828.0], [90.0, 21009.5], [6.0, 7488.0], [97.0, 18771.0], [7.0, 15487.5], [115.0, 19623.0], [8.0, 7326.5], [9.0, 27961.0], [11.0, 8522.0], [13.0, 25296.5], [15.0, 9454.0], [16.0, 30084.5], [18.0, 3587.0], [19.0, 20428.5], [20.0, 16506.0], [21.0, 23820.0], [23.0, 21998.0], [26.0, 13745.5], [27.0, 10614.0], [29.0, 12695.0], [31.0, 2532.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[6.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 115.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636824E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636824E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636824E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75636824E12, "maxY": 16.65, "series": [{"data": [[1.75636824E12, 16.65]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.75636824E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636824E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75636824E12, "maxY": 16.65, "series": [{"data": [[1.75636824E12, 16.65]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-success", "isController": false}, {"data": [[1.75636824E12, 0.016666666666666666]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636824E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75636824E12, "maxY": 16.65, "series": [{"data": [[1.75636824E12, 16.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75636824E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636824E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

