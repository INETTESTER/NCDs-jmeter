/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9773.0, "minX": 0.0, "maxY": 19627.0, "series": [{"data": [[0.0, 9773.0], [0.1, 11428.0], [0.2, 11515.0], [0.3, 11515.0], [0.4, 11949.0], [0.5, 12706.0], [0.6, 12744.0], [0.7, 12828.0], [0.8, 13023.0], [0.9, 13285.0], [1.0, 13339.0], [1.1, 13346.0], [1.2, 13372.0], [1.3, 13482.0], [1.4, 13482.0], [1.5, 13489.0], [1.6, 13511.0], [1.7, 13518.0], [1.8, 13530.0], [1.9, 13531.0], [2.0, 13572.0], [2.1, 13584.0], [2.2, 13585.0], [2.3, 13659.0], [2.4, 13677.0], [2.5, 13698.0], [2.6, 13705.0], [2.7, 13720.0], [2.8, 13725.0], [2.9, 13769.0], [3.0, 13776.0], [3.1, 13776.0], [3.2, 13791.0], [3.3, 13798.0], [3.4, 13846.0], [3.5, 13867.0], [3.6, 13952.0], [3.7, 14013.0], [3.8, 14027.0], [3.9, 14030.0], [4.0, 14033.0], [4.1, 14045.0], [4.2, 14058.0], [4.3, 14058.0], [4.4, 14063.0], [4.5, 14073.0], [4.6, 14087.0], [4.7, 14118.0], [4.8, 14147.0], [4.9, 14162.0], [5.0, 14189.0], [5.1, 14218.0], [5.2, 14232.0], [5.3, 14238.0], [5.4, 14268.0], [5.5, 14281.0], [5.6, 14312.0], [5.7, 14314.0], [5.8, 14322.0], [5.9, 14328.0], [6.0, 14350.0], [6.1, 14350.0], [6.2, 14362.0], [6.3, 14365.0], [6.4, 14368.0], [6.5, 14386.0], [6.6, 14401.0], [6.7, 14401.0], [6.8, 14405.0], [6.9, 14415.0], [7.0, 14417.0], [7.1, 14422.0], [7.2, 14424.0], [7.3, 14425.0], [7.4, 14428.0], [7.5, 14435.0], [7.6, 14443.0], [7.7, 14449.0], [7.8, 14463.0], [7.9, 14467.0], [8.0, 14475.0], [8.1, 14478.0], [8.2, 14492.0], [8.3, 14495.0], [8.4, 14512.0], [8.5, 14512.0], [8.6, 14521.0], [8.7, 14539.0], [8.8, 14569.0], [8.9, 14582.0], [9.0, 14586.0], [9.1, 14587.0], [9.2, 14591.0], [9.3, 14606.0], [9.4, 14607.0], [9.5, 14619.0], [9.6, 14619.0], [9.7, 14626.0], [9.8, 14633.0], [9.9, 14641.0], [10.0, 14649.0], [10.1, 14652.0], [10.2, 14655.0], [10.3, 14658.0], [10.4, 14671.0], [10.5, 14674.0], [10.6, 14677.0], [10.7, 14677.0], [10.8, 14679.0], [10.9, 14681.0], [11.0, 14691.0], [11.1, 14705.0], [11.2, 14706.0], [11.3, 14713.0], [11.4, 14719.0], [11.5, 14722.0], [11.6, 14730.0], [11.7, 14730.0], [11.8, 14732.0], [11.9, 14732.0], [12.0, 14735.0], [12.1, 14740.0], [12.2, 14748.0], [12.3, 14773.0], [12.4, 14776.0], [12.5, 14777.0], [12.6, 14778.0], [12.7, 14778.0], [12.8, 14786.0], [12.9, 14792.0], [13.0, 14795.0], [13.1, 14795.0], [13.2, 14803.0], [13.3, 14810.0], [13.4, 14815.0], [13.5, 14819.0], [13.6, 14824.0], [13.7, 14830.0], [13.8, 14832.0], [13.9, 14833.0], [14.0, 14834.0], [14.1, 14835.0], [14.2, 14836.0], [14.3, 14837.0], [14.4, 14839.0], [14.5, 14841.0], [14.6, 14841.0], [14.7, 14842.0], [14.8, 14842.0], [14.9, 14843.0], [15.0, 14843.0], [15.1, 14853.0], [15.2, 14855.0], [15.3, 14856.0], [15.4, 14858.0], [15.5, 14859.0], [15.6, 14861.0], [15.7, 14870.0], [15.8, 14871.0], [15.9, 14872.0], [16.0, 14873.0], [16.1, 14876.0], [16.2, 14880.0], [16.3, 14887.0], [16.4, 14890.0], [16.5, 14892.0], [16.6, 14894.0], [16.7, 14895.0], [16.8, 14900.0], [16.9, 14904.0], [17.0, 14905.0], [17.1, 14908.0], [17.2, 14913.0], [17.3, 14916.0], [17.4, 14917.0], [17.5, 14923.0], [17.6, 14925.0], [17.7, 14925.0], [17.8, 14930.0], [17.9, 14934.0], [18.0, 14934.0], [18.1, 14935.0], [18.2, 14936.0], [18.3, 14943.0], [18.4, 14945.0], [18.5, 14948.0], [18.6, 14952.0], [18.7, 14953.0], [18.8, 14953.0], [18.9, 14954.0], [19.0, 14955.0], [19.1, 14957.0], [19.2, 14957.0], [19.3, 14958.0], [19.4, 14958.0], [19.5, 14959.0], [19.6, 14959.0], [19.7, 14962.0], [19.8, 14963.0], [19.9, 14963.0], [20.0, 14963.0], [20.1, 14965.0], [20.2, 14966.0], [20.3, 14967.0], [20.4, 14968.0], [20.5, 14970.0], [20.6, 14973.0], [20.7, 14973.0], [20.8, 14975.0], [20.9, 14983.0], [21.0, 14984.0], [21.1, 14987.0], [21.2, 14988.0], [21.3, 14989.0], [21.4, 14990.0], [21.5, 14995.0], [21.6, 14998.0], [21.7, 15000.0], [21.8, 15002.0], [21.9, 15003.0], [22.0, 15005.0], [22.1, 15007.0], [22.2, 15011.0], [22.3, 15015.0], [22.4, 15019.0], [22.5, 15025.0], [22.6, 15026.0], [22.7, 15027.0], [22.8, 15031.0], [22.9, 15035.0], [23.0, 15037.0], [23.1, 15037.0], [23.2, 15038.0], [23.3, 15039.0], [23.4, 15045.0], [23.5, 15046.0], [23.6, 15046.0], [23.7, 15047.0], [23.8, 15048.0], [23.9, 15050.0], [24.0, 15056.0], [24.1, 15067.0], [24.2, 15067.0], [24.3, 15070.0], [24.4, 15076.0], [24.5, 15086.0], [24.6, 15090.0], [24.7, 15093.0], [24.8, 15095.0], [24.9, 15095.0], [25.0, 15096.0], [25.1, 15098.0], [25.2, 15101.0], [25.3, 15102.0], [25.4, 15102.0], [25.5, 15105.0], [25.6, 15108.0], [25.7, 15108.0], [25.8, 15109.0], [25.9, 15117.0], [26.0, 15119.0], [26.1, 15122.0], [26.2, 15125.0], [26.3, 15131.0], [26.4, 15131.0], [26.5, 15134.0], [26.6, 15135.0], [26.7, 15137.0], [26.8, 15137.0], [26.9, 15138.0], [27.0, 15140.0], [27.1, 15140.0], [27.2, 15141.0], [27.3, 15143.0], [27.4, 15147.0], [27.5, 15160.0], [27.6, 15167.0], [27.7, 15169.0], [27.8, 15169.0], [27.9, 15170.0], [28.0, 15174.0], [28.1, 15177.0], [28.2, 15181.0], [28.3, 15181.0], [28.4, 15183.0], [28.5, 15184.0], [28.6, 15185.0], [28.7, 15186.0], [28.8, 15186.0], [28.9, 15186.0], [29.0, 15188.0], [29.1, 15190.0], [29.2, 15192.0], [29.3, 15194.0], [29.4, 15195.0], [29.5, 15199.0], [29.6, 15202.0], [29.7, 15202.0], [29.8, 15205.0], [29.9, 15207.0], [30.0, 15208.0], [30.1, 15209.0], [30.2, 15210.0], [30.3, 15210.0], [30.4, 15211.0], [30.5, 15212.0], [30.6, 15215.0], [30.7, 15216.0], [30.8, 15216.0], [30.9, 15218.0], [31.0, 15224.0], [31.1, 15226.0], [31.2, 15228.0], [31.3, 15235.0], [31.4, 15240.0], [31.5, 15242.0], [31.6, 15242.0], [31.7, 15242.0], [31.8, 15243.0], [31.9, 15243.0], [32.0, 15243.0], [32.1, 15243.0], [32.2, 15246.0], [32.3, 15247.0], [32.4, 15248.0], [32.5, 15252.0], [32.6, 15254.0], [32.7, 15257.0], [32.8, 15257.0], [32.9, 15257.0], [33.0, 15258.0], [33.1, 15259.0], [33.2, 15260.0], [33.3, 15262.0], [33.4, 15267.0], [33.5, 15269.0], [33.6, 15271.0], [33.7, 15272.0], [33.8, 15274.0], [33.9, 15275.0], [34.0, 15277.0], [34.1, 15287.0], [34.2, 15289.0], [34.3, 15289.0], [34.4, 15290.0], [34.5, 15292.0], [34.6, 15299.0], [34.7, 15299.0], [34.8, 15299.0], [34.9, 15302.0], [35.0, 15307.0], [35.1, 15307.0], [35.2, 15321.0], [35.3, 15321.0], [35.4, 15322.0], [35.5, 15324.0], [35.6, 15325.0], [35.7, 15325.0], [35.8, 15330.0], [35.9, 15330.0], [36.0, 15332.0], [36.1, 15334.0], [36.2, 15336.0], [36.3, 15339.0], [36.4, 15341.0], [36.5, 15342.0], [36.6, 15345.0], [36.7, 15347.0], [36.8, 15349.0], [36.9, 15354.0], [37.0, 15355.0], [37.1, 15357.0], [37.2, 15357.0], [37.3, 15357.0], [37.4, 15364.0], [37.5, 15369.0], [37.6, 15371.0], [37.7, 15372.0], [37.8, 15376.0], [37.9, 15378.0], [38.0, 15380.0], [38.1, 15381.0], [38.2, 15386.0], [38.3, 15388.0], [38.4, 15389.0], [38.5, 15393.0], [38.6, 15395.0], [38.7, 15396.0], [38.8, 15399.0], [38.9, 15400.0], [39.0, 15400.0], [39.1, 15403.0], [39.2, 15403.0], [39.3, 15404.0], [39.4, 15411.0], [39.5, 15411.0], [39.6, 15413.0], [39.7, 15413.0], [39.8, 15415.0], [39.9, 15417.0], [40.0, 15417.0], [40.1, 15422.0], [40.2, 15422.0], [40.3, 15423.0], [40.4, 15424.0], [40.5, 15425.0], [40.6, 15427.0], [40.7, 15431.0], [40.8, 15434.0], [40.9, 15437.0], [41.0, 15441.0], [41.1, 15444.0], [41.2, 15444.0], [41.3, 15445.0], [41.4, 15448.0], [41.5, 15452.0], [41.6, 15452.0], [41.7, 15452.0], [41.8, 15458.0], [41.9, 15460.0], [42.0, 15467.0], [42.1, 15471.0], [42.2, 15471.0], [42.3, 15481.0], [42.4, 15487.0], [42.5, 15487.0], [42.6, 15493.0], [42.7, 15494.0], [42.8, 15494.0], [42.9, 15495.0], [43.0, 15496.0], [43.1, 15496.0], [43.2, 15497.0], [43.3, 15498.0], [43.4, 15500.0], [43.5, 15503.0], [43.6, 15504.0], [43.7, 15505.0], [43.8, 15506.0], [43.9, 15507.0], [44.0, 15512.0], [44.1, 15518.0], [44.2, 15523.0], [44.3, 15524.0], [44.4, 15524.0], [44.5, 15524.0], [44.6, 15526.0], [44.7, 15527.0], [44.8, 15528.0], [44.9, 15530.0], [45.0, 15531.0], [45.1, 15532.0], [45.2, 15534.0], [45.3, 15534.0], [45.4, 15536.0], [45.5, 15536.0], [45.6, 15538.0], [45.7, 15543.0], [45.8, 15544.0], [45.9, 15545.0], [46.0, 15548.0], [46.1, 15550.0], [46.2, 15550.0], [46.3, 15558.0], [46.4, 15558.0], [46.5, 15560.0], [46.6, 15561.0], [46.7, 15567.0], [46.8, 15575.0], [46.9, 15577.0], [47.0, 15582.0], [47.1, 15584.0], [47.2, 15586.0], [47.3, 15589.0], [47.4, 15590.0], [47.5, 15591.0], [47.6, 15593.0], [47.7, 15597.0], [47.8, 15599.0], [47.9, 15600.0], [48.0, 15601.0], [48.1, 15602.0], [48.2, 15603.0], [48.3, 15607.0], [48.4, 15609.0], [48.5, 15609.0], [48.6, 15610.0], [48.7, 15612.0], [48.8, 15614.0], [48.9, 15614.0], [49.0, 15615.0], [49.1, 15619.0], [49.2, 15627.0], [49.3, 15634.0], [49.4, 15636.0], [49.5, 15636.0], [49.6, 15639.0], [49.7, 15639.0], [49.8, 15640.0], [49.9, 15641.0], [50.0, 15643.0], [50.1, 15647.0], [50.2, 15649.0], [50.3, 15650.0], [50.4, 15651.0], [50.5, 15655.0], [50.6, 15658.0], [50.7, 15659.0], [50.8, 15661.0], [50.9, 15661.0], [51.0, 15663.0], [51.1, 15666.0], [51.2, 15671.0], [51.3, 15672.0], [51.4, 15673.0], [51.5, 15676.0], [51.6, 15676.0], [51.7, 15677.0], [51.8, 15681.0], [51.9, 15682.0], [52.0, 15684.0], [52.1, 15685.0], [52.2, 15686.0], [52.3, 15687.0], [52.4, 15689.0], [52.5, 15691.0], [52.6, 15691.0], [52.7, 15695.0], [52.8, 15697.0], [52.9, 15698.0], [53.0, 15702.0], [53.1, 15703.0], [53.2, 15711.0], [53.3, 15712.0], [53.4, 15715.0], [53.5, 15715.0], [53.6, 15715.0], [53.7, 15720.0], [53.8, 15721.0], [53.9, 15722.0], [54.0, 15723.0], [54.1, 15724.0], [54.2, 15724.0], [54.3, 15725.0], [54.4, 15727.0], [54.5, 15728.0], [54.6, 15729.0], [54.7, 15729.0], [54.8, 15732.0], [54.9, 15732.0], [55.0, 15741.0], [55.1, 15746.0], [55.2, 15753.0], [55.3, 15758.0], [55.4, 15760.0], [55.5, 15764.0], [55.6, 15764.0], [55.7, 15766.0], [55.8, 15767.0], [55.9, 15768.0], [56.0, 15768.0], [56.1, 15770.0], [56.2, 15772.0], [56.3, 15772.0], [56.4, 15775.0], [56.5, 15775.0], [56.6, 15780.0], [56.7, 15781.0], [56.8, 15782.0], [56.9, 15782.0], [57.0, 15783.0], [57.1, 15783.0], [57.2, 15786.0], [57.3, 15797.0], [57.4, 15805.0], [57.5, 15814.0], [57.6, 15815.0], [57.7, 15815.0], [57.8, 15815.0], [57.9, 15822.0], [58.0, 15822.0], [58.1, 15824.0], [58.2, 15825.0], [58.3, 15825.0], [58.4, 15827.0], [58.5, 15827.0], [58.6, 15831.0], [58.7, 15833.0], [58.8, 15834.0], [58.9, 15836.0], [59.0, 15838.0], [59.1, 15840.0], [59.2, 15848.0], [59.3, 15849.0], [59.4, 15854.0], [59.5, 15857.0], [59.6, 15859.0], [59.7, 15860.0], [59.8, 15881.0], [59.9, 15883.0], [60.0, 15884.0], [60.1, 15889.0], [60.2, 15891.0], [60.3, 15895.0], [60.4, 15895.0], [60.5, 15895.0], [60.6, 15899.0], [60.7, 15899.0], [60.8, 15907.0], [60.9, 15908.0], [61.0, 15910.0], [61.1, 15917.0], [61.2, 15917.0], [61.3, 15922.0], [61.4, 15923.0], [61.5, 15928.0], [61.6, 15932.0], [61.7, 15938.0], [61.8, 15970.0], [61.9, 15987.0], [62.0, 15989.0], [62.1, 16001.0], [62.2, 16005.0], [62.3, 16006.0], [62.4, 16007.0], [62.5, 16009.0], [62.6, 16013.0], [62.7, 16014.0], [62.8, 16016.0], [62.9, 16017.0], [63.0, 16029.0], [63.1, 16035.0], [63.2, 16054.0], [63.3, 16058.0], [63.4, 16060.0], [63.5, 16063.0], [63.6, 16066.0], [63.7, 16069.0], [63.8, 16075.0], [63.9, 16076.0], [64.0, 16094.0], [64.1, 16111.0], [64.2, 16115.0], [64.3, 16116.0], [64.4, 16117.0], [64.5, 16138.0], [64.6, 16144.0], [64.7, 16156.0], [64.8, 16162.0], [64.9, 16162.0], [65.0, 16166.0], [65.1, 16168.0], [65.2, 16169.0], [65.3, 16186.0], [65.4, 16190.0], [65.5, 16610.0], [65.6, 16635.0], [65.7, 16657.0], [65.8, 16706.0], [65.9, 16773.0], [66.0, 16808.0], [66.1, 16809.0], [66.2, 16811.0], [66.3, 16901.0], [66.4, 16956.0], [66.5, 16960.0], [66.6, 17003.0], [66.7, 17030.0], [66.8, 17046.0], [66.9, 17059.0], [67.0, 17065.0], [67.1, 17094.0], [67.2, 17138.0], [67.3, 17160.0], [67.4, 17174.0], [67.5, 17208.0], [67.6, 17238.0], [67.7, 17244.0], [67.8, 17264.0], [67.9, 17274.0], [68.0, 17280.0], [68.1, 17318.0], [68.2, 17324.0], [68.3, 17333.0], [68.4, 17342.0], [68.5, 17358.0], [68.6, 17361.0], [68.7, 17361.0], [68.8, 17368.0], [68.9, 17385.0], [69.0, 17392.0], [69.1, 17397.0], [69.2, 17398.0], [69.3, 17425.0], [69.4, 17428.0], [69.5, 17433.0], [69.6, 17435.0], [69.7, 17439.0], [69.8, 17443.0], [69.9, 17451.0], [70.0, 17467.0], [70.1, 17474.0], [70.2, 17474.0], [70.3, 17483.0], [70.4, 17483.0], [70.5, 17505.0], [70.6, 17506.0], [70.7, 17509.0], [70.8, 17511.0], [70.9, 17512.0], [71.0, 17527.0], [71.1, 17541.0], [71.2, 17549.0], [71.3, 17551.0], [71.4, 17557.0], [71.5, 17559.0], [71.6, 17559.0], [71.7, 17566.0], [71.8, 17573.0], [71.9, 17582.0], [72.0, 17592.0], [72.1, 17597.0], [72.2, 17610.0], [72.3, 17612.0], [72.4, 17617.0], [72.5, 17619.0], [72.6, 17620.0], [72.7, 17622.0], [72.8, 17623.0], [72.9, 17628.0], [73.0, 17631.0], [73.1, 17649.0], [73.2, 17653.0], [73.3, 17660.0], [73.4, 17662.0], [73.5, 17668.0], [73.6, 17682.0], [73.7, 17688.0], [73.8, 17690.0], [73.9, 17695.0], [74.0, 17698.0], [74.1, 17709.0], [74.2, 17711.0], [74.3, 17713.0], [74.4, 17720.0], [74.5, 17720.0], [74.6, 17723.0], [74.7, 17730.0], [74.8, 17741.0], [74.9, 17741.0], [75.0, 17746.0], [75.1, 17753.0], [75.2, 17755.0], [75.3, 17755.0], [75.4, 17759.0], [75.5, 17761.0], [75.6, 17762.0], [75.7, 17767.0], [75.8, 17768.0], [75.9, 17768.0], [76.0, 17774.0], [76.1, 17782.0], [76.2, 17790.0], [76.3, 17794.0], [76.4, 17802.0], [76.5, 17810.0], [76.6, 17813.0], [76.7, 17822.0], [76.8, 17826.0], [76.9, 17828.0], [77.0, 17831.0], [77.1, 17847.0], [77.2, 17854.0], [77.3, 17854.0], [77.4, 17863.0], [77.5, 17886.0], [77.6, 17895.0], [77.7, 17900.0], [77.8, 17908.0], [77.9, 17916.0], [78.0, 17925.0], [78.1, 17926.0], [78.2, 17928.0], [78.3, 17956.0], [78.4, 17963.0], [78.5, 17964.0], [78.6, 17966.0], [78.7, 17983.0], [78.8, 17989.0], [78.9, 17991.0], [79.0, 17992.0], [79.1, 17992.0], [79.2, 18000.0], [79.3, 18005.0], [79.4, 18015.0], [79.5, 18021.0], [79.6, 18022.0], [79.7, 18023.0], [79.8, 18029.0], [79.9, 18030.0], [80.0, 18034.0], [80.1, 18034.0], [80.2, 18035.0], [80.3, 18038.0], [80.4, 18038.0], [80.5, 18043.0], [80.6, 18043.0], [80.7, 18054.0], [80.8, 18067.0], [80.9, 18068.0], [81.0, 18070.0], [81.1, 18074.0], [81.2, 18084.0], [81.3, 18087.0], [81.4, 18094.0], [81.5, 18096.0], [81.6, 18098.0], [81.7, 18099.0], [81.8, 18107.0], [81.9, 18111.0], [82.0, 18111.0], [82.1, 18114.0], [82.2, 18115.0], [82.3, 18122.0], [82.4, 18130.0], [82.5, 18146.0], [82.6, 18146.0], [82.7, 18155.0], [82.8, 18158.0], [82.9, 18165.0], [83.0, 18168.0], [83.1, 18178.0], [83.2, 18183.0], [83.3, 18193.0], [83.4, 18197.0], [83.5, 18206.0], [83.6, 18206.0], [83.7, 18215.0], [83.8, 18216.0], [83.9, 18219.0], [84.0, 18221.0], [84.1, 18228.0], [84.2, 18233.0], [84.3, 18236.0], [84.4, 18241.0], [84.5, 18243.0], [84.6, 18263.0], [84.7, 18274.0], [84.8, 18276.0], [84.9, 18283.0], [85.0, 18291.0], [85.1, 18310.0], [85.2, 18333.0], [85.3, 18351.0], [85.4, 18359.0], [85.5, 18374.0], [85.6, 18385.0], [85.7, 18395.0], [85.8, 18395.0], [85.9, 18405.0], [86.0, 18425.0], [86.1, 18430.0], [86.2, 18435.0], [86.3, 18436.0], [86.4, 18437.0], [86.5, 18458.0], [86.6, 18461.0], [86.7, 18466.0], [86.8, 18483.0], [86.9, 18497.0], [87.0, 18499.0], [87.1, 18502.0], [87.2, 18503.0], [87.3, 18513.0], [87.4, 18518.0], [87.5, 18521.0], [87.6, 18521.0], [87.7, 18541.0], [87.8, 18546.0], [87.9, 18553.0], [88.0, 18556.0], [88.1, 18559.0], [88.2, 18565.0], [88.3, 18574.0], [88.4, 18580.0], [88.5, 18581.0], [88.6, 18588.0], [88.7, 18606.0], [88.8, 18628.0], [88.9, 18633.0], [89.0, 18639.0], [89.1, 18641.0], [89.2, 18660.0], [89.3, 18668.0], [89.4, 18708.0], [89.5, 18734.0], [89.6, 18737.0], [89.7, 18751.0], [89.8, 18758.0], [89.9, 18762.0], [90.0, 18782.0], [90.1, 18788.0], [90.2, 18794.0], [90.3, 18805.0], [90.4, 18808.0], [90.5, 18825.0], [90.6, 18848.0], [90.7, 18850.0], [90.8, 18851.0], [90.9, 18852.0], [91.0, 18859.0], [91.1, 18865.0], [91.2, 18874.0], [91.3, 18885.0], [91.4, 18888.0], [91.5, 18894.0], [91.6, 18896.0], [91.7, 18901.0], [91.8, 18904.0], [91.9, 18910.0], [92.0, 18911.0], [92.1, 18917.0], [92.2, 18925.0], [92.3, 18937.0], [92.4, 18938.0], [92.5, 18939.0], [92.6, 18964.0], [92.7, 18965.0], [92.8, 18983.0], [92.9, 18984.0], [93.0, 18989.0], [93.1, 18994.0], [93.2, 18998.0], [93.3, 19005.0], [93.4, 19007.0], [93.5, 19038.0], [93.6, 19049.0], [93.7, 19052.0], [93.8, 19056.0], [93.9, 19060.0], [94.0, 19063.0], [94.1, 19064.0], [94.2, 19071.0], [94.3, 19078.0], [94.4, 19089.0], [94.5, 19101.0], [94.6, 19107.0], [94.7, 19115.0], [94.8, 19116.0], [94.9, 19117.0], [95.0, 19122.0], [95.1, 19136.0], [95.2, 19143.0], [95.3, 19150.0], [95.4, 19155.0], [95.5, 19168.0], [95.6, 19169.0], [95.7, 19175.0], [95.8, 19207.0], [95.9, 19212.0], [96.0, 19215.0], [96.1, 19218.0], [96.2, 19231.0], [96.3, 19265.0], [96.4, 19289.0], [96.5, 19292.0], [96.6, 19298.0], [96.7, 19300.0], [96.8, 19301.0], [96.9, 19303.0], [97.0, 19309.0], [97.1, 19317.0], [97.2, 19344.0], [97.3, 19362.0], [97.4, 19365.0], [97.5, 19377.0], [97.6, 19380.0], [97.7, 19380.0], [97.8, 19400.0], [97.9, 19423.0], [98.0, 19425.0], [98.1, 19429.0], [98.2, 19429.0], [98.3, 19431.0], [98.4, 19500.0], [98.5, 19505.0], [98.6, 19519.0], [98.7, 19532.0], [98.8, 19533.0], [98.9, 19551.0], [99.0, 19556.0], [99.1, 19557.0], [99.2, 19566.0], [99.3, 19569.0], [99.4, 19583.0], [99.5, 19598.0], [99.6, 19600.0], [99.7, 19619.0], [99.8, 19626.0], [99.9, 19627.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 9700.0, "maxY": 53.0, "series": [{"data": [[9700.0, 1.0], [11500.0, 1.0], [11400.0, 1.0], [11900.0, 1.0], [11800.0, 1.0], [12700.0, 2.0], [13000.0, 1.0], [12800.0, 1.0], [13200.0, 1.0], [13300.0, 3.0], [13600.0, 3.0], [13800.0, 2.0], [13500.0, 7.0], [13400.0, 2.0], [13700.0, 8.0], [14000.0, 10.0], [14100.0, 5.0], [13900.0, 1.0], [14200.0, 5.0], [14300.0, 10.0], [14400.0, 18.0], [14500.0, 9.0], [14700.0, 21.0], [14600.0, 18.0], [14800.0, 36.0], [14900.0, 48.0], [15000.0, 35.0], [15100.0, 44.0], [15200.0, 53.0], [15300.0, 40.0], [15400.0, 45.0], [15500.0, 45.0], [15600.0, 51.0], [15700.0, 44.0], [15800.0, 34.0], [15900.0, 13.0], [16000.0, 20.0], [16100.0, 14.0], [17300.0, 12.0], [17200.0, 6.0], [16600.0, 3.0], [16700.0, 2.0], [16800.0, 3.0], [16900.0, 3.0], [17000.0, 6.0], [17400.0, 12.0], [17100.0, 3.0], [18200.0, 16.0], [17500.0, 17.0], [17600.0, 20.0], [17700.0, 23.0], [17800.0, 13.0], [17900.0, 15.0], [18000.0, 26.0], [18100.0, 17.0], [18300.0, 8.0], [18400.0, 12.0], [19200.0, 9.0], [18500.0, 16.0], [18600.0, 7.0], [18700.0, 9.0], [18800.0, 14.0], [18900.0, 16.0], [19000.0, 12.0], [19100.0, 13.0], [19300.0, 11.0], [19400.0, 6.0], [19500.0, 12.0], [19600.0, 4.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 38.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 962.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 962.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 38.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.6270000000002, "minX": 1.75637166E12, "maxY": 501.6270000000002, "series": [{"data": [[1.75637166E12, 501.6270000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637166E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9773.0, "minX": 1.0, "maxY": 19627.0, "series": [{"data": [[4.0, 19101.333333333332], [5.0, 19212.0], [6.0, 19533.0], [8.0, 19270.0], [10.0, 19181.5], [15.0, 19494.2], [17.0, 19339.0], [18.0, 19380.0], [19.0, 19377.0], [21.0, 19480.0], [22.0, 18762.0], [23.0, 19344.0], [24.0, 18751.0], [25.0, 19064.0], [27.0, 19317.5], [28.0, 19101.0], [30.0, 19043.5], [33.0, 19566.0], [32.0, 19537.0], [35.0, 19557.0], [34.0, 19007.0], [36.0, 19122.0], [39.0, 19313.0], [38.0, 18998.0], [41.0, 19289.0], [40.0, 18885.0], [42.0, 19150.0], [44.0, 19210.0], [47.0, 18896.0], [46.0, 19218.5], [49.0, 19169.0], [48.0, 18808.0], [53.0, 19127.0], [54.0, 19386.666666666668], [56.0, 19279.5], [59.0, 19135.333333333332], [60.0, 18888.0], [63.0, 19116.0], [62.0, 19020.0], [66.0, 19292.0], [65.0, 19365.0], [64.0, 18559.0], [71.0, 19301.0], [70.0, 19303.0], [69.0, 19218.0], [68.0, 19240.0], [75.0, 18633.0], [74.0, 18911.0], [73.0, 18964.0], [72.0, 19298.0], [79.0, 19231.0], [78.0, 19175.0], [77.0, 18758.0], [76.0, 18805.0], [83.0, 18939.0], [82.0, 18917.0], [81.0, 19207.0], [80.0, 18994.0], [87.0, 18574.0], [86.0, 18639.0], [85.0, 19168.0], [84.0, 19089.0], [91.0, 19117.0], [90.0, 18581.0], [89.0, 18851.0], [88.0, 19155.0], [95.0, 19063.0], [94.0, 19071.0], [93.0, 18989.0], [92.0, 19005.0], [99.0, 18556.0], [97.0, 19060.0], [96.0, 18483.0], [103.0, 18782.0], [102.0, 18430.0], [101.0, 18794.0], [100.0, 18729.5], [107.0, 18894.0], [106.0, 18910.0], [105.0, 18405.0], [104.0, 18546.0], [111.0, 18731.0], [109.0, 18437.0], [108.0, 18734.0], [115.0, 18904.0], [114.0, 18461.0], [113.0, 18580.0], [112.0, 18668.0], [119.0, 18099.0], [118.0, 18623.5], [116.0, 18518.0], [122.0, 18395.0], [121.0, 18194.5], [126.0, 18852.0], [125.0, 18737.0], [124.0, 18427.0], [135.0, 18168.0], [134.0, 18513.0], [133.0, 18660.0], [132.0, 18219.0], [131.0, 18541.0], [130.0, 18291.0], [129.0, 18859.0], [128.0, 18701.5], [143.0, 18206.0], [142.0, 18216.0], [141.0, 18458.0], [140.0, 18708.0], [139.0, 18206.0], [138.0, 18233.0], [137.0, 18107.0], [136.0, 18788.0], [151.0, 18449.0], [149.0, 18502.0], [148.0, 18466.0], [147.0, 18628.0], [146.0, 18499.0], [145.0, 18236.0], [144.0, 18094.0], [159.0, 18328.0], [156.0, 17928.0], [155.0, 18158.5], [153.0, 18068.0], [152.0, 18070.0], [167.0, 18521.0], [166.0, 18165.0], [165.0, 18130.0], [164.0, 18228.0], [163.0, 18043.0], [162.0, 18274.0], [161.0, 18254.5], [174.0, 17612.0], [173.0, 18170.5], [171.0, 18067.0], [170.0, 17964.0], [169.0, 17966.0], [168.0, 18503.0], [183.0, 18374.0], [182.0, 18115.0], [181.0, 17886.0], [180.0, 18082.0], [177.0, 18183.0], [176.0, 18392.0], [191.0, 18071.5], [189.0, 18034.0], [188.0, 17782.0], [187.0, 18057.0], [185.0, 18111.0], [184.0, 18276.0], [198.0, 17723.0], [197.0, 17992.0], [196.0, 18161.5], [192.0, 17759.0], [207.0, 17768.0], [206.0, 17849.0], [204.0, 17755.0], [203.0, 18004.0], [200.0, 18070.0], [214.0, 17876.0], [212.0, 18034.0], [211.0, 17709.0], [210.0, 17751.0], [208.0, 17753.0], [223.0, 18197.0], [222.0, 17385.0], [221.0, 18221.0], [220.0, 17828.0], [219.0, 17998.5], [217.0, 17622.0], [216.0, 18198.0], [231.0, 17829.333333333332], [228.0, 17916.0], [227.0, 17690.0], [226.0, 17683.0], [224.0, 17610.0], [239.0, 18158.0], [238.0, 17631.0], [237.0, 17428.0], [236.0, 18178.0], [235.0, 17623.0], [234.0, 17755.0], [233.0, 17634.5], [247.0, 17649.0], [246.0, 17534.666666666668], [243.0, 18146.0], [242.0, 18146.0], [241.0, 17908.0], [240.0, 18087.0], [253.0, 17675.5], [251.0, 18043.0], [250.0, 17722.0], [248.0, 18035.0], [270.0, 17768.0], [269.0, 17497.5], [267.0, 17474.0], [266.0, 17723.0], [264.0, 18015.0], [263.0, 17755.2], [258.0, 18084.0], [257.0, 18000.0], [256.0, 17685.0], [275.0, 17826.0], [287.0, 17838.0], [285.0, 17836.5], [283.0, 17577.333333333332], [280.0, 17713.5], [278.0, 17208.0], [277.0, 17368.0], [276.0, 17506.0], [274.0, 17698.0], [273.0, 17520.333333333332], [291.0, 17398.0], [302.0, 17280.0], [303.0, 17030.0], [301.0, 17519.0], [299.0, 17766.5], [297.0, 17550.0], [295.0, 17745.5], [293.0, 17741.0], [292.0, 17392.0], [290.0, 17694.0], [289.0, 17274.0], [288.0, 17435.0], [318.0, 17619.0], [319.0, 17046.0], [317.0, 17762.0], [316.0, 17138.0], [315.0, 17324.666666666668], [313.0, 17643.75], [308.0, 17506.5], [306.0, 17631.0], [304.0, 17160.0], [334.0, 17406.333333333332], [331.0, 17243.5], [329.0, 16809.0], [327.0, 17361.0], [325.0, 16960.0], [324.0, 17059.0], [323.0, 17414.666666666668], [320.0, 17065.0], [350.0, 15942.75], [346.0, 17244.0], [345.0, 16610.0], [344.0, 16635.0], [343.0, 16657.0], [342.0, 16706.0], [341.0, 16773.0], [340.0, 16987.0], [337.0, 16956.0], [336.0, 17558.0], [366.0, 15980.777777777776], [364.0, 15923.0], [361.0, 16035.0], [360.0, 15913.666666666666], [359.0, 15979.5], [382.0, 15815.0], [381.0, 15831.714285714286], [376.0, 15946.0], [373.0, 15772.333333333334], [372.0, 15676.0], [368.0, 15760.0], [397.0, 15674.666666666666], [398.0, 15550.0], [396.0, 15610.0], [395.0, 15608.0], [393.0, 15636.0], [392.0, 15471.0], [389.0, 15290.0], [388.0, 15895.0], [387.0, 16116.0], [386.0, 15650.0], [415.0, 15766.0], [414.0, 15425.0], [412.0, 15720.857142857143], [410.0, 15663.0], [407.0, 16111.0], [403.0, 15798.166666666666], [402.0, 16117.0], [400.0, 15797.0], [429.0, 15558.0], [428.0, 15949.0], [427.0, 15775.0], [424.0, 15703.8], [421.0, 15952.5], [418.0, 15428.5], [416.0, 15589.0], [435.0, 15793.5], [447.0, 15819.0], [444.0, 15518.0], [441.0, 15782.0], [440.0, 15841.333333333334], [437.0, 15538.0], [436.0, 15800.666666666666], [433.0, 16066.0], [432.0, 15809.0], [462.0, 15557.25], [456.0, 15862.0], [455.0, 16014.0], [454.0, 15423.333333333334], [453.0, 15181.0], [449.0, 15663.0], [448.0, 15861.0], [466.0, 15758.0], [479.0, 15786.0], [478.0, 15460.0], [475.0, 15467.0], [473.0, 15493.666666666666], [470.0, 15377.0], [468.0, 15860.0], [465.0, 16001.0], [464.0, 15908.25], [495.0, 15815.0], [494.0, 15401.333333333334], [491.0, 15634.5], [489.0, 15679.375], [488.0, 15681.0], [480.0, 15618.5], [509.0, 15661.0], [508.0, 15612.0], [505.0, 15639.5], [503.0, 15364.0], [502.0, 15357.0], [500.0, 15619.0], [499.0, 15814.0], [498.0, 15325.0], [541.0, 15697.666666666666], [543.0, 15860.0], [539.0, 15615.0], [538.0, 15277.0], [537.0, 15650.5], [536.0, 15548.0], [526.0, 15289.0], [512.0, 15640.333333333334], [519.0, 15678.4], [517.0, 15369.5], [523.0, 15597.0], [522.0, 15895.0], [532.0, 15780.0], [531.0, 15393.0], [530.0, 15502.285714285714], [529.0, 15691.0], [573.0, 15257.0], [575.0, 15453.0], [572.0, 15608.833333333334], [569.0, 15527.0], [567.0, 15472.5], [565.0, 15798.333333333334], [560.0, 15663.5], [559.0, 15620.5], [544.0, 15609.0], [547.0, 14995.0], [546.0, 15378.0], [551.0, 15322.0], [550.0, 15323.8], [557.0, 15431.5], [554.0, 15584.0], [553.0, 15585.5], [606.0, 15764.0], [603.0, 15463.8], [583.0, 15243.0], [581.0, 15147.0], [580.0, 15254.0], [579.0, 15199.0], [578.0, 15504.0], [577.0, 15552.0], [598.0, 15351.0], [597.0, 15507.5], [596.0, 15532.0], [595.0, 15002.0], [593.0, 15502.166666666668], [590.0, 15772.0], [586.0, 15242.0], [584.0, 15243.0], [637.0, 15540.0], [635.0, 15732.0], [614.0, 15160.0], [613.0, 15659.0], [612.0, 15212.0], [611.0, 15492.5], [610.0, 15523.0], [631.0, 15447.75], [628.0, 15496.0], [626.0, 15449.0], [624.0, 15224.0], [623.0, 15330.0], [622.0, 15297.666666666666], [619.0, 15659.666666666666], [616.0, 15634.0], [664.0, 15092.5], [669.0, 15067.0], [671.0, 15475.5], [668.0, 15487.0], [667.0, 15550.0], [666.0, 15252.5], [655.0, 15410.5], [643.0, 15646.8], [640.0, 15494.0], [645.0, 15195.0], [644.0, 15408.333333333334], [647.0, 15715.0], [646.0, 15185.0], [653.0, 15177.0], [652.0, 15505.0], [650.0, 15724.0], [649.0, 15495.0], [648.0, 15721.0], [662.0, 15494.0], [658.0, 15541.0], [657.0, 15458.0], [691.0, 15295.5], [701.0, 15300.5], [698.0, 15364.0], [679.0, 15524.0], [677.0, 15451.0], [675.0, 15341.0], [674.0, 15095.0], [673.0, 15375.5], [694.0, 15047.0], [693.0, 15117.0], [692.0, 14834.0], [689.0, 15601.0], [688.0, 15093.0], [687.0, 15086.0], [686.0, 15366.5], [684.0, 15411.0], [680.0, 14970.0], [729.0, 15235.0], [733.0, 14855.0], [734.0, 14987.0], [723.0, 14895.0], [720.0, 15330.0], [732.0, 15210.0], [731.0, 14966.0], [730.0, 14957.0], [728.0, 14905.0], [711.0, 15027.0], [710.0, 15431.0], [709.0, 15019.0], [708.0, 15103.0], [706.0, 15156.25], [704.0, 15037.0], [719.0, 14998.0], [718.0, 15271.5], [717.0, 15531.0], [716.0, 15268.5], [713.0, 14953.5], [727.0, 15133.5], [724.0, 15330.0], [766.0, 15399.0], [767.0, 14887.0], [765.0, 15105.0], [764.0, 14876.5], [762.0, 15175.0], [760.0, 15128.0], [746.0, 14840.0], [738.0, 15243.25], [740.0, 14830.0], [739.0, 15403.0], [757.0, 15184.5], [755.0, 15134.0], [754.0, 15020.0], [752.0, 14970.0], [798.0, 14999.25], [799.0, 14803.0], [794.0, 14679.0], [793.0, 15102.0], [792.0, 14839.0], [774.0, 15376.0], [773.0, 15292.0], [772.0, 15098.0], [771.0, 14978.666666666666], [768.0, 14908.0], [780.0, 15138.0], [779.0, 15140.0], [778.0, 15000.5], [791.0, 15093.75], [787.0, 14843.0], [786.0, 14622.5], [784.0, 15051.25], [826.0, 14586.0], [831.0, 14975.75], [825.0, 14567.0], [807.0, 14892.5], [805.0, 15037.0], [802.0, 14795.0], [800.0, 15046.0], [823.0, 14841.2], [819.0, 14773.0], [817.0, 15017.714285714286], [810.0, 14641.0], [809.0, 14681.0], [808.0, 14953.0], [861.0, 15186.0], [862.0, 15086.0], [860.0, 14443.0], [859.0, 14633.0], [858.0, 14713.0], [857.0, 15123.0], [842.0, 15243.0], [833.0, 14957.0], [832.0, 15045.0], [836.0, 14962.0], [835.0, 15156.666666666666], [841.0, 14954.0], [840.0, 15062.5], [854.0, 14983.666666666666], [851.0, 15205.0], [850.0, 15213.5], [848.0, 14953.833333333334], [883.0, 15070.0], [894.0, 14768.5], [892.0, 15031.0], [891.0, 14599.0], [890.0, 14740.0], [879.0, 14776.0], [865.0, 15067.0], [867.0, 14619.0], [866.0, 14640.666666666666], [871.0, 14861.0], [870.0, 14801.0], [878.0, 15119.0], [877.0, 14890.0], [876.0, 14819.0], [875.0, 14986.5], [887.0, 14556.0], [885.0, 14989.0], [884.0, 14842.0], [882.0, 14517.0], [880.0, 14478.0], [920.0, 14314.0], [924.0, 14073.0], [927.0, 14405.0], [913.0, 14401.0], [912.0, 14189.0], [926.0, 14350.0], [925.0, 14892.0], [923.0, 14401.0], [922.0, 14386.0], [921.0, 14350.0], [911.0, 14845.0], [896.0, 14652.5], [898.0, 14732.0], [897.0, 14778.0], [901.0, 14917.0], [900.0, 14713.5], [903.0, 14900.0], [902.0, 14983.0], [909.0, 14968.0], [908.0, 14666.333333333334], [905.0, 14312.0], [904.0, 14975.0], [919.0, 14742.75], [916.0, 14536.5], [955.0, 14183.5], [948.0, 14425.0], [957.0, 14013.0], [958.0, 13705.0], [947.0, 14495.5], [945.0, 14197.5], [956.0, 13846.0], [953.0, 14397.5], [935.0, 14365.0], [934.0, 14839.0], [933.0, 14606.0], [931.0, 14841.0], [930.0, 14858.0], [929.0, 14762.0], [943.0, 14705.0], [942.0, 14058.0], [941.0, 14268.0], [940.0, 14087.0], [939.0, 14238.0], [938.0, 14232.0], [937.0, 14655.0], [936.0, 14147.0], [951.0, 14058.0], [950.0, 14417.0], [949.0, 14415.0], [986.0, 13441.5], [990.0, 13285.0], [991.0, 13659.0], [976.0, 14162.0], [978.0, 14118.0], [977.0, 13584.0], [989.0, 13346.0], [988.0, 13339.0], [987.0, 13867.0], [984.0, 14027.0], [967.0, 13531.0], [966.0, 14281.0], [965.0, 13776.0], [964.0, 13585.0], [963.0, 13776.0], [962.0, 13698.0], [961.0, 14116.0], [960.0, 13783.5], [975.0, 13952.0], [974.0, 13572.0], [973.0, 14218.0], [972.0, 13720.0], [971.0, 13725.0], [970.0, 13734.0], [968.0, 14063.0], [983.0, 13524.0], [981.0, 13489.0], [980.0, 14030.0], [979.0, 13482.0], [1000.0, 9773.0], [999.0, 11515.0], [998.0, 11428.0], [997.0, 11949.0], [996.0, 11876.0], [995.0, 13023.0], [994.0, 12744.0], [993.0, 12706.0], [992.0, 12828.0], [1.0, 19627.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[501.626, 16227.100000000002]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11379.233333333334, "minX": 1.75637166E12, "maxY": 7195232.483333333, "series": [{"data": [[1.75637166E12, 11379.233333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75637166E12, 7195232.483333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637166E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16227.100000000002, "minX": 1.75637166E12, "maxY": 16227.100000000002, "series": [{"data": [[1.75637166E12, 16227.100000000002]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637166E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16227.068000000001, "minX": 1.75637166E12, "maxY": 16227.068000000001, "series": [{"data": [[1.75637166E12, 16227.068000000001]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637166E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3836.4749999999985, "minX": 1.75637166E12, "maxY": 3836.4749999999985, "series": [{"data": [[1.75637166E12, 3836.4749999999985]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637166E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9773.0, "minX": 1.75637166E12, "maxY": 19627.0, "series": [{"data": [[1.75637166E12, 19627.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75637166E12, 18807.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75637166E12, 19556.37]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75637166E12, 19141.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75637166E12, 9773.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75637166E12, 15602.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637166E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10644.0, "minX": 1.0, "maxY": 19117.0, "series": [{"data": [[1.0, 10644.0], [11.0, 13339.0], [88.0, 14339.0], [90.0, 15818.5], [182.0, 18070.0], [3.0, 11876.0], [101.0, 19117.0], [460.0, 15268.0], [63.0, 17259.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[182.0, 17698.0], [63.0, 17551.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 460.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10640.5, "minX": 1.0, "maxY": 19117.0, "series": [{"data": [[1.0, 10640.5], [11.0, 13339.0], [88.0, 14339.0], [90.0, 15818.5], [182.0, 18070.0], [3.0, 11876.0], [101.0, 19117.0], [460.0, 15268.0], [63.0, 17259.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[182.0, 17698.0], [63.0, 17551.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 460.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75637166E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75637166E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637166E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.75637166E12, "maxY": 16.033333333333335, "series": [{"data": [[1.75637166E12, 16.033333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75637166E12, 0.6333333333333333]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75637166E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.75637166E12, "maxY": 16.033333333333335, "series": [{"data": [[1.75637166E12, 16.033333333333335]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}, {"data": [[1.75637166E12, 0.6333333333333333]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637166E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.75637166E12, "maxY": 16.033333333333335, "series": [{"data": [[1.75637166E12, 16.033333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75637166E12, 0.6333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75637166E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

