/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "maxY": 4310.0, "series": [{"data": [[0.0, 24.0], [0.1, 26.0], [0.2, 26.0], [0.3, 27.0], [0.4, 27.0], [0.5, 28.0], [0.6, 28.0], [0.7, 28.0], [0.8, 28.0], [0.9, 29.0], [1.0, 29.0], [1.1, 29.0], [1.2, 29.0], [1.3, 30.0], [1.4, 30.0], [1.5, 30.0], [1.6, 31.0], [1.7, 31.0], [1.8, 31.0], [1.9, 31.0], [2.0, 32.0], [2.1, 32.0], [2.2, 32.0], [2.3, 32.0], [2.4, 32.0], [2.5, 33.0], [2.6, 33.0], [2.7, 33.0], [2.8, 34.0], [2.9, 34.0], [3.0, 34.0], [3.1, 34.0], [3.2, 35.0], [3.3, 35.0], [3.4, 35.0], [3.5, 35.0], [3.6, 35.0], [3.7, 35.0], [3.8, 36.0], [3.9, 36.0], [4.0, 37.0], [4.1, 37.0], [4.2, 37.0], [4.3, 37.0], [4.4, 37.0], [4.5, 37.0], [4.6, 38.0], [4.7, 38.0], [4.8, 38.0], [4.9, 38.0], [5.0, 38.0], [5.1, 38.0], [5.2, 38.0], [5.3, 38.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 40.0], [5.9, 40.0], [6.0, 40.0], [6.1, 40.0], [6.2, 40.0], [6.3, 40.0], [6.4, 41.0], [6.5, 41.0], [6.6, 42.0], [6.7, 42.0], [6.8, 43.0], [6.9, 43.0], [7.0, 44.0], [7.1, 44.0], [7.2, 44.0], [7.3, 44.0], [7.4, 44.0], [7.5, 44.0], [7.6, 44.0], [7.7, 45.0], [7.8, 45.0], [7.9, 46.0], [8.0, 46.0], [8.1, 46.0], [8.2, 46.0], [8.3, 47.0], [8.4, 47.0], [8.5, 47.0], [8.6, 47.0], [8.7, 47.0], [8.8, 48.0], [8.9, 48.0], [9.0, 48.0], [9.1, 49.0], [9.2, 51.0], [9.3, 52.0], [9.4, 52.0], [9.5, 52.0], [9.6, 53.0], [9.7, 55.0], [9.8, 55.0], [9.9, 56.0], [10.0, 57.0], [10.1, 57.0], [10.2, 57.0], [10.3, 58.0], [10.4, 59.0], [10.5, 59.0], [10.6, 59.0], [10.7, 60.0], [10.8, 60.0], [10.9, 60.0], [11.0, 60.0], [11.1, 63.0], [11.2, 64.0], [11.3, 67.0], [11.4, 68.0], [11.5, 70.0], [11.6, 75.0], [11.7, 75.0], [11.8, 77.0], [11.9, 80.0], [12.0, 102.0], [12.1, 106.0], [12.2, 107.0], [12.3, 107.0], [12.4, 107.0], [12.5, 107.0], [12.6, 109.0], [12.7, 112.0], [12.8, 113.0], [12.9, 113.0], [13.0, 113.0], [13.1, 114.0], [13.2, 116.0], [13.3, 117.0], [13.4, 120.0], [13.5, 125.0], [13.6, 131.0], [13.7, 133.0], [13.8, 135.0], [13.9, 138.0], [14.0, 140.0], [14.1, 141.0], [14.2, 144.0], [14.3, 145.0], [14.4, 147.0], [14.5, 149.0], [14.6, 152.0], [14.7, 153.0], [14.8, 154.0], [14.9, 154.0], [15.0, 155.0], [15.1, 157.0], [15.2, 164.0], [15.3, 165.0], [15.4, 165.0], [15.5, 166.0], [15.6, 166.0], [15.7, 166.0], [15.8, 169.0], [15.9, 169.0], [16.0, 171.0], [16.1, 171.0], [16.2, 172.0], [16.3, 173.0], [16.4, 176.0], [16.5, 177.0], [16.6, 177.0], [16.7, 178.0], [16.8, 179.0], [16.9, 181.0], [17.0, 181.0], [17.1, 182.0], [17.2, 183.0], [17.3, 184.0], [17.4, 188.0], [17.5, 188.0], [17.6, 189.0], [17.7, 190.0], [17.8, 191.0], [17.9, 193.0], [18.0, 193.0], [18.1, 194.0], [18.2, 196.0], [18.3, 196.0], [18.4, 197.0], [18.5, 198.0], [18.6, 199.0], [18.7, 200.0], [18.8, 201.0], [18.9, 201.0], [19.0, 201.0], [19.1, 202.0], [19.2, 203.0], [19.3, 204.0], [19.4, 204.0], [19.5, 205.0], [19.6, 206.0], [19.7, 208.0], [19.8, 208.0], [19.9, 209.0], [20.0, 210.0], [20.1, 210.0], [20.2, 212.0], [20.3, 212.0], [20.4, 212.0], [20.5, 215.0], [20.6, 221.0], [20.7, 223.0], [20.8, 224.0], [20.9, 225.0], [21.0, 226.0], [21.1, 228.0], [21.2, 230.0], [21.3, 230.0], [21.4, 233.0], [21.5, 236.0], [21.6, 239.0], [21.7, 239.0], [21.8, 241.0], [21.9, 241.0], [22.0, 242.0], [22.1, 242.0], [22.2, 245.0], [22.3, 246.0], [22.4, 248.0], [22.5, 249.0], [22.6, 251.0], [22.7, 251.0], [22.8, 257.0], [22.9, 258.0], [23.0, 261.0], [23.1, 261.0], [23.2, 261.0], [23.3, 264.0], [23.4, 269.0], [23.5, 270.0], [23.6, 271.0], [23.7, 272.0], [23.8, 279.0], [23.9, 279.0], [24.0, 282.0], [24.1, 283.0], [24.2, 286.0], [24.3, 288.0], [24.4, 291.0], [24.5, 300.0], [24.6, 303.0], [24.7, 307.0], [24.8, 318.0], [24.9, 330.0], [25.0, 333.0], [25.1, 340.0], [25.2, 349.0], [25.3, 351.0], [25.4, 359.0], [25.5, 369.0], [25.6, 375.0], [25.7, 377.0], [25.8, 379.0], [25.9, 379.0], [26.0, 385.0], [26.1, 385.0], [26.2, 386.0], [26.3, 387.0], [26.4, 389.0], [26.5, 389.0], [26.6, 394.0], [26.7, 394.0], [26.8, 395.0], [26.9, 402.0], [27.0, 413.0], [27.1, 416.0], [27.2, 422.0], [27.3, 425.0], [27.4, 433.0], [27.5, 461.0], [27.6, 480.0], [27.7, 480.0], [27.8, 490.0], [27.9, 494.0], [28.0, 502.0], [28.1, 504.0], [28.2, 509.0], [28.3, 511.0], [28.4, 526.0], [28.5, 528.0], [28.6, 540.0], [28.7, 543.0], [28.8, 544.0], [28.9, 546.0], [29.0, 556.0], [29.1, 559.0], [29.2, 565.0], [29.3, 565.0], [29.4, 568.0], [29.5, 571.0], [29.6, 575.0], [29.7, 576.0], [29.8, 582.0], [29.9, 583.0], [30.0, 586.0], [30.1, 587.0], [30.2, 588.0], [30.3, 588.0], [30.4, 591.0], [30.5, 592.0], [30.6, 595.0], [30.7, 596.0], [30.8, 602.0], [30.9, 603.0], [31.0, 615.0], [31.1, 621.0], [31.2, 631.0], [31.3, 652.0], [31.4, 656.0], [31.5, 659.0], [31.6, 660.0], [31.7, 661.0], [31.8, 667.0], [31.9, 667.0], [32.0, 669.0], [32.1, 669.0], [32.2, 672.0], [32.3, 673.0], [32.4, 674.0], [32.5, 674.0], [32.6, 693.0], [32.7, 695.0], [32.8, 729.0], [32.9, 740.0], [33.0, 789.0], [33.1, 797.0], [33.2, 817.0], [33.3, 849.0], [33.4, 856.0], [33.5, 864.0], [33.6, 876.0], [33.7, 876.0], [33.8, 882.0], [33.9, 899.0], [34.0, 904.0], [34.1, 908.0], [34.2, 935.0], [34.3, 936.0], [34.4, 947.0], [34.5, 952.0], [34.6, 973.0], [34.7, 976.0], [34.8, 978.0], [34.9, 985.0], [35.0, 991.0], [35.1, 1011.0], [35.2, 1014.0], [35.3, 1042.0], [35.4, 1042.0], [35.5, 1050.0], [35.6, 1091.0], [35.7, 1113.0], [35.8, 1133.0], [35.9, 1141.0], [36.0, 1216.0], [36.1, 1236.0], [36.2, 1239.0], [36.3, 1251.0], [36.4, 1252.0], [36.5, 1259.0], [36.6, 1261.0], [36.7, 1269.0], [36.8, 1280.0], [36.9, 1287.0], [37.0, 1300.0], [37.1, 1306.0], [37.2, 1310.0], [37.3, 1331.0], [37.4, 1340.0], [37.5, 1359.0], [37.6, 1360.0], [37.7, 1362.0], [37.8, 1362.0], [37.9, 1363.0], [38.0, 1364.0], [38.1, 1370.0], [38.2, 1372.0], [38.3, 1379.0], [38.4, 1379.0], [38.5, 1390.0], [38.6, 1396.0], [38.7, 1412.0], [38.8, 1419.0], [38.9, 1432.0], [39.0, 1441.0], [39.1, 1452.0], [39.2, 1458.0], [39.3, 1476.0], [39.4, 1479.0], [39.5, 1487.0], [39.6, 1489.0], [39.7, 1499.0], [39.8, 1506.0], [39.9, 1521.0], [40.0, 1526.0], [40.1, 1529.0], [40.2, 1529.0], [40.3, 1543.0], [40.4, 1544.0], [40.5, 1545.0], [40.6, 1547.0], [40.7, 1552.0], [40.8, 1555.0], [40.9, 1584.0], [41.0, 1588.0], [41.1, 1599.0], [41.2, 1601.0], [41.3, 1610.0], [41.4, 1629.0], [41.5, 1667.0], [41.6, 1668.0], [41.7, 1679.0], [41.8, 1682.0], [41.9, 1686.0], [42.0, 1688.0], [42.1, 1695.0], [42.2, 1696.0], [42.3, 1698.0], [42.4, 1700.0], [42.5, 1706.0], [42.6, 1706.0], [42.7, 1711.0], [42.8, 1712.0], [42.9, 1716.0], [43.0, 1716.0], [43.1, 1717.0], [43.2, 1718.0], [43.3, 1721.0], [43.4, 1725.0], [43.5, 1734.0], [43.6, 1734.0], [43.7, 1736.0], [43.8, 1740.0], [43.9, 1744.0], [44.0, 1747.0], [44.1, 1748.0], [44.2, 1749.0], [44.3, 1754.0], [44.4, 1757.0], [44.5, 1760.0], [44.6, 1761.0], [44.7, 1768.0], [44.8, 1768.0], [44.9, 1773.0], [45.0, 1773.0], [45.1, 1777.0], [45.2, 1781.0], [45.3, 1783.0], [45.4, 1785.0], [45.5, 1787.0], [45.6, 1788.0], [45.7, 1791.0], [45.8, 1791.0], [45.9, 1802.0], [46.0, 1804.0], [46.1, 1813.0], [46.2, 1815.0], [46.3, 1817.0], [46.4, 1818.0], [46.5, 1828.0], [46.6, 1829.0], [46.7, 1831.0], [46.8, 1832.0], [46.9, 1835.0], [47.0, 1838.0], [47.1, 1839.0], [47.2, 1844.0], [47.3, 1845.0], [47.4, 1846.0], [47.5, 1854.0], [47.6, 1858.0], [47.7, 1872.0], [47.8, 1872.0], [47.9, 1873.0], [48.0, 1874.0], [48.1, 1878.0], [48.2, 1879.0], [48.3, 1883.0], [48.4, 1885.0], [48.5, 1889.0], [48.6, 1893.0], [48.7, 1897.0], [48.8, 1901.0], [48.9, 1904.0], [49.0, 1906.0], [49.1, 1908.0], [49.2, 1912.0], [49.3, 1916.0], [49.4, 1916.0], [49.5, 1919.0], [49.6, 1921.0], [49.7, 1925.0], [49.8, 1926.0], [49.9, 1927.0], [50.0, 1929.0], [50.1, 1935.0], [50.2, 1939.0], [50.3, 1940.0], [50.4, 1941.0], [50.5, 1943.0], [50.6, 1944.0], [50.7, 1949.0], [50.8, 1950.0], [50.9, 1950.0], [51.0, 1950.0], [51.1, 1951.0], [51.2, 1956.0], [51.3, 1958.0], [51.4, 1959.0], [51.5, 1965.0], [51.6, 1968.0], [51.7, 1970.0], [51.8, 1975.0], [51.9, 1976.0], [52.0, 1980.0], [52.1, 1980.0], [52.2, 1982.0], [52.3, 1986.0], [52.4, 1990.0], [52.5, 1993.0], [52.6, 1998.0], [52.7, 2001.0], [52.8, 2004.0], [52.9, 2006.0], [53.0, 2007.0], [53.1, 2007.0], [53.2, 2009.0], [53.3, 2012.0], [53.4, 2013.0], [53.5, 2015.0], [53.6, 2015.0], [53.7, 2017.0], [53.8, 2017.0], [53.9, 2025.0], [54.0, 2025.0], [54.1, 2032.0], [54.2, 2032.0], [54.3, 2033.0], [54.4, 2034.0], [54.5, 2036.0], [54.6, 2037.0], [54.7, 2038.0], [54.8, 2040.0], [54.9, 2041.0], [55.0, 2043.0], [55.1, 2047.0], [55.2, 2048.0], [55.3, 2049.0], [55.4, 2049.0], [55.5, 2050.0], [55.6, 2051.0], [55.7, 2052.0], [55.8, 2053.0], [55.9, 2053.0], [56.0, 2055.0], [56.1, 2056.0], [56.2, 2056.0], [56.3, 2056.0], [56.4, 2060.0], [56.5, 2067.0], [56.6, 2068.0], [56.7, 2071.0], [56.8, 2084.0], [56.9, 2086.0], [57.0, 2090.0], [57.1, 2092.0], [57.2, 2094.0], [57.3, 2099.0], [57.4, 2099.0], [57.5, 2103.0], [57.6, 2108.0], [57.7, 2109.0], [57.8, 2112.0], [57.9, 2115.0], [58.0, 2120.0], [58.1, 2124.0], [58.2, 2126.0], [58.3, 2126.0], [58.4, 2126.0], [58.5, 2130.0], [58.6, 2132.0], [58.7, 2134.0], [58.8, 2134.0], [58.9, 2137.0], [59.0, 2138.0], [59.1, 2143.0], [59.2, 2144.0], [59.3, 2144.0], [59.4, 2146.0], [59.5, 2154.0], [59.6, 2156.0], [59.7, 2158.0], [59.8, 2158.0], [59.9, 2160.0], [60.0, 2162.0], [60.1, 2170.0], [60.2, 2171.0], [60.3, 2176.0], [60.4, 2176.0], [60.5, 2179.0], [60.6, 2181.0], [60.7, 2183.0], [60.8, 2188.0], [60.9, 2191.0], [61.0, 2194.0], [61.1, 2195.0], [61.2, 2196.0], [61.3, 2198.0], [61.4, 2198.0], [61.5, 2201.0], [61.6, 2202.0], [61.7, 2203.0], [61.8, 2204.0], [61.9, 2206.0], [62.0, 2206.0], [62.1, 2209.0], [62.2, 2210.0], [62.3, 2211.0], [62.4, 2212.0], [62.5, 2214.0], [62.6, 2215.0], [62.7, 2217.0], [62.8, 2219.0], [62.9, 2220.0], [63.0, 2220.0], [63.1, 2221.0], [63.2, 2222.0], [63.3, 2224.0], [63.4, 2228.0], [63.5, 2234.0], [63.6, 2236.0], [63.7, 2240.0], [63.8, 2240.0], [63.9, 2246.0], [64.0, 2249.0], [64.1, 2250.0], [64.2, 2251.0], [64.3, 2252.0], [64.4, 2252.0], [64.5, 2253.0], [64.6, 2253.0], [64.7, 2254.0], [64.8, 2255.0], [64.9, 2255.0], [65.0, 2256.0], [65.1, 2259.0], [65.2, 2263.0], [65.3, 2267.0], [65.4, 2271.0], [65.5, 2271.0], [65.6, 2273.0], [65.7, 2279.0], [65.8, 2282.0], [65.9, 2284.0], [66.0, 2284.0], [66.1, 2292.0], [66.2, 2293.0], [66.3, 2297.0], [66.4, 2302.0], [66.5, 2306.0], [66.6, 2307.0], [66.7, 2315.0], [66.8, 2318.0], [66.9, 2331.0], [67.0, 2341.0], [67.1, 2345.0], [67.2, 2345.0], [67.3, 2348.0], [67.4, 2351.0], [67.5, 2353.0], [67.6, 2356.0], [67.7, 2362.0], [67.8, 2363.0], [67.9, 2365.0], [68.0, 2377.0], [68.1, 2382.0], [68.2, 2383.0], [68.3, 2390.0], [68.4, 2392.0], [68.5, 2398.0], [68.6, 2402.0], [68.7, 2405.0], [68.8, 2409.0], [68.9, 2413.0], [69.0, 2414.0], [69.1, 2422.0], [69.2, 2425.0], [69.3, 2431.0], [69.4, 2432.0], [69.5, 2434.0], [69.6, 2435.0], [69.7, 2438.0], [69.8, 2438.0], [69.9, 2439.0], [70.0, 2439.0], [70.1, 2440.0], [70.2, 2440.0], [70.3, 2442.0], [70.4, 2442.0], [70.5, 2443.0], [70.6, 2444.0], [70.7, 2448.0], [70.8, 2448.0], [70.9, 2450.0], [71.0, 2451.0], [71.1, 2455.0], [71.2, 2455.0], [71.3, 2459.0], [71.4, 2463.0], [71.5, 2476.0], [71.6, 2481.0], [71.7, 2487.0], [71.8, 2499.0], [71.9, 2502.0], [72.0, 2513.0], [72.1, 2514.0], [72.2, 2516.0], [72.3, 2518.0], [72.4, 2521.0], [72.5, 2523.0], [72.6, 2523.0], [72.7, 2525.0], [72.8, 2528.0], [72.9, 2529.0], [73.0, 2534.0], [73.1, 2546.0], [73.2, 2548.0], [73.3, 2552.0], [73.4, 2553.0], [73.5, 2561.0], [73.6, 2563.0], [73.7, 2566.0], [73.8, 2572.0], [73.9, 2582.0], [74.0, 2584.0], [74.1, 2590.0], [74.2, 2592.0], [74.3, 2595.0], [74.4, 2601.0], [74.5, 2609.0], [74.6, 2615.0], [74.7, 2617.0], [74.8, 2617.0], [74.9, 2628.0], [75.0, 2631.0], [75.1, 2637.0], [75.2, 2638.0], [75.3, 2640.0], [75.4, 2641.0], [75.5, 2647.0], [75.6, 2647.0], [75.7, 2663.0], [75.8, 2673.0], [75.9, 2682.0], [76.0, 2682.0], [76.1, 2722.0], [76.2, 2724.0], [76.3, 2737.0], [76.4, 2779.0], [76.5, 2795.0], [76.6, 2808.0], [76.7, 2820.0], [76.8, 2820.0], [76.9, 2829.0], [77.0, 2830.0], [77.1, 2841.0], [77.2, 2843.0], [77.3, 2845.0], [77.4, 2848.0], [77.5, 2855.0], [77.6, 2855.0], [77.7, 2859.0], [77.8, 2861.0], [77.9, 2871.0], [78.0, 2876.0], [78.1, 2878.0], [78.2, 2889.0], [78.3, 2894.0], [78.4, 2899.0], [78.5, 2902.0], [78.6, 2903.0], [78.7, 2905.0], [78.8, 2905.0], [78.9, 2907.0], [79.0, 2907.0], [79.1, 2909.0], [79.2, 2909.0], [79.3, 2912.0], [79.4, 2914.0], [79.5, 2915.0], [79.6, 2915.0], [79.7, 2916.0], [79.8, 2917.0], [79.9, 2919.0], [80.0, 2921.0], [80.1, 2923.0], [80.2, 2925.0], [80.3, 2928.0], [80.4, 2936.0], [80.5, 2943.0], [80.6, 2946.0], [80.7, 2957.0], [80.8, 2971.0], [80.9, 2985.0], [81.0, 2987.0], [81.1, 2989.0], [81.2, 2990.0], [81.3, 3007.0], [81.4, 3007.0], [81.5, 3011.0], [81.6, 3030.0], [81.7, 3038.0], [81.8, 3043.0], [81.9, 3059.0], [82.0, 3076.0], [82.1, 3080.0], [82.2, 3088.0], [82.3, 3092.0], [82.4, 3093.0], [82.5, 3102.0], [82.6, 3103.0], [82.7, 3113.0], [82.8, 3117.0], [82.9, 3130.0], [83.0, 3139.0], [83.1, 3142.0], [83.2, 3144.0], [83.3, 3146.0], [83.4, 3148.0], [83.5, 3150.0], [83.6, 3154.0], [83.7, 3189.0], [83.8, 3207.0], [83.9, 3209.0], [84.0, 3215.0], [84.1, 3218.0], [84.2, 3219.0], [84.3, 3230.0], [84.4, 3232.0], [84.5, 3242.0], [84.6, 3243.0], [84.7, 3249.0], [84.8, 3257.0], [84.9, 3257.0], [85.0, 3260.0], [85.1, 3265.0], [85.2, 3266.0], [85.3, 3267.0], [85.4, 3269.0], [85.5, 3271.0], [85.6, 3278.0], [85.7, 3302.0], [85.8, 3305.0], [85.9, 3306.0], [86.0, 3307.0], [86.1, 3311.0], [86.2, 3311.0], [86.3, 3318.0], [86.4, 3319.0], [86.5, 3320.0], [86.6, 3321.0], [86.7, 3323.0], [86.8, 3325.0], [86.9, 3334.0], [87.0, 3334.0], [87.1, 3335.0], [87.2, 3335.0], [87.3, 3343.0], [87.4, 3344.0], [87.5, 3354.0], [87.6, 3367.0], [87.7, 3381.0], [87.8, 3389.0], [87.9, 3396.0], [88.0, 3399.0], [88.1, 3420.0], [88.2, 3430.0], [88.3, 3448.0], [88.4, 3449.0], [88.5, 3456.0], [88.6, 3459.0], [88.7, 3472.0], [88.8, 3482.0], [88.9, 3511.0], [89.0, 3514.0], [89.1, 3526.0], [89.2, 3528.0], [89.3, 3532.0], [89.4, 3533.0], [89.5, 3536.0], [89.6, 3536.0], [89.7, 3538.0], [89.8, 3538.0], [89.9, 3540.0], [90.0, 3540.0], [90.1, 3541.0], [90.2, 3545.0], [90.3, 3553.0], [90.4, 3554.0], [90.5, 3559.0], [90.6, 3560.0], [90.7, 3564.0], [90.8, 3566.0], [90.9, 3569.0], [91.0, 3576.0], [91.1, 3576.0], [91.2, 3578.0], [91.3, 3584.0], [91.4, 3586.0], [91.5, 3588.0], [91.6, 3594.0], [91.7, 3598.0], [91.8, 3602.0], [91.9, 3609.0], [92.0, 3611.0], [92.1, 3614.0], [92.2, 3615.0], [92.3, 3618.0], [92.4, 3621.0], [92.5, 3624.0], [92.6, 3629.0], [92.7, 3638.0], [92.8, 3638.0], [92.9, 3639.0], [93.0, 3639.0], [93.1, 3649.0], [93.2, 3649.0], [93.3, 3654.0], [93.4, 3664.0], [93.5, 3668.0], [93.6, 3670.0], [93.7, 3678.0], [93.8, 3679.0], [93.9, 3683.0], [94.0, 3684.0], [94.1, 3686.0], [94.2, 3691.0], [94.3, 3694.0], [94.4, 3701.0], [94.5, 3702.0], [94.6, 3703.0], [94.7, 3707.0], [94.8, 3708.0], [94.9, 3715.0], [95.0, 3715.0], [95.1, 3717.0], [95.2, 3719.0], [95.3, 3725.0], [95.4, 3725.0], [95.5, 3733.0], [95.6, 3749.0], [95.7, 3780.0], [95.8, 3780.0], [95.9, 3811.0], [96.0, 3815.0], [96.1, 3821.0], [96.2, 3824.0], [96.3, 3848.0], [96.4, 3857.0], [96.5, 3887.0], [96.6, 3889.0], [96.7, 3892.0], [96.8, 3892.0], [96.9, 3902.0], [97.0, 3917.0], [97.1, 3942.0], [97.2, 3952.0], [97.3, 3955.0], [97.4, 3967.0], [97.5, 3997.0], [97.6, 4012.0], [97.7, 4015.0], [97.8, 4028.0], [97.9, 4032.0], [98.0, 4040.0], [98.1, 4043.0], [98.2, 4051.0], [98.3, 4055.0], [98.4, 4057.0], [98.5, 4063.0], [98.6, 4083.0], [98.7, 4096.0], [98.8, 4106.0], [98.9, 4106.0], [99.0, 4115.0], [99.1, 4116.0], [99.2, 4121.0], [99.3, 4124.0], [99.4, 4131.0], [99.5, 4136.0], [99.6, 4140.0], [99.7, 4140.0], [99.8, 4176.0], [99.9, 4267.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 179.0, "series": [{"data": [[0.0, 179.0], [600.0, 29.0], [700.0, 6.0], [800.0, 12.0], [900.0, 17.0], [1000.0, 8.0], [1100.0, 5.0], [1200.0, 15.0], [1300.0, 25.0], [1400.0, 17.0], [1500.0, 21.0], [1600.0, 18.0], [100.0, 101.0], [1700.0, 53.0], [1800.0, 43.0], [1900.0, 59.0], [2000.0, 71.0], [2100.0, 60.0], [2200.0, 74.0], [2300.0, 33.0], [2400.0, 49.0], [2500.0, 38.0], [2600.0, 26.0], [2700.0, 7.0], [2800.0, 28.0], [2900.0, 43.0], [3000.0, 18.0], [3100.0, 19.0], [200.0, 87.0], [3300.0, 35.0], [3200.0, 29.0], [3400.0, 12.0], [3500.0, 44.0], [3600.0, 39.0], [3700.0, 23.0], [3800.0, 14.0], [3900.0, 11.0], [4000.0, 18.0], [4100.0, 17.0], [4200.0, 1.0], [4300.0, 1.0], [300.0, 36.0], [400.0, 17.0], [500.0, 42.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 176.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 904.0, "series": [{"data": [[0.0, 420.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 176.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 904.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 755.4140000000014, "minX": 1.75635426E12, "maxY": 755.4140000000014, "series": [{"data": [[1.75635426E12, 755.4140000000014]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635426E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.0, "maxY": 4140.0, "series": [{"data": [[4.0, 673.0], [5.0, 583.0], [7.0, 3799.0], [8.0, 416.0], [10.0, 632.0], [11.0, 674.0], [12.0, 674.0], [13.0, 670.0], [14.0, 672.0], [15.0, 674.0], [16.0, 669.0], [18.0, 2971.0], [21.0, 2211.6666666666665], [23.0, 3042.0], [24.0, 667.0], [26.0, 1909.5], [28.0, 482.0], [29.0, 631.0], [30.0, 660.0], [31.0, 660.0], [33.0, 659.0], [34.0, 3716.5], [36.0, 3568.0], [39.0, 4140.0], [38.0, 3797.0], [41.0, 3466.0], [45.0, 3729.0], [44.0, 1816.0], [47.0, 936.0], [46.0, 4136.0], [49.0, 2480.0], [51.0, 3848.0], [50.0, 3560.0], [53.0, 3551.0], [52.0, 3847.0], [55.0, 585.0], [54.0, 3537.0], [57.0, 610.0], [56.0, 588.0], [59.0, 587.0], [58.0, 586.0], [61.0, 603.0], [60.0, 596.0], [63.0, 595.0], [62.0, 653.0], [66.0, 667.0], [65.0, 3669.0], [70.0, 3275.5], [69.0, 904.0], [68.0, 596.0], [75.0, 3695.6666666666665], [72.0, 2066.0], [79.0, 3821.0], [78.0, 3712.5], [76.0, 3540.0], [83.0, 595.0], [82.0, 3007.0], [81.0, 3719.0], [80.0, 3448.0], [87.0, 347.0], [86.0, 568.0], [84.0, 1045.0], [90.0, 509.0], [89.0, 578.0], [95.0, 543.0], [94.0, 495.5], [93.0, 502.0], [92.0, 577.5], [99.0, 485.0], [98.0, 560.0], [97.0, 559.0], [96.0, 490.0], [101.0, 385.0], [107.0, 945.0], [111.0, 283.0], [110.0, 264.0], [109.0, 351.0], [108.0, 272.0], [114.0, 882.0], [112.0, 261.0], [119.0, 290.5], [117.0, 291.0], [116.0, 293.5], [123.0, 241.0], [122.0, 230.0], [121.0, 245.0], [120.0, 249.0], [127.0, 462.0], [126.0, 3815.0], [125.0, 261.0], [124.0, 259.0], [133.0, 212.0], [132.0, 307.0], [131.0, 921.0], [129.0, 480.0], [128.0, 461.0], [143.0, 960.5], [142.0, 997.5], [141.0, 1753.5], [139.0, 1735.0], [151.0, 4023.0], [148.0, 4109.0], [145.0, 1706.0], [144.0, 4015.0], [159.0, 1359.0], [157.0, 4085.0], [155.0, 4131.0], [154.0, 1694.0], [153.0, 1706.0], [152.0, 4051.0], [167.0, 3805.0], [164.0, 4032.0], [163.0, 4077.0], [162.0, 2889.0], [161.0, 4047.0], [160.0, 2147.0], [175.0, 4016.0], [174.0, 4055.0], [173.0, 3839.5], [172.0, 2878.0], [171.0, 3568.0], [169.0, 4120.0], [168.0, 3953.0], [183.0, 3254.5], [181.0, 1705.0], [180.0, 3749.0], [179.0, 422.0], [178.0, 4118.0], [176.0, 427.0], [191.0, 289.5], [188.0, 399.5], [186.0, 387.0], [185.0, 3936.0], [198.0, 4106.0], [197.0, 241.0], [196.0, 3664.0], [195.0, 3598.0], [194.0, 395.0], [193.0, 352.0], [192.0, 246.0], [205.0, 3701.0], [204.0, 2907.0], [203.0, 4096.0], [201.0, 2794.0], [200.0, 3942.0], [213.0, 3806.5], [211.0, 2552.5], [209.0, 1779.6], [223.0, 2878.0], [222.0, 57.0], [221.0, 1483.0], [219.0, 2904.0], [218.0, 413.0], [217.0, 3320.75], [231.0, 1331.0], [230.0, 2850.0], [229.0, 789.5], [227.0, 2899.0], [226.0, 195.5], [225.0, 2903.0], [239.0, 2216.5], [237.0, 2054.0], [236.0, 164.0], [235.0, 165.0], [234.0, 133.0], [232.0, 3553.0], [246.0, 389.0], [244.0, 375.0], [243.0, 1963.0], [242.0, 991.0], [241.0, 394.0], [255.0, 3402.5], [254.0, 238.0], [252.0, 157.5], [250.0, 1113.0], [249.0, 2419.5], [259.0, 3059.0], [270.0, 3622.0], [271.0, 4057.0], [269.0, 2472.5], [265.0, 381.6666666666667], [264.0, 204.0], [263.0, 3932.0], [260.0, 385.0], [258.0, 3692.0], [257.0, 3368.5], [275.0, 3541.0], [286.0, 680.0], [285.0, 165.0], [282.0, 261.0], [280.0, 3456.0], [279.0, 359.0], [278.0, 3691.0], [277.0, 3463.0], [276.0, 3861.0], [274.0, 369.0], [273.0, 655.0], [303.0, 1035.0], [302.0, 2311.0], [300.0, 1011.0], [299.0, 1252.0], [298.0, 1159.0], [296.0, 1216.0], [295.0, 333.0], [318.0, 3624.0], [319.0, 289.0], [317.0, 1269.0], [316.0, 261.0], [315.0, 789.0], [314.0, 864.0], [313.0, 973.0], [312.0, 3459.0], [311.0, 3472.0], [307.0, 4012.0], [306.0, 2487.5], [304.0, 3453.0], [310.0, 2763.3333333333335], [323.0, 258.0], [334.0, 740.0], [335.0, 283.0], [333.0, 631.5], [329.0, 1014.0], [328.0, 2637.0], [327.0, 2670.75], [320.0, 301.0], [322.0, 1042.0], [321.0, 817.0], [338.0, 3533.0], [351.0, 251.0], [349.0, 729.0], [347.0, 271.0], [345.0, 242.0], [343.0, 270.0], [341.0, 250.33333333333334], [337.0, 714.0], [336.0, 947.0], [366.0, 667.0], [365.0, 248.0], [364.0, 1356.0], [362.0, 226.0], [357.0, 224.0], [354.0, 126.0], [383.0, 1406.5], [377.0, 210.0], [376.0, 212.0], [375.0, 230.5], [373.0, 241.0], [372.0, 1800.0], [370.0, 246.0], [395.0, 228.0], [394.0, 229.0], [388.0, 230.0], [384.0, 231.0], [413.0, 202.0], [415.0, 203.0], [412.0, 210.0], [403.0, 2990.0], [411.0, 206.0], [410.0, 212.0], [409.0, 206.0], [408.0, 206.5], [406.0, 210.5], [404.0, 225.0], [430.0, 197.0], [431.0, 587.0], [429.0, 201.0], [428.0, 200.0], [427.0, 199.0], [426.0, 2989.0], [425.0, 2436.5], [419.0, 203.0], [417.0, 190.0], [416.0, 210.0], [435.0, 189.0], [447.0, 156.33333333333334], [444.0, 177.0], [443.0, 150.0], [442.0, 2009.0], [441.0, 181.0], [439.0, 185.0], [438.0, 187.66666666666666], [436.0, 188.0], [434.0, 196.0], [433.0, 201.0], [432.0, 201.0], [461.0, 3780.0], [463.0, 154.0], [460.0, 299.5], [451.0, 179.0], [450.0, 285.3333333333333], [458.0, 556.0], [457.0, 171.0], [456.0, 171.0], [455.0, 173.0], [454.0, 139.0], [453.0, 141.0], [452.0, 138.0], [467.0, 3686.0], [479.0, 3141.0], [477.0, 3137.0], [475.0, 3393.0], [473.0, 3241.0], [472.0, 3032.0], [471.0, 135.0], [470.0, 153.0], [469.0, 332.0], [466.0, 543.0], [465.0, 153.66666666666666], [494.0, 3381.0], [495.0, 2985.0], [493.0, 3450.6666666666665], [492.0, 2502.0], [490.0, 2987.0], [489.0, 380.0], [488.0, 3616.0], [487.0, 2883.5], [483.0, 2888.5], [482.0, 2676.0], [486.0, 2444.0], [484.0, 2634.6666666666665], [509.0, 2907.0], [511.0, 2903.5], [508.0, 3297.0], [507.0, 2909.0], [506.0, 2912.6666666666665], [505.0, 2917.0], [504.0, 2918.0], [502.0, 2812.25], [497.0, 3060.2], [541.0, 3638.0], [542.0, 3717.0], [530.0, 2435.0], [528.0, 2431.5], [540.0, 2984.5], [538.0, 3533.0], [537.0, 349.0], [536.0, 3725.0], [527.0, 3319.0], [513.0, 2525.0], [512.0, 2905.5], [518.0, 3311.0], [515.0, 3298.3333333333335], [526.0, 2455.0], [523.0, 2976.0], [521.0, 2432.0], [520.0, 2873.0], [535.0, 2962.5], [533.0, 2442.0], [532.0, 3260.0], [531.0, 2413.0], [563.0, 3578.0], [574.0, 3262.0], [573.0, 3668.0], [571.0, 3521.3333333333335], [568.0, 3314.0], [558.0, 3588.0], [544.0, 3672.0], [546.0, 3576.0], [545.0, 3715.0], [551.0, 3408.6666666666665], [548.0, 3494.5], [556.0, 3515.0], [554.0, 3678.0], [552.0, 3682.0], [567.0, 3635.5], [566.0, 3611.5], [565.0, 3656.0], [561.0, 3543.0], [560.0, 3469.5], [605.0, 3614.0], [607.0, 3170.6666666666665], [603.0, 1633.0], [602.0, 3208.5], [600.0, 47.0], [583.0, 3144.0], [582.0, 3277.0], [580.0, 3683.0], [579.0, 3190.0], [577.0, 3307.0], [576.0, 3305.0], [589.0, 2892.0], [588.0, 3396.0], [587.0, 3127.0], [586.0, 32.0], [585.0, 3566.0], [584.0, 3144.0], [598.0, 3361.3333333333335], [595.0, 3388.5], [593.0, 3365.5], [592.0, 1643.5], [632.0, 37.0], [638.0, 3239.0], [639.0, 2841.0], [626.0, 3436.5], [636.0, 3315.5], [634.0, 48.0], [633.0, 3639.0], [623.0, 3526.0], [608.0, 3140.0], [612.0, 3174.5], [610.0, 3102.0], [614.0, 3242.0], [613.0, 3191.0], [622.0, 39.0], [621.0, 2866.0], [620.0, 34.0], [619.0, 40.5], [617.0, 3671.0], [616.0, 3138.0], [631.0, 2845.0], [630.0, 2848.0], [629.0, 40.0], [628.0, 979.3333333333333], [666.0, 1424.5], [670.0, 2237.0], [671.0, 64.0], [656.0, 34.0], [658.0, 3584.0], [657.0, 33.0], [661.0, 38.0], [659.0, 38.0], [669.0, 70.0], [668.0, 3559.0], [667.0, 2971.0], [665.0, 29.0], [647.0, 3191.5], [645.0, 37.0], [644.0, 38.0], [643.0, 3207.0], [642.0, 3616.0], [640.0, 60.0], [655.0, 3007.5], [653.0, 41.0], [652.0, 2820.0], [651.0, 29.0], [650.0, 44.0], [649.0, 30.0], [648.0, 30.0], [663.0, 28.0], [662.0, 3449.0], [692.0, 2252.0], [702.0, 1189.25], [698.0, 2250.0], [697.0, 2170.5], [679.0, 3038.0], [677.0, 2256.0], [676.0, 2306.0], [675.0, 57.0], [674.0, 2894.0], [672.0, 2284.0], [695.0, 2251.0], [694.0, 2152.6666666666665], [693.0, 2219.0], [689.0, 2503.3333333333335], [687.0, 2253.0], [686.0, 2221.0], [684.0, 2224.0], [683.0, 2217.0], [682.0, 2207.0], [681.0, 2213.0], [734.0, 31.0], [735.0, 40.0], [721.0, 2946.0], [733.0, 44.666666666666664], [730.0, 39.0], [729.0, 39.0], [728.0, 3076.0], [719.0, 3520.0], [704.0, 1142.5], [708.0, 3511.0], [707.0, 3405.0], [711.0, 2158.0], [709.0, 3399.0], [718.0, 3117.0], [717.0, 56.0], [716.0, 1213.6666666666665], [713.0, 1055.5], [726.0, 3021.5], [724.0, 3410.0], [723.0, 3093.0], [722.0, 3229.0], [761.0, 42.0], [766.0, 31.0], [767.0, 34.0], [753.0, 49.0], [752.0, 52.0], [756.0, 46.5], [754.0, 45.0], [765.0, 44.0], [764.0, 46.0], [763.0, 35.0], [760.0, 46.0], [743.0, 37.0], [742.0, 42.0], [741.0, 33.0], [740.0, 46.0], [739.0, 41.0], [737.0, 49.0], [736.0, 40.0], [751.0, 37.0], [750.0, 54.0], [749.0, 504.5], [747.0, 35.0], [746.0, 273.0], [744.0, 34.0], [759.0, 48.0], [758.0, 45.0], [793.0, 41.5], [797.0, 39.0], [798.0, 38.0], [785.0, 39.0], [784.0, 2056.0], [787.0, 2038.0], [786.0, 60.0], [796.0, 26.0], [795.0, 31.0], [794.0, 27.0], [783.0, 35.0], [769.0, 38.0], [768.0, 44.0], [771.0, 38.0], [770.0, 40.0], [774.0, 47.5], [773.0, 29.0], [782.0, 38.0], [780.0, 2025.0], [779.0, 2035.0], [778.0, 51.0], [777.0, 43.0], [776.0, 51.5], [791.0, 42.0], [790.0, 47.0], [789.0, 48.0], [788.0, 51.0], [825.0, 68.0], [817.0, 75.0], [829.0, 110.0], [831.0, 111.0], [816.0, 68.0], [827.0, 112.5], [824.0, 923.0], [807.0, 2820.0], [806.0, 32.0], [805.0, 44.0], [804.0, 30.5], [802.0, 52.0], [801.0, 239.0], [800.0, 33.0], [815.0, 1885.0], [814.0, 3080.0], [813.0, 2876.0], [812.0, 2850.6666666666665], [810.0, 2812.0], [809.0, 2682.0], [822.0, 52.0], [821.0, 998.0], [818.0, 72.0], [857.0, 58.666666666666664], [850.0, 137.0], [862.0, 194.33333333333334], [859.0, 208.0], [858.0, 58.0], [847.0, 107.0], [832.0, 107.0], [834.0, 106.0], [833.0, 109.0], [837.0, 134.0], [836.0, 106.5], [839.0, 209.0], [838.0, 210.0], [846.0, 226.0], [845.0, 233.0], [844.0, 210.0], [843.0, 108.0], [842.0, 196.0], [841.0, 67.0], [854.0, 181.0], [853.0, 174.5], [852.0, 183.0], [848.0, 177.0], [892.0, 75.0], [895.0, 31.0], [880.0, 178.0], [883.0, 155.0], [881.0, 178.0], [885.0, 140.0], [884.0, 120.0], [894.0, 2529.0], [893.0, 2452.0], [891.0, 77.0], [890.0, 125.0], [889.0, 2699.0], [888.0, 101.0], [879.0, 183.0], [865.0, 186.33333333333334], [867.0, 215.0], [866.0, 169.0], [869.0, 204.0], [868.0, 169.0], [878.0, 184.33333333333334], [875.0, 208.0], [874.0, 165.5], [872.0, 167.0], [887.0, 115.0], [886.0, 117.5], [920.0, 35.0], [925.0, 2514.0], [926.0, 29.0], [912.0, 2859.0], [914.0, 55.0], [913.0, 57.0], [924.0, 2488.0], [922.0, 2518.0], [921.0, 33.0], [911.0, 44.0], [897.0, 43.0], [896.0, 30.0], [899.0, 2936.0], [898.0, 28.0], [902.0, 29.5], [900.0, 32.0], [910.0, 36.0], [909.0, 31.5], [908.0, 2398.0], [906.0, 2894.0], [905.0, 40.0], [904.0, 1222.0], [918.0, 36.0], [917.0, 40.0], [916.0, 52.0], [915.0, 2548.0], [952.0, 47.0], [957.0, 45.0], [958.0, 35.0], [945.0, 32.0], [944.0, 26.0], [947.0, 27.0], [946.0, 24.0], [956.0, 2722.0], [955.0, 44.0], [954.0, 45.5], [943.0, 29.0], [928.0, 2637.0], [932.0, 2793.5], [930.0, 2672.5], [934.0, 2737.0], [933.0, 197.0], [942.0, 2830.0], [941.0, 29.0], [940.0, 2648.0], [937.0, 2365.0], [936.0, 2381.5], [951.0, 46.0], [950.0, 28.0], [949.0, 53.0], [948.0, 76.0], [985.0, 2302.0], [990.0, 2109.0], [991.0, 2663.0], [977.0, 2216.0], [976.0, 2346.0], [980.0, 2681.0], [979.0, 2588.0], [989.0, 2424.0], [987.0, 2647.0], [986.0, 2236.0], [984.0, 2523.0], [967.0, 41.5], [966.0, 48.5], [965.0, 1352.5], [961.0, 39.0], [960.0, 33.5], [975.0, 2647.0], [974.0, 57.0], [973.0, 60.0], [972.0, 60.0], [971.0, 1386.0], [969.0, 2724.0], [968.0, 38.0], [983.0, 2605.0], [981.0, 2641.0], [1017.0, 2156.0], [1012.0, 2617.0], [1023.0, 2517.0], [1021.0, 2309.5], [1019.0, 2119.0], [1007.0, 2631.0], [993.0, 2291.0], [992.0, 2240.0], [996.0, 2303.5], [994.0, 2651.0], [999.0, 2408.5], [997.0, 2279.0], [1006.0, 2144.0], [1005.0, 2635.0], [1004.0, 2124.0], [1003.0, 2520.6666666666665], [1002.0, 2253.0], [1015.0, 2616.5], [1014.0, 2094.0], [1013.0, 2615.0], [1010.0, 2406.0], [1008.0, 2271.0], [1084.0, 2402.0], [1056.0, 1555.0], [1060.0, 2226.3333333333335], [1070.0, 2476.0], [1080.0, 2143.0], [1078.0, 2459.0], [1076.0, 2031.5], [1074.0, 2397.6666666666665], [1028.0, 2126.0], [1034.0, 2590.0], [1038.0, 2053.0], [1052.0, 1526.0], [1048.0, 2536.0], [1046.0, 2134.0], [1044.0, 2308.0], [1042.0, 2108.0], [1040.0, 2101.0], [1138.0, 32.0], [1150.0, 2409.0], [1124.0, 856.0], [1130.0, 2433.0], [1132.0, 1217.5], [1134.0, 1240.0], [1148.0, 2048.0], [1146.0, 2293.0], [1142.0, 2353.0], [1140.0, 1827.0], [1088.0, 1837.0], [1090.0, 2448.0], [1096.0, 1700.0], [1100.0, 2415.0], [1098.0, 2390.0], [1102.0, 2032.0], [1118.0, 1251.0], [1114.0, 2068.0], [1110.0, 2524.0], [1108.0, 1737.0], [1104.0, 1739.5], [1204.0, 2055.0], [1214.0, 2092.0], [1184.0, 2348.0], [1192.0, 2033.0], [1194.0, 2311.5], [1198.0, 2088.0], [1196.0, 1441.0], [1212.0, 2318.0], [1206.0, 1353.0], [1202.0, 2329.5], [1200.0, 1990.5], [1166.0, 2392.0], [1164.0, 1816.0], [1162.0, 2211.0], [1160.0, 2016.0], [1158.0, 2359.0], [1156.0, 2249.0], [1154.0, 2149.0], [1152.0, 2237.0], [1178.0, 2345.0], [1174.0, 807.0], [1170.0, 1950.0], [1274.0, 2232.0], [1252.0, 2068.0], [1254.0, 2246.0], [1260.0, 2124.5], [1258.0, 1976.0], [1270.0, 2253.0], [1268.0, 1676.0], [1264.0, 1883.5], [1216.0, 2068.0], [1222.0, 2327.0], [1224.0, 1492.0], [1230.0, 2254.0], [1246.0, 1250.0], [1238.0, 882.0], [1236.0, 2141.0], [1234.0, 2188.0], [1262.0, 2033.0], [1334.0, 1948.0], [1338.0, 2037.0], [1312.0, 2191.0], [1314.0, 2183.0], [1318.0, 2123.0], [1316.0, 1942.0], [1322.0, 1349.75], [1326.0, 1988.6666666666667], [1340.0, 1957.0], [1336.0, 2103.0], [1330.0, 1802.0], [1328.0, 1950.0], [1292.0, 1772.0], [1290.0, 2198.0], [1288.0, 2062.0], [1282.0, 2101.0], [1306.0, 1980.0], [1302.0, 2013.0], [1300.0, 1902.0], [1296.0, 2024.6666666666667], [1378.0, 1862.6666666666667], [1376.0, 1873.0], [1382.0, 1283.5], [1386.0, 1629.0], [1388.0, 591.0], [1390.0, 565.0], [1406.0, 1589.0], [1402.0, 1815.0], [1398.0, 1499.0], [1396.0, 602.0], [1374.0, 2132.0], [1344.0, 1926.0], [1352.0, 1920.0], [1348.0, 1928.5], [1358.0, 2002.75], [1372.0, 2154.0], [1370.0, 2158.0], [1368.0, 2040.0], [1364.0, 1952.2], [1464.0, 1452.0], [1442.0, 1725.0], [1444.0, 1711.0], [1448.0, 1767.0], [1450.0, 1872.0], [1452.0, 1740.5], [1454.0, 1476.0], [1468.0, 1362.0], [1466.0, 1460.0], [1460.0, 1888.0], [1458.0, 1618.6666666666667], [1438.0, 1529.0], [1410.0, 1887.5], [1408.0, 1768.0], [1412.0, 1599.0], [1414.0, 394.0], [1416.0, 1838.0], [1418.0, 1679.0], [1420.0, 1796.0], [1422.0, 1750.0], [1436.0, 1419.0], [1430.0, 1748.0], [1426.0, 1761.0], [1424.0, 1768.5], [1474.0, 1481.0], [1492.0, 1432.0], [1500.0, 1464.2], [1472.0, 1488.0], [1476.0, 1326.0], [1480.0, 1661.0], [1482.0, 1865.0], [1490.0, 1287.0], [1488.0, 1829.0], [1484.0, 1697.0], [1083.0, 2044.5], [1087.0, 2255.0], [1057.0, 2377.0], [1061.0, 1515.0], [1065.0, 1875.0], [1063.0, 1547.0], [1069.0, 1544.3333333333333], [1067.0, 2238.0], [1071.0, 1442.0], [1085.0, 2405.0], [1081.0, 2523.0], [1077.0, 1530.0], [1055.0, 2456.6666666666665], [1025.0, 2151.0], [1027.0, 2514.0], [1033.0, 2245.3333333333335], [1031.0, 2316.5], [1035.0, 2231.0], [1037.0, 2152.0], [1051.0, 2464.5], [1049.0, 2263.0], [1047.0, 2195.0], [1045.0, 2582.0], [1043.0, 2564.0], [1143.0, 1848.0], [1147.0, 2093.0], [1123.0, 1748.25], [1127.0, 438.5], [1125.0, 1282.0], [1129.0, 1165.0], [1133.0, 31.0], [1135.0, 37.0], [1149.0, 2222.0], [1145.0, 1968.0], [1139.0, 2212.0], [1137.0, 1838.5], [1119.0, 1300.0], [1089.0, 2516.0], [1093.0, 2495.5], [1091.0, 2516.0], [1097.0, 2049.0], [1101.0, 2463.0], [1117.0, 913.0], [1115.0, 899.0], [1113.0, 2361.0], [1111.0, 1323.0], [1109.0, 2487.0], [1107.0, 1363.0], [1105.0, 1365.0], [1163.0, 1929.0], [1207.0, 2341.0], [1187.0, 1849.0], [1185.0, 2278.0], [1189.0, 2109.5], [1193.0, 2196.0], [1211.0, 1797.0], [1203.0, 2095.0], [1167.0, 2365.0], [1165.0, 2099.0], [1161.0, 2015.0], [1159.0, 2036.0], [1157.0, 2090.0], [1155.0, 2271.0], [1183.0, 2139.5], [1181.0, 2062.0], [1177.0, 1962.3333333333333], [1173.0, 2274.0], [1171.0, 2015.0], [1169.0, 2353.0], [1225.0, 1134.0], [1271.0, 1940.0], [1279.0, 2026.5], [1251.0, 2019.5], [1249.0, 2126.0], [1253.0, 2257.0], [1257.0, 1762.0], [1277.0, 1769.0], [1269.0, 1959.0], [1247.0, 1832.0], [1219.0, 1554.5], [1217.0, 2032.0], [1221.0, 2156.0], [1229.0, 1964.0], [1227.0, 1575.0], [1231.0, 2282.0], [1243.0, 2261.0], [1241.0, 2206.0], [1239.0, 882.0], [1237.0, 1108.0], [1235.0, 2009.0], [1233.0, 2032.5], [1261.0, 2144.0], [1289.0, 1943.0], [1341.0, 1768.0], [1313.0, 1944.0], [1315.0, 1993.0], [1323.0, 1667.0], [1327.0, 1940.0], [1339.0, 2071.0], [1337.0, 2057.0], [1295.0, 1985.0], [1291.0, 2176.0], [1287.0, 1781.0], [1285.0, 1940.0], [1283.0, 1777.0], [1281.0, 793.0], [1311.0, 2087.5], [1309.0, 1899.0], [1307.0, 1717.0], [1305.0, 2104.0], [1303.0, 1713.0], [1301.0, 2181.0], [1299.0, 1915.6666666666667], [1379.0, 1711.0], [1383.0, 1950.0], [1403.0, 1620.5], [1407.0, 1506.0], [1377.0, 2037.0], [1381.0, 576.0], [1385.0, 619.0], [1387.0, 1740.0], [1389.0, 2007.0], [1391.0, 530.0], [1405.0, 1881.0], [1395.0, 1307.0], [1393.0, 1238.0], [1347.0, 1634.0], [1357.0, 1879.0], [1353.0, 1560.0], [1373.0, 1987.5], [1367.0, 1866.0], [1365.0, 1844.0], [1361.0, 1918.0], [1467.0, 1883.0], [1447.0, 1598.0], [1471.0, 1845.0], [1441.0, 1704.3333333333333], [1443.0, 1712.0], [1445.0, 1529.0], [1449.0, 1874.0], [1453.0, 1370.0], [1455.0, 1776.0], [1469.0, 1356.0], [1463.0, 1473.0], [1459.0, 1340.0], [1411.0, 1958.0], [1413.0, 2001.0], [1415.0, 1695.0], [1417.0, 1791.0], [1419.0, 379.0], [1421.0, 1783.0], [1437.0, 1786.0], [1435.0, 1911.0], [1433.0, 1835.0], [1431.0, 1789.0], [1427.0, 1956.0], [1425.0, 1783.0], [1479.0, 1391.3333333333333], [1473.0, 1839.0], [1481.0, 1846.0], [1495.0, 1793.0], [1493.0, 1390.0], [1491.0, 1835.0], [1489.0, 1818.0], [1487.0, 1567.5], [1485.0, 1406.0], [1483.0, 1838.0], [1.0, 695.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}, {"data": [[755.412666666666, 1738.3346666666664]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15775.0, "minX": 1.75635426E12, "maxY": 21550.0, "series": [{"data": [[1.75635426E12, 21550.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75635426E12, 15775.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635426E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1738.3346666666664, "minX": 1.75635426E12, "maxY": 1738.3346666666664, "series": [{"data": [[1.75635426E12, 1738.3346666666664]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635426E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1737.67866666667, "minX": 1.75635426E12, "maxY": 1737.67866666667, "series": [{"data": [[1.75635426E12, 1737.67866666667]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635426E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1472.385333333334, "minX": 1.75635426E12, "maxY": 1472.385333333334, "series": [{"data": [[1.75635426E12, 1472.385333333334]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635426E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.75635426E12, "maxY": 4310.0, "series": [{"data": [[1.75635426E12, 4310.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75635426E12, 3540.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75635426E12, 4114.97]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75635426E12, 3715.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75635426E12, 24.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75635426E12, 1930.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635426E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 673.0, "minX": 105.0, "maxY": 2250.0, "series": [{"data": [[707.0, 2250.0], [105.0, 673.0], [218.0, 1817.5], [470.0, 2039.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 707.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 673.0, "minX": 105.0, "maxY": 2250.0, "series": [{"data": [[707.0, 2250.0], [105.0, 673.0], [218.0, 1816.5], [470.0, 2037.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 707.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.35, "minX": 1.7563542E12, "maxY": 18.65, "series": [{"data": [[1.75635426E12, 18.65], [1.7563542E12, 6.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635426E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635426E12, "maxY": 25.0, "series": [{"data": [[1.75635426E12, 25.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75635426E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635426E12, "maxY": 25.0, "series": [{"data": [[1.75635426E12, 25.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635426E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75635426E12, "maxY": 25.0, "series": [{"data": [[1.75635426E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75635426E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

