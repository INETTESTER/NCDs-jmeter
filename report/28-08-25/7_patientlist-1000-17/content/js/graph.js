/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "maxY": 2959.0, "series": [{"data": [[0.0, 23.0], [0.1, 23.0], [0.2, 25.0], [0.3, 25.0], [0.4, 25.0], [0.5, 26.0], [0.6, 26.0], [0.7, 26.0], [0.8, 26.0], [0.9, 26.0], [1.0, 26.0], [1.1, 26.0], [1.2, 27.0], [1.3, 27.0], [1.4, 27.0], [1.5, 27.0], [1.6, 27.0], [1.7, 27.0], [1.8, 27.0], [1.9, 27.0], [2.0, 28.0], [2.1, 29.0], [2.2, 29.0], [2.3, 29.0], [2.4, 29.0], [2.5, 29.0], [2.6, 29.0], [2.7, 30.0], [2.8, 30.0], [2.9, 30.0], [3.0, 30.0], [3.1, 30.0], [3.2, 30.0], [3.3, 30.0], [3.4, 30.0], [3.5, 31.0], [3.6, 31.0], [3.7, 31.0], [3.8, 31.0], [3.9, 32.0], [4.0, 32.0], [4.1, 32.0], [4.2, 32.0], [4.3, 32.0], [4.4, 33.0], [4.5, 33.0], [4.6, 33.0], [4.7, 33.0], [4.8, 33.0], [4.9, 33.0], [5.0, 33.0], [5.1, 33.0], [5.2, 34.0], [5.3, 34.0], [5.4, 35.0], [5.5, 35.0], [5.6, 35.0], [5.7, 35.0], [5.8, 35.0], [5.9, 36.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 38.0], [6.7, 38.0], [6.8, 38.0], [6.9, 39.0], [7.0, 40.0], [7.1, 40.0], [7.2, 41.0], [7.3, 41.0], [7.4, 41.0], [7.5, 41.0], [7.6, 41.0], [7.7, 42.0], [7.8, 42.0], [7.9, 42.0], [8.0, 42.0], [8.1, 43.0], [8.2, 43.0], [8.3, 43.0], [8.4, 43.0], [8.5, 44.0], [8.6, 44.0], [8.7, 45.0], [8.8, 46.0], [8.9, 46.0], [9.0, 47.0], [9.1, 47.0], [9.2, 47.0], [9.3, 48.0], [9.4, 48.0], [9.5, 49.0], [9.6, 50.0], [9.7, 51.0], [9.8, 51.0], [9.9, 52.0], [10.0, 52.0], [10.1, 52.0], [10.2, 54.0], [10.3, 54.0], [10.4, 55.0], [10.5, 56.0], [10.6, 56.0], [10.7, 59.0], [10.8, 65.0], [10.9, 74.0], [11.0, 76.0], [11.1, 93.0], [11.2, 94.0], [11.3, 98.0], [11.4, 99.0], [11.5, 100.0], [11.6, 103.0], [11.7, 105.0], [11.8, 106.0], [11.9, 108.0], [12.0, 112.0], [12.1, 118.0], [12.2, 120.0], [12.3, 132.0], [12.4, 134.0], [12.5, 134.0], [12.6, 134.0], [12.7, 135.0], [12.8, 141.0], [12.9, 143.0], [13.0, 146.0], [13.1, 158.0], [13.2, 159.0], [13.3, 166.0], [13.4, 169.0], [13.5, 175.0], [13.6, 183.0], [13.7, 187.0], [13.8, 188.0], [13.9, 190.0], [14.0, 191.0], [14.1, 195.0], [14.2, 197.0], [14.3, 198.0], [14.4, 199.0], [14.5, 200.0], [14.6, 202.0], [14.7, 203.0], [14.8, 203.0], [14.9, 204.0], [15.0, 208.0], [15.1, 208.0], [15.2, 208.0], [15.3, 209.0], [15.4, 213.0], [15.5, 213.0], [15.6, 228.0], [15.7, 237.0], [15.8, 238.0], [15.9, 240.0], [16.0, 241.0], [16.1, 243.0], [16.2, 247.0], [16.3, 252.0], [16.4, 253.0], [16.5, 270.0], [16.6, 280.0], [16.7, 284.0], [16.8, 285.0], [16.9, 288.0], [17.0, 294.0], [17.1, 296.0], [17.2, 300.0], [17.3, 300.0], [17.4, 302.0], [17.5, 306.0], [17.6, 323.0], [17.7, 327.0], [17.8, 338.0], [17.9, 338.0], [18.0, 353.0], [18.1, 354.0], [18.2, 357.0], [18.3, 364.0], [18.4, 367.0], [18.5, 367.0], [18.6, 367.0], [18.7, 375.0], [18.8, 376.0], [18.9, 378.0], [19.0, 379.0], [19.1, 379.0], [19.2, 380.0], [19.3, 382.0], [19.4, 382.0], [19.5, 383.0], [19.6, 388.0], [19.7, 398.0], [19.8, 410.0], [19.9, 431.0], [20.0, 446.0], [20.1, 446.0], [20.2, 456.0], [20.3, 461.0], [20.4, 465.0], [20.5, 475.0], [20.6, 475.0], [20.7, 477.0], [20.8, 478.0], [20.9, 480.0], [21.0, 480.0], [21.1, 480.0], [21.2, 481.0], [21.3, 483.0], [21.4, 483.0], [21.5, 484.0], [21.6, 487.0], [21.7, 487.0], [21.8, 487.0], [21.9, 497.0], [22.0, 497.0], [22.1, 498.0], [22.2, 501.0], [22.3, 503.0], [22.4, 504.0], [22.5, 505.0], [22.6, 506.0], [22.7, 508.0], [22.8, 513.0], [22.9, 524.0], [23.0, 533.0], [23.1, 549.0], [23.2, 551.0], [23.3, 556.0], [23.4, 563.0], [23.5, 563.0], [23.6, 564.0], [23.7, 570.0], [23.8, 596.0], [23.9, 603.0], [24.0, 606.0], [24.1, 610.0], [24.2, 610.0], [24.3, 625.0], [24.4, 631.0], [24.5, 633.0], [24.6, 639.0], [24.7, 669.0], [24.8, 677.0], [24.9, 717.0], [25.0, 719.0], [25.1, 719.0], [25.2, 743.0], [25.3, 748.0], [25.4, 750.0], [25.5, 758.0], [25.6, 765.0], [25.7, 781.0], [25.8, 784.0], [25.9, 785.0], [26.0, 790.0], [26.1, 800.0], [26.2, 809.0], [26.3, 820.0], [26.4, 823.0], [26.5, 843.0], [26.6, 846.0], [26.7, 851.0], [26.8, 859.0], [26.9, 860.0], [27.0, 862.0], [27.1, 868.0], [27.2, 870.0], [27.3, 871.0], [27.4, 872.0], [27.5, 876.0], [27.6, 878.0], [27.7, 881.0], [27.8, 897.0], [27.9, 899.0], [28.0, 900.0], [28.1, 914.0], [28.2, 918.0], [28.3, 919.0], [28.4, 921.0], [28.5, 925.0], [28.6, 926.0], [28.7, 926.0], [28.8, 934.0], [28.9, 936.0], [29.0, 936.0], [29.1, 939.0], [29.2, 940.0], [29.3, 948.0], [29.4, 949.0], [29.5, 951.0], [29.6, 955.0], [29.7, 959.0], [29.8, 959.0], [29.9, 967.0], [30.0, 968.0], [30.1, 969.0], [30.2, 971.0], [30.3, 988.0], [30.4, 993.0], [30.5, 997.0], [30.6, 1002.0], [30.7, 1004.0], [30.8, 1013.0], [30.9, 1013.0], [31.0, 1018.0], [31.1, 1019.0], [31.2, 1019.0], [31.3, 1020.0], [31.4, 1020.0], [31.5, 1020.0], [31.6, 1022.0], [31.7, 1022.0], [31.8, 1025.0], [31.9, 1026.0], [32.0, 1031.0], [32.1, 1031.0], [32.2, 1033.0], [32.3, 1033.0], [32.4, 1040.0], [32.5, 1040.0], [32.6, 1041.0], [32.7, 1047.0], [32.8, 1047.0], [32.9, 1057.0], [33.0, 1063.0], [33.1, 1063.0], [33.2, 1064.0], [33.3, 1064.0], [33.4, 1064.0], [33.5, 1065.0], [33.6, 1067.0], [33.7, 1068.0], [33.8, 1072.0], [33.9, 1077.0], [34.0, 1079.0], [34.1, 1091.0], [34.2, 1098.0], [34.3, 1100.0], [34.4, 1101.0], [34.5, 1108.0], [34.6, 1109.0], [34.7, 1111.0], [34.8, 1115.0], [34.9, 1116.0], [35.0, 1117.0], [35.1, 1129.0], [35.2, 1130.0], [35.3, 1130.0], [35.4, 1136.0], [35.5, 1144.0], [35.6, 1147.0], [35.7, 1150.0], [35.8, 1153.0], [35.9, 1155.0], [36.0, 1156.0], [36.1, 1157.0], [36.2, 1162.0], [36.3, 1162.0], [36.4, 1163.0], [36.5, 1163.0], [36.6, 1163.0], [36.7, 1165.0], [36.8, 1169.0], [36.9, 1170.0], [37.0, 1180.0], [37.1, 1180.0], [37.2, 1189.0], [37.3, 1194.0], [37.4, 1200.0], [37.5, 1211.0], [37.6, 1214.0], [37.7, 1215.0], [37.8, 1223.0], [37.9, 1223.0], [38.0, 1225.0], [38.1, 1228.0], [38.2, 1230.0], [38.3, 1230.0], [38.4, 1233.0], [38.5, 1236.0], [38.6, 1237.0], [38.7, 1239.0], [38.8, 1240.0], [38.9, 1240.0], [39.0, 1245.0], [39.1, 1247.0], [39.2, 1248.0], [39.3, 1248.0], [39.4, 1249.0], [39.5, 1249.0], [39.6, 1252.0], [39.7, 1252.0], [39.8, 1255.0], [39.9, 1256.0], [40.0, 1256.0], [40.1, 1263.0], [40.2, 1267.0], [40.3, 1269.0], [40.4, 1269.0], [40.5, 1275.0], [40.6, 1275.0], [40.7, 1276.0], [40.8, 1288.0], [40.9, 1290.0], [41.0, 1302.0], [41.1, 1304.0], [41.2, 1305.0], [41.3, 1309.0], [41.4, 1309.0], [41.5, 1313.0], [41.6, 1313.0], [41.7, 1316.0], [41.8, 1319.0], [41.9, 1326.0], [42.0, 1331.0], [42.1, 1336.0], [42.2, 1347.0], [42.3, 1349.0], [42.4, 1368.0], [42.5, 1372.0], [42.6, 1373.0], [42.7, 1375.0], [42.8, 1378.0], [42.9, 1381.0], [43.0, 1387.0], [43.1, 1387.0], [43.2, 1391.0], [43.3, 1394.0], [43.4, 1394.0], [43.5, 1394.0], [43.6, 1408.0], [43.7, 1408.0], [43.8, 1409.0], [43.9, 1414.0], [44.0, 1417.0], [44.1, 1421.0], [44.2, 1424.0], [44.3, 1425.0], [44.4, 1425.0], [44.5, 1432.0], [44.6, 1435.0], [44.7, 1450.0], [44.8, 1451.0], [44.9, 1454.0], [45.0, 1459.0], [45.1, 1464.0], [45.2, 1480.0], [45.3, 1492.0], [45.4, 1492.0], [45.5, 1494.0], [45.6, 1500.0], [45.7, 1510.0], [45.8, 1516.0], [45.9, 1520.0], [46.0, 1522.0], [46.1, 1538.0], [46.2, 1547.0], [46.3, 1554.0], [46.4, 1555.0], [46.5, 1563.0], [46.6, 1567.0], [46.7, 1581.0], [46.8, 1584.0], [46.9, 1588.0], [47.0, 1591.0], [47.1, 1599.0], [47.2, 1606.0], [47.3, 1606.0], [47.4, 1607.0], [47.5, 1608.0], [47.6, 1612.0], [47.7, 1618.0], [47.8, 1631.0], [47.9, 1635.0], [48.0, 1644.0], [48.1, 1651.0], [48.2, 1662.0], [48.3, 1663.0], [48.4, 1665.0], [48.5, 1668.0], [48.6, 1681.0], [48.7, 1683.0], [48.8, 1683.0], [48.9, 1687.0], [49.0, 1687.0], [49.1, 1688.0], [49.2, 1688.0], [49.3, 1689.0], [49.4, 1693.0], [49.5, 1699.0], [49.6, 1705.0], [49.7, 1705.0], [49.8, 1708.0], [49.9, 1711.0], [50.0, 1711.0], [50.1, 1714.0], [50.2, 1716.0], [50.3, 1717.0], [50.4, 1717.0], [50.5, 1718.0], [50.6, 1718.0], [50.7, 1718.0], [50.8, 1719.0], [50.9, 1720.0], [51.0, 1721.0], [51.1, 1725.0], [51.2, 1727.0], [51.3, 1730.0], [51.4, 1731.0], [51.5, 1731.0], [51.6, 1734.0], [51.7, 1736.0], [51.8, 1740.0], [51.9, 1744.0], [52.0, 1746.0], [52.1, 1752.0], [52.2, 1753.0], [52.3, 1755.0], [52.4, 1756.0], [52.5, 1761.0], [52.6, 1761.0], [52.7, 1761.0], [52.8, 1766.0], [52.9, 1766.0], [53.0, 1767.0], [53.1, 1772.0], [53.2, 1773.0], [53.3, 1775.0], [53.4, 1776.0], [53.5, 1787.0], [53.6, 1791.0], [53.7, 1793.0], [53.8, 1797.0], [53.9, 1798.0], [54.0, 1800.0], [54.1, 1803.0], [54.2, 1803.0], [54.3, 1804.0], [54.4, 1805.0], [54.5, 1806.0], [54.6, 1806.0], [54.7, 1806.0], [54.8, 1808.0], [54.9, 1812.0], [55.0, 1813.0], [55.1, 1814.0], [55.2, 1815.0], [55.3, 1816.0], [55.4, 1816.0], [55.5, 1817.0], [55.6, 1818.0], [55.7, 1818.0], [55.8, 1820.0], [55.9, 1822.0], [56.0, 1824.0], [56.1, 1825.0], [56.2, 1831.0], [56.3, 1831.0], [56.4, 1832.0], [56.5, 1833.0], [56.6, 1835.0], [56.7, 1836.0], [56.8, 1837.0], [56.9, 1848.0], [57.0, 1851.0], [57.1, 1864.0], [57.2, 1876.0], [57.3, 1879.0], [57.4, 1882.0], [57.5, 1885.0], [57.6, 1887.0], [57.7, 1887.0], [57.8, 1887.0], [57.9, 1896.0], [58.0, 1896.0], [58.1, 1896.0], [58.2, 1897.0], [58.3, 1902.0], [58.4, 1903.0], [58.5, 1908.0], [58.6, 1909.0], [58.7, 1909.0], [58.8, 1910.0], [58.9, 1910.0], [59.0, 1913.0], [59.1, 1918.0], [59.2, 1918.0], [59.3, 1918.0], [59.4, 1922.0], [59.5, 1923.0], [59.6, 1924.0], [59.7, 1924.0], [59.8, 1926.0], [59.9, 1928.0], [60.0, 1929.0], [60.1, 1932.0], [60.2, 1935.0], [60.3, 1937.0], [60.4, 1940.0], [60.5, 1941.0], [60.6, 1943.0], [60.7, 1944.0], [60.8, 1949.0], [60.9, 1951.0], [61.0, 1951.0], [61.1, 1956.0], [61.2, 1962.0], [61.3, 1963.0], [61.4, 1963.0], [61.5, 1963.0], [61.6, 1964.0], [61.7, 1964.0], [61.8, 1964.0], [61.9, 1964.0], [62.0, 1966.0], [62.1, 1967.0], [62.2, 1970.0], [62.3, 1972.0], [62.4, 1973.0], [62.5, 1973.0], [62.6, 1982.0], [62.7, 1983.0], [62.8, 1983.0], [62.9, 1986.0], [63.0, 1987.0], [63.1, 1990.0], [63.2, 1997.0], [63.3, 2011.0], [63.4, 2012.0], [63.5, 2013.0], [63.6, 2013.0], [63.7, 2014.0], [63.8, 2020.0], [63.9, 2020.0], [64.0, 2021.0], [64.1, 2023.0], [64.2, 2023.0], [64.3, 2023.0], [64.4, 2030.0], [64.5, 2034.0], [64.6, 2039.0], [64.7, 2040.0], [64.8, 2046.0], [64.9, 2047.0], [65.0, 2049.0], [65.1, 2052.0], [65.2, 2055.0], [65.3, 2055.0], [65.4, 2058.0], [65.5, 2059.0], [65.6, 2063.0], [65.7, 2063.0], [65.8, 2067.0], [65.9, 2068.0], [66.0, 2075.0], [66.1, 2075.0], [66.2, 2076.0], [66.3, 2076.0], [66.4, 2076.0], [66.5, 2078.0], [66.6, 2081.0], [66.7, 2083.0], [66.8, 2088.0], [66.9, 2089.0], [67.0, 2091.0], [67.1, 2095.0], [67.2, 2101.0], [67.3, 2102.0], [67.4, 2106.0], [67.5, 2107.0], [67.6, 2107.0], [67.7, 2116.0], [67.8, 2119.0], [67.9, 2121.0], [68.0, 2122.0], [68.1, 2132.0], [68.2, 2132.0], [68.3, 2137.0], [68.4, 2137.0], [68.5, 2138.0], [68.6, 2139.0], [68.7, 2140.0], [68.8, 2147.0], [68.9, 2147.0], [69.0, 2151.0], [69.1, 2153.0], [69.2, 2158.0], [69.3, 2160.0], [69.4, 2162.0], [69.5, 2164.0], [69.6, 2168.0], [69.7, 2175.0], [69.8, 2176.0], [69.9, 2182.0], [70.0, 2183.0], [70.1, 2185.0], [70.2, 2189.0], [70.3, 2189.0], [70.4, 2195.0], [70.5, 2205.0], [70.6, 2206.0], [70.7, 2206.0], [70.8, 2213.0], [70.9, 2221.0], [71.0, 2232.0], [71.1, 2241.0], [71.2, 2250.0], [71.3, 2251.0], [71.4, 2255.0], [71.5, 2257.0], [71.6, 2261.0], [71.7, 2265.0], [71.8, 2265.0], [71.9, 2271.0], [72.0, 2275.0], [72.1, 2276.0], [72.2, 2280.0], [72.3, 2284.0], [72.4, 2284.0], [72.5, 2290.0], [72.6, 2293.0], [72.7, 2294.0], [72.8, 2295.0], [72.9, 2298.0], [73.0, 2298.0], [73.1, 2300.0], [73.2, 2301.0], [73.3, 2305.0], [73.4, 2307.0], [73.5, 2310.0], [73.6, 2311.0], [73.7, 2313.0], [73.8, 2316.0], [73.9, 2317.0], [74.0, 2319.0], [74.1, 2322.0], [74.2, 2325.0], [74.3, 2326.0], [74.4, 2331.0], [74.5, 2335.0], [74.6, 2336.0], [74.7, 2337.0], [74.8, 2337.0], [74.9, 2339.0], [75.0, 2342.0], [75.1, 2343.0], [75.2, 2346.0], [75.3, 2353.0], [75.4, 2353.0], [75.5, 2354.0], [75.6, 2354.0], [75.7, 2358.0], [75.8, 2359.0], [75.9, 2360.0], [76.0, 2360.0], [76.1, 2361.0], [76.2, 2367.0], [76.3, 2371.0], [76.4, 2381.0], [76.5, 2382.0], [76.6, 2388.0], [76.7, 2389.0], [76.8, 2392.0], [76.9, 2394.0], [77.0, 2394.0], [77.1, 2402.0], [77.2, 2402.0], [77.3, 2403.0], [77.4, 2404.0], [77.5, 2405.0], [77.6, 2405.0], [77.7, 2406.0], [77.8, 2406.0], [77.9, 2407.0], [78.0, 2407.0], [78.1, 2409.0], [78.2, 2409.0], [78.3, 2410.0], [78.4, 2412.0], [78.5, 2413.0], [78.6, 2414.0], [78.7, 2421.0], [78.8, 2426.0], [78.9, 2441.0], [79.0, 2442.0], [79.1, 2443.0], [79.2, 2446.0], [79.3, 2448.0], [79.4, 2450.0], [79.5, 2451.0], [79.6, 2456.0], [79.7, 2464.0], [79.8, 2465.0], [79.9, 2466.0], [80.0, 2468.0], [80.1, 2469.0], [80.2, 2470.0], [80.3, 2473.0], [80.4, 2474.0], [80.5, 2476.0], [80.6, 2477.0], [80.7, 2477.0], [80.8, 2480.0], [80.9, 2481.0], [81.0, 2482.0], [81.1, 2482.0], [81.2, 2483.0], [81.3, 2483.0], [81.4, 2485.0], [81.5, 2486.0], [81.6, 2488.0], [81.7, 2489.0], [81.8, 2492.0], [81.9, 2492.0], [82.0, 2494.0], [82.1, 2494.0], [82.2, 2495.0], [82.3, 2497.0], [82.4, 2498.0], [82.5, 2499.0], [82.6, 2499.0], [82.7, 2500.0], [82.8, 2501.0], [82.9, 2501.0], [83.0, 2503.0], [83.1, 2504.0], [83.2, 2504.0], [83.3, 2505.0], [83.4, 2505.0], [83.5, 2505.0], [83.6, 2506.0], [83.7, 2507.0], [83.8, 2507.0], [83.9, 2508.0], [84.0, 2510.0], [84.1, 2511.0], [84.2, 2512.0], [84.3, 2513.0], [84.4, 2513.0], [84.5, 2513.0], [84.6, 2514.0], [84.7, 2515.0], [84.8, 2515.0], [84.9, 2516.0], [85.0, 2517.0], [85.1, 2517.0], [85.2, 2518.0], [85.3, 2520.0], [85.4, 2523.0], [85.5, 2523.0], [85.6, 2525.0], [85.7, 2527.0], [85.8, 2530.0], [85.9, 2530.0], [86.0, 2530.0], [86.1, 2536.0], [86.2, 2540.0], [86.3, 2541.0], [86.4, 2547.0], [86.5, 2547.0], [86.6, 2553.0], [86.7, 2554.0], [86.8, 2555.0], [86.9, 2555.0], [87.0, 2556.0], [87.1, 2556.0], [87.2, 2556.0], [87.3, 2559.0], [87.4, 2559.0], [87.5, 2561.0], [87.6, 2561.0], [87.7, 2563.0], [87.8, 2567.0], [87.9, 2568.0], [88.0, 2569.0], [88.1, 2569.0], [88.2, 2570.0], [88.3, 2572.0], [88.4, 2572.0], [88.5, 2575.0], [88.6, 2577.0], [88.7, 2584.0], [88.8, 2586.0], [88.9, 2588.0], [89.0, 2589.0], [89.1, 2590.0], [89.2, 2590.0], [89.3, 2592.0], [89.4, 2593.0], [89.5, 2594.0], [89.6, 2606.0], [89.7, 2606.0], [89.8, 2611.0], [89.9, 2614.0], [90.0, 2616.0], [90.1, 2616.0], [90.2, 2617.0], [90.3, 2618.0], [90.4, 2619.0], [90.5, 2621.0], [90.6, 2622.0], [90.7, 2623.0], [90.8, 2629.0], [90.9, 2631.0], [91.0, 2631.0], [91.1, 2636.0], [91.2, 2640.0], [91.3, 2640.0], [91.4, 2642.0], [91.5, 2645.0], [91.6, 2646.0], [91.7, 2649.0], [91.8, 2654.0], [91.9, 2654.0], [92.0, 2657.0], [92.1, 2661.0], [92.2, 2661.0], [92.3, 2661.0], [92.4, 2662.0], [92.5, 2662.0], [92.6, 2662.0], [92.7, 2663.0], [92.8, 2664.0], [92.9, 2665.0], [93.0, 2668.0], [93.1, 2668.0], [93.2, 2671.0], [93.3, 2672.0], [93.4, 2673.0], [93.5, 2676.0], [93.6, 2680.0], [93.7, 2681.0], [93.8, 2682.0], [93.9, 2685.0], [94.0, 2686.0], [94.1, 2688.0], [94.2, 2690.0], [94.3, 2694.0], [94.4, 2710.0], [94.5, 2736.0], [94.6, 2736.0], [94.7, 2737.0], [94.8, 2742.0], [94.9, 2748.0], [95.0, 2751.0], [95.1, 2754.0], [95.2, 2754.0], [95.3, 2755.0], [95.4, 2757.0], [95.5, 2759.0], [95.6, 2764.0], [95.7, 2764.0], [95.8, 2771.0], [95.9, 2777.0], [96.0, 2779.0], [96.1, 2779.0], [96.2, 2779.0], [96.3, 2782.0], [96.4, 2783.0], [96.5, 2785.0], [96.6, 2787.0], [96.7, 2794.0], [96.8, 2795.0], [96.9, 2797.0], [97.0, 2800.0], [97.1, 2801.0], [97.2, 2803.0], [97.3, 2804.0], [97.4, 2806.0], [97.5, 2811.0], [97.6, 2811.0], [97.7, 2812.0], [97.8, 2813.0], [97.9, 2813.0], [98.0, 2815.0], [98.1, 2819.0], [98.2, 2823.0], [98.3, 2827.0], [98.4, 2833.0], [98.5, 2836.0], [98.6, 2845.0], [98.7, 2848.0], [98.8, 2850.0], [98.9, 2898.0], [99.0, 2917.0], [99.1, 2926.0], [99.2, 2927.0], [99.3, 2927.0], [99.4, 2927.0], [99.5, 2939.0], [99.6, 2951.0], [99.7, 2952.0], [99.8, 2955.0], [99.9, 2959.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 115.0, "series": [{"data": [[0.0, 115.0], [600.0, 10.0], [700.0, 12.0], [800.0, 19.0], [900.0, 26.0], [1000.0, 37.0], [1100.0, 31.0], [1200.0, 36.0], [1300.0, 26.0], [1400.0, 20.0], [1500.0, 16.0], [100.0, 30.0], [1600.0, 24.0], [1700.0, 44.0], [1800.0, 43.0], [1900.0, 50.0], [2000.0, 39.0], [2100.0, 33.0], [2200.0, 26.0], [2300.0, 40.0], [2400.0, 57.0], [2500.0, 69.0], [2600.0, 48.0], [2700.0, 26.0], [2800.0, 20.0], [2900.0, 10.0], [200.0, 27.0], [300.0, 25.0], [400.0, 24.0], [500.0, 17.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 221.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 544.0, "series": [{"data": [[0.0, 221.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 235.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 544.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 272.9647495361779, "minX": 1.7563629E12, "maxY": 714.1952277657269, "series": [{"data": [[1.75636296E12, 272.9647495361779], [1.7563629E12, 714.1952277657269]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636296E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 2959.0, "series": [{"data": [[2.0, 2917.0], [7.0, 2243.6], [12.0, 2578.0], [15.0, 2819.0], [16.0, 2552.0], [18.0, 2746.0], [19.0, 2013.0], [21.0, 2631.0], [22.0, 2494.0], [23.0, 2513.0], [30.0, 2629.0], [31.0, 2652.5], [33.0, 2756.0], [32.0, 2513.0], [34.0, 1973.0], [37.0, 2927.0], [36.0, 2926.0], [39.0, 2959.0], [41.0, 2301.2], [43.0, 2488.0], [42.0, 2771.0], [47.0, 2754.0], [46.0, 2686.6666666666665], [49.0, 2506.0], [53.0, 2927.0], [52.0, 2540.6666666666665], [54.0, 2492.0], [59.0, 2776.0], [60.0, 2483.0], [62.0, 2646.5], [67.0, 2563.5], [65.0, 2169.3333333333335], [64.0, 2939.0], [71.0, 823.0], [70.0, 2213.0], [69.0, 2020.0], [68.0, 2661.0], [75.0, 2215.6666666666665], [72.0, 2801.0], [79.0, 2046.0], [76.0, 1347.0], [81.0, 1674.3333333333333], [80.0, 1432.0], [87.0, 1914.3333333333333], [86.0, 1964.0], [85.0, 2570.0], [84.0, 2662.0], [91.0, 1965.5], [90.0, 1963.0], [88.0, 1962.0], [92.0, 1963.0], [98.0, 2371.0], [97.0, 1935.0], [96.0, 2622.0], [103.0, 2836.0], [102.0, 2661.0], [101.0, 2640.0], [107.0, 2718.3333333333335], [105.0, 2673.0], [104.0, 2668.0], [111.0, 2357.5], [110.0, 2694.0], [109.0, 2618.0], [115.0, 2361.5], [113.0, 2671.5], [118.0, 2519.5], [117.0, 2779.0], [116.0, 2822.0], [123.0, 2823.0], [122.0, 2554.0], [120.0, 2631.0], [124.0, 2752.0], [135.0, 2606.0], [134.0, 2506.0], [133.0, 1223.0], [132.0, 750.0], [131.0, 2762.0], [129.0, 2467.6666666666665], [128.0, 2777.0], [143.0, 1290.0], [142.0, 2779.0], [141.0, 2407.0], [140.0, 2503.0], [139.0, 1799.0], [137.0, 2455.0], [151.0, 2084.0], [148.0, 2657.5], [146.0, 2510.0], [145.0, 2358.0], [144.0, 2665.0], [159.0, 2580.0], [157.0, 2527.0], [156.0, 2513.0], [155.0, 2426.25], [152.0, 2353.0], [167.0, 2317.0], [166.0, 2804.0], [165.0, 2593.0], [164.0, 2643.5], [162.0, 2640.0], [160.0, 2827.0], [175.0, 2764.0], [174.0, 2578.0], [172.0, 2577.0], [171.0, 2766.5], [170.0, 2300.0], [168.0, 1876.0], [183.0, 2640.5], [181.0, 1864.0], [180.0, 2572.0], [179.0, 2192.5], [177.0, 2670.5], [191.0, 1800.0], [190.0, 1804.0], [189.0, 1803.0], [188.0, 2474.0], [187.0, 2276.0], [186.0, 2742.0], [184.0, 2497.0], [199.0, 2764.0], [198.0, 1776.0], [197.0, 2759.0], [196.0, 1791.0], [195.0, 1793.0], [194.0, 1797.5], [192.0, 2710.0], [207.0, 1761.0], [206.0, 1761.0], [205.0, 2054.0], [203.0, 2555.0], [202.0, 2451.0], [201.0, 2751.0], [200.0, 1773.0], [215.0, 1719.0], [214.0, 1730.5], [212.0, 1731.0], [211.0, 1734.0], [210.0, 1740.0], [209.0, 2556.0], [208.0, 2439.0], [223.0, 2189.5], [221.0, 2569.0], [220.0, 2530.0], [219.0, 1717.0], [218.0, 1717.5], [217.0, 1718.0], [228.0, 2452.5], [226.0, 2250.0], [225.0, 2199.0], [238.0, 1687.0], [237.0, 1687.0], [235.0, 2410.0], [234.0, 2645.0], [233.0, 2309.75], [232.0, 2654.0], [246.0, 2404.0], [245.0, 2680.0], [244.0, 1693.0], [243.0, 2306.5], [242.0, 2688.0], [241.0, 2409.0], [240.0, 2167.0], [255.0, 2058.5], [253.0, 2483.0], [252.0, 2331.5], [250.0, 2367.0], [249.0, 2489.0], [248.0, 2451.5], [270.0, 2442.0], [271.0, 2621.0], [269.0, 2434.5], [259.0, 2618.0], [258.0, 2611.0], [257.0, 1805.0], [256.0, 2464.0], [267.0, 2497.5], [265.0, 2353.0], [264.0, 2443.0], [263.0, 2538.5], [261.0, 2448.0], [260.0, 1848.0], [286.0, 2298.0], [287.0, 2586.0], [285.0, 2298.0], [284.0, 2503.5], [283.0, 2421.0], [281.0, 1896.0], [280.0, 2394.0], [279.0, 2142.0], [274.0, 2099.5], [272.0, 2316.0], [278.0, 2580.5], [276.0, 2305.0], [291.0, 2559.0], [302.0, 2501.0], [301.0, 1924.0], [290.0, 2039.5], [288.0, 2589.0], [299.0, 2293.0], [297.0, 2147.0], [296.0, 2280.0], [295.0, 2568.0], [294.0, 2575.0], [293.0, 2311.0], [292.0, 2195.0], [318.0, 2294.0], [319.0, 1510.0], [317.0, 2553.0], [316.0, 2107.0], [315.0, 2123.0], [313.0, 2176.0], [312.0, 1435.0], [311.0, 2301.0], [304.0, 2579.5], [306.0, 2426.0], [305.0, 1953.0], [310.0, 2290.0], [309.0, 2403.0], [308.0, 2564.0], [333.0, 1255.0], [334.0, 2153.0], [332.0, 2559.0], [323.0, 2255.0], [322.0, 2567.0], [321.0, 2321.0], [331.0, 1256.0], [330.0, 2241.0], [329.0, 2307.0], [328.0, 2561.0], [327.0, 2382.5], [325.0, 1421.0], [324.0, 2095.0], [350.0, 2132.0], [351.0, 2221.0], [349.0, 1331.0], [348.0, 2517.0], [347.0, 1240.0], [346.0, 1240.0], [345.0, 2261.0], [344.0, 2075.0], [343.0, 1387.0], [336.0, 1248.0], [339.0, 2360.3333333333335], [337.0, 1249.0], [342.0, 2473.0], [341.0, 2501.0], [366.0, 1135.5], [364.0, 2476.0], [355.0, 2482.0], [354.0, 2063.0], [353.0, 2091.0], [352.0, 1230.0], [363.0, 1163.0], [362.0, 2205.0], [361.0, 2206.0], [360.0, 1101.0], [359.0, 2547.0], [358.0, 2530.0], [357.0, 2388.0], [356.0, 2441.0], [381.0, 1026.0], [383.0, 1667.5], [380.0, 2184.0], [371.0, 1983.6666666666667], [369.0, 2482.5], [378.0, 2081.0], [377.0, 1623.0], [375.0, 2040.0], [374.0, 2189.0], [373.0, 1063.0], [372.0, 1065.0], [398.0, 2295.0], [399.0, 1556.5], [396.0, 2164.0], [385.0, 2055.5], [395.0, 2168.0], [394.0, 968.0], [393.0, 2402.0], [392.0, 959.0], [391.0, 1033.6666666666667], [388.0, 1434.0], [414.0, 926.0], [412.0, 955.0], [402.0, 1022.0], [401.0, 2160.0], [400.0, 949.0], [411.0, 2147.0], [410.0, 934.0], [409.0, 2284.0], [408.0, 1543.5], [406.0, 2284.0], [405.0, 940.0], [404.0, 1019.5], [428.0, 846.0], [430.0, 2409.0], [431.0, 1964.0], [429.0, 2141.0], [426.0, 1665.5], [424.0, 2023.0], [423.0, 2021.0], [422.0, 1274.3333333333333], [419.0, 1688.5], [417.0, 2138.0], [416.0, 1600.5], [446.0, 2382.0], [447.0, 1918.0], [445.0, 2020.0], [444.0, 2052.0], [443.0, 2394.0], [442.0, 1430.5], [441.0, 1430.0], [438.0, 809.0], [432.0, 2405.0], [435.0, 2012.0], [434.0, 2413.0], [437.0, 2158.0], [436.0, 878.0], [463.0, 2336.0], [462.0, 2346.0], [459.0, 1540.0], [458.0, 2240.0], [455.0, 2023.0], [454.0, 1358.0], [452.0, 2346.0], [451.0, 1941.0], [450.0, 1574.0], [478.0, 2297.0], [476.0, 1495.5], [473.0, 2326.0], [467.0, 1374.5], [465.0, 2137.0], [464.0, 2013.0], [493.0, 1304.5], [495.0, 1908.5], [492.0, 998.0], [490.0, 2124.0], [489.0, 2102.0], [485.0, 2117.5], [482.0, 1972.0], [481.0, 1887.0], [480.0, 2319.0], [510.0, 2067.0], [508.0, 606.0], [506.0, 1951.0], [505.0, 610.0], [504.0, 610.0], [501.0, 2089.0], [500.0, 633.0], [499.0, 2051.5], [497.0, 2265.0], [532.0, 564.0], [541.0, 556.0], [542.0, 26.0], [528.0, 487.0], [531.0, 30.0], [529.0, 570.0], [539.0, 1926.0], [537.0, 1190.5], [536.0, 563.0], [519.0, 1460.3333333333333], [516.0, 1836.0], [514.0, 1588.3333333333333], [512.0, 1937.0], [526.0, 596.0], [524.0, 1833.0], [521.0, 2068.0], [520.0, 1831.0], [535.0, 1817.0], [534.0, 2055.0], [533.0, 25.0], [574.0, 1828.5], [575.0, 366.6666666666667], [573.0, 1982.0], [570.0, 108.0], [569.0, 1885.0], [568.0, 1948.5], [559.0, 506.0], [549.0, 23.0], [548.0, 1918.0], [551.0, 549.0], [550.0, 551.0], [558.0, 280.5], [557.0, 1289.5], [556.0, 1221.0], [554.0, 59.0], [566.0, 271.0], [564.0, 43.0], [563.0, 274.5], [562.0, 704.4], [602.0, 381.5], [606.0, 367.0], [607.0, 1418.3333333333335], [592.0, 478.0], [593.0, 1145.0], [594.0, 465.0], [596.0, 1022.6666666666667], [595.0, 1869.0], [605.0, 378.0], [604.0, 382.0], [603.0, 380.0], [600.0, 245.5], [583.0, 484.0], [582.0, 457.0], [580.0, 48.0], [579.0, 897.0], [577.0, 992.5], [591.0, 463.0], [590.0, 480.0], [588.0, 481.0], [587.0, 481.5], [586.0, 487.0], [585.0, 293.5], [599.0, 615.2], [598.0, 343.3333333333333], [597.0, 1806.0], [633.0, 2063.0], [637.0, 140.33333333333334], [639.0, 1170.0], [625.0, 26.0], [624.0, 2075.0], [627.0, 382.0], [626.0, 1716.0], [629.0, 379.0], [628.0, 351.0], [636.0, 150.0], [635.0, 1910.0], [634.0, 376.0], [632.0, 1902.0], [615.0, 1244.0], [614.0, 1955.0], [613.0, 2076.0], [612.0, 38.0], [611.0, 1376.6666666666665], [610.0, 861.8], [609.0, 297.0], [608.0, 364.0], [623.0, 1820.0], [621.0, 703.3333333333333], [620.0, 2083.0], [619.0, 1934.2], [618.0, 27.0], [617.0, 1746.0], [616.0, 27.0], [631.0, 2039.0], [630.0, 296.0], [664.0, 223.8], [670.0, 213.0], [666.0, 294.3636363636364], [651.0, 338.0], [650.0, 302.0], [649.0, 55.0], [648.0, 2034.0], [652.0, 984.5], [655.0, 300.0], [640.0, 353.0], [643.0, 1337.6666666666667], [641.0, 2014.0], [645.0, 26.0], [644.0, 237.0], [647.0, 1725.0], [646.0, 1683.0], [653.0, 1662.0], [671.0, 37.0], [657.0, 208.0], [656.0, 291.0], [659.0, 200.0], [658.0, 44.0], [669.0, 234.5], [668.0, 162.5], [665.0, 183.0], [661.0, 188.5], [660.0, 190.0], [702.0, 1803.0], [703.0, 33.0], [690.0, 1820.0], [689.0, 29.0], [701.0, 1567.0], [699.0, 913.7499999999999], [697.0, 32.0], [696.0, 1300.0], [687.0, 1607.0], [674.0, 202.0], [678.0, 208.33333333333334], [675.0, 200.33333333333334], [686.0, 280.0], [685.0, 284.0], [684.0, 244.0], [683.0, 997.0], [682.0, 245.5], [680.0, 197.5], [695.0, 146.0], [693.0, 33.0], [692.0, 1737.5], [691.0, 28.0], [732.0, 810.5], [735.0, 825.8571428571428], [720.0, 1116.3333333333333], [722.0, 1590.5], [721.0, 1812.0], [725.0, 1660.5], [723.0, 1471.0], [734.0, 903.0], [733.0, 547.0], [731.0, 1361.5], [730.0, 1188.3333333333335], [729.0, 1532.5], [728.0, 1336.0], [719.0, 1524.0], [704.0, 898.75], [706.0, 1866.0], [705.0, 957.0], [708.0, 1139.0], [707.0, 1860.5], [710.0, 1751.5], [709.0, 907.0], [718.0, 1665.0], [717.0, 1832.0], [716.0, 1603.0], [714.0, 1424.0], [713.0, 1629.5], [712.0, 1790.3333333333333], [727.0, 1425.0], [726.0, 112.0], [743.0, 932.3333333333334], [754.0, 1072.0], [765.0, 1417.0], [764.0, 1464.0], [763.0, 1394.0], [742.0, 595.3333333333334], [741.0, 866.0], [740.0, 1193.6], [739.0, 1083.0], [738.0, 694.5], [737.0, 1063.875], [736.0, 621.5], [750.0, 1520.0], [749.0, 1492.0], [748.0, 1492.0], [746.0, 1049.25], [745.0, 370.75], [758.0, 34.333333333333336], [757.0, 1454.0], [755.0, 1068.0], [753.0, 1480.0], [752.0, 31.0], [793.0, 672.5], [797.0, 46.0], [799.0, 1281.5], [785.0, 27.0], [784.0, 32.0], [787.0, 26.0], [786.0, 1002.0], [796.0, 37.0], [795.0, 1200.0], [794.0, 1313.0], [783.0, 363.0], [771.0, 818.3333333333333], [768.0, 33.0], [773.0, 35.0], [772.0, 620.5], [775.0, 1263.0], [774.0, 993.0], [781.0, 1157.0], [780.0, 514.0], [778.0, 32.0], [777.0, 716.0], [776.0, 27.0], [791.0, 775.6666666666666], [790.0, 27.0], [789.0, 914.0], [788.0, 1305.0], [824.0, 1031.5], [830.0, 1127.5], [831.0, 901.5], [817.0, 897.0], [816.0, 859.5], [819.0, 862.0], [818.0, 959.0], [829.0, 680.5], [826.0, 1065.5], [825.0, 1056.75], [815.0, 1252.0], [801.0, 1108.0], [800.0, 42.0], [803.0, 1169.0], [802.0, 1275.0], [805.0, 41.0], [804.0, 1276.0], [807.0, 1245.0], [806.0, 443.0], [814.0, 1256.0], [813.0, 1233.0], [812.0, 36.0], [811.0, 1130.0], [810.0, 600.0], [809.0, 1268.0], [823.0, 519.5], [822.0, 591.75], [821.0, 1097.5], [820.0, 470.0], [828.0, 1237.0], [827.0, 790.0], [832.0, 801.3333333333334], [846.0, 625.0], [845.0, 745.0], [844.0, 689.0], [843.0, 1141.3333333333333], [841.0, 1116.0], [840.0, 1040.0], [847.0, 1047.3333333333333], [853.0, 971.0], [852.0, 936.5], [851.0, 52.0], [850.0, 832.0], [839.0, 1180.0], [838.0, 1056.3333333333333], [835.0, 621.5], [834.0, 1150.0], [833.0, 1079.0], [1.0, 2952.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}, {"data": [[476.37099999999964, 1505.1709999999996]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 853.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4848.183333333333, "minX": 1.7563629E12, "maxY": 7743.633333333333, "series": [{"data": [[1.75636296E12, 7743.633333333333], [1.7563629E12, 6623.033333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75636296E12, 5668.483333333334], [1.7563629E12, 4848.183333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636296E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 846.0585683297182, "minX": 1.7563629E12, "maxY": 2068.901669758813, "series": [{"data": [[1.75636296E12, 2068.901669758813], [1.7563629E12, 846.0585683297182]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636296E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 845.9718004338397, "minX": 1.7563629E12, "maxY": 2068.884972170686, "series": [{"data": [[1.75636296E12, 2068.884972170686], [1.7563629E12, 845.9718004338397]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636296E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 830.5162689804769, "minX": 1.7563629E12, "maxY": 1905.8942486085355, "series": [{"data": [[1.75636296E12, 1905.8942486085355], [1.7563629E12, 830.5162689804769]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636296E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.7563629E12, "maxY": 2959.0, "series": [{"data": [[1.75636296E12, 2959.0], [1.7563629E12, 2137.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75636296E12, 2736.0], [1.7563629E12, 1817.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75636296E12, 2934.2000000000003], [1.7563629E12, 2117.9]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75636296E12, 2804.0], [1.7563629E12, 1948.3999999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75636296E12, 23.0], [1.7563629E12, 23.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75636296E12, 2300.0], [1.7563629E12, 876.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636296E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 498.0, "minX": 76.0, "maxY": 2300.0, "series": [{"data": [[539.0, 2300.0], [76.0, 987.5], [385.0, 498.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 539.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 498.0, "minX": 76.0, "maxY": 2300.0, "series": [{"data": [[539.0, 2300.0], [76.0, 987.5], [385.0, 498.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 539.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.7563629E12, "maxY": 16.583333333333332, "series": [{"data": [[1.75636296E12, 0.08333333333333333], [1.7563629E12, 16.583333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636296E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 7.683333333333334, "minX": 1.7563629E12, "maxY": 8.983333333333333, "series": [{"data": [[1.75636296E12, 8.983333333333333], [1.7563629E12, 7.683333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636296E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 7.683333333333334, "minX": 1.7563629E12, "maxY": 8.983333333333333, "series": [{"data": [[1.75636296E12, 8.983333333333333], [1.7563629E12, 7.683333333333334]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636296E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.683333333333334, "minX": 1.7563629E12, "maxY": 8.983333333333333, "series": [{"data": [[1.75636296E12, 8.983333333333333], [1.7563629E12, 7.683333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636296E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

