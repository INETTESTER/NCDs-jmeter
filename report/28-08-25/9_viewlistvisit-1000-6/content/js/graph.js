/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 3703.0, "series": [{"data": [[0.0, 25.0], [0.1, 26.0], [0.2, 26.0], [0.3, 26.0], [0.4, 26.0], [0.5, 27.0], [0.6, 28.0], [0.7, 28.0], [0.8, 28.0], [0.9, 28.0], [1.0, 28.0], [1.1, 28.0], [1.2, 29.0], [1.3, 29.0], [1.4, 29.0], [1.5, 30.0], [1.6, 30.0], [1.7, 30.0], [1.8, 30.0], [1.9, 30.0], [2.0, 30.0], [2.1, 30.0], [2.2, 30.0], [2.3, 31.0], [2.4, 31.0], [2.5, 32.0], [2.6, 32.0], [2.7, 32.0], [2.8, 33.0], [2.9, 33.0], [3.0, 33.0], [3.1, 34.0], [3.2, 34.0], [3.3, 34.0], [3.4, 35.0], [3.5, 35.0], [3.6, 35.0], [3.7, 36.0], [3.8, 36.0], [3.9, 36.0], [4.0, 37.0], [4.1, 37.0], [4.2, 37.0], [4.3, 37.0], [4.4, 38.0], [4.5, 38.0], [4.6, 39.0], [4.7, 39.0], [4.8, 40.0], [4.9, 41.0], [5.0, 42.0], [5.1, 42.0], [5.2, 44.0], [5.3, 44.0], [5.4, 45.0], [5.5, 45.0], [5.6, 46.0], [5.7, 46.0], [5.8, 47.0], [5.9, 59.0], [6.0, 63.0], [6.1, 63.0], [6.2, 64.0], [6.3, 65.0], [6.4, 76.0], [6.5, 81.0], [6.6, 85.0], [6.7, 102.0], [6.8, 120.0], [6.9, 121.0], [7.0, 138.0], [7.1, 142.0], [7.2, 168.0], [7.3, 178.0], [7.4, 182.0], [7.5, 186.0], [7.6, 195.0], [7.7, 201.0], [7.8, 203.0], [7.9, 206.0], [8.0, 206.0], [8.1, 207.0], [8.2, 208.0], [8.3, 209.0], [8.4, 221.0], [8.5, 258.0], [8.6, 293.0], [8.7, 301.0], [8.8, 308.0], [8.9, 317.0], [9.0, 319.0], [9.1, 323.0], [9.2, 327.0], [9.3, 330.0], [9.4, 336.0], [9.5, 344.0], [9.6, 355.0], [9.7, 376.0], [9.8, 385.0], [9.9, 402.0], [10.0, 405.0], [10.1, 423.0], [10.2, 433.0], [10.3, 438.0], [10.4, 442.0], [10.5, 452.0], [10.6, 481.0], [10.7, 483.0], [10.8, 489.0], [10.9, 491.0], [11.0, 499.0], [11.1, 500.0], [11.2, 506.0], [11.3, 661.0], [11.4, 701.0], [11.5, 722.0], [11.6, 740.0], [11.7, 744.0], [11.8, 755.0], [11.9, 757.0], [12.0, 758.0], [12.1, 764.0], [12.2, 776.0], [12.3, 785.0], [12.4, 786.0], [12.5, 796.0], [12.6, 797.0], [12.7, 801.0], [12.8, 818.0], [12.9, 821.0], [13.0, 823.0], [13.1, 830.0], [13.2, 850.0], [13.3, 856.0], [13.4, 882.0], [13.5, 971.0], [13.6, 1020.0], [13.7, 1035.0], [13.8, 1105.0], [13.9, 1116.0], [14.0, 1119.0], [14.1, 1125.0], [14.2, 1126.0], [14.3, 1130.0], [14.4, 1132.0], [14.5, 1138.0], [14.6, 1143.0], [14.7, 1151.0], [14.8, 1157.0], [14.9, 1162.0], [15.0, 1164.0], [15.1, 1165.0], [15.2, 1166.0], [15.3, 1168.0], [15.4, 1171.0], [15.5, 1172.0], [15.6, 1172.0], [15.7, 1174.0], [15.8, 1175.0], [15.9, 1176.0], [16.0, 1176.0], [16.1, 1178.0], [16.2, 1178.0], [16.3, 1191.0], [16.4, 1191.0], [16.5, 1193.0], [16.6, 1195.0], [16.7, 1198.0], [16.8, 1199.0], [16.9, 1201.0], [17.0, 1212.0], [17.1, 1215.0], [17.2, 1216.0], [17.3, 1218.0], [17.4, 1218.0], [17.5, 1222.0], [17.6, 1223.0], [17.7, 1224.0], [17.8, 1226.0], [17.9, 1229.0], [18.0, 1231.0], [18.1, 1233.0], [18.2, 1233.0], [18.3, 1237.0], [18.4, 1237.0], [18.5, 1237.0], [18.6, 1245.0], [18.7, 1247.0], [18.8, 1248.0], [18.9, 1249.0], [19.0, 1253.0], [19.1, 1257.0], [19.2, 1260.0], [19.3, 1261.0], [19.4, 1261.0], [19.5, 1263.0], [19.6, 1269.0], [19.7, 1270.0], [19.8, 1271.0], [19.9, 1273.0], [20.0, 1273.0], [20.1, 1274.0], [20.2, 1274.0], [20.3, 1277.0], [20.4, 1280.0], [20.5, 1282.0], [20.6, 1282.0], [20.7, 1284.0], [20.8, 1289.0], [20.9, 1289.0], [21.0, 1292.0], [21.1, 1294.0], [21.2, 1296.0], [21.3, 1300.0], [21.4, 1301.0], [21.5, 1302.0], [21.6, 1307.0], [21.7, 1308.0], [21.8, 1308.0], [21.9, 1311.0], [22.0, 1311.0], [22.1, 1312.0], [22.2, 1317.0], [22.3, 1317.0], [22.4, 1319.0], [22.5, 1333.0], [22.6, 1336.0], [22.7, 1336.0], [22.8, 1337.0], [22.9, 1341.0], [23.0, 1347.0], [23.1, 1348.0], [23.2, 1349.0], [23.3, 1350.0], [23.4, 1357.0], [23.5, 1362.0], [23.6, 1365.0], [23.7, 1367.0], [23.8, 1368.0], [23.9, 1368.0], [24.0, 1369.0], [24.1, 1374.0], [24.2, 1375.0], [24.3, 1378.0], [24.4, 1382.0], [24.5, 1383.0], [24.6, 1395.0], [24.7, 1398.0], [24.8, 1398.0], [24.9, 1398.0], [25.0, 1399.0], [25.1, 1414.0], [25.2, 1417.0], [25.3, 1419.0], [25.4, 1432.0], [25.5, 1434.0], [25.6, 1442.0], [25.7, 1454.0], [25.8, 1465.0], [25.9, 1480.0], [26.0, 1490.0], [26.1, 1496.0], [26.2, 1526.0], [26.3, 1539.0], [26.4, 1543.0], [26.5, 1551.0], [26.6, 1556.0], [26.7, 1556.0], [26.8, 1561.0], [26.9, 1569.0], [27.0, 1572.0], [27.1, 1584.0], [27.2, 1589.0], [27.3, 1598.0], [27.4, 1598.0], [27.5, 1603.0], [27.6, 1604.0], [27.7, 1604.0], [27.8, 1605.0], [27.9, 1617.0], [28.0, 1618.0], [28.1, 1621.0], [28.2, 1622.0], [28.3, 1622.0], [28.4, 1623.0], [28.5, 1624.0], [28.6, 1627.0], [28.7, 1628.0], [28.8, 1632.0], [28.9, 1632.0], [29.0, 1637.0], [29.1, 1637.0], [29.2, 1645.0], [29.3, 1646.0], [29.4, 1647.0], [29.5, 1662.0], [29.6, 1666.0], [29.7, 1670.0], [29.8, 1673.0], [29.9, 1678.0], [30.0, 1684.0], [30.1, 1685.0], [30.2, 1685.0], [30.3, 1692.0], [30.4, 1695.0], [30.5, 1697.0], [30.6, 1700.0], [30.7, 1703.0], [30.8, 1704.0], [30.9, 1705.0], [31.0, 1709.0], [31.1, 1717.0], [31.2, 1726.0], [31.3, 1727.0], [31.4, 1729.0], [31.5, 1730.0], [31.6, 1730.0], [31.7, 1734.0], [31.8, 1742.0], [31.9, 1743.0], [32.0, 1745.0], [32.1, 1750.0], [32.2, 1752.0], [32.3, 1754.0], [32.4, 1756.0], [32.5, 1759.0], [32.6, 1763.0], [32.7, 1767.0], [32.8, 1769.0], [32.9, 1771.0], [33.0, 1772.0], [33.1, 1774.0], [33.2, 1774.0], [33.3, 1777.0], [33.4, 1778.0], [33.5, 1780.0], [33.6, 1787.0], [33.7, 1789.0], [33.8, 1791.0], [33.9, 1792.0], [34.0, 1793.0], [34.1, 1797.0], [34.2, 1801.0], [34.3, 1801.0], [34.4, 1801.0], [34.5, 1811.0], [34.6, 1815.0], [34.7, 1823.0], [34.8, 1833.0], [34.9, 1837.0], [35.0, 1855.0], [35.1, 1862.0], [35.2, 1870.0], [35.3, 1873.0], [35.4, 1875.0], [35.5, 1876.0], [35.6, 1877.0], [35.7, 1880.0], [35.8, 1883.0], [35.9, 1885.0], [36.0, 1885.0], [36.1, 1886.0], [36.2, 1894.0], [36.3, 1900.0], [36.4, 1903.0], [36.5, 1903.0], [36.6, 1910.0], [36.7, 1919.0], [36.8, 1926.0], [36.9, 1927.0], [37.0, 1927.0], [37.1, 1938.0], [37.2, 1949.0], [37.3, 1951.0], [37.4, 1951.0], [37.5, 1953.0], [37.6, 1959.0], [37.7, 1965.0], [37.8, 1983.0], [37.9, 1988.0], [38.0, 2015.0], [38.1, 2037.0], [38.2, 2038.0], [38.3, 2045.0], [38.4, 2056.0], [38.5, 2065.0], [38.6, 2065.0], [38.7, 2066.0], [38.8, 2087.0], [38.9, 2091.0], [39.0, 2091.0], [39.1, 2095.0], [39.2, 2095.0], [39.3, 2096.0], [39.4, 2096.0], [39.5, 2098.0], [39.6, 2103.0], [39.7, 2103.0], [39.8, 2108.0], [39.9, 2116.0], [40.0, 2127.0], [40.1, 2127.0], [40.2, 2131.0], [40.3, 2135.0], [40.4, 2139.0], [40.5, 2145.0], [40.6, 2148.0], [40.7, 2163.0], [40.8, 2163.0], [40.9, 2163.0], [41.0, 2163.0], [41.1, 2166.0], [41.2, 2170.0], [41.3, 2175.0], [41.4, 2175.0], [41.5, 2175.0], [41.6, 2177.0], [41.7, 2177.0], [41.8, 2184.0], [41.9, 2191.0], [42.0, 2191.0], [42.1, 2192.0], [42.2, 2194.0], [42.3, 2198.0], [42.4, 2203.0], [42.5, 2206.0], [42.6, 2206.0], [42.7, 2207.0], [42.8, 2207.0], [42.9, 2211.0], [43.0, 2227.0], [43.1, 2229.0], [43.2, 2232.0], [43.3, 2241.0], [43.4, 2243.0], [43.5, 2244.0], [43.6, 2245.0], [43.7, 2245.0], [43.8, 2246.0], [43.9, 2250.0], [44.0, 2251.0], [44.1, 2256.0], [44.2, 2257.0], [44.3, 2263.0], [44.4, 2265.0], [44.5, 2268.0], [44.6, 2268.0], [44.7, 2269.0], [44.8, 2270.0], [44.9, 2271.0], [45.0, 2277.0], [45.1, 2286.0], [45.2, 2286.0], [45.3, 2286.0], [45.4, 2286.0], [45.5, 2289.0], [45.6, 2291.0], [45.7, 2292.0], [45.8, 2293.0], [45.9, 2293.0], [46.0, 2294.0], [46.1, 2294.0], [46.2, 2298.0], [46.3, 2299.0], [46.4, 2299.0], [46.5, 2303.0], [46.6, 2304.0], [46.7, 2304.0], [46.8, 2304.0], [46.9, 2311.0], [47.0, 2313.0], [47.1, 2314.0], [47.2, 2321.0], [47.3, 2322.0], [47.4, 2326.0], [47.5, 2329.0], [47.6, 2332.0], [47.7, 2334.0], [47.8, 2336.0], [47.9, 2338.0], [48.0, 2340.0], [48.1, 2342.0], [48.2, 2342.0], [48.3, 2342.0], [48.4, 2343.0], [48.5, 2344.0], [48.6, 2344.0], [48.7, 2347.0], [48.8, 2347.0], [48.9, 2348.0], [49.0, 2351.0], [49.1, 2354.0], [49.2, 2356.0], [49.3, 2357.0], [49.4, 2357.0], [49.5, 2359.0], [49.6, 2359.0], [49.7, 2362.0], [49.8, 2364.0], [49.9, 2364.0], [50.0, 2365.0], [50.1, 2366.0], [50.2, 2366.0], [50.3, 2367.0], [50.4, 2369.0], [50.5, 2369.0], [50.6, 2371.0], [50.7, 2371.0], [50.8, 2371.0], [50.9, 2373.0], [51.0, 2375.0], [51.1, 2378.0], [51.2, 2380.0], [51.3, 2381.0], [51.4, 2382.0], [51.5, 2385.0], [51.6, 2390.0], [51.7, 2392.0], [51.8, 2394.0], [51.9, 2397.0], [52.0, 2401.0], [52.1, 2404.0], [52.2, 2405.0], [52.3, 2406.0], [52.4, 2406.0], [52.5, 2410.0], [52.6, 2411.0], [52.7, 2414.0], [52.8, 2415.0], [52.9, 2419.0], [53.0, 2423.0], [53.1, 2427.0], [53.2, 2427.0], [53.3, 2429.0], [53.4, 2430.0], [53.5, 2431.0], [53.6, 2434.0], [53.7, 2435.0], [53.8, 2440.0], [53.9, 2460.0], [54.0, 2469.0], [54.1, 2474.0], [54.2, 2477.0], [54.3, 2477.0], [54.4, 2479.0], [54.5, 2496.0], [54.6, 2500.0], [54.7, 2500.0], [54.8, 2509.0], [54.9, 2512.0], [55.0, 2515.0], [55.1, 2517.0], [55.2, 2520.0], [55.3, 2521.0], [55.4, 2530.0], [55.5, 2530.0], [55.6, 2553.0], [55.7, 2556.0], [55.8, 2564.0], [55.9, 2567.0], [56.0, 2576.0], [56.1, 2577.0], [56.2, 2577.0], [56.3, 2583.0], [56.4, 2583.0], [56.5, 2584.0], [56.6, 2592.0], [56.7, 2594.0], [56.8, 2597.0], [56.9, 2598.0], [57.0, 2607.0], [57.1, 2608.0], [57.2, 2612.0], [57.3, 2614.0], [57.4, 2616.0], [57.5, 2619.0], [57.6, 2620.0], [57.7, 2621.0], [57.8, 2624.0], [57.9, 2625.0], [58.0, 2639.0], [58.1, 2641.0], [58.2, 2647.0], [58.3, 2648.0], [58.4, 2648.0], [58.5, 2652.0], [58.6, 2653.0], [58.7, 2654.0], [58.8, 2654.0], [58.9, 2656.0], [59.0, 2664.0], [59.1, 2673.0], [59.2, 2673.0], [59.3, 2681.0], [59.4, 2688.0], [59.5, 2696.0], [59.6, 2697.0], [59.7, 2699.0], [59.8, 2700.0], [59.9, 2700.0], [60.0, 2706.0], [60.1, 2706.0], [60.2, 2710.0], [60.3, 2712.0], [60.4, 2713.0], [60.5, 2716.0], [60.6, 2716.0], [60.7, 2719.0], [60.8, 2723.0], [60.9, 2725.0], [61.0, 2725.0], [61.1, 2733.0], [61.2, 2735.0], [61.3, 2744.0], [61.4, 2753.0], [61.5, 2755.0], [61.6, 2755.0], [61.7, 2759.0], [61.8, 2763.0], [61.9, 2765.0], [62.0, 2767.0], [62.1, 2769.0], [62.2, 2778.0], [62.3, 2778.0], [62.4, 2779.0], [62.5, 2784.0], [62.6, 2786.0], [62.7, 2796.0], [62.8, 2797.0], [62.9, 2805.0], [63.0, 2807.0], [63.1, 2811.0], [63.2, 2811.0], [63.3, 2814.0], [63.4, 2815.0], [63.5, 2824.0], [63.6, 2829.0], [63.7, 2836.0], [63.8, 2838.0], [63.9, 2841.0], [64.0, 2843.0], [64.1, 2866.0], [64.2, 2880.0], [64.3, 2886.0], [64.4, 2888.0], [64.5, 2895.0], [64.6, 2895.0], [64.7, 2899.0], [64.8, 2902.0], [64.9, 2906.0], [65.0, 2907.0], [65.1, 2908.0], [65.2, 2908.0], [65.3, 2926.0], [65.4, 2926.0], [65.5, 2930.0], [65.6, 2930.0], [65.7, 2931.0], [65.8, 2932.0], [65.9, 2945.0], [66.0, 2948.0], [66.1, 2950.0], [66.2, 2970.0], [66.3, 2971.0], [66.4, 2979.0], [66.5, 2987.0], [66.6, 2989.0], [66.7, 3003.0], [66.8, 3006.0], [66.9, 3013.0], [67.0, 3015.0], [67.1, 3019.0], [67.2, 3019.0], [67.3, 3026.0], [67.4, 3036.0], [67.5, 3047.0], [67.6, 3047.0], [67.7, 3052.0], [67.8, 3059.0], [67.9, 3059.0], [68.0, 3061.0], [68.1, 3064.0], [68.2, 3067.0], [68.3, 3069.0], [68.4, 3076.0], [68.5, 3078.0], [68.6, 3081.0], [68.7, 3082.0], [68.8, 3087.0], [68.9, 3093.0], [69.0, 3093.0], [69.1, 3094.0], [69.2, 3096.0], [69.3, 3099.0], [69.4, 3100.0], [69.5, 3104.0], [69.6, 3105.0], [69.7, 3105.0], [69.8, 3107.0], [69.9, 3107.0], [70.0, 3109.0], [70.1, 3114.0], [70.2, 3117.0], [70.3, 3118.0], [70.4, 3121.0], [70.5, 3126.0], [70.6, 3127.0], [70.7, 3130.0], [70.8, 3131.0], [70.9, 3135.0], [71.0, 3136.0], [71.1, 3137.0], [71.2, 3140.0], [71.3, 3141.0], [71.4, 3148.0], [71.5, 3148.0], [71.6, 3152.0], [71.7, 3155.0], [71.8, 3162.0], [71.9, 3165.0], [72.0, 3165.0], [72.1, 3168.0], [72.2, 3170.0], [72.3, 3171.0], [72.4, 3177.0], [72.5, 3179.0], [72.6, 3193.0], [72.7, 3193.0], [72.8, 3198.0], [72.9, 3200.0], [73.0, 3201.0], [73.1, 3201.0], [73.2, 3201.0], [73.3, 3203.0], [73.4, 3206.0], [73.5, 3206.0], [73.6, 3206.0], [73.7, 3207.0], [73.8, 3208.0], [73.9, 3210.0], [74.0, 3211.0], [74.1, 3215.0], [74.2, 3216.0], [74.3, 3220.0], [74.4, 3221.0], [74.5, 3221.0], [74.6, 3221.0], [74.7, 3226.0], [74.8, 3227.0], [74.9, 3229.0], [75.0, 3229.0], [75.1, 3229.0], [75.2, 3231.0], [75.3, 3231.0], [75.4, 3232.0], [75.5, 3235.0], [75.6, 3237.0], [75.7, 3242.0], [75.8, 3246.0], [75.9, 3246.0], [76.0, 3246.0], [76.1, 3249.0], [76.2, 3249.0], [76.3, 3250.0], [76.4, 3250.0], [76.5, 3252.0], [76.6, 3252.0], [76.7, 3252.0], [76.8, 3255.0], [76.9, 3255.0], [77.0, 3258.0], [77.1, 3260.0], [77.2, 3263.0], [77.3, 3263.0], [77.4, 3264.0], [77.5, 3277.0], [77.6, 3279.0], [77.7, 3292.0], [77.8, 3292.0], [77.9, 3295.0], [78.0, 3303.0], [78.1, 3304.0], [78.2, 3304.0], [78.3, 3304.0], [78.4, 3306.0], [78.5, 3306.0], [78.6, 3309.0], [78.7, 3312.0], [78.8, 3313.0], [78.9, 3314.0], [79.0, 3314.0], [79.1, 3314.0], [79.2, 3314.0], [79.3, 3315.0], [79.4, 3315.0], [79.5, 3317.0], [79.6, 3320.0], [79.7, 3321.0], [79.8, 3322.0], [79.9, 3324.0], [80.0, 3325.0], [80.1, 3328.0], [80.2, 3332.0], [80.3, 3337.0], [80.4, 3344.0], [80.5, 3355.0], [80.6, 3357.0], [80.7, 3358.0], [80.8, 3362.0], [80.9, 3364.0], [81.0, 3370.0], [81.1, 3374.0], [81.2, 3378.0], [81.3, 3383.0], [81.4, 3398.0], [81.5, 3400.0], [81.6, 3404.0], [81.7, 3404.0], [81.8, 3409.0], [81.9, 3410.0], [82.0, 3410.0], [82.1, 3411.0], [82.2, 3414.0], [82.3, 3416.0], [82.4, 3416.0], [82.5, 3417.0], [82.6, 3418.0], [82.7, 3422.0], [82.8, 3426.0], [82.9, 3427.0], [83.0, 3435.0], [83.1, 3439.0], [83.2, 3439.0], [83.3, 3442.0], [83.4, 3445.0], [83.5, 3445.0], [83.6, 3447.0], [83.7, 3448.0], [83.8, 3453.0], [83.9, 3454.0], [84.0, 3455.0], [84.1, 3456.0], [84.2, 3456.0], [84.3, 3459.0], [84.4, 3461.0], [84.5, 3462.0], [84.6, 3463.0], [84.7, 3465.0], [84.8, 3466.0], [84.9, 3466.0], [85.0, 3467.0], [85.1, 3468.0], [85.2, 3468.0], [85.3, 3471.0], [85.4, 3474.0], [85.5, 3480.0], [85.6, 3483.0], [85.7, 3484.0], [85.8, 3486.0], [85.9, 3496.0], [86.0, 3502.0], [86.1, 3506.0], [86.2, 3506.0], [86.3, 3507.0], [86.4, 3508.0], [86.5, 3511.0], [86.6, 3511.0], [86.7, 3513.0], [86.8, 3513.0], [86.9, 3516.0], [87.0, 3518.0], [87.1, 3520.0], [87.2, 3521.0], [87.3, 3521.0], [87.4, 3521.0], [87.5, 3521.0], [87.6, 3521.0], [87.7, 3522.0], [87.8, 3523.0], [87.9, 3524.0], [88.0, 3525.0], [88.1, 3526.0], [88.2, 3526.0], [88.3, 3527.0], [88.4, 3527.0], [88.5, 3527.0], [88.6, 3528.0], [88.7, 3529.0], [88.8, 3529.0], [88.9, 3532.0], [89.0, 3532.0], [89.1, 3535.0], [89.2, 3536.0], [89.3, 3537.0], [89.4, 3540.0], [89.5, 3541.0], [89.6, 3543.0], [89.7, 3543.0], [89.8, 3545.0], [89.9, 3545.0], [90.0, 3549.0], [90.1, 3549.0], [90.2, 3552.0], [90.3, 3552.0], [90.4, 3553.0], [90.5, 3553.0], [90.6, 3553.0], [90.7, 3553.0], [90.8, 3554.0], [90.9, 3555.0], [91.0, 3556.0], [91.1, 3564.0], [91.2, 3564.0], [91.3, 3564.0], [91.4, 3567.0], [91.5, 3568.0], [91.6, 3569.0], [91.7, 3571.0], [91.8, 3573.0], [91.9, 3574.0], [92.0, 3581.0], [92.1, 3588.0], [92.2, 3593.0], [92.3, 3593.0], [92.4, 3595.0], [92.5, 3596.0], [92.6, 3599.0], [92.7, 3601.0], [92.8, 3602.0], [92.9, 3604.0], [93.0, 3604.0], [93.1, 3606.0], [93.2, 3607.0], [93.3, 3610.0], [93.4, 3614.0], [93.5, 3615.0], [93.6, 3616.0], [93.7, 3617.0], [93.8, 3619.0], [93.9, 3621.0], [94.0, 3621.0], [94.1, 3624.0], [94.2, 3628.0], [94.3, 3629.0], [94.4, 3632.0], [94.5, 3632.0], [94.6, 3633.0], [94.7, 3634.0], [94.8, 3636.0], [94.9, 3636.0], [95.0, 3639.0], [95.1, 3639.0], [95.2, 3642.0], [95.3, 3646.0], [95.4, 3649.0], [95.5, 3650.0], [95.6, 3652.0], [95.7, 3654.0], [95.8, 3654.0], [95.9, 3656.0], [96.0, 3656.0], [96.1, 3656.0], [96.2, 3656.0], [96.3, 3657.0], [96.4, 3658.0], [96.5, 3659.0], [96.6, 3659.0], [96.7, 3660.0], [96.8, 3661.0], [96.9, 3664.0], [97.0, 3665.0], [97.1, 3665.0], [97.2, 3665.0], [97.3, 3666.0], [97.4, 3668.0], [97.5, 3668.0], [97.6, 3668.0], [97.7, 3668.0], [97.8, 3670.0], [97.9, 3671.0], [98.0, 3672.0], [98.1, 3673.0], [98.2, 3674.0], [98.3, 3674.0], [98.4, 3676.0], [98.5, 3676.0], [98.6, 3678.0], [98.7, 3678.0], [98.8, 3680.0], [98.9, 3680.0], [99.0, 3681.0], [99.1, 3685.0], [99.2, 3686.0], [99.3, 3690.0], [99.4, 3694.0], [99.5, 3698.0], [99.6, 3698.0], [99.7, 3699.0], [99.8, 3701.0], [99.9, 3703.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 71.0, "series": [{"data": [[0.0, 67.0], [600.0, 1.0], [700.0, 13.0], [800.0, 8.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 31.0], [1200.0, 43.0], [1300.0, 38.0], [1400.0, 11.0], [1500.0, 13.0], [100.0, 10.0], [1600.0, 31.0], [1700.0, 36.0], [1800.0, 21.0], [1900.0, 17.0], [2000.0, 16.0], [2100.0, 28.0], [2200.0, 41.0], [2300.0, 55.0], [2400.0, 26.0], [2500.0, 24.0], [2600.0, 28.0], [2700.0, 31.0], [2800.0, 19.0], [2900.0, 19.0], [3000.0, 27.0], [3100.0, 35.0], [200.0, 10.0], [3200.0, 51.0], [3300.0, 36.0], [3400.0, 45.0], [3500.0, 67.0], [3600.0, 71.0], [3700.0, 2.0], [300.0, 12.0], [400.0, 12.0], [500.0, 2.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 112.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 739.0, "series": [{"data": [[0.0, 112.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 149.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 739.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 496.1279999999999, "minX": 1.75636902E12, "maxY": 496.1279999999999, "series": [{"data": [[1.75636902E12, 496.1279999999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636902E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.0, "maxY": 3684.0, "series": [{"data": [[5.0, 3557.0], [6.0, 3662.0], [10.0, 3284.8], [16.0, 3368.0], [17.0, 3545.2], [18.0, 3617.0], [20.0, 3555.0], [21.0, 3673.5], [23.0, 3552.0], [24.0, 3269.0], [26.0, 3621.5], [28.0, 3684.0], [30.0, 3541.5], [32.0, 3625.5], [35.0, 3328.0], [34.0, 3535.0], [37.0, 3625.5], [36.0, 3602.0], [39.0, 3504.0], [41.0, 3680.0], [43.0, 3676.0], [42.0, 3559.5], [45.0, 3357.0], [44.0, 3321.0], [49.0, 3611.3333333333335], [53.0, 3532.0], [52.0, 3527.0], [57.0, 3460.0], [59.0, 3263.0], [58.0, 3674.0], [61.0, 3673.0], [63.0, 3485.0], [62.0, 3523.0], [67.0, 3537.0], [66.0, 3539.3333333333335], [71.0, 3313.0], [69.0, 3593.6666666666665], [68.0, 3384.3333333333335], [75.0, 3492.0], [72.0, 3601.5], [78.0, 3525.0], [77.0, 3317.0], [81.0, 3586.0], [87.0, 3604.5], [85.0, 3453.0], [89.0, 3528.6666666666665], [94.0, 3332.0], [93.0, 3528.2], [97.0, 3600.5], [96.0, 3624.0], [102.0, 3521.0], [101.0, 3583.6666666666665], [105.0, 3424.3333333333335], [104.0, 3445.0], [111.0, 3218.6666666666665], [110.0, 3529.6666666666665], [119.0, 3488.5], [118.0, 3594.5], [116.0, 3658.0], [121.0, 3528.4], [127.0, 3325.0], [126.0, 3430.4], [132.0, 3246.0], [131.0, 3477.5], [129.0, 2835.5], [143.0, 3294.0], [136.0, 3394.75], [151.0, 3252.0], [147.0, 3478.5], [146.0, 3292.0], [145.0, 3571.0], [158.0, 3557.5], [156.0, 3505.0], [155.0, 3530.5], [153.0, 3421.0], [152.0, 3636.0], [166.0, 3219.0], [165.0, 2930.0], [164.0, 3506.0], [162.0, 3521.0], [161.0, 3250.0], [160.0, 3668.0], [175.0, 3553.0], [174.0, 3509.5], [172.0, 3287.5], [171.0, 2594.0], [168.0, 3054.5], [180.0, 3376.5], [179.0, 3237.0], [177.0, 2405.0], [190.0, 3447.0], [188.0, 3331.5], [187.0, 3628.0], [186.0, 3239.6666666666665], [198.0, 3442.5], [197.0, 3537.0], [195.0, 3561.5], [194.0, 3260.0], [193.0, 3410.0], [207.0, 3432.3333333333335], [204.0, 3426.0], [203.0, 3397.5], [201.0, 3650.0], [215.0, 3442.0], [214.0, 3367.0], [211.0, 3471.0], [210.0, 3362.0], [209.0, 3221.0], [223.0, 2719.6666666666665], [220.0, 3125.3333333333335], [230.0, 2787.5], [228.0, 3292.5], [226.0, 2798.0], [224.0, 3226.0], [238.0, 2996.6666666666665], [235.0, 2787.5], [233.0, 3404.0], [232.0, 2365.5], [247.0, 2357.0], [246.0, 3008.3333333333335], [245.0, 3526.0], [244.0, 2359.0], [240.0, 3410.5], [255.0, 2634.3333333333335], [252.0, 2356.0], [251.0, 3201.0], [250.0, 3417.0], [249.0, 2357.0], [270.0, 3187.0], [271.0, 3599.0], [268.0, 2336.0], [267.0, 3601.0], [266.0, 2338.0], [265.0, 3088.75], [261.0, 2343.5], [259.0, 2746.6666666666665], [256.0, 3621.0], [285.0, 3168.0], [286.0, 2294.0], [284.0, 3564.0], [275.0, 3355.0], [274.0, 2314.0], [273.0, 2885.5], [283.0, 3567.0], [282.0, 3165.0], [281.0, 3574.0], [280.0, 2304.0], [279.0, 3367.5], [277.0, 2304.0], [276.0, 3411.0], [301.0, 3545.0], [302.0, 3463.0], [300.0, 2286.0], [299.0, 2995.6666666666665], [296.0, 3151.6666666666665], [294.0, 3453.5], [291.0, 2294.0], [290.0, 2575.3333333333335], [289.0, 3422.0], [316.0, 3314.0], [318.0, 2232.0], [319.0, 3513.0], [317.0, 3466.0], [315.0, 3122.5], [313.0, 2754.5], [311.0, 3260.0], [304.0, 3222.0], [307.0, 3406.0], [305.0, 3121.0], [310.0, 3130.0], [309.0, 2263.0], [308.0, 3465.0], [333.0, 2191.0], [335.0, 2630.0], [332.0, 2194.0], [323.0, 3496.0], [322.0, 3232.0], [321.0, 3096.0], [320.0, 3109.0], [331.0, 3466.0], [330.0, 3483.5], [328.0, 3486.0], [327.0, 3047.0], [326.0, 3306.0], [325.0, 3099.0], [324.0, 2778.0], [348.0, 3003.0], [350.0, 3398.0], [351.0, 3409.0], [349.0, 3137.0], [347.0, 3378.0], [346.0, 3191.3333333333335], [343.0, 3252.0], [338.0, 3456.0], [337.0, 2177.0], [342.0, 3461.0], [341.0, 2163.0], [340.0, 3157.0], [366.0, 2895.0], [367.0, 2207.0], [365.0, 2229.0], [364.0, 2902.0], [363.0, 2329.0], [362.0, 3135.0], [361.0, 2246.0], [360.0, 2256.0], [359.0, 2269.0], [354.0, 2311.0], [353.0, 2321.5], [358.0, 2277.0], [357.0, 2286.0], [356.0, 3045.5], [380.0, 3215.0], [382.0, 1885.0], [383.0, 2945.0], [381.0, 2968.5], [379.0, 3168.5], [376.0, 2824.0], [375.0, 1988.0], [369.0, 2286.0], [368.0, 2291.0], [371.0, 3013.0], [370.0, 3231.0], [374.0, 3228.0], [372.0, 2841.0], [387.0, 3165.0], [398.0, 3036.0], [399.0, 3107.0], [397.0, 2105.0], [392.0, 2673.0], [391.0, 3136.0], [390.0, 2979.0], [389.0, 2091.0], [388.0, 3067.0], [386.0, 3093.0], [385.0, 1875.0], [384.0, 2784.0], [402.0, 2719.0], [415.0, 2931.0], [414.0, 2045.0], [410.0, 2716.0], [409.0, 2908.0], [408.0, 2890.0], [406.0, 1787.0], [405.0, 764.0], [404.0, 3104.5], [401.0, 2641.0], [400.0, 2836.0], [430.0, 2844.5], [431.0, 2786.0], [428.0, 3087.0], [427.0, 3099.5], [426.0, 3093.0], [424.0, 2037.0], [423.0, 2914.0], [418.0, 2682.0], [416.0, 2835.0], [435.0, 2908.0], [447.0, 3059.0], [445.0, 2731.0], [434.0, 1759.0], [433.0, 2895.0], [432.0, 744.0], [443.0, 2715.5], [441.0, 2797.0], [440.0, 2899.0], [439.0, 3069.0], [438.0, 2811.0], [437.0, 3082.0], [436.0, 2948.0], [462.0, 2652.0], [463.0, 2907.0], [461.0, 1730.0], [460.0, 1730.0], [459.0, 3052.0], [458.0, 2971.0], [457.0, 3047.0], [456.0, 2744.0], [455.0, 2664.0], [451.0, 1745.0], [450.0, 2855.25], [454.0, 3061.0], [453.0, 2753.0], [452.0, 2759.0], [478.0, 2815.0], [479.0, 2583.0], [477.0, 2987.0], [476.0, 2692.5], [474.0, 3006.0], [473.0, 3019.0], [472.0, 2970.0], [471.0, 1705.0], [465.0, 2654.0], [464.0, 2805.0], [467.0, 2886.0], [466.0, 1717.0], [470.0, 2200.0], [469.0, 2639.0], [492.0, 2498.5], [494.0, 2838.0], [495.0, 2496.0], [493.0, 2713.0], [490.0, 2866.0], [489.0, 2051.5], [487.0, 2515.0], [481.0, 2576.0], [480.0, 2584.0], [483.0, 2888.0], [482.0, 1647.0], [486.0, 2814.0], [485.0, 1637.0], [484.0, 1637.0], [510.0, 2696.0], [511.0, 2767.0], [509.0, 2769.0], [508.0, 2460.0], [507.0, 2598.0], [506.0, 2616.0], [505.0, 2614.5], [503.0, 2796.0], [496.0, 2577.0], [499.0, 2779.0], [497.0, 2474.0], [502.0, 1138.0], [501.0, 2530.0], [500.0, 2710.5], [538.0, 1928.3333333333333], [542.0, 2681.0], [543.0, 2592.0], [531.0, 2576.0], [528.0, 2577.0], [533.0, 2725.0], [532.0, 2271.0], [541.0, 2700.0], [540.0, 2564.0], [539.0, 2688.0], [536.0, 1742.0], [519.0, 2755.0], [517.0, 2583.0], [516.0, 2477.0], [515.0, 2755.0], [514.0, 1035.0], [513.0, 2763.0], [512.0, 2778.0], [527.0, 2469.0], [526.0, 2581.0], [524.0, 1020.0], [523.0, 2612.0], [522.0, 2430.0], [521.0, 2434.0], [520.0, 2068.5], [535.0, 1743.0], [534.0, 2406.0], [570.0, 2431.0], [574.0, 1289.0], [575.0, 1300.0], [560.0, 2116.0], [562.0, 1336.0], [561.0, 1337.0], [564.0, 2624.0], [563.0, 2427.0], [573.0, 1301.0], [572.0, 1741.5], [571.0, 2175.0], [568.0, 1308.0], [550.0, 1867.0], [548.0, 2206.0], [547.0, 2427.0], [545.0, 2673.0], [544.0, 1624.0], [557.0, 2648.0], [556.0, 2382.0], [555.0, 1598.0], [554.0, 1526.0], [553.0, 2656.0], [552.0, 1648.5], [567.0, 1314.0], [565.0, 1317.0], [601.0, 2411.0], [605.0, 2556.0], [607.0, 1887.5], [593.0, 1263.0], [592.0, 2243.0], [596.0, 1229.0], [594.0, 1249.0], [604.0, 2268.0], [603.0, 2250.0], [602.0, 882.0], [600.0, 2248.5], [583.0, 2397.0], [582.0, 2340.0], [581.0, 1950.0], [579.0, 2597.0], [578.0, 1294.0], [577.0, 2429.0], [576.0, 1237.0], [590.0, 2567.0], [589.0, 1269.0], [588.0, 1271.0], [587.0, 1277.0], [586.0, 1280.0], [585.0, 2517.0], [584.0, 2289.0], [598.0, 1212.0], [597.0, 1245.0], [627.0, 1175.0], [633.0, 2268.0], [632.0, 2366.0], [614.0, 2521.0], [613.0, 2376.5], [611.0, 2299.0], [610.0, 1224.0], [609.0, 1233.0], [608.0, 2245.0], [622.0, 701.0], [621.0, 2415.0], [620.0, 1777.0], [619.0, 1151.0], [618.0, 2326.0], [617.0, 2512.0], [616.0, 1816.5], [631.0, 1756.0], [630.0, 1171.0], [629.0, 1172.0], [626.0, 1174.0], [625.0, 1176.0], [624.0, 1580.5], [664.0, 2103.0], [670.0, 1627.5], [671.0, 2091.0], [668.0, 2394.0], [667.0, 2203.0], [666.0, 2180.0], [655.0, 2406.0], [641.0, 2198.0], [640.0, 1774.7142857142858], [644.0, 481.0], [643.0, 2006.0], [646.0, 2298.0], [645.0, 1983.0], [654.0, 1604.0], [653.0, 2334.0], [652.0, 2414.0], [651.0, 2423.0], [650.0, 1996.0], [648.0, 1627.5], [663.0, 29.5], [659.0, 35.0], [658.0, 2380.0], [656.0, 2243.0], [696.0, 1935.5], [699.0, 1919.0], [701.0, 2116.0], [698.0, 1953.0], [688.0, 2167.0], [689.0, 120.0], [686.0, 2065.0], [673.0, 2087.0], [672.0, 2381.0], [675.0, 1885.0], [674.0, 1886.0], [678.0, 25.0], [677.0, 2364.0], [685.0, 1598.0], [683.0, 1975.0], [682.0, 2276.5], [681.0, 706.3333333333333], [680.0, 2080.0], [723.0, 121.0], [733.0, 1793.0], [734.0, 1792.0], [722.0, 1904.0], [732.0, 1791.0], [730.0, 1797.0], [729.0, 1927.0], [708.0, 2139.0], [705.0, 1823.0], [704.0, 142.0], [719.0, 2093.0], [713.0, 2304.0], [712.0, 2227.0], [727.0, 1864.0], [726.0, 2299.0], [725.0, 1815.0], [766.0, 1139.6666666666665], [767.0, 1393.3333333333335], [752.0, 1774.0], [754.0, 2096.0], [753.0, 1772.0], [757.0, 1346.0], [755.0, 1769.0], [764.0, 2188.0], [763.0, 1578.6], [765.0, 30.0], [762.0, 28.0], [761.0, 28.5], [741.0, 2270.0], [738.0, 1968.5], [736.0, 26.0], [751.0, 1774.0], [744.0, 1779.0], [759.0, 1754.0], [758.0, 42.0], [793.0, 1347.5], [798.0, 864.6666666666666], [799.0, 63.0], [785.0, 1368.0], [784.0, 1374.0], [787.0, 1395.0], [786.0, 1368.0], [796.0, 102.0], [795.0, 1302.0], [794.0, 1194.0], [783.0, 1751.0], [770.0, 1285.0], [769.0, 2131.0], [768.0, 2073.3333333333335], [772.0, 2066.0], [771.0, 1414.0], [774.0, 2127.0], [773.0, 734.5], [782.0, 1378.0], [780.0, 931.0], [779.0, 1417.0], [778.0, 1398.0], [776.0, 1398.5], [791.0, 1621.0], [790.0, 1622.0], [789.0, 1362.0], [788.0, 28.0], [825.0, 976.6666666666666], [830.0, 1130.0], [831.0, 1123.3333333333333], [817.0, 33.0], [816.0, 990.5], [819.0, 1229.0], [818.0, 1231.0], [821.0, 1237.0], [820.0, 2015.0], [829.0, 1189.25], [827.0, 1587.0], [826.0, 1732.5], [824.0, 1343.5], [807.0, 46.0], [806.0, 81.0], [805.0, 1261.0], [804.0, 1419.5], [803.0, 1273.0], [802.0, 1273.0], [801.0, 1274.0], [800.0, 1274.0], [814.0, 76.0], [813.0, 1617.0], [812.0, 642.0], [810.0, 1556.0], [809.0, 1025.75], [823.0, 1644.25], [822.0, 1263.0], [857.0, 993.0], [862.0, 1151.0], [863.0, 656.25], [848.0, 1164.0], [851.0, 27.0], [850.0, 1788.0], [860.0, 26.0], [859.0, 499.0], [858.0, 266.0], [856.0, 63.0], [839.0, 1178.0], [838.0, 405.0], [837.0, 601.0], [835.0, 1191.0], [834.0, 30.0], [833.0, 579.0], [832.0, 1910.0], [847.0, 1883.0], [846.0, 1162.0], [845.0, 1166.0], [844.0, 602.0], [842.0, 38.0], [841.0, 65.0], [840.0, 1176.0], [855.0, 1477.5], [854.0, 1453.0], [853.0, 889.3333333333334], [852.0, 1742.0], [894.0, 1003.5], [884.0, 740.0], [895.0, 317.0], [881.0, 793.5], [880.0, 1013.5], [883.0, 218.5], [882.0, 1685.0], [892.0, 732.0], [890.0, 353.0], [888.0, 722.0], [871.0, 801.0], [870.0, 1046.5], [869.0, 1549.5], [868.0, 1695.0], [867.0, 1201.0], [865.0, 427.5], [879.0, 580.5], [877.0, 964.5], [876.0, 1430.6666666666667], [874.0, 33.0], [873.0, 1771.0], [872.0, 138.0], [878.0, 1490.0], [887.0, 36.0], [886.0, 31.0], [885.0, 36.0], [920.0, 30.0], [926.0, 1319.0], [927.0, 85.0], [913.0, 37.5], [925.0, 45.0], [924.0, 44.0], [922.0, 87.0], [911.0, 39.0], [897.0, 1387.0], [899.0, 1293.5], [898.0, 1199.0], [901.0, 1604.0], [900.0, 178.0], [903.0, 1666.0], [902.0, 308.0], [910.0, 789.0], [909.0, 830.0], [908.0, 336.0], [907.0, 335.5], [906.0, 1406.5], [905.0, 301.0], [904.0, 1157.0], [919.0, 37.0], [918.0, 122.5], [916.0, 319.0], [915.0, 776.0], [932.0, 803.0], [933.0, 1465.0], [931.0, 856.0], [930.0, 1105.0], [929.0, 258.0], [928.0, 39.0], [1.0, 3632.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}, {"data": [[496.1279999999999, 2246.0819999999994]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 933.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8150.0, "minX": 1.75636902E12, "maxY": 19616.666666666668, "series": [{"data": [[1.75636902E12, 19616.666666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75636902E12, 8150.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636902E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2246.0819999999994, "minX": 1.75636902E12, "maxY": 2246.0819999999994, "series": [{"data": [[1.75636902E12, 2246.0819999999994]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636902E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2246.020000000003, "minX": 1.75636902E12, "maxY": 2246.020000000003, "series": [{"data": [[1.75636902E12, 2246.020000000003]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636902E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1985.4599999999996, "minX": 1.75636902E12, "maxY": 1985.4599999999996, "series": [{"data": [[1.75636902E12, 1985.4599999999996]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636902E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.75636902E12, "maxY": 3703.0, "series": [{"data": [[1.75636902E12, 3703.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75636902E12, 3548.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75636902E12, 3680.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75636902E12, 3638.85]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75636902E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75636902E12, 2365.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 796.0, "minX": 157.0, "maxY": 3246.0, "series": [{"data": [[157.0, 796.0], [362.0, 1801.0], [481.0, 3246.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 481.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 796.0, "minX": 157.0, "maxY": 3246.0, "series": [{"data": [[157.0, 796.0], [362.0, 1801.0], [481.0, 3246.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 481.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636902E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636902E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636902E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636902E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636902E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75636902E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636902E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636902E12, 16.666666666666668]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636902E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75636902E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75636902E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75636902E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

