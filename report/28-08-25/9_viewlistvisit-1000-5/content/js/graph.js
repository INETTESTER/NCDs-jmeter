/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 23.0, "minX": 0.0, "maxY": 3363.0, "series": [{"data": [[0.0, 23.0], [0.1, 23.0], [0.2, 23.0], [0.3, 24.0], [0.4, 24.0], [0.5, 24.0], [0.6, 25.0], [0.7, 25.0], [0.8, 25.0], [0.9, 25.0], [1.0, 25.0], [1.1, 25.0], [1.2, 25.0], [1.3, 25.0], [1.4, 25.0], [1.5, 25.0], [1.6, 25.0], [1.7, 25.0], [1.8, 26.0], [1.9, 26.0], [2.0, 26.0], [2.1, 26.0], [2.2, 26.0], [2.3, 26.0], [2.4, 26.0], [2.5, 26.0], [2.6, 26.0], [2.7, 26.0], [2.8, 26.0], [2.9, 26.0], [3.0, 26.0], [3.1, 26.0], [3.2, 26.0], [3.3, 26.0], [3.4, 27.0], [3.5, 27.0], [3.6, 27.0], [3.7, 27.0], [3.8, 27.0], [3.9, 27.0], [4.0, 27.0], [4.1, 27.0], [4.2, 27.0], [4.3, 27.0], [4.4, 27.0], [4.5, 27.0], [4.6, 27.0], [4.7, 27.0], [4.8, 27.0], [4.9, 28.0], [5.0, 28.0], [5.1, 28.0], [5.2, 28.0], [5.3, 28.0], [5.4, 28.0], [5.5, 28.0], [5.6, 28.0], [5.7, 29.0], [5.8, 29.0], [5.9, 29.0], [6.0, 29.0], [6.1, 29.0], [6.2, 29.0], [6.3, 29.0], [6.4, 29.0], [6.5, 29.0], [6.6, 29.0], [6.7, 30.0], [6.8, 30.0], [6.9, 30.0], [7.0, 30.0], [7.1, 30.0], [7.2, 30.0], [7.3, 30.0], [7.4, 30.0], [7.5, 30.0], [7.6, 30.0], [7.7, 30.0], [7.8, 30.0], [7.9, 30.0], [8.0, 31.0], [8.1, 31.0], [8.2, 31.0], [8.3, 31.0], [8.4, 31.0], [8.5, 31.0], [8.6, 31.0], [8.7, 31.0], [8.8, 31.0], [8.9, 31.0], [9.0, 31.0], [9.1, 31.0], [9.2, 31.0], [9.3, 31.0], [9.4, 31.0], [9.5, 32.0], [9.6, 32.0], [9.7, 32.0], [9.8, 32.0], [9.9, 32.0], [10.0, 33.0], [10.1, 33.0], [10.2, 33.0], [10.3, 33.0], [10.4, 33.0], [10.5, 33.0], [10.6, 33.0], [10.7, 33.0], [10.8, 33.0], [10.9, 33.0], [11.0, 33.0], [11.1, 34.0], [11.2, 34.0], [11.3, 34.0], [11.4, 34.0], [11.5, 34.0], [11.6, 34.0], [11.7, 35.0], [11.8, 35.0], [11.9, 35.0], [12.0, 35.0], [12.1, 35.0], [12.2, 35.0], [12.3, 35.0], [12.4, 35.0], [12.5, 35.0], [12.6, 35.0], [12.7, 35.0], [12.8, 35.0], [12.9, 36.0], [13.0, 36.0], [13.1, 36.0], [13.2, 36.0], [13.3, 36.0], [13.4, 36.0], [13.5, 37.0], [13.6, 37.0], [13.7, 37.0], [13.8, 37.0], [13.9, 37.0], [14.0, 38.0], [14.1, 38.0], [14.2, 38.0], [14.3, 38.0], [14.4, 38.0], [14.5, 38.0], [14.6, 39.0], [14.7, 39.0], [14.8, 39.0], [14.9, 39.0], [15.0, 39.0], [15.1, 40.0], [15.2, 40.0], [15.3, 40.0], [15.4, 40.0], [15.5, 40.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 42.0], [16.3, 43.0], [16.4, 43.0], [16.5, 44.0], [16.6, 46.0], [16.7, 46.0], [16.8, 49.0], [16.9, 49.0], [17.0, 50.0], [17.1, 51.0], [17.2, 55.0], [17.3, 59.0], [17.4, 59.0], [17.5, 61.0], [17.6, 61.0], [17.7, 63.0], [17.8, 64.0], [17.9, 68.0], [18.0, 68.0], [18.1, 70.0], [18.2, 81.0], [18.3, 98.0], [18.4, 119.0], [18.5, 147.0], [18.6, 156.0], [18.7, 157.0], [18.8, 164.0], [18.9, 215.0], [19.0, 232.0], [19.1, 234.0], [19.2, 239.0], [19.3, 250.0], [19.4, 325.0], [19.5, 325.0], [19.6, 332.0], [19.7, 336.0], [19.8, 343.0], [19.9, 355.0], [20.0, 360.0], [20.1, 360.0], [20.2, 366.0], [20.3, 369.0], [20.4, 375.0], [20.5, 425.0], [20.6, 445.0], [20.7, 470.0], [20.8, 485.0], [20.9, 495.0], [21.0, 500.0], [21.1, 509.0], [21.2, 532.0], [21.3, 538.0], [21.4, 577.0], [21.5, 578.0], [21.6, 580.0], [21.7, 580.0], [21.8, 583.0], [21.9, 585.0], [22.0, 603.0], [22.1, 661.0], [22.2, 665.0], [22.3, 666.0], [22.4, 667.0], [22.5, 678.0], [22.6, 680.0], [22.7, 730.0], [22.8, 744.0], [22.9, 753.0], [23.0, 764.0], [23.1, 785.0], [23.2, 789.0], [23.3, 807.0], [23.4, 820.0], [23.5, 833.0], [23.6, 849.0], [23.7, 866.0], [23.8, 868.0], [23.9, 890.0], [24.0, 895.0], [24.1, 911.0], [24.2, 932.0], [24.3, 949.0], [24.4, 965.0], [24.5, 967.0], [24.6, 975.0], [24.7, 975.0], [24.8, 986.0], [24.9, 1051.0], [25.0, 1054.0], [25.1, 1055.0], [25.2, 1083.0], [25.3, 1084.0], [25.4, 1103.0], [25.5, 1108.0], [25.6, 1129.0], [25.7, 1164.0], [25.8, 1165.0], [25.9, 1165.0], [26.0, 1166.0], [26.1, 1169.0], [26.2, 1170.0], [26.3, 1170.0], [26.4, 1177.0], [26.5, 1181.0], [26.6, 1185.0], [26.7, 1185.0], [26.8, 1186.0], [26.9, 1196.0], [27.0, 1199.0], [27.1, 1204.0], [27.2, 1213.0], [27.3, 1215.0], [27.4, 1237.0], [27.5, 1242.0], [27.6, 1247.0], [27.7, 1248.0], [27.8, 1249.0], [27.9, 1251.0], [28.0, 1257.0], [28.1, 1269.0], [28.2, 1270.0], [28.3, 1274.0], [28.4, 1276.0], [28.5, 1281.0], [28.6, 1285.0], [28.7, 1304.0], [28.8, 1310.0], [28.9, 1313.0], [29.0, 1319.0], [29.1, 1323.0], [29.2, 1328.0], [29.3, 1329.0], [29.4, 1331.0], [29.5, 1335.0], [29.6, 1345.0], [29.7, 1346.0], [29.8, 1349.0], [29.9, 1352.0], [30.0, 1356.0], [30.1, 1357.0], [30.2, 1357.0], [30.3, 1358.0], [30.4, 1359.0], [30.5, 1360.0], [30.6, 1361.0], [30.7, 1362.0], [30.8, 1366.0], [30.9, 1369.0], [31.0, 1371.0], [31.1, 1376.0], [31.2, 1377.0], [31.3, 1378.0], [31.4, 1378.0], [31.5, 1379.0], [31.6, 1382.0], [31.7, 1385.0], [31.8, 1403.0], [31.9, 1404.0], [32.0, 1407.0], [32.1, 1409.0], [32.2, 1418.0], [32.3, 1422.0], [32.4, 1427.0], [32.5, 1438.0], [32.6, 1448.0], [32.7, 1449.0], [32.8, 1451.0], [32.9, 1453.0], [33.0, 1458.0], [33.1, 1463.0], [33.2, 1470.0], [33.3, 1472.0], [33.4, 1474.0], [33.5, 1474.0], [33.6, 1477.0], [33.7, 1481.0], [33.8, 1481.0], [33.9, 1483.0], [34.0, 1484.0], [34.1, 1486.0], [34.2, 1487.0], [34.3, 1492.0], [34.4, 1493.0], [34.5, 1495.0], [34.6, 1500.0], [34.7, 1501.0], [34.8, 1501.0], [34.9, 1504.0], [35.0, 1507.0], [35.1, 1509.0], [35.2, 1511.0], [35.3, 1514.0], [35.4, 1523.0], [35.5, 1525.0], [35.6, 1526.0], [35.7, 1527.0], [35.8, 1528.0], [35.9, 1529.0], [36.0, 1534.0], [36.1, 1534.0], [36.2, 1539.0], [36.3, 1543.0], [36.4, 1544.0], [36.5, 1545.0], [36.6, 1548.0], [36.7, 1549.0], [36.8, 1550.0], [36.9, 1552.0], [37.0, 1553.0], [37.1, 1559.0], [37.2, 1561.0], [37.3, 1563.0], [37.4, 1566.0], [37.5, 1569.0], [37.6, 1570.0], [37.7, 1579.0], [37.8, 1580.0], [37.9, 1586.0], [38.0, 1590.0], [38.1, 1590.0], [38.2, 1591.0], [38.3, 1594.0], [38.4, 1597.0], [38.5, 1598.0], [38.6, 1599.0], [38.7, 1600.0], [38.8, 1601.0], [38.9, 1603.0], [39.0, 1603.0], [39.1, 1607.0], [39.2, 1608.0], [39.3, 1608.0], [39.4, 1616.0], [39.5, 1618.0], [39.6, 1618.0], [39.7, 1621.0], [39.8, 1626.0], [39.9, 1627.0], [40.0, 1628.0], [40.1, 1631.0], [40.2, 1633.0], [40.3, 1634.0], [40.4, 1638.0], [40.5, 1639.0], [40.6, 1642.0], [40.7, 1644.0], [40.8, 1645.0], [40.9, 1649.0], [41.0, 1650.0], [41.1, 1650.0], [41.2, 1650.0], [41.3, 1653.0], [41.4, 1657.0], [41.5, 1659.0], [41.6, 1660.0], [41.7, 1662.0], [41.8, 1662.0], [41.9, 1663.0], [42.0, 1668.0], [42.1, 1668.0], [42.2, 1669.0], [42.3, 1672.0], [42.4, 1685.0], [42.5, 1686.0], [42.6, 1686.0], [42.7, 1686.0], [42.8, 1687.0], [42.9, 1689.0], [43.0, 1689.0], [43.1, 1690.0], [43.2, 1690.0], [43.3, 1690.0], [43.4, 1694.0], [43.5, 1694.0], [43.6, 1697.0], [43.7, 1698.0], [43.8, 1701.0], [43.9, 1701.0], [44.0, 1702.0], [44.1, 1703.0], [44.2, 1703.0], [44.3, 1704.0], [44.4, 1704.0], [44.5, 1705.0], [44.6, 1706.0], [44.7, 1710.0], [44.8, 1710.0], [44.9, 1714.0], [45.0, 1717.0], [45.1, 1718.0], [45.2, 1722.0], [45.3, 1723.0], [45.4, 1723.0], [45.5, 1724.0], [45.6, 1724.0], [45.7, 1727.0], [45.8, 1730.0], [45.9, 1731.0], [46.0, 1731.0], [46.1, 1733.0], [46.2, 1733.0], [46.3, 1734.0], [46.4, 1736.0], [46.5, 1736.0], [46.6, 1737.0], [46.7, 1738.0], [46.8, 1738.0], [46.9, 1738.0], [47.0, 1738.0], [47.1, 1742.0], [47.2, 1745.0], [47.3, 1747.0], [47.4, 1747.0], [47.5, 1750.0], [47.6, 1754.0], [47.7, 1754.0], [47.8, 1755.0], [47.9, 1756.0], [48.0, 1759.0], [48.1, 1764.0], [48.2, 1764.0], [48.3, 1765.0], [48.4, 1769.0], [48.5, 1769.0], [48.6, 1770.0], [48.7, 1770.0], [48.8, 1772.0], [48.9, 1772.0], [49.0, 1774.0], [49.1, 1774.0], [49.2, 1778.0], [49.3, 1780.0], [49.4, 1783.0], [49.5, 1789.0], [49.6, 1789.0], [49.7, 1790.0], [49.8, 1792.0], [49.9, 1796.0], [50.0, 1800.0], [50.1, 1800.0], [50.2, 1800.0], [50.3, 1801.0], [50.4, 1802.0], [50.5, 1802.0], [50.6, 1802.0], [50.7, 1804.0], [50.8, 1805.0], [50.9, 1806.0], [51.0, 1808.0], [51.1, 1808.0], [51.2, 1808.0], [51.3, 1811.0], [51.4, 1813.0], [51.5, 1813.0], [51.6, 1814.0], [51.7, 1814.0], [51.8, 1816.0], [51.9, 1818.0], [52.0, 1821.0], [52.1, 1821.0], [52.2, 1822.0], [52.3, 1824.0], [52.4, 1826.0], [52.5, 1829.0], [52.6, 1833.0], [52.7, 1834.0], [52.8, 1836.0], [52.9, 1838.0], [53.0, 1840.0], [53.1, 1841.0], [53.2, 1843.0], [53.3, 1845.0], [53.4, 1850.0], [53.5, 1850.0], [53.6, 1851.0], [53.7, 1858.0], [53.8, 1859.0], [53.9, 1860.0], [54.0, 1860.0], [54.1, 1860.0], [54.2, 1860.0], [54.3, 1861.0], [54.4, 1862.0], [54.5, 1863.0], [54.6, 1865.0], [54.7, 1865.0], [54.8, 1866.0], [54.9, 1866.0], [55.0, 1869.0], [55.1, 1869.0], [55.2, 1873.0], [55.3, 1875.0], [55.4, 1880.0], [55.5, 1881.0], [55.6, 1881.0], [55.7, 1886.0], [55.8, 1890.0], [55.9, 1890.0], [56.0, 1897.0], [56.1, 1899.0], [56.2, 1900.0], [56.3, 1900.0], [56.4, 1904.0], [56.5, 1905.0], [56.6, 1910.0], [56.7, 1912.0], [56.8, 1918.0], [56.9, 1918.0], [57.0, 1920.0], [57.1, 1924.0], [57.2, 1924.0], [57.3, 1929.0], [57.4, 1929.0], [57.5, 1932.0], [57.6, 1932.0], [57.7, 1934.0], [57.8, 1936.0], [57.9, 1944.0], [58.0, 1957.0], [58.1, 1958.0], [58.2, 1962.0], [58.3, 1964.0], [58.4, 1968.0], [58.5, 1971.0], [58.6, 1973.0], [58.7, 1973.0], [58.8, 1975.0], [58.9, 1976.0], [59.0, 1977.0], [59.1, 1977.0], [59.2, 1980.0], [59.3, 1981.0], [59.4, 1981.0], [59.5, 1982.0], [59.6, 1983.0], [59.7, 1988.0], [59.8, 1993.0], [59.9, 2000.0], [60.0, 2001.0], [60.1, 2001.0], [60.2, 2005.0], [60.3, 2006.0], [60.4, 2006.0], [60.5, 2026.0], [60.6, 2031.0], [60.7, 2032.0], [60.8, 2034.0], [60.9, 2038.0], [61.0, 2039.0], [61.1, 2043.0], [61.2, 2052.0], [61.3, 2053.0], [61.4, 2055.0], [61.5, 2056.0], [61.6, 2057.0], [61.7, 2062.0], [61.8, 2064.0], [61.9, 2073.0], [62.0, 2074.0], [62.1, 2075.0], [62.2, 2076.0], [62.3, 2079.0], [62.4, 2080.0], [62.5, 2082.0], [62.6, 2083.0], [62.7, 2085.0], [62.8, 2087.0], [62.9, 2096.0], [63.0, 2096.0], [63.1, 2098.0], [63.2, 2099.0], [63.3, 2104.0], [63.4, 2109.0], [63.5, 2110.0], [63.6, 2110.0], [63.7, 2115.0], [63.8, 2118.0], [63.9, 2121.0], [64.0, 2121.0], [64.1, 2122.0], [64.2, 2123.0], [64.3, 2123.0], [64.4, 2123.0], [64.5, 2127.0], [64.6, 2128.0], [64.7, 2131.0], [64.8, 2131.0], [64.9, 2134.0], [65.0, 2135.0], [65.1, 2138.0], [65.2, 2140.0], [65.3, 2145.0], [65.4, 2147.0], [65.5, 2147.0], [65.6, 2148.0], [65.7, 2152.0], [65.8, 2152.0], [65.9, 2156.0], [66.0, 2158.0], [66.1, 2159.0], [66.2, 2160.0], [66.3, 2160.0], [66.4, 2161.0], [66.5, 2163.0], [66.6, 2165.0], [66.7, 2166.0], [66.8, 2167.0], [66.9, 2169.0], [67.0, 2169.0], [67.1, 2172.0], [67.2, 2179.0], [67.3, 2180.0], [67.4, 2183.0], [67.5, 2185.0], [67.6, 2186.0], [67.7, 2189.0], [67.8, 2192.0], [67.9, 2193.0], [68.0, 2193.0], [68.1, 2197.0], [68.2, 2202.0], [68.3, 2204.0], [68.4, 2206.0], [68.5, 2206.0], [68.6, 2215.0], [68.7, 2218.0], [68.8, 2218.0], [68.9, 2219.0], [69.0, 2220.0], [69.1, 2222.0], [69.2, 2224.0], [69.3, 2225.0], [69.4, 2227.0], [69.5, 2229.0], [69.6, 2232.0], [69.7, 2234.0], [69.8, 2235.0], [69.9, 2242.0], [70.0, 2242.0], [70.1, 2242.0], [70.2, 2247.0], [70.3, 2253.0], [70.4, 2253.0], [70.5, 2262.0], [70.6, 2262.0], [70.7, 2270.0], [70.8, 2272.0], [70.9, 2273.0], [71.0, 2274.0], [71.1, 2275.0], [71.2, 2284.0], [71.3, 2285.0], [71.4, 2289.0], [71.5, 2290.0], [71.6, 2291.0], [71.7, 2291.0], [71.8, 2291.0], [71.9, 2293.0], [72.0, 2298.0], [72.1, 2298.0], [72.2, 2301.0], [72.3, 2306.0], [72.4, 2308.0], [72.5, 2310.0], [72.6, 2318.0], [72.7, 2322.0], [72.8, 2326.0], [72.9, 2326.0], [73.0, 2327.0], [73.1, 2329.0], [73.2, 2331.0], [73.3, 2335.0], [73.4, 2338.0], [73.5, 2338.0], [73.6, 2339.0], [73.7, 2339.0], [73.8, 2340.0], [73.9, 2347.0], [74.0, 2352.0], [74.1, 2356.0], [74.2, 2358.0], [74.3, 2359.0], [74.4, 2360.0], [74.5, 2360.0], [74.6, 2362.0], [74.7, 2367.0], [74.8, 2367.0], [74.9, 2369.0], [75.0, 2372.0], [75.1, 2374.0], [75.2, 2376.0], [75.3, 2377.0], [75.4, 2383.0], [75.5, 2386.0], [75.6, 2388.0], [75.7, 2391.0], [75.8, 2392.0], [75.9, 2392.0], [76.0, 2394.0], [76.1, 2400.0], [76.2, 2400.0], [76.3, 2401.0], [76.4, 2401.0], [76.5, 2406.0], [76.6, 2408.0], [76.7, 2412.0], [76.8, 2415.0], [76.9, 2416.0], [77.0, 2417.0], [77.1, 2417.0], [77.2, 2418.0], [77.3, 2420.0], [77.4, 2421.0], [77.5, 2421.0], [77.6, 2422.0], [77.7, 2423.0], [77.8, 2427.0], [77.9, 2430.0], [78.0, 2435.0], [78.1, 2435.0], [78.2, 2439.0], [78.3, 2448.0], [78.4, 2448.0], [78.5, 2451.0], [78.6, 2455.0], [78.7, 2459.0], [78.8, 2460.0], [78.9, 2466.0], [79.0, 2467.0], [79.1, 2469.0], [79.2, 2469.0], [79.3, 2477.0], [79.4, 2485.0], [79.5, 2489.0], [79.6, 2495.0], [79.7, 2495.0], [79.8, 2496.0], [79.9, 2500.0], [80.0, 2501.0], [80.1, 2504.0], [80.2, 2504.0], [80.3, 2507.0], [80.4, 2508.0], [80.5, 2511.0], [80.6, 2514.0], [80.7, 2519.0], [80.8, 2521.0], [80.9, 2522.0], [81.0, 2523.0], [81.1, 2524.0], [81.2, 2524.0], [81.3, 2526.0], [81.4, 2531.0], [81.5, 2532.0], [81.6, 2532.0], [81.7, 2533.0], [81.8, 2533.0], [81.9, 2534.0], [82.0, 2538.0], [82.1, 2543.0], [82.2, 2543.0], [82.3, 2544.0], [82.4, 2546.0], [82.5, 2554.0], [82.6, 2556.0], [82.7, 2559.0], [82.8, 2560.0], [82.9, 2560.0], [83.0, 2568.0], [83.1, 2572.0], [83.2, 2576.0], [83.3, 2576.0], [83.4, 2581.0], [83.5, 2592.0], [83.6, 2598.0], [83.7, 2610.0], [83.8, 2610.0], [83.9, 2615.0], [84.0, 2615.0], [84.1, 2616.0], [84.2, 2617.0], [84.3, 2617.0], [84.4, 2619.0], [84.5, 2620.0], [84.6, 2623.0], [84.7, 2625.0], [84.8, 2632.0], [84.9, 2655.0], [85.0, 2660.0], [85.1, 2662.0], [85.2, 2664.0], [85.3, 2666.0], [85.4, 2667.0], [85.5, 2671.0], [85.6, 2685.0], [85.7, 2686.0], [85.8, 2694.0], [85.9, 2697.0], [86.0, 2704.0], [86.1, 2706.0], [86.2, 2708.0], [86.3, 2709.0], [86.4, 2710.0], [86.5, 2715.0], [86.6, 2723.0], [86.7, 2729.0], [86.8, 2731.0], [86.9, 2737.0], [87.0, 2746.0], [87.1, 2747.0], [87.2, 2748.0], [87.3, 2758.0], [87.4, 2767.0], [87.5, 2768.0], [87.6, 2770.0], [87.7, 2787.0], [87.8, 2790.0], [87.9, 2791.0], [88.0, 2791.0], [88.1, 2793.0], [88.2, 2802.0], [88.3, 2802.0], [88.4, 2803.0], [88.5, 2804.0], [88.6, 2809.0], [88.7, 2814.0], [88.8, 2815.0], [88.9, 2816.0], [89.0, 2816.0], [89.1, 2819.0], [89.2, 2825.0], [89.3, 2827.0], [89.4, 2827.0], [89.5, 2828.0], [89.6, 2829.0], [89.7, 2830.0], [89.8, 2834.0], [89.9, 2840.0], [90.0, 2842.0], [90.1, 2842.0], [90.2, 2845.0], [90.3, 2846.0], [90.4, 2849.0], [90.5, 2850.0], [90.6, 2850.0], [90.7, 2851.0], [90.8, 2852.0], [90.9, 2854.0], [91.0, 2857.0], [91.1, 2864.0], [91.2, 2865.0], [91.3, 2869.0], [91.4, 2871.0], [91.5, 2872.0], [91.6, 2874.0], [91.7, 2875.0], [91.8, 2877.0], [91.9, 2878.0], [92.0, 2882.0], [92.1, 2883.0], [92.2, 2888.0], [92.3, 2906.0], [92.4, 2907.0], [92.5, 2908.0], [92.6, 2911.0], [92.7, 2917.0], [92.8, 2929.0], [92.9, 2929.0], [93.0, 2930.0], [93.1, 2943.0], [93.2, 2954.0], [93.3, 2955.0], [93.4, 2966.0], [93.5, 2968.0], [93.6, 2969.0], [93.7, 2975.0], [93.8, 2975.0], [93.9, 2978.0], [94.0, 2981.0], [94.1, 2997.0], [94.2, 2998.0], [94.3, 3001.0], [94.4, 3004.0], [94.5, 3007.0], [94.6, 3030.0], [94.7, 3032.0], [94.8, 3033.0], [94.9, 3038.0], [95.0, 3040.0], [95.1, 3041.0], [95.2, 3042.0], [95.3, 3063.0], [95.4, 3069.0], [95.5, 3070.0], [95.6, 3075.0], [95.7, 3077.0], [95.8, 3089.0], [95.9, 3091.0], [96.0, 3092.0], [96.1, 3095.0], [96.2, 3109.0], [96.3, 3117.0], [96.4, 3131.0], [96.5, 3132.0], [96.6, 3136.0], [96.7, 3136.0], [96.8, 3148.0], [96.9, 3169.0], [97.0, 3170.0], [97.1, 3171.0], [97.2, 3173.0], [97.3, 3174.0], [97.4, 3177.0], [97.5, 3178.0], [97.6, 3179.0], [97.7, 3187.0], [97.8, 3196.0], [97.9, 3204.0], [98.0, 3209.0], [98.1, 3216.0], [98.2, 3219.0], [98.3, 3224.0], [98.4, 3230.0], [98.5, 3243.0], [98.6, 3246.0], [98.7, 3251.0], [98.8, 3259.0], [98.9, 3270.0], [99.0, 3280.0], [99.1, 3282.0], [99.2, 3313.0], [99.3, 3324.0], [99.4, 3342.0], [99.5, 3349.0], [99.6, 3355.0], [99.7, 3356.0], [99.8, 3362.0], [99.9, 3363.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 183.0, "series": [{"data": [[0.0, 183.0], [600.0, 7.0], [700.0, 6.0], [800.0, 8.0], [900.0, 8.0], [1000.0, 5.0], [1100.0, 17.0], [1200.0, 16.0], [1300.0, 31.0], [1400.0, 28.0], [1500.0, 41.0], [100.0, 5.0], [1600.0, 51.0], [1700.0, 62.0], [1800.0, 62.0], [1900.0, 37.0], [2000.0, 34.0], [2100.0, 49.0], [2200.0, 40.0], [2300.0, 39.0], [2400.0, 38.0], [2500.0, 39.0], [2600.0, 23.0], [2700.0, 22.0], [2800.0, 41.0], [2900.0, 20.0], [3000.0, 19.0], [3100.0, 17.0], [200.0, 5.0], [3200.0, 13.0], [3300.0, 8.0], [300.0, 11.0], [400.0, 5.0], [500.0, 10.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 136.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 654.0, "series": [{"data": [[0.0, 210.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 136.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 654.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.0129999999995, "minX": 1.7563686E12, "maxY": 501.0129999999995, "series": [{"data": [[1.7563686E12, 501.0129999999995]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563686E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 3356.0, "series": [{"data": [[3.0, 2503.0], [5.0, 2082.0], [6.0, 3148.0], [8.0, 3356.0], [13.0, 3160.6], [14.0, 3246.0], [16.0, 3173.5], [18.0, 3355.5], [19.0, 3342.0], [20.0, 3282.0], [21.0, 3131.0], [22.0, 3171.0], [25.0, 3076.6666666666665], [26.0, 2864.0], [27.0, 3324.0], [28.0, 2852.0], [30.0, 2904.5], [31.0, 3179.0], [32.0, 3001.0], [35.0, 2618.5], [34.0, 2883.0], [37.0, 3196.0], [36.0, 2878.0], [39.0, 2954.0], [38.0, 2576.0], [41.0, 2875.0], [43.0, 2880.0], [45.0, 3313.0], [44.0, 2877.0], [47.0, 3032.0], [46.0, 2568.0], [49.0, 3004.0], [48.0, 2546.0], [50.0, 2538.0], [53.0, 2534.0], [52.0, 3037.0], [57.0, 2529.0], [56.0, 2797.6666666666665], [59.0, 2728.0], [61.0, 2522.0], [60.0, 2524.0], [62.0, 2877.0], [67.0, 2845.0], [66.0, 2543.0], [65.0, 2520.0], [64.0, 3063.0], [71.0, 2503.5], [69.0, 2508.0], [68.0, 3270.0], [75.0, 3028.0], [79.0, 2513.5], [77.0, 2532.0], [76.0, 3053.5], [83.0, 2998.5], [81.0, 3204.0], [80.0, 2489.0], [87.0, 3136.0], [85.0, 2997.0], [84.0, 3243.0], [89.0, 3160.0], [88.0, 2975.0], [94.0, 2598.0], [93.0, 2466.0], [92.0, 2675.0], [99.0, 2953.5], [97.0, 3020.6666666666665], [102.0, 3224.0], [101.0, 2947.5], [107.0, 3095.0], [106.0, 3217.5], [104.0, 3035.0], [111.0, 2842.0], [110.0, 3040.0], [109.0, 2793.0], [108.0, 2827.0], [115.0, 2729.0], [114.0, 2715.0], [113.0, 3030.0], [112.0, 3136.0], [119.0, 2850.0], [118.0, 2846.5], [116.0, 2815.0], [122.0, 3075.0], [121.0, 2360.0], [120.0, 2871.0], [125.0, 3070.0], [124.0, 3040.0], [134.0, 2981.0], [133.0, 2964.0], [131.0, 2787.0], [130.0, 3092.0], [129.0, 2802.0], [128.0, 2687.6666666666665], [143.0, 1968.0], [142.0, 2966.0], [141.0, 2704.0], [140.0, 2559.0], [139.0, 2908.0], [138.0, 2685.0], [137.0, 2667.0], [136.0, 2643.0], [151.0, 1335.3333333333333], [148.0, 2708.0], [147.0, 2857.0], [146.0, 2874.0], [145.0, 2159.0], [144.0, 2623.0], [158.0, 2421.0], [157.0, 967.0], [156.0, 1754.5], [154.0, 2869.0], [153.0, 895.0], [152.0, 2134.0], [166.0, 965.0], [165.0, 2615.0], [164.0, 2849.0], [163.0, 577.0], [162.0, 578.0], [161.0, 2850.0], [160.0, 1236.5], [175.0, 2827.0], [174.0, 2356.0], [173.0, 1857.0], [171.0, 520.5], [170.0, 2834.0], [168.0, 1970.5], [183.0, 2747.0], [182.0, 2809.0], [181.0, 2551.5], [179.0, 2473.0], [177.0, 2746.0], [176.0, 2192.0], [191.0, 2829.0], [189.0, 2460.0], [188.0, 2230.3333333333335], [186.0, 2830.0], [184.0, 500.0], [199.0, 2347.0], [198.0, 2819.5], [196.0, 360.0], [195.0, 1191.0], [192.0, 390.0], [207.0, 2816.0], [206.0, 1422.0], [205.0, 2809.0], [203.0, 2740.5], [201.0, 2748.0], [200.0, 2625.0], [215.0, 2548.6666666666665], [212.0, 232.0], [211.0, 1756.0], [210.0, 1412.5], [208.0, 1747.0], [223.0, 2791.0], [221.0, 2797.0], [219.0, 2610.0], [218.0, 2417.0], [217.0, 2737.0], [216.0, 485.0], [231.0, 2563.5], [227.0, 2152.0], [226.0, 2514.0], [225.0, 2326.0], [224.0, 2472.0], [238.0, 2523.0], [236.0, 2284.0], [234.0, 234.0], [233.0, 2556.0], [232.0, 740.0], [247.0, 2767.0], [246.0, 2723.0], [245.0, 2770.0], [244.0, 2332.5], [242.0, 2362.0], [241.0, 1870.75], [255.0, 2439.0], [254.0, 2664.0], [253.0, 2334.5], [251.0, 2758.0], [250.0, 2218.0], [249.0, 2254.5], [259.0, 2632.0], [270.0, 27.0], [271.0, 1731.0], [269.0, 1688.75], [258.0, 2533.0], [257.0, 2416.0], [256.0, 2335.0], [265.0, 1736.0], [264.0, 1738.0], [263.0, 2709.0], [262.0, 31.0], [261.0, 1747.0], [260.0, 2731.0], [286.0, 1134.0], [287.0, 1704.0], [284.0, 29.0], [275.0, 26.0], [274.0, 2710.0], [273.0, 2554.0], [272.0, 26.0], [283.0, 29.0], [282.0, 1295.0], [281.0, 29.0], [279.0, 1723.0], [277.0, 27.0], [276.0, 25.0], [302.0, 26.0], [303.0, 2655.0], [301.0, 25.0], [300.0, 27.0], [299.0, 1685.0], [298.0, 1686.0], [297.0, 31.0], [296.0, 38.0], [295.0, 865.0], [290.0, 39.0], [288.0, 1702.0], [293.0, 1694.0], [292.0, 37.0], [317.0, 28.0], [319.0, 29.0], [316.0, 27.0], [307.0, 39.0], [306.0, 33.0], [305.0, 29.5], [315.0, 28.0], [314.0, 30.0], [313.0, 1659.0], [312.0, 1324.0], [310.0, 1668.0], [308.0, 31.0], [334.0, 26.0], [335.0, 1866.0], [333.0, 1869.0], [332.0, 25.0], [331.0, 1760.0], [329.0, 1618.0], [328.0, 26.0], [327.0, 1628.0], [321.0, 1649.0], [320.0, 27.0], [323.0, 1638.0], [322.0, 28.0], [325.0, 1631.0], [324.0, 2197.0], [350.0, 1308.0], [351.0, 2367.0], [348.0, 41.0], [339.0, 1865.0], [338.0, 797.0], [347.0, 39.0], [346.0, 41.0], [345.0, 2204.0], [344.0, 1580.0], [343.0, 1220.5], [341.0, 2235.0], [340.0, 39.0], [365.0, 1800.0], [366.0, 2158.0], [364.0, 2533.0], [355.0, 27.0], [354.0, 2392.0], [363.0, 1474.0], [362.0, 34.5], [361.0, 38.0], [360.0, 40.0], [358.0, 39.0], [357.0, 2147.0], [356.0, 2262.0], [381.0, 2495.0], [378.0, 2242.0], [377.0, 2427.0], [376.0, 2350.0], [373.0, 2374.0], [372.0, 2222.0], [371.0, 1147.0], [369.0, 1276.0], [368.0, 2378.0], [398.0, 26.0], [399.0, 27.0], [397.0, 2455.0], [396.0, 2453.5], [394.0, 2273.0], [393.0, 31.0], [392.0, 33.0], [391.0, 2362.0], [387.0, 2054.875], [384.0, 2202.0], [389.0, 1160.5], [414.0, 2430.0], [415.0, 2253.0], [413.0, 2389.5], [403.0, 2448.0], [402.0, 2339.0], [401.0, 2451.0], [400.0, 2064.0], [411.0, 2290.0], [410.0, 33.0], [409.0, 2420.0], [408.0, 2262.0], [407.0, 2118.0], [406.0, 2189.0], [405.0, 2406.0], [419.0, 2418.0], [431.0, 1304.6666666666667], [429.0, 2359.0], [426.0, 2415.0], [425.0, 2195.6666666666665], [422.0, 1772.0], [421.0, 2417.5], [418.0, 27.0], [417.0, 2138.0], [416.0, 2131.0], [447.0, 1390.6666666666667], [445.0, 2247.0], [443.0, 1687.75], [441.0, 1755.0], [438.0, 841.6], [434.0, 2400.5], [432.0, 2352.0], [461.0, 2074.0], [463.0, 975.0], [460.0, 1681.0], [451.0, 1878.0], [449.0, 2386.0], [448.0, 2172.0], [459.0, 1215.5], [457.0, 1329.0], [456.0, 1346.0], [454.0, 2270.0], [453.0, 2383.0], [452.0, 2096.0], [479.0, 29.0], [478.0, 1170.5], [476.0, 833.0], [475.0, 733.0], [472.0, 2204.0], [470.0, 2063.857142857143], [464.0, 1634.0], [494.0, 2169.0], [495.0, 1819.6666666666667], [492.0, 26.0], [482.0, 2322.0], [481.0, 1912.0], [480.0, 932.0], [490.0, 31.0], [489.0, 2306.0], [488.0, 1843.0], [487.0, 27.0], [486.0, 1063.0], [484.0, 2174.5], [509.0, 456.5], [510.0, 1964.0], [508.0, 2291.0], [506.0, 28.0], [505.0, 911.0], [504.0, 1976.0], [503.0, 1522.0], [501.0, 2035.5], [499.0, 866.0], [498.0, 2153.5], [497.0, 2026.0], [537.0, 1617.0], [529.0, 785.0], [542.0, 1373.0], [540.0, 2275.0], [539.0, 1233.3333333333333], [527.0, 2272.0], [513.0, 2291.0], [512.0, 1976.0], [515.0, 1860.0], [514.0, 1993.0], [517.0, 32.0], [516.0, 2083.0], [526.0, 2106.5], [524.0, 1361.6666666666665], [523.0, 2179.0], [522.0, 1897.0], [521.0, 2274.0], [520.0, 1977.0], [534.0, 1007.6666666666666], [532.0, 38.0], [531.0, 1977.0], [528.0, 1975.0], [571.0, 1816.0], [574.0, 2229.0], [575.0, 2225.0], [573.0, 1755.0], [570.0, 23.0], [569.0, 28.0], [568.0, 1165.0], [550.0, 1709.5], [548.0, 1829.0], [547.0, 55.0], [546.0, 730.0], [545.0, 35.0], [544.0, 1069.5], [559.0, 1918.0], [558.0, 2186.0], [557.0, 33.0], [556.0, 1046.0], [555.0, 2234.0], [553.0, 2227.0], [552.0, 40.5], [566.0, 1352.3333333333333], [563.0, 892.25], [601.0, 2026.5], [605.0, 2169.0], [607.0, 1107.0], [593.0, 34.5], [604.0, 2031.0], [603.0, 1905.0], [602.0, 2115.0], [591.0, 2001.0], [576.0, 2131.0], [578.0, 1789.0], [577.0, 1982.0], [581.0, 2206.0], [580.0, 1787.0], [583.0, 27.0], [582.0, 2218.0], [590.0, 1099.5], [588.0, 38.0], [587.0, 40.0], [586.0, 42.0], [585.0, 1566.0], [584.0, 49.0], [599.0, 1034.5], [597.0, 2034.0], [596.0, 872.0], [594.0, 34.0], [636.0, 2000.0], [638.0, 1869.0], [625.0, 1796.0], [624.0, 1802.0], [635.0, 2145.0], [634.0, 2147.0], [633.0, 2032.0], [632.0, 1088.0], [623.0, 1917.3333333333333], [609.0, 2185.0], [611.0, 1705.0], [610.0, 1784.5], [615.0, 1100.5], [614.0, 1098.0], [620.0, 2109.0], [618.0, 869.5], [616.0, 1698.0], [630.0, 1850.0], [629.0, 25.0], [628.0, 1016.0], [626.0, 2160.0], [667.0, 1859.0], [659.0, 1235.0], [669.0, 2123.0], [671.0, 2122.0], [657.0, 1805.0], [668.0, 1814.0], [665.0, 1751.5], [647.0, 2028.3333333333333], [646.0, 1710.0], [644.0, 1933.3333333333333], [641.0, 2140.0], [640.0, 1981.0], [655.0, 1609.0], [653.0, 1978.5], [651.0, 1243.5], [650.0, 1748.0], [649.0, 27.0], [663.0, 1860.0], [662.0, 1778.0], [661.0, 1932.0], [701.0, 1723.0], [703.0, 1979.0], [691.0, 1666.0], [688.0, 1741.0], [700.0, 1981.0], [699.0, 31.5], [697.0, 30.0], [696.0, 30.0], [685.0, 1067.5], [674.0, 1920.0], [673.0, 1349.0], [677.0, 947.0], [675.0, 2110.0], [679.0, 2110.0], [678.0, 1973.0], [683.0, 1317.0], [682.0, 1806.0], [680.0, 1704.0], [695.0, 33.0], [694.0, 35.0], [693.0, 849.0], [692.0, 40.0], [728.0, 1043.5], [734.0, 1836.0], [735.0, 68.0], [721.0, 753.0], [720.0, 1924.0], [732.0, 1686.0], [731.0, 29.0], [729.0, 1621.0], [719.0, 46.0], [705.0, 1864.5], [707.0, 1881.0], [706.0, 2082.0], [711.0, 870.5], [709.0, 1874.5], [718.0, 1929.0], [717.0, 1818.0], [716.0, 955.0], [714.0, 1586.0], [713.0, 2076.0], [727.0, 33.0], [725.0, 34.0], [724.0, 1046.0], [722.0, 37.0], [760.0, 1325.5], [764.0, 665.0], [767.0, 661.0], [754.0, 68.0], [752.0, 445.0], [766.0, 1958.0], [765.0, 1774.0], [763.0, 666.0], [762.0, 44.0], [761.0, 1553.0], [751.0, 59.0], [739.0, 1555.0], [737.0, 25.0], [741.0, 1861.0], [740.0, 470.0], [743.0, 61.0], [742.0, 64.0], [750.0, 1589.5], [748.0, 1594.0], [749.0, 81.0], [747.0, 1738.0], [745.0, 1591.0], [744.0, 63.0], [758.0, 1007.5], [757.0, 1650.3333333333333], [793.0, 1733.0], [787.0, 1128.0], [796.0, 585.0], [797.0, 1690.0], [785.0, 1163.0], [795.0, 1718.0], [792.0, 1698.0], [775.0, 1831.0], [773.0, 943.5], [771.0, 1936.0], [770.0, 1780.0], [769.0, 1742.0], [768.0, 1770.0], [782.0, 1803.5], [780.0, 369.0], [779.0, 1501.0], [778.0, 375.0], [777.0, 34.0], [776.0, 1764.0], [791.0, 33.0], [790.0, 360.0], [788.0, 35.0], [826.0, 1460.0], [830.0, 30.0], [831.0, 32.0], [816.0, 816.0], [820.0, 766.0], [818.0, 1620.0], [829.0, 32.0], [828.0, 1730.0], [827.0, 1731.0], [824.0, 1873.5], [807.0, 1635.5], [805.0, 325.0], [804.0, 927.5], [802.0, 1738.0], [801.0, 580.0], [800.0, 314.0], [814.0, 1561.0], [813.0, 1599.5], [811.0, 325.0], [810.0, 1900.0], [809.0, 1805.0], [808.0, 1821.0], [823.0, 1511.0], [821.0, 1552.0], [862.0, 842.0], [863.0, 147.0], [849.0, 1579.0], [848.0, 1737.0], [851.0, 36.0], [850.0, 1727.0], [853.0, 1509.0], [852.0, 1822.0], [860.0, 1789.0], [859.0, 1804.0], [858.0, 1599.0], [857.0, 1821.0], [856.0, 1754.0], [838.0, 1654.0], [836.0, 1476.5], [834.0, 1548.0], [833.0, 1642.5], [847.0, 1790.0], [846.0, 844.2500000000001], [843.0, 1845.0], [841.0, 1493.0], [840.0, 1730.0], [855.0, 30.0], [854.0, 1403.0], [889.0, 1374.0], [894.0, 1653.0], [895.0, 1759.0], [880.0, 27.0], [882.0, 1495.0], [881.0, 25.0], [884.0, 1783.0], [883.0, 1526.0], [893.0, 1618.0], [892.0, 25.0], [891.0, 1560.5], [888.0, 98.0], [871.0, 1483.0], [870.0, 1602.0], [868.0, 1678.5], [866.0, 1814.0], [865.0, 28.0], [879.0, 164.0], [878.0, 1604.5], [876.0, 1745.0], [874.0, 1606.0], [872.0, 1612.5], [887.0, 1358.0], [885.0, 1701.0], [921.0, 949.0], [914.0, 1055.0], [925.0, 701.0], [926.0, 1672.0], [913.0, 1710.0], [912.0, 31.0], [922.0, 1686.0], [920.0, 1485.5], [903.0, 1554.5], [901.0, 1586.0], [898.0, 784.0], [896.0, 1369.0], [911.0, 1703.0], [910.0, 1319.0], [909.0, 35.0], [908.0, 1544.0], [906.0, 1689.0], [905.0, 1362.0], [904.0, 1349.0], [918.0, 1517.5], [916.0, 1563.0], [915.0, 1534.0], [953.0, 31.0], [958.0, 597.5], [959.0, 1196.0], [945.0, 1633.0], [944.0, 1474.0], [947.0, 1438.0], [946.0, 631.0], [957.0, 1552.0], [956.0, 1059.3333333333333], [954.0, 1285.0], [943.0, 1626.5], [930.0, 1603.0], [928.0, 1479.5], [933.0, 1657.0], [932.0, 1592.5], [935.0, 37.0], [934.0, 1575.5], [941.0, 1378.0], [940.0, 1645.0], [939.0, 1644.0], [938.0, 1164.0], [937.0, 1639.0], [936.0, 1359.0], [951.0, 33.0], [950.0, 1600.0], [949.0, 1281.0], [948.0, 34.0], [980.0, 1242.0], [988.0, 1101.4166666666667], [989.0, 1328.0], [977.0, 1213.0], [976.0, 1534.0], [987.0, 1481.0], [986.0, 1230.0], [985.0, 761.0], [961.0, 1215.0], [960.0, 1323.0], [975.0, 1264.75], [973.0, 1038.6666666666667], [970.0, 50.0], [968.0, 51.0], [983.0, 1054.0], [982.0, 24.0], [981.0, 1420.5], [979.0, 1185.0], [978.0, 41.0], [1.0, 2929.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}, {"data": [[501.012, 1639.5230000000006]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 989.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8150.0, "minX": 1.7563686E12, "maxY": 19616.666666666668, "series": [{"data": [[1.7563686E12, 19616.666666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7563686E12, 8150.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563686E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1639.5230000000006, "minX": 1.7563686E12, "maxY": 1639.5230000000006, "series": [{"data": [[1.7563686E12, 1639.5230000000006]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563686E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1639.4419999999989, "minX": 1.7563686E12, "maxY": 1639.4419999999989, "series": [{"data": [[1.7563686E12, 1639.4419999999989]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563686E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1512.111, "minX": 1.7563686E12, "maxY": 1512.111, "series": [{"data": [[1.7563686E12, 1512.111]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563686E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.7563686E12, "maxY": 3363.0, "series": [{"data": [[1.7563686E12, 3363.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7563686E12, 2841.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7563686E12, 3279.9]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7563686E12, 3039.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7563686E12, 23.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7563686E12, 1800.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563686E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1633.0, "minX": 393.0, "maxY": 2508.0, "series": [{"data": [[607.0, 1633.0], [393.0, 2508.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 607.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1633.0, "minX": 393.0, "maxY": 2508.0, "series": [{"data": [[607.0, 1633.0], [393.0, 2508.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 607.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7563686E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7563686E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563686E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7563686E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7563686E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7563686E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7563686E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7563686E12, 16.666666666666668]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563686E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7563686E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7563686E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7563686E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

