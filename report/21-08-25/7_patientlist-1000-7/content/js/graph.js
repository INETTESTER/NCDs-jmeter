/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 30017.0, "minX": 0.0, "maxY": 32942.0, "series": [{"data": [[0.0, 30017.0], [0.1, 30018.0], [0.2, 30018.0], [0.3, 30018.0], [0.4, 30018.0], [0.5, 30019.0], [0.6, 30019.0], [0.7, 30019.0], [0.8, 30019.0], [0.9, 30019.0], [1.0, 30019.0], [1.1, 30019.0], [1.2, 30019.0], [1.3, 30019.0], [1.4, 30020.0], [1.5, 30020.0], [1.6, 30020.0], [1.7, 30020.0], [1.8, 30020.0], [1.9, 30020.0], [2.0, 30020.0], [2.1, 30020.0], [2.2, 30020.0], [2.3, 30020.0], [2.4, 30021.0], [2.5, 30021.0], [2.6, 30021.0], [2.7, 30021.0], [2.8, 30021.0], [2.9, 30021.0], [3.0, 30021.0], [3.1, 30021.0], [3.2, 30021.0], [3.3, 30021.0], [3.4, 30021.0], [3.5, 30021.0], [3.6, 30022.0], [3.7, 30022.0], [3.8, 30022.0], [3.9, 30022.0], [4.0, 30022.0], [4.1, 30022.0], [4.2, 30022.0], [4.3, 30022.0], [4.4, 30022.0], [4.5, 30022.0], [4.6, 30022.0], [4.7, 30022.0], [4.8, 30022.0], [4.9, 30022.0], [5.0, 30022.0], [5.1, 30022.0], [5.2, 30022.0], [5.3, 30023.0], [5.4, 30023.0], [5.5, 30023.0], [5.6, 30023.0], [5.7, 30023.0], [5.8, 30023.0], [5.9, 30023.0], [6.0, 30023.0], [6.1, 30023.0], [6.2, 30023.0], [6.3, 30023.0], [6.4, 30023.0], [6.5, 30023.0], [6.6, 30023.0], [6.7, 30023.0], [6.8, 30023.0], [6.9, 30024.0], [7.0, 30024.0], [7.1, 30024.0], [7.2, 30024.0], [7.3, 30024.0], [7.4, 30025.0], [7.5, 30025.0], [7.6, 30025.0], [7.7, 30025.0], [7.8, 30025.0], [7.9, 30025.0], [8.0, 30025.0], [8.1, 30025.0], [8.2, 30025.0], [8.3, 30025.0], [8.4, 30026.0], [8.5, 30026.0], [8.6, 30026.0], [8.7, 30026.0], [8.8, 30026.0], [8.9, 30026.0], [9.0, 30027.0], [9.1, 30027.0], [9.2, 30027.0], [9.3, 30027.0], [9.4, 30027.0], [9.5, 30027.0], [9.6, 30027.0], [9.7, 30028.0], [9.8, 30028.0], [9.9, 30028.0], [10.0, 30029.0], [10.1, 30029.0], [10.2, 30029.0], [10.3, 30029.0], [10.4, 30030.0], [10.5, 30030.0], [10.6, 30031.0], [10.7, 30031.0], [10.8, 30032.0], [10.9, 30032.0], [11.0, 30033.0], [11.1, 30034.0], [11.2, 30035.0], [11.3, 30038.0], [11.4, 30038.0], [11.5, 30039.0], [11.6, 30039.0], [11.7, 30043.0], [11.8, 30044.0], [11.9, 30047.0], [12.0, 30049.0], [12.1, 30052.0], [12.2, 30053.0], [12.3, 30055.0], [12.4, 30056.0], [12.5, 30056.0], [12.6, 30060.0], [12.7, 30061.0], [12.8, 30061.0], [12.9, 30065.0], [13.0, 30066.0], [13.1, 30068.0], [13.2, 30072.0], [13.3, 30074.0], [13.4, 30074.0], [13.5, 30074.0], [13.6, 30076.0], [13.7, 30076.0], [13.8, 30080.0], [13.9, 30082.0], [14.0, 30084.0], [14.1, 30091.0], [14.2, 30102.0], [14.3, 30104.0], [14.4, 30107.0], [14.5, 30107.0], [14.6, 30111.0], [14.7, 30115.0], [14.8, 30115.0], [14.9, 30116.0], [15.0, 30118.0], [15.1, 30121.0], [15.2, 30130.0], [15.3, 30138.0], [15.4, 30141.0], [15.5, 30146.0], [15.6, 30148.0], [15.7, 30149.0], [15.8, 30161.0], [15.9, 30184.0], [16.0, 30195.0], [16.1, 30197.0], [16.2, 30197.0], [16.3, 30206.0], [16.4, 30214.0], [16.5, 30224.0], [16.6, 30226.0], [16.7, 30228.0], [16.8, 30249.0], [16.9, 30277.0], [17.0, 30297.0], [17.1, 30311.0], [17.2, 30315.0], [17.3, 30349.0], [17.4, 30352.0], [17.5, 30353.0], [17.6, 30357.0], [17.7, 30357.0], [17.8, 30358.0], [17.9, 30359.0], [18.0, 30361.0], [18.1, 30372.0], [18.2, 30377.0], [18.3, 30378.0], [18.4, 30378.0], [18.5, 30385.0], [18.6, 30397.0], [18.7, 30402.0], [18.8, 30404.0], [18.9, 30407.0], [19.0, 30421.0], [19.1, 30431.0], [19.2, 30432.0], [19.3, 30438.0], [19.4, 30448.0], [19.5, 30450.0], [19.6, 30474.0], [19.7, 30476.0], [19.8, 30478.0], [19.9, 30484.0], [20.0, 30496.0], [20.1, 30498.0], [20.2, 30502.0], [20.3, 30512.0], [20.4, 30522.0], [20.5, 30528.0], [20.6, 30582.0], [20.7, 30595.0], [20.8, 30599.0], [20.9, 30601.0], [21.0, 30617.0], [21.1, 30618.0], [21.2, 30636.0], [21.3, 30653.0], [21.4, 30677.0], [21.5, 30691.0], [21.6, 30706.0], [21.7, 30742.0], [21.8, 30753.0], [21.9, 30755.0], [22.0, 30758.0], [22.1, 30784.0], [22.2, 30802.0], [22.3, 30813.0], [22.4, 30817.0], [22.5, 30828.0], [22.6, 30830.0], [22.7, 30833.0], [22.8, 30833.0], [22.9, 30851.0], [23.0, 30851.0], [23.1, 30852.0], [23.2, 30855.0], [23.3, 30864.0], [23.4, 30867.0], [23.5, 30883.0], [23.6, 30886.0], [23.7, 30900.0], [23.8, 30904.0], [23.9, 30905.0], [24.0, 30907.0], [24.1, 30907.0], [24.2, 30912.0], [24.3, 30916.0], [24.4, 30921.0], [24.5, 30932.0], [24.6, 30936.0], [24.7, 30951.0], [24.8, 30951.0], [24.9, 30955.0], [25.0, 30960.0], [25.1, 30962.0], [25.2, 30962.0], [25.3, 30982.0], [25.4, 30985.0], [25.5, 30998.0], [25.6, 30998.0], [25.7, 31004.0], [25.8, 31007.0], [25.9, 31012.0], [26.0, 31014.0], [26.1, 31015.0], [26.2, 31015.0], [26.3, 31016.0], [26.4, 31024.0], [26.5, 31026.0], [26.6, 31027.0], [26.7, 31030.0], [26.8, 31030.0], [26.9, 31044.0], [27.0, 31054.0], [27.1, 31059.0], [27.2, 31065.0], [27.3, 31072.0], [27.4, 31074.0], [27.5, 31076.0], [27.6, 31078.0], [27.7, 31080.0], [27.8, 31083.0], [27.9, 31085.0], [28.0, 31086.0], [28.1, 31098.0], [28.2, 31099.0], [28.3, 31103.0], [28.4, 31107.0], [28.5, 31107.0], [28.6, 31127.0], [28.7, 31145.0], [28.8, 31147.0], [28.9, 31167.0], [29.0, 31170.0], [29.1, 31180.0], [29.2, 31183.0], [29.3, 31185.0], [29.4, 31192.0], [29.5, 31195.0], [29.6, 31202.0], [29.7, 31204.0], [29.8, 31213.0], [29.9, 31213.0], [30.0, 31213.0], [30.1, 31220.0], [30.2, 31224.0], [30.3, 31226.0], [30.4, 31227.0], [30.5, 31230.0], [30.6, 31231.0], [30.7, 31234.0], [30.8, 31235.0], [30.9, 31238.0], [31.0, 31240.0], [31.1, 31241.0], [31.2, 31244.0], [31.3, 31246.0], [31.4, 31248.0], [31.5, 31248.0], [31.6, 31248.0], [31.7, 31252.0], [31.8, 31254.0], [31.9, 31258.0], [32.0, 31260.0], [32.1, 31261.0], [32.2, 31264.0], [32.3, 31264.0], [32.4, 31266.0], [32.5, 31268.0], [32.6, 31269.0], [32.7, 31270.0], [32.8, 31271.0], [32.9, 31272.0], [33.0, 31273.0], [33.1, 31276.0], [33.2, 31277.0], [33.3, 31278.0], [33.4, 31286.0], [33.5, 31289.0], [33.6, 31290.0], [33.7, 31290.0], [33.8, 31295.0], [33.9, 31299.0], [34.0, 31303.0], [34.1, 31306.0], [34.2, 31307.0], [34.3, 31318.0], [34.4, 31320.0], [34.5, 31321.0], [34.6, 31326.0], [34.7, 31327.0], [34.8, 31329.0], [34.9, 31329.0], [35.0, 31329.0], [35.1, 31332.0], [35.2, 31333.0], [35.3, 31334.0], [35.4, 31340.0], [35.5, 31347.0], [35.6, 31350.0], [35.7, 31354.0], [35.8, 31356.0], [35.9, 31358.0], [36.0, 31358.0], [36.1, 31364.0], [36.2, 31366.0], [36.3, 31367.0], [36.4, 31367.0], [36.5, 31368.0], [36.6, 31369.0], [36.7, 31371.0], [36.8, 31372.0], [36.9, 31376.0], [37.0, 31380.0], [37.1, 31389.0], [37.2, 31399.0], [37.3, 31409.0], [37.4, 31409.0], [37.5, 31409.0], [37.6, 31410.0], [37.7, 31411.0], [37.8, 31411.0], [37.9, 31420.0], [38.0, 31422.0], [38.1, 31425.0], [38.2, 31427.0], [38.3, 31433.0], [38.4, 31433.0], [38.5, 31441.0], [38.6, 31442.0], [38.7, 31442.0], [38.8, 31444.0], [38.9, 31445.0], [39.0, 31447.0], [39.1, 31451.0], [39.2, 31451.0], [39.3, 31451.0], [39.4, 31464.0], [39.5, 31465.0], [39.6, 31466.0], [39.7, 31471.0], [39.8, 31471.0], [39.9, 31473.0], [40.0, 31473.0], [40.1, 31474.0], [40.2, 31478.0], [40.3, 31485.0], [40.4, 31485.0], [40.5, 31486.0], [40.6, 31487.0], [40.7, 31491.0], [40.8, 31493.0], [40.9, 31497.0], [41.0, 31501.0], [41.1, 31503.0], [41.2, 31519.0], [41.3, 31522.0], [41.4, 31528.0], [41.5, 31539.0], [41.6, 31540.0], [41.7, 31546.0], [41.8, 31546.0], [41.9, 31548.0], [42.0, 31550.0], [42.1, 31555.0], [42.2, 31563.0], [42.3, 31564.0], [42.4, 31567.0], [42.5, 31577.0], [42.6, 31577.0], [42.7, 31577.0], [42.8, 31578.0], [42.9, 31584.0], [43.0, 31586.0], [43.1, 31590.0], [43.2, 31591.0], [43.3, 31592.0], [43.4, 31596.0], [43.5, 31596.0], [43.6, 31596.0], [43.7, 31604.0], [43.8, 31608.0], [43.9, 31611.0], [44.0, 31613.0], [44.1, 31620.0], [44.2, 31622.0], [44.3, 31622.0], [44.4, 31627.0], [44.5, 31628.0], [44.6, 31633.0], [44.7, 31633.0], [44.8, 31636.0], [44.9, 31637.0], [45.0, 31639.0], [45.1, 31647.0], [45.2, 31664.0], [45.3, 31670.0], [45.4, 31685.0], [45.5, 31685.0], [45.6, 31687.0], [45.7, 31695.0], [45.8, 31696.0], [45.9, 31699.0], [46.0, 31711.0], [46.1, 31713.0], [46.2, 31715.0], [46.3, 31719.0], [46.4, 31720.0], [46.5, 31729.0], [46.6, 31738.0], [46.7, 31740.0], [46.8, 31742.0], [46.9, 31748.0], [47.0, 31751.0], [47.1, 31754.0], [47.2, 31755.0], [47.3, 31759.0], [47.4, 31761.0], [47.5, 31765.0], [47.6, 31765.0], [47.7, 31768.0], [47.8, 31770.0], [47.9, 31775.0], [48.0, 31777.0], [48.1, 31777.0], [48.2, 31790.0], [48.3, 31790.0], [48.4, 31791.0], [48.5, 31799.0], [48.6, 31803.0], [48.7, 31806.0], [48.8, 31809.0], [48.9, 31810.0], [49.0, 31812.0], [49.1, 31815.0], [49.2, 31817.0], [49.3, 31818.0], [49.4, 31819.0], [49.5, 31820.0], [49.6, 31824.0], [49.7, 31829.0], [49.8, 31830.0], [49.9, 31830.0], [50.0, 31830.0], [50.1, 31831.0], [50.2, 31834.0], [50.3, 31837.0], [50.4, 31844.0], [50.5, 31848.0], [50.6, 31853.0], [50.7, 31854.0], [50.8, 31854.0], [50.9, 31858.0], [51.0, 31859.0], [51.1, 31859.0], [51.2, 31861.0], [51.3, 31863.0], [51.4, 31863.0], [51.5, 31868.0], [51.6, 31868.0], [51.7, 31869.0], [51.8, 31873.0], [51.9, 31878.0], [52.0, 31879.0], [52.1, 31881.0], [52.2, 31881.0], [52.3, 31883.0], [52.4, 31884.0], [52.5, 31889.0], [52.6, 31897.0], [52.7, 31899.0], [52.8, 31901.0], [52.9, 31908.0], [53.0, 31909.0], [53.1, 31911.0], [53.2, 31911.0], [53.3, 31914.0], [53.4, 31915.0], [53.5, 31942.0], [53.6, 31945.0], [53.7, 31949.0], [53.8, 31952.0], [53.9, 31955.0], [54.0, 31958.0], [54.1, 31960.0], [54.2, 31966.0], [54.3, 31967.0], [54.4, 31969.0], [54.5, 31971.0], [54.6, 31975.0], [54.7, 31976.0], [54.8, 31977.0], [54.9, 31985.0], [55.0, 31990.0], [55.1, 31993.0], [55.2, 31998.0], [55.3, 31998.0], [55.4, 31998.0], [55.5, 31999.0], [55.6, 32001.0], [55.7, 32002.0], [55.8, 32002.0], [55.9, 32002.0], [56.0, 32004.0], [56.1, 32007.0], [56.2, 32008.0], [56.3, 32009.0], [56.4, 32015.0], [56.5, 32017.0], [56.6, 32017.0], [56.7, 32028.0], [56.8, 32028.0], [56.9, 32036.0], [57.0, 32038.0], [57.1, 32038.0], [57.2, 32039.0], [57.3, 32039.0], [57.4, 32042.0], [57.5, 32043.0], [57.6, 32044.0], [57.7, 32044.0], [57.8, 32045.0], [57.9, 32047.0], [58.0, 32051.0], [58.1, 32053.0], [58.2, 32055.0], [58.3, 32057.0], [58.4, 32059.0], [58.5, 32061.0], [58.6, 32067.0], [58.7, 32069.0], [58.8, 32070.0], [58.9, 32070.0], [59.0, 32071.0], [59.1, 32072.0], [59.2, 32074.0], [59.3, 32074.0], [59.4, 32075.0], [59.5, 32075.0], [59.6, 32077.0], [59.7, 32079.0], [59.8, 32080.0], [59.9, 32083.0], [60.0, 32086.0], [60.1, 32086.0], [60.2, 32087.0], [60.3, 32087.0], [60.4, 32089.0], [60.5, 32092.0], [60.6, 32093.0], [60.7, 32093.0], [60.8, 32094.0], [60.9, 32094.0], [61.0, 32095.0], [61.1, 32100.0], [61.2, 32100.0], [61.3, 32102.0], [61.4, 32103.0], [61.5, 32105.0], [61.6, 32106.0], [61.7, 32106.0], [61.8, 32106.0], [61.9, 32110.0], [62.0, 32110.0], [62.1, 32112.0], [62.2, 32112.0], [62.3, 32113.0], [62.4, 32114.0], [62.5, 32114.0], [62.6, 32114.0], [62.7, 32115.0], [62.8, 32116.0], [62.9, 32116.0], [63.0, 32117.0], [63.1, 32118.0], [63.2, 32119.0], [63.3, 32120.0], [63.4, 32120.0], [63.5, 32121.0], [63.6, 32122.0], [63.7, 32123.0], [63.8, 32127.0], [63.9, 32129.0], [64.0, 32131.0], [64.1, 32131.0], [64.2, 32133.0], [64.3, 32137.0], [64.4, 32137.0], [64.5, 32138.0], [64.6, 32138.0], [64.7, 32139.0], [64.8, 32139.0], [64.9, 32140.0], [65.0, 32140.0], [65.1, 32141.0], [65.2, 32141.0], [65.3, 32142.0], [65.4, 32146.0], [65.5, 32147.0], [65.6, 32148.0], [65.7, 32149.0], [65.8, 32149.0], [65.9, 32150.0], [66.0, 32154.0], [66.1, 32155.0], [66.2, 32158.0], [66.3, 32159.0], [66.4, 32159.0], [66.5, 32161.0], [66.6, 32164.0], [66.7, 32164.0], [66.8, 32164.0], [66.9, 32166.0], [67.0, 32169.0], [67.1, 32171.0], [67.2, 32174.0], [67.3, 32174.0], [67.4, 32174.0], [67.5, 32174.0], [67.6, 32177.0], [67.7, 32187.0], [67.8, 32188.0], [67.9, 32188.0], [68.0, 32190.0], [68.1, 32199.0], [68.2, 32200.0], [68.3, 32200.0], [68.4, 32202.0], [68.5, 32205.0], [68.6, 32206.0], [68.7, 32207.0], [68.8, 32211.0], [68.9, 32212.0], [69.0, 32214.0], [69.1, 32218.0], [69.2, 32220.0], [69.3, 32220.0], [69.4, 32223.0], [69.5, 32224.0], [69.6, 32225.0], [69.7, 32227.0], [69.8, 32228.0], [69.9, 32229.0], [70.0, 32229.0], [70.1, 32229.0], [70.2, 32230.0], [70.3, 32230.0], [70.4, 32234.0], [70.5, 32235.0], [70.6, 32238.0], [70.7, 32241.0], [70.8, 32245.0], [70.9, 32247.0], [71.0, 32248.0], [71.1, 32252.0], [71.2, 32253.0], [71.3, 32254.0], [71.4, 32254.0], [71.5, 32254.0], [71.6, 32259.0], [71.7, 32259.0], [71.8, 32260.0], [71.9, 32260.0], [72.0, 32262.0], [72.1, 32262.0], [72.2, 32263.0], [72.3, 32263.0], [72.4, 32263.0], [72.5, 32266.0], [72.6, 32269.0], [72.7, 32271.0], [72.8, 32272.0], [72.9, 32273.0], [73.0, 32278.0], [73.1, 32280.0], [73.2, 32281.0], [73.3, 32284.0], [73.4, 32291.0], [73.5, 32294.0], [73.6, 32297.0], [73.7, 32298.0], [73.8, 32301.0], [73.9, 32301.0], [74.0, 32302.0], [74.1, 32304.0], [74.2, 32305.0], [74.3, 32308.0], [74.4, 32308.0], [74.5, 32309.0], [74.6, 32311.0], [74.7, 32311.0], [74.8, 32312.0], [74.9, 32312.0], [75.0, 32313.0], [75.1, 32313.0], [75.2, 32313.0], [75.3, 32314.0], [75.4, 32315.0], [75.5, 32316.0], [75.6, 32320.0], [75.7, 32324.0], [75.8, 32327.0], [75.9, 32333.0], [76.0, 32339.0], [76.1, 32346.0], [76.2, 32346.0], [76.3, 32347.0], [76.4, 32356.0], [76.5, 32359.0], [76.6, 32359.0], [76.7, 32361.0], [76.8, 32361.0], [76.9, 32361.0], [77.0, 32363.0], [77.1, 32364.0], [77.2, 32366.0], [77.3, 32367.0], [77.4, 32372.0], [77.5, 32374.0], [77.6, 32376.0], [77.7, 32377.0], [77.8, 32385.0], [77.9, 32392.0], [78.0, 32394.0], [78.1, 32396.0], [78.2, 32399.0], [78.3, 32400.0], [78.4, 32400.0], [78.5, 32404.0], [78.6, 32407.0], [78.7, 32408.0], [78.8, 32408.0], [78.9, 32408.0], [79.0, 32410.0], [79.1, 32412.0], [79.2, 32412.0], [79.3, 32412.0], [79.4, 32416.0], [79.5, 32417.0], [79.6, 32418.0], [79.7, 32419.0], [79.8, 32419.0], [79.9, 32419.0], [80.0, 32419.0], [80.1, 32422.0], [80.2, 32425.0], [80.3, 32425.0], [80.4, 32428.0], [80.5, 32430.0], [80.6, 32431.0], [80.7, 32431.0], [80.8, 32434.0], [80.9, 32436.0], [81.0, 32436.0], [81.1, 32439.0], [81.2, 32441.0], [81.3, 32441.0], [81.4, 32445.0], [81.5, 32452.0], [81.6, 32454.0], [81.7, 32454.0], [81.8, 32456.0], [81.9, 32457.0], [82.0, 32459.0], [82.1, 32460.0], [82.2, 32462.0], [82.3, 32465.0], [82.4, 32468.0], [82.5, 32472.0], [82.6, 32474.0], [82.7, 32474.0], [82.8, 32476.0], [82.9, 32477.0], [83.0, 32477.0], [83.1, 32478.0], [83.2, 32479.0], [83.3, 32479.0], [83.4, 32479.0], [83.5, 32480.0], [83.6, 32481.0], [83.7, 32483.0], [83.8, 32483.0], [83.9, 32485.0], [84.0, 32496.0], [84.1, 32496.0], [84.2, 32499.0], [84.3, 32500.0], [84.4, 32500.0], [84.5, 32503.0], [84.6, 32503.0], [84.7, 32503.0], [84.8, 32506.0], [84.9, 32509.0], [85.0, 32509.0], [85.1, 32510.0], [85.2, 32511.0], [85.3, 32511.0], [85.4, 32514.0], [85.5, 32515.0], [85.6, 32515.0], [85.7, 32516.0], [85.8, 32519.0], [85.9, 32522.0], [86.0, 32522.0], [86.1, 32522.0], [86.2, 32522.0], [86.3, 32525.0], [86.4, 32527.0], [86.5, 32534.0], [86.6, 32541.0], [86.7, 32543.0], [86.8, 32544.0], [86.9, 32547.0], [87.0, 32547.0], [87.1, 32548.0], [87.2, 32550.0], [87.3, 32550.0], [87.4, 32556.0], [87.5, 32557.0], [87.6, 32562.0], [87.7, 32572.0], [87.8, 32573.0], [87.9, 32574.0], [88.0, 32575.0], [88.1, 32576.0], [88.2, 32578.0], [88.3, 32584.0], [88.4, 32585.0], [88.5, 32588.0], [88.6, 32592.0], [88.7, 32592.0], [88.8, 32596.0], [88.9, 32596.0], [89.0, 32597.0], [89.1, 32601.0], [89.2, 32604.0], [89.3, 32605.0], [89.4, 32607.0], [89.5, 32611.0], [89.6, 32612.0], [89.7, 32612.0], [89.8, 32619.0], [89.9, 32621.0], [90.0, 32625.0], [90.1, 32626.0], [90.2, 32631.0], [90.3, 32633.0], [90.4, 32637.0], [90.5, 32640.0], [90.6, 32644.0], [90.7, 32645.0], [90.8, 32650.0], [90.9, 32651.0], [91.0, 32656.0], [91.1, 32658.0], [91.2, 32660.0], [91.3, 32664.0], [91.4, 32666.0], [91.5, 32668.0], [91.6, 32668.0], [91.7, 32673.0], [91.8, 32676.0], [91.9, 32678.0], [92.0, 32682.0], [92.1, 32683.0], [92.2, 32684.0], [92.3, 32689.0], [92.4, 32692.0], [92.5, 32698.0], [92.6, 32702.0], [92.7, 32703.0], [92.8, 32706.0], [92.9, 32709.0], [93.0, 32711.0], [93.1, 32712.0], [93.2, 32715.0], [93.3, 32719.0], [93.4, 32719.0], [93.5, 32723.0], [93.6, 32725.0], [93.7, 32729.0], [93.8, 32732.0], [93.9, 32735.0], [94.0, 32738.0], [94.1, 32741.0], [94.2, 32742.0], [94.3, 32746.0], [94.4, 32747.0], [94.5, 32749.0], [94.6, 32750.0], [94.7, 32756.0], [94.8, 32757.0], [94.9, 32760.0], [95.0, 32760.0], [95.1, 32764.0], [95.2, 32764.0], [95.3, 32765.0], [95.4, 32766.0], [95.5, 32769.0], [95.6, 32770.0], [95.7, 32771.0], [95.8, 32773.0], [95.9, 32777.0], [96.0, 32782.0], [96.1, 32783.0], [96.2, 32784.0], [96.3, 32784.0], [96.4, 32789.0], [96.5, 32791.0], [96.6, 32794.0], [96.7, 32796.0], [96.8, 32803.0], [96.9, 32811.0], [97.0, 32814.0], [97.1, 32814.0], [97.2, 32817.0], [97.3, 32819.0], [97.4, 32823.0], [97.5, 32828.0], [97.6, 32829.0], [97.7, 32833.0], [97.8, 32834.0], [97.9, 32835.0], [98.0, 32840.0], [98.1, 32855.0], [98.2, 32856.0], [98.3, 32857.0], [98.4, 32858.0], [98.5, 32864.0], [98.6, 32866.0], [98.7, 32883.0], [98.8, 32898.0], [98.9, 32906.0], [99.0, 32911.0], [99.1, 32911.0], [99.2, 32913.0], [99.3, 32915.0], [99.4, 32916.0], [99.5, 32921.0], [99.6, 32922.0], [99.7, 32927.0], [99.8, 32939.0], [99.9, 32942.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 30000.0, "maxY": 142.0, "series": [{"data": [[30200.0, 8.0], [30100.0, 21.0], [30500.0, 7.0], [30000.0, 142.0], [30400.0, 15.0], [30700.0, 6.0], [30600.0, 7.0], [30300.0, 15.0], [31500.0, 27.0], [30800.0, 15.0], [30900.0, 20.0], [31000.0, 26.0], [31100.0, 13.0], [31200.0, 44.0], [31300.0, 33.0], [31400.0, 37.0], [31600.0, 23.0], [31700.0, 26.0], [31800.0, 42.0], [31900.0, 28.0], [32000.0, 55.0], [32100.0, 71.0], [32200.0, 56.0], [32300.0, 45.0], [32400.0, 60.0], [32500.0, 49.0], [32600.0, 35.0], [32700.0, 42.0], [32800.0, 21.0], [32900.0, 11.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.8539999999999, "minX": 1.75576746E12, "maxY": 500.8539999999999, "series": [{"data": [[1.75576746E12, 500.8539999999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576746E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 30018.0, "minX": 1.0, "maxY": 32942.0, "series": [{"data": [[4.0, 32623.666666666668], [7.0, 32766.0], [8.0, 32750.333333333332], [10.0, 32651.5], [12.0, 32790.0], [14.0, 32727.5], [16.0, 32806.0], [17.0, 32915.0], [18.0, 32916.0], [19.0, 32927.0], [20.0, 32911.0], [21.0, 32911.0], [22.0, 32906.0], [23.0, 32522.0], [24.0, 32784.0], [25.0, 32557.0], [26.0, 32913.0], [27.0, 32840.0], [28.0, 32741.0], [29.0, 32814.0], [33.0, 32660.5], [35.0, 32770.0], [34.0, 32883.0], [37.0, 32502.5], [39.0, 32659.0], [41.0, 32479.5], [43.0, 32477.0], [42.0, 32519.0], [44.0, 32864.0], [47.0, 32477.0], [46.0, 32494.5], [50.0, 32562.333333333332], [53.0, 32472.0], [52.0, 32773.0], [57.0, 32500.0], [56.0, 32610.333333333332], [59.0, 32856.0], [58.0, 32460.0], [61.0, 32454.0], [67.0, 32678.0], [66.0, 32668.0], [65.0, 32834.0], [64.0, 32682.666666666668], [70.0, 32604.0], [68.0, 32666.0], [75.0, 32665.666666666668], [72.0, 32554.5], [79.0, 32719.0], [78.0, 32595.5], [76.0, 32829.0], [83.0, 32644.0], [82.0, 32474.0], [81.0, 32627.5], [87.0, 32645.5], [85.0, 32816.5], [91.0, 32823.0], [90.0, 32738.5], [88.0, 32418.0], [95.0, 32712.0], [94.0, 32682.0], [93.0, 32656.0], [92.0, 32803.0], [99.0, 32745.0], [103.0, 32796.0], [102.0, 32591.5], [100.0, 32465.0], [107.0, 32385.0], [106.0, 32683.0], [105.0, 32782.0], [104.0, 32612.0], [111.0, 32773.0], [110.0, 32604.0], [109.0, 32783.0], [108.0, 32436.0], [115.0, 32596.0], [114.0, 32575.5], [112.0, 32791.0], [119.0, 32419.0], [118.0, 32764.0], [117.0, 32724.0], [123.0, 32769.0], [122.0, 32554.0], [120.0, 32764.0], [127.0, 32574.0], [126.0, 32647.5], [125.0, 32750.0], [134.0, 32339.0], [133.0, 32396.0], [132.0, 32706.0], [131.0, 32746.0], [130.0, 32749.0], [129.0, 32702.0], [128.0, 32756.0], [143.0, 32725.0], [142.0, 32719.0], [141.0, 32723.0], [140.0, 32514.0], [139.0, 32548.0], [138.0, 32525.0], [137.0, 32732.0], [136.0, 32620.0], [151.0, 32309.0], [150.0, 32511.5], [148.0, 32311.5], [146.0, 32312.0], [145.0, 32509.0], [144.0, 32316.0], [159.0, 32301.5], [157.0, 32709.0], [156.0, 32361.0], [155.0, 32304.0], [154.0, 32692.0], [153.0, 32711.0], [152.0, 32364.0], [167.0, 32676.0], [166.0, 32485.0], [165.0, 32496.0], [164.0, 32510.0], [163.0, 32478.666666666668], [160.0, 32177.0], [174.0, 32500.0], [173.0, 32259.0], [172.0, 32262.0], [171.0, 32397.666666666668], [168.0, 32650.0], [183.0, 32421.0], [182.0, 32541.0], [180.0, 32522.0], [179.0, 32248.0], [178.0, 32252.0], [177.0, 32253.0], [176.0, 32254.0], [191.0, 32287.75], [187.0, 32400.0], [186.0, 32645.0], [185.0, 32404.0], [184.0, 32238.0], [199.0, 32453.0], [197.0, 32631.5], [195.0, 32353.0], [193.0, 32224.0], [192.0, 32116.0], [207.0, 32456.0], [206.0, 32376.0], [205.0, 32621.5], [203.0, 32457.0], [202.0, 32484.0], [215.0, 32188.0], [213.0, 32260.0], [212.0, 32605.0], [211.0, 32588.0], [210.0, 32467.0], [208.0, 32372.0], [222.0, 32596.0], [221.0, 32411.0], [219.0, 32483.0], [217.0, 32439.0], [216.0, 32187.5], [231.0, 32585.0], [230.0, 32164.0], [229.0, 32164.0], [228.0, 32373.5], [226.0, 32357.75], [239.0, 32228.0], [238.0, 32538.666666666668], [237.0, 32230.0], [234.0, 32404.0], [233.0, 32234.0], [246.0, 32146.5], [244.0, 32429.0], [241.0, 32149.0], [240.0, 32408.0], [255.0, 32133.0], [254.0, 32138.0], [252.0, 32138.0], [251.0, 32138.0], [249.0, 32327.0], [248.0, 32179.5], [269.0, 32544.0], [268.0, 32308.0], [267.0, 32112.0], [266.0, 32116.0], [265.0, 32119.0], [264.0, 32140.5], [260.0, 32417.0], [259.0, 32206.0], [258.0, 32324.0], [256.0, 32547.0], [274.0, 32094.0], [286.0, 32266.0], [285.0, 32081.5], [283.0, 32503.0], [282.0, 32298.5], [280.0, 32192.0], [277.0, 32522.0], [276.0, 32444.0], [273.0, 32102.0], [272.0, 32134.0], [290.0, 32159.0], [301.0, 32114.0], [303.0, 32112.5], [300.0, 32115.0], [299.0, 32334.666666666668], [296.0, 32359.666666666668], [294.0, 32070.0], [292.0, 32188.5], [289.0, 32496.0], [288.0, 32414.5], [318.0, 32092.0], [319.0, 31998.0], [317.0, 32262.5], [307.0, 32445.0], [306.0, 32259.0], [305.0, 32459.0], [304.0, 32254.0], [315.0, 32002.0], [314.0, 32427.5], [312.0, 32110.0], [311.0, 32101.5], [309.0, 32441.0], [308.0, 32105.0], [334.0, 32407.0], [333.0, 32241.5], [323.0, 32412.0], [322.0, 32366.5], [321.0, 32089.0], [331.0, 32074.0], [330.0, 32220.0], [329.0, 32214.0], [328.0, 32425.0], [327.0, 32222.5], [325.0, 32419.0], [324.0, 32086.0], [349.0, 32149.0], [351.0, 32095.5], [348.0, 32098.5], [346.0, 32059.0], [345.0, 32226.5], [343.0, 32144.5], [341.0, 32205.0], [340.0, 32307.0], [338.0, 31868.5], [336.0, 32408.0], [366.0, 32359.0], [367.0, 32269.0], [365.0, 32164.0], [364.0, 32038.0], [363.0, 32038.0], [362.0, 32271.0], [361.0, 32040.5], [359.0, 32205.0], [352.0, 32174.0], [355.0, 32269.0], [353.0, 32154.0], [357.0, 32047.0], [356.0, 32045.0], [376.0, 31914.0], [382.0, 32171.333333333332], [379.0, 31911.0], [378.0, 32017.0], [377.0, 32017.0], [375.0, 32346.5], [373.0, 32363.0], [372.0, 32174.0], [371.0, 32148.0], [370.0, 32028.0], [369.0, 32366.0], [368.0, 32356.0], [387.0, 32005.5], [398.0, 31985.0], [399.0, 32075.0], [397.0, 32049.5], [385.0, 32004.0], [384.0, 32068.5], [395.0, 31830.5], [393.0, 32100.0], [391.0, 32320.0], [390.0, 32229.0], [389.0, 32087.0], [388.0, 32100.0], [413.0, 31971.0], [412.0, 31854.0], [411.0, 32301.0], [410.0, 31960.0], [408.0, 32077.0], [406.0, 32159.333333333332], [403.0, 32306.5], [401.0, 31990.0], [400.0, 32313.0], [429.0, 30068.0], [431.0, 32261.5], [428.0, 32211.0], [419.0, 32171.0], [418.0, 31955.0], [417.0, 32273.0], [416.0, 32260.333333333332], [427.0, 30024.0], [426.0, 30025.0], [425.0, 30027.0], [424.0, 32200.0], [423.0, 32012.0], [421.0, 32118.0], [435.0, 30065.0], [447.0, 30116.0], [446.0, 31320.333333333332], [443.0, 31936.5], [441.0, 30898.0], [439.0, 30020.0], [438.0, 31780.5], [437.0, 32118.0], [434.0, 31137.0], [432.0, 30020.0], [462.0, 32174.0], [463.0, 31687.0], [461.0, 30022.0], [460.0, 30021.0], [459.0, 30024.0], [458.0, 30020.0], [457.0, 32093.0], [456.0, 30023.0], [455.0, 32199.0], [449.0, 31171.0], [454.0, 30027.0], [453.0, 32070.0], [452.0, 32146.666666666668], [467.0, 30027.0], [478.0, 30024.5], [479.0, 31834.0], [476.0, 31691.5], [474.0, 30167.0], [472.0, 32071.0], [471.0, 31927.0], [469.0, 31946.0], [466.0, 32077.0], [465.0, 30022.0], [464.0, 30029.0], [494.0, 30020.0], [495.0, 32117.0], [493.0, 30019.0], [492.0, 30022.0], [491.0, 32121.0], [490.0, 32142.0], [489.0, 30022.0], [488.0, 32140.0], [487.0, 32044.0], [483.0, 31508.5], [486.0, 31647.0], [485.0, 31677.5], [510.0, 31937.5], [511.0, 30025.0], [508.0, 30022.0], [496.0, 30022.0], [507.0, 30820.0], [505.0, 32009.0], [504.0, 31908.0], [503.0, 31604.0], [502.0, 32007.0], [501.0, 32123.0], [500.0, 30952.75], [542.0, 30827.0], [543.0, 30025.0], [528.0, 32087.0], [532.0, 30827.5], [530.0, 30083.5], [540.0, 32074.0], [539.0, 31627.0], [538.0, 31628.0], [537.0, 32067.0], [536.0, 30161.0], [519.0, 31010.5], [517.0, 32054.0], [515.0, 31087.25], [527.0, 30023.0], [526.0, 30022.5], [524.0, 31308.666666666668], [521.0, 31878.0], [520.0, 31596.0], [535.0, 30130.0], [534.0, 31806.5], [571.0, 31799.5], [562.0, 31596.0], [574.0, 30019.0], [575.0, 31915.0], [561.0, 30759.0], [573.0, 30880.5], [569.0, 30920.0], [550.0, 30020.0], [549.0, 31958.0], [548.0, 32051.0], [547.0, 30990.5], [545.0, 30023.0], [544.0, 31546.0], [559.0, 32039.0], [558.0, 31830.0], [557.0, 31933.0], [556.0, 31820.0], [554.0, 32055.0], [553.0, 32028.0], [552.0, 30796.5], [567.0, 30021.0], [566.0, 31205.0], [563.0, 30448.0], [600.0, 31699.0], [606.0, 31485.0], [607.0, 30022.0], [593.0, 31759.0], [592.0, 30025.0], [605.0, 31833.5], [603.0, 30030.0], [602.0, 31968.0], [591.0, 31768.0], [576.0, 31854.0], [578.0, 30021.0], [577.0, 30021.0], [581.0, 31921.0], [579.0, 31567.0], [583.0, 31803.0], [582.0, 30018.0], [590.0, 31843.5], [588.0, 30028.0], [587.0, 31999.0], [586.0, 31993.0], [585.0, 30927.5], [599.0, 31818.0], [598.0, 31819.0], [596.0, 31975.0], [595.0, 30031.0], [632.0, 31777.0], [636.0, 30478.0], [637.0, 31881.0], [626.0, 31665.333333333332], [635.0, 30061.0], [634.0, 31812.0], [633.0, 31815.0], [623.0, 31945.0], [610.0, 30832.0], [608.0, 31487.0], [612.0, 31949.0], [611.0, 31859.0], [614.0, 31790.0], [613.0, 31966.0], [622.0, 31651.5], [620.0, 31486.0], [619.0, 30023.0], [618.0, 30026.0], [617.0, 30024.0], [616.0, 31033.5], [631.0, 31007.0], [629.0, 31770.0], [628.0, 31883.0], [627.0, 30022.0], [665.0, 30431.0], [659.0, 30692.5], [669.0, 30866.5], [670.0, 30880.0], [657.0, 30022.0], [656.0, 31389.0], [666.0, 30407.0], [664.0, 30019.0], [647.0, 31548.0], [646.0, 31409.0], [645.0, 31409.0], [644.0, 31577.0], [643.0, 30044.0], [642.0, 31901.0], [641.0, 30966.75], [655.0, 31369.0], [654.0, 31637.333333333332], [651.0, 31859.0], [650.0, 30023.0], [649.0, 31809.0], [648.0, 30027.0], [663.0, 31831.0], [662.0, 31451.0], [660.0, 31853.0], [699.0, 30131.333333333332], [690.0, 31695.0], [702.0, 31230.0], [703.0, 31685.0], [689.0, 30361.0], [688.0, 31564.0], [701.0, 30906.5], [698.0, 30026.0], [679.0, 30385.0], [678.0, 31359.0], [676.0, 31824.0], [675.0, 31364.0], [674.0, 30022.0], [673.0, 30397.0], [672.0, 30760.0], [686.0, 31729.0], [685.0, 30372.0], [684.0, 30025.0], [683.0, 30377.0], [682.0, 30378.0], [681.0, 30378.0], [680.0, 30022.0], [695.0, 30353.0], [694.0, 30682.666666666668], [691.0, 30359.0], [731.0, 30080.0], [722.0, 31364.5], [733.0, 30076.0], [734.0, 31271.0], [720.0, 30019.0], [732.0, 31451.0], [730.0, 30581.0], [711.0, 31289.0], [710.0, 31005.0], [707.0, 30023.0], [706.0, 31451.0], [705.0, 31381.5], [719.0, 30032.0], [718.0, 31748.0], [717.0, 30019.0], [716.0, 31765.0], [715.0, 31442.0], [714.0, 31073.333333333332], [727.0, 31258.0], [726.0, 31336.666666666668], [723.0, 31427.0], [766.0, 31167.0], [767.0, 31334.0], [752.0, 31277.5], [754.0, 31180.0], [753.0, 31376.0], [756.0, 30031.0], [755.0, 30034.0], [765.0, 31340.0], [764.0, 30023.0], [763.0, 31365.5], [761.0, 31528.0], [760.0, 31633.0], [741.0, 31711.0], [740.0, 31720.0], [739.0, 31472.0], [736.0, 31329.0], [750.0, 31321.5], [748.0, 31540.0], [747.0, 30024.0], [746.0, 31213.0], [745.0, 30052.0], [744.0, 30856.666666666668], [759.0, 30673.0], [757.0, 30028.0], [793.0, 31358.0], [798.0, 31483.0], [799.0, 30031.0], [786.0, 31404.5], [784.0, 30020.0], [796.0, 31550.0], [795.0, 30651.5], [794.0, 31416.5], [783.0, 31485.0], [769.0, 30676.5], [771.0, 30021.0], [770.0, 31611.0], [774.0, 31452.0], [772.0, 31306.0], [782.0, 30727.0], [780.0, 31539.0], [779.0, 31577.0], [778.0, 31295.0], [777.0, 31497.666666666668], [790.0, 30029.0], [789.0, 31466.0], [788.0, 31290.0], [787.0, 31578.0], [825.0, 30951.0], [829.0, 30025.0], [831.0, 30020.0], [817.0, 31231.0], [816.0, 31227.0], [819.0, 30028.0], [818.0, 30021.0], [821.0, 31354.0], [820.0, 30107.0], [828.0, 31501.0], [827.0, 30026.0], [826.0, 31220.0], [824.0, 31054.0], [807.0, 30027.0], [806.0, 30023.0], [805.0, 31241.0], [804.0, 30632.5], [802.0, 31059.0], [801.0, 31260.0], [800.0, 31261.0], [815.0, 30747.0], [813.0, 31421.0], [811.0, 31240.0], [810.0, 31473.0], [809.0, 31420.0], [808.0, 31326.0], [823.0, 30955.0], [822.0, 30102.0], [860.0, 31107.0], [852.0, 30666.5], [862.0, 31226.5], [848.0, 30022.0], [859.0, 31103.0], [857.0, 30609.0], [847.0, 30049.0], [834.0, 31425.0], [833.0, 31320.333333333332], [837.0, 31139.5], [835.0, 31471.0], [839.0, 31445.0], [838.0, 31145.0], [846.0, 30454.5], [844.0, 30730.0], [842.0, 31327.0], [841.0, 30029.0], [840.0, 30029.0], [855.0, 31083.0], [854.0, 30833.0], [853.0, 31074.0], [850.0, 30056.0], [849.0, 31213.0], [888.0, 31185.0], [894.0, 31268.5], [895.0, 31272.0], [881.0, 31015.0], [880.0, 31303.0], [883.0, 30755.0], [882.0, 31030.0], [892.0, 30795.5], [890.0, 31014.0], [889.0, 31016.0], [879.0, 31213.0], [865.0, 31072.0], [864.0, 30123.0], [868.0, 30855.0], [867.0, 30417.5], [871.0, 30905.0], [870.0, 31130.0], [878.0, 31329.0], [877.0, 31026.0], [876.0, 31045.0], [874.0, 30421.0], [873.0, 31347.0], [872.0, 30206.0], [887.0, 31024.0], [886.0, 30852.0], [885.0, 31299.0], [884.0, 31027.0], [920.0, 30074.0], [925.0, 30524.0], [926.0, 31195.0], [913.0, 31229.5], [915.0, 30082.0], [914.0, 31226.0], [923.0, 30921.0], [922.0, 30072.0], [921.0, 30932.0], [911.0, 30860.0], [897.0, 31234.0], [896.0, 31170.0], [899.0, 31015.0], [898.0, 30998.0], [901.0, 30118.0], [900.0, 31248.0], [903.0, 31147.0], [902.0, 31266.0], [909.0, 31012.0], [908.0, 31238.0], [907.0, 31173.0], [905.0, 31103.0], [904.0, 30951.0], [919.0, 30076.0], [918.0, 30074.0], [917.0, 30023.0], [916.0, 30025.0], [956.0, 30601.0], [959.0, 30214.0], [945.0, 30503.0], [947.0, 30828.0], [946.0, 31030.0], [949.0, 30512.0], [948.0, 31127.0], [958.0, 30653.0], [957.0, 30802.0], [955.0, 30851.0], [954.0, 30817.0], [953.0, 30617.0], [952.0, 30502.0], [943.0, 30691.0], [929.0, 30053.0], [928.0, 30803.0], [932.0, 30960.0], [931.0, 30829.0], [935.0, 30481.0], [933.0, 30907.0], [942.0, 30962.0], [941.0, 30851.0], [940.0, 30864.0], [939.0, 30357.5], [937.0, 30039.0], [936.0, 30043.0], [951.0, 30618.0], [950.0, 30023.0], [987.0, 30235.333333333332], [979.0, 31024.0], [991.0, 30991.5], [989.0, 31007.0], [988.0, 30084.0], [984.0, 30103.5], [967.0, 30528.0], [966.0, 30641.0], [964.0, 30636.0], [963.0, 30830.0], [962.0, 30496.0], [961.0, 30716.0], [975.0, 30595.5], [973.0, 30758.0], [972.0, 30962.0], [971.0, 31076.0], [970.0, 30450.0], [969.0, 31065.0], [968.0, 31078.0], [982.0, 30149.0], [981.0, 30226.0], [980.0, 30035.0], [978.0, 30546.5], [1000.0, 30249.0], [999.0, 30115.0], [998.0, 30158.0], [996.0, 30104.0], [995.0, 30107.0], [994.0, 30111.0], [993.0, 30867.0], [992.0, 30582.0], [1.0, 32942.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}, {"data": [[500.8529999999992, 31586.460999999985]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.75576746E12, "maxY": 35183.333333333336, "series": [{"data": [[1.75576746E12, 35183.333333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75576746E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576746E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 31586.460999999985, "minX": 1.75576746E12, "maxY": 31586.460999999985, "series": [{"data": [[1.75576746E12, 31586.460999999985]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576746E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75576746E12, "maxY": 4.9E-324, "series": [{"data": [[1.75576746E12, 0.0]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576746E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1582.5949999999982, "minX": 1.75576746E12, "maxY": 1582.5949999999982, "series": [{"data": [[1.75576746E12, 1582.5949999999982]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576746E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 30121.0, "minX": 9.0, "maxY": 32771.0, "series": [{"data": [[9.0, 30121.0], [613.0, 32174.0], [21.0, 32771.0], [357.0, 31027.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 613.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 9.0, "maxY": 4.9E-324, "series": [{"data": [[9.0, 0.0], [613.0, 0.0], [21.0, 0.0], [357.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 613.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576746E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576746E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576746E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576746E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576746E12, 16.666666666666668]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576746E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576746E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576746E12, 16.666666666666668]], "isOverall": false, "label": "Dropdown รายชื่อทะเบียนบุคคลในหน่วยบริการ-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576746E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576746E12, "maxY": 16.666666666666668, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75576746E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576746E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

