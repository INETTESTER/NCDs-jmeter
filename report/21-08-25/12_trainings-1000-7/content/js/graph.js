/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 11.0, "minX": 0.0, "maxY": 26966.0, "series": [{"data": [[0.0, 11.0], [0.1, 4582.0], [0.2, 5741.0], [0.3, 5741.0], [0.4, 6152.0], [0.5, 6227.0], [0.6, 6309.0], [0.7, 6435.0], [0.8, 6462.0], [0.9, 6545.0], [1.0, 6560.0], [1.1, 6741.0], [1.2, 6843.0], [1.3, 6959.0], [1.4, 6959.0], [1.5, 7022.0], [1.6, 7202.0], [1.7, 7220.0], [1.8, 7269.0], [1.9, 7421.0], [2.0, 7438.0], [2.1, 7694.0], [2.2, 7727.0], [2.3, 7762.0], [2.4, 7767.0], [2.5, 7785.0], [2.6, 7960.0], [2.7, 8012.0], [2.8, 8033.0], [2.9, 8054.0], [3.0, 8095.0], [3.1, 8121.0], [3.2, 8124.0], [3.3, 8148.0], [3.4, 8182.0], [3.5, 8225.0], [3.6, 8233.0], [3.7, 8234.0], [3.8, 8291.0], [3.9, 8340.0], [4.0, 8347.0], [4.1, 8348.0], [4.2, 8377.0], [4.3, 8395.0], [4.4, 8406.0], [4.5, 8412.0], [4.6, 8456.0], [4.7, 8460.0], [4.8, 8512.0], [4.9, 8580.0], [5.0, 8595.0], [5.1, 8600.0], [5.2, 8632.0], [5.3, 8676.0], [5.4, 8731.0], [5.5, 8737.0], [5.6, 8756.0], [5.7, 8796.0], [5.8, 8799.0], [5.9, 8837.0], [6.0, 8847.0], [6.1, 8880.0], [6.2, 8963.0], [6.3, 9003.0], [6.4, 9081.0], [6.5, 9083.0], [6.6, 9106.0], [6.7, 9157.0], [6.8, 9190.0], [6.9, 9206.0], [7.0, 9348.0], [7.1, 9354.0], [7.2, 9363.0], [7.3, 9438.0], [7.4, 9475.0], [7.5, 9563.0], [7.6, 9564.0], [7.7, 9585.0], [7.8, 9588.0], [7.9, 9602.0], [8.0, 9615.0], [8.1, 9634.0], [8.2, 9672.0], [8.3, 9674.0], [8.4, 9713.0], [8.5, 9749.0], [8.6, 9821.0], [8.7, 9821.0], [8.8, 9823.0], [8.9, 9870.0], [9.0, 9888.0], [9.1, 9904.0], [9.2, 9949.0], [9.3, 9981.0], [9.4, 10007.0], [9.5, 10096.0], [9.6, 10118.0], [9.7, 10206.0], [9.8, 10233.0], [9.9, 10293.0], [10.0, 10341.0], [10.1, 10368.0], [10.2, 10432.0], [10.3, 10441.0], [10.4, 10540.0], [10.5, 10542.0], [10.6, 10595.0], [10.7, 10610.0], [10.8, 10668.0], [10.9, 10699.0], [11.0, 10804.0], [11.1, 10808.0], [11.2, 10824.0], [11.3, 10826.0], [11.4, 10828.0], [11.5, 10842.0], [11.6, 10860.0], [11.7, 10868.0], [11.8, 10989.0], [11.9, 11047.0], [12.0, 11072.0], [12.1, 11102.0], [12.2, 11115.0], [12.3, 11121.0], [12.4, 11225.0], [12.5, 11269.0], [12.6, 11275.0], [12.7, 11287.0], [12.8, 11308.0], [12.9, 11310.0], [13.0, 11366.0], [13.1, 11367.0], [13.2, 11509.0], [13.3, 11517.0], [13.4, 11617.0], [13.5, 11917.0], [13.6, 11970.0], [13.7, 12111.0], [13.8, 12165.0], [13.9, 12204.0], [14.0, 12210.0], [14.1, 12272.0], [14.2, 12284.0], [14.3, 12508.0], [14.4, 12778.0], [14.5, 13099.0], [14.6, 13154.0], [14.7, 13311.0], [14.8, 13597.0], [14.9, 13694.0], [15.0, 13733.0], [15.1, 13761.0], [15.2, 13989.0], [15.3, 14010.0], [15.4, 14268.0], [15.5, 14385.0], [15.6, 14410.0], [15.7, 14425.0], [15.8, 14477.0], [15.9, 14604.0], [16.0, 14686.0], [16.1, 14825.0], [16.2, 15103.0], [16.3, 15462.0], [16.4, 15536.0], [16.5, 15558.0], [16.6, 15598.0], [16.7, 15771.0], [16.8, 15774.0], [16.9, 15802.0], [17.0, 15848.0], [17.1, 15894.0], [17.2, 15945.0], [17.3, 16020.0], [17.4, 16059.0], [17.5, 16060.0], [17.6, 16060.0], [17.7, 16096.0], [17.8, 16102.0], [17.9, 16102.0], [18.0, 16152.0], [18.1, 16185.0], [18.2, 16211.0], [18.3, 16236.0], [18.4, 16260.0], [18.5, 16294.0], [18.6, 16395.0], [18.7, 16420.0], [18.8, 16428.0], [18.9, 16437.0], [19.0, 16452.0], [19.1, 16522.0], [19.2, 16538.0], [19.3, 16551.0], [19.4, 16565.0], [19.5, 16581.0], [19.6, 16628.0], [19.7, 16628.0], [19.8, 16632.0], [19.9, 16649.0], [20.0, 16716.0], [20.1, 16730.0], [20.2, 16744.0], [20.3, 16757.0], [20.4, 16776.0], [20.5, 16808.0], [20.6, 16813.0], [20.7, 16848.0], [20.8, 16851.0], [20.9, 16864.0], [21.0, 16957.0], [21.1, 16978.0], [21.2, 17078.0], [21.3, 17086.0], [21.4, 17099.0], [21.5, 17158.0], [21.6, 17159.0], [21.7, 17159.0], [21.8, 17194.0], [21.9, 17242.0], [22.0, 17335.0], [22.1, 17336.0], [22.2, 17337.0], [22.3, 17369.0], [22.4, 17439.0], [22.5, 17439.0], [22.6, 17467.0], [22.7, 17474.0], [22.8, 17491.0], [22.9, 17525.0], [23.0, 17527.0], [23.1, 17537.0], [23.2, 17555.0], [23.3, 17566.0], [23.4, 17589.0], [23.5, 17601.0], [23.6, 17638.0], [23.7, 17652.0], [23.8, 17652.0], [23.9, 17656.0], [24.0, 17710.0], [24.1, 17725.0], [24.2, 17734.0], [24.3, 17739.0], [24.4, 17742.0], [24.5, 17761.0], [24.6, 17766.0], [24.7, 17767.0], [24.8, 17779.0], [24.9, 17785.0], [25.0, 17796.0], [25.1, 17818.0], [25.2, 17832.0], [25.3, 17878.0], [25.4, 17984.0], [25.5, 18014.0], [25.6, 18022.0], [25.7, 18025.0], [25.8, 18030.0], [25.9, 18046.0], [26.0, 18052.0], [26.1, 18059.0], [26.2, 18067.0], [26.3, 18073.0], [26.4, 18081.0], [26.5, 18086.0], [26.6, 18114.0], [26.7, 18114.0], [26.8, 18115.0], [26.9, 18119.0], [27.0, 18121.0], [27.1, 18123.0], [27.2, 18123.0], [27.3, 18126.0], [27.4, 18126.0], [27.5, 18135.0], [27.6, 18139.0], [27.7, 18143.0], [27.8, 18149.0], [27.9, 18152.0], [28.0, 18155.0], [28.1, 18164.0], [28.2, 18175.0], [28.3, 18182.0], [28.4, 18186.0], [28.5, 18197.0], [28.6, 18213.0], [28.7, 18214.0], [28.8, 18219.0], [28.9, 18222.0], [29.0, 18224.0], [29.1, 18243.0], [29.2, 18246.0], [29.3, 18258.0], [29.4, 18279.0], [29.5, 18284.0], [29.6, 18290.0], [29.7, 18332.0], [29.8, 18377.0], [29.9, 18379.0], [30.0, 18396.0], [30.1, 18404.0], [30.2, 18405.0], [30.3, 18412.0], [30.4, 18423.0], [30.5, 18436.0], [30.6, 18463.0], [30.7, 18473.0], [30.8, 18479.0], [30.9, 18489.0], [31.0, 18492.0], [31.1, 18557.0], [31.2, 18561.0], [31.3, 18565.0], [31.4, 18574.0], [31.5, 18576.0], [31.6, 18588.0], [31.7, 18605.0], [31.8, 18612.0], [31.9, 18614.0], [32.0, 18619.0], [32.1, 18630.0], [32.2, 18631.0], [32.3, 18642.0], [32.4, 18645.0], [32.5, 18680.0], [32.6, 18689.0], [32.7, 18695.0], [32.8, 18697.0], [32.9, 18713.0], [33.0, 18742.0], [33.1, 18742.0], [33.2, 18748.0], [33.3, 18753.0], [33.4, 18760.0], [33.5, 18765.0], [33.6, 18766.0], [33.7, 18769.0], [33.8, 18779.0], [33.9, 18786.0], [34.0, 18791.0], [34.1, 18808.0], [34.2, 18808.0], [34.3, 18824.0], [34.4, 18824.0], [34.5, 18825.0], [34.6, 18831.0], [34.7, 18832.0], [34.8, 18835.0], [34.9, 18836.0], [35.0, 18844.0], [35.1, 18858.0], [35.2, 18859.0], [35.3, 18883.0], [35.4, 18884.0], [35.5, 18885.0], [35.6, 18893.0], [35.7, 18913.0], [35.8, 18922.0], [35.9, 18924.0], [36.0, 18926.0], [36.1, 18932.0], [36.2, 18942.0], [36.3, 18943.0], [36.4, 18946.0], [36.5, 18966.0], [36.6, 18973.0], [36.7, 18983.0], [36.8, 18999.0], [36.9, 19002.0], [37.0, 19003.0], [37.1, 19045.0], [37.2, 19051.0], [37.3, 19052.0], [37.4, 19053.0], [37.5, 19069.0], [37.6, 19087.0], [37.7, 19095.0], [37.8, 19114.0], [37.9, 19124.0], [38.0, 19136.0], [38.1, 19144.0], [38.2, 19153.0], [38.3, 19155.0], [38.4, 19155.0], [38.5, 19159.0], [38.6, 19159.0], [38.7, 19165.0], [38.8, 19189.0], [38.9, 19189.0], [39.0, 19210.0], [39.1, 19210.0], [39.2, 19274.0], [39.3, 19289.0], [39.4, 19305.0], [39.5, 19306.0], [39.6, 19308.0], [39.7, 19324.0], [39.8, 19327.0], [39.9, 19389.0], [40.0, 19399.0], [40.1, 19413.0], [40.2, 19413.0], [40.3, 19446.0], [40.4, 19464.0], [40.5, 19476.0], [40.6, 19488.0], [40.7, 19494.0], [40.8, 19505.0], [40.9, 19509.0], [41.0, 19510.0], [41.1, 19526.0], [41.2, 19529.0], [41.3, 19530.0], [41.4, 19540.0], [41.5, 19546.0], [41.6, 19553.0], [41.7, 19554.0], [41.8, 19558.0], [41.9, 19561.0], [42.0, 19563.0], [42.1, 19564.0], [42.2, 19570.0], [42.3, 19574.0], [42.4, 19574.0], [42.5, 19575.0], [42.6, 19578.0], [42.7, 19580.0], [42.8, 19585.0], [42.9, 19597.0], [43.0, 19599.0], [43.1, 19603.0], [43.2, 19611.0], [43.3, 19612.0], [43.4, 19620.0], [43.5, 19624.0], [43.6, 19626.0], [43.7, 19628.0], [43.8, 19634.0], [43.9, 19651.0], [44.0, 19652.0], [44.1, 19654.0], [44.2, 19656.0], [44.3, 19665.0], [44.4, 19669.0], [44.5, 19671.0], [44.6, 19674.0], [44.7, 19674.0], [44.8, 19677.0], [44.9, 19690.0], [45.0, 19693.0], [45.1, 19701.0], [45.2, 19710.0], [45.3, 19712.0], [45.4, 19717.0], [45.5, 19719.0], [45.6, 19749.0], [45.7, 19762.0], [45.8, 19772.0], [45.9, 19778.0], [46.0, 19779.0], [46.1, 19817.0], [46.2, 19823.0], [46.3, 19827.0], [46.4, 19833.0], [46.5, 19843.0], [46.6, 19849.0], [46.7, 19851.0], [46.8, 19856.0], [46.9, 19858.0], [47.0, 19860.0], [47.1, 19862.0], [47.2, 19869.0], [47.3, 19887.0], [47.4, 19889.0], [47.5, 19893.0], [47.6, 19893.0], [47.7, 19895.0], [47.8, 19905.0], [47.9, 19914.0], [48.0, 19918.0], [48.1, 19920.0], [48.2, 19927.0], [48.3, 19928.0], [48.4, 19928.0], [48.5, 19932.0], [48.6, 19945.0], [48.7, 19945.0], [48.8, 19949.0], [48.9, 19956.0], [49.0, 19966.0], [49.1, 19968.0], [49.2, 19984.0], [49.3, 19989.0], [49.4, 19989.0], [49.5, 19994.0], [49.6, 19998.0], [49.7, 20002.0], [49.8, 20012.0], [49.9, 20014.0], [50.0, 20015.0], [50.1, 20020.0], [50.2, 20029.0], [50.3, 20044.0], [50.4, 20046.0], [50.5, 20060.0], [50.6, 20068.0], [50.7, 20091.0], [50.8, 20097.0], [50.9, 20118.0], [51.0, 20125.0], [51.1, 20125.0], [51.2, 20130.0], [51.3, 20142.0], [51.4, 20167.0], [51.5, 20182.0], [51.6, 20208.0], [51.7, 20212.0], [51.8, 20263.0], [51.9, 20289.0], [52.0, 20345.0], [52.1, 20376.0], [52.2, 20384.0], [52.3, 20391.0], [52.4, 20406.0], [52.5, 20412.0], [52.6, 20413.0], [52.7, 20414.0], [52.8, 20427.0], [52.9, 20428.0], [53.0, 20437.0], [53.1, 20437.0], [53.2, 20440.0], [53.3, 20440.0], [53.4, 20441.0], [53.5, 20441.0], [53.6, 20461.0], [53.7, 20463.0], [53.8, 20464.0], [53.9, 20478.0], [54.0, 20491.0], [54.1, 20497.0], [54.2, 20510.0], [54.3, 20514.0], [54.4, 20524.0], [54.5, 20541.0], [54.6, 20557.0], [54.7, 20558.0], [54.8, 20586.0], [54.9, 20590.0], [55.0, 20605.0], [55.1, 20619.0], [55.2, 20628.0], [55.3, 20642.0], [55.4, 20645.0], [55.5, 20649.0], [55.6, 20652.0], [55.7, 20655.0], [55.8, 20671.0], [55.9, 20676.0], [56.0, 20680.0], [56.1, 20692.0], [56.2, 20692.0], [56.3, 20701.0], [56.4, 20701.0], [56.5, 20702.0], [56.6, 20710.0], [56.7, 20711.0], [56.8, 20719.0], [56.9, 20720.0], [57.0, 20725.0], [57.1, 20726.0], [57.2, 20733.0], [57.3, 20743.0], [57.4, 20745.0], [57.5, 20748.0], [57.6, 20751.0], [57.7, 20752.0], [57.8, 20774.0], [57.9, 20797.0], [58.0, 20801.0], [58.1, 20803.0], [58.2, 20806.0], [58.3, 20817.0], [58.4, 20823.0], [58.5, 20842.0], [58.6, 20858.0], [58.7, 20867.0], [58.8, 20867.0], [58.9, 20871.0], [59.0, 20874.0], [59.1, 20883.0], [59.2, 20883.0], [59.3, 20886.0], [59.4, 20893.0], [59.5, 20898.0], [59.6, 20899.0], [59.7, 20905.0], [59.8, 20907.0], [59.9, 20908.0], [60.0, 20909.0], [60.1, 20909.0], [60.2, 20917.0], [60.3, 20918.0], [60.4, 20921.0], [60.5, 20923.0], [60.6, 20926.0], [60.7, 20930.0], [60.8, 20932.0], [60.9, 20933.0], [61.0, 20944.0], [61.1, 20947.0], [61.2, 20950.0], [61.3, 20951.0], [61.4, 20953.0], [61.5, 20959.0], [61.6, 20959.0], [61.7, 20961.0], [61.8, 20962.0], [61.9, 20963.0], [62.0, 20967.0], [62.1, 20969.0], [62.2, 20980.0], [62.3, 20988.0], [62.4, 21003.0], [62.5, 21014.0], [62.6, 21023.0], [62.7, 21029.0], [62.8, 21034.0], [62.9, 21035.0], [63.0, 21036.0], [63.1, 21043.0], [63.2, 21045.0], [63.3, 21046.0], [63.4, 21049.0], [63.5, 21055.0], [63.6, 21056.0], [63.7, 21057.0], [63.8, 21058.0], [63.9, 21061.0], [64.0, 21063.0], [64.1, 21070.0], [64.2, 21071.0], [64.3, 21072.0], [64.4, 21072.0], [64.5, 21073.0], [64.6, 21076.0], [64.7, 21079.0], [64.8, 21089.0], [64.9, 21090.0], [65.0, 21095.0], [65.1, 21099.0], [65.2, 21104.0], [65.3, 21105.0], [65.4, 21109.0], [65.5, 21109.0], [65.6, 21111.0], [65.7, 21112.0], [65.8, 21120.0], [65.9, 21120.0], [66.0, 21121.0], [66.1, 21121.0], [66.2, 21128.0], [66.3, 21128.0], [66.4, 21129.0], [66.5, 21138.0], [66.6, 21142.0], [66.7, 21143.0], [66.8, 21144.0], [66.9, 21145.0], [67.0, 21147.0], [67.1, 21148.0], [67.2, 21150.0], [67.3, 21151.0], [67.4, 21153.0], [67.5, 21154.0], [67.6, 21161.0], [67.7, 21162.0], [67.8, 21164.0], [67.9, 21164.0], [68.0, 21167.0], [68.1, 21169.0], [68.2, 21171.0], [68.3, 21177.0], [68.4, 21179.0], [68.5, 21179.0], [68.6, 21184.0], [68.7, 21185.0], [68.8, 21186.0], [68.9, 21188.0], [69.0, 21188.0], [69.1, 21188.0], [69.2, 21190.0], [69.3, 21194.0], [69.4, 21196.0], [69.5, 21199.0], [69.6, 21200.0], [69.7, 21200.0], [69.8, 21202.0], [69.9, 21209.0], [70.0, 21210.0], [70.1, 21211.0], [70.2, 21212.0], [70.3, 21212.0], [70.4, 21216.0], [70.5, 21216.0], [70.6, 21217.0], [70.7, 21224.0], [70.8, 21226.0], [70.9, 21228.0], [71.0, 21229.0], [71.1, 21229.0], [71.2, 21231.0], [71.3, 21232.0], [71.4, 21234.0], [71.5, 21234.0], [71.6, 21238.0], [71.7, 21239.0], [71.8, 21242.0], [71.9, 21244.0], [72.0, 21246.0], [72.1, 21246.0], [72.2, 21247.0], [72.3, 21247.0], [72.4, 21252.0], [72.5, 21254.0], [72.6, 21263.0], [72.7, 21264.0], [72.8, 21265.0], [72.9, 21271.0], [73.0, 21274.0], [73.1, 21282.0], [73.2, 21284.0], [73.3, 21285.0], [73.4, 21287.0], [73.5, 21302.0], [73.6, 21312.0], [73.7, 21315.0], [73.8, 21321.0], [73.9, 21326.0], [74.0, 21328.0], [74.1, 21328.0], [74.2, 21332.0], [74.3, 21337.0], [74.4, 21344.0], [74.5, 21350.0], [74.6, 21353.0], [74.7, 21354.0], [74.8, 21364.0], [74.9, 21371.0], [75.0, 21373.0], [75.1, 21373.0], [75.2, 21377.0], [75.3, 21378.0], [75.4, 21378.0], [75.5, 21379.0], [75.6, 21388.0], [75.7, 21392.0], [75.8, 21398.0], [75.9, 21398.0], [76.0, 21401.0], [76.1, 21402.0], [76.2, 21407.0], [76.3, 21412.0], [76.4, 21416.0], [76.5, 21416.0], [76.6, 21422.0], [76.7, 21429.0], [76.8, 21437.0], [76.9, 21448.0], [77.0, 21449.0], [77.1, 21460.0], [77.2, 21462.0], [77.3, 21463.0], [77.4, 21464.0], [77.5, 21471.0], [77.6, 21472.0], [77.7, 21473.0], [77.8, 21473.0], [77.9, 21477.0], [78.0, 21484.0], [78.1, 21484.0], [78.2, 21492.0], [78.3, 21498.0], [78.4, 21498.0], [78.5, 21499.0], [78.6, 21499.0], [78.7, 21504.0], [78.8, 21513.0], [78.9, 21519.0], [79.0, 21520.0], [79.1, 21535.0], [79.2, 21542.0], [79.3, 21543.0], [79.4, 21554.0], [79.5, 21558.0], [79.6, 21583.0], [79.7, 21590.0], [79.8, 21596.0], [79.9, 21597.0], [80.0, 21599.0], [80.1, 21600.0], [80.2, 21612.0], [80.3, 21613.0], [80.4, 21616.0], [80.5, 21619.0], [80.6, 21620.0], [80.7, 21627.0], [80.8, 21630.0], [80.9, 21638.0], [81.0, 21642.0], [81.1, 21644.0], [81.2, 21661.0], [81.3, 21665.0], [81.4, 21666.0], [81.5, 21667.0], [81.6, 21675.0], [81.7, 21691.0], [81.8, 21694.0], [81.9, 21703.0], [82.0, 21705.0], [82.1, 21708.0], [82.2, 21716.0], [82.3, 21727.0], [82.4, 21729.0], [82.5, 21735.0], [82.6, 21743.0], [82.7, 21744.0], [82.8, 21767.0], [82.9, 21784.0], [83.0, 21799.0], [83.1, 21800.0], [83.2, 21803.0], [83.3, 21805.0], [83.4, 21821.0], [83.5, 21822.0], [83.6, 21822.0], [83.7, 21826.0], [83.8, 21832.0], [83.9, 21837.0], [84.0, 21837.0], [84.1, 21842.0], [84.2, 21842.0], [84.3, 21843.0], [84.4, 21851.0], [84.5, 21875.0], [84.6, 21908.0], [84.7, 21930.0], [84.8, 21986.0], [84.9, 21987.0], [85.0, 21989.0], [85.1, 22005.0], [85.2, 22006.0], [85.3, 22032.0], [85.4, 22033.0], [85.5, 22035.0], [85.6, 22115.0], [85.7, 22144.0], [85.8, 22145.0], [85.9, 22146.0], [86.0, 22171.0], [86.1, 22191.0], [86.2, 22193.0], [86.3, 22203.0], [86.4, 22203.0], [86.5, 22219.0], [86.6, 22250.0], [86.7, 22455.0], [86.8, 22491.0], [86.9, 22519.0], [87.0, 22525.0], [87.1, 22527.0], [87.2, 22528.0], [87.3, 22542.0], [87.4, 22546.0], [87.5, 22559.0], [87.6, 22560.0], [87.7, 22561.0], [87.8, 22570.0], [87.9, 22570.0], [88.0, 22573.0], [88.1, 22575.0], [88.2, 22629.0], [88.3, 22670.0], [88.4, 22674.0], [88.5, 22682.0], [88.6, 22687.0], [88.7, 22697.0], [88.8, 22698.0], [88.9, 22701.0], [89.0, 22704.0], [89.1, 22704.0], [89.2, 22716.0], [89.3, 22717.0], [89.4, 22733.0], [89.5, 22735.0], [89.6, 22735.0], [89.7, 22742.0], [89.8, 22753.0], [89.9, 22772.0], [90.0, 22799.0], [90.1, 22818.0], [90.2, 22821.0], [90.3, 22825.0], [90.4, 22831.0], [90.5, 22832.0], [90.6, 22859.0], [90.7, 22861.0], [90.8, 22861.0], [90.9, 22863.0], [91.0, 22864.0], [91.1, 22864.0], [91.2, 22872.0], [91.3, 22877.0], [91.4, 22879.0], [91.5, 22883.0], [91.6, 22884.0], [91.7, 22896.0], [91.8, 22902.0], [91.9, 22914.0], [92.0, 22917.0], [92.1, 22920.0], [92.2, 22943.0], [92.3, 22946.0], [92.4, 22950.0], [92.5, 22957.0], [92.6, 22959.0], [92.7, 22962.0], [92.8, 22963.0], [92.9, 22973.0], [93.0, 22978.0], [93.1, 22989.0], [93.2, 22991.0], [93.3, 23001.0], [93.4, 23016.0], [93.5, 23019.0], [93.6, 23023.0], [93.7, 23028.0], [93.8, 23034.0], [93.9, 23038.0], [94.0, 23038.0], [94.1, 23046.0], [94.2, 23047.0], [94.3, 23051.0], [94.4, 23063.0], [94.5, 23067.0], [94.6, 23067.0], [94.7, 23073.0], [94.8, 23076.0], [94.9, 23081.0], [95.0, 23091.0], [95.1, 23095.0], [95.2, 23098.0], [95.3, 23101.0], [95.4, 23104.0], [95.5, 23119.0], [95.6, 23141.0], [95.7, 23151.0], [95.8, 23156.0], [95.9, 23198.0], [96.0, 23218.0], [96.1, 23233.0], [96.2, 23234.0], [96.3, 23243.0], [96.4, 23243.0], [96.5, 23247.0], [96.6, 23253.0], [96.7, 23257.0], [96.8, 23274.0], [96.9, 23296.0], [97.0, 23296.0], [97.1, 23306.0], [97.2, 23308.0], [97.3, 23313.0], [97.4, 23313.0], [97.5, 23314.0], [97.6, 23325.0], [97.7, 23369.0], [97.8, 23378.0], [97.9, 23386.0], [98.0, 23392.0], [98.1, 23410.0], [98.2, 23415.0], [98.3, 23537.0], [98.4, 23622.0], [98.5, 23648.0], [98.6, 23948.0], [98.7, 23972.0], [98.8, 23974.0], [98.9, 24157.0], [99.0, 24176.0], [99.1, 24254.0], [99.2, 24333.0], [99.3, 24485.0], [99.4, 24780.0], [99.5, 24804.0], [99.6, 25063.0], [99.7, 25076.0], [99.8, 26518.0], [99.9, 26966.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 44.0, "series": [{"data": [[0.0, 1.0], [4500.0, 1.0], [5700.0, 1.0], [6100.0, 1.0], [6000.0, 1.0], [6300.0, 1.0], [6200.0, 1.0], [6500.0, 2.0], [6400.0, 2.0], [6700.0, 1.0], [6800.0, 1.0], [6900.0, 1.0], [7000.0, 1.0], [7200.0, 3.0], [7400.0, 2.0], [7600.0, 1.0], [7700.0, 4.0], [7900.0, 1.0], [8100.0, 4.0], [8000.0, 4.0], [8300.0, 6.0], [8400.0, 4.0], [8600.0, 3.0], [8200.0, 4.0], [8700.0, 5.0], [8500.0, 3.0], [8800.0, 3.0], [9100.0, 3.0], [9000.0, 3.0], [8900.0, 1.0], [9200.0, 1.0], [9300.0, 3.0], [9400.0, 2.0], [9700.0, 2.0], [9500.0, 4.0], [9600.0, 5.0], [10000.0, 2.0], [9800.0, 5.0], [9900.0, 3.0], [10200.0, 3.0], [10100.0, 1.0], [10500.0, 3.0], [10600.0, 3.0], [10400.0, 2.0], [10300.0, 2.0], [10800.0, 8.0], [10900.0, 1.0], [11000.0, 2.0], [11200.0, 4.0], [11100.0, 3.0], [11300.0, 4.0], [11500.0, 2.0], [11600.0, 1.0], [11900.0, 2.0], [12200.0, 4.0], [12100.0, 2.0], [12700.0, 1.0], [12500.0, 1.0], [13100.0, 1.0], [13300.0, 1.0], [13000.0, 1.0], [13700.0, 2.0], [13500.0, 1.0], [13600.0, 1.0], [13900.0, 1.0], [14000.0, 1.0], [14300.0, 1.0], [14200.0, 1.0], [14600.0, 2.0], [14400.0, 3.0], [14800.0, 1.0], [15100.0, 1.0], [15800.0, 3.0], [15400.0, 1.0], [15500.0, 3.0], [15700.0, 2.0], [16200.0, 4.0], [16100.0, 4.0], [15900.0, 1.0], [16000.0, 5.0], [16300.0, 1.0], [16600.0, 3.0], [16400.0, 4.0], [16700.0, 5.0], [17300.0, 4.0], [17200.0, 1.0], [17000.0, 3.0], [17100.0, 4.0], [17400.0, 5.0], [16500.0, 5.0], [16900.0, 2.0], [16800.0, 5.0], [18200.0, 11.0], [17500.0, 6.0], [17600.0, 5.0], [17800.0, 3.0], [17900.0, 1.0], [17700.0, 11.0], [18100.0, 20.0], [18000.0, 11.0], [18400.0, 10.0], [18300.0, 4.0], [19200.0, 4.0], [18500.0, 6.0], [18600.0, 12.0], [18700.0, 12.0], [18800.0, 16.0], [18900.0, 12.0], [19100.0, 12.0], [19000.0, 9.0], [19400.0, 7.0], [19300.0, 7.0], [19600.0, 20.0], [19500.0, 23.0], [19800.0, 17.0], [19900.0, 19.0], [19700.0, 10.0], [20000.0, 12.0], [20100.0, 7.0], [20400.0, 18.0], [20300.0, 4.0], [20200.0, 4.0], [21300.0, 25.0], [20600.0, 13.0], [20500.0, 8.0], [20700.0, 17.0], [20800.0, 17.0], [20900.0, 27.0], [21000.0, 28.0], [21100.0, 44.0], [21200.0, 39.0], [21400.0, 27.0], [21500.0, 14.0], [21600.0, 19.0], [21700.0, 12.0], [21800.0, 15.0], [22000.0, 5.0], [21900.0, 5.0], [22200.0, 4.0], [22100.0, 7.0], [22500.0, 13.0], [22400.0, 2.0], [22600.0, 7.0], [22900.0, 15.0], [22800.0, 17.0], [22700.0, 12.0], [23000.0, 20.0], [23100.0, 7.0], [23200.0, 11.0], [23300.0, 10.0], [23400.0, 2.0], [23500.0, 1.0], [23600.0, 2.0], [23900.0, 3.0], [24100.0, 2.0], [24200.0, 1.0], [24300.0, 1.0], [24400.0, 1.0], [24800.0, 1.0], [24700.0, 1.0], [25000.0, 2.0], [26500.0, 1.0], [26900.0, 1.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 999.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 999.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 502.48199999999974, "minX": 1.7557611E12, "maxY": 502.48199999999974, "series": [{"data": [[1.7557611E12, 502.48199999999974]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557611E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4011.5, "minX": 1.0, "maxY": 26966.0, "series": [{"data": [[2.0, 26518.0], [3.0, 25063.0], [4.0, 25076.0], [5.0, 22629.0], [7.0, 24792.0], [9.0, 24228.5], [10.0, 24333.0], [11.0, 23948.0], [12.0, 24254.0], [13.0, 24157.0], [16.0, 23932.666666666668], [17.0, 23257.0], [18.0, 23415.0], [19.0, 23151.0], [20.0, 23622.0], [21.0, 23141.0], [22.0, 23243.0], [23.0, 23537.0], [24.0, 23091.0], [25.0, 23019.0], [26.0, 23313.0], [27.0, 23410.0], [28.0, 23386.0], [30.0, 22385.0], [31.0, 23067.0], [32.0, 23016.0], [35.0, 22364.0], [34.0, 22978.0], [37.0, 23038.0], [36.0, 22859.0], [39.0, 23001.0], [40.0, 20950.0], [42.0, 22879.0], [44.0, 23146.5], [48.0, 23296.0], [53.0, 22897.142857142855], [52.0, 23296.0], [56.0, 21321.0], [61.0, 22938.857142857145], [62.0, 23325.0], [67.0, 23207.5], [71.0, 22914.0], [75.0, 23077.0], [73.0, 22822.666666666668], [72.0, 22092.5], [79.0, 23156.0], [78.0, 23063.0], [77.0, 23274.0], [76.0, 22896.0], [83.0, 22735.0], [82.0, 22864.0], [81.0, 22877.0], [80.0, 22717.0], [87.0, 22868.0], [85.0, 23220.5], [91.0, 23123.0], [95.0, 22959.0], [94.0, 23119.0], [92.0, 23055.0], [99.0, 22919.5], [97.0, 22570.0], [96.0, 22561.0], [103.0, 22560.0], [102.0, 22730.5], [101.0, 23072.0], [106.0, 23051.0], [105.0, 22509.5], [111.0, 22542.0], [110.0, 22701.0], [108.0, 23064.5], [115.0, 23068.0], [114.0, 22546.0], [112.0, 22697.0], [119.0, 22250.0], [117.0, 23067.0], [116.0, 22733.0], [121.0, 22519.0], [127.0, 22799.0], [126.0, 23038.0], [125.0, 22946.0], [124.0, 22827.2], [135.0, 22455.0], [134.0, 22146.0], [133.0, 22641.666666666668], [130.0, 22789.0], [128.0, 22884.0], [143.0, 22615.625], [150.0, 19669.0], [149.0, 21930.0], [148.0, 21599.5], [146.0, 21379.0], [145.0, 22115.0], [144.0, 21842.0], [155.0, 21515.6], [166.0, 22104.0], [164.0, 21776.0], [163.0, 21904.5], [162.0, 21948.5], [161.0, 21985.0], [160.0, 22191.0], [175.0, 21986.0], [174.0, 21826.0], [173.0, 21661.0], [172.0, 21600.0], [171.0, 21744.0], [170.0, 22032.0], [169.0, 21764.666666666668], [183.0, 21805.0], [182.0, 21811.0], [176.0, 22035.0], [189.0, 21315.0], [187.0, 21484.0], [186.0, 21344.0], [185.0, 21664.5], [199.0, 20507.0], [197.0, 21681.666666666668], [196.0, 21825.5], [192.0, 21563.333333333332], [207.0, 21590.0], [202.0, 21834.5], [200.0, 21843.0], [212.0, 20208.0], [211.0, 21655.0], [208.0, 21669.0], [222.0, 19989.0], [221.0, 21531.5], [219.0, 20959.0], [218.0, 21334.5], [216.0, 21461.6], [230.0, 21487.5], [226.0, 21498.0], [225.0, 21597.666666666668], [236.0, 21535.0], [235.0, 21106.0], [242.0, 21368.5], [254.0, 21210.111111111113], [253.0, 21295.5], [252.0, 21472.0], [270.0, 21307.5], [268.0, 21412.2], [267.0, 20029.0], [262.0, 21148.5], [260.0, 19823.0], [259.0, 21228.0], [258.0, 21141.5], [256.0, 21331.0], [285.0, 20901.0], [281.0, 21105.0], [280.0, 21556.333333333332], [277.0, 21566.5], [275.0, 19893.0], [274.0, 21374.0], [273.0, 21332.0], [272.0, 20130.0], [301.0, 21034.0], [302.0, 21167.0], [300.0, 21370.333333333332], [299.0, 20962.0], [297.0, 21387.5], [296.0, 20867.0], [294.0, 21498.0], [292.0, 21121.0], [291.0, 21175.666666666668], [318.0, 20927.5], [319.0, 21105.666666666668], [317.0, 21354.0], [314.0, 19124.0], [312.0, 21056.0], [311.0, 19053.0], [308.0, 21385.666666666668], [307.0, 21402.0], [304.0, 20931.0], [335.0, 20988.0], [333.0, 21323.0], [332.0, 20289.0], [330.0, 20183.25], [326.0, 21264.0], [324.0, 21097.0], [321.0, 20783.666666666668], [320.0, 21247.0], [338.0, 21274.0], [351.0, 21398.0], [348.0, 20963.0], [346.0, 21129.0], [344.0, 21161.0], [343.0, 20042.5], [340.0, 21207.0], [337.0, 21139.0], [336.0, 20628.0], [367.0, 20797.0], [366.0, 21051.666666666668], [365.0, 21232.0], [363.0, 21188.0], [361.0, 21188.0], [355.0, 21112.0], [354.0, 21296.0], [353.0, 21187.2], [381.0, 19002.0], [382.0, 20209.0], [380.0, 20812.5], [379.0, 19052.0], [378.0, 20436.333333333332], [377.0, 21239.0], [376.0, 21212.0], [373.0, 21263.0], [369.0, 21210.0], [368.0, 20768.5], [370.0, 20105.0], [398.0, 20635.8], [392.0, 20974.0], [391.0, 21023.0], [390.0, 21188.0], [384.0, 20848.5], [403.0, 21019.0], [414.0, 21177.0], [413.0, 20583.75], [409.0, 21043.0], [407.0, 20263.0], [404.0, 21095.0], [402.0, 20086.0], [401.0, 21135.0], [400.0, 21254.0], [431.0, 21164.0], [427.0, 21150.0], [426.0, 20145.666666666668], [420.0, 20919.333333333336], [445.0, 18844.0], [444.0, 21148.0], [443.0, 20926.0], [442.0, 20880.2], [437.0, 20881.0], [435.0, 20616.833333333336], [434.0, 20114.666666666668], [432.0, 20376.0], [460.0, 21121.5], [462.0, 21128.0], [463.0, 20075.0], [461.0, 18836.0], [459.0, 20857.5], [456.0, 19045.0], [455.0, 21072.0], [449.0, 19087.0], [448.0, 20827.333333333332], [454.0, 21145.5], [453.0, 19563.0], [478.0, 21151.0], [479.0, 21057.0], [476.0, 20876.5], [473.0, 21171.0], [472.0, 20874.5], [471.0, 20655.0], [468.0, 19858.0], [467.0, 18835.0], [466.0, 20048.666666666668], [495.0, 20745.0], [494.0, 20823.0], [493.0, 18753.0], [492.0, 20967.0], [491.0, 20476.14285714286], [484.0, 20034.6], [480.0, 20921.0], [511.0, 20842.0], [509.0, 20725.0], [508.0, 19535.375], [505.0, 20428.0], [504.0, 20391.0], [498.0, 20478.0], [497.0, 20751.0], [496.0, 20491.0], [530.0, 20437.0], [543.0, 20167.0], [542.0, 19430.25], [538.0, 20243.0], [536.0, 20440.5], [527.0, 20083.333333333332], [514.0, 20557.0], [512.0, 18660.5], [518.0, 20886.0], [515.0, 20899.0], [526.0, 18405.0], [523.0, 20234.375], [535.0, 18073.0], [533.0, 19497.0], [532.0, 20497.0], [529.0, 20212.0], [528.0, 20406.0], [551.0, 17980.5], [569.0, 19889.0], [575.0, 19628.0], [568.0, 17739.0], [563.0, 19839.166666666668], [557.0, 19893.5], [555.0, 19852.333333333332], [552.0, 19989.0], [550.0, 19624.0], [549.0, 20054.5], [546.0, 19029.0], [544.0, 20413.0], [595.0, 20091.0], [604.0, 19218.222222222223], [602.0, 17796.0], [584.0, 19257.4375], [582.0, 19289.0], [583.0, 19580.0], [599.0, 19895.0], [598.0, 18307.5], [597.0, 20060.0], [594.0, 19652.0], [593.0, 19674.0], [592.0, 19132.333333333332], [623.0, 18584.555555555555], [636.0, 19588.0], [634.0, 19221.0], [631.0, 19003.125], [622.0, 17878.0], [621.0, 19740.0], [617.0, 19808.5], [616.0, 19749.0], [615.0, 18588.0], [614.0, 18879.5], [611.0, 19843.0], [667.0, 19375.9], [668.0, 19626.0], [666.0, 19855.5], [661.0, 17957.0], [660.0, 18121.0], [656.0, 19994.0], [655.0, 19092.0], [649.0, 19432.4], [644.0, 18737.5], [642.0, 19418.4], [640.0, 19153.0], [699.0, 18113.666666666668], [700.0, 19003.0], [697.0, 19382.0], [696.0, 19558.0], [694.0, 19159.0], [693.0, 18504.666666666668], [691.0, 19189.0], [690.0, 17527.0], [684.0, 18247.0], [677.0, 19477.14285714286], [676.0, 19159.0], [674.0, 17601.0], [682.0, 18721.0], [708.0, 17821.0], [732.0, 18376.0], [728.0, 18884.0], [725.0, 18038.5], [723.0, 18448.166666666668], [719.0, 18966.0], [716.0, 18211.749999999996], [706.0, 17980.0], [704.0, 19276.285714285717], [742.0, 18239.333333333332], [762.0, 16581.0], [766.0, 16957.0], [761.0, 17774.333333333336], [757.0, 18155.0], [754.0, 18259.4], [749.0, 18601.5], [747.0, 18667.0], [745.0, 18220.666666666668], [739.0, 18783.8], [737.0, 18765.0], [786.0, 18149.0], [798.0, 17038.75], [797.0, 18123.0], [796.0, 18067.0], [794.0, 16437.0], [783.0, 16294.0], [773.0, 18004.0], [782.0, 17073.0], [778.0, 16955.8], [791.0, 18105.666666666668], [788.0, 18119.0], [787.0, 16551.0], [785.0, 17133.0], [826.0, 16732.571428571428], [830.0, 15774.0], [831.0, 15558.0], [829.0, 17337.0], [828.0, 17086.0], [827.0, 15536.0], [815.0, 16340.25], [800.0, 17326.5], [802.0, 18219.0], [801.0, 16185.0], [804.0, 18175.0], [803.0, 18014.0], [807.0, 16867.0], [805.0, 18114.0], [813.0, 16059.0], [810.0, 16020.0], [809.0, 16102.0], [808.0, 16452.0], [819.0, 17652.0], [818.0, 16888.5], [816.0, 17710.0], [857.0, 12284.0], [850.0, 14686.0], [861.0, 12097.0], [862.0, 12508.0], [849.0, 13311.0], [848.0, 14410.0], [858.0, 12165.0], [856.0, 13318.0], [839.0, 14268.0], [838.0, 14477.0], [837.0, 16211.0], [836.0, 16152.0], [835.0, 14604.0], [834.0, 16757.0], [833.0, 16428.0], [832.0, 15462.0], [847.0, 13099.0], [846.0, 15103.0], [845.0, 14825.0], [844.0, 13694.0], [843.0, 14425.0], [842.0, 14010.0], [841.0, 14385.0], [840.0, 15848.0], [853.0, 13597.0], [852.0, 13154.0], [851.0, 13733.0], [888.0, 11308.0], [893.0, 10826.0], [895.0, 10305.0], [880.0, 9981.0], [892.0, 11072.0], [891.0, 9855.5], [889.0, 9602.0], [879.0, 11310.0], [865.0, 11366.0], [864.0, 12143.5], [867.0, 11367.0], [866.0, 11287.0], [869.0, 11121.0], [868.0, 11102.0], [871.0, 12272.0], [870.0, 11115.0], [878.0, 11517.0], [877.0, 9870.0], [876.0, 10341.0], [875.0, 11617.0], [874.0, 11917.0], [873.0, 10808.0], [872.0, 10668.0], [887.0, 10368.0], [886.0, 10226.5], [884.0, 11269.0], [883.0, 10801.333333333334], [926.0, 9888.0], [927.0, 9634.0], [914.0, 10610.0], [913.0, 10052.0], [916.0, 10233.0], [915.0, 10804.0], [925.0, 9886.0], [923.0, 9083.0], [922.0, 8847.0], [921.0, 8880.0], [920.0, 8756.0], [901.0, 10111.666666666666], [898.0, 9978.333333333334], [909.0, 10542.0], [908.0, 10860.0], [907.0, 10441.0], [906.0, 10637.0], [904.0, 10494.0], [919.0, 10595.0], [918.0, 9656.0], [952.0, 8907.666666666666], [956.0, 7421.0], [957.0, 7694.0], [955.0, 8512.0], [954.0, 8799.0], [953.0, 8676.0], [942.0, 8033.0], [928.0, 9564.0], [931.0, 9878.0], [929.0, 9588.0], [935.0, 8348.0], [934.0, 8805.333333333334], [941.0, 8225.0], [940.0, 8793.0], [938.0, 9157.0], [937.0, 9363.0], [936.0, 8182.0], [949.0, 9081.0], [948.0, 9351.0], [946.0, 8671.25], [990.0, 6560.0], [984.0, 4011.5], [965.0, 7762.0], [964.0, 8731.0], [963.0, 8340.0], [962.0, 7269.0], [961.0, 8611.0], [975.0, 8095.5], [973.0, 8380.75], [969.0, 7022.0], [968.0, 7721.666666666667], [991.0, 7220.0], [989.0, 6448.5], [987.0, 8121.0], [986.0, 7855.666666666667], [985.0, 8396.0], [983.0, 8054.0], [980.0, 8460.0], [979.0, 7418.666666666667], [976.0, 7727.0], [999.0, 6152.0], [998.0, 4582.0], [997.0, 6525.0], [995.0, 6079.0], [994.0, 6545.0], [993.0, 5741.0], [992.0, 6227.0], [1.0, 26966.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}, {"data": [[502.47800000000046, 18677.48999999999]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 999.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14804.816666666668, "minX": 1.7557611E12, "maxY": 19330.65, "series": [{"data": [[1.7557611E12, 14804.816666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7557611E12, 19330.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557611E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 18677.48999999999, "minX": 1.7557611E12, "maxY": 18677.48999999999, "series": [{"data": [[1.7557611E12, 18677.48999999999]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557611E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 18677.44100000002, "minX": 1.7557611E12, "maxY": 18677.44100000002, "series": [{"data": [[1.7557611E12, 18677.44100000002]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557611E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1751.2930000000003, "minX": 1.7557611E12, "maxY": 1751.2930000000003, "series": [{"data": [[1.7557611E12, 1751.2930000000003]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557611E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 4582.0, "minX": 1.7557611E12, "maxY": 26966.0, "series": [{"data": [[1.7557611E12, 26966.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7557611E12, 22799.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7557611E12, 24176.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7557611E12, 23091.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7557611E12, 4582.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7557611E12, 20020.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557611E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 26742.0, "series": [{"data": [[132.0, 20650.5], [2.0, 26742.0], [35.0, 8233.0], [10.0, 24409.0], [170.0, 19543.0], [11.0, 11287.0], [12.0, 12396.0], [53.0, 22735.0], [1.0, 6152.0], [269.0, 21247.0], [5.0, 10159.5], [80.0, 23023.5], [85.0, 18164.0], [22.0, 10847.0], [6.0, 10609.0], [27.0, 9081.0], [7.0, 14385.0], [30.0, 10219.5], [31.0, 16452.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 11.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 269.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 26742.0, "series": [{"data": [[132.0, 20650.5], [2.0, 26742.0], [35.0, 8233.0], [10.0, 24409.0], [170.0, 19543.0], [11.0, 11287.0], [12.0, 12396.0], [53.0, 22735.0], [1.0, 6147.0], [269.0, 21247.0], [5.0, 10159.5], [80.0, 23023.5], [85.0, 18164.0], [22.0, 10847.0], [6.0, 10609.0], [27.0, 9081.0], [7.0, 14385.0], [30.0, 10219.0], [31.0, 16452.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 269.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557611E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557611E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557611E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7557611E12, "maxY": 16.65, "series": [{"data": [[1.7557611E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.7557611E12, 16.65]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557611E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7557611E12, "maxY": 16.65, "series": [{"data": [[1.7557611E12, 0.016666666666666666]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-failure", "isController": false}, {"data": [[1.7557611E12, 16.65]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557611E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7557611E12, "maxY": 16.65, "series": [{"data": [[1.7557611E12, 16.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7557611E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557611E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

