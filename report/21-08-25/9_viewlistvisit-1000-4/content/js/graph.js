/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 22.0, "minX": 0.0, "maxY": 2895.0, "series": [{"data": [[0.0, 22.0], [0.1, 23.0], [0.2, 23.0], [0.3, 23.0], [0.4, 24.0], [0.5, 24.0], [0.6, 24.0], [0.7, 24.0], [0.8, 24.0], [0.9, 24.0], [1.0, 24.0], [1.1, 25.0], [1.2, 25.0], [1.3, 25.0], [1.4, 25.0], [1.5, 25.0], [1.6, 25.0], [1.7, 25.0], [1.8, 25.0], [1.9, 25.0], [2.0, 25.0], [2.1, 26.0], [2.2, 26.0], [2.3, 26.0], [2.4, 26.0], [2.5, 26.0], [2.6, 26.0], [2.7, 26.0], [2.8, 26.0], [2.9, 26.0], [3.0, 26.0], [3.1, 26.0], [3.2, 26.0], [3.3, 26.0], [3.4, 26.0], [3.5, 27.0], [3.6, 27.0], [3.7, 27.0], [3.8, 27.0], [3.9, 27.0], [4.0, 27.0], [4.1, 27.0], [4.2, 27.0], [4.3, 27.0], [4.4, 27.0], [4.5, 28.0], [4.6, 28.0], [4.7, 28.0], [4.8, 28.0], [4.9, 28.0], [5.0, 28.0], [5.1, 28.0], [5.2, 28.0], [5.3, 28.0], [5.4, 28.0], [5.5, 28.0], [5.6, 28.0], [5.7, 28.0], [5.8, 28.0], [5.9, 28.0], [6.0, 28.0], [6.1, 28.0], [6.2, 28.0], [6.3, 28.0], [6.4, 28.0], [6.5, 29.0], [6.6, 29.0], [6.7, 29.0], [6.8, 29.0], [6.9, 29.0], [7.0, 29.0], [7.1, 29.0], [7.2, 29.0], [7.3, 29.0], [7.4, 29.0], [7.5, 29.0], [7.6, 29.0], [7.7, 29.0], [7.8, 29.0], [7.9, 30.0], [8.0, 30.0], [8.1, 30.0], [8.2, 30.0], [8.3, 30.0], [8.4, 30.0], [8.5, 30.0], [8.6, 30.0], [8.7, 30.0], [8.8, 30.0], [8.9, 30.0], [9.0, 30.0], [9.1, 30.0], [9.2, 30.0], [9.3, 30.0], [9.4, 31.0], [9.5, 31.0], [9.6, 31.0], [9.7, 31.0], [9.8, 31.0], [9.9, 31.0], [10.0, 31.0], [10.1, 31.0], [10.2, 31.0], [10.3, 31.0], [10.4, 31.0], [10.5, 31.0], [10.6, 31.0], [10.7, 31.0], [10.8, 31.0], [10.9, 31.0], [11.0, 31.0], [11.1, 31.0], [11.2, 31.0], [11.3, 32.0], [11.4, 32.0], [11.5, 32.0], [11.6, 32.0], [11.7, 32.0], [11.8, 32.0], [11.9, 32.0], [12.0, 32.0], [12.1, 32.0], [12.2, 32.0], [12.3, 32.0], [12.4, 32.0], [12.5, 32.0], [12.6, 33.0], [12.7, 33.0], [12.8, 33.0], [12.9, 33.0], [13.0, 33.0], [13.1, 33.0], [13.2, 33.0], [13.3, 33.0], [13.4, 33.0], [13.5, 33.0], [13.6, 34.0], [13.7, 34.0], [13.8, 34.0], [13.9, 34.0], [14.0, 34.0], [14.1, 34.0], [14.2, 34.0], [14.3, 34.0], [14.4, 34.0], [14.5, 35.0], [14.6, 35.0], [14.7, 35.0], [14.8, 35.0], [14.9, 35.0], [15.0, 35.0], [15.1, 35.0], [15.2, 36.0], [15.3, 36.0], [15.4, 36.0], [15.5, 36.0], [15.6, 36.0], [15.7, 36.0], [15.8, 36.0], [15.9, 36.0], [16.0, 37.0], [16.1, 37.0], [16.2, 37.0], [16.3, 37.0], [16.4, 37.0], [16.5, 38.0], [16.6, 38.0], [16.7, 38.0], [16.8, 38.0], [16.9, 38.0], [17.0, 38.0], [17.1, 38.0], [17.2, 38.0], [17.3, 39.0], [17.4, 39.0], [17.5, 39.0], [17.6, 39.0], [17.7, 39.0], [17.8, 39.0], [17.9, 39.0], [18.0, 40.0], [18.1, 41.0], [18.2, 41.0], [18.3, 41.0], [18.4, 41.0], [18.5, 41.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 43.0], [19.3, 43.0], [19.4, 44.0], [19.5, 44.0], [19.6, 44.0], [19.7, 46.0], [19.8, 47.0], [19.9, 48.0], [20.0, 48.0], [20.1, 51.0], [20.2, 52.0], [20.3, 52.0], [20.4, 53.0], [20.5, 53.0], [20.6, 53.0], [20.7, 54.0], [20.8, 57.0], [20.9, 57.0], [21.0, 57.0], [21.1, 58.0], [21.2, 58.0], [21.3, 59.0], [21.4, 59.0], [21.5, 62.0], [21.6, 63.0], [21.7, 66.0], [21.8, 67.0], [21.9, 69.0], [22.0, 72.0], [22.1, 85.0], [22.2, 87.0], [22.3, 89.0], [22.4, 91.0], [22.5, 91.0], [22.6, 95.0], [22.7, 96.0], [22.8, 96.0], [22.9, 98.0], [23.0, 106.0], [23.1, 112.0], [23.2, 117.0], [23.3, 131.0], [23.4, 131.0], [23.5, 132.0], [23.6, 163.0], [23.7, 165.0], [23.8, 165.0], [23.9, 183.0], [24.0, 185.0], [24.1, 187.0], [24.2, 197.0], [24.3, 198.0], [24.4, 217.0], [24.5, 218.0], [24.6, 221.0], [24.7, 228.0], [24.8, 231.0], [24.9, 234.0], [25.0, 238.0], [25.1, 245.0], [25.2, 255.0], [25.3, 259.0], [25.4, 262.0], [25.5, 270.0], [25.6, 277.0], [25.7, 288.0], [25.8, 289.0], [25.9, 302.0], [26.0, 312.0], [26.1, 319.0], [26.2, 323.0], [26.3, 329.0], [26.4, 347.0], [26.5, 347.0], [26.6, 349.0], [26.7, 351.0], [26.8, 385.0], [26.9, 391.0], [27.0, 392.0], [27.1, 398.0], [27.2, 402.0], [27.3, 405.0], [27.4, 412.0], [27.5, 447.0], [27.6, 448.0], [27.7, 451.0], [27.8, 452.0], [27.9, 487.0], [28.0, 492.0], [28.1, 492.0], [28.2, 501.0], [28.3, 505.0], [28.4, 510.0], [28.5, 512.0], [28.6, 515.0], [28.7, 517.0], [28.8, 518.0], [28.9, 521.0], [29.0, 526.0], [29.1, 551.0], [29.2, 557.0], [29.3, 557.0], [29.4, 558.0], [29.5, 564.0], [29.6, 584.0], [29.7, 586.0], [29.8, 586.0], [29.9, 589.0], [30.0, 589.0], [30.1, 594.0], [30.2, 601.0], [30.3, 604.0], [30.4, 604.0], [30.5, 617.0], [30.6, 622.0], [30.7, 625.0], [30.8, 626.0], [30.9, 639.0], [31.0, 640.0], [31.1, 645.0], [31.2, 649.0], [31.3, 665.0], [31.4, 665.0], [31.5, 667.0], [31.6, 667.0], [31.7, 670.0], [31.8, 677.0], [31.9, 690.0], [32.0, 691.0], [32.1, 696.0], [32.2, 700.0], [32.3, 702.0], [32.4, 704.0], [32.5, 710.0], [32.6, 716.0], [32.7, 717.0], [32.8, 720.0], [32.9, 720.0], [33.0, 723.0], [33.1, 729.0], [33.2, 734.0], [33.3, 735.0], [33.4, 738.0], [33.5, 770.0], [33.6, 773.0], [33.7, 778.0], [33.8, 795.0], [33.9, 805.0], [34.0, 840.0], [34.1, 841.0], [34.2, 850.0], [34.3, 857.0], [34.4, 879.0], [34.5, 881.0], [34.6, 890.0], [34.7, 891.0], [34.8, 892.0], [34.9, 903.0], [35.0, 906.0], [35.1, 907.0], [35.2, 909.0], [35.3, 909.0], [35.4, 914.0], [35.5, 915.0], [35.6, 915.0], [35.7, 924.0], [35.8, 928.0], [35.9, 929.0], [36.0, 930.0], [36.1, 933.0], [36.2, 935.0], [36.3, 937.0], [36.4, 938.0], [36.5, 954.0], [36.6, 956.0], [36.7, 958.0], [36.8, 958.0], [36.9, 958.0], [37.0, 960.0], [37.1, 961.0], [37.2, 962.0], [37.3, 963.0], [37.4, 964.0], [37.5, 966.0], [37.6, 967.0], [37.7, 970.0], [37.8, 988.0], [37.9, 991.0], [38.0, 996.0], [38.1, 998.0], [38.2, 1005.0], [38.3, 1006.0], [38.4, 1010.0], [38.5, 1013.0], [38.6, 1016.0], [38.7, 1022.0], [38.8, 1023.0], [38.9, 1033.0], [39.0, 1034.0], [39.1, 1037.0], [39.2, 1039.0], [39.3, 1039.0], [39.4, 1050.0], [39.5, 1056.0], [39.6, 1056.0], [39.7, 1058.0], [39.8, 1060.0], [39.9, 1062.0], [40.0, 1063.0], [40.1, 1065.0], [40.2, 1067.0], [40.3, 1069.0], [40.4, 1075.0], [40.5, 1076.0], [40.6, 1081.0], [40.7, 1088.0], [40.8, 1096.0], [40.9, 1101.0], [41.0, 1118.0], [41.1, 1121.0], [41.2, 1123.0], [41.3, 1126.0], [41.4, 1126.0], [41.5, 1128.0], [41.6, 1136.0], [41.7, 1139.0], [41.8, 1140.0], [41.9, 1143.0], [42.0, 1145.0], [42.1, 1147.0], [42.2, 1151.0], [42.3, 1152.0], [42.4, 1152.0], [42.5, 1154.0], [42.6, 1158.0], [42.7, 1163.0], [42.8, 1164.0], [42.9, 1164.0], [43.0, 1168.0], [43.1, 1170.0], [43.2, 1170.0], [43.3, 1173.0], [43.4, 1175.0], [43.5, 1178.0], [43.6, 1179.0], [43.7, 1183.0], [43.8, 1184.0], [43.9, 1189.0], [44.0, 1189.0], [44.1, 1194.0], [44.2, 1194.0], [44.3, 1196.0], [44.4, 1198.0], [44.5, 1198.0], [44.6, 1200.0], [44.7, 1201.0], [44.8, 1202.0], [44.9, 1208.0], [45.0, 1209.0], [45.1, 1210.0], [45.2, 1212.0], [45.3, 1212.0], [45.4, 1214.0], [45.5, 1221.0], [45.6, 1222.0], [45.7, 1222.0], [45.8, 1223.0], [45.9, 1230.0], [46.0, 1231.0], [46.1, 1234.0], [46.2, 1235.0], [46.3, 1237.0], [46.4, 1238.0], [46.5, 1239.0], [46.6, 1242.0], [46.7, 1244.0], [46.8, 1248.0], [46.9, 1253.0], [47.0, 1254.0], [47.1, 1254.0], [47.2, 1255.0], [47.3, 1255.0], [47.4, 1256.0], [47.5, 1259.0], [47.6, 1262.0], [47.7, 1262.0], [47.8, 1264.0], [47.9, 1265.0], [48.0, 1270.0], [48.1, 1288.0], [48.2, 1291.0], [48.3, 1303.0], [48.4, 1306.0], [48.5, 1307.0], [48.6, 1309.0], [48.7, 1314.0], [48.8, 1315.0], [48.9, 1315.0], [49.0, 1320.0], [49.1, 1324.0], [49.2, 1325.0], [49.3, 1331.0], [49.4, 1332.0], [49.5, 1333.0], [49.6, 1337.0], [49.7, 1340.0], [49.8, 1343.0], [49.9, 1349.0], [50.0, 1354.0], [50.1, 1362.0], [50.2, 1362.0], [50.3, 1362.0], [50.4, 1364.0], [50.5, 1370.0], [50.6, 1373.0], [50.7, 1373.0], [50.8, 1375.0], [50.9, 1378.0], [51.0, 1378.0], [51.1, 1380.0], [51.2, 1383.0], [51.3, 1388.0], [51.4, 1389.0], [51.5, 1391.0], [51.6, 1398.0], [51.7, 1398.0], [51.8, 1398.0], [51.9, 1399.0], [52.0, 1406.0], [52.1, 1408.0], [52.2, 1408.0], [52.3, 1413.0], [52.4, 1414.0], [52.5, 1415.0], [52.6, 1419.0], [52.7, 1424.0], [52.8, 1427.0], [52.9, 1430.0], [53.0, 1432.0], [53.1, 1433.0], [53.2, 1435.0], [53.3, 1437.0], [53.4, 1438.0], [53.5, 1438.0], [53.6, 1452.0], [53.7, 1453.0], [53.8, 1459.0], [53.9, 1464.0], [54.0, 1469.0], [54.1, 1475.0], [54.2, 1475.0], [54.3, 1479.0], [54.4, 1488.0], [54.5, 1498.0], [54.6, 1500.0], [54.7, 1502.0], [54.8, 1505.0], [54.9, 1507.0], [55.0, 1511.0], [55.1, 1514.0], [55.2, 1515.0], [55.3, 1518.0], [55.4, 1522.0], [55.5, 1523.0], [55.6, 1523.0], [55.7, 1524.0], [55.8, 1533.0], [55.9, 1537.0], [56.0, 1545.0], [56.1, 1554.0], [56.2, 1570.0], [56.3, 1571.0], [56.4, 1572.0], [56.5, 1576.0], [56.6, 1581.0], [56.7, 1583.0], [56.8, 1593.0], [56.9, 1596.0], [57.0, 1607.0], [57.1, 1607.0], [57.2, 1608.0], [57.3, 1610.0], [57.4, 1610.0], [57.5, 1612.0], [57.6, 1616.0], [57.7, 1622.0], [57.8, 1627.0], [57.9, 1628.0], [58.0, 1633.0], [58.1, 1633.0], [58.2, 1636.0], [58.3, 1644.0], [58.4, 1653.0], [58.5, 1653.0], [58.6, 1655.0], [58.7, 1656.0], [58.8, 1659.0], [58.9, 1660.0], [59.0, 1661.0], [59.1, 1662.0], [59.2, 1663.0], [59.3, 1664.0], [59.4, 1665.0], [59.5, 1672.0], [59.6, 1673.0], [59.7, 1675.0], [59.8, 1678.0], [59.9, 1679.0], [60.0, 1682.0], [60.1, 1682.0], [60.2, 1684.0], [60.3, 1694.0], [60.4, 1696.0], [60.5, 1701.0], [60.6, 1721.0], [60.7, 1740.0], [60.8, 1742.0], [60.9, 1748.0], [61.0, 1751.0], [61.1, 1753.0], [61.2, 1758.0], [61.3, 1759.0], [61.4, 1763.0], [61.5, 1767.0], [61.6, 1772.0], [61.7, 1772.0], [61.8, 1784.0], [61.9, 1786.0], [62.0, 1787.0], [62.1, 1788.0], [62.2, 1797.0], [62.3, 1799.0], [62.4, 1801.0], [62.5, 1810.0], [62.6, 1813.0], [62.7, 1818.0], [62.8, 1830.0], [62.9, 1836.0], [63.0, 1876.0], [63.1, 1890.0], [63.2, 1894.0], [63.3, 1915.0], [63.4, 1920.0], [63.5, 1922.0], [63.6, 1923.0], [63.7, 1924.0], [63.8, 1926.0], [63.9, 1928.0], [64.0, 1931.0], [64.1, 1931.0], [64.2, 1932.0], [64.3, 1937.0], [64.4, 1939.0], [64.5, 1939.0], [64.6, 1942.0], [64.7, 1944.0], [64.8, 1945.0], [64.9, 1953.0], [65.0, 1969.0], [65.1, 1976.0], [65.2, 1978.0], [65.3, 1985.0], [65.4, 2017.0], [65.5, 2025.0], [65.6, 2025.0], [65.7, 2029.0], [65.8, 2031.0], [65.9, 2039.0], [66.0, 2041.0], [66.1, 2047.0], [66.2, 2048.0], [66.3, 2054.0], [66.4, 2064.0], [66.5, 2074.0], [66.6, 2084.0], [66.7, 2089.0], [66.8, 2098.0], [66.9, 2109.0], [67.0, 2111.0], [67.1, 2122.0], [67.2, 2134.0], [67.3, 2142.0], [67.4, 2143.0], [67.5, 2156.0], [67.6, 2157.0], [67.7, 2158.0], [67.8, 2159.0], [67.9, 2162.0], [68.0, 2163.0], [68.1, 2173.0], [68.2, 2179.0], [68.3, 2180.0], [68.4, 2184.0], [68.5, 2186.0], [68.6, 2190.0], [68.7, 2190.0], [68.8, 2193.0], [68.9, 2199.0], [69.0, 2202.0], [69.1, 2204.0], [69.2, 2204.0], [69.3, 2206.0], [69.4, 2209.0], [69.5, 2220.0], [69.6, 2221.0], [69.7, 2222.0], [69.8, 2232.0], [69.9, 2235.0], [70.0, 2240.0], [70.1, 2254.0], [70.2, 2261.0], [70.3, 2267.0], [70.4, 2268.0], [70.5, 2269.0], [70.6, 2271.0], [70.7, 2272.0], [70.8, 2274.0], [70.9, 2275.0], [71.0, 2278.0], [71.1, 2281.0], [71.2, 2282.0], [71.3, 2284.0], [71.4, 2285.0], [71.5, 2289.0], [71.6, 2290.0], [71.7, 2294.0], [71.8, 2298.0], [71.9, 2298.0], [72.0, 2299.0], [72.1, 2302.0], [72.2, 2303.0], [72.3, 2309.0], [72.4, 2311.0], [72.5, 2316.0], [72.6, 2316.0], [72.7, 2319.0], [72.8, 2320.0], [72.9, 2321.0], [73.0, 2323.0], [73.1, 2323.0], [73.2, 2325.0], [73.3, 2325.0], [73.4, 2328.0], [73.5, 2329.0], [73.6, 2330.0], [73.7, 2331.0], [73.8, 2332.0], [73.9, 2338.0], [74.0, 2339.0], [74.1, 2342.0], [74.2, 2342.0], [74.3, 2351.0], [74.4, 2352.0], [74.5, 2354.0], [74.6, 2356.0], [74.7, 2359.0], [74.8, 2361.0], [74.9, 2361.0], [75.0, 2362.0], [75.1, 2362.0], [75.2, 2370.0], [75.3, 2370.0], [75.4, 2371.0], [75.5, 2374.0], [75.6, 2375.0], [75.7, 2383.0], [75.8, 2394.0], [75.9, 2394.0], [76.0, 2394.0], [76.1, 2396.0], [76.2, 2396.0], [76.3, 2404.0], [76.4, 2404.0], [76.5, 2405.0], [76.6, 2409.0], [76.7, 2418.0], [76.8, 2419.0], [76.9, 2421.0], [77.0, 2424.0], [77.1, 2427.0], [77.2, 2431.0], [77.3, 2433.0], [77.4, 2433.0], [77.5, 2436.0], [77.6, 2437.0], [77.7, 2443.0], [77.8, 2443.0], [77.9, 2446.0], [78.0, 2449.0], [78.1, 2449.0], [78.2, 2452.0], [78.3, 2460.0], [78.4, 2460.0], [78.5, 2464.0], [78.6, 2466.0], [78.7, 2470.0], [78.8, 2472.0], [78.9, 2481.0], [79.0, 2482.0], [79.1, 2483.0], [79.2, 2483.0], [79.3, 2487.0], [79.4, 2487.0], [79.5, 2488.0], [79.6, 2488.0], [79.7, 2489.0], [79.8, 2493.0], [79.9, 2494.0], [80.0, 2495.0], [80.1, 2496.0], [80.2, 2499.0], [80.3, 2501.0], [80.4, 2502.0], [80.5, 2503.0], [80.6, 2505.0], [80.7, 2505.0], [80.8, 2505.0], [80.9, 2508.0], [81.0, 2508.0], [81.1, 2511.0], [81.2, 2513.0], [81.3, 2515.0], [81.4, 2516.0], [81.5, 2516.0], [81.6, 2516.0], [81.7, 2517.0], [81.8, 2518.0], [81.9, 2522.0], [82.0, 2522.0], [82.1, 2530.0], [82.2, 2533.0], [82.3, 2533.0], [82.4, 2534.0], [82.5, 2536.0], [82.6, 2536.0], [82.7, 2541.0], [82.8, 2542.0], [82.9, 2548.0], [83.0, 2550.0], [83.1, 2553.0], [83.2, 2554.0], [83.3, 2557.0], [83.4, 2559.0], [83.5, 2560.0], [83.6, 2571.0], [83.7, 2572.0], [83.8, 2574.0], [83.9, 2574.0], [84.0, 2577.0], [84.1, 2577.0], [84.2, 2577.0], [84.3, 2579.0], [84.4, 2582.0], [84.5, 2584.0], [84.6, 2585.0], [84.7, 2587.0], [84.8, 2593.0], [84.9, 2597.0], [85.0, 2598.0], [85.1, 2599.0], [85.2, 2601.0], [85.3, 2602.0], [85.4, 2609.0], [85.5, 2611.0], [85.6, 2614.0], [85.7, 2614.0], [85.8, 2615.0], [85.9, 2616.0], [86.0, 2617.0], [86.1, 2623.0], [86.2, 2627.0], [86.3, 2627.0], [86.4, 2630.0], [86.5, 2630.0], [86.6, 2630.0], [86.7, 2638.0], [86.8, 2639.0], [86.9, 2641.0], [87.0, 2646.0], [87.1, 2646.0], [87.2, 2647.0], [87.3, 2647.0], [87.4, 2647.0], [87.5, 2648.0], [87.6, 2651.0], [87.7, 2652.0], [87.8, 2654.0], [87.9, 2662.0], [88.0, 2665.0], [88.1, 2667.0], [88.2, 2669.0], [88.3, 2669.0], [88.4, 2671.0], [88.5, 2685.0], [88.6, 2691.0], [88.7, 2693.0], [88.8, 2694.0], [88.9, 2695.0], [89.0, 2697.0], [89.1, 2699.0], [89.2, 2704.0], [89.3, 2704.0], [89.4, 2706.0], [89.5, 2707.0], [89.6, 2707.0], [89.7, 2709.0], [89.8, 2710.0], [89.9, 2711.0], [90.0, 2713.0], [90.1, 2713.0], [90.2, 2714.0], [90.3, 2714.0], [90.4, 2715.0], [90.5, 2717.0], [90.6, 2717.0], [90.7, 2719.0], [90.8, 2724.0], [90.9, 2725.0], [91.0, 2725.0], [91.1, 2726.0], [91.2, 2727.0], [91.3, 2727.0], [91.4, 2729.0], [91.5, 2729.0], [91.6, 2730.0], [91.7, 2730.0], [91.8, 2731.0], [91.9, 2731.0], [92.0, 2732.0], [92.1, 2733.0], [92.2, 2733.0], [92.3, 2734.0], [92.4, 2737.0], [92.5, 2739.0], [92.6, 2742.0], [92.7, 2742.0], [92.8, 2743.0], [92.9, 2743.0], [93.0, 2744.0], [93.1, 2745.0], [93.2, 2745.0], [93.3, 2745.0], [93.4, 2746.0], [93.5, 2747.0], [93.6, 2747.0], [93.7, 2749.0], [93.8, 2750.0], [93.9, 2755.0], [94.0, 2755.0], [94.1, 2757.0], [94.2, 2759.0], [94.3, 2761.0], [94.4, 2761.0], [94.5, 2761.0], [94.6, 2762.0], [94.7, 2762.0], [94.8, 2763.0], [94.9, 2764.0], [95.0, 2766.0], [95.1, 2766.0], [95.2, 2766.0], [95.3, 2771.0], [95.4, 2773.0], [95.5, 2775.0], [95.6, 2779.0], [95.7, 2780.0], [95.8, 2787.0], [95.9, 2794.0], [96.0, 2797.0], [96.1, 2797.0], [96.2, 2798.0], [96.3, 2800.0], [96.4, 2800.0], [96.5, 2805.0], [96.6, 2809.0], [96.7, 2822.0], [96.8, 2823.0], [96.9, 2828.0], [97.0, 2834.0], [97.1, 2839.0], [97.2, 2847.0], [97.3, 2847.0], [97.4, 2849.0], [97.5, 2851.0], [97.6, 2852.0], [97.7, 2854.0], [97.8, 2854.0], [97.9, 2865.0], [98.0, 2865.0], [98.1, 2866.0], [98.2, 2866.0], [98.3, 2867.0], [98.4, 2869.0], [98.5, 2873.0], [98.6, 2877.0], [98.7, 2877.0], [98.8, 2880.0], [98.9, 2882.0], [99.0, 2884.0], [99.1, 2884.0], [99.2, 2885.0], [99.3, 2886.0], [99.4, 2886.0], [99.5, 2886.0], [99.6, 2887.0], [99.7, 2887.0], [99.8, 2887.0], [99.9, 2895.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 229.0, "series": [{"data": [[0.0, 229.0], [600.0, 20.0], [700.0, 17.0], [800.0, 10.0], [900.0, 33.0], [1000.0, 27.0], [1100.0, 37.0], [1200.0, 37.0], [1300.0, 37.0], [1400.0, 26.0], [1500.0, 24.0], [100.0, 14.0], [1600.0, 35.0], [1700.0, 19.0], [1800.0, 9.0], [1900.0, 21.0], [2000.0, 15.0], [2100.0, 21.0], [2200.0, 31.0], [2300.0, 42.0], [2400.0, 41.0], [2500.0, 49.0], [2600.0, 40.0], [2700.0, 71.0], [2800.0, 37.0], [200.0, 15.0], [300.0, 13.0], [400.0, 10.0], [500.0, 20.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 265.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 454.0, "series": [{"data": [[0.0, 281.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 265.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 454.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 486.2530000000015, "minX": 1.75576824E12, "maxY": 486.2530000000015, "series": [{"data": [[1.75576824E12, 486.2530000000015]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576824E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.0, "minX": 2.0, "maxY": 2887.0, "series": [{"data": [[2.0, 2876.5], [6.0, 2887.0], [7.0, 2878.3333333333335], [10.0, 2865.0], [11.0, 2877.5], [12.0, 2887.0], [13.0, 2834.0], [15.0, 2843.0], [17.0, 2870.0], [18.0, 2877.0], [19.0, 2707.0], [21.0, 2881.0], [22.0, 2873.0], [23.0, 2869.0], [24.0, 2880.0], [25.0, 2775.0], [26.0, 2865.0], [27.0, 2822.0], [29.0, 2858.5], [31.0, 2677.5], [33.0, 2852.0], [32.0, 2847.0], [35.0, 2839.0], [34.0, 2849.0], [37.0, 2614.0], [36.0, 2669.0], [39.0, 2809.0], [38.0, 2828.0], [41.0, 2797.0], [40.0, 2779.0], [43.0, 2651.0], [42.0, 2654.0], [45.0, 2717.0], [44.0, 2823.0], [49.0, 2805.0], [48.0, 2632.3333333333335], [50.0, 2800.0], [52.0, 2779.0], [55.0, 2771.0], [54.0, 2558.5], [57.0, 2763.0], [59.0, 2609.0], [58.0, 2798.0], [61.0, 2764.0], [60.0, 2616.0], [63.0, 2548.0], [62.0, 2759.0], [67.0, 2766.0], [66.0, 2602.0], [65.0, 2765.0], [71.0, 2766.0], [70.0, 2669.0], [69.0, 2780.0], [68.0, 2766.0], [75.0, 2755.0], [74.0, 2761.0], [73.0, 2674.5], [79.0, 2733.0], [78.0, 2701.0], [76.0, 2536.0], [81.0, 2285.0], [80.0, 2729.0], [86.0, 2745.0], [84.0, 2729.5], [90.0, 2743.75], [88.0, 2745.0], [95.0, 2745.0], [94.0, 2697.0], [93.0, 2726.0], [92.0, 2747.0], [99.0, 2697.0], [97.0, 2697.0], [96.0, 2744.0], [102.0, 2691.0], [101.0, 2723.5], [107.0, 2699.0], [106.0, 2501.5], [104.0, 2717.0], [111.0, 2708.5], [110.0, 2733.0], [114.0, 2741.0], [116.0, 2450.5], [122.0, 2743.0], [121.0, 2727.0], [120.0, 2693.0], [127.0, 2694.0], [126.0, 2657.5], [134.0, 2630.0], [133.0, 2611.0], [132.0, 2487.0], [131.0, 2615.0], [130.0, 2693.0], [129.0, 2704.0], [128.0, 2557.0], [143.0, 2730.0], [142.0, 2714.0], [141.0, 2716.0], [139.0, 2725.0], [138.0, 2627.0], [136.0, 2679.5], [149.0, 2652.0], [147.0, 2601.0], [146.0, 2597.0], [145.0, 2713.0], [144.0, 2599.0], [159.0, 2685.0], [158.0, 2585.0], [157.0, 2612.0], [155.0, 2665.0], [154.0, 2574.0], [153.0, 2711.0], [152.0, 2594.0], [167.0, 2483.0], [166.0, 2488.0], [165.0, 2638.0], [164.0, 2489.0], [163.0, 2667.0], [162.0, 2578.5], [160.0, 2671.0], [175.0, 2555.5], [173.0, 2530.0], [172.0, 2600.0], [170.0, 2647.0], [169.0, 2482.0], [182.0, 2452.0], [181.0, 2617.0], [180.0, 2582.0], [179.0, 2533.0], [178.0, 2460.0], [177.0, 2551.0], [191.0, 2433.0], [190.0, 2436.0], [189.0, 2504.0], [187.0, 2433.0], [186.0, 2443.0], [185.0, 2437.0], [184.0, 2544.5], [199.0, 2577.0], [198.0, 2409.0], [197.0, 2574.0], [196.0, 2579.0], [195.0, 2577.0], [194.0, 2419.0], [193.0, 2418.0], [192.0, 2505.0], [206.0, 2405.0], [205.0, 2396.0], [204.0, 2542.0], [203.0, 2571.0], [202.0, 2394.0], [201.0, 2478.5], [215.0, 2515.0], [214.0, 2317.0], [211.0, 2533.0], [210.0, 2448.0], [208.0, 2477.0], [221.0, 2425.3333333333335], [220.0, 2303.0], [217.0, 2407.5], [231.0, 2517.0], [230.0, 2502.0], [229.0, 2361.0], [228.0, 2357.0], [226.0, 2534.0], [225.0, 2499.0], [224.0, 2400.0], [238.0, 2476.5], [237.0, 2329.0], [235.0, 2409.5], [233.0, 2281.0], [232.0, 2513.0], [247.0, 2411.0], [245.0, 2509.5], [243.0, 2276.5], [241.0, 2508.0], [240.0, 2423.5], [255.0, 2493.0], [254.0, 2324.0], [253.0, 2449.0], [251.0, 2447.0], [248.0, 2338.0], [270.0, 2282.0], [271.0, 270.0], [269.0, 288.0], [268.0, 2298.0], [267.0, 2440.0], [266.0, 2299.5], [264.0, 2482.0], [263.0, 2346.0], [259.0, 2324.0], [257.0, 2470.0], [256.0, 2309.0], [261.0, 2479.0], [286.0, 2424.0], [287.0, 2261.0], [285.0, 217.0], [284.0, 2029.0], [283.0, 2347.0], [281.0, 2339.0], [280.0, 2017.0], [279.0, 2443.0], [273.0, 2254.0], [272.0, 2449.0], [275.0, 2446.0], [274.0, 2284.0], [278.0, 2214.5], [276.0, 2268.0], [296.0, 2232.0], [303.0, 2137.5], [299.0, 198.0], [298.0, 2206.0], [297.0, 2150.5], [295.0, 2240.0], [293.0, 2163.0], [292.0, 112.0], [291.0, 2249.0], [289.0, 2220.0], [288.0, 2421.0], [318.0, 2329.0], [319.0, 2202.0], [316.0, 2204.0], [307.0, 2190.0], [306.0, 700.0], [305.0, 2293.0], [315.0, 187.0], [314.0, 2186.0], [313.0, 2179.0], [312.0, 1037.0], [310.0, 2193.0], [309.0, 1217.5], [333.0, 2359.0], [334.0, 2375.0], [332.0, 1350.5], [329.0, 1939.0], [328.0, 2130.0], [327.0, 1939.0], [326.0, 1433.5], [324.0, 1931.0], [323.0, 1202.5], [321.0, 1944.0], [350.0, 2342.0], [351.0, 2351.0], [348.0, 1787.0], [345.0, 2134.0], [344.0, 1937.0], [343.0, 2108.5], [341.0, 2330.0], [340.0, 752.0], [338.0, 2158.0], [337.0, 2172.75], [366.0, 32.5], [367.0, 625.0], [364.0, 386.5], [355.0, 2342.0], [354.0, 2302.0], [353.0, 2010.3333333333333], [362.0, 716.0], [361.0, 38.0], [360.0, 723.0], [359.0, 1510.5], [357.0, 48.0], [356.0, 2047.0], [382.0, 518.0], [383.0, 29.0], [381.0, 521.0], [380.0, 564.0], [379.0, 2041.0], [378.0, 2084.0], [377.0, 696.0], [376.0, 717.0], [375.0, 2031.0], [369.0, 72.0], [371.0, 67.0], [370.0, 2092.0], [374.0, 2157.0], [373.0, 1247.0], [398.0, 2204.0], [399.0, 2221.0], [397.0, 1945.0], [396.0, 1810.0], [395.0, 1813.0], [394.0, 25.0], [393.0, 28.0], [392.0, 1115.0], [390.0, 782.3333333333334], [385.0, 557.0], [384.0, 517.0], [387.0, 36.0], [386.0, 515.0], [403.0, 27.0], [414.0, 32.0], [413.0, 1775.5], [411.0, 1491.0], [409.0, 1498.5], [407.0, 187.0], [405.0, 189.0], [402.0, 2222.0], [401.0, 501.0], [400.0, 505.0], [429.0, 234.0], [430.0, 1767.0], [428.0, 997.5], [419.0, 1101.5], [417.0, 1194.0], [416.0, 615.0], [426.0, 30.0], [425.0, 1772.0], [424.0, 231.0], [423.0, 259.0], [422.0, 1748.0], [421.0, 30.0], [420.0, 2111.0], [446.0, 28.0], [447.0, 2156.0], [445.0, 877.5], [435.0, 29.0], [434.0, 312.0], [433.0, 35.0], [432.0, 696.5], [443.0, 30.0], [442.0, 1154.0], [441.0, 1941.0], [439.0, 26.0], [438.0, 990.5], [436.0, 29.0], [461.0, 23.0], [463.0, 1656.0], [460.0, 28.0], [451.0, 1420.5], [450.0, 183.0], [448.0, 1147.0], [459.0, 1660.0], [458.0, 185.0], [457.0, 1926.0], [456.0, 1136.0], [455.0, 26.0], [454.0, 2026.5], [452.0, 1143.0], [478.0, 34.0], [479.0, 2109.0], [477.0, 1678.0], [476.0, 1684.0], [475.0, 1836.0], [474.0, 28.0], [473.0, 28.0], [472.0, 1633.6666666666667], [469.0, 1432.5], [465.0, 1659.0], [467.0, 24.0], [466.0, 27.0], [493.0, 1320.0], [495.0, 822.5], [492.0, 1121.0], [483.0, 26.0], [482.0, 854.5], [480.0, 1675.0], [491.0, 592.5], [489.0, 28.0], [488.0, 1627.0], [487.0, 598.0], [485.0, 1128.0], [484.0, 36.0], [510.0, 1915.0], [511.0, 1876.0], [509.0, 1076.0], [508.0, 28.0], [507.0, 1653.0], [506.0, 976.5], [505.0, 1610.0], [504.0, 1799.0], [502.0, 1665.0], [499.0, 847.5], [496.0, 1152.0], [501.0, 31.0], [500.0, 1134.5], [537.0, 25.0], [542.0, 1612.0], [543.0, 1920.0], [530.0, 852.0], [529.0, 1610.0], [532.0, 29.0], [531.0, 1753.0], [541.0, 1523.0], [540.0, 1576.0], [539.0, 1576.5], [536.0, 529.5], [519.0, 2025.0], [518.0, 1633.0], [517.0, 1759.0], [516.0, 2054.0], [515.0, 1636.0], [514.0, 811.5], [512.0, 33.0], [527.0, 1786.0], [525.0, 1607.0], [524.0, 1679.0], [523.0, 842.5], [521.0, 1725.5], [534.0, 1581.0], [533.0, 26.0], [569.0, 1498.0], [573.0, 28.0], [574.0, 30.0], [563.0, 1751.0], [562.0, 1227.6666666666667], [565.0, 958.0], [564.0, 961.0], [572.0, 935.0], [571.0, 937.0], [570.0, 938.0], [568.0, 28.0], [551.0, 53.0], [550.0, 1056.0], [549.0, 1314.5], [548.0, 1315.5], [546.0, 24.0], [544.0, 30.0], [559.0, 964.0], [558.0, 966.0], [557.0, 30.0], [556.0, 891.75], [552.0, 1006.0], [567.0, 954.0], [566.0, 956.0], [605.0, 881.0], [607.0, 735.0], [604.0, 1469.0], [603.0, 841.0], [601.0, 890.0], [582.0, 1514.0], [581.0, 1488.0], [580.0, 1505.0], [579.0, 1522.0], [578.0, 1120.3333333333333], [577.0, 1787.0], [591.0, 909.0], [590.0, 914.0], [589.0, 25.0], [588.0, 915.0], [586.0, 44.0], [585.0, 1401.0], [599.0, 907.0], [597.0, 28.0], [596.0, 907.5], [594.0, 907.0], [636.0, 1438.5], [639.0, 26.0], [629.0, 665.0], [625.0, 667.0], [638.0, 1682.0], [637.0, 640.0], [635.0, 37.0], [634.0, 27.0], [633.0, 729.5], [632.0, 1437.0], [623.0, 29.0], [609.0, 690.0], [615.0, 31.0], [613.0, 30.0], [621.0, 670.0], [619.0, 1430.0], [618.0, 677.0], [617.0, 576.3333333333333], [631.0, 1438.0], [630.0, 723.0], [669.0, 173.75], [655.0, 140.5], [654.0, 795.5], [653.0, 1664.0], [650.0, 31.0], [649.0, 723.5], [656.0, 302.8571428571429], [657.0, 91.0], [659.0, 1373.0], [658.0, 1569.0], [663.0, 1399.0], [661.0, 26.0], [671.0, 1511.0], [667.0, 1644.0], [666.0, 717.5], [664.0, 781.5], [647.0, 1175.5], [645.0, 891.0], [643.0, 617.0], [642.0, 1391.0], [641.0, 1616.0], [696.0, 1531.5], [700.0, 471.2], [698.0, 666.0], [675.0, 458.0], [674.0, 52.0], [673.0, 1429.0], [672.0, 1523.0], [676.0, 54.0], [679.0, 66.0], [677.0, 845.5], [686.0, 25.0], [684.0, 27.0], [683.0, 707.0], [682.0, 627.3333333333333], [681.0, 1251.0], [680.0, 717.0], [699.0, 261.5], [703.0, 1354.0], [690.0, 1465.6666666666667], [688.0, 1301.0], [692.0, 29.0], [691.0, 30.0], [695.0, 1237.0], [694.0, 686.5], [702.0, 24.0], [701.0, 1452.0], [697.0, 175.0], [729.0, 165.0], [723.0, 629.5], [722.0, 551.0], [721.0, 1242.0], [724.0, 539.6666666666666], [725.0, 1414.0], [734.0, 1398.0], [730.0, 165.0], [728.0, 238.0], [711.0, 262.0], [710.0, 149.5], [708.0, 30.0], [707.0, 937.6666666666666], [705.0, 1408.0], [704.0, 1306.0], [719.0, 258.5], [718.0, 728.5], [716.0, 1500.0], [715.0, 1389.0], [714.0, 1198.0], [713.0, 729.0], [712.0, 1378.0], [727.0, 1288.0], [726.0, 1362.0], [762.0, 1264.0], [753.0, 1307.0], [765.0, 1262.0], [766.0, 31.0], [752.0, 1315.0], [764.0, 27.0], [760.0, 1179.0], [742.0, 618.25], [741.0, 1212.0], [740.0, 1315.0], [738.0, 110.5], [736.0, 25.0], [751.0, 26.0], [750.0, 1432.0], [749.0, 1309.0], [748.0, 885.3333333333333], [745.0, 1319.0], [744.0, 131.0], [758.0, 1572.0], [756.0, 1255.0], [755.0, 25.5], [796.0, 1223.0], [780.0, 783.5], [779.0, 29.0], [778.0, 1196.0], [781.0, 23.0], [782.0, 970.5], [797.0, 888.5], [799.0, 1184.0], [784.0, 1380.0], [787.0, 29.0], [785.0, 1234.0], [790.0, 1212.0], [788.0, 1293.0], [798.0, 1230.0], [795.0, 996.0], [793.0, 1255.0], [792.0, 70.5], [783.0, 704.0], [768.0, 649.0], [771.0, 1406.0], [769.0, 1254.0], [772.0, 1475.0], [828.0, 374.0], [816.0, 641.5], [815.0, 804.8], [819.0, 1080.25], [818.0, 890.0], [820.0, 636.6666666666666], [823.0, 931.0], [821.0, 1123.0], [817.0, 545.2727272727273], [814.0, 903.0], [813.0, 831.0], [811.0, 1164.0], [810.0, 1152.0], [809.0, 1231.0], [808.0, 1343.0], [831.0, 573.5], [830.0, 187.33333333333334], [829.0, 28.0], [826.0, 1067.0], [825.0, 1039.0], [824.0, 1069.0], [807.0, 1222.0], [806.0, 1170.0], [805.0, 1239.0], [804.0, 309.0], [802.0, 1152.0], [801.0, 589.0], [800.0, 589.0], [838.0, 164.375], [843.0, 276.57142857142856], [832.0, 187.66666666666666], [837.0, 1021.5], [835.0, 28.0], [834.0, 1029.0], [833.0, 447.0], [847.0, 40.5], [842.0, 293.0], [840.0, 371.5], [839.0, 341.0], [844.0, 267.6], [845.0, 380.0], [846.0, 240.42857142857142], [841.0, 280.25], [848.0, 162.9090909090909], [849.0, 1202.0], [858.0, 176.61538461538458], [857.0, 857.0], [859.0, 840.0], [851.0, 184.0], [850.0, 89.83333333333333], [853.0, 558.0], [852.0, 647.3333333333333], [855.0, 753.5], [854.0, 675.625], [856.0, 520.0]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}, {"data": [[486.2530000000015, 1366.0400000000004]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 859.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8150.0, "minX": 1.75576824E12, "maxY": 18766.666666666668, "series": [{"data": [[1.75576824E12, 18766.666666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75576824E12, 8150.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576824E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1366.0400000000004, "minX": 1.75576824E12, "maxY": 1366.0400000000004, "series": [{"data": [[1.75576824E12, 1366.0400000000004]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576824E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1365.9990000000007, "minX": 1.75576824E12, "maxY": 1365.9990000000007, "series": [{"data": [[1.75576824E12, 1365.9990000000007]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576824E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1313.9550000000006, "minX": 1.75576824E12, "maxY": 1313.9550000000006, "series": [{"data": [[1.75576824E12, 1313.9550000000006]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576824E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 22.0, "minX": 1.75576824E12, "maxY": 2895.0, "series": [{"data": [[1.75576824E12, 2895.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75576824E12, 2712.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75576824E12, 2883.98]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75576824E12, 2765.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75576824E12, 22.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75576824E12, 1358.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576824E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 233.0, "minX": 2.0, "maxY": 2763.5, "series": [{"data": [[2.0, 233.0], [570.0, 1761.0], [326.0, 447.5], [102.0, 2763.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 570.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 226.5, "minX": 2.0, "maxY": 2763.5, "series": [{"data": [[2.0, 226.5], [570.0, 1761.0], [326.0, 447.5], [102.0, 2763.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 570.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576824E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576824E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576824E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576824E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576824E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576824E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576824E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576824E12, 16.666666666666668]], "isOverall": false, "label": "ดึงข้อมูล Visit รายบุคคล-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576824E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576824E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576824E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576824E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

