/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 200.0, "minX": 0.0, "maxY": 27930.0, "series": [{"data": [[0.0, 200.0], [0.1, 657.0], [0.2, 808.0], [0.3, 808.0], [0.4, 865.0], [0.5, 971.0], [0.6, 1002.0], [0.7, 1007.0], [0.8, 1030.0], [0.9, 1163.0], [1.0, 1171.0], [1.1, 1184.0], [1.2, 1283.0], [1.3, 1290.0], [1.4, 1290.0], [1.5, 1292.0], [1.6, 1304.0], [1.7, 1304.0], [1.8, 1443.0], [1.9, 1443.0], [2.0, 1790.0], [2.1, 1804.0], [2.2, 1807.0], [2.3, 1807.0], [2.4, 1810.0], [2.5, 1905.0], [2.6, 1924.0], [2.7, 2027.0], [2.8, 2046.0], [2.9, 2052.0], [3.0, 2058.0], [3.1, 2067.0], [3.2, 2091.0], [3.3, 2103.0], [3.4, 2219.0], [3.5, 2274.0], [3.6, 2291.0], [3.7, 2298.0], [3.8, 2316.0], [3.9, 2393.0], [4.0, 2693.0], [4.1, 2711.0], [4.2, 2712.0], [4.3, 2829.0], [4.4, 2955.0], [4.5, 3088.0], [4.6, 3107.0], [4.7, 3173.0], [4.8, 3274.0], [4.9, 3314.0], [5.0, 3386.0], [5.1, 3428.0], [5.2, 3492.0], [5.3, 3574.0], [5.4, 3602.0], [5.5, 3951.0], [5.6, 4250.0], [5.7, 4281.0], [5.8, 4330.0], [5.9, 4458.0], [6.0, 4567.0], [6.1, 4668.0], [6.2, 4771.0], [6.3, 5204.0], [6.4, 5211.0], [6.5, 5220.0], [6.6, 5227.0], [6.7, 5274.0], [6.8, 5327.0], [6.9, 5328.0], [7.0, 5620.0], [7.1, 5642.0], [7.2, 5688.0], [7.3, 5705.0], [7.4, 5714.0], [7.5, 5760.0], [7.6, 5898.0], [7.7, 5934.0], [7.8, 5960.0], [7.9, 6017.0], [8.0, 6045.0], [8.1, 6153.0], [8.2, 6181.0], [8.3, 6367.0], [8.4, 6381.0], [8.5, 6387.0], [8.6, 6422.0], [8.7, 6550.0], [8.8, 6569.0], [8.9, 6573.0], [9.0, 6584.0], [9.1, 6700.0], [9.2, 6716.0], [9.3, 6746.0], [9.4, 6755.0], [9.5, 6880.0], [9.6, 6950.0], [9.7, 6989.0], [9.8, 7096.0], [9.9, 7107.0], [10.0, 7131.0], [10.1, 7174.0], [10.2, 7247.0], [10.3, 7359.0], [10.4, 7362.0], [10.5, 7403.0], [10.6, 7406.0], [10.7, 7430.0], [10.8, 7453.0], [10.9, 7471.0], [11.0, 7532.0], [11.1, 7538.0], [11.2, 7555.0], [11.3, 7716.0], [11.4, 7730.0], [11.5, 7838.0], [11.6, 7847.0], [11.7, 7896.0], [11.8, 7949.0], [11.9, 7962.0], [12.0, 8008.0], [12.1, 8040.0], [12.2, 8049.0], [12.3, 8058.0], [12.4, 8149.0], [12.5, 8161.0], [12.6, 8222.0], [12.7, 8223.0], [12.8, 8272.0], [12.9, 8304.0], [13.0, 8370.0], [13.1, 8399.0], [13.2, 8402.0], [13.3, 8421.0], [13.4, 8433.0], [13.5, 8471.0], [13.6, 8517.0], [13.7, 8542.0], [13.8, 8606.0], [13.9, 8608.0], [14.0, 8703.0], [14.1, 8715.0], [14.2, 8727.0], [14.3, 8774.0], [14.4, 8781.0], [14.5, 8783.0], [14.6, 8789.0], [14.7, 8850.0], [14.8, 8857.0], [14.9, 8866.0], [15.0, 9015.0], [15.1, 9018.0], [15.2, 9021.0], [15.3, 9030.0], [15.4, 9048.0], [15.5, 9056.0], [15.6, 9080.0], [15.7, 9094.0], [15.8, 9121.0], [15.9, 9152.0], [16.0, 9153.0], [16.1, 9258.0], [16.2, 9276.0], [16.3, 9296.0], [16.4, 9298.0], [16.5, 9335.0], [16.6, 9396.0], [16.7, 9431.0], [16.8, 9489.0], [16.9, 9495.0], [17.0, 9514.0], [17.1, 9581.0], [17.2, 9585.0], [17.3, 9602.0], [17.4, 9624.0], [17.5, 9631.0], [17.6, 9638.0], [17.7, 9643.0], [17.8, 9646.0], [17.9, 9647.0], [18.0, 9678.0], [18.1, 9704.0], [18.2, 9709.0], [18.3, 9710.0], [18.4, 9732.0], [18.5, 9733.0], [18.6, 9792.0], [18.7, 9806.0], [18.8, 9812.0], [18.9, 9825.0], [19.0, 9827.0], [19.1, 9850.0], [19.2, 9850.0], [19.3, 9888.0], [19.4, 9908.0], [19.5, 9911.0], [19.6, 9947.0], [19.7, 9949.0], [19.8, 9971.0], [19.9, 9972.0], [20.0, 9973.0], [20.1, 9977.0], [20.2, 9981.0], [20.3, 10036.0], [20.4, 10043.0], [20.5, 10045.0], [20.6, 10047.0], [20.7, 10100.0], [20.8, 10107.0], [20.9, 10142.0], [21.0, 10163.0], [21.1, 10174.0], [21.2, 10184.0], [21.3, 10184.0], [21.4, 10185.0], [21.5, 10188.0], [21.6, 10197.0], [21.7, 10210.0], [21.8, 10226.0], [21.9, 10232.0], [22.0, 10238.0], [22.1, 10247.0], [22.2, 10255.0], [22.3, 10271.0], [22.4, 10278.0], [22.5, 10328.0], [22.6, 10354.0], [22.7, 10368.0], [22.8, 10386.0], [22.9, 10391.0], [23.0, 10395.0], [23.1, 10410.0], [23.2, 10453.0], [23.3, 10455.0], [23.4, 10459.0], [23.5, 10469.0], [23.6, 10502.0], [23.7, 10531.0], [23.8, 10539.0], [23.9, 10557.0], [24.0, 10577.0], [24.1, 10595.0], [24.2, 10597.0], [24.3, 10614.0], [24.4, 10616.0], [24.5, 10625.0], [24.6, 10635.0], [24.7, 10661.0], [24.8, 10696.0], [24.9, 10725.0], [25.0, 10740.0], [25.1, 10743.0], [25.2, 10760.0], [25.3, 10768.0], [25.4, 10775.0], [25.5, 10780.0], [25.6, 10782.0], [25.7, 10786.0], [25.8, 10788.0], [25.9, 10788.0], [26.0, 10797.0], [26.1, 10820.0], [26.2, 10849.0], [26.3, 10895.0], [26.4, 10902.0], [26.5, 10912.0], [26.6, 10923.0], [26.7, 10927.0], [26.8, 10936.0], [26.9, 11009.0], [27.0, 11129.0], [27.1, 11153.0], [27.2, 11160.0], [27.3, 11192.0], [27.4, 11207.0], [27.5, 11233.0], [27.6, 11236.0], [27.7, 11241.0], [27.8, 11250.0], [27.9, 11254.0], [28.0, 11282.0], [28.1, 11296.0], [28.2, 11320.0], [28.3, 11324.0], [28.4, 11376.0], [28.5, 11449.0], [28.6, 11462.0], [28.7, 11520.0], [28.8, 11535.0], [28.9, 11543.0], [29.0, 11612.0], [29.1, 11620.0], [29.2, 11633.0], [29.3, 11647.0], [29.4, 11647.0], [29.5, 11654.0], [29.6, 11672.0], [29.7, 11689.0], [29.8, 11725.0], [29.9, 11749.0], [30.0, 11780.0], [30.1, 11852.0], [30.2, 11884.0], [30.3, 11904.0], [30.4, 11909.0], [30.5, 11972.0], [30.6, 11993.0], [30.7, 12004.0], [30.8, 12013.0], [30.9, 12036.0], [31.0, 12036.0], [31.1, 12066.0], [31.2, 12090.0], [31.3, 12101.0], [31.4, 12111.0], [31.5, 12118.0], [31.6, 12169.0], [31.7, 12175.0], [31.8, 12179.0], [31.9, 12206.0], [32.0, 12216.0], [32.1, 12224.0], [32.2, 12234.0], [32.3, 12261.0], [32.4, 12274.0], [32.5, 12277.0], [32.6, 12319.0], [32.7, 12319.0], [32.8, 12338.0], [32.9, 12363.0], [33.0, 12405.0], [33.1, 12422.0], [33.2, 12474.0], [33.3, 12483.0], [33.4, 12486.0], [33.5, 12487.0], [33.6, 12503.0], [33.7, 12511.0], [33.8, 12523.0], [33.9, 12555.0], [34.0, 12567.0], [34.1, 12603.0], [34.2, 12677.0], [34.3, 12686.0], [34.4, 12725.0], [34.5, 12726.0], [34.6, 12768.0], [34.7, 12773.0], [34.8, 12819.0], [34.9, 12837.0], [35.0, 12847.0], [35.1, 12855.0], [35.2, 12891.0], [35.3, 12914.0], [35.4, 12922.0], [35.5, 12980.0], [35.6, 13002.0], [35.7, 13021.0], [35.8, 13037.0], [35.9, 13135.0], [36.0, 13145.0], [36.1, 13210.0], [36.2, 13234.0], [36.3, 13235.0], [36.4, 13308.0], [36.5, 13322.0], [36.6, 13342.0], [36.7, 13409.0], [36.8, 13440.0], [36.9, 13475.0], [37.0, 13490.0], [37.1, 13490.0], [37.2, 13497.0], [37.3, 13503.0], [37.4, 13520.0], [37.5, 13540.0], [37.6, 13563.0], [37.7, 13601.0], [37.8, 13637.0], [37.9, 13680.0], [38.0, 13690.0], [38.1, 13692.0], [38.2, 13705.0], [38.3, 13708.0], [38.4, 13727.0], [38.5, 13819.0], [38.6, 13868.0], [38.7, 13879.0], [38.8, 14017.0], [38.9, 14032.0], [39.0, 14191.0], [39.1, 14256.0], [39.2, 14286.0], [39.3, 14321.0], [39.4, 14339.0], [39.5, 14348.0], [39.6, 14360.0], [39.7, 14412.0], [39.8, 14501.0], [39.9, 14647.0], [40.0, 14670.0], [40.1, 14686.0], [40.2, 14695.0], [40.3, 14747.0], [40.4, 14753.0], [40.5, 14776.0], [40.6, 14839.0], [40.7, 14853.0], [40.8, 14857.0], [40.9, 14888.0], [41.0, 14904.0], [41.1, 14926.0], [41.2, 14963.0], [41.3, 14964.0], [41.4, 14969.0], [41.5, 14988.0], [41.6, 15022.0], [41.7, 15027.0], [41.8, 15107.0], [41.9, 15157.0], [42.0, 15205.0], [42.1, 15213.0], [42.2, 15221.0], [42.3, 15233.0], [42.4, 15236.0], [42.5, 15268.0], [42.6, 15288.0], [42.7, 15293.0], [42.8, 15308.0], [42.9, 15417.0], [43.0, 15461.0], [43.1, 15532.0], [43.2, 15552.0], [43.3, 15553.0], [43.4, 15567.0], [43.5, 15623.0], [43.6, 15666.0], [43.7, 15737.0], [43.8, 15740.0], [43.9, 15757.0], [44.0, 15763.0], [44.1, 15860.0], [44.2, 15861.0], [44.3, 15961.0], [44.4, 16059.0], [44.5, 16061.0], [44.6, 16082.0], [44.7, 16107.0], [44.8, 16124.0], [44.9, 16153.0], [45.0, 16177.0], [45.1, 16209.0], [45.2, 16218.0], [45.3, 16227.0], [45.4, 16251.0], [45.5, 16277.0], [45.6, 16284.0], [45.7, 16323.0], [45.8, 16393.0], [45.9, 16517.0], [46.0, 16558.0], [46.1, 16564.0], [46.2, 16569.0], [46.3, 16584.0], [46.4, 16615.0], [46.5, 16639.0], [46.6, 16808.0], [46.7, 16828.0], [46.8, 16848.0], [46.9, 16852.0], [47.0, 16908.0], [47.1, 16939.0], [47.2, 16997.0], [47.3, 17030.0], [47.4, 17057.0], [47.5, 17068.0], [47.6, 17111.0], [47.7, 17161.0], [47.8, 17225.0], [47.9, 17226.0], [48.0, 17246.0], [48.1, 17254.0], [48.2, 17255.0], [48.3, 17419.0], [48.4, 17457.0], [48.5, 17678.0], [48.6, 17680.0], [48.7, 17703.0], [48.8, 17748.0], [48.9, 17752.0], [49.0, 17824.0], [49.1, 17829.0], [49.2, 17830.0], [49.3, 17838.0], [49.4, 17874.0], [49.5, 18002.0], [49.6, 18044.0], [49.7, 18111.0], [49.8, 18112.0], [49.9, 18118.0], [50.0, 18118.0], [50.1, 18123.0], [50.2, 18124.0], [50.3, 18143.0], [50.4, 18146.0], [50.5, 18162.0], [50.6, 18167.0], [50.7, 18170.0], [50.8, 18176.0], [50.9, 18194.0], [51.0, 18201.0], [51.1, 18209.0], [51.2, 18211.0], [51.3, 18245.0], [51.4, 18248.0], [51.5, 18248.0], [51.6, 18286.0], [51.7, 18288.0], [51.8, 18289.0], [51.9, 18316.0], [52.0, 18318.0], [52.1, 18365.0], [52.2, 18369.0], [52.3, 18372.0], [52.4, 18377.0], [52.5, 18378.0], [52.6, 18386.0], [52.7, 18390.0], [52.8, 18404.0], [52.9, 18410.0], [53.0, 18415.0], [53.1, 18419.0], [53.2, 18439.0], [53.3, 18443.0], [53.4, 18443.0], [53.5, 18469.0], [53.6, 18488.0], [53.7, 18491.0], [53.8, 18499.0], [53.9, 18503.0], [54.0, 18512.0], [54.1, 18514.0], [54.2, 18516.0], [54.3, 18516.0], [54.4, 18519.0], [54.5, 18531.0], [54.6, 18534.0], [54.7, 18537.0], [54.8, 18539.0], [54.9, 18550.0], [55.0, 18572.0], [55.1, 18585.0], [55.2, 18596.0], [55.3, 18598.0], [55.4, 18600.0], [55.5, 18603.0], [55.6, 18609.0], [55.7, 18609.0], [55.8, 18611.0], [55.9, 18622.0], [56.0, 18651.0], [56.1, 18654.0], [56.2, 18659.0], [56.3, 18662.0], [56.4, 18662.0], [56.5, 18671.0], [56.6, 18672.0], [56.7, 18673.0], [56.8, 18673.0], [56.9, 18674.0], [57.0, 18678.0], [57.1, 18687.0], [57.2, 18720.0], [57.3, 18733.0], [57.4, 18769.0], [57.5, 18781.0], [57.6, 18817.0], [57.7, 18823.0], [57.8, 18873.0], [57.9, 18876.0], [58.0, 18925.0], [58.1, 19023.0], [58.2, 19099.0], [58.3, 19168.0], [58.4, 19189.0], [58.5, 19228.0], [58.6, 19374.0], [58.7, 19421.0], [58.8, 19422.0], [58.9, 19470.0], [59.0, 19471.0], [59.1, 19514.0], [59.2, 19517.0], [59.3, 19563.0], [59.4, 19589.0], [59.5, 19607.0], [59.6, 19619.0], [59.7, 19645.0], [59.8, 19665.0], [59.9, 19671.0], [60.0, 19684.0], [60.1, 19714.0], [60.2, 19742.0], [60.3, 19745.0], [60.4, 19788.0], [60.5, 19814.0], [60.6, 19852.0], [60.7, 19881.0], [60.8, 19887.0], [60.9, 19887.0], [61.0, 19919.0], [61.1, 19927.0], [61.2, 20000.0], [61.3, 20003.0], [61.4, 20009.0], [61.5, 20019.0], [61.6, 20024.0], [61.7, 20048.0], [61.8, 20065.0], [61.9, 20065.0], [62.0, 20104.0], [62.1, 20104.0], [62.2, 20107.0], [62.3, 20111.0], [62.4, 20115.0], [62.5, 20130.0], [62.6, 20159.0], [62.7, 20169.0], [62.8, 20170.0], [62.9, 20172.0], [63.0, 20219.0], [63.1, 20226.0], [63.2, 20242.0], [63.3, 20246.0], [63.4, 20249.0], [63.5, 20303.0], [63.6, 20304.0], [63.7, 20317.0], [63.8, 20328.0], [63.9, 20331.0], [64.0, 20332.0], [64.1, 20343.0], [64.2, 20344.0], [64.3, 20344.0], [64.4, 20384.0], [64.5, 20386.0], [64.6, 20388.0], [64.7, 20399.0], [64.8, 20470.0], [64.9, 20486.0], [65.0, 20501.0], [65.1, 20532.0], [65.2, 20535.0], [65.3, 20555.0], [65.4, 20634.0], [65.5, 20642.0], [65.6, 20644.0], [65.7, 20645.0], [65.8, 20674.0], [65.9, 20684.0], [66.0, 20696.0], [66.1, 20735.0], [66.2, 20739.0], [66.3, 20756.0], [66.4, 20763.0], [66.5, 20767.0], [66.6, 20771.0], [66.7, 20787.0], [66.8, 20794.0], [66.9, 20824.0], [67.0, 20828.0], [67.1, 20953.0], [67.2, 20975.0], [67.3, 20997.0], [67.4, 21000.0], [67.5, 21003.0], [67.6, 21011.0], [67.7, 21015.0], [67.8, 21039.0], [67.9, 21039.0], [68.0, 21076.0], [68.1, 21097.0], [68.2, 21101.0], [68.3, 21109.0], [68.4, 21147.0], [68.5, 21219.0], [68.6, 21224.0], [68.7, 21248.0], [68.8, 21258.0], [68.9, 21267.0], [69.0, 21278.0], [69.1, 21279.0], [69.2, 21280.0], [69.3, 21288.0], [69.4, 21365.0], [69.5, 21397.0], [69.6, 21404.0], [69.7, 21408.0], [69.8, 21430.0], [69.9, 21515.0], [70.0, 21525.0], [70.1, 21531.0], [70.2, 21535.0], [70.3, 21548.0], [70.4, 21588.0], [70.5, 21610.0], [70.6, 21675.0], [70.7, 21725.0], [70.8, 21767.0], [70.9, 21830.0], [71.0, 21840.0], [71.1, 21843.0], [71.2, 21845.0], [71.3, 21879.0], [71.4, 21899.0], [71.5, 21982.0], [71.6, 21998.0], [71.7, 21998.0], [71.8, 22046.0], [71.9, 22060.0], [72.0, 22075.0], [72.1, 22100.0], [72.2, 22100.0], [72.3, 22101.0], [72.4, 22152.0], [72.5, 22156.0], [72.6, 22160.0], [72.7, 22272.0], [72.8, 22298.0], [72.9, 22302.0], [73.0, 22304.0], [73.1, 22311.0], [73.2, 22313.0], [73.3, 22326.0], [73.4, 22470.0], [73.5, 22500.0], [73.6, 22526.0], [73.7, 22532.0], [73.8, 22536.0], [73.9, 22555.0], [74.0, 22557.0], [74.1, 22566.0], [74.2, 22575.0], [74.3, 22681.0], [74.4, 22754.0], [74.5, 22796.0], [74.6, 22804.0], [74.7, 22825.0], [74.8, 22927.0], [74.9, 22979.0], [75.0, 22988.0], [75.1, 23051.0], [75.2, 23073.0], [75.3, 23147.0], [75.4, 23203.0], [75.5, 23206.0], [75.6, 23336.0], [75.7, 23340.0], [75.8, 23341.0], [75.9, 23416.0], [76.0, 23422.0], [76.1, 23443.0], [76.2, 23475.0], [76.3, 23759.0], [76.4, 23769.0], [76.5, 23797.0], [76.6, 23843.0], [76.7, 23905.0], [76.8, 23972.0], [76.9, 23985.0], [77.0, 23992.0], [77.1, 24008.0], [77.2, 24020.0], [77.3, 24049.0], [77.4, 24050.0], [77.5, 24104.0], [77.6, 24115.0], [77.7, 24119.0], [77.8, 24127.0], [77.9, 24181.0], [78.0, 24184.0], [78.1, 24186.0], [78.2, 24218.0], [78.3, 24219.0], [78.4, 24259.0], [78.5, 24260.0], [78.6, 24261.0], [78.7, 24265.0], [78.8, 24268.0], [78.9, 24270.0], [79.0, 24277.0], [79.1, 24278.0], [79.2, 24281.0], [79.3, 24288.0], [79.4, 24290.0], [79.5, 24313.0], [79.6, 24315.0], [79.7, 24327.0], [79.8, 24338.0], [79.9, 24366.0], [80.0, 24397.0], [80.1, 24398.0], [80.2, 24401.0], [80.3, 24405.0], [80.4, 24410.0], [80.5, 24436.0], [80.6, 24438.0], [80.7, 24494.0], [80.8, 24510.0], [80.9, 24516.0], [81.0, 24518.0], [81.1, 24570.0], [81.2, 24605.0], [81.3, 24607.0], [81.4, 24672.0], [81.5, 24685.0], [81.6, 24692.0], [81.7, 24703.0], [81.8, 24719.0], [81.9, 24737.0], [82.0, 24784.0], [82.1, 24803.0], [82.2, 24811.0], [82.3, 24813.0], [82.4, 24820.0], [82.5, 24863.0], [82.6, 24876.0], [82.7, 24884.0], [82.8, 24906.0], [82.9, 24907.0], [83.0, 24917.0], [83.1, 24962.0], [83.2, 24969.0], [83.3, 25109.0], [83.4, 25123.0], [83.5, 25128.0], [83.6, 25252.0], [83.7, 25256.0], [83.8, 25332.0], [83.9, 25377.0], [84.0, 25378.0], [84.1, 25387.0], [84.2, 25519.0], [84.3, 25571.0], [84.4, 25580.0], [84.5, 25580.0], [84.6, 25593.0], [84.7, 25596.0], [84.8, 25596.0], [84.9, 25611.0], [85.0, 25663.0], [85.1, 25667.0], [85.2, 25694.0], [85.3, 25711.0], [85.4, 25717.0], [85.5, 25737.0], [85.6, 25738.0], [85.7, 25777.0], [85.8, 25783.0], [85.9, 25812.0], [86.0, 25849.0], [86.1, 25895.0], [86.2, 25905.0], [86.3, 25928.0], [86.4, 25939.0], [86.5, 25946.0], [86.6, 25951.0], [86.7, 25971.0], [86.8, 26036.0], [86.9, 26039.0], [87.0, 26040.0], [87.1, 26069.0], [87.2, 26119.0], [87.3, 26158.0], [87.4, 26165.0], [87.5, 26172.0], [87.6, 26178.0], [87.7, 26222.0], [87.8, 26229.0], [87.9, 26232.0], [88.0, 26291.0], [88.1, 26295.0], [88.2, 26313.0], [88.3, 26321.0], [88.4, 26358.0], [88.5, 26361.0], [88.6, 26365.0], [88.7, 26366.0], [88.8, 26376.0], [88.9, 26380.0], [89.0, 26387.0], [89.1, 26393.0], [89.2, 26411.0], [89.3, 26414.0], [89.4, 26426.0], [89.5, 26429.0], [89.6, 26432.0], [89.7, 26440.0], [89.8, 26459.0], [89.9, 26466.0], [90.0, 26488.0], [90.1, 26574.0], [90.2, 26587.0], [90.3, 26602.0], [90.4, 26609.0], [90.5, 26615.0], [90.6, 26637.0], [90.7, 26638.0], [90.8, 26639.0], [90.9, 26639.0], [91.0, 26642.0], [91.1, 26646.0], [91.2, 26648.0], [91.3, 26657.0], [91.4, 26669.0], [91.5, 26686.0], [91.6, 26686.0], [91.7, 26692.0], [91.8, 26695.0], [91.9, 26696.0], [92.0, 26696.0], [92.1, 26697.0], [92.2, 26717.0], [92.3, 26725.0], [92.4, 26735.0], [92.5, 26738.0], [92.6, 26740.0], [92.7, 26765.0], [92.8, 26777.0], [92.9, 26780.0], [93.0, 26782.0], [93.1, 26783.0], [93.2, 26806.0], [93.3, 26807.0], [93.4, 26817.0], [93.5, 26822.0], [93.6, 26831.0], [93.7, 26838.0], [93.8, 26842.0], [93.9, 26854.0], [94.0, 26854.0], [94.1, 26863.0], [94.2, 26868.0], [94.3, 26881.0], [94.4, 26897.0], [94.5, 26899.0], [94.6, 26914.0], [94.7, 26927.0], [94.8, 26927.0], [94.9, 26933.0], [95.0, 26949.0], [95.1, 26969.0], [95.2, 26977.0], [95.3, 27011.0], [95.4, 27023.0], [95.5, 27055.0], [95.6, 27084.0], [95.7, 27097.0], [95.8, 27102.0], [95.9, 27118.0], [96.0, 27179.0], [96.1, 27186.0], [96.2, 27200.0], [96.3, 27241.0], [96.4, 27263.0], [96.5, 27275.0], [96.6, 27295.0], [96.7, 27299.0], [96.8, 27313.0], [96.9, 27340.0], [97.0, 27355.0], [97.1, 27355.0], [97.2, 27356.0], [97.3, 27362.0], [97.4, 27375.0], [97.5, 27388.0], [97.6, 27416.0], [97.7, 27437.0], [97.8, 27439.0], [97.9, 27450.0], [98.0, 27487.0], [98.1, 27494.0], [98.2, 27497.0], [98.3, 27504.0], [98.4, 27523.0], [98.5, 27541.0], [98.6, 27546.0], [98.7, 27573.0], [98.8, 27600.0], [98.9, 27615.0], [99.0, 27629.0], [99.1, 27761.0], [99.2, 27796.0], [99.3, 27799.0], [99.4, 27810.0], [99.5, 27810.0], [99.6, 27849.0], [99.7, 27863.0], [99.8, 27873.0], [99.9, 27930.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 19.0, "series": [{"data": [[200.0, 1.0], [600.0, 1.0], [800.0, 3.0], [900.0, 1.0], [1000.0, 3.0], [1100.0, 3.0], [1200.0, 4.0], [1300.0, 2.0], [1400.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [1800.0, 3.0], [1900.0, 2.0], [2000.0, 6.0], [2100.0, 1.0], [2200.0, 4.0], [2300.0, 2.0], [2600.0, 1.0], [2700.0, 2.0], [2800.0, 1.0], [2900.0, 2.0], [3000.0, 1.0], [3100.0, 2.0], [3300.0, 2.0], [3200.0, 1.0], [3400.0, 2.0], [3500.0, 1.0], [3600.0, 1.0], [3900.0, 1.0], [4300.0, 1.0], [4200.0, 2.0], [4600.0, 1.0], [4400.0, 1.0], [4500.0, 1.0], [4700.0, 1.0], [5200.0, 5.0], [5300.0, 2.0], [5600.0, 3.0], [5700.0, 3.0], [5800.0, 1.0], [5900.0, 2.0], [6000.0, 2.0], [6100.0, 2.0], [6300.0, 3.0], [6500.0, 4.0], [6400.0, 1.0], [6700.0, 4.0], [6900.0, 2.0], [6800.0, 1.0], [7000.0, 1.0], [7100.0, 3.0], [7400.0, 5.0], [7300.0, 2.0], [7200.0, 1.0], [7500.0, 3.0], [7700.0, 2.0], [7800.0, 3.0], [7900.0, 2.0], [8100.0, 2.0], [8000.0, 4.0], [8400.0, 4.0], [8200.0, 3.0], [8500.0, 2.0], [8300.0, 3.0], [8600.0, 2.0], [8700.0, 7.0], [8800.0, 3.0], [9000.0, 8.0], [9100.0, 3.0], [9200.0, 4.0], [9600.0, 8.0], [9700.0, 6.0], [9400.0, 3.0], [9300.0, 2.0], [9500.0, 3.0], [9800.0, 6.0], [9900.0, 9.0], [10100.0, 10.0], [10000.0, 4.0], [10200.0, 8.0], [10300.0, 6.0], [10500.0, 7.0], [10400.0, 5.0], [10700.0, 12.0], [10600.0, 6.0], [10800.0, 3.0], [10900.0, 5.0], [11100.0, 4.0], [11200.0, 8.0], [11000.0, 1.0], [11400.0, 2.0], [11300.0, 3.0], [11600.0, 8.0], [11700.0, 3.0], [11500.0, 3.0], [11800.0, 2.0], [11900.0, 4.0], [12000.0, 6.0], [12100.0, 6.0], [12200.0, 7.0], [12400.0, 6.0], [12300.0, 4.0], [12500.0, 5.0], [12600.0, 3.0], [12700.0, 4.0], [12800.0, 5.0], [13000.0, 3.0], [12900.0, 3.0], [13100.0, 2.0], [13300.0, 3.0], [13200.0, 3.0], [13400.0, 6.0], [13600.0, 5.0], [13700.0, 3.0], [13500.0, 4.0], [13800.0, 3.0], [14100.0, 1.0], [14000.0, 2.0], [14300.0, 4.0], [14200.0, 2.0], [14600.0, 4.0], [14800.0, 4.0], [14700.0, 3.0], [14500.0, 1.0], [14400.0, 1.0], [15100.0, 2.0], [14900.0, 6.0], [15000.0, 2.0], [15200.0, 8.0], [15300.0, 1.0], [15400.0, 2.0], [15500.0, 4.0], [15700.0, 4.0], [15600.0, 2.0], [15800.0, 2.0], [16100.0, 4.0], [15900.0, 1.0], [16200.0, 6.0], [16300.0, 2.0], [16000.0, 3.0], [16600.0, 2.0], [16800.0, 4.0], [17000.0, 3.0], [17200.0, 5.0], [17400.0, 2.0], [17800.0, 5.0], [18200.0, 9.0], [17600.0, 2.0], [18400.0, 11.0], [18000.0, 2.0], [18600.0, 18.0], [19200.0, 1.0], [18800.0, 4.0], [19000.0, 2.0], [19400.0, 4.0], [19600.0, 6.0], [20000.0, 8.0], [19800.0, 5.0], [20400.0, 2.0], [20200.0, 5.0], [21400.0, 3.0], [20600.0, 7.0], [21000.0, 8.0], [20800.0, 2.0], [21200.0, 9.0], [21800.0, 6.0], [21600.0, 2.0], [22200.0, 2.0], [22000.0, 3.0], [22400.0, 1.0], [22800.0, 2.0], [23200.0, 2.0], [23400.0, 4.0], [23000.0, 2.0], [22600.0, 1.0], [24000.0, 4.0], [23800.0, 1.0], [24200.0, 13.0], [24400.0, 6.0], [24600.0, 5.0], [24800.0, 7.0], [25200.0, 2.0], [25600.0, 4.0], [25800.0, 3.0], [26200.0, 5.0], [26000.0, 4.0], [26400.0, 9.0], [26600.0, 19.0], [26800.0, 14.0], [27000.0, 5.0], [27400.0, 7.0], [27200.0, 6.0], [27600.0, 3.0], [27800.0, 5.0], [16500.0, 5.0], [16900.0, 3.0], [17100.0, 2.0], [18100.0, 13.0], [18300.0, 9.0], [17700.0, 3.0], [19300.0, 1.0], [18500.0, 15.0], [18700.0, 4.0], [18900.0, 1.0], [19100.0, 2.0], [19500.0, 4.0], [20100.0, 10.0], [19700.0, 4.0], [20300.0, 13.0], [19900.0, 2.0], [20500.0, 4.0], [20700.0, 8.0], [21300.0, 2.0], [20900.0, 3.0], [21100.0, 3.0], [21500.0, 6.0], [21700.0, 2.0], [21900.0, 3.0], [22500.0, 8.0], [22100.0, 6.0], [22300.0, 5.0], [22700.0, 2.0], [23300.0, 4.0], [22900.0, 3.0], [23100.0, 1.0], [24100.0, 7.0], [23900.0, 4.0], [23700.0, 3.0], [24300.0, 7.0], [24500.0, 4.0], [24700.0, 4.0], [24900.0, 5.0], [25300.0, 4.0], [25500.0, 7.0], [25100.0, 3.0], [25700.0, 6.0], [26100.0, 5.0], [26300.0, 10.0], [25900.0, 6.0], [26500.0, 2.0], [26700.0, 10.0], [26900.0, 7.0], [27300.0, 8.0], [27100.0, 4.0], [27500.0, 5.0], [27700.0, 3.0], [27900.0, 1.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 27900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 981.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 18.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 981.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.7460000000002, "minX": 1.75576056E12, "maxY": 501.7460000000002, "series": [{"data": [[1.75576056E12, 501.7460000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576056E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 657.0, "minX": 1.0, "maxY": 27930.0, "series": [{"data": [[7.0, 27764.166666666668], [8.0, 27186.0], [10.0, 27602.5], [11.0, 27375.0], [12.0, 25783.0], [13.0, 27761.0], [14.0, 27263.0], [15.0, 27097.0], [17.0, 27575.5], [18.0, 26949.0], [19.0, 26914.0], [21.0, 27707.0], [22.0, 26822.0], [23.0, 27573.0], [24.0, 26897.0], [25.0, 27497.0], [27.0, 27478.5], [28.0, 27313.0], [30.0, 27131.5], [31.0, 27299.0], [33.0, 27116.0], [35.0, 27295.0], [34.0, 27523.0], [36.0, 27275.0], [39.0, 27311.0], [38.0, 27355.0], [41.0, 27487.0], [40.0, 27494.0], [42.0, 27241.0], [45.0, 27274.333333333332], [46.0, 27102.0], [49.0, 26588.5], [48.0, 27388.0], [50.0, 27055.0], [53.0, 26888.666666666668], [55.0, 26777.0], [54.0, 27437.0], [57.0, 26806.0], [56.0, 27340.0], [58.0, 26854.0], [61.0, 26361.0], [60.0, 26819.0], [63.0, 26838.0], [62.0, 25596.0], [67.0, 27023.0], [66.0, 26609.0], [65.0, 26969.0], [64.0, 26868.0], [71.0, 26425.5], [69.0, 26842.0], [68.0, 26881.0], [75.0, 26040.0], [74.0, 26856.0], [72.0, 26638.0], [78.0, 26801.0], [76.0, 26927.0], [82.0, 26696.0], [81.0, 26429.0], [80.0, 26809.5], [87.0, 26171.0], [85.0, 26376.0], [84.0, 26535.5], [91.0, 26751.5], [89.0, 26858.5], [95.0, 26740.0], [94.0, 25951.0], [93.0, 26587.0], [92.0, 25905.0], [99.0, 26783.0], [98.0, 26432.0], [97.0, 26358.0], [96.0, 26817.0], [101.0, 25109.0], [100.0, 26648.0], [107.0, 26574.0], [106.0, 25432.0], [104.0, 24982.333333333332], [110.0, 26642.0], [109.0, 26717.0], [108.0, 25717.0], [119.0, 26434.11111111111], [123.0, 26639.0], [122.0, 26657.0], [121.0, 26229.0], [120.0, 26232.0], [127.0, 26016.0], [125.0, 26288.0], [134.0, 24327.0], [133.0, 26602.0], [132.0, 26615.0], [131.0, 26516.0], [129.0, 26426.0], [128.0, 26646.0], [143.0, 24518.0], [142.0, 26488.0], [141.0, 26096.0], [139.0, 24405.0], [138.0, 26039.0], [137.0, 24270.0], [136.0, 26376.5], [151.0, 26459.0], [150.0, 26133.0], [148.0, 23985.0], [147.0, 25652.5], [145.0, 26094.0], [159.0, 26222.0], [158.0, 25895.0], [157.0, 26036.0], [156.0, 26119.0], [155.0, 25667.0], [154.0, 26158.0], [153.0, 25387.0], [152.0, 26313.0], [166.0, 24813.0], [165.0, 25377.0], [164.0, 25663.0], [163.0, 23475.0], [162.0, 25737.0], [161.0, 25519.0], [160.0, 25849.0], [175.0, 25042.333333333332], [172.0, 25593.0], [171.0, 25580.0], [170.0, 25332.0], [169.0, 25252.0], [168.0, 25191.0], [181.0, 24570.0], [180.0, 24930.5], [178.0, 25487.0], [177.0, 25580.0], [189.0, 24803.0], [188.0, 24104.0], [187.0, 24587.166666666664], [197.0, 24345.5], [195.0, 22681.0], [194.0, 24615.333333333332], [193.0, 24430.0], [207.0, 24884.0], [206.0, 24737.0], [205.0, 24917.0], [204.0, 23719.5], [202.0, 24184.0], [201.0, 24685.0], [200.0, 24716.666666666668], [215.0, 24510.0], [214.0, 24436.0], [213.0, 24397.0], [212.0, 22500.0], [211.0, 24692.0], [210.0, 24703.0], [209.0, 23769.0], [208.0, 24719.0], [223.0, 24315.0], [222.0, 24107.333333333332], [221.0, 24259.5], [217.0, 24338.0], [216.0, 24219.0], [231.0, 24277.0], [230.0, 23759.0], [229.0, 24261.0], [228.0, 24288.0], [227.0, 24186.0], [226.0, 24223.0], [224.0, 23972.0], [239.0, 24127.0], [238.0, 23905.0], [237.0, 24268.0], [236.0, 24278.0], [235.0, 23992.0], [234.0, 24281.0], [233.0, 23695.0], [246.0, 22804.0], [245.0, 23050.5], [243.0, 23715.0], [241.0, 23931.5], [255.0, 22684.666666666668], [252.0, 22027.5], [250.0, 23147.0], [249.0, 23051.0], [248.0, 23244.5], [258.0, 22988.0], [269.0, 21997.4], [265.0, 22575.0], [263.0, 22100.0], [262.0, 22796.0], [261.0, 23080.5], [259.0, 22927.0], [257.0, 23340.0], [256.0, 23206.0], [286.0, 22313.0], [283.0, 22189.5], [282.0, 22100.0], [278.0, 22169.666666666668], [276.0, 22302.0], [274.0, 22188.4], [297.0, 21515.0], [296.0, 21998.0], [295.0, 21675.0], [294.0, 21147.0], [293.0, 22154.333333333332], [290.0, 22526.0], [289.0, 22099.714285714283], [319.0, 20598.333333333332], [316.0, 21039.0], [315.0, 21430.0], [314.0, 21548.0], [313.0, 21487.666666666668], [310.0, 20407.333333333332], [307.0, 21096.5], [305.0, 21280.0], [304.0, 21644.0], [334.0, 20960.5], [332.0, 20633.6], [327.0, 21077.4], [324.0, 20771.0], [321.0, 20331.0], [320.0, 21278.0], [350.0, 19323.333333333332], [347.0, 20512.5], [343.0, 20532.0], [342.0, 19847.5], [341.0, 21003.0], [339.0, 21015.0], [338.0, 20530.333333333332], [336.0, 21101.0], [366.0, 20332.0], [365.0, 20476.5], [361.0, 20409.666666666668], [358.0, 20662.75], [354.0, 20421.0], [353.0, 19203.0], [371.0, 20170.0], [383.0, 20348.0], [382.0, 19745.0], [380.0, 19401.333333333332], [377.0, 20371.5], [375.0, 19434.333333333332], [374.0, 20246.0], [370.0, 19027.5], [368.0, 20280.5], [397.0, 20003.333333333332], [394.0, 19853.75], [392.0, 18162.0], [385.0, 19980.5], [415.0, 20304.0], [412.0, 19867.333333333332], [409.0, 19852.75], [407.0, 19421.0], [405.0, 19948.0], [403.0, 20303.0], [401.0, 20146.333333333332], [400.0, 19422.0], [431.0, 19086.0], [427.0, 19563.0], [426.0, 19619.0], [425.0, 20040.166666666668], [419.0, 19589.0], [418.0, 20107.0], [417.0, 20065.0], [416.0, 19026.333333333332], [444.0, 18309.75], [447.0, 18289.0], [446.0, 16517.0], [445.0, 18512.0], [443.0, 18622.0], [439.0, 18852.0], [435.0, 17825.5], [434.0, 18823.0], [432.0, 18876.0], [462.0, 18255.75], [458.0, 18329.8], [457.0, 18378.0], [452.0, 17838.0], [451.0, 18585.0], [450.0, 18591.0], [448.0, 18598.0], [479.0, 18662.0], [478.0, 18118.0], [473.0, 18330.0], [472.0, 18209.0], [468.0, 18404.0], [467.0, 18674.0], [466.0, 18490.0], [464.0, 18592.5], [494.0, 18176.0], [490.0, 18672.0], [489.0, 18572.0], [488.0, 18415.0], [485.0, 18491.0], [484.0, 18214.5], [483.0, 18443.666666666668], [481.0, 18313.0], [511.0, 18249.0], [510.0, 18167.0], [506.0, 18575.0], [504.0, 18061.0], [502.0, 18439.0], [500.0, 18229.125], [499.0, 18183.5], [540.0, 16939.0], [543.0, 16393.666666666668], [539.0, 16919.0], [537.0, 16922.666666666668], [534.0, 16997.0], [533.0, 17162.0], [530.0, 16908.0], [528.0, 17419.0], [526.0, 17101.5], [517.0, 18286.0], [516.0, 18217.85714285714], [519.0, 18372.0], [518.0, 16218.0], [522.0, 16082.0], [521.0, 15860.0], [520.0, 18146.0], [568.0, 15861.0], [561.0, 15288.0], [574.0, 14888.0], [573.0, 15167.0], [569.0, 14964.0], [558.0, 16227.0], [545.0, 16251.0], [544.0, 16828.0], [547.0, 16584.0], [546.0, 16209.0], [549.0, 16639.0], [548.0, 16177.0], [551.0, 15757.0], [550.0, 16323.0], [557.0, 14412.0], [556.0, 16277.0], [555.0, 16338.5], [553.0, 16569.0], [552.0, 16153.0], [567.0, 15396.75], [563.0, 13879.0], [562.0, 15740.0], [560.0, 15757.0], [592.0, 14404.0], [604.0, 13029.5], [582.0, 13497.0], [581.0, 13234.0], [580.0, 15209.333333333334], [577.0, 15293.0], [576.0, 15647.5], [596.0, 14857.0], [595.0, 14853.0], [594.0, 15006.0], [590.0, 14944.5], [588.0, 15207.5], [586.0, 14969.0], [585.0, 14792.333333333334], [623.0, 13379.0], [639.0, 13479.4], [634.0, 12953.333333333334], [611.0, 15022.0], [610.0, 15213.0], [609.0, 13021.0], [608.0, 14456.799999999997], [631.0, 12961.666666666666], [628.0, 12795.25], [624.0, 13868.0], [621.0, 14647.0], [620.0, 15157.0], [619.0, 14495.5], [618.0, 14695.0], [616.0, 14888.8], [669.0, 12819.0], [660.0, 12847.0], [659.0, 12351.25], [655.0, 12882.357142857143], [654.0, 12922.0], [653.0, 13475.0], [699.0, 12486.0], [703.0, 11579.5], [698.0, 11926.4], [696.0, 11780.0], [694.0, 12503.0], [691.0, 11515.333333333334], [688.0, 10614.0], [687.0, 11448.0], [672.0, 12473.181818181818], [679.0, 11998.0], [675.0, 11907.0], [685.0, 12319.0], [684.0, 11918.6], [732.0, 11387.5], [734.0, 11852.0], [735.0, 11324.0], [733.0, 11993.0], [726.0, 11967.666666666666], [723.0, 11530.166666666668], [717.0, 11534.0], [704.0, 12338.0], [711.0, 11530.5], [707.0, 10347.666666666666], [714.0, 12036.0], [713.0, 12101.0], [712.0, 12234.0], [765.0, 10743.0], [767.0, 10970.666666666668], [760.0, 10797.0], [742.0, 11000.666666666666], [739.0, 10167.5], [737.0, 10111.0], [759.0, 10226.0], [758.0, 10844.0], [755.0, 9683.0], [753.0, 10775.0], [751.0, 8866.0], [750.0, 11140.666666666666], [747.0, 8703.0], [746.0, 11296.0], [745.0, 11449.0], [744.0, 10264.5], [797.0, 10278.0], [799.0, 10238.0], [796.0, 10453.0], [795.0, 10391.0], [794.0, 10420.666666666668], [775.0, 9635.25], [771.0, 10780.0], [770.0, 10927.0], [769.0, 10073.5], [788.0, 10820.0], [787.0, 10142.0], [786.0, 10136.75], [782.0, 10095.0], [778.0, 9532.5], [776.0, 10386.0], [831.0, 9622.0], [822.0, 9972.0], [820.0, 8916.5], [818.0, 9951.0], [816.0, 10043.0], [815.0, 10157.5], [811.0, 8997.875], [803.0, 10303.0], [837.0, 9631.0], [862.0, 9152.0], [861.0, 9449.444444444443], [852.0, 8643.75], [848.0, 9709.0], [847.0, 9911.0], [846.0, 9789.222222222223], [836.0, 9947.0], [835.0, 9643.0], [834.0, 9850.333333333334], [890.0, 7555.0], [894.0, 7532.0], [895.0, 7453.0], [881.0, 8370.0], [880.0, 8223.0], [884.0, 8272.0], [883.0, 8155.0], [893.0, 6422.0], [892.0, 7838.0], [891.0, 8402.0], [889.0, 8085.666666666667], [871.0, 8755.0], [869.0, 9198.5], [867.0, 7359.0], [865.0, 7174.0], [864.0, 7704.0], [879.0, 8850.0], [878.0, 7977.333333333333], [875.0, 8956.5], [873.0, 9021.0], [872.0, 9015.0], [886.0, 8222.0], [885.0, 8542.0], [920.0, 6727.5], [924.0, 5960.0], [927.0, 6381.0], [914.0, 6530.5], [912.0, 7096.0], [916.0, 6573.0], [915.0, 5327.0], [926.0, 6569.0], [925.0, 6550.0], [923.0, 5211.0], [922.0, 5328.0], [921.0, 6045.0], [911.0, 6422.5], [897.0, 7406.0], [900.0, 7058.5], [898.0, 7663.0], [902.0, 6746.0], [901.0, 6153.0], [909.0, 6716.0], [908.0, 6950.0], [907.0, 5760.0], [906.0, 6017.0], [905.0, 7107.0], [904.0, 6736.0], [918.0, 6584.0], [917.0, 6989.0], [954.0, 2926.0], [958.0, 2829.0], [959.0, 2955.0], [945.0, 4458.0], [944.0, 3492.0], [947.0, 3274.0], [946.0, 4668.0], [949.0, 3386.0], [948.0, 4330.0], [957.0, 3173.0], [956.0, 1905.0], [955.0, 3088.0], [953.0, 2182.5], [935.0, 5642.0], [934.0, 5705.0], [933.0, 5898.0], [932.0, 5688.0], [931.0, 5620.0], [930.0, 5204.0], [929.0, 5569.0], [943.0, 3574.0], [942.0, 4250.0], [941.0, 4281.0], [940.0, 5227.0], [939.0, 4567.0], [938.0, 3951.0], [937.0, 5274.0], [936.0, 5220.0], [951.0, 3602.0], [950.0, 3428.0], [986.0, 1304.0], [990.0, 1160.0], [991.0, 887.0], [976.0, 2067.0], [989.0, 1007.0], [988.0, 1292.0], [987.0, 2052.0], [985.0, 2123.0], [966.0, 1808.5], [965.0, 2316.0], [963.0, 2396.0], [960.0, 3314.0], [975.0, 971.0], [974.0, 2393.0], [973.0, 1283.0], [972.0, 2298.0], [971.0, 1443.0], [970.0, 2711.5], [968.0, 2248.5], [983.0, 1614.5], [980.0, 1002.0], [979.0, 2058.0], [977.0, 2103.0], [997.0, 657.0], [996.0, 832.0], [995.0, 808.0], [994.0, 1163.0], [993.0, 1276.0], [1.0, 27930.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}, {"data": [[501.7460000000002, 16748.52900000001]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 997.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14750.0, "minX": 1.75576056E12, "maxY": 19350.0, "series": [{"data": [[1.75576056E12, 14750.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75576056E12, 19350.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576056E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16748.52900000001, "minX": 1.75576056E12, "maxY": 16748.52900000001, "series": [{"data": [[1.75576056E12, 16748.52900000001]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576056E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 16748.477000000006, "minX": 1.75576056E12, "maxY": 16748.477000000006, "series": [{"data": [[1.75576056E12, 16748.477000000006]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576056E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1830.3400000000006, "minX": 1.75576056E12, "maxY": 1830.3400000000006, "series": [{"data": [[1.75576056E12, 1830.3400000000006]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576056E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 200.0, "minX": 1.75576056E12, "maxY": 27930.0, "series": [{"data": [[1.75576056E12, 27930.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75576056E12, 26485.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75576056E12, 27628.86]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75576056E12, 26948.199999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75576056E12, 200.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75576056E12, 18120.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576056E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 843.5, "minX": 4.0, "maxY": 27295.0, "series": [{"data": [[33.0, 1804.0], [8.0, 8170.0], [32.0, 17415.0], [37.0, 10912.0], [36.0, 24891.0], [38.0, 9316.5], [11.0, 5220.0], [46.0, 21236.0], [12.0, 2877.5], [48.0, 24266.5], [53.0, 14904.0], [14.0, 17043.5], [4.0, 843.5], [67.0, 27295.0], [68.0, 10121.0], [18.0, 14963.0], [72.0, 12114.5], [87.0, 18378.0], [86.0, 20105.5], [92.0, 26390.0], [25.0, 6880.0], [27.0, 16177.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 843.5, "minX": 4.0, "maxY": 27295.0, "series": [{"data": [[33.0, 1804.0], [8.0, 8170.0], [32.0, 17415.0], [37.0, 10912.0], [36.0, 24891.0], [38.0, 9316.5], [11.0, 5220.0], [46.0, 21236.0], [12.0, 2877.5], [48.0, 24266.5], [53.0, 14904.0], [14.0, 17043.5], [4.0, 843.5], [67.0, 27295.0], [68.0, 10121.0], [18.0, 14963.0], [72.0, 12114.5], [87.0, 18378.0], [86.0, 20105.5], [92.0, 26390.0], [25.0, 6880.0], [27.0, 16177.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 92.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576056E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576056E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576056E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576056E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576056E12, 16.666666666666668]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576056E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576056E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576056E12, 16.666666666666668]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576056E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75576056E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75576056E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576056E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

