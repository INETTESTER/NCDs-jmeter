/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 14567.0, "minX": 0.0, "maxY": 32614.0, "series": [{"data": [[0.0, 14567.0], [0.1, 14621.0], [0.2, 15074.0], [0.3, 15074.0], [0.4, 15473.0], [0.5, 15853.0], [0.6, 16012.0], [0.7, 16213.0], [0.8, 16806.0], [0.9, 17544.0], [1.0, 17975.0], [1.1, 18515.0], [1.2, 18775.0], [1.3, 19017.0], [1.4, 19017.0], [1.5, 19160.0], [1.6, 19594.0], [1.7, 19787.0], [1.8, 20030.0], [1.9, 20396.0], [2.0, 20482.0], [2.1, 20494.0], [2.2, 20615.0], [2.3, 20690.0], [2.4, 20762.0], [2.5, 21234.0], [2.6, 21241.0], [2.7, 21360.0], [2.8, 21899.0], [2.9, 22088.0], [3.0, 22194.0], [3.1, 22840.0], [3.2, 22998.0], [3.3, 23039.0], [3.4, 23393.0], [3.5, 24974.0], [3.6, 25012.0], [3.7, 25108.0], [3.8, 25528.0], [3.9, 25731.0], [4.0, 25923.0], [4.1, 26072.0], [4.2, 26136.0], [4.3, 26717.0], [4.4, 27160.0], [4.5, 27378.0], [4.6, 27840.0], [4.7, 28408.0], [4.8, 28685.0], [4.9, 30016.0], [5.0, 30016.0], [5.1, 30017.0], [5.2, 30017.0], [5.3, 30017.0], [5.4, 30017.0], [5.5, 30017.0], [5.6, 30018.0], [5.7, 30018.0], [5.8, 30018.0], [5.9, 30018.0], [6.0, 30018.0], [6.1, 30018.0], [6.2, 30018.0], [6.3, 30018.0], [6.4, 30018.0], [6.5, 30019.0], [6.6, 30019.0], [6.7, 30019.0], [6.8, 30019.0], [6.9, 30019.0], [7.0, 30019.0], [7.1, 30019.0], [7.2, 30019.0], [7.3, 30019.0], [7.4, 30019.0], [7.5, 30019.0], [7.6, 30019.0], [7.7, 30019.0], [7.8, 30019.0], [7.9, 30019.0], [8.0, 30019.0], [8.1, 30019.0], [8.2, 30019.0], [8.3, 30020.0], [8.4, 30020.0], [8.5, 30020.0], [8.6, 30020.0], [8.7, 30020.0], [8.8, 30020.0], [8.9, 30020.0], [9.0, 30020.0], [9.1, 30020.0], [9.2, 30020.0], [9.3, 30020.0], [9.4, 30020.0], [9.5, 30020.0], [9.6, 30020.0], [9.7, 30021.0], [9.8, 30021.0], [9.9, 30021.0], [10.0, 30021.0], [10.1, 30021.0], [10.2, 30021.0], [10.3, 30021.0], [10.4, 30021.0], [10.5, 30021.0], [10.6, 30021.0], [10.7, 30021.0], [10.8, 30021.0], [10.9, 30021.0], [11.0, 30021.0], [11.1, 30021.0], [11.2, 30021.0], [11.3, 30021.0], [11.4, 30021.0], [11.5, 30021.0], [11.6, 30021.0], [11.7, 30021.0], [11.8, 30021.0], [11.9, 30021.0], [12.0, 30021.0], [12.1, 30021.0], [12.2, 30021.0], [12.3, 30022.0], [12.4, 30022.0], [12.5, 30022.0], [12.6, 30022.0], [12.7, 30022.0], [12.8, 30022.0], [12.9, 30022.0], [13.0, 30022.0], [13.1, 30022.0], [13.2, 30022.0], [13.3, 30022.0], [13.4, 30022.0], [13.5, 30022.0], [13.6, 30022.0], [13.7, 30022.0], [13.8, 30022.0], [13.9, 30022.0], [14.0, 30023.0], [14.1, 30023.0], [14.2, 30023.0], [14.3, 30023.0], [14.4, 30023.0], [14.5, 30023.0], [14.6, 30023.0], [14.7, 30024.0], [14.8, 30024.0], [14.9, 30024.0], [15.0, 30024.0], [15.1, 30024.0], [15.2, 30024.0], [15.3, 30024.0], [15.4, 30024.0], [15.5, 30024.0], [15.6, 30024.0], [15.7, 30025.0], [15.8, 30025.0], [15.9, 30025.0], [16.0, 30025.0], [16.1, 30025.0], [16.2, 30025.0], [16.3, 30025.0], [16.4, 30025.0], [16.5, 30025.0], [16.6, 30026.0], [16.7, 30026.0], [16.8, 30026.0], [16.9, 30026.0], [17.0, 30026.0], [17.1, 30027.0], [17.2, 30027.0], [17.3, 30027.0], [17.4, 30027.0], [17.5, 30027.0], [17.6, 30028.0], [17.7, 30028.0], [17.8, 30028.0], [17.9, 30028.0], [18.0, 30028.0], [18.1, 30028.0], [18.2, 30029.0], [18.3, 30030.0], [18.4, 30030.0], [18.5, 30031.0], [18.6, 30031.0], [18.7, 30032.0], [18.8, 30032.0], [18.9, 30033.0], [19.0, 30034.0], [19.1, 30034.0], [19.2, 30034.0], [19.3, 30034.0], [19.4, 30035.0], [19.5, 30035.0], [19.6, 30036.0], [19.7, 30037.0], [19.8, 30038.0], [19.9, 30038.0], [20.0, 30039.0], [20.1, 30039.0], [20.2, 30039.0], [20.3, 30041.0], [20.4, 30041.0], [20.5, 30041.0], [20.6, 30047.0], [20.7, 30047.0], [20.8, 30058.0], [20.9, 30061.0], [21.0, 30070.0], [21.1, 30085.0], [21.2, 30087.0], [21.3, 30091.0], [21.4, 30091.0], [21.5, 30111.0], [21.6, 30113.0], [21.7, 30130.0], [21.8, 30137.0], [21.9, 30150.0], [22.0, 30164.0], [22.1, 30176.0], [22.2, 30204.0], [22.3, 30207.0], [22.4, 30221.0], [22.5, 30221.0], [22.6, 30222.0], [22.7, 30247.0], [22.8, 30248.0], [22.9, 30305.0], [23.0, 30374.0], [23.1, 30392.0], [23.2, 30416.0], [23.3, 30420.0], [23.4, 30436.0], [23.5, 30450.0], [23.6, 30478.0], [23.7, 30517.0], [23.8, 30518.0], [23.9, 30556.0], [24.0, 30579.0], [24.1, 30596.0], [24.2, 30607.0], [24.3, 30629.0], [24.4, 30638.0], [24.5, 30649.0], [24.6, 30653.0], [24.7, 30658.0], [24.8, 30699.0], [24.9, 30718.0], [25.0, 30737.0], [25.1, 30741.0], [25.2, 30743.0], [25.3, 30750.0], [25.4, 30751.0], [25.5, 30755.0], [25.6, 30759.0], [25.7, 30762.0], [25.8, 30783.0], [25.9, 30785.0], [26.0, 30787.0], [26.1, 30788.0], [26.2, 30792.0], [26.3, 30800.0], [26.4, 30816.0], [26.5, 30817.0], [26.6, 30823.0], [26.7, 30824.0], [26.8, 30827.0], [26.9, 30839.0], [27.0, 30844.0], [27.1, 30850.0], [27.2, 30851.0], [27.3, 30852.0], [27.4, 30856.0], [27.5, 30871.0], [27.6, 30876.0], [27.7, 30876.0], [27.8, 30879.0], [27.9, 30883.0], [28.0, 30889.0], [28.1, 30889.0], [28.2, 30894.0], [28.3, 30895.0], [28.4, 30898.0], [28.5, 30899.0], [28.6, 30900.0], [28.7, 30901.0], [28.8, 30902.0], [28.9, 30902.0], [29.0, 30903.0], [29.1, 30903.0], [29.2, 30903.0], [29.3, 30903.0], [29.4, 30904.0], [29.5, 30910.0], [29.6, 30910.0], [29.7, 30914.0], [29.8, 30916.0], [29.9, 30918.0], [30.0, 30919.0], [30.1, 30920.0], [30.2, 30921.0], [30.3, 30922.0], [30.4, 30925.0], [30.5, 30925.0], [30.6, 30925.0], [30.7, 30929.0], [30.8, 30930.0], [30.9, 30931.0], [31.0, 30931.0], [31.1, 30932.0], [31.2, 30933.0], [31.3, 30933.0], [31.4, 30934.0], [31.5, 30935.0], [31.6, 30935.0], [31.7, 30936.0], [31.8, 30939.0], [31.9, 30939.0], [32.0, 30942.0], [32.1, 30948.0], [32.2, 30948.0], [32.3, 30948.0], [32.4, 30950.0], [32.5, 30953.0], [32.6, 30953.0], [32.7, 30957.0], [32.8, 30959.0], [32.9, 30963.0], [33.0, 30964.0], [33.1, 30967.0], [33.2, 30968.0], [33.3, 30970.0], [33.4, 30974.0], [33.5, 30977.0], [33.6, 30978.0], [33.7, 30979.0], [33.8, 30981.0], [33.9, 30983.0], [34.0, 30990.0], [34.1, 30991.0], [34.2, 30991.0], [34.3, 30996.0], [34.4, 30999.0], [34.5, 31007.0], [34.6, 31017.0], [34.7, 31025.0], [34.8, 31025.0], [34.9, 31026.0], [35.0, 31026.0], [35.1, 31028.0], [35.2, 31029.0], [35.3, 31033.0], [35.4, 31041.0], [35.5, 31045.0], [35.6, 31048.0], [35.7, 31050.0], [35.8, 31060.0], [35.9, 31060.0], [36.0, 31062.0], [36.1, 31064.0], [36.2, 31064.0], [36.3, 31066.0], [36.4, 31068.0], [36.5, 31072.0], [36.6, 31074.0], [36.7, 31075.0], [36.8, 31075.0], [36.9, 31076.0], [37.0, 31077.0], [37.1, 31079.0], [37.2, 31079.0], [37.3, 31080.0], [37.4, 31081.0], [37.5, 31083.0], [37.6, 31086.0], [37.7, 31087.0], [37.8, 31090.0], [37.9, 31095.0], [38.0, 31096.0], [38.1, 31097.0], [38.2, 31099.0], [38.3, 31099.0], [38.4, 31100.0], [38.5, 31102.0], [38.6, 31103.0], [38.7, 31105.0], [38.8, 31105.0], [38.9, 31117.0], [39.0, 31118.0], [39.1, 31121.0], [39.2, 31124.0], [39.3, 31124.0], [39.4, 31127.0], [39.5, 31129.0], [39.6, 31130.0], [39.7, 31130.0], [39.8, 31131.0], [39.9, 31132.0], [40.0, 31133.0], [40.1, 31145.0], [40.2, 31150.0], [40.3, 31153.0], [40.4, 31155.0], [40.5, 31159.0], [40.6, 31163.0], [40.7, 31164.0], [40.8, 31166.0], [40.9, 31166.0], [41.0, 31169.0], [41.1, 31171.0], [41.2, 31186.0], [41.3, 31186.0], [41.4, 31187.0], [41.5, 31195.0], [41.6, 31196.0], [41.7, 31202.0], [41.8, 31206.0], [41.9, 31206.0], [42.0, 31220.0], [42.1, 31221.0], [42.2, 31224.0], [42.3, 31227.0], [42.4, 31236.0], [42.5, 31239.0], [42.6, 31239.0], [42.7, 31240.0], [42.8, 31244.0], [42.9, 31252.0], [43.0, 31252.0], [43.1, 31266.0], [43.2, 31266.0], [43.3, 31266.0], [43.4, 31267.0], [43.5, 31267.0], [43.6, 31273.0], [43.7, 31277.0], [43.8, 31277.0], [43.9, 31277.0], [44.0, 31279.0], [44.1, 31280.0], [44.2, 31282.0], [44.3, 31284.0], [44.4, 31290.0], [44.5, 31292.0], [44.6, 31296.0], [44.7, 31298.0], [44.8, 31299.0], [44.9, 31302.0], [45.0, 31310.0], [45.1, 31312.0], [45.2, 31318.0], [45.3, 31318.0], [45.4, 31319.0], [45.5, 31322.0], [45.6, 31322.0], [45.7, 31324.0], [45.8, 31326.0], [45.9, 31326.0], [46.0, 31331.0], [46.1, 31331.0], [46.2, 31333.0], [46.3, 31339.0], [46.4, 31339.0], [46.5, 31343.0], [46.6, 31347.0], [46.7, 31349.0], [46.8, 31350.0], [46.9, 31351.0], [47.0, 31351.0], [47.1, 31351.0], [47.2, 31354.0], [47.3, 31355.0], [47.4, 31356.0], [47.5, 31356.0], [47.6, 31360.0], [47.7, 31362.0], [47.8, 31363.0], [47.9, 31367.0], [48.0, 31370.0], [48.1, 31371.0], [48.2, 31371.0], [48.3, 31383.0], [48.4, 31390.0], [48.5, 31400.0], [48.6, 31405.0], [48.7, 31410.0], [48.8, 31412.0], [48.9, 31422.0], [49.0, 31423.0], [49.1, 31435.0], [49.2, 31438.0], [49.3, 31454.0], [49.4, 31455.0], [49.5, 31460.0], [49.6, 31462.0], [49.7, 31463.0], [49.8, 31464.0], [49.9, 31466.0], [50.0, 31477.0], [50.1, 31478.0], [50.2, 31479.0], [50.3, 31482.0], [50.4, 31485.0], [50.5, 31486.0], [50.6, 31495.0], [50.7, 31497.0], [50.8, 31498.0], [50.9, 31499.0], [51.0, 31502.0], [51.1, 31503.0], [51.2, 31509.0], [51.3, 31511.0], [51.4, 31512.0], [51.5, 31514.0], [51.6, 31518.0], [51.7, 31519.0], [51.8, 31520.0], [51.9, 31523.0], [52.0, 31529.0], [52.1, 31531.0], [52.2, 31531.0], [52.3, 31532.0], [52.4, 31535.0], [52.5, 31537.0], [52.6, 31538.0], [52.7, 31539.0], [52.8, 31542.0], [52.9, 31545.0], [53.0, 31547.0], [53.1, 31554.0], [53.2, 31558.0], [53.3, 31558.0], [53.4, 31560.0], [53.5, 31561.0], [53.6, 31563.0], [53.7, 31565.0], [53.8, 31565.0], [53.9, 31568.0], [54.0, 31571.0], [54.1, 31573.0], [54.2, 31576.0], [54.3, 31577.0], [54.4, 31582.0], [54.5, 31583.0], [54.6, 31585.0], [54.7, 31594.0], [54.8, 31594.0], [54.9, 31595.0], [55.0, 31597.0], [55.1, 31601.0], [55.2, 31602.0], [55.3, 31602.0], [55.4, 31603.0], [55.5, 31604.0], [55.6, 31604.0], [55.7, 31614.0], [55.8, 31617.0], [55.9, 31619.0], [56.0, 31620.0], [56.1, 31622.0], [56.2, 31623.0], [56.3, 31624.0], [56.4, 31635.0], [56.5, 31639.0], [56.6, 31639.0], [56.7, 31640.0], [56.8, 31642.0], [56.9, 31643.0], [57.0, 31643.0], [57.1, 31644.0], [57.2, 31645.0], [57.3, 31647.0], [57.4, 31652.0], [57.5, 31653.0], [57.6, 31653.0], [57.7, 31654.0], [57.8, 31656.0], [57.9, 31659.0], [58.0, 31659.0], [58.1, 31659.0], [58.2, 31660.0], [58.3, 31668.0], [58.4, 31669.0], [58.5, 31669.0], [58.6, 31669.0], [58.7, 31670.0], [58.8, 31670.0], [58.9, 31674.0], [59.0, 31675.0], [59.1, 31677.0], [59.2, 31680.0], [59.3, 31683.0], [59.4, 31684.0], [59.5, 31698.0], [59.6, 31700.0], [59.7, 31701.0], [59.8, 31701.0], [59.9, 31708.0], [60.0, 31713.0], [60.1, 31713.0], [60.2, 31714.0], [60.3, 31717.0], [60.4, 31717.0], [60.5, 31718.0], [60.6, 31725.0], [60.7, 31725.0], [60.8, 31728.0], [60.9, 31732.0], [61.0, 31737.0], [61.1, 31742.0], [61.2, 31745.0], [61.3, 31746.0], [61.4, 31757.0], [61.5, 31760.0], [61.6, 31760.0], [61.7, 31760.0], [61.8, 31762.0], [61.9, 31764.0], [62.0, 31766.0], [62.1, 31770.0], [62.2, 31770.0], [62.3, 31778.0], [62.4, 31778.0], [62.5, 31778.0], [62.6, 31779.0], [62.7, 31781.0], [62.8, 31784.0], [62.9, 31788.0], [63.0, 31789.0], [63.1, 31789.0], [63.2, 31793.0], [63.3, 31795.0], [63.4, 31797.0], [63.5, 31798.0], [63.6, 31799.0], [63.7, 31800.0], [63.8, 31802.0], [63.9, 31803.0], [64.0, 31805.0], [64.1, 31806.0], [64.2, 31808.0], [64.3, 31810.0], [64.4, 31814.0], [64.5, 31818.0], [64.6, 31820.0], [64.7, 31821.0], [64.8, 31821.0], [64.9, 31821.0], [65.0, 31823.0], [65.1, 31823.0], [65.2, 31824.0], [65.3, 31825.0], [65.4, 31825.0], [65.5, 31825.0], [65.6, 31826.0], [65.7, 31826.0], [65.8, 31827.0], [65.9, 31827.0], [66.0, 31827.0], [66.1, 31830.0], [66.2, 31832.0], [66.3, 31832.0], [66.4, 31833.0], [66.5, 31840.0], [66.6, 31842.0], [66.7, 31843.0], [66.8, 31843.0], [66.9, 31845.0], [67.0, 31846.0], [67.1, 31849.0], [67.2, 31852.0], [67.3, 31853.0], [67.4, 31854.0], [67.5, 31858.0], [67.6, 31858.0], [67.7, 31858.0], [67.8, 31859.0], [67.9, 31861.0], [68.0, 31861.0], [68.1, 31862.0], [68.2, 31864.0], [68.3, 31865.0], [68.4, 31865.0], [68.5, 31866.0], [68.6, 31868.0], [68.7, 31869.0], [68.8, 31871.0], [68.9, 31878.0], [69.0, 31879.0], [69.1, 31879.0], [69.2, 31880.0], [69.3, 31880.0], [69.4, 31884.0], [69.5, 31885.0], [69.6, 31886.0], [69.7, 31891.0], [69.8, 31902.0], [69.9, 31903.0], [70.0, 31903.0], [70.1, 31904.0], [70.2, 31909.0], [70.3, 31910.0], [70.4, 31912.0], [70.5, 31914.0], [70.6, 31916.0], [70.7, 31916.0], [70.8, 31924.0], [70.9, 31926.0], [71.0, 31927.0], [71.1, 31928.0], [71.2, 31929.0], [71.3, 31929.0], [71.4, 31931.0], [71.5, 31934.0], [71.6, 31936.0], [71.7, 31936.0], [71.8, 31940.0], [71.9, 31941.0], [72.0, 31944.0], [72.1, 31944.0], [72.2, 31945.0], [72.3, 31946.0], [72.4, 31946.0], [72.5, 31953.0], [72.6, 31954.0], [72.7, 31955.0], [72.8, 31956.0], [72.9, 31957.0], [73.0, 31958.0], [73.1, 31959.0], [73.2, 31959.0], [73.3, 31960.0], [73.4, 31961.0], [73.5, 31962.0], [73.6, 31962.0], [73.7, 31963.0], [73.8, 31964.0], [73.9, 31965.0], [74.0, 31967.0], [74.1, 31967.0], [74.2, 31968.0], [74.3, 31969.0], [74.4, 31969.0], [74.5, 31970.0], [74.6, 31970.0], [74.7, 31971.0], [74.8, 31972.0], [74.9, 31972.0], [75.0, 31974.0], [75.1, 31975.0], [75.2, 31977.0], [75.3, 31977.0], [75.4, 31979.0], [75.5, 31979.0], [75.6, 31980.0], [75.7, 31985.0], [75.8, 31985.0], [75.9, 31986.0], [76.0, 31986.0], [76.1, 31986.0], [76.2, 31987.0], [76.3, 31988.0], [76.4, 31990.0], [76.5, 31995.0], [76.6, 31998.0], [76.7, 31999.0], [76.8, 31999.0], [76.9, 32000.0], [77.0, 32002.0], [77.1, 32004.0], [77.2, 32006.0], [77.3, 32008.0], [77.4, 32009.0], [77.5, 32009.0], [77.6, 32010.0], [77.7, 32013.0], [77.8, 32021.0], [77.9, 32023.0], [78.0, 32025.0], [78.1, 32028.0], [78.2, 32029.0], [78.3, 32029.0], [78.4, 32029.0], [78.5, 32030.0], [78.6, 32033.0], [78.7, 32034.0], [78.8, 32035.0], [78.9, 32035.0], [79.0, 32035.0], [79.1, 32037.0], [79.2, 32037.0], [79.3, 32038.0], [79.4, 32039.0], [79.5, 32043.0], [79.6, 32043.0], [79.7, 32044.0], [79.8, 32045.0], [79.9, 32047.0], [80.0, 32047.0], [80.1, 32049.0], [80.2, 32052.0], [80.3, 32053.0], [80.4, 32053.0], [80.5, 32054.0], [80.6, 32057.0], [80.7, 32058.0], [80.8, 32060.0], [80.9, 32060.0], [81.0, 32061.0], [81.1, 32064.0], [81.2, 32069.0], [81.3, 32070.0], [81.4, 32071.0], [81.5, 32072.0], [81.6, 32074.0], [81.7, 32075.0], [81.8, 32076.0], [81.9, 32080.0], [82.0, 32080.0], [82.1, 32080.0], [82.2, 32082.0], [82.3, 32083.0], [82.4, 32087.0], [82.5, 32087.0], [82.6, 32087.0], [82.7, 32092.0], [82.8, 32093.0], [82.9, 32094.0], [83.0, 32096.0], [83.1, 32099.0], [83.2, 32101.0], [83.3, 32102.0], [83.4, 32106.0], [83.5, 32107.0], [83.6, 32107.0], [83.7, 32112.0], [83.8, 32113.0], [83.9, 32114.0], [84.0, 32115.0], [84.1, 32117.0], [84.2, 32117.0], [84.3, 32118.0], [84.4, 32120.0], [84.5, 32120.0], [84.6, 32120.0], [84.7, 32121.0], [84.8, 32124.0], [84.9, 32128.0], [85.0, 32129.0], [85.1, 32131.0], [85.2, 32131.0], [85.3, 32132.0], [85.4, 32132.0], [85.5, 32133.0], [85.6, 32133.0], [85.7, 32133.0], [85.8, 32133.0], [85.9, 32135.0], [86.0, 32136.0], [86.1, 32140.0], [86.2, 32141.0], [86.3, 32142.0], [86.4, 32145.0], [86.5, 32145.0], [86.6, 32147.0], [86.7, 32155.0], [86.8, 32164.0], [86.9, 32165.0], [87.0, 32167.0], [87.1, 32170.0], [87.2, 32181.0], [87.3, 32185.0], [87.4, 32185.0], [87.5, 32185.0], [87.6, 32189.0], [87.7, 32192.0], [87.8, 32192.0], [87.9, 32193.0], [88.0, 32193.0], [88.1, 32195.0], [88.2, 32196.0], [88.3, 32202.0], [88.4, 32207.0], [88.5, 32207.0], [88.6, 32207.0], [88.7, 32208.0], [88.8, 32210.0], [88.9, 32215.0], [89.0, 32216.0], [89.1, 32218.0], [89.2, 32220.0], [89.3, 32223.0], [89.4, 32224.0], [89.5, 32225.0], [89.6, 32226.0], [89.7, 32228.0], [89.8, 32228.0], [89.9, 32230.0], [90.0, 32232.0], [90.1, 32235.0], [90.2, 32237.0], [90.3, 32237.0], [90.4, 32237.0], [90.5, 32239.0], [90.6, 32242.0], [90.7, 32250.0], [90.8, 32252.0], [90.9, 32255.0], [91.0, 32257.0], [91.1, 32257.0], [91.2, 32262.0], [91.3, 32262.0], [91.4, 32264.0], [91.5, 32274.0], [91.6, 32274.0], [91.7, 32276.0], [91.8, 32277.0], [91.9, 32281.0], [92.0, 32287.0], [92.1, 32294.0], [92.2, 32297.0], [92.3, 32301.0], [92.4, 32302.0], [92.5, 32305.0], [92.6, 32305.0], [92.7, 32312.0], [92.8, 32313.0], [92.9, 32317.0], [93.0, 32318.0], [93.1, 32321.0], [93.2, 32323.0], [93.3, 32323.0], [93.4, 32323.0], [93.5, 32327.0], [93.6, 32327.0], [93.7, 32329.0], [93.8, 32329.0], [93.9, 32334.0], [94.0, 32334.0], [94.1, 32337.0], [94.2, 32337.0], [94.3, 32338.0], [94.4, 32341.0], [94.5, 32344.0], [94.6, 32349.0], [94.7, 32352.0], [94.8, 32354.0], [94.9, 32354.0], [95.0, 32360.0], [95.1, 32378.0], [95.2, 32382.0], [95.3, 32387.0], [95.4, 32389.0], [95.5, 32389.0], [95.6, 32406.0], [95.7, 32408.0], [95.8, 32413.0], [95.9, 32414.0], [96.0, 32418.0], [96.1, 32422.0], [96.2, 32436.0], [96.3, 32440.0], [96.4, 32440.0], [96.5, 32442.0], [96.6, 32443.0], [96.7, 32445.0], [96.8, 32454.0], [96.9, 32456.0], [97.0, 32459.0], [97.1, 32477.0], [97.2, 32480.0], [97.3, 32487.0], [97.4, 32498.0], [97.5, 32501.0], [97.6, 32513.0], [97.7, 32513.0], [97.8, 32520.0], [97.9, 32525.0], [98.0, 32526.0], [98.1, 32547.0], [98.2, 32550.0], [98.3, 32553.0], [98.4, 32554.0], [98.5, 32555.0], [98.6, 32558.0], [98.7, 32558.0], [98.8, 32558.0], [98.9, 32575.0], [99.0, 32586.0], [99.1, 32600.0], [99.2, 32601.0], [99.3, 32604.0], [99.4, 32604.0], [99.5, 32605.0], [99.6, 32606.0], [99.7, 32606.0], [99.8, 32612.0], [99.9, 32614.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 14500.0, "maxY": 165.0, "series": [{"data": [[14600.0, 1.0], [14500.0, 1.0], [15000.0, 1.0], [15400.0, 2.0], [15800.0, 1.0], [16000.0, 1.0], [16200.0, 1.0], [16800.0, 1.0], [17500.0, 1.0], [17900.0, 1.0], [18700.0, 1.0], [18500.0, 1.0], [19000.0, 1.0], [19100.0, 1.0], [19500.0, 1.0], [19700.0, 1.0], [20400.0, 2.0], [20000.0, 1.0], [20300.0, 1.0], [20700.0, 1.0], [20600.0, 2.0], [21200.0, 2.0], [21300.0, 1.0], [22000.0, 1.0], [22100.0, 1.0], [21800.0, 1.0], [23000.0, 1.0], [22900.0, 1.0], [23300.0, 1.0], [22800.0, 1.0], [24900.0, 1.0], [25100.0, 1.0], [25500.0, 1.0], [25000.0, 1.0], [25700.0, 1.0], [26100.0, 1.0], [26000.0, 1.0], [25900.0, 1.0], [27100.0, 1.0], [27300.0, 1.0], [26700.0, 1.0], [27000.0, 1.0], [27800.0, 1.0], [28400.0, 1.0], [28600.0, 1.0], [30200.0, 7.0], [30300.0, 3.0], [30700.0, 14.0], [30600.0, 7.0], [30000.0, 165.0], [30100.0, 7.0], [30400.0, 5.0], [30500.0, 5.0], [31500.0, 41.0], [30800.0, 23.0], [30900.0, 59.0], [31000.0, 39.0], [31100.0, 33.0], [31200.0, 32.0], [31300.0, 36.0], [31400.0, 25.0], [31600.0, 45.0], [31700.0, 41.0], [31800.0, 61.0], [31900.0, 71.0], [32000.0, 64.0], [32100.0, 51.0], [32200.0, 40.0], [32300.0, 33.0], [32400.0, 19.0], [32500.0, 16.0], [32600.0, 9.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 54.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 946.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 54.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 946.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.0109999999999, "minX": 1.7557626E12, "maxY": 501.0109999999999, "series": [{"data": [[1.7557626E12, 501.0109999999999]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557626E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14567.0, "minX": 1.0, "maxY": 32612.0, "series": [{"data": [[2.0, 32612.0], [4.0, 32594.5], [5.0, 32606.0], [9.0, 32443.0], [13.0, 32604.0], [14.0, 32601.0], [15.0, 32418.0], [17.0, 32472.857142857145], [20.0, 31760.666666666668], [22.0, 31833.0], [23.0, 32586.0], [24.0, 32287.0], [25.0, 32237.0], [26.0, 32207.0], [27.0, 32170.0], [28.0, 31371.0], [29.0, 31371.0], [30.0, 31367.0], [31.0, 31363.0], [32.0, 31360.0], [35.0, 32067.0], [37.0, 31848.5], [41.0, 32192.0], [40.0, 31381.0], [43.0, 31904.5], [44.0, 32142.0], [46.0, 32382.5], [48.0, 31735.0], [51.0, 32558.0], [50.0, 32481.5], [53.0, 32483.5], [54.0, 32550.0], [59.0, 32477.0], [58.0, 32368.75], [61.0, 32533.5], [62.0, 32318.0], [67.0, 32250.0], [66.0, 31764.5], [64.0, 31196.0], [70.0, 32189.0], [69.0, 32120.0], [68.0, 32498.0], [75.0, 32456.0], [74.0, 32501.0], [73.0, 32193.0], [72.0, 32006.5], [79.0, 32317.0], [77.0, 31647.0], [83.0, 32298.5], [81.0, 32257.0], [80.0, 32157.5], [87.0, 31764.333333333332], [84.0, 31062.0], [91.0, 31019.0], [89.0, 32082.0], [88.0, 32228.0], [94.0, 32115.0], [92.0, 32406.0], [99.0, 31581.5], [97.0, 31858.333333333332], [96.0, 32513.0], [103.0, 32075.0], [102.0, 30936.0], [101.0, 30939.0], [100.0, 32053.0], [106.0, 30933.0], [105.0, 32202.0], [111.0, 31558.0], [109.0, 31837.0], [115.0, 32195.0], [114.0, 32060.0], [113.0, 31639.0], [119.0, 30922.0], [118.0, 32196.0], [117.0, 30925.0], [116.0, 32133.0], [123.0, 31510.0], [127.0, 32440.0], [126.0, 31698.666666666668], [134.0, 32040.666666666668], [132.0, 30904.0], [131.0, 30876.0], [128.0, 32039.0], [140.0, 30903.0], [138.0, 32118.5], [136.0, 32168.666666666668], [151.0, 30898.0], [147.0, 32181.0], [146.0, 31714.333333333332], [145.0, 30900.5], [144.0, 32145.0], [159.0, 30718.0], [156.0, 30839.0], [155.0, 31655.0], [153.0, 30850.0], [152.0, 31488.5], [167.0, 32215.0], [165.0, 31569.5], [163.0, 32107.0], [161.0, 32313.0], [160.0, 32029.0], [173.0, 32382.0], [172.0, 32035.0], [171.0, 30638.0], [170.0, 31539.0], [169.0, 32101.0], [168.0, 32389.0], [183.0, 31986.0], [176.0, 31862.666666666668], [190.0, 32035.0], [189.0, 31734.0], [185.0, 31964.0], [184.0, 31938.714285714283], [197.0, 32093.0], [196.0, 32010.0], [195.0, 32337.0], [194.0, 32187.0], [192.0, 31514.0], [207.0, 32193.333333333332], [201.0, 32297.0], [200.0, 32122.0], [215.0, 32004.0], [214.0, 32173.0], [212.0, 32132.0], [211.0, 32028.5], [209.0, 31988.0], [208.0, 31866.0], [221.0, 32329.0], [220.0, 31397.0], [218.0, 30478.0], [217.0, 31985.0], [216.0, 31972.0], [229.0, 31861.0], [228.0, 32000.0], [227.0, 32173.0], [224.0, 32190.333333333332], [238.0, 32118.666666666668], [235.0, 31963.0], [234.0, 32218.0], [233.0, 32019.0], [245.0, 32252.0], [244.0, 32086.333333333332], [241.0, 31910.0], [240.0, 32282.5], [255.0, 31944.0], [254.0, 32140.0], [253.0, 32149.5], [251.0, 32321.0], [250.0, 31898.5], [248.0, 31484.333333333332], [270.0, 32224.0], [271.0, 31972.0], [269.0, 32308.5], [267.0, 32120.0], [266.0, 32176.0], [262.0, 32200.0], [259.0, 32029.0], [257.0, 32312.0], [256.0, 32230.0], [284.0, 31859.0], [283.0, 32255.0], [282.0, 32264.0], [281.0, 32074.5], [279.0, 31974.0], [272.0, 32132.0], [278.0, 32262.0], [277.0, 31927.0], [276.0, 32042.0], [274.0, 32118.0], [273.0, 31871.0], [291.0, 31793.0], [301.0, 31745.0], [300.0, 31820.333333333332], [297.0, 32239.0], [296.0, 32167.0], [295.0, 31821.0], [294.0, 32216.0], [293.0, 31826.0], [292.0, 31814.0], [290.0, 31903.0], [289.0, 31746.0], [288.0, 32054.75], [307.0, 30016.0], [319.0, 31482.333333333332], [316.0, 30018.0], [315.0, 30865.0], [313.0, 31718.0], [312.0, 30021.0], [311.0, 32043.0], [310.0, 32070.5], [308.0, 31904.0], [306.0, 32237.0], [305.0, 31725.0], [304.0, 31986.333333333332], [333.0, 31879.0], [335.0, 32077.5], [332.0, 32047.0], [331.0, 30021.0], [330.0, 31883.5], [328.0, 31979.0], [327.0, 31989.0], [324.0, 32045.0], [323.0, 30952.5], [321.0, 32028.0], [320.0, 31879.0], [350.0, 32009.0], [351.0, 30019.0], [349.0, 31860.5], [337.0, 30019.0], [336.0, 30020.0], [347.0, 30022.0], [346.0, 31962.0], [345.0, 30017.0], [344.0, 31037.5], [342.0, 31879.5], [340.0, 31448.666666666668], [355.0, 32164.0], [367.0, 30022.0], [366.0, 31275.0], [363.0, 30019.0], [362.0, 31909.333333333332], [359.0, 32155.0], [358.0, 31008.0], [356.0, 32135.0], [354.0, 31823.0], [353.0, 31891.0], [352.0, 32086.0], [371.0, 31776.5], [383.0, 30621.333333333332], [380.0, 30034.0], [379.0, 30035.0], [378.0, 32049.0], [376.0, 30038.0], [375.0, 30029.5], [373.0, 31778.0], [372.0, 32061.0], [369.0, 31803.0], [368.0, 30020.0], [398.0, 31934.0], [399.0, 32064.0], [397.0, 32094.0], [396.0, 30972.5], [394.0, 31962.0], [393.0, 32106.0], [392.0, 30023.0], [388.0, 32117.0], [385.0, 30028.0], [384.0, 30031.0], [387.0, 31778.0], [386.0, 31795.0], [403.0, 31717.0], [413.0, 31680.666666666668], [414.0, 31862.0], [412.0, 31347.0], [409.0, 31857.5], [407.0, 31701.5], [405.0, 32070.0], [404.0, 31355.0], [402.0, 30812.5], [400.0, 30025.0], [419.0, 30018.0], [429.0, 31825.0], [428.0, 31635.0], [427.0, 30047.0], [426.0, 32044.0], [424.0, 31937.0], [422.0, 32034.0], [421.0, 32044.0], [420.0, 31339.0], [418.0, 32072.0], [417.0, 31573.0], [416.0, 30856.0], [446.0, 32013.0], [447.0, 32006.0], [445.0, 32009.0], [444.0, 31830.0], [443.0, 30016.0], [442.0, 30034.0], [441.0, 31266.5], [439.0, 31438.5], [432.0, 31598.333333333332], [435.0, 31541.0], [434.0, 31296.0], [438.0, 32023.0], [436.0, 32021.0], [460.0, 31986.0], [462.0, 31985.0], [463.0, 31561.0], [461.0, 31799.0], [457.0, 31006.0], [456.0, 31810.0], [455.0, 31244.0], [453.0, 30020.5], [451.0, 31566.0], [448.0, 31961.0], [478.0, 31824.0], [479.0, 31669.0], [477.0, 31967.0], [476.0, 31945.0], [475.0, 31967.5], [473.0, 31901.0], [472.0, 31912.0], [470.0, 31814.0], [467.0, 31928.0], [466.0, 31317.666666666668], [468.0, 31969.0], [493.0, 31796.5], [491.0, 31941.0], [490.0, 30025.0], [489.0, 31308.0], [486.0, 30845.0], [484.0, 31622.333333333332], [481.0, 30967.5], [499.0, 31905.5], [510.0, 30830.5], [508.0, 31615.666666666668], [505.0, 31551.0], [503.0, 31957.0], [502.0, 31877.5], [500.0, 31565.0], [497.0, 30021.0], [496.0, 31896.666666666668], [541.0, 31680.0], [532.0, 31903.0], [543.0, 31378.5], [528.0, 30020.0], [531.0, 31617.0], [530.0, 31516.333333333332], [539.0, 30896.0], [537.0, 31737.0], [536.0, 31708.0], [518.0, 31534.0], [516.0, 31828.0], [514.0, 30019.0], [513.0, 31292.0], [526.0, 30019.0], [525.0, 31909.0], [524.0, 31502.0], [522.0, 31916.0], [521.0, 31495.0], [520.0, 31384.0], [535.0, 31653.0], [534.0, 31405.0], [533.0, 31060.0], [571.0, 30979.0], [563.0, 31659.0], [574.0, 31403.0], [575.0, 31558.0], [561.0, 31749.0], [572.0, 31488.666666666668], [568.0, 31435.0], [549.0, 31295.5], [547.0, 31885.0], [546.0, 31644.0], [545.0, 31788.0], [544.0, 31025.0], [559.0, 31715.5], [557.0, 31482.0], [556.0, 30020.0], [555.0, 31705.0], [553.0, 31159.25], [567.0, 30983.0], [566.0, 31758.5], [564.0, 31286.0], [604.0, 30913.333333333332], [596.0, 30931.0], [606.0, 31586.0], [593.0, 30935.0], [592.0, 31818.0], [601.0, 31503.0], [600.0, 31802.0], [591.0, 30480.0], [579.0, 30331.0], [576.0, 31832.0], [583.0, 31385.5], [581.0, 31724.0], [589.0, 31698.0], [588.0, 31823.0], [587.0, 30020.0], [586.0, 31331.0], [585.0, 30488.0], [599.0, 31614.0], [598.0, 31806.0], [597.0, 30024.0], [595.0, 30934.0], [594.0, 31821.0], [636.0, 31604.0], [639.0, 31742.0], [624.0, 30519.666666666668], [626.0, 30022.0], [625.0, 31700.0], [629.0, 30021.0], [627.0, 30023.0], [638.0, 31312.0], [637.0, 30021.0], [635.0, 31531.0], [634.0, 31498.0], [633.0, 30871.0], [632.0, 30018.0], [621.0, 30905.0], [608.0, 31652.0], [612.0, 30907.5], [610.0, 31192.666666666668], [615.0, 31728.0], [614.0, 30894.5], [619.0, 30022.0], [618.0, 30021.0], [617.0, 30889.0], [616.0, 31351.0], [631.0, 31370.0], [630.0, 31757.0], [664.0, 31318.0], [668.0, 31602.0], [671.0, 30022.0], [656.0, 30021.0], [660.0, 31007.333333333332], [657.0, 30025.0], [670.0, 31542.0], [669.0, 30087.0], [667.0, 30091.0], [666.0, 31512.0], [665.0, 31478.0], [655.0, 31683.0], [641.0, 31290.0], [640.0, 31560.0], [643.0, 31282.0], [642.0, 31583.0], [645.0, 31518.0], [644.0, 30130.0], [654.0, 30785.0], [653.0, 31701.0], [652.0, 31404.333333333332], [649.0, 31252.0], [648.0, 31111.666666666668], [663.0, 30675.0], [661.0, 31239.0], [697.0, 30019.0], [702.0, 30018.0], [703.0, 31601.0], [691.0, 31479.0], [690.0, 31608.833333333332], [701.0, 30018.0], [700.0, 30020.5], [698.0, 30024.0], [696.0, 30973.333333333332], [679.0, 31466.0], [678.0, 31383.0], [677.0, 30832.5], [673.0, 30755.0], [672.0, 30085.0], [684.0, 31669.0], [683.0, 31623.0], [682.0, 31675.0], [681.0, 31485.0], [680.0, 31684.0], [693.0, 31166.0], [692.0, 31656.0], [732.0, 31532.0], [735.0, 31523.0], [720.0, 31350.0], [723.0, 30019.0], [722.0, 30023.0], [725.0, 31554.0], [724.0, 31087.0], [734.0, 30026.0], [733.0, 31105.0], [731.0, 30653.0], [730.0, 31079.0], [729.0, 30596.0], [728.0, 31095.0], [719.0, 31202.0], [704.0, 31220.0], [706.0, 31547.0], [705.0, 31132.0], [709.0, 30023.0], [708.0, 30436.5], [711.0, 30027.0], [710.0, 30026.0], [718.0, 31563.0], [717.0, 31571.0], [716.0, 30687.5], [714.0, 30025.0], [713.0, 30025.0], [727.0, 31096.0], [726.0, 30150.0], [765.0, 31026.0], [767.0, 31329.0], [752.0, 30019.0], [764.0, 30020.0], [763.0, 30022.0], [762.0, 30022.0], [761.0, 30495.5], [751.0, 31266.0], [740.0, 31309.75], [736.0, 30091.0], [743.0, 31502.0], [742.0, 31381.0], [750.0, 31343.0], [749.0, 31509.0], [748.0, 31117.0], [747.0, 30019.0], [746.0, 30111.0], [745.0, 30067.5], [759.0, 30031.0], [758.0, 30039.0], [757.0, 30019.0], [755.0, 30512.0], [792.0, 30795.5], [796.0, 30910.0], [799.0, 31102.0], [786.0, 30697.5], [785.0, 30022.0], [788.0, 30919.0], [787.0, 30027.0], [798.0, 31236.0], [797.0, 30019.0], [795.0, 31224.0], [794.0, 31164.0], [793.0, 30416.0], [783.0, 31099.0], [768.0, 31310.0], [771.0, 30986.0], [769.0, 30518.0], [774.0, 31239.0], [773.0, 30695.0], [782.0, 31400.0], [781.0, 30967.0], [780.0, 31422.0], [779.0, 30999.0], [778.0, 31267.0], [777.0, 30991.0], [776.0, 30737.0], [790.0, 31356.0], [789.0, 30024.0], [824.0, 31299.0], [830.0, 31145.0], [831.0, 30041.0], [818.0, 30020.0], [817.0, 31083.5], [829.0, 30534.5], [827.0, 30024.0], [826.0, 31075.0], [815.0, 31318.0], [800.0, 31322.0], [802.0, 30889.0], [801.0, 30027.0], [804.0, 31339.0], [803.0, 30027.0], [807.0, 31116.0], [805.0, 30022.0], [814.0, 31324.0], [813.0, 30653.0], [811.0, 31326.0], [810.0, 31333.0], [809.0, 31124.0], [808.0, 30968.0], [823.0, 31319.0], [822.0, 30021.0], [821.0, 31279.0], [820.0, 30946.0], [856.0, 31028.0], [862.0, 31054.0], [863.0, 30034.0], [849.0, 30137.0], [848.0, 30741.0], [861.0, 31227.0], [859.0, 31068.0], [858.0, 30020.0], [847.0, 30021.0], [833.0, 31280.0], [832.0, 30023.0], [835.0, 30176.0], [834.0, 30783.0], [838.0, 31253.0], [837.0, 30039.0], [846.0, 30743.0], [845.0, 30023.0], [844.0, 30023.0], [843.0, 30024.0], [842.0, 30899.0], [855.0, 30551.5], [853.0, 31081.0], [852.0, 31150.0], [850.0, 31017.0], [891.0, 31062.5], [884.0, 31016.333333333332], [894.0, 31090.0], [895.0, 30856.0], [881.0, 30787.0], [893.0, 30928.0], [889.0, 31114.5], [871.0, 30598.0], [869.0, 31159.0], [868.0, 31153.0], [867.0, 30824.0], [866.0, 30699.0], [865.0, 31076.0], [864.0, 30028.0], [879.0, 31080.0], [878.0, 31100.0], [877.0, 31169.0], [876.0, 30021.0], [875.0, 30021.0], [874.0, 30026.0], [873.0, 30021.0], [872.0, 31187.0], [887.0, 30021.0], [886.0, 30023.0], [885.0, 30629.0], [921.0, 30028.0], [925.0, 30023.0], [927.0, 30871.5], [912.0, 30599.333333333332], [915.0, 30788.0], [914.0, 30847.0], [917.0, 31033.0], [916.0, 30910.0], [924.0, 30070.0], [923.0, 31007.0], [922.0, 30751.0], [920.0, 30030.0], [903.0, 30918.0], [902.0, 30953.0], [901.0, 30944.5], [899.0, 31003.5], [897.0, 31097.0], [896.0, 31083.0], [909.0, 31041.0], [908.0, 31045.0], [907.0, 30800.0], [906.0, 30942.0], [905.0, 31060.0], [904.0, 30852.0], [919.0, 30030.0], [918.0, 31029.0], [952.0, 28685.0], [956.0, 26717.0], [959.0, 25923.0], [947.0, 30221.333333333332], [944.0, 30759.0], [949.0, 30392.0], [948.0, 30207.0], [958.0, 27160.0], [957.0, 27378.0], [955.0, 27002.0], [954.0, 27840.0], [953.0, 28408.0], [943.0, 30750.0], [929.0, 30953.0], [928.0, 30737.0], [931.0, 30948.0], [930.0, 30816.0], [933.0, 30914.0], [932.0, 30658.0], [935.0, 30035.0], [934.0, 30903.0], [942.0, 30607.0], [941.0, 30039.0], [940.0, 30038.0], [939.0, 30037.0], [938.0, 30024.0], [937.0, 30028.0], [936.0, 30026.0], [951.0, 30247.0], [950.0, 30374.0], [988.0, 18515.0], [991.0, 16806.0], [977.0, 21237.5], [979.0, 20690.0], [978.0, 20396.0], [981.0, 20030.0], [980.0, 20762.0], [990.0, 18775.0], [989.0, 17975.0], [987.0, 19594.0], [986.0, 19017.0], [985.0, 19787.0], [984.0, 19160.0], [975.0, 20615.0], [960.0, 26072.0], [963.0, 25371.5], [961.0, 26136.0], [965.0, 25108.0], [964.0, 25528.0], [967.0, 22840.0], [966.0, 24974.0], [974.0, 21724.0], [972.0, 22194.0], [971.0, 21899.0], [970.0, 23039.0], [969.0, 22998.0], [968.0, 23393.0], [983.0, 20482.0], [982.0, 20494.0], [1000.0, 14621.0], [999.0, 14567.0], [998.0, 15473.0], [997.0, 15074.0], [996.0, 16012.0], [995.0, 15460.0], [994.0, 16213.0], [993.0, 15853.0], [992.0, 17544.0], [1.0, 32185.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}, {"data": [[501.00899999999973, 30870.073]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1044.9, "minX": 1.7557626E12, "maxY": 34079.933333333334, "series": [{"data": [[1.7557626E12, 34079.933333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7557626E12, 1044.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557626E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 30870.073, "minX": 1.7557626E12, "maxY": 30870.073, "series": [{"data": [[1.7557626E12, 30870.073]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557626E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1206.5500000000009, "minX": 1.7557626E12, "maxY": 1206.5500000000009, "series": [{"data": [[1.7557626E12, 1206.5500000000009]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557626E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1310.371999999999, "minX": 1.7557626E12, "maxY": 1310.371999999999, "series": [{"data": [[1.7557626E12, 1310.371999999999]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557626E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 14567.0, "minX": 1.7557626E12, "maxY": 30910.0, "series": [{"data": [[1.7557626E12, 30910.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7557626E12, 29466.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7557626E12, 30910.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7557626E12, 30483.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7557626E12, 14567.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7557626E12, 21629.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557626E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19346.5, "minX": 1.0, "maxY": 32237.0, "series": [{"data": [[1.0, 19346.5], [2.0, 25041.0], [5.0, 23603.0], [6.0, 19690.5], [3.0, 24658.0], [204.0, 30575.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[646.0, 31715.5], [204.0, 30918.5], [100.0, 32237.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 646.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 30575.5, "series": [{"data": [[1.0, 19346.5], [2.0, 25041.0], [5.0, 23603.0], [6.0, 19690.5], [3.0, 24658.0], [204.0, 30575.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[646.0, 0.0], [204.0, 0.0], [100.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 646.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557626E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557626E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557626E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.7557626E12, "maxY": 15.766666666666667, "series": [{"data": [[1.7557626E12, 0.9]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.7557626E12, 15.766666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557626E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.7557626E12, "maxY": 15.766666666666667, "series": [{"data": [[1.7557626E12, 0.9]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-success", "isController": false}, {"data": [[1.7557626E12, 15.766666666666667]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557626E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.7557626E12, "maxY": 15.766666666666667, "series": [{"data": [[1.7557626E12, 0.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7557626E12, 15.766666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557626E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

