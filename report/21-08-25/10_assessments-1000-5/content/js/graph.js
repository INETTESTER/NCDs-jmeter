/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 246.0, "minX": 0.0, "maxY": 4667.0, "series": [{"data": [[0.0, 246.0], [0.1, 287.0], [0.2, 287.0], [0.3, 287.0], [0.4, 299.0], [0.5, 302.0], [0.6, 314.0], [0.7, 319.0], [0.8, 323.0], [0.9, 331.0], [1.0, 342.0], [1.1, 348.0], [1.2, 363.0], [1.3, 383.0], [1.4, 383.0], [1.5, 388.0], [1.6, 394.0], [1.7, 395.0], [1.8, 398.0], [1.9, 410.0], [2.0, 416.0], [2.1, 419.0], [2.2, 419.0], [2.3, 428.0], [2.4, 436.0], [2.5, 442.0], [2.6, 444.0], [2.7, 445.0], [2.8, 451.0], [2.9, 456.0], [3.0, 457.0], [3.1, 461.0], [3.2, 464.0], [3.3, 464.0], [3.4, 474.0], [3.5, 475.0], [3.6, 475.0], [3.7, 479.0], [3.8, 485.0], [3.9, 486.0], [4.0, 492.0], [4.1, 499.0], [4.2, 500.0], [4.3, 504.0], [4.4, 512.0], [4.5, 517.0], [4.6, 521.0], [4.7, 523.0], [4.8, 524.0], [4.9, 529.0], [5.0, 532.0], [5.1, 533.0], [5.2, 533.0], [5.3, 533.0], [5.4, 538.0], [5.5, 538.0], [5.6, 540.0], [5.7, 541.0], [5.8, 545.0], [5.9, 547.0], [6.0, 549.0], [6.1, 550.0], [6.2, 551.0], [6.3, 563.0], [6.4, 569.0], [6.5, 569.0], [6.6, 575.0], [6.7, 575.0], [6.8, 578.0], [6.9, 583.0], [7.0, 584.0], [7.1, 585.0], [7.2, 585.0], [7.3, 586.0], [7.4, 586.0], [7.5, 588.0], [7.6, 588.0], [7.7, 597.0], [7.8, 599.0], [7.9, 600.0], [8.0, 611.0], [8.1, 611.0], [8.2, 619.0], [8.3, 622.0], [8.4, 625.0], [8.5, 626.0], [8.6, 626.0], [8.7, 634.0], [8.8, 643.0], [8.9, 645.0], [9.0, 645.0], [9.1, 649.0], [9.2, 649.0], [9.3, 654.0], [9.4, 659.0], [9.5, 660.0], [9.6, 662.0], [9.7, 670.0], [9.8, 673.0], [9.9, 674.0], [10.0, 680.0], [10.1, 681.0], [10.2, 681.0], [10.3, 683.0], [10.4, 685.0], [10.5, 697.0], [10.6, 704.0], [10.7, 706.0], [10.8, 708.0], [10.9, 709.0], [11.0, 710.0], [11.1, 710.0], [11.2, 715.0], [11.3, 720.0], [11.4, 721.0], [11.5, 724.0], [11.6, 725.0], [11.7, 731.0], [11.8, 732.0], [11.9, 742.0], [12.0, 743.0], [12.1, 746.0], [12.2, 749.0], [12.3, 751.0], [12.4, 752.0], [12.5, 753.0], [12.6, 753.0], [12.7, 754.0], [12.8, 754.0], [12.9, 756.0], [13.0, 758.0], [13.1, 760.0], [13.2, 761.0], [13.3, 763.0], [13.4, 766.0], [13.5, 767.0], [13.6, 769.0], [13.7, 769.0], [13.8, 770.0], [13.9, 770.0], [14.0, 771.0], [14.1, 772.0], [14.2, 778.0], [14.3, 778.0], [14.4, 784.0], [14.5, 785.0], [14.6, 786.0], [14.7, 789.0], [14.8, 792.0], [14.9, 795.0], [15.0, 800.0], [15.1, 800.0], [15.2, 805.0], [15.3, 806.0], [15.4, 807.0], [15.5, 807.0], [15.6, 808.0], [15.7, 810.0], [15.8, 810.0], [15.9, 811.0], [16.0, 811.0], [16.1, 813.0], [16.2, 814.0], [16.3, 816.0], [16.4, 816.0], [16.5, 817.0], [16.6, 818.0], [16.7, 821.0], [16.8, 833.0], [16.9, 839.0], [17.0, 841.0], [17.1, 848.0], [17.2, 849.0], [17.3, 852.0], [17.4, 852.0], [17.5, 855.0], [17.6, 873.0], [17.7, 877.0], [17.8, 905.0], [17.9, 936.0], [18.0, 944.0], [18.1, 990.0], [18.2, 1007.0], [18.3, 1104.0], [18.4, 1246.0], [18.5, 1305.0], [18.6, 1328.0], [18.7, 1331.0], [18.8, 1339.0], [18.9, 1382.0], [19.0, 1382.0], [19.1, 1385.0], [19.2, 1394.0], [19.3, 1441.0], [19.4, 1441.0], [19.5, 1450.0], [19.6, 1494.0], [19.7, 1530.0], [19.8, 1540.0], [19.9, 1644.0], [20.0, 1657.0], [20.1, 1681.0], [20.2, 1728.0], [20.3, 1728.0], [20.4, 1732.0], [20.5, 1744.0], [20.6, 1758.0], [20.7, 1767.0], [20.8, 1767.0], [20.9, 1769.0], [21.0, 1770.0], [21.1, 1770.0], [21.2, 1776.0], [21.3, 1780.0], [21.4, 1785.0], [21.5, 1790.0], [21.6, 1808.0], [21.7, 1812.0], [21.8, 1815.0], [21.9, 1817.0], [22.0, 1835.0], [22.1, 1854.0], [22.2, 1854.0], [22.3, 1857.0], [22.4, 1860.0], [22.5, 1872.0], [22.6, 1878.0], [22.7, 1886.0], [22.8, 1913.0], [22.9, 1915.0], [23.0, 1920.0], [23.1, 1923.0], [23.2, 1941.0], [23.3, 1964.0], [23.4, 1978.0], [23.5, 1990.0], [23.6, 1992.0], [23.7, 2026.0], [23.8, 2066.0], [23.9, 2076.0], [24.0, 2076.0], [24.1, 2080.0], [24.2, 2095.0], [24.3, 2097.0], [24.4, 2114.0], [24.5, 2123.0], [24.6, 2126.0], [24.7, 2137.0], [24.8, 2140.0], [24.9, 2146.0], [25.0, 2157.0], [25.1, 2158.0], [25.2, 2192.0], [25.3, 2197.0], [25.4, 2201.0], [25.5, 2206.0], [25.6, 2221.0], [25.7, 2221.0], [25.8, 2246.0], [25.9, 2267.0], [26.0, 2272.0], [26.1, 2285.0], [26.2, 2289.0], [26.3, 2306.0], [26.4, 2311.0], [26.5, 2314.0], [26.6, 2329.0], [26.7, 2330.0], [26.8, 2366.0], [26.9, 2370.0], [27.0, 2376.0], [27.1, 2384.0], [27.2, 2390.0], [27.3, 2393.0], [27.4, 2406.0], [27.5, 2418.0], [27.6, 2419.0], [27.7, 2420.0], [27.8, 2420.0], [27.9, 2422.0], [28.0, 2436.0], [28.1, 2441.0], [28.2, 2448.0], [28.3, 2468.0], [28.4, 2472.0], [28.5, 2482.0], [28.6, 2483.0], [28.7, 2485.0], [28.8, 2485.0], [28.9, 2486.0], [29.0, 2488.0], [29.1, 2493.0], [29.2, 2494.0], [29.3, 2497.0], [29.4, 2499.0], [29.5, 2504.0], [29.6, 2506.0], [29.7, 2508.0], [29.8, 2510.0], [29.9, 2510.0], [30.0, 2513.0], [30.1, 2513.0], [30.2, 2514.0], [30.3, 2517.0], [30.4, 2522.0], [30.5, 2523.0], [30.6, 2524.0], [30.7, 2525.0], [30.8, 2526.0], [30.9, 2527.0], [31.0, 2531.0], [31.1, 2534.0], [31.2, 2535.0], [31.3, 2541.0], [31.4, 2541.0], [31.5, 2543.0], [31.6, 2548.0], [31.7, 2558.0], [31.8, 2559.0], [31.9, 2559.0], [32.0, 2568.0], [32.1, 2583.0], [32.2, 2596.0], [32.3, 2597.0], [32.4, 2597.0], [32.5, 2603.0], [32.6, 2604.0], [32.7, 2605.0], [32.8, 2608.0], [32.9, 2608.0], [33.0, 2613.0], [33.1, 2617.0], [33.2, 2619.0], [33.3, 2620.0], [33.4, 2621.0], [33.5, 2628.0], [33.6, 2632.0], [33.7, 2636.0], [33.8, 2638.0], [33.9, 2638.0], [34.0, 2639.0], [34.1, 2639.0], [34.2, 2639.0], [34.3, 2640.0], [34.4, 2643.0], [34.5, 2644.0], [34.6, 2645.0], [34.7, 2646.0], [34.8, 2647.0], [34.9, 2649.0], [35.0, 2650.0], [35.1, 2651.0], [35.2, 2651.0], [35.3, 2652.0], [35.4, 2653.0], [35.5, 2655.0], [35.6, 2655.0], [35.7, 2655.0], [35.8, 2661.0], [35.9, 2665.0], [36.0, 2669.0], [36.1, 2672.0], [36.2, 2672.0], [36.3, 2674.0], [36.4, 2674.0], [36.5, 2676.0], [36.6, 2676.0], [36.7, 2679.0], [36.8, 2681.0], [36.9, 2681.0], [37.0, 2682.0], [37.1, 2683.0], [37.2, 2684.0], [37.3, 2685.0], [37.4, 2686.0], [37.5, 2686.0], [37.6, 2686.0], [37.7, 2692.0], [37.8, 2692.0], [37.9, 2693.0], [38.0, 2694.0], [38.1, 2694.0], [38.2, 2697.0], [38.3, 2699.0], [38.4, 2703.0], [38.5, 2704.0], [38.6, 2706.0], [38.7, 2708.0], [38.8, 2709.0], [38.9, 2712.0], [39.0, 2712.0], [39.1, 2712.0], [39.2, 2717.0], [39.3, 2718.0], [39.4, 2718.0], [39.5, 2718.0], [39.6, 2719.0], [39.7, 2719.0], [39.8, 2719.0], [39.9, 2720.0], [40.0, 2724.0], [40.1, 2724.0], [40.2, 2726.0], [40.3, 2728.0], [40.4, 2730.0], [40.5, 2734.0], [40.6, 2735.0], [40.7, 2736.0], [40.8, 2737.0], [40.9, 2737.0], [41.0, 2744.0], [41.1, 2745.0], [41.2, 2745.0], [41.3, 2746.0], [41.4, 2746.0], [41.5, 2747.0], [41.6, 2747.0], [41.7, 2748.0], [41.8, 2753.0], [41.9, 2753.0], [42.0, 2754.0], [42.1, 2754.0], [42.2, 2755.0], [42.3, 2756.0], [42.4, 2756.0], [42.5, 2757.0], [42.6, 2757.0], [42.7, 2757.0], [42.8, 2759.0], [42.9, 2759.0], [43.0, 2762.0], [43.1, 2762.0], [43.2, 2764.0], [43.3, 2764.0], [43.4, 2766.0], [43.5, 2772.0], [43.6, 2774.0], [43.7, 2775.0], [43.8, 2775.0], [43.9, 2777.0], [44.0, 2781.0], [44.1, 2781.0], [44.2, 2782.0], [44.3, 2782.0], [44.4, 2784.0], [44.5, 2784.0], [44.6, 2788.0], [44.7, 2789.0], [44.8, 2791.0], [44.9, 2791.0], [45.0, 2791.0], [45.1, 2791.0], [45.2, 2798.0], [45.3, 2799.0], [45.4, 2799.0], [45.5, 2800.0], [45.6, 2801.0], [45.7, 2801.0], [45.8, 2802.0], [45.9, 2802.0], [46.0, 2804.0], [46.1, 2805.0], [46.2, 2805.0], [46.3, 2808.0], [46.4, 2811.0], [46.5, 2815.0], [46.6, 2815.0], [46.7, 2820.0], [46.8, 2823.0], [46.9, 2823.0], [47.0, 2824.0], [47.1, 2824.0], [47.2, 2827.0], [47.3, 2827.0], [47.4, 2829.0], [47.5, 2830.0], [47.6, 2832.0], [47.7, 2833.0], [47.8, 2834.0], [47.9, 2835.0], [48.0, 2836.0], [48.1, 2837.0], [48.2, 2837.0], [48.3, 2837.0], [48.4, 2839.0], [48.5, 2840.0], [48.6, 2840.0], [48.7, 2843.0], [48.8, 2843.0], [48.9, 2843.0], [49.0, 2843.0], [49.1, 2846.0], [49.2, 2848.0], [49.3, 2849.0], [49.4, 2852.0], [49.5, 2854.0], [49.6, 2855.0], [49.7, 2855.0], [49.8, 2858.0], [49.9, 2862.0], [50.0, 2863.0], [50.1, 2869.0], [50.2, 2876.0], [50.3, 2879.0], [50.4, 2881.0], [50.5, 2886.0], [50.6, 2889.0], [50.7, 2904.0], [50.8, 2926.0], [50.9, 2943.0], [51.0, 2950.0], [51.1, 2955.0], [51.2, 2967.0], [51.3, 2976.0], [51.4, 2981.0], [51.5, 2985.0], [51.6, 2990.0], [51.7, 2993.0], [51.8, 2994.0], [51.9, 2999.0], [52.0, 3000.0], [52.1, 3002.0], [52.2, 3002.0], [52.3, 3012.0], [52.4, 3017.0], [52.5, 3022.0], [52.6, 3025.0], [52.7, 3026.0], [52.8, 3031.0], [52.9, 3034.0], [53.0, 3043.0], [53.1, 3047.0], [53.2, 3047.0], [53.3, 3051.0], [53.4, 3052.0], [53.5, 3062.0], [53.6, 3070.0], [53.7, 3081.0], [53.8, 3104.0], [53.9, 3105.0], [54.0, 3117.0], [54.1, 3119.0], [54.2, 3122.0], [54.3, 3128.0], [54.4, 3128.0], [54.5, 3132.0], [54.6, 3132.0], [54.7, 3134.0], [54.8, 3134.0], [54.9, 3139.0], [55.0, 3139.0], [55.1, 3142.0], [55.2, 3143.0], [55.3, 3150.0], [55.4, 3157.0], [55.5, 3160.0], [55.6, 3161.0], [55.7, 3163.0], [55.8, 3166.0], [55.9, 3170.0], [56.0, 3171.0], [56.1, 3177.0], [56.2, 3185.0], [56.3, 3201.0], [56.4, 3218.0], [56.5, 3230.0], [56.6, 3255.0], [56.7, 3261.0], [56.8, 3263.0], [56.9, 3264.0], [57.0, 3275.0], [57.1, 3282.0], [57.2, 3298.0], [57.3, 3303.0], [57.4, 3314.0], [57.5, 3315.0], [57.6, 3317.0], [57.7, 3319.0], [57.8, 3347.0], [57.9, 3360.0], [58.0, 3387.0], [58.1, 3407.0], [58.2, 3431.0], [58.3, 3463.0], [58.4, 3464.0], [58.5, 3479.0], [58.6, 3483.0], [58.7, 3483.0], [58.8, 3484.0], [58.9, 3486.0], [59.0, 3488.0], [59.1, 3492.0], [59.2, 3505.0], [59.3, 3523.0], [59.4, 3563.0], [59.5, 3570.0], [59.6, 3583.0], [59.7, 3597.0], [59.8, 3627.0], [59.9, 3630.0], [60.0, 3647.0], [60.1, 3651.0], [60.2, 3651.0], [60.3, 3655.0], [60.4, 3661.0], [60.5, 3665.0], [60.6, 3671.0], [60.7, 3672.0], [60.8, 3675.0], [60.9, 3681.0], [61.0, 3687.0], [61.1, 3688.0], [61.2, 3690.0], [61.3, 3691.0], [61.4, 3701.0], [61.5, 3702.0], [61.6, 3702.0], [61.7, 3703.0], [61.8, 3703.0], [61.9, 3712.0], [62.0, 3726.0], [62.1, 3731.0], [62.2, 3733.0], [62.3, 3735.0], [62.4, 3738.0], [62.5, 3739.0], [62.6, 3762.0], [62.7, 3766.0], [62.8, 3770.0], [62.9, 3772.0], [63.0, 3777.0], [63.1, 3778.0], [63.2, 3802.0], [63.3, 3803.0], [63.4, 3804.0], [63.5, 3811.0], [63.6, 3813.0], [63.7, 3822.0], [63.8, 3824.0], [63.9, 3827.0], [64.0, 3830.0], [64.1, 3830.0], [64.2, 3834.0], [64.3, 3834.0], [64.4, 3835.0], [64.5, 3841.0], [64.6, 3842.0], [64.7, 3846.0], [64.8, 3847.0], [64.9, 3848.0], [65.0, 3850.0], [65.1, 3852.0], [65.2, 3852.0], [65.3, 3859.0], [65.4, 3860.0], [65.5, 3860.0], [65.6, 3862.0], [65.7, 3863.0], [65.8, 3864.0], [65.9, 3865.0], [66.0, 3870.0], [66.1, 3870.0], [66.2, 3875.0], [66.3, 3878.0], [66.4, 3878.0], [66.5, 3879.0], [66.6, 3879.0], [66.7, 3879.0], [66.8, 3883.0], [66.9, 3884.0], [67.0, 3884.0], [67.1, 3894.0], [67.2, 3895.0], [67.3, 3898.0], [67.4, 3898.0], [67.5, 3900.0], [67.6, 3902.0], [67.7, 3903.0], [67.8, 3905.0], [67.9, 3910.0], [68.0, 3910.0], [68.1, 3911.0], [68.2, 3916.0], [68.3, 3916.0], [68.4, 3917.0], [68.5, 3919.0], [68.6, 3920.0], [68.7, 3920.0], [68.8, 3921.0], [68.9, 3921.0], [69.0, 3922.0], [69.1, 3926.0], [69.2, 3927.0], [69.3, 3928.0], [69.4, 3931.0], [69.5, 3932.0], [69.6, 3933.0], [69.7, 3933.0], [69.8, 3937.0], [69.9, 3938.0], [70.0, 3938.0], [70.1, 3939.0], [70.2, 3940.0], [70.3, 3941.0], [70.4, 3942.0], [70.5, 3945.0], [70.6, 3945.0], [70.7, 3946.0], [70.8, 3947.0], [70.9, 3947.0], [71.0, 3949.0], [71.1, 3950.0], [71.2, 3951.0], [71.3, 3952.0], [71.4, 3952.0], [71.5, 3961.0], [71.6, 3961.0], [71.7, 3965.0], [71.8, 3966.0], [71.9, 3967.0], [72.0, 3970.0], [72.1, 3972.0], [72.2, 3972.0], [72.3, 3977.0], [72.4, 3977.0], [72.5, 3978.0], [72.6, 3979.0], [72.7, 3979.0], [72.8, 3979.0], [72.9, 3981.0], [73.0, 3982.0], [73.1, 3983.0], [73.2, 3984.0], [73.3, 3984.0], [73.4, 3985.0], [73.5, 3988.0], [73.6, 3991.0], [73.7, 3992.0], [73.8, 3993.0], [73.9, 3994.0], [74.0, 3994.0], [74.1, 3995.0], [74.2, 3996.0], [74.3, 3999.0], [74.4, 4000.0], [74.5, 4000.0], [74.6, 4003.0], [74.7, 4004.0], [74.8, 4008.0], [74.9, 4009.0], [75.0, 4011.0], [75.1, 4011.0], [75.2, 4014.0], [75.3, 4015.0], [75.4, 4016.0], [75.5, 4017.0], [75.6, 4019.0], [75.7, 4021.0], [75.8, 4022.0], [75.9, 4023.0], [76.0, 4023.0], [76.1, 4026.0], [76.2, 4028.0], [76.3, 4028.0], [76.4, 4030.0], [76.5, 4030.0], [76.6, 4030.0], [76.7, 4033.0], [76.8, 4036.0], [76.9, 4038.0], [77.0, 4039.0], [77.1, 4039.0], [77.2, 4039.0], [77.3, 4039.0], [77.4, 4039.0], [77.5, 4040.0], [77.6, 4043.0], [77.7, 4047.0], [77.8, 4047.0], [77.9, 4048.0], [78.0, 4049.0], [78.1, 4050.0], [78.2, 4051.0], [78.3, 4051.0], [78.4, 4053.0], [78.5, 4053.0], [78.6, 4054.0], [78.7, 4056.0], [78.8, 4056.0], [78.9, 4064.0], [79.0, 4070.0], [79.1, 4071.0], [79.2, 4072.0], [79.3, 4072.0], [79.4, 4073.0], [79.5, 4074.0], [79.6, 4081.0], [79.7, 4082.0], [79.8, 4084.0], [79.9, 4086.0], [80.0, 4089.0], [80.1, 4089.0], [80.2, 4090.0], [80.3, 4092.0], [80.4, 4092.0], [80.5, 4094.0], [80.6, 4096.0], [80.7, 4099.0], [80.8, 4100.0], [80.9, 4100.0], [81.0, 4100.0], [81.1, 4103.0], [81.2, 4105.0], [81.3, 4105.0], [81.4, 4107.0], [81.5, 4108.0], [81.6, 4111.0], [81.7, 4112.0], [81.8, 4113.0], [81.9, 4114.0], [82.0, 4115.0], [82.1, 4116.0], [82.2, 4117.0], [82.3, 4118.0], [82.4, 4121.0], [82.5, 4121.0], [82.6, 4123.0], [82.7, 4126.0], [82.8, 4126.0], [82.9, 4127.0], [83.0, 4127.0], [83.1, 4127.0], [83.2, 4128.0], [83.3, 4131.0], [83.4, 4131.0], [83.5, 4133.0], [83.6, 4134.0], [83.7, 4137.0], [83.8, 4137.0], [83.9, 4139.0], [84.0, 4142.0], [84.1, 4145.0], [84.2, 4145.0], [84.3, 4146.0], [84.4, 4146.0], [84.5, 4149.0], [84.6, 4150.0], [84.7, 4152.0], [84.8, 4154.0], [84.9, 4155.0], [85.0, 4156.0], [85.1, 4158.0], [85.2, 4158.0], [85.3, 4158.0], [85.4, 4159.0], [85.5, 4162.0], [85.6, 4165.0], [85.7, 4165.0], [85.8, 4166.0], [85.9, 4167.0], [86.0, 4169.0], [86.1, 4170.0], [86.2, 4170.0], [86.3, 4172.0], [86.4, 4173.0], [86.5, 4175.0], [86.6, 4176.0], [86.7, 4177.0], [86.8, 4177.0], [86.9, 4178.0], [87.0, 4182.0], [87.1, 4184.0], [87.2, 4185.0], [87.3, 4185.0], [87.4, 4189.0], [87.5, 4190.0], [87.6, 4192.0], [87.7, 4194.0], [87.8, 4196.0], [87.9, 4198.0], [88.0, 4202.0], [88.1, 4203.0], [88.2, 4203.0], [88.3, 4204.0], [88.4, 4205.0], [88.5, 4208.0], [88.6, 4210.0], [88.7, 4210.0], [88.8, 4215.0], [88.9, 4216.0], [89.0, 4216.0], [89.1, 4218.0], [89.2, 4219.0], [89.3, 4219.0], [89.4, 4220.0], [89.5, 4223.0], [89.6, 4225.0], [89.7, 4225.0], [89.8, 4228.0], [89.9, 4229.0], [90.0, 4229.0], [90.1, 4232.0], [90.2, 4235.0], [90.3, 4239.0], [90.4, 4240.0], [90.5, 4240.0], [90.6, 4241.0], [90.7, 4245.0], [90.8, 4245.0], [90.9, 4247.0], [91.0, 4248.0], [91.1, 4254.0], [91.2, 4257.0], [91.3, 4259.0], [91.4, 4260.0], [91.5, 4260.0], [91.6, 4261.0], [91.7, 4261.0], [91.8, 4261.0], [91.9, 4264.0], [92.0, 4264.0], [92.1, 4266.0], [92.2, 4266.0], [92.3, 4269.0], [92.4, 4269.0], [92.5, 4274.0], [92.6, 4282.0], [92.7, 4286.0], [92.8, 4289.0], [92.9, 4292.0], [93.0, 4292.0], [93.1, 4292.0], [93.2, 4295.0], [93.3, 4298.0], [93.4, 4303.0], [93.5, 4305.0], [93.6, 4307.0], [93.7, 4308.0], [93.8, 4311.0], [93.9, 4313.0], [94.0, 4314.0], [94.1, 4315.0], [94.2, 4317.0], [94.3, 4318.0], [94.4, 4328.0], [94.5, 4332.0], [94.6, 4333.0], [94.7, 4334.0], [94.8, 4337.0], [94.9, 4339.0], [95.0, 4339.0], [95.1, 4339.0], [95.2, 4346.0], [95.3, 4348.0], [95.4, 4350.0], [95.5, 4355.0], [95.6, 4360.0], [95.7, 4371.0], [95.8, 4382.0], [95.9, 4384.0], [96.0, 4385.0], [96.1, 4386.0], [96.2, 4390.0], [96.3, 4400.0], [96.4, 4406.0], [96.5, 4411.0], [96.6, 4414.0], [96.7, 4415.0], [96.8, 4417.0], [96.9, 4421.0], [97.0, 4422.0], [97.1, 4430.0], [97.2, 4436.0], [97.3, 4445.0], [97.4, 4448.0], [97.5, 4452.0], [97.6, 4473.0], [97.7, 4476.0], [97.8, 4479.0], [97.9, 4479.0], [98.0, 4485.0], [98.1, 4489.0], [98.2, 4491.0], [98.3, 4495.0], [98.4, 4504.0], [98.5, 4515.0], [98.6, 4528.0], [98.7, 4542.0], [98.8, 4547.0], [98.9, 4553.0], [99.0, 4554.0], [99.1, 4562.0], [99.2, 4600.0], [99.3, 4614.0], [99.4, 4621.0], [99.5, 4626.0], [99.6, 4635.0], [99.7, 4636.0], [99.8, 4641.0], [99.9, 4667.0]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 200.0, "maxY": 73.0, "series": [{"data": [[600.0, 27.0], [700.0, 44.0], [800.0, 28.0], [900.0, 4.0], [1000.0, 1.0], [1100.0, 1.0], [1200.0, 1.0], [1300.0, 8.0], [1400.0, 3.0], [1500.0, 2.0], [1600.0, 3.0], [1700.0, 14.0], [1800.0, 12.0], [1900.0, 9.0], [2000.0, 7.0], [2100.0, 10.0], [2300.0, 11.0], [2200.0, 9.0], [2400.0, 21.0], [2500.0, 30.0], [2600.0, 59.0], [2700.0, 71.0], [2800.0, 52.0], [2900.0, 13.0], [3000.0, 18.0], [3100.0, 25.0], [200.0, 5.0], [3200.0, 10.0], [3300.0, 8.0], [3400.0, 11.0], [3500.0, 6.0], [3600.0, 16.0], [3700.0, 18.0], [3800.0, 43.0], [3900.0, 69.0], [4000.0, 64.0], [4100.0, 73.0], [4200.0, 54.0], [4300.0, 29.0], [4400.0, 21.0], [4500.0, 8.0], [4600.0, 8.0], [300.0, 13.0], [400.0, 23.0], [500.0, 38.0]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 42.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 804.0, "series": [{"data": [[0.0, 42.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 154.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 804.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.8249999999992, "minX": 1.7557641E12, "maxY": 501.8249999999992, "series": [{"data": [[1.7557641E12, 501.8249999999992]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557641E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 287.0, "minX": 1.0, "maxY": 4667.0, "series": [{"data": [[2.0, 4390.0], [3.0, 4092.0], [4.0, 3978.0], [5.0, 3264.0], [6.0, 4346.0], [7.0, 4030.0], [9.0, 3937.5], [10.0, 4298.0], [12.0, 3446.0], [14.0, 3751.5], [15.0, 4030.0], [16.0, 4182.0], [17.0, 4039.0], [18.0, 4547.0], [20.0, 4199.5], [21.0, 3583.0], [23.0, 4248.0], [24.0, 4274.0], [25.0, 4264.0], [27.0, 4342.0], [28.0, 4667.0], [29.0, 3894.0], [30.0, 4269.0], [33.0, 4540.0], [35.0, 4641.0], [34.0, 4207.5], [36.0, 4127.0], [38.0, 4073.5], [40.0, 4364.0], [43.0, 4225.0], [44.0, 3533.0], [47.0, 3503.5], [46.0, 4272.0], [51.0, 4446.5], [53.0, 4113.0], [52.0, 4105.0], [55.0, 3724.5], [56.0, 4554.0], [60.0, 4035.5], [67.0, 4018.0], [66.0, 4414.0], [65.0, 4188.0], [64.0, 4034.5], [75.0, 4094.0], [74.0, 4003.2], [73.0, 4384.0], [79.0, 4016.5], [76.0, 3802.0], [83.0, 4360.0], [80.0, 4116.0], [86.0, 4261.0], [85.0, 4081.0], [90.0, 4117.0], [89.0, 3973.1666666666665], [94.0, 4145.666666666667], [98.0, 3488.0], [97.0, 3717.0], [96.0, 3942.0], [103.0, 3700.0], [102.0, 4415.5], [100.0, 4113.666666666667], [107.0, 3916.0], [106.0, 4600.0], [105.0, 3523.5], [109.0, 3315.5], [115.0, 4158.0], [112.0, 4032.0], [135.0, 4039.0], [133.0, 3128.0], [131.0, 4185.0], [130.0, 4056.0], [129.0, 4165.0], [128.0, 3793.846153846154], [141.0, 4155.5], [138.0, 4030.0], [137.0, 3863.5], [151.0, 3431.0], [150.0, 3591.625], [146.0, 4094.0], [145.0, 4245.0], [159.0, 4028.0], [158.0, 4562.0], [157.0, 3047.0], [156.0, 4223.0], [155.0, 3860.0], [154.0, 4104.5], [152.0, 4337.0], [167.0, 4528.0], [166.0, 4072.0], [164.0, 3420.0], [162.0, 4026.0], [161.0, 3852.0], [160.0, 4203.0], [175.0, 3407.0], [174.0, 4210.0], [173.0, 3828.5], [172.0, 4138.0], [171.0, 3395.0], [170.0, 4048.0], [179.0, 4318.0], [178.0, 4022.0], [191.0, 4111.0], [189.0, 4126.0], [187.0, 4112.0], [184.0, 3716.5], [196.0, 4000.0], [195.0, 4264.0], [194.0, 3506.0], [192.0, 4137.0], [204.0, 4202.5], [203.0, 4415.0], [202.0, 3785.3333333333335], [201.0, 4158.0], [200.0, 4173.0], [215.0, 3104.5], [214.0, 3835.0], [213.0, 4128.0], [212.0, 4448.0], [210.0, 4107.0], [208.0, 3043.0], [223.0, 4259.0], [222.0, 3190.5], [220.0, 3955.714285714286], [219.0, 3836.6666666666665], [218.0, 3702.5], [217.0, 4504.0], [231.0, 3972.0], [230.0, 4317.0], [229.0, 3897.3333333333335], [226.0, 3982.0], [225.0, 4247.0], [236.0, 3904.5], [247.0, 4184.0], [245.0, 4086.0], [243.0, 3906.1111111111113], [241.0, 3985.0], [255.0, 4430.0], [254.0, 4172.0], [253.0, 3497.5], [249.0, 3770.0], [248.0, 4307.0], [270.0, 3697.6666666666665], [271.0, 4049.0], [269.0, 4158.0], [257.0, 4219.0], [256.0, 4073.0], [266.0, 4022.0], [265.0, 4071.0], [264.0, 3831.0], [262.0, 3303.0], [261.0, 4100.0], [260.0, 3886.0], [286.0, 3896.6666666666665], [283.0, 4151.0], [282.0, 3926.3333333333335], [279.0, 3731.75], [278.0, 3778.5], [277.0, 2999.0], [274.0, 3298.0], [302.0, 3947.5], [303.0, 2649.0], [301.0, 4019.0], [299.0, 4055.0], [298.0, 3733.0], [296.0, 3851.3333333333335], [293.0, 3879.0], [292.0, 4333.0], [291.0, 4011.0], [290.0, 3789.75], [307.0, 3173.5], [318.0, 4159.0], [317.0, 4132.5], [313.0, 4053.0], [312.0, 3512.5], [311.0, 3895.0], [309.0, 4271.0], [305.0, 3905.0], [304.0, 3879.0], [334.0, 3943.3333333333335], [332.0, 4229.0], [330.0, 3979.0], [329.0, 4229.0], [328.0, 3652.5], [326.0, 3875.0], [325.0, 4009.0], [324.0, 2768.5], [322.0, 3549.0], [320.0, 3865.0], [349.0, 2904.0], [348.0, 3218.0], [339.0, 4154.0], [338.0, 3591.5], [347.0, 3939.0], [346.0, 3999.0], [345.0, 2955.0], [344.0, 4146.0], [343.0, 3966.0], [342.0, 4021.0], [341.0, 4137.0], [340.0, 4218.0], [364.0, 3933.0], [363.0, 3661.0], [362.0, 3992.0], [360.0, 3979.0], [359.0, 4332.0], [358.0, 3672.0], [356.0, 3854.0], [353.0, 4156.0], [352.0, 4188.0], [383.0, 4085.6666666666665], [381.0, 3903.0], [371.0, 4103.0], [370.0, 3792.0], [368.0, 3933.0], [379.0, 3916.0], [378.0, 4170.0], [377.0, 3804.0], [376.0, 3948.0], [375.0, 3898.0], [373.0, 4089.0], [372.0, 4269.0], [386.0, 4282.0], [399.0, 4107.666666666667], [396.0, 3405.2], [394.0, 3772.0], [390.0, 3766.0], [389.0, 4086.0], [388.0, 4108.0], [385.0, 4090.0], [384.0, 3932.0], [403.0, 3777.0], [413.0, 2076.0], [415.0, 3910.5], [412.0, 4061.5], [402.0, 4047.5], [400.0, 3878.0], [410.0, 4122.0], [408.0, 3850.0], [407.0, 3803.0], [406.0, 3992.0], [405.0, 4000.0], [404.0, 3864.0], [431.0, 3738.0], [430.0, 3970.0], [428.0, 4033.0], [427.0, 3902.0], [425.0, 4094.0], [423.0, 3994.6666666666665], [422.0, 3972.0], [419.0, 4036.5], [444.0, 3920.0], [447.0, 3945.0], [446.0, 2157.0], [445.0, 4177.0], [443.0, 3993.5], [439.0, 3984.0], [434.0, 4008.3333333333335], [438.0, 3995.0], [437.0, 4017.0], [436.0, 3843.5], [462.0, 3856.5], [463.0, 3852.0], [460.0, 3900.0], [451.0, 3938.0], [450.0, 3965.0], [449.0, 3970.0], [448.0, 3739.0], [459.0, 3911.5], [457.0, 3902.0], [456.0, 3884.0], [455.0, 3862.0], [454.0, 4046.5], [452.0, 3921.0], [466.0, 3712.0], [477.0, 3690.0], [479.0, 3402.5], [476.0, 3671.5], [465.0, 3665.0], [464.0, 3846.0], [474.0, 3671.0], [473.0, 3663.0], [471.0, 3681.0], [470.0, 3687.0], [469.0, 3702.0], [468.0, 3703.0], [494.0, 2728.0], [495.0, 2840.0], [493.0, 2724.0], [492.0, 2485.0], [491.0, 2510.0], [490.0, 3025.0], [489.0, 2377.0], [487.0, 3347.0], [481.0, 3261.0], [480.0, 3505.0], [483.0, 3486.0], [482.0, 3263.0], [486.0, 3563.0], [485.0, 3479.0], [484.0, 3483.0], [508.0, 3171.0], [511.0, 2314.0], [510.0, 3150.0], [509.0, 3177.3333333333335], [505.0, 3151.5], [503.0, 3062.0], [496.0, 2097.0], [499.0, 2461.0], [497.0, 2837.0], [502.0, 2390.0], [501.0, 3230.0], [500.0, 1815.0], [541.0, 2950.0], [542.0, 3022.0], [528.0, 1339.0], [531.0, 2138.5], [529.0, 1328.0], [540.0, 3047.0], [539.0, 709.0], [538.0, 710.0], [537.0, 720.0], [527.0, 1382.0], [513.0, 3126.5], [517.0, 3134.3333333333335], [514.0, 3161.0], [525.0, 1385.0], [524.0, 2893.0], [522.0, 3139.0], [521.0, 3122.0], [520.0, 2943.0], [535.0, 905.0], [534.0, 936.0], [533.0, 1007.0], [532.0, 1104.0], [562.0, 2834.0], [575.0, 2686.6666666666665], [573.0, 2655.75], [572.0, 2833.0], [569.0, 2849.0], [559.0, 2538.0], [544.0, 2955.0], [546.0, 3000.0], [545.0, 3012.0], [551.0, 2926.75], [549.0, 3002.0], [557.0, 2869.0], [556.0, 2852.0], [555.0, 2867.0], [553.0, 2858.5], [566.0, 2524.0], [567.0, 2846.0], [564.0, 2843.0], [561.0, 2863.0], [560.0, 2837.0], [605.0, 2658.6666666666665], [607.0, 1603.5], [602.0, 2704.3333333333335], [582.0, 2578.5], [581.0, 2843.0], [578.0, 2744.0], [599.0, 500.0], [598.0, 2749.0], [597.0, 2603.0], [594.0, 2644.0], [591.0, 2762.0], [589.0, 2801.0], [588.0, 2808.0], [586.0, 990.0], [585.0, 2825.8333333333335], [638.0, 1718.0], [639.0, 2636.0], [636.0, 1718.5], [634.0, 2761.6666666666665], [631.0, 2763.3333333333335], [629.0, 2643.0], [628.0, 2814.0], [625.0, 1362.3333333333333], [623.0, 2483.0], [609.0, 1653.5], [613.0, 2817.0], [611.0, 456.0], [615.0, 2726.0], [614.0, 2709.0], [622.0, 2747.0], [620.0, 1994.3333333333333], [618.0, 2788.0], [617.0, 551.0], [647.0, 524.0], [668.0, 1573.5], [670.0, 630.3333333333334], [667.0, 1651.5], [646.0, 1592.0], [645.0, 2679.0], [643.0, 475.0], [642.0, 1783.5], [640.0, 2468.0], [663.0, 2255.75], [659.0, 2727.75], [655.0, 2288.4], [652.0, 504.0], [651.0, 2791.0], [650.0, 2777.0], [697.0, 2745.0], [699.0, 2576.0], [696.0, 583.0], [679.0, 2784.0], [678.0, 2756.0], [677.0, 2755.5], [675.0, 491.0], [673.0, 475.0], [672.0, 1701.0], [695.0, 2708.0], [693.0, 2693.4], [692.0, 2759.0], [688.0, 2698.5], [685.0, 2753.0], [684.0, 2655.0], [683.0, 2608.0], [682.0, 1298.0], [722.0, 1692.0], [734.0, 2581.5], [735.0, 2568.0], [720.0, 1669.5], [733.0, 365.5], [732.0, 2652.0], [729.0, 1670.3333333333333], [711.0, 773.3333333333333], [708.0, 1244.6666666666667], [707.0, 2686.0], [704.0, 2680.5], [718.0, 1694.5], [716.0, 490.0], [714.0, 2750.0], [712.0, 2764.0], [726.0, 597.5], [724.0, 2420.0], [723.0, 2583.0], [765.0, 491.0], [767.0, 2708.0], [763.0, 1969.0], [761.0, 2384.0], [760.0, 440.0], [743.0, 2645.0], [741.0, 2719.0], [740.0, 416.0], [739.0, 2712.0], [738.0, 287.0], [736.0, 619.0], [749.0, 547.0], [748.0, 1518.5], [746.0, 531.0], [745.0, 2720.0], [757.0, 2075.0], [755.0, 1656.0], [756.0, 2706.0], [753.0, 541.0], [752.0, 464.0], [786.0, 873.0], [799.0, 331.0], [798.0, 1252.0], [795.0, 2573.0], [793.0, 1344.3333333333333], [782.0, 533.0], [772.0, 300.5], [770.0, 2691.6666666666665], [775.0, 1629.5], [773.0, 2717.0], [781.0, 486.5], [779.0, 1177.0], [790.0, 1933.3333333333335], [789.0, 451.0], [787.0, 2597.0], [785.0, 398.0], [784.0, 877.0], [829.0, 444.5], [831.0, 787.5], [827.0, 2246.0], [826.0, 1042.0], [825.0, 2608.0], [804.0, 2684.0], [802.0, 756.0], [801.0, 1467.0], [815.0, 2683.0], [814.0, 585.0], [813.0, 1908.3333333333333], [812.0, 1571.5], [811.0, 2514.0], [808.0, 1076.0], [821.0, 2007.3333333333333], [820.0, 538.0], [819.0, 743.0], [816.0, 2531.0], [849.0, 701.0], [861.0, 638.6666666666666], [859.0, 751.0], [857.0, 2568.0], [856.0, 1677.5], [846.0, 479.0], [834.0, 1628.5], [832.0, 2681.0], [837.0, 485.0], [835.0, 2653.0], [845.0, 569.0], [842.0, 1730.0], [840.0, 2157.75], [853.0, 1682.0], [851.0, 1660.0], [850.0, 681.0], [848.0, 803.0], [881.0, 779.0], [891.0, 2621.0], [894.0, 816.5], [890.0, 1663.0], [889.0, 761.5], [885.0, 1039.6666666666667], [884.0, 841.0], [883.0, 2597.0], [882.0, 800.0], [879.0, 805.0], [866.0, 1425.0], [865.0, 649.0], [868.0, 810.0], [867.0, 811.0], [870.0, 2613.0], [869.0, 1660.0], [873.0, 708.0], [872.0, 779.5], [926.0, 1992.0], [927.0, 753.0], [915.0, 774.4], [925.0, 753.0], [924.0, 2436.0], [923.0, 2108.5], [921.0, 2322.5], [910.0, 2472.0], [900.0, 1465.0], [903.0, 1514.0], [901.0, 806.0], [909.0, 1212.75], [908.0, 2448.0], [904.0, 2559.0], [919.0, 848.0], [918.0, 2517.0], [917.0, 2513.0], [916.0, 2192.0], [957.0, 2306.0], [959.0, 1895.5], [956.0, 1831.0], [954.0, 1500.0], [952.0, 1852.5], [933.0, 2193.3333333333335], [930.0, 2123.0], [929.0, 2114.0], [928.0, 2095.0], [942.0, 1844.5], [939.0, 2206.0], [938.0, 2026.0], [937.0, 2201.0], [936.0, 1650.3333333333333], [950.0, 2289.0], [949.0, 1964.0], [948.0, 2003.6666666666667], [945.0, 1707.25], [990.0, 965.0], [991.0, 523.0], [977.0, 2076.0], [976.0, 1490.5], [987.0, 1681.0], [986.0, 1305.0], [985.0, 1657.0], [984.0, 1758.0], [974.0, 611.0], [962.0, 1312.0], [961.0, 2140.0], [966.0, 1780.0], [965.0, 1756.5], [973.0, 1768.5], [971.0, 1872.0], [970.0, 1990.0], [969.0, 1399.6666666666667], [968.0, 1744.0], [983.0, 1198.0], [982.0, 1947.5], [979.0, 1770.0], [978.0, 1854.0], [1000.0, 1149.0], [997.0, 561.5], [995.0, 1494.0], [994.0, 600.0], [993.0, 1732.0], [992.0, 1450.0], [1.0, 3984.0]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}, {"data": [[501.8230000000003, 2853.4369999999963]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12066.666666666666, "minX": 1.7557641E12, "maxY": 114983.33333333333, "series": [{"data": [[1.7557641E12, 12066.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7557641E12, 114983.33333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557641E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 2853.4369999999963, "minX": 1.7557641E12, "maxY": 2853.4369999999963, "series": [{"data": [[1.7557641E12, 2853.4369999999963]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557641E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 2853.3969999999968, "minX": 1.7557641E12, "maxY": 2853.3969999999968, "series": [{"data": [[1.7557641E12, 2853.3969999999968]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557641E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1936.788999999999, "minX": 1.7557641E12, "maxY": 1936.788999999999, "series": [{"data": [[1.7557641E12, 1936.788999999999]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557641E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 246.0, "minX": 1.7557641E12, "maxY": 4667.0, "series": [{"data": [[1.7557641E12, 4667.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7557641E12, 4229.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7557641E12, 4553.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7557641E12, 4339.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7557641E12, 246.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7557641E12, 2866.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557641E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 626.0, "minX": 13.0, "maxY": 4038.0, "series": [{"data": [[66.0, 3155.0], [13.0, 626.0], [458.0, 2213.5], [463.0, 4038.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 463.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 626.0, "minX": 13.0, "maxY": 4038.0, "series": [{"data": [[66.0, 3154.5], [13.0, 626.0], [458.0, 2213.5], [463.0, 4038.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 463.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557641E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557641E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557641E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557641E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557641E12, 16.666666666666668]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557641E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557641E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557641E12, 16.666666666666668]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557641E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557641E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557641E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557641E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

