/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10999.0, "minX": 0.0, "maxY": 22081.0, "series": [{"data": [[0.0, 10999.0], [0.1, 11900.0], [0.2, 12826.0], [0.3, 12826.0], [0.4, 13062.0], [0.5, 13697.0], [0.6, 13821.0], [0.7, 13823.0], [0.8, 13875.0], [0.9, 13906.0], [1.0, 14023.0], [1.1, 14023.0], [1.2, 14034.0], [1.3, 14147.0], [1.4, 14147.0], [1.5, 14166.0], [1.6, 14222.0], [1.7, 14288.0], [1.8, 14335.0], [1.9, 14371.0], [2.0, 14490.0], [2.1, 14514.0], [2.2, 14542.0], [2.3, 14568.0], [2.4, 14622.0], [2.5, 14727.0], [2.6, 14743.0], [2.7, 14811.0], [2.8, 14861.0], [2.9, 14866.0], [3.0, 14869.0], [3.1, 14897.0], [3.2, 14954.0], [3.3, 15001.0], [3.4, 15084.0], [3.5, 15145.0], [3.6, 15176.0], [3.7, 15215.0], [3.8, 15303.0], [3.9, 15342.0], [4.0, 15343.0], [4.1, 15383.0], [4.2, 15408.0], [4.3, 15422.0], [4.4, 15453.0], [4.5, 15501.0], [4.6, 15503.0], [4.7, 15534.0], [4.8, 15544.0], [4.9, 15582.0], [5.0, 15659.0], [5.1, 15660.0], [5.2, 15696.0], [5.3, 15708.0], [5.4, 15734.0], [5.5, 15752.0], [5.6, 15776.0], [5.7, 15777.0], [5.8, 15790.0], [5.9, 15792.0], [6.0, 15792.0], [6.1, 15809.0], [6.2, 15836.0], [6.3, 15841.0], [6.4, 15858.0], [6.5, 15866.0], [6.6, 15882.0], [6.7, 15891.0], [6.8, 15892.0], [6.9, 15899.0], [7.0, 15902.0], [7.1, 15918.0], [7.2, 15927.0], [7.3, 15942.0], [7.4, 16080.0], [7.5, 16113.0], [7.6, 16138.0], [7.7, 16149.0], [7.8, 16202.0], [7.9, 16204.0], [8.0, 16211.0], [8.1, 16217.0], [8.2, 16250.0], [8.3, 16275.0], [8.4, 16277.0], [8.5, 16279.0], [8.6, 16285.0], [8.7, 16288.0], [8.8, 16349.0], [8.9, 16368.0], [9.0, 16412.0], [9.1, 16412.0], [9.2, 16415.0], [9.3, 16422.0], [9.4, 16429.0], [9.5, 16430.0], [9.6, 16438.0], [9.7, 16442.0], [9.8, 16448.0], [9.9, 16461.0], [10.0, 16461.0], [10.1, 16466.0], [10.2, 16479.0], [10.3, 16514.0], [10.4, 16557.0], [10.5, 16563.0], [10.6, 16565.0], [10.7, 16586.0], [10.8, 16632.0], [10.9, 16653.0], [11.0, 16666.0], [11.1, 16669.0], [11.2, 16684.0], [11.3, 16684.0], [11.4, 16708.0], [11.5, 16715.0], [11.6, 16743.0], [11.7, 16746.0], [11.8, 16757.0], [11.9, 16769.0], [12.0, 16771.0], [12.1, 16777.0], [12.2, 16781.0], [12.3, 16796.0], [12.4, 16799.0], [12.5, 16807.0], [12.6, 16824.0], [12.7, 16827.0], [12.8, 16827.0], [12.9, 16832.0], [13.0, 16832.0], [13.1, 16834.0], [13.2, 16853.0], [13.3, 16854.0], [13.4, 16869.0], [13.5, 16902.0], [13.6, 16906.0], [13.7, 16912.0], [13.8, 16919.0], [13.9, 16946.0], [14.0, 16951.0], [14.1, 16959.0], [14.2, 16965.0], [14.3, 16974.0], [14.4, 16977.0], [14.5, 16984.0], [14.6, 17003.0], [14.7, 17036.0], [14.8, 17039.0], [14.9, 17051.0], [15.0, 17080.0], [15.1, 17087.0], [15.2, 17087.0], [15.3, 17091.0], [15.4, 17095.0], [15.5, 17097.0], [15.6, 17110.0], [15.7, 17122.0], [15.8, 17128.0], [15.9, 17133.0], [16.0, 17157.0], [16.1, 17184.0], [16.2, 17185.0], [16.3, 17204.0], [16.4, 17205.0], [16.5, 17250.0], [16.6, 17257.0], [16.7, 17263.0], [16.8, 17285.0], [16.9, 17290.0], [17.0, 17303.0], [17.1, 17311.0], [17.2, 17328.0], [17.3, 17329.0], [17.4, 17329.0], [17.5, 17330.0], [17.6, 17352.0], [17.7, 17376.0], [17.8, 17376.0], [17.9, 17390.0], [18.0, 17393.0], [18.1, 17398.0], [18.2, 17408.0], [18.3, 17408.0], [18.4, 17422.0], [18.5, 17424.0], [18.6, 17424.0], [18.7, 17444.0], [18.8, 17445.0], [18.9, 17446.0], [19.0, 17448.0], [19.1, 17457.0], [19.2, 17483.0], [19.3, 17499.0], [19.4, 17502.0], [19.5, 17502.0], [19.6, 17523.0], [19.7, 17532.0], [19.8, 17545.0], [19.9, 17560.0], [20.0, 17562.0], [20.1, 17563.0], [20.2, 17563.0], [20.3, 17574.0], [20.4, 17588.0], [20.5, 17594.0], [20.6, 17614.0], [20.7, 17649.0], [20.8, 17701.0], [20.9, 17703.0], [21.0, 17715.0], [21.1, 17719.0], [21.2, 17723.0], [21.3, 17731.0], [21.4, 17731.0], [21.5, 17734.0], [21.6, 17736.0], [21.7, 17781.0], [21.8, 17807.0], [21.9, 17807.0], [22.0, 17811.0], [22.1, 17815.0], [22.2, 17827.0], [22.3, 17849.0], [22.4, 17857.0], [22.5, 17869.0], [22.6, 17876.0], [22.7, 17878.0], [22.8, 17879.0], [22.9, 17883.0], [23.0, 17886.0], [23.1, 17887.0], [23.2, 17908.0], [23.3, 17916.0], [23.4, 17929.0], [23.5, 17954.0], [23.6, 17990.0], [23.7, 17990.0], [23.8, 17993.0], [23.9, 17998.0], [24.0, 18002.0], [24.1, 18008.0], [24.2, 18018.0], [24.3, 18032.0], [24.4, 18039.0], [24.5, 18043.0], [24.6, 18045.0], [24.7, 18054.0], [24.8, 18063.0], [24.9, 18077.0], [25.0, 18117.0], [25.1, 18156.0], [25.2, 18162.0], [25.3, 18183.0], [25.4, 18189.0], [25.5, 18192.0], [25.6, 18192.0], [25.7, 18210.0], [25.8, 18211.0], [25.9, 18240.0], [26.0, 18257.0], [26.1, 18260.0], [26.2, 18297.0], [26.3, 18302.0], [26.4, 18348.0], [26.5, 18373.0], [26.6, 18417.0], [26.7, 18426.0], [26.8, 18467.0], [26.9, 18497.0], [27.0, 18504.0], [27.1, 18505.0], [27.2, 18511.0], [27.3, 18534.0], [27.4, 18538.0], [27.5, 18539.0], [27.6, 18558.0], [27.7, 18560.0], [27.8, 18573.0], [27.9, 18582.0], [28.0, 18592.0], [28.1, 18606.0], [28.2, 18609.0], [28.3, 18623.0], [28.4, 18626.0], [28.5, 18626.0], [28.6, 18630.0], [28.7, 18643.0], [28.8, 18643.0], [28.9, 18643.0], [29.0, 18647.0], [29.1, 18650.0], [29.2, 18659.0], [29.3, 18675.0], [29.4, 18691.0], [29.5, 18692.0], [29.6, 18697.0], [29.7, 18701.0], [29.8, 18705.0], [29.9, 18711.0], [30.0, 18714.0], [30.1, 18734.0], [30.2, 18740.0], [30.3, 18744.0], [30.4, 18754.0], [30.5, 18758.0], [30.6, 18758.0], [30.7, 18768.0], [30.8, 18770.0], [30.9, 18770.0], [31.0, 18773.0], [31.1, 18776.0], [31.2, 18777.0], [31.3, 18779.0], [31.4, 18783.0], [31.5, 18787.0], [31.6, 18801.0], [31.7, 18809.0], [31.8, 18812.0], [31.9, 18813.0], [32.0, 18819.0], [32.1, 18820.0], [32.2, 18822.0], [32.3, 18824.0], [32.4, 18835.0], [32.5, 18847.0], [32.6, 18848.0], [32.7, 18860.0], [32.8, 18860.0], [32.9, 18867.0], [33.0, 18868.0], [33.1, 18873.0], [33.2, 18878.0], [33.3, 18879.0], [33.4, 18882.0], [33.5, 18887.0], [33.6, 18888.0], [33.7, 18890.0], [33.8, 18890.0], [33.9, 18896.0], [34.0, 18898.0], [34.1, 18900.0], [34.2, 18901.0], [34.3, 18906.0], [34.4, 18908.0], [34.5, 18909.0], [34.6, 18911.0], [34.7, 18915.0], [34.8, 18920.0], [34.9, 18920.0], [35.0, 18924.0], [35.1, 18926.0], [35.2, 18928.0], [35.3, 18931.0], [35.4, 18933.0], [35.5, 18936.0], [35.6, 18937.0], [35.7, 18938.0], [35.8, 18949.0], [35.9, 18950.0], [36.0, 18951.0], [36.1, 18952.0], [36.2, 18961.0], [36.3, 18962.0], [36.4, 18965.0], [36.5, 18968.0], [36.6, 18975.0], [36.7, 18979.0], [36.8, 18988.0], [36.9, 18993.0], [37.0, 18998.0], [37.1, 19003.0], [37.2, 19006.0], [37.3, 19012.0], [37.4, 19014.0], [37.5, 19014.0], [37.6, 19015.0], [37.7, 19019.0], [37.8, 19022.0], [37.9, 19025.0], [38.0, 19028.0], [38.1, 19029.0], [38.2, 19029.0], [38.3, 19031.0], [38.4, 19033.0], [38.5, 19037.0], [38.6, 19039.0], [38.7, 19045.0], [38.8, 19046.0], [38.9, 19047.0], [39.0, 19047.0], [39.1, 19052.0], [39.2, 19056.0], [39.3, 19058.0], [39.4, 19062.0], [39.5, 19064.0], [39.6, 19066.0], [39.7, 19066.0], [39.8, 19067.0], [39.9, 19067.0], [40.0, 19067.0], [40.1, 19071.0], [40.2, 19079.0], [40.3, 19082.0], [40.4, 19091.0], [40.5, 19092.0], [40.6, 19095.0], [40.7, 19096.0], [40.8, 19099.0], [40.9, 19102.0], [41.0, 19103.0], [41.1, 19112.0], [41.2, 19118.0], [41.3, 19118.0], [41.4, 19123.0], [41.5, 19128.0], [41.6, 19130.0], [41.7, 19135.0], [41.8, 19135.0], [41.9, 19138.0], [42.0, 19139.0], [42.1, 19142.0], [42.2, 19142.0], [42.3, 19146.0], [42.4, 19148.0], [42.5, 19149.0], [42.6, 19153.0], [42.7, 19165.0], [42.8, 19166.0], [42.9, 19166.0], [43.0, 19168.0], [43.1, 19172.0], [43.2, 19173.0], [43.3, 19175.0], [43.4, 19179.0], [43.5, 19183.0], [43.6, 19185.0], [43.7, 19185.0], [43.8, 19192.0], [43.9, 19194.0], [44.0, 19194.0], [44.1, 19195.0], [44.2, 19196.0], [44.3, 19199.0], [44.4, 19201.0], [44.5, 19203.0], [44.6, 19203.0], [44.7, 19205.0], [44.8, 19207.0], [44.9, 19210.0], [45.0, 19214.0], [45.1, 19217.0], [45.2, 19224.0], [45.3, 19227.0], [45.4, 19232.0], [45.5, 19237.0], [45.6, 19239.0], [45.7, 19242.0], [45.8, 19243.0], [45.9, 19256.0], [46.0, 19256.0], [46.1, 19266.0], [46.2, 19267.0], [46.3, 19279.0], [46.4, 19298.0], [46.5, 19299.0], [46.6, 19300.0], [46.7, 19302.0], [46.8, 19304.0], [46.9, 19304.0], [47.0, 19304.0], [47.1, 19305.0], [47.2, 19306.0], [47.3, 19306.0], [47.4, 19307.0], [47.5, 19310.0], [47.6, 19311.0], [47.7, 19326.0], [47.8, 19328.0], [47.9, 19329.0], [48.0, 19330.0], [48.1, 19334.0], [48.2, 19338.0], [48.3, 19340.0], [48.4, 19364.0], [48.5, 19367.0], [48.6, 19367.0], [48.7, 19370.0], [48.8, 19385.0], [48.9, 19395.0], [49.0, 19398.0], [49.1, 19402.0], [49.2, 19407.0], [49.3, 19408.0], [49.4, 19409.0], [49.5, 19413.0], [49.6, 19414.0], [49.7, 19416.0], [49.8, 19432.0], [49.9, 19436.0], [50.0, 19450.0], [50.1, 19466.0], [50.2, 19526.0], [50.3, 19623.0], [50.4, 19654.0], [50.5, 19663.0], [50.6, 19670.0], [50.7, 19678.0], [50.8, 19687.0], [50.9, 19695.0], [51.0, 19726.0], [51.1, 19866.0], [51.2, 19913.0], [51.3, 19926.0], [51.4, 19932.0], [51.5, 19943.0], [51.6, 19944.0], [51.7, 19964.0], [51.8, 19981.0], [51.9, 19984.0], [52.0, 20016.0], [52.1, 20031.0], [52.2, 20064.0], [52.3, 20065.0], [52.4, 20075.0], [52.5, 20077.0], [52.6, 20082.0], [52.7, 20088.0], [52.8, 20088.0], [52.9, 20094.0], [53.0, 20097.0], [53.1, 20100.0], [53.2, 20110.0], [53.3, 20113.0], [53.4, 20117.0], [53.5, 20121.0], [53.6, 20126.0], [53.7, 20132.0], [53.8, 20133.0], [53.9, 20133.0], [54.0, 20153.0], [54.1, 20162.0], [54.2, 20163.0], [54.3, 20164.0], [54.4, 20169.0], [54.5, 20170.0], [54.6, 20176.0], [54.7, 20178.0], [54.8, 20189.0], [54.9, 20210.0], [55.0, 20212.0], [55.1, 20215.0], [55.2, 20228.0], [55.3, 20232.0], [55.4, 20243.0], [55.5, 20244.0], [55.6, 20244.0], [55.7, 20251.0], [55.8, 20262.0], [55.9, 20263.0], [56.0, 20273.0], [56.1, 20279.0], [56.2, 20282.0], [56.3, 20286.0], [56.4, 20288.0], [56.5, 20295.0], [56.6, 20304.0], [56.7, 20321.0], [56.8, 20332.0], [56.9, 20334.0], [57.0, 20342.0], [57.1, 20349.0], [57.2, 20353.0], [57.3, 20358.0], [57.4, 20374.0], [57.5, 20376.0], [57.6, 20380.0], [57.7, 20383.0], [57.8, 20384.0], [57.9, 20385.0], [58.0, 20388.0], [58.1, 20391.0], [58.2, 20391.0], [58.3, 20393.0], [58.4, 20400.0], [58.5, 20408.0], [58.6, 20411.0], [58.7, 20420.0], [58.8, 20422.0], [58.9, 20423.0], [59.0, 20424.0], [59.1, 20438.0], [59.2, 20440.0], [59.3, 20440.0], [59.4, 20443.0], [59.5, 20446.0], [59.6, 20449.0], [59.7, 20450.0], [59.8, 20455.0], [59.9, 20457.0], [60.0, 20460.0], [60.1, 20466.0], [60.2, 20468.0], [60.3, 20470.0], [60.4, 20477.0], [60.5, 20481.0], [60.6, 20484.0], [60.7, 20484.0], [60.8, 20485.0], [60.9, 20487.0], [61.0, 20490.0], [61.1, 20492.0], [61.2, 20492.0], [61.3, 20493.0], [61.4, 20494.0], [61.5, 20501.0], [61.6, 20511.0], [61.7, 20513.0], [61.8, 20515.0], [61.9, 20520.0], [62.0, 20522.0], [62.1, 20527.0], [62.2, 20527.0], [62.3, 20529.0], [62.4, 20530.0], [62.5, 20531.0], [62.6, 20532.0], [62.7, 20532.0], [62.8, 20532.0], [62.9, 20537.0], [63.0, 20539.0], [63.1, 20545.0], [63.2, 20558.0], [63.3, 20568.0], [63.4, 20581.0], [63.5, 20587.0], [63.6, 20588.0], [63.7, 20591.0], [63.8, 20594.0], [63.9, 20595.0], [64.0, 20595.0], [64.1, 20596.0], [64.2, 20597.0], [64.3, 20609.0], [64.4, 20624.0], [64.5, 20624.0], [64.6, 20625.0], [64.7, 20627.0], [64.8, 20630.0], [64.9, 20632.0], [65.0, 20633.0], [65.1, 20637.0], [65.2, 20638.0], [65.3, 20648.0], [65.4, 20651.0], [65.5, 20655.0], [65.6, 20657.0], [65.7, 20659.0], [65.8, 20662.0], [65.9, 20665.0], [66.0, 20665.0], [66.1, 20668.0], [66.2, 20668.0], [66.3, 20671.0], [66.4, 20671.0], [66.5, 20674.0], [66.6, 20677.0], [66.7, 20678.0], [66.8, 20686.0], [66.9, 20687.0], [67.0, 20689.0], [67.1, 20693.0], [67.2, 20696.0], [67.3, 20696.0], [67.4, 20697.0], [67.5, 20697.0], [67.6, 20699.0], [67.7, 20704.0], [67.8, 20706.0], [67.9, 20706.0], [68.0, 20707.0], [68.1, 20710.0], [68.2, 20713.0], [68.3, 20714.0], [68.4, 20724.0], [68.5, 20728.0], [68.6, 20733.0], [68.7, 20739.0], [68.8, 20740.0], [68.9, 20743.0], [69.0, 20744.0], [69.1, 20753.0], [69.2, 20754.0], [69.3, 20759.0], [69.4, 20767.0], [69.5, 20770.0], [69.6, 20772.0], [69.7, 20774.0], [69.8, 20775.0], [69.9, 20779.0], [70.0, 20780.0], [70.1, 20783.0], [70.2, 20785.0], [70.3, 20787.0], [70.4, 20788.0], [70.5, 20789.0], [70.6, 20792.0], [70.7, 20792.0], [70.8, 20796.0], [70.9, 20797.0], [71.0, 20798.0], [71.1, 20802.0], [71.2, 20803.0], [71.3, 20808.0], [71.4, 20826.0], [71.5, 20832.0], [71.6, 20835.0], [71.7, 20836.0], [71.8, 20840.0], [71.9, 20843.0], [72.0, 20843.0], [72.1, 20844.0], [72.2, 20849.0], [72.3, 20850.0], [72.4, 20851.0], [72.5, 20852.0], [72.6, 20854.0], [72.7, 20861.0], [72.8, 20867.0], [72.9, 20868.0], [73.0, 20868.0], [73.1, 20868.0], [73.2, 20869.0], [73.3, 20869.0], [73.4, 20870.0], [73.5, 20871.0], [73.6, 20874.0], [73.7, 20879.0], [73.8, 20880.0], [73.9, 20880.0], [74.0, 20886.0], [74.1, 20886.0], [74.2, 20890.0], [74.3, 20894.0], [74.4, 20897.0], [74.5, 20898.0], [74.6, 20898.0], [74.7, 20900.0], [74.8, 20902.0], [74.9, 20902.0], [75.0, 20910.0], [75.1, 20911.0], [75.2, 20914.0], [75.3, 20914.0], [75.4, 20916.0], [75.5, 20917.0], [75.6, 20919.0], [75.7, 20923.0], [75.8, 20923.0], [75.9, 20928.0], [76.0, 20930.0], [76.1, 20930.0], [76.2, 20933.0], [76.3, 20935.0], [76.4, 20935.0], [76.5, 20942.0], [76.6, 20944.0], [76.7, 20946.0], [76.8, 20948.0], [76.9, 20949.0], [77.0, 20951.0], [77.1, 20951.0], [77.2, 20955.0], [77.3, 20955.0], [77.4, 20957.0], [77.5, 20959.0], [77.6, 20961.0], [77.7, 20963.0], [77.8, 20963.0], [77.9, 20963.0], [78.0, 20964.0], [78.1, 20964.0], [78.2, 20965.0], [78.3, 20966.0], [78.4, 20966.0], [78.5, 20967.0], [78.6, 20969.0], [78.7, 20971.0], [78.8, 20972.0], [78.9, 20979.0], [79.0, 20986.0], [79.1, 20987.0], [79.2, 20997.0], [79.3, 21001.0], [79.4, 21004.0], [79.5, 21004.0], [79.6, 21009.0], [79.7, 21011.0], [79.8, 21012.0], [79.9, 21014.0], [80.0, 21023.0], [80.1, 21024.0], [80.2, 21033.0], [80.3, 21036.0], [80.4, 21039.0], [80.5, 21042.0], [80.6, 21042.0], [80.7, 21046.0], [80.8, 21048.0], [80.9, 21055.0], [81.0, 21056.0], [81.1, 21061.0], [81.2, 21063.0], [81.3, 21063.0], [81.4, 21064.0], [81.5, 21066.0], [81.6, 21067.0], [81.7, 21068.0], [81.8, 21070.0], [81.9, 21070.0], [82.0, 21075.0], [82.1, 21076.0], [82.2, 21076.0], [82.3, 21079.0], [82.4, 21080.0], [82.5, 21080.0], [82.6, 21081.0], [82.7, 21082.0], [82.8, 21084.0], [82.9, 21090.0], [83.0, 21094.0], [83.1, 21094.0], [83.2, 21095.0], [83.3, 21097.0], [83.4, 21107.0], [83.5, 21109.0], [83.6, 21110.0], [83.7, 21114.0], [83.8, 21116.0], [83.9, 21118.0], [84.0, 21119.0], [84.1, 21122.0], [84.2, 21124.0], [84.3, 21125.0], [84.4, 21125.0], [84.5, 21128.0], [84.6, 21131.0], [84.7, 21133.0], [84.8, 21134.0], [84.9, 21135.0], [85.0, 21135.0], [85.1, 21137.0], [85.2, 21139.0], [85.3, 21150.0], [85.4, 21155.0], [85.5, 21156.0], [85.6, 21157.0], [85.7, 21168.0], [85.8, 21169.0], [85.9, 21169.0], [86.0, 21170.0], [86.1, 21170.0], [86.2, 21171.0], [86.3, 21171.0], [86.4, 21173.0], [86.5, 21178.0], [86.6, 21180.0], [86.7, 21180.0], [86.8, 21180.0], [86.9, 21181.0], [87.0, 21182.0], [87.1, 21200.0], [87.2, 21202.0], [87.3, 21204.0], [87.4, 21205.0], [87.5, 21206.0], [87.6, 21208.0], [87.7, 21208.0], [87.8, 21210.0], [87.9, 21211.0], [88.0, 21215.0], [88.1, 21217.0], [88.2, 21219.0], [88.3, 21220.0], [88.4, 21225.0], [88.5, 21234.0], [88.6, 21237.0], [88.7, 21238.0], [88.8, 21240.0], [88.9, 21241.0], [89.0, 21241.0], [89.1, 21245.0], [89.2, 21248.0], [89.3, 21252.0], [89.4, 21254.0], [89.5, 21260.0], [89.6, 21261.0], [89.7, 21261.0], [89.8, 21267.0], [89.9, 21269.0], [90.0, 21269.0], [90.1, 21273.0], [90.2, 21274.0], [90.3, 21276.0], [90.4, 21277.0], [90.5, 21281.0], [90.6, 21283.0], [90.7, 21295.0], [90.8, 21297.0], [90.9, 21300.0], [91.0, 21300.0], [91.1, 21301.0], [91.2, 21304.0], [91.3, 21305.0], [91.4, 21313.0], [91.5, 21316.0], [91.6, 21320.0], [91.7, 21321.0], [91.8, 21321.0], [91.9, 21324.0], [92.0, 21326.0], [92.1, 21331.0], [92.2, 21336.0], [92.3, 21336.0], [92.4, 21336.0], [92.5, 21337.0], [92.6, 21339.0], [92.7, 21341.0], [92.8, 21343.0], [92.9, 21345.0], [93.0, 21349.0], [93.1, 21352.0], [93.2, 21354.0], [93.3, 21355.0], [93.4, 21362.0], [93.5, 21364.0], [93.6, 21364.0], [93.7, 21364.0], [93.8, 21369.0], [93.9, 21371.0], [94.0, 21371.0], [94.1, 21376.0], [94.2, 21377.0], [94.3, 21377.0], [94.4, 21378.0], [94.5, 21383.0], [94.6, 21385.0], [94.7, 21385.0], [94.8, 21390.0], [94.9, 21394.0], [95.0, 21395.0], [95.1, 21405.0], [95.2, 21407.0], [95.3, 21408.0], [95.4, 21408.0], [95.5, 21412.0], [95.6, 21413.0], [95.7, 21414.0], [95.8, 21416.0], [95.9, 21416.0], [96.0, 21418.0], [96.1, 21418.0], [96.2, 21428.0], [96.3, 21428.0], [96.4, 21430.0], [96.5, 21434.0], [96.6, 21434.0], [96.7, 21443.0], [96.8, 21450.0], [96.9, 21454.0], [97.0, 21454.0], [97.1, 21456.0], [97.2, 21461.0], [97.3, 21467.0], [97.4, 21472.0], [97.5, 21477.0], [97.6, 21484.0], [97.7, 21486.0], [97.8, 21490.0], [97.9, 21499.0], [98.0, 21502.0], [98.1, 21508.0], [98.2, 21525.0], [98.3, 21527.0], [98.4, 21529.0], [98.5, 21548.0], [98.6, 21554.0], [98.7, 21554.0], [98.8, 21595.0], [98.9, 21597.0], [99.0, 21640.0], [99.1, 21651.0], [99.2, 21667.0], [99.3, 21682.0], [99.4, 21683.0], [99.5, 21693.0], [99.6, 21729.0], [99.7, 21790.0], [99.8, 21926.0], [99.9, 22081.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 10900.0, "maxY": 46.0, "series": [{"data": [[10900.0, 1.0], [11900.0, 1.0], [12800.0, 1.0], [12900.0, 1.0], [13000.0, 1.0], [13600.0, 1.0], [13800.0, 3.0], [13900.0, 1.0], [14000.0, 3.0], [14300.0, 2.0], [14100.0, 2.0], [14200.0, 2.0], [14800.0, 5.0], [14700.0, 2.0], [14400.0, 1.0], [14600.0, 1.0], [14500.0, 3.0], [15000.0, 2.0], [14900.0, 1.0], [15300.0, 4.0], [15100.0, 2.0], [15200.0, 1.0], [15400.0, 4.0], [15700.0, 8.0], [15500.0, 5.0], [15600.0, 3.0], [15800.0, 9.0], [16000.0, 1.0], [16100.0, 3.0], [16200.0, 10.0], [16300.0, 2.0], [15900.0, 4.0], [16600.0, 6.0], [16400.0, 13.0], [16700.0, 11.0], [16500.0, 5.0], [16800.0, 10.0], [17000.0, 10.0], [17400.0, 12.0], [17200.0, 7.0], [17300.0, 12.0], [16900.0, 11.0], [17100.0, 7.0], [17500.0, 11.0], [17800.0, 14.0], [17700.0, 10.0], [17900.0, 8.0], [18000.0, 10.0], [17600.0, 2.0], [18100.0, 7.0], [18200.0, 6.0], [18400.0, 4.0], [18300.0, 3.0], [18600.0, 16.0], [18700.0, 19.0], [18800.0, 25.0], [18900.0, 30.0], [19100.0, 35.0], [18500.0, 11.0], [19000.0, 38.0], [19200.0, 22.0], [19300.0, 25.0], [19400.0, 11.0], [19700.0, 1.0], [20000.0, 11.0], [19500.0, 1.0], [20200.0, 17.0], [19800.0, 1.0], [19600.0, 7.0], [19900.0, 8.0], [20100.0, 18.0], [20300.0, 18.0], [20400.0, 31.0], [21300.0, 42.0], [20600.0, 34.0], [20500.0, 28.0], [20700.0, 34.0], [20900.0, 46.0], [21000.0, 42.0], [20800.0, 36.0], [21100.0, 37.0], [21200.0, 38.0], [21400.0, 29.0], [21500.0, 10.0], [21600.0, 6.0], [21700.0, 2.0], [21900.0, 1.0], [22000.0, 1.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 502.6049999999996, "minX": 1.75575996E12, "maxY": 502.6049999999996, "series": [{"data": [[1.75575996E12, 502.6049999999996]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75575996E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10999.0, "minX": 1.0, "maxY": 22081.0, "series": [{"data": [[2.0, 21926.0], [3.0, 21300.0], [4.0, 21693.0], [5.0, 21416.0], [6.0, 21595.0], [7.0, 21790.0], [8.0, 19329.0], [9.0, 21416.0], [10.0, 21651.0], [11.0, 21729.0], [13.0, 20298.5], [14.0, 21156.0], [15.0, 21682.0], [16.0, 21107.0], [18.0, 21432.5], [19.0, 21683.0], [20.0, 21081.0], [21.0, 21502.0], [22.0, 19678.0], [23.0, 19148.0], [24.0, 21640.0], [25.0, 21128.0], [26.0, 21667.0], [30.0, 21472.0], [31.0, 21064.0], [33.0, 21525.0], [32.0, 21297.5], [35.0, 19175.0], [34.0, 19687.0], [36.0, 21336.0], [39.0, 21434.0], [41.0, 21418.0], [40.0, 20707.0], [43.0, 21248.0], [42.0, 21261.0], [45.0, 21554.0], [44.0, 21026.0], [48.0, 21340.0], [51.0, 19695.0], [50.0, 20481.0], [53.0, 21316.666666666668], [55.0, 21377.0], [54.0, 21168.0], [57.0, 21321.0], [56.0, 19079.0], [59.0, 19052.0], [58.0, 19670.0], [61.0, 19096.0], [62.0, 20237.5], [66.0, 20290.0], [64.0, 20255.0], [71.0, 19103.0], [70.0, 20230.0], [68.0, 21241.0], [75.0, 21461.0], [72.0, 21180.0], [79.0, 20949.0], [78.0, 21527.0], [77.0, 20961.0], [76.0, 19006.0], [83.0, 21450.0], [82.0, 20917.0], [81.0, 20979.0], [80.0, 19267.0], [87.0, 20057.5], [85.0, 21061.0], [84.0, 21204.0], [91.0, 20916.0], [90.0, 21289.0], [88.0, 21170.0], [95.0, 19031.0], [94.0, 20886.0], [93.0, 21157.5], [98.0, 21508.0], [97.0, 21486.0], [96.0, 21300.0], [102.0, 20460.0], [100.0, 21297.0], [106.0, 21255.0], [108.0, 20132.0], [114.0, 21430.0], [113.0, 21283.0], [112.0, 20351.75], [118.0, 21131.0], [117.0, 19796.0], [121.0, 20880.0], [120.0, 20167.5], [127.0, 21371.0], [126.0, 21163.25], [124.0, 20868.0], [131.0, 21358.0], [129.0, 21318.0], [142.0, 20880.0], [140.0, 21261.0], [139.0, 19326.0], [138.0, 20569.0], [151.0, 21254.0], [150.0, 21324.0], [147.0, 21412.0], [146.0, 20066.0], [145.0, 20928.0], [159.0, 21207.0], [156.0, 21418.0], [155.0, 18931.0], [154.0, 19037.0], [153.0, 20597.666666666668], [167.0, 21237.0], [166.0, 18920.0], [165.0, 19019.0], [164.0, 19064.0], [163.0, 21408.0], [162.0, 21337.0], [161.0, 21252.0], [160.0, 21195.5], [175.0, 20150.0], [173.0, 20150.5], [172.0, 21362.0], [170.0, 20966.0], [169.0, 20983.0], [178.0, 20241.333333333332], [191.0, 20087.75], [189.0, 19367.0], [185.0, 21063.0], [199.0, 21171.0], [197.0, 20779.0], [196.0, 20227.5], [195.0, 20843.0], [207.0, 20685.363636363636], [203.0, 21369.0], [202.0, 21219.0], [201.0, 21075.5], [200.0, 19402.0], [214.0, 21066.0], [213.0, 21355.0], [212.0, 21352.0], [209.0, 21331.0], [208.0, 19338.0], [223.0, 20782.0], [220.0, 18890.0], [218.0, 20593.5], [231.0, 20155.0], [227.0, 21321.0], [226.0, 21364.0], [225.0, 21265.0], [239.0, 21326.0], [237.0, 20969.0], [236.0, 19015.0], [235.0, 19450.0], [234.0, 21013.0], [232.0, 18962.0], [246.0, 21323.5], [245.0, 21036.0], [243.0, 18993.0], [240.0, 21042.0], [254.0, 19741.333333333332], [253.0, 21110.0], [251.0, 20575.5], [250.0, 21135.333333333332], [269.0, 20776.8], [268.0, 21205.0], [266.0, 20303.6], [265.0, 21082.0], [261.0, 20803.0], [258.0, 21068.0], [257.0, 21349.0], [284.0, 20274.0], [287.0, 18801.0], [286.0, 20796.0], [285.0, 20728.0], [283.0, 20008.0], [278.0, 20315.666666666668], [277.0, 21039.5], [276.0, 21067.0], [274.0, 20788.0], [303.0, 21114.0], [302.0, 19061.0], [300.0, 21137.0], [298.0, 20699.0], [297.0, 20088.75], [294.0, 19896.0], [293.0, 21060.333333333332], [288.0, 18938.0], [307.0, 20331.0], [317.0, 21215.0], [319.0, 20919.0], [316.0, 20996.5], [314.0, 20870.0], [313.0, 18762.0], [311.0, 20162.5], [309.0, 21267.0], [308.0, 20886.0], [306.0, 20775.0], [304.0, 21013.0], [333.0, 20951.0], [331.0, 20781.5], [327.0, 19684.5], [325.0, 20662.0], [324.0, 21208.0], [323.0, 21038.0], [320.0, 20919.0], [350.0, 20687.0], [351.0, 20697.0], [349.0, 21119.0], [348.0, 20964.0], [347.0, 20879.0], [346.0, 20953.333333333332], [340.0, 20668.0], [339.0, 20429.333333333332], [336.0, 20921.0], [366.0, 20985.0], [365.0, 19123.0], [363.0, 19845.0], [361.0, 20606.85714285714], [358.0, 20702.0], [357.0, 20531.0], [377.0, 20739.0], [381.0, 20823.75], [379.0, 18901.0], [375.0, 20595.0], [374.0, 20501.0], [373.0, 21095.0], [372.0, 20568.0], [371.0, 18560.0], [370.0, 20802.5], [399.0, 20867.0], [398.0, 20785.0], [395.0, 20210.25], [394.0, 18998.0], [393.0, 20802.0], [391.0, 20269.333333333332], [390.0, 20972.0], [389.0, 20789.0], [387.0, 21094.0], [386.0, 20901.5], [413.0, 20930.0], [411.0, 19768.0], [410.0, 20706.0], [409.0, 19796.5], [405.0, 21075.0], [404.0, 19858.25], [400.0, 18701.0], [428.0, 20706.0], [431.0, 20897.0], [430.0, 18538.0], [429.0, 19980.0], [427.0, 19829.0], [423.0, 21004.0], [416.0, 21084.0], [418.0, 20487.0], [417.0, 20914.0], [422.0, 20542.8], [420.0, 20632.0], [421.0, 20484.0], [445.0, 20840.0], [446.0, 18582.0], [443.0, 20874.0], [441.0, 20624.0], [440.0, 20844.0], [434.0, 19866.0], [433.0, 21024.0], [461.0, 20383.0], [463.0, 20880.0], [460.0, 20358.0], [451.0, 20963.0], [450.0, 19915.5], [448.0, 19987.11111111111], [459.0, 20595.0], [458.0, 20423.0], [457.0, 20638.0], [456.0, 20928.0], [455.0, 21004.0], [454.0, 20589.0], [452.0, 20457.0], [475.0, 20436.0], [465.0, 20872.0], [493.0, 20537.0], [491.0, 19195.0], [489.0, 19823.25], [486.0, 20704.0], [484.0, 20689.0], [483.0, 20445.666666666668], [480.0, 20326.46153846154], [511.0, 20162.0], [510.0, 20262.0], [506.0, 19388.0], [502.0, 20182.571428571428], [501.0, 19703.666666666668], [531.0, 19924.666666666668], [539.0, 19637.0], [535.0, 20633.0], [534.0, 20663.5], [532.0, 20674.0], [528.0, 20624.0], [527.0, 20126.0], [514.0, 18201.5], [513.0, 18210.0], [516.0, 20696.0], [515.0, 18183.0], [526.0, 20671.0], [525.0, 18497.0], [524.0, 20097.0], [523.0, 20609.0], [522.0, 20082.0], [521.0, 19365.0], [520.0, 19281.333333333332], [561.0, 18156.0], [573.0, 18343.0], [571.0, 18032.0], [570.0, 19998.5], [568.0, 20284.5], [558.0, 18373.0], [551.0, 20208.714285714286], [550.0, 20655.0], [548.0, 20404.5], [546.0, 20408.666666666668], [544.0, 18117.0], [557.0, 20470.0], [566.0, 20293.333333333336], [565.0, 20212.0], [564.0, 20279.0], [560.0, 20088.0], [596.0, 20492.0], [606.0, 20391.0], [605.0, 20178.4], [600.0, 20388.0], [581.0, 19964.0], [580.0, 19943.5], [579.0, 19830.75], [578.0, 20529.0], [599.0, 19243.25], [598.0, 19464.0], [597.0, 19913.0], [592.0, 20210.0], [591.0, 20132.0], [590.0, 20515.0], [588.0, 18511.0], [587.0, 19218.5], [585.0, 20530.0], [584.0, 18704.333333333332], [635.0, 18043.0], [637.0, 20243.0], [639.0, 20146.5], [636.0, 19476.666666666668], [626.0, 19663.0], [625.0, 19522.25], [622.0, 20273.0], [610.0, 20117.0], [609.0, 20341.333333333332], [615.0, 20088.0], [611.0, 20100.0], [620.0, 19447.0], [617.0, 18758.0], [668.0, 18782.222222222223], [659.0, 18175.0], [657.0, 19409.0], [656.0, 19262.5], [654.0, 19395.0], [641.0, 20031.0], [640.0, 17781.0], [645.0, 19526.0], [644.0, 18584.0], [653.0, 19325.666666666668], [650.0, 16912.0], [649.0, 19280.0], [647.0, 19192.0], [646.0, 17376.0], [692.0, 19215.0], [701.0, 19304.0], [702.0, 19175.5], [688.0, 17854.5], [690.0, 19266.0], [689.0, 18282.0], [699.0, 18879.0], [698.0, 18506.6], [697.0, 19305.0], [687.0, 18924.0], [686.0, 18012.75], [685.0, 19185.0], [682.0, 17006.333333333332], [681.0, 18900.0], [695.0, 18734.0], [694.0, 18558.0], [693.0, 19306.0], [731.0, 19214.0], [735.0, 19087.5], [733.0, 17205.0], [732.0, 19166.0], [730.0, 18331.666666666668], [727.0, 18149.5], [719.0, 19160.6], [714.0, 18307.333333333332], [711.0, 18456.0], [709.0, 18287.333333333332], [705.0, 18405.166666666668], [764.0, 18457.428571428572], [767.0, 18275.0], [760.0, 18445.333333333332], [740.0, 18719.0], [739.0, 18787.666666666668], [756.0, 19039.0], [755.0, 18073.5], [766.0, 19118.0], [748.0, 19014.0], [746.0, 19059.0], [745.0, 19199.0], [744.0, 19061.666666666668], [797.0, 18805.5], [799.0, 18768.0], [796.0, 18078.333333333332], [793.0, 18073.5], [792.0, 18617.5], [773.0, 18028.25], [772.0, 18643.0], [769.0, 18939.0], [768.0, 17051.0], [783.0, 18879.5], [782.0, 18827.5], [780.0, 19195.0], [778.0, 18895.5], [776.0, 18766.0], [790.0, 18166.5], [789.0, 18697.0], [787.0, 18890.0], [786.0, 18573.0], [830.0, 17791.666666666668], [831.0, 17719.0], [828.0, 16113.0], [824.0, 17402.0], [821.0, 17929.0], [820.0, 15777.0], [818.0, 17331.0], [817.0, 17377.6], [815.0, 17563.0], [802.0, 15544.0], [801.0, 18803.666666666668], [807.0, 17446.0], [803.0, 15902.0], [814.0, 17806.0], [813.0, 16815.0], [811.0, 17559.0], [859.0, 17827.0], [860.0, 17401.666666666668], [858.0, 15659.0], [839.0, 17687.666666666668], [837.0, 17523.0], [835.0, 16844.5], [833.0, 17549.5], [854.0, 17800.5], [852.0, 15750.0], [850.0, 17773.75], [846.0, 17506.666666666668], [843.0, 16769.5], [841.0, 17461.5], [889.0, 17095.0], [888.0, 17393.0], [871.0, 15792.0], [870.0, 17250.0], [869.0, 17310.22222222222], [865.0, 17329.0], [887.0, 16924.0], [885.0, 16959.0], [884.0, 17263.0], [883.0, 16940.166666666668], [882.0, 17337.5], [875.0, 17445.0], [874.0, 17532.0], [873.0, 15215.0], [872.0, 17422.0], [923.0, 16603.2], [921.0, 16359.0], [902.0, 16705.5], [898.0, 16821.5], [896.0, 16861.14285714286], [918.0, 14514.0], [916.0, 16349.0], [914.0, 16217.0], [913.0, 16422.0], [912.0, 16586.0], [911.0, 16666.0], [910.0, 16642.5], [908.0, 16445.5], [906.0, 16600.5], [958.0, 13875.0], [959.0, 13823.0], [945.0, 15790.0], [944.0, 16305.333333333334], [957.0, 15462.5], [955.0, 15792.0], [954.0, 16080.0], [953.0, 15734.0], [952.0, 15648.0], [935.0, 16279.0], [934.0, 16461.0], [933.0, 16269.0], [931.0, 16442.0], [929.0, 16079.0], [941.0, 16138.0], [940.0, 16235.2], [939.0, 16486.0], [948.0, 15776.0], [947.0, 15992.5], [990.0, 14371.0], [991.0, 14023.0], [976.0, 14762.5], [989.0, 14034.0], [988.0, 15084.0], [987.0, 14811.0], [986.0, 14166.0], [985.0, 14735.6], [967.0, 15453.0], [966.0, 15467.75], [963.0, 15708.0], [961.0, 15539.5], [974.0, 14754.666666666666], [971.0, 14335.0], [970.0, 14727.0], [969.0, 14542.0], [968.0, 15176.0], [980.0, 14147.0], [979.0, 14897.0], [978.0, 15343.0], [977.0, 14861.0], [1000.0, 10999.0], [999.0, 11900.0], [998.0, 12826.0], [997.0, 13759.0], [995.0, 13906.0], [994.0, 13018.5], [992.0, 14023.0], [1.0, 22081.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}, {"data": [[502.60299999999995, 19296.13600000002]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14750.0, "minX": 1.75575996E12, "maxY": 19350.0, "series": [{"data": [[1.75575996E12, 14750.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75575996E12, 19350.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75575996E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19296.13600000002, "minX": 1.75575996E12, "maxY": 19296.13600000002, "series": [{"data": [[1.75575996E12, 19296.13600000002]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75575996E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 19296.108, "minX": 1.75575996E12, "maxY": 19296.108, "series": [{"data": [[1.75575996E12, 19296.108]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75575996E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1588.5389999999995, "minX": 1.75575996E12, "maxY": 1588.5389999999995, "series": [{"data": [[1.75575996E12, 1588.5389999999995]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75575996E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10999.0, "minX": 1.75575996E12, "maxY": 22081.0, "series": [{"data": [[1.75575996E12, 22081.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75575996E12, 21269.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75575996E12, 21639.57]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75575996E12, 21394.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75575996E12, 10999.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75575996E12, 19458.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75575996E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 10999.0, "minX": 1.0, "maxY": 21062.0, "series": [{"data": [[1.0, 10999.0], [2.0, 12363.0], [4.0, 16926.0], [156.0, 18970.0], [307.0, 20443.0], [40.0, 15160.5], [334.0, 21062.0], [95.0, 17424.0], [6.0, 13759.0], [51.0, 16430.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 334.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 10992.0, "minX": 1.0, "maxY": 21062.0, "series": [{"data": [[1.0, 10992.0], [2.0, 12363.0], [4.0, 16925.5], [156.0, 18970.0], [307.0, 20443.0], [40.0, 15160.5], [334.0, 21062.0], [95.0, 17424.0], [6.0, 13759.0], [51.0, 16430.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 334.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75575996E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75575996E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75575996E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75575996E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75575996E12, 16.666666666666668]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75575996E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75575996E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75575996E12, 16.666666666666668]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75575996E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75575996E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75575996E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75575996E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

