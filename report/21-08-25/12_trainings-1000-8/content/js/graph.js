/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6983.0, "minX": 0.0, "maxY": 32833.0, "series": [{"data": [[0.0, 6983.0], [0.1, 8318.0], [0.2, 8449.0], [0.3, 8449.0], [0.4, 8823.0], [0.5, 8915.0], [0.6, 8945.0], [0.7, 9018.0], [0.8, 9477.0], [0.9, 10561.0], [1.0, 10700.0], [1.1, 10743.0], [1.2, 10794.0], [1.3, 10843.0], [1.4, 10843.0], [1.5, 10887.0], [1.6, 10911.0], [1.7, 10956.0], [1.8, 10958.0], [1.9, 11001.0], [2.0, 11019.0], [2.1, 11033.0], [2.2, 11096.0], [2.3, 11131.0], [2.4, 11142.0], [2.5, 11278.0], [2.6, 11493.0], [2.7, 11547.0], [2.8, 11558.0], [2.9, 11562.0], [3.0, 11593.0], [3.1, 11636.0], [3.2, 11655.0], [3.3, 11692.0], [3.4, 11703.0], [3.5, 11743.0], [3.6, 11804.0], [3.7, 11815.0], [3.8, 11844.0], [3.9, 11862.0], [4.0, 12028.0], [4.1, 12109.0], [4.2, 12119.0], [4.3, 12144.0], [4.4, 12236.0], [4.5, 12304.0], [4.6, 12340.0], [4.7, 12374.0], [4.8, 12422.0], [4.9, 12617.0], [5.0, 12752.0], [5.1, 12794.0], [5.2, 12842.0], [5.3, 13095.0], [5.4, 13102.0], [5.5, 13341.0], [5.6, 13451.0], [5.7, 13488.0], [5.8, 13498.0], [5.9, 13589.0], [6.0, 13619.0], [6.1, 13659.0], [6.2, 13694.0], [6.3, 13742.0], [6.4, 13753.0], [6.5, 13770.0], [6.6, 13784.0], [6.7, 13824.0], [6.8, 13875.0], [6.9, 13910.0], [7.0, 13919.0], [7.1, 14068.0], [7.2, 14102.0], [7.3, 14216.0], [7.4, 14255.0], [7.5, 14314.0], [7.6, 14418.0], [7.7, 14431.0], [7.8, 14475.0], [7.9, 14624.0], [8.0, 14691.0], [8.1, 14831.0], [8.2, 14855.0], [8.3, 14935.0], [8.4, 14958.0], [8.5, 15012.0], [8.6, 15341.0], [8.7, 15387.0], [8.8, 15445.0], [8.9, 15771.0], [9.0, 15785.0], [9.1, 15793.0], [9.2, 15975.0], [9.3, 16103.0], [9.4, 16156.0], [9.5, 16242.0], [9.6, 16462.0], [9.7, 16494.0], [9.8, 16587.0], [9.9, 16725.0], [10.0, 16800.0], [10.1, 16836.0], [10.2, 16871.0], [10.3, 16882.0], [10.4, 16888.0], [10.5, 16947.0], [10.6, 16953.0], [10.7, 17055.0], [10.8, 17115.0], [10.9, 17210.0], [11.0, 17214.0], [11.1, 17227.0], [11.2, 17265.0], [11.3, 17295.0], [11.4, 17334.0], [11.5, 17349.0], [11.6, 17397.0], [11.7, 17604.0], [11.8, 17605.0], [11.9, 17653.0], [12.0, 17700.0], [12.1, 17712.0], [12.2, 17717.0], [12.3, 17782.0], [12.4, 17801.0], [12.5, 17835.0], [12.6, 17919.0], [12.7, 18077.0], [12.8, 18084.0], [12.9, 18122.0], [13.0, 18144.0], [13.1, 18151.0], [13.2, 18220.0], [13.3, 18331.0], [13.4, 18385.0], [13.5, 18446.0], [13.6, 18496.0], [13.7, 18504.0], [13.8, 18547.0], [13.9, 18574.0], [14.0, 18625.0], [14.1, 18627.0], [14.2, 18630.0], [14.3, 18654.0], [14.4, 18662.0], [14.5, 18688.0], [14.6, 18742.0], [14.7, 18775.0], [14.8, 18779.0], [14.9, 18829.0], [15.0, 18857.0], [15.1, 18871.0], [15.2, 18891.0], [15.3, 18928.0], [15.4, 18952.0], [15.5, 18966.0], [15.6, 18988.0], [15.7, 18992.0], [15.8, 19038.0], [15.9, 19042.0], [16.0, 19100.0], [16.1, 19143.0], [16.2, 19169.0], [16.3, 19185.0], [16.4, 19192.0], [16.5, 19208.0], [16.6, 19215.0], [16.7, 19238.0], [16.8, 19261.0], [16.9, 19268.0], [17.0, 19291.0], [17.1, 19313.0], [17.2, 19315.0], [17.3, 19350.0], [17.4, 19357.0], [17.5, 19412.0], [17.6, 19421.0], [17.7, 19434.0], [17.8, 19434.0], [17.9, 19533.0], [18.0, 19551.0], [18.1, 19575.0], [18.2, 19584.0], [18.3, 19606.0], [18.4, 19622.0], [18.5, 19634.0], [18.6, 19656.0], [18.7, 19677.0], [18.8, 19681.0], [18.9, 19703.0], [19.0, 19708.0], [19.1, 19713.0], [19.2, 19723.0], [19.3, 19730.0], [19.4, 19730.0], [19.5, 19745.0], [19.6, 19766.0], [19.7, 19778.0], [19.8, 19795.0], [19.9, 19834.0], [20.0, 19859.0], [20.1, 19879.0], [20.2, 19886.0], [20.3, 19894.0], [20.4, 19896.0], [20.5, 19961.0], [20.6, 19995.0], [20.7, 19996.0], [20.8, 20017.0], [20.9, 20020.0], [21.0, 20027.0], [21.1, 20030.0], [21.2, 20035.0], [21.3, 20086.0], [21.4, 20118.0], [21.5, 20163.0], [21.6, 20166.0], [21.7, 20212.0], [21.8, 20212.0], [21.9, 20333.0], [22.0, 20351.0], [22.1, 20359.0], [22.2, 20473.0], [22.3, 20475.0], [22.4, 20479.0], [22.5, 20499.0], [22.6, 20502.0], [22.7, 20506.0], [22.8, 20592.0], [22.9, 20619.0], [23.0, 20638.0], [23.1, 20654.0], [23.2, 20654.0], [23.3, 20689.0], [23.4, 20729.0], [23.5, 20730.0], [23.6, 20758.0], [23.7, 20763.0], [23.8, 20768.0], [23.9, 20777.0], [24.0, 20849.0], [24.1, 20850.0], [24.2, 20850.0], [24.3, 20853.0], [24.4, 20854.0], [24.5, 20882.0], [24.6, 20915.0], [24.7, 20920.0], [24.8, 20920.0], [24.9, 20933.0], [25.0, 20946.0], [25.1, 20961.0], [25.2, 20972.0], [25.3, 20991.0], [25.4, 21019.0], [25.5, 21029.0], [25.6, 21043.0], [25.7, 21053.0], [25.8, 21073.0], [25.9, 21094.0], [26.0, 21103.0], [26.1, 21104.0], [26.2, 21105.0], [26.3, 21109.0], [26.4, 21121.0], [26.5, 21157.0], [26.6, 21163.0], [26.7, 21219.0], [26.8, 21246.0], [26.9, 21282.0], [27.0, 21329.0], [27.1, 21333.0], [27.2, 21336.0], [27.3, 21339.0], [27.4, 21347.0], [27.5, 21352.0], [27.6, 21382.0], [27.7, 21405.0], [27.8, 21409.0], [27.9, 21412.0], [28.0, 21415.0], [28.1, 21426.0], [28.2, 21431.0], [28.3, 21445.0], [28.4, 21456.0], [28.5, 21476.0], [28.6, 21485.0], [28.7, 21488.0], [28.8, 21496.0], [28.9, 21516.0], [29.0, 21591.0], [29.1, 21591.0], [29.2, 21598.0], [29.3, 21599.0], [29.4, 21600.0], [29.5, 21610.0], [29.6, 21625.0], [29.7, 21642.0], [29.8, 21642.0], [29.9, 21660.0], [30.0, 21683.0], [30.1, 21691.0], [30.2, 21738.0], [30.3, 21756.0], [30.4, 21770.0], [30.5, 21781.0], [30.6, 21814.0], [30.7, 21821.0], [30.8, 21839.0], [30.9, 21840.0], [31.0, 21841.0], [31.1, 21864.0], [31.2, 21870.0], [31.3, 21872.0], [31.4, 21875.0], [31.5, 21913.0], [31.6, 21936.0], [31.7, 21996.0], [31.8, 22006.0], [31.9, 22021.0], [32.0, 22073.0], [32.1, 22078.0], [32.2, 22078.0], [32.3, 22095.0], [32.4, 22122.0], [32.5, 22218.0], [32.6, 22225.0], [32.7, 22231.0], [32.8, 22249.0], [32.9, 22252.0], [33.0, 22308.0], [33.1, 22311.0], [33.2, 22357.0], [33.3, 22366.0], [33.4, 22379.0], [33.5, 22391.0], [33.6, 22443.0], [33.7, 22447.0], [33.8, 22485.0], [33.9, 22546.0], [34.0, 22549.0], [34.1, 22570.0], [34.2, 22611.0], [34.3, 22636.0], [34.4, 22639.0], [34.5, 22662.0], [34.6, 22662.0], [34.7, 22665.0], [34.8, 22683.0], [34.9, 22692.0], [35.0, 22694.0], [35.1, 22704.0], [35.2, 22706.0], [35.3, 22717.0], [35.4, 22717.0], [35.5, 22718.0], [35.6, 22726.0], [35.7, 22735.0], [35.8, 22736.0], [35.9, 22740.0], [36.0, 22742.0], [36.1, 22793.0], [36.2, 22809.0], [36.3, 22837.0], [36.4, 22850.0], [36.5, 22859.0], [36.6, 22860.0], [36.7, 22862.0], [36.8, 22876.0], [36.9, 22891.0], [37.0, 22905.0], [37.1, 22933.0], [37.2, 22934.0], [37.3, 22965.0], [37.4, 22971.0], [37.5, 22976.0], [37.6, 22983.0], [37.7, 23019.0], [37.8, 23034.0], [37.9, 23049.0], [38.0, 23077.0], [38.1, 23080.0], [38.2, 23084.0], [38.3, 23085.0], [38.4, 23098.0], [38.5, 23102.0], [38.6, 23112.0], [38.7, 23129.0], [38.8, 23132.0], [38.9, 23136.0], [39.0, 23143.0], [39.1, 23158.0], [39.2, 23162.0], [39.3, 23162.0], [39.4, 23163.0], [39.5, 23170.0], [39.6, 23172.0], [39.7, 23174.0], [39.8, 23178.0], [39.9, 23181.0], [40.0, 23182.0], [40.1, 23182.0], [40.2, 23201.0], [40.3, 23205.0], [40.4, 23207.0], [40.5, 23213.0], [40.6, 23217.0], [40.7, 23221.0], [40.8, 23223.0], [40.9, 23228.0], [41.0, 23232.0], [41.1, 23241.0], [41.2, 23253.0], [41.3, 23255.0], [41.4, 23259.0], [41.5, 23285.0], [41.6, 23300.0], [41.7, 23346.0], [41.8, 23348.0], [41.9, 23352.0], [42.0, 23380.0], [42.1, 23407.0], [42.2, 23410.0], [42.3, 23454.0], [42.4, 23462.0], [42.5, 23463.0], [42.6, 23474.0], [42.7, 23495.0], [42.8, 23496.0], [42.9, 23501.0], [43.0, 23532.0], [43.1, 23538.0], [43.2, 23555.0], [43.3, 23564.0], [43.4, 23597.0], [43.5, 23666.0], [43.6, 23795.0], [43.7, 23960.0], [43.8, 24145.0], [43.9, 24173.0], [44.0, 24232.0], [44.1, 24258.0], [44.2, 24277.0], [44.3, 24287.0], [44.4, 24341.0], [44.5, 24373.0], [44.6, 24374.0], [44.7, 24390.0], [44.8, 24422.0], [44.9, 24472.0], [45.0, 24507.0], [45.1, 24510.0], [45.2, 24573.0], [45.3, 24581.0], [45.4, 24587.0], [45.5, 24589.0], [45.6, 24601.0], [45.7, 24611.0], [45.8, 24634.0], [45.9, 24645.0], [46.0, 24650.0], [46.1, 24660.0], [46.2, 24661.0], [46.3, 24664.0], [46.4, 24669.0], [46.5, 24696.0], [46.6, 24697.0], [46.7, 24704.0], [46.8, 24705.0], [46.9, 24706.0], [47.0, 24707.0], [47.1, 24708.0], [47.2, 24712.0], [47.3, 24716.0], [47.4, 24717.0], [47.5, 24719.0], [47.6, 24725.0], [47.7, 24747.0], [47.8, 24749.0], [47.9, 24792.0], [48.0, 24794.0], [48.1, 24799.0], [48.2, 24841.0], [48.3, 24841.0], [48.4, 24846.0], [48.5, 24846.0], [48.6, 24885.0], [48.7, 24909.0], [48.8, 24913.0], [48.9, 24921.0], [49.0, 24925.0], [49.1, 24930.0], [49.2, 24931.0], [49.3, 24933.0], [49.4, 24934.0], [49.5, 24938.0], [49.6, 24947.0], [49.7, 24950.0], [49.8, 24952.0], [49.9, 24959.0], [50.0, 24964.0], [50.1, 24968.0], [50.2, 24984.0], [50.3, 24995.0], [50.4, 25013.0], [50.5, 25014.0], [50.6, 25017.0], [50.7, 25019.0], [50.8, 25027.0], [50.9, 25044.0], [51.0, 25044.0], [51.1, 25071.0], [51.2, 25116.0], [51.3, 25141.0], [51.4, 25155.0], [51.5, 25158.0], [51.6, 25170.0], [51.7, 25174.0], [51.8, 25182.0], [51.9, 25187.0], [52.0, 25195.0], [52.1, 25203.0], [52.2, 25221.0], [52.3, 25223.0], [52.4, 25224.0], [52.5, 25225.0], [52.6, 25225.0], [52.7, 25249.0], [52.8, 25251.0], [52.9, 25259.0], [53.0, 25270.0], [53.1, 25270.0], [53.2, 25279.0], [53.3, 25286.0], [53.4, 25287.0], [53.5, 25289.0], [53.6, 25291.0], [53.7, 25293.0], [53.8, 25311.0], [53.9, 25324.0], [54.0, 25328.0], [54.1, 25337.0], [54.2, 25346.0], [54.3, 25347.0], [54.4, 25367.0], [54.5, 25375.0], [54.6, 25375.0], [54.7, 25381.0], [54.8, 25383.0], [54.9, 25388.0], [55.0, 25392.0], [55.1, 25392.0], [55.2, 25393.0], [55.3, 25393.0], [55.4, 25394.0], [55.5, 25394.0], [55.6, 25398.0], [55.7, 25401.0], [55.8, 25402.0], [55.9, 25407.0], [56.0, 25429.0], [56.1, 25430.0], [56.2, 25438.0], [56.3, 25441.0], [56.4, 25451.0], [56.5, 25457.0], [56.6, 25462.0], [56.7, 25467.0], [56.8, 25480.0], [56.9, 25496.0], [57.0, 25496.0], [57.1, 25498.0], [57.2, 25507.0], [57.3, 25518.0], [57.4, 25518.0], [57.5, 25520.0], [57.6, 25556.0], [57.7, 25562.0], [57.8, 25580.0], [57.9, 25613.0], [58.0, 25616.0], [58.1, 25651.0], [58.2, 25687.0], [58.3, 25687.0], [58.4, 25710.0], [58.5, 25712.0], [58.6, 25731.0], [58.7, 25754.0], [58.8, 25758.0], [58.9, 25772.0], [59.0, 25794.0], [59.1, 25829.0], [59.2, 25854.0], [59.3, 25857.0], [59.4, 25858.0], [59.5, 25871.0], [59.6, 25889.0], [59.7, 25894.0], [59.8, 25920.0], [59.9, 25941.0], [60.0, 25943.0], [60.1, 25954.0], [60.2, 25966.0], [60.3, 25978.0], [60.4, 25982.0], [60.5, 26010.0], [60.6, 26030.0], [60.7, 26033.0], [60.8, 26037.0], [60.9, 26041.0], [61.0, 26042.0], [61.1, 26046.0], [61.2, 26046.0], [61.3, 26052.0], [61.4, 26064.0], [61.5, 26079.0], [61.6, 26082.0], [61.7, 26084.0], [61.8, 26100.0], [61.9, 26130.0], [62.0, 26138.0], [62.1, 26164.0], [62.2, 26173.0], [62.3, 26183.0], [62.4, 26213.0], [62.5, 26218.0], [62.6, 26234.0], [62.7, 26241.0], [62.8, 26257.0], [62.9, 26278.0], [63.0, 26296.0], [63.1, 26304.0], [63.2, 26314.0], [63.3, 26314.0], [63.4, 26315.0], [63.5, 26328.0], [63.6, 26331.0], [63.7, 26350.0], [63.8, 26351.0], [63.9, 26351.0], [64.0, 26389.0], [64.1, 26458.0], [64.2, 26497.0], [64.3, 26506.0], [64.4, 26514.0], [64.5, 26675.0], [64.6, 26678.0], [64.7, 26747.0], [64.8, 26788.0], [64.9, 26792.0], [65.0, 26797.0], [65.1, 26828.0], [65.2, 26839.0], [65.3, 26851.0], [65.4, 26852.0], [65.5, 26907.0], [65.6, 26918.0], [65.7, 26934.0], [65.8, 26940.0], [65.9, 26941.0], [66.0, 26949.0], [66.1, 26956.0], [66.2, 26958.0], [66.3, 26981.0], [66.4, 26995.0], [66.5, 27002.0], [66.6, 27013.0], [66.7, 27023.0], [66.8, 27024.0], [66.9, 27027.0], [67.0, 27032.0], [67.1, 27063.0], [67.2, 27071.0], [67.3, 27085.0], [67.4, 27086.0], [67.5, 27086.0], [67.6, 27088.0], [67.7, 27092.0], [67.8, 27096.0], [67.9, 27097.0], [68.0, 27098.0], [68.1, 27105.0], [68.2, 27115.0], [68.3, 27122.0], [68.4, 27124.0], [68.5, 27142.0], [68.6, 27146.0], [68.7, 27146.0], [68.8, 27162.0], [68.9, 27165.0], [69.0, 27166.0], [69.1, 27166.0], [69.2, 27169.0], [69.3, 27169.0], [69.4, 27169.0], [69.5, 27170.0], [69.6, 27170.0], [69.7, 27178.0], [69.8, 27179.0], [69.9, 27182.0], [70.0, 27187.0], [70.1, 27191.0], [70.2, 27201.0], [70.3, 27205.0], [70.4, 27209.0], [70.5, 27230.0], [70.6, 27234.0], [70.7, 27234.0], [70.8, 27236.0], [70.9, 27246.0], [71.0, 27249.0], [71.1, 27250.0], [71.2, 27253.0], [71.3, 27254.0], [71.4, 27257.0], [71.5, 27259.0], [71.6, 27273.0], [71.7, 27275.0], [71.8, 27282.0], [71.9, 27296.0], [72.0, 27296.0], [72.1, 27297.0], [72.2, 27298.0], [72.3, 27299.0], [72.4, 27300.0], [72.5, 27302.0], [72.6, 27303.0], [72.7, 27309.0], [72.8, 27310.0], [72.9, 27314.0], [73.0, 27320.0], [73.1, 27324.0], [73.2, 27325.0], [73.3, 27327.0], [73.4, 27327.0], [73.5, 27328.0], [73.6, 27330.0], [73.7, 27330.0], [73.8, 27330.0], [73.9, 27333.0], [74.0, 27335.0], [74.1, 27343.0], [74.2, 27343.0], [74.3, 27348.0], [74.4, 27349.0], [74.5, 27349.0], [74.6, 27349.0], [74.7, 27351.0], [74.8, 27353.0], [74.9, 27355.0], [75.0, 27363.0], [75.1, 27364.0], [75.2, 27364.0], [75.3, 27366.0], [75.4, 27367.0], [75.5, 27368.0], [75.6, 27382.0], [75.7, 27382.0], [75.8, 27385.0], [75.9, 27416.0], [76.0, 27424.0], [76.1, 27427.0], [76.2, 27439.0], [76.3, 27447.0], [76.4, 27451.0], [76.5, 27452.0], [76.6, 27453.0], [76.7, 27458.0], [76.8, 27459.0], [76.9, 27459.0], [77.0, 27461.0], [77.1, 27462.0], [77.2, 27462.0], [77.3, 27468.0], [77.4, 27469.0], [77.5, 27472.0], [77.6, 27474.0], [77.7, 27475.0], [77.8, 27477.0], [77.9, 27478.0], [78.0, 27480.0], [78.1, 27484.0], [78.2, 27485.0], [78.3, 27491.0], [78.4, 27499.0], [78.5, 27502.0], [78.6, 27510.0], [78.7, 27513.0], [78.8, 27515.0], [78.9, 27526.0], [79.0, 27533.0], [79.1, 27544.0], [79.2, 27544.0], [79.3, 27549.0], [79.4, 27550.0], [79.5, 27554.0], [79.6, 27556.0], [79.7, 27557.0], [79.8, 27560.0], [79.9, 27563.0], [80.0, 27568.0], [80.1, 27575.0], [80.2, 27577.0], [80.3, 27577.0], [80.4, 27583.0], [80.5, 27598.0], [80.6, 27603.0], [80.7, 27607.0], [80.8, 27609.0], [80.9, 27609.0], [81.0, 27611.0], [81.1, 27615.0], [81.2, 27619.0], [81.3, 27621.0], [81.4, 27625.0], [81.5, 27636.0], [81.6, 27672.0], [81.7, 27675.0], [81.8, 27689.0], [81.9, 27719.0], [82.0, 27720.0], [82.1, 27723.0], [82.2, 27745.0], [82.3, 27754.0], [82.4, 27770.0], [82.5, 27771.0], [82.6, 27785.0], [82.7, 27787.0], [82.8, 27788.0], [82.9, 27797.0], [83.0, 27801.0], [83.1, 27808.0], [83.2, 27821.0], [83.3, 27823.0], [83.4, 27831.0], [83.5, 27851.0], [83.6, 27854.0], [83.7, 27858.0], [83.8, 27902.0], [83.9, 27912.0], [84.0, 27915.0], [84.1, 27921.0], [84.2, 27936.0], [84.3, 27944.0], [84.4, 27949.0], [84.5, 27957.0], [84.6, 27962.0], [84.7, 27964.0], [84.8, 27965.0], [84.9, 27969.0], [85.0, 27975.0], [85.1, 27979.0], [85.2, 27981.0], [85.3, 27984.0], [85.4, 27985.0], [85.5, 27985.0], [85.6, 28022.0], [85.7, 28024.0], [85.8, 28025.0], [85.9, 28026.0], [86.0, 28034.0], [86.1, 28034.0], [86.2, 28037.0], [86.3, 28038.0], [86.4, 28040.0], [86.5, 28043.0], [86.6, 28043.0], [86.7, 28045.0], [86.8, 28052.0], [86.9, 28053.0], [87.0, 28058.0], [87.1, 28062.0], [87.2, 28085.0], [87.3, 28087.0], [87.4, 28109.0], [87.5, 28115.0], [87.6, 28117.0], [87.7, 28118.0], [87.8, 28121.0], [87.9, 28126.0], [88.0, 28126.0], [88.1, 28130.0], [88.2, 28131.0], [88.3, 28135.0], [88.4, 28137.0], [88.5, 28175.0], [88.6, 28184.0], [88.7, 28191.0], [88.8, 28205.0], [88.9, 28220.0], [89.0, 28227.0], [89.1, 28229.0], [89.2, 28232.0], [89.3, 28238.0], [89.4, 28246.0], [89.5, 28247.0], [89.6, 28252.0], [89.7, 28252.0], [89.8, 28260.0], [89.9, 28268.0], [90.0, 28288.0], [90.1, 28289.0], [90.2, 28291.0], [90.3, 28330.0], [90.4, 28332.0], [90.5, 28343.0], [90.6, 28346.0], [90.7, 28346.0], [90.8, 28391.0], [90.9, 28416.0], [91.0, 28457.0], [91.1, 28505.0], [91.2, 28533.0], [91.3, 28602.0], [91.4, 28605.0], [91.5, 28751.0], [91.6, 28817.0], [91.7, 28904.0], [91.8, 29020.0], [91.9, 29029.0], [92.0, 29034.0], [92.1, 29045.0], [92.2, 29046.0], [92.3, 29084.0], [92.4, 29158.0], [92.5, 29160.0], [92.6, 29220.0], [92.7, 29224.0], [92.8, 29227.0], [92.9, 29229.0], [93.0, 29285.0], [93.1, 29315.0], [93.2, 29335.0], [93.3, 29337.0], [93.4, 29338.0], [93.5, 29340.0], [93.6, 29347.0], [93.7, 29377.0], [93.8, 29482.0], [93.9, 29524.0], [94.0, 29532.0], [94.1, 29577.0], [94.2, 29580.0], [94.3, 29581.0], [94.4, 29582.0], [94.5, 29602.0], [94.6, 29807.0], [94.7, 29865.0], [94.8, 29979.0], [94.9, 30000.0], [95.0, 30020.0], [95.1, 30020.0], [95.2, 30022.0], [95.3, 30023.0], [95.4, 30023.0], [95.5, 30059.0], [95.6, 30094.0], [95.7, 30108.0], [95.8, 30164.0], [95.9, 30207.0], [96.0, 30209.0], [96.1, 30220.0], [96.2, 30320.0], [96.3, 31626.0], [96.4, 31646.0], [96.5, 31837.0], [96.6, 31883.0], [96.7, 32061.0], [96.8, 32141.0], [96.9, 32145.0], [97.0, 32159.0], [97.1, 32172.0], [97.2, 32183.0], [97.3, 32258.0], [97.4, 32260.0], [97.5, 32261.0], [97.6, 32262.0], [97.7, 32264.0], [97.8, 32273.0], [97.9, 32276.0], [98.0, 32285.0], [98.1, 32285.0], [98.2, 32289.0], [98.3, 32310.0], [98.4, 32332.0], [98.5, 32405.0], [98.6, 32434.0], [98.7, 32442.0], [98.8, 32515.0], [98.9, 32625.0], [99.0, 32634.0], [99.1, 32640.0], [99.2, 32680.0], [99.3, 32686.0], [99.4, 32723.0], [99.5, 32751.0], [99.6, 32775.0], [99.7, 32788.0], [99.8, 32823.0], [99.9, 32833.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 6900.0, "maxY": 35.0, "series": [{"data": [[6900.0, 1.0], [8300.0, 1.0], [8600.0, 1.0], [8400.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [8900.0, 2.0], [9400.0, 1.0], [10500.0, 1.0], [10700.0, 3.0], [10900.0, 3.0], [10800.0, 2.0], [11000.0, 4.0], [11200.0, 1.0], [11100.0, 2.0], [11500.0, 4.0], [11600.0, 3.0], [11700.0, 2.0], [11400.0, 1.0], [12000.0, 1.0], [11800.0, 4.0], [12100.0, 4.0], [12200.0, 1.0], [12300.0, 3.0], [12700.0, 2.0], [12400.0, 1.0], [12600.0, 1.0], [12800.0, 1.0], [13000.0, 1.0], [13100.0, 1.0], [13300.0, 1.0], [13500.0, 1.0], [13800.0, 2.0], [13400.0, 3.0], [13600.0, 3.0], [13700.0, 4.0], [13900.0, 2.0], [14000.0, 1.0], [14200.0, 2.0], [14300.0, 1.0], [14100.0, 1.0], [14400.0, 3.0], [14800.0, 2.0], [14600.0, 2.0], [14900.0, 2.0], [15000.0, 1.0], [15300.0, 2.0], [15400.0, 1.0], [15700.0, 3.0], [15900.0, 1.0], [16100.0, 2.0], [16200.0, 1.0], [16800.0, 5.0], [17200.0, 5.0], [16400.0, 2.0], [17000.0, 1.0], [18000.0, 2.0], [17600.0, 3.0], [17800.0, 2.0], [18400.0, 2.0], [18200.0, 1.0], [19200.0, 6.0], [18600.0, 6.0], [18800.0, 4.0], [19000.0, 2.0], [19400.0, 4.0], [19600.0, 6.0], [19800.0, 6.0], [20000.0, 6.0], [20200.0, 2.0], [20400.0, 4.0], [20800.0, 6.0], [21000.0, 6.0], [20600.0, 5.0], [21400.0, 12.0], [21200.0, 3.0], [21600.0, 8.0], [21800.0, 9.0], [22200.0, 5.0], [22000.0, 6.0], [22400.0, 3.0], [22600.0, 9.0], [22800.0, 8.0], [23200.0, 14.0], [23000.0, 8.0], [23400.0, 8.0], [23600.0, 1.0], [24200.0, 4.0], [24400.0, 2.0], [24600.0, 11.0], [24800.0, 5.0], [25200.0, 17.0], [25000.0, 8.0], [25400.0, 15.0], [25800.0, 7.0], [26200.0, 7.0], [26000.0, 13.0], [25600.0, 5.0], [26600.0, 2.0], [26400.0, 2.0], [27400.0, 27.0], [26800.0, 4.0], [27200.0, 22.0], [27000.0, 16.0], [27600.0, 13.0], [27800.0, 8.0], [28000.0, 18.0], [28200.0, 15.0], [28400.0, 2.0], [28600.0, 2.0], [29000.0, 6.0], [29200.0, 5.0], [28800.0, 1.0], [29600.0, 1.0], [29400.0, 1.0], [30000.0, 8.0], [30200.0, 3.0], [29800.0, 2.0], [31600.0, 2.0], [32200.0, 10.0], [31800.0, 2.0], [32000.0, 1.0], [32400.0, 3.0], [32600.0, 5.0], [32800.0, 2.0], [16500.0, 1.0], [16900.0, 2.0], [17300.0, 3.0], [16700.0, 1.0], [17100.0, 1.0], [17700.0, 4.0], [18100.0, 3.0], [18300.0, 2.0], [17900.0, 1.0], [18500.0, 3.0], [18700.0, 3.0], [18900.0, 5.0], [19100.0, 5.0], [19300.0, 4.0], [19500.0, 4.0], [19700.0, 9.0], [19900.0, 3.0], [20100.0, 3.0], [20300.0, 3.0], [21300.0, 7.0], [20900.0, 8.0], [20700.0, 6.0], [20500.0, 3.0], [21500.0, 5.0], [21100.0, 7.0], [22300.0, 6.0], [21700.0, 4.0], [22100.0, 1.0], [21900.0, 3.0], [22500.0, 3.0], [23300.0, 5.0], [22700.0, 11.0], [22900.0, 7.0], [23100.0, 17.0], [23500.0, 6.0], [24300.0, 4.0], [24100.0, 2.0], [24500.0, 6.0], [23900.0, 1.0], [23700.0, 1.0], [24700.0, 15.0], [25100.0, 9.0], [24900.0, 17.0], [25300.0, 19.0], [25500.0, 7.0], [26300.0, 10.0], [26100.0, 6.0], [25900.0, 7.0], [25700.0, 7.0], [26500.0, 2.0], [26700.0, 4.0], [27100.0, 21.0], [27300.0, 35.0], [26900.0, 10.0], [27500.0, 21.0], [27700.0, 11.0], [27900.0, 18.0], [28100.0, 14.0], [28300.0, 6.0], [28500.0, 2.0], [28900.0, 1.0], [29100.0, 2.0], [28700.0, 1.0], [29300.0, 7.0], [29500.0, 6.0], [30100.0, 2.0], [29900.0, 1.0], [30300.0, 1.0], [32100.0, 5.0], [32300.0, 2.0], [32500.0, 1.0], [32700.0, 4.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 988.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 988.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 12.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 28.80357142857144, "minX": 1.7557617E12, "maxY": 529.7966101694919, "series": [{"data": [[1.75576176E12, 28.80357142857144], [1.7557617E12, 529.7966101694919]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576176E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6983.0, "minX": 1.0, "maxY": 32833.0, "series": [{"data": [[2.0, 32680.0], [3.0, 32823.0], [4.0, 32723.0], [5.0, 32686.0], [6.0, 32788.0], [7.0, 30023.0], [8.0, 32775.0], [9.0, 32640.0], [10.0, 32751.0], [11.0, 32515.0], [12.0, 32625.0], [13.0, 30020.0], [14.0, 29865.0], [15.0, 32634.0], [16.0, 30023.0], [17.0, 32405.0], [18.0, 30020.0], [19.0, 32332.0], [20.0, 30022.0], [21.0, 32442.0], [22.0, 32434.0], [23.0, 32310.0], [24.0, 32285.0], [25.0, 32285.0], [26.0, 32172.0], [27.0, 32289.0], [28.0, 32183.0], [29.0, 32276.0], [31.0, 32207.0], [35.0, 32117.5], [38.0, 31226.333333333332], [40.0, 32201.5], [43.0, 29532.0], [42.0, 32209.5], [45.0, 31626.0], [44.0, 31646.0], [47.0, 30220.0], [46.0, 30320.0], [49.0, 30059.0], [48.0, 29807.0], [51.0, 30209.0], [50.0, 29979.0], [53.0, 27459.0], [55.0, 30185.5], [57.0, 30000.0], [56.0, 30101.0], [59.0, 29489.5], [61.0, 29524.0], [63.0, 28029.0], [62.0, 29580.0], [66.0, 29577.0], [65.0, 29532.0], [69.0, 26934.0], [68.0, 28219.0], [75.0, 26933.0], [73.0, 29285.0], [72.0, 29131.666666666668], [77.0, 29225.5], [83.0, 29209.0], [82.0, 29338.0], [81.0, 29340.0], [87.0, 29220.0], [86.0, 29020.0], [85.0, 28751.0], [84.0, 27689.0], [90.0, 26675.0], [89.0, 29160.0], [88.0, 29029.0], [93.0, 28602.0], [92.0, 28605.0], [96.0, 28456.0], [103.0, 28457.0], [100.0, 27777.0], [107.0, 28332.0], [106.0, 28260.0], [104.0, 27573.666666666668], [111.0, 28291.0], [115.0, 28227.0], [114.0, 28253.666666666668], [112.0, 28230.5], [119.0, 28346.0], [117.0, 28210.0], [116.0, 28220.0], [122.0, 28330.0], [126.0, 27612.75], [125.0, 26839.0], [135.0, 28191.0], [134.0, 28184.0], [133.0, 28040.0], [132.0, 27985.0], [131.0, 25754.0], [130.0, 28147.5], [129.0, 28247.0], [128.0, 28087.0], [143.0, 27720.0], [142.0, 28142.0], [139.0, 27930.0], [137.0, 28252.0], [136.0, 28135.0], [151.0, 26654.0], [149.0, 28115.0], [148.0, 27843.0], [147.0, 26757.5], [144.0, 28246.0], [154.0, 26814.0], [153.0, 26234.0], [164.0, 25324.0], [163.0, 27964.0], [162.0, 27984.0], [161.0, 26554.857142857145], [175.0, 26496.666666666668], [172.0, 26589.5], [170.0, 27596.6], [169.0, 25388.0], [183.0, 28045.0], [182.0, 27340.75], [178.0, 26569.5], [176.0, 27785.0], [189.0, 25480.0], [188.0, 26606.5], [186.0, 27675.0], [185.0, 28034.0], [198.0, 27858.0], [194.0, 27515.0], [193.0, 27765.0], [192.0, 26651.0], [207.0, 27091.833333333332], [205.0, 27077.333333333332], [204.0, 27986.333333333332], [214.0, 28026.0], [213.0, 28024.0], [212.0, 27912.0], [211.0, 28038.0], [210.0, 27872.0], [223.0, 28037.0], [219.0, 27728.0], [218.0, 25758.0], [216.0, 27649.5], [231.0, 27745.0], [230.0, 26366.0], [228.0, 26703.0], [226.0, 27519.333333333332], [224.0, 27975.0], [234.0, 27611.0], [233.0, 27517.5], [247.0, 27854.0], [246.0, 27296.222222222223], [240.0, 27071.0], [253.0, 24933.0], [252.0, 24841.0], [251.0, 27619.0], [250.0, 26286.5], [248.0, 27621.0], [270.0, 27348.0], [269.0, 27272.666666666668], [267.0, 27549.0], [265.0, 27025.333333333332], [259.0, 27607.0], [258.0, 26401.5], [256.0, 27392.666666666668], [286.0, 27353.0], [283.0, 25562.0], [282.0, 27356.5], [280.0, 27269.333333333332], [277.0, 27071.0], [276.0, 26402.5], [274.0, 26524.0], [272.0, 27537.5], [291.0, 25287.0], [301.0, 27239.5], [300.0, 25182.0], [298.0, 25467.0], [297.0, 27170.0], [296.0, 27359.666666666668], [293.0, 26380.5], [288.0, 27339.5], [290.0, 27351.0], [289.0, 27096.0], [315.0, 27451.0], [314.0, 27320.0], [313.0, 25687.0], [311.0, 27092.0], [310.0, 26540.5], [309.0, 27491.0], [307.0, 26686.5], [305.0, 27302.5], [333.0, 27296.0], [335.0, 27464.5], [332.0, 27364.0], [323.0, 27097.0], [322.0, 27480.0], [320.0, 27472.2], [331.0, 27364.0], [330.0, 27474.0], [329.0, 25392.0], [328.0, 27478.0], [327.0, 27367.0], [326.0, 27480.0], [325.0, 27485.0], [324.0, 27257.0], [351.0, 27138.0], [349.0, 26658.5], [345.0, 24885.0], [344.0, 26918.0], [343.0, 27462.0], [342.0, 27308.666666666668], [341.0, 27126.5], [340.0, 27394.5], [367.0, 26787.0], [364.0, 25141.0], [362.0, 27254.0], [361.0, 26995.0], [360.0, 26636.666666666668], [354.0, 25889.0], [353.0, 27096.0], [380.0, 25888.0], [382.0, 24707.0], [383.0, 26788.0], [381.0, 27328.0], [377.0, 27162.0], [376.0, 27146.0], [375.0, 26626.666666666668], [373.0, 25999.5], [370.0, 27349.0], [369.0, 27249.0], [368.0, 26594.5], [398.0, 27105.0], [399.0, 27283.0], [396.0, 24573.0], [387.0, 27325.0], [386.0, 27343.0], [385.0, 25758.5], [395.0, 27178.0], [394.0, 27188.5], [392.0, 27201.0], [391.0, 27205.0], [390.0, 27324.0], [389.0, 26132.5], [414.0, 27169.0], [412.0, 27024.0], [411.0, 26232.5], [409.0, 26400.25], [405.0, 26599.5], [401.0, 27310.0], [400.0, 26851.0], [429.0, 26797.0], [431.0, 26044.0], [428.0, 26690.666666666668], [425.0, 25375.0], [424.0, 27195.333333333332], [421.0, 27298.5], [420.0, 27237.5], [419.0, 27169.0], [417.0, 26390.333333333332], [446.0, 24841.0], [445.0, 26260.11111111111], [444.0, 26184.0], [442.0, 26241.0], [432.0, 26458.0], [461.0, 25829.0], [462.0, 25966.0], [460.0, 26351.0], [459.0, 25380.0], [457.0, 25221.0], [456.0, 25954.0], [455.0, 25454.5], [453.0, 26180.5], [451.0, 26181.666666666668], [448.0, 25277.5], [477.0, 25857.0], [479.0, 25554.0], [476.0, 26082.0], [475.0, 26079.0], [474.0, 25815.25], [473.0, 26064.0], [469.0, 25726.0], [466.0, 25854.0], [465.0, 24799.0], [464.0, 26006.0], [494.0, 25158.0], [493.0, 25348.0], [491.0, 25017.0], [490.0, 25337.0], [489.0, 25225.0], [488.0, 22735.0], [487.0, 24504.666666666668], [484.0, 25160.0], [482.0, 25580.0], [481.0, 26278.0], [480.0, 26331.0], [510.0, 25049.0], [508.0, 24135.25], [507.0, 25224.0], [502.0, 25027.0], [501.0, 25177.0], [499.0, 22756.0], [497.0, 25225.0], [496.0, 25222.5], [540.0, 24796.5], [538.0, 25142.8], [518.0, 24381.5], [516.0, 23253.0], [515.0, 25019.0], [514.0, 25394.0], [533.0, 25270.0], [532.0, 22636.0], [531.0, 24984.0], [530.0, 24322.0], [528.0, 24667.5], [526.0, 24995.0], [525.0, 24950.0], [524.0, 24601.25], [522.0, 25259.0], [521.0, 24938.5], [520.0, 25283.0], [563.0, 22902.666666666668], [574.0, 24717.0], [571.0, 23292.5], [569.0, 24671.666666666668], [551.0, 22639.0], [550.0, 24481.333333333332], [547.0, 24705.0], [546.0, 22570.0], [545.0, 24603.0], [557.0, 23596.5], [555.0, 24587.0], [554.0, 24581.0], [553.0, 23597.0], [552.0, 24712.0], [566.0, 24704.0], [565.0, 24145.0], [564.0, 24258.0], [562.0, 24518.5], [561.0, 24589.0], [595.0, 23462.0], [607.0, 22631.0], [605.0, 22078.0], [600.0, 23538.0], [582.0, 24645.0], [581.0, 24422.0], [580.0, 24173.0], [579.0, 24145.333333333332], [578.0, 21913.0], [599.0, 23136.0], [598.0, 20991.0], [597.0, 22228.5], [594.0, 22727.666666666668], [591.0, 23181.0], [590.0, 23459.666666666668], [587.0, 23158.0], [586.0, 24333.5], [584.0, 22815.0], [624.0, 22587.714285714283], [633.0, 20638.0], [631.0, 22860.0], [630.0, 22127.5], [626.0, 23264.0], [622.0, 23285.0], [621.0, 22933.0], [615.0, 20689.0], [614.0, 20951.5], [612.0, 23407.0], [611.0, 23149.5], [610.0, 23259.0], [608.0, 23454.0], [657.0, 23221.0], [670.0, 23080.0], [669.0, 22932.0], [666.0, 22524.5], [664.0, 22967.0], [655.0, 23223.0], [641.0, 22859.0], [640.0, 22527.625000000004], [647.0, 22460.4], [642.0, 23178.0], [654.0, 21103.0], [653.0, 22276.666666666668], [650.0, 23241.0], [649.0, 22923.0], [661.0, 22740.0], [659.0, 22742.0], [658.0, 23112.0], [656.0, 22983.0], [701.0, 22718.0], [702.0, 21506.2], [700.0, 21708.666666666668], [697.0, 22366.0], [694.0, 21121.0], [691.0, 22249.0], [690.0, 22308.0], [689.0, 21945.5], [681.0, 22971.0], [679.0, 22862.0], [678.0, 22510.0], [675.0, 23210.0], [674.0, 23105.5], [673.0, 22694.0], [680.0, 20853.0], [734.0, 19681.0], [735.0, 21738.0], [731.0, 20385.0], [710.0, 21852.666666666664], [704.0, 22496.0], [725.0, 21997.5], [723.0, 21644.0], [722.0, 21936.0], [718.0, 21026.25], [716.0, 21781.0], [715.0, 21124.333333333332], [754.0, 20462.666666666668], [767.0, 21445.0], [766.0, 20787.666666666668], [763.0, 21736.25], [743.0, 21591.0], [742.0, 20498.6], [739.0, 21591.0], [737.0, 21840.0], [736.0, 20775.5], [759.0, 19185.0], [758.0, 21438.666666666668], [756.0, 21488.0], [752.0, 19261.0], [750.0, 21329.0], [749.0, 20501.4], [744.0, 21691.0], [795.0, 20429.333333333332], [799.0, 20466.5], [797.0, 19606.0], [796.0, 19778.0], [792.0, 20242.6], [775.0, 21246.5], [771.0, 21163.0], [770.0, 20695.333333333332], [787.0, 20939.11111111111], [778.0, 21219.0], [777.0, 21260.0], [776.0, 20522.0], [828.0, 19730.0], [831.0, 19862.333333333332], [827.0, 19941.0], [825.0, 18945.333333333332], [822.0, 19227.0], [820.0, 20086.0], [819.0, 18816.0], [818.0, 20262.5], [815.0, 20171.375], [801.0, 20893.5], [807.0, 20920.0], [806.0, 20647.0], [851.0, 18995.0], [857.0, 18928.0], [856.0, 18966.0], [837.0, 19412.2], [832.0, 20020.0], [855.0, 18531.0], [854.0, 18891.0], [852.0, 19192.0], [849.0, 19169.0], [848.0, 19315.0], [847.0, 18703.666666666668], [844.0, 18385.0], [843.0, 19575.0], [842.0, 19708.0], [841.0, 19656.0], [840.0, 19825.0], [893.0, 17782.0], [895.0, 17331.0], [881.0, 16800.0], [880.0, 17185.333333333332], [884.0, 17528.0], [883.0, 18630.0], [892.0, 16156.0], [891.0, 17717.0], [890.0, 16462.0], [889.0, 18122.0], [888.0, 18080.5], [866.0, 18654.0], [865.0, 18688.0], [864.0, 18073.142857142855], [877.0, 18364.666666666668], [874.0, 17840.0], [872.0, 18398.666666666668], [887.0, 16494.0], [885.0, 18151.0], [922.0, 14353.0], [926.0, 13919.0], [927.0, 13770.0], [914.0, 14418.0], [913.0, 15778.0], [916.0, 14691.0], [915.0, 15793.0], [925.0, 14831.0], [924.0, 14935.0], [923.0, 14855.0], [920.0, 14773.5], [903.0, 16871.0], [902.0, 17065.5], [900.0, 16888.0], [899.0, 16947.0], [898.0, 17210.0], [897.0, 17530.5], [911.0, 15567.333333333334], [908.0, 14958.0], [907.0, 16242.0], [906.0, 16587.0], [905.0, 15387.0], [904.0, 16882.0], [918.0, 15341.0], [917.0, 14216.0], [956.0, 11692.0], [959.0, 12304.0], [946.0, 13824.0], [945.0, 13592.0], [958.0, 12374.0], [957.0, 12752.0], [955.0, 12842.0], [954.0, 13095.0], [953.0, 13102.0], [952.0, 11974.0], [942.0, 12617.0], [930.0, 13755.666666666666], [932.0, 14314.0], [931.0, 13488.0], [935.0, 14249.5], [933.0, 14255.0], [941.0, 13742.0], [940.0, 13784.0], [939.0, 13474.0], [936.0, 13910.0], [950.0, 12608.666666666666], [947.0, 12119.0], [989.0, 10743.0], [980.0, 11585.0], [991.0, 10736.0], [976.0, 11593.0], [988.0, 10865.0], [986.0, 10979.5], [984.0, 11019.0], [966.0, 12163.0], [965.0, 12236.0], [964.0, 12109.0], [963.0, 11643.666666666666], [960.0, 11096.0], [975.0, 11679.0], [973.0, 11663.666666666666], [970.0, 10956.0], [969.0, 11221.5], [968.0, 10794.0], [983.0, 11278.0], [982.0, 11131.0], [981.0, 11547.0], [978.0, 11844.0], [977.0, 11562.0], [1000.0, 6983.0], [999.0, 8460.5], [997.0, 8449.0], [996.0, 8823.0], [995.0, 9018.0], [994.0, 8930.0], [992.0, 9477.0], [1.0, 32833.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}, {"data": [[501.73899999999986, 23687.45299999996]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 851.4, "minX": 1.7557617E12, "maxY": 18266.4, "series": [{"data": [[1.75576176E12, 1071.2], [1.7557617E12, 13924.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75576176E12, 851.4], [1.7557617E12, 18266.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576176E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 23223.282838983007, "minX": 1.7557617E12, "maxY": 31512.035714285714, "series": [{"data": [[1.75576176E12, 31512.035714285714], [1.7557617E12, 23223.282838983007]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576176E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 23223.253177966115, "minX": 1.7557617E12, "maxY": 24768.67857142857, "series": [{"data": [[1.75576176E12, 24768.67857142857], [1.7557617E12, 23223.253177966115]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576176E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1525.8697033898302, "minX": 1.7557617E12, "maxY": 2268.482142857142, "series": [{"data": [[1.75576176E12, 2268.482142857142], [1.7557617E12, 1525.8697033898302]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576176E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6983.0, "minX": 1.7557617E12, "maxY": 32833.0, "series": [{"data": [[1.75576176E12, 32833.0], [1.7557617E12, 30000.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75576176E12, 32704.5], [1.7557617E12, 27977.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75576176E12, 32833.0], [1.7557617E12, 29343.85]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75576176E12, 32778.75], [1.7557617E12, 28258.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75576176E12, 27459.0], [1.7557617E12, 6983.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75576176E12, 32177.5], [1.7557617E12, 24714.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576176E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 6983.0, "minX": 1.0, "maxY": 32273.0, "series": [{"data": [[2.0, 21268.5], [33.0, 19143.0], [32.0, 29228.0], [10.0, 15880.0], [43.0, 32273.0], [11.0, 30108.0], [12.0, 14843.0], [48.0, 24508.5], [13.0, 17265.0], [53.0, 21936.0], [14.0, 13639.0], [57.0, 25375.0], [56.0, 28228.0], [1.0, 6983.0], [4.0, 8869.0], [16.0, 12136.0], [280.0, 27317.0], [75.0, 21157.0], [20.0, 11385.5], [92.0, 23100.0], [25.0, 19894.0], [26.0, 18136.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[43.0, 32107.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 280.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 32273.0, "series": [{"data": [[2.0, 21268.5], [33.0, 19143.0], [32.0, 29228.0], [10.0, 15880.0], [43.0, 32273.0], [11.0, 30108.0], [12.0, 14843.0], [48.0, 24508.5], [13.0, 17265.0], [53.0, 21936.0], [14.0, 13638.5], [57.0, 25375.0], [56.0, 28228.0], [1.0, 6978.0], [4.0, 8869.0], [16.0, 12136.0], [280.0, 27317.0], [75.0, 21157.0], [20.0, 11385.5], [92.0, 23100.0], [25.0, 19894.0], [26.0, 18136.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[43.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 280.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557617E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557617E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557617E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.7557617E12, "maxY": 15.733333333333333, "series": [{"data": [[1.75576176E12, 0.7333333333333333], [1.7557617E12, 15.733333333333333]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.75576176E12, 0.2]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75576176E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.7557617E12, "maxY": 15.733333333333333, "series": [{"data": [[1.75576176E12, 0.7333333333333333], [1.7557617E12, 15.733333333333333]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-success", "isController": false}, {"data": [[1.75576176E12, 0.2]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576176E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.2, "minX": 1.7557617E12, "maxY": 15.733333333333333, "series": [{"data": [[1.75576176E12, 0.7333333333333333], [1.7557617E12, 15.733333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75576176E12, 0.2]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75576176E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

