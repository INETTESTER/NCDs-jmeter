/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 695.0, "minX": 0.0, "maxY": 7147.0, "series": [{"data": [[0.0, 695.0], [0.1, 725.0], [0.2, 760.0], [0.3, 760.0], [0.4, 799.0], [0.5, 800.0], [0.6, 800.0], [0.7, 809.0], [0.8, 821.0], [0.9, 822.0], [1.0, 849.0], [1.1, 868.0], [1.2, 891.0], [1.3, 897.0], [1.4, 897.0], [1.5, 898.0], [1.6, 1022.0], [1.7, 1089.0], [1.8, 1148.0], [1.9, 1172.0], [2.0, 1178.0], [2.1, 1204.0], [2.2, 1252.0], [2.3, 1259.0], [2.4, 1261.0], [2.5, 1291.0], [2.6, 1315.0], [2.7, 1359.0], [2.8, 1364.0], [2.9, 1370.0], [3.0, 1379.0], [3.1, 1451.0], [3.2, 1455.0], [3.3, 1462.0], [3.4, 1468.0], [3.5, 1481.0], [3.6, 1485.0], [3.7, 1504.0], [3.8, 1504.0], [3.9, 1522.0], [4.0, 1642.0], [4.1, 1676.0], [4.2, 1699.0], [4.3, 1702.0], [4.4, 1724.0], [4.5, 1761.0], [4.6, 1764.0], [4.7, 1769.0], [4.8, 1776.0], [4.9, 1779.0], [5.0, 1780.0], [5.1, 1784.0], [5.2, 1828.0], [5.3, 1881.0], [5.4, 1895.0], [5.5, 1962.0], [5.6, 1978.0], [5.7, 1979.0], [5.8, 1986.0], [5.9, 2035.0], [6.0, 2042.0], [6.1, 2052.0], [6.2, 2054.0], [6.3, 2055.0], [6.4, 2055.0], [6.5, 2084.0], [6.6, 2154.0], [6.7, 2239.0], [6.8, 2314.0], [6.9, 2346.0], [7.0, 2407.0], [7.1, 2412.0], [7.2, 2412.0], [7.3, 2413.0], [7.4, 2430.0], [7.5, 2451.0], [7.6, 2475.0], [7.7, 2486.0], [7.8, 2487.0], [7.9, 2494.0], [8.0, 2561.0], [8.1, 2646.0], [8.2, 2649.0], [8.3, 2670.0], [8.4, 2786.0], [8.5, 2813.0], [8.6, 2820.0], [8.7, 2866.0], [8.8, 2906.0], [8.9, 2964.0], [9.0, 2993.0], [9.1, 3042.0], [9.2, 3091.0], [9.3, 3111.0], [9.4, 3136.0], [9.5, 3161.0], [9.6, 3166.0], [9.7, 3172.0], [9.8, 3180.0], [9.9, 3202.0], [10.0, 3205.0], [10.1, 3206.0], [10.2, 3209.0], [10.3, 3217.0], [10.4, 3222.0], [10.5, 3229.0], [10.6, 3251.0], [10.7, 3266.0], [10.8, 3283.0], [10.9, 3286.0], [11.0, 3291.0], [11.1, 3293.0], [11.2, 3299.0], [11.3, 3322.0], [11.4, 3337.0], [11.5, 3341.0], [11.6, 3353.0], [11.7, 3363.0], [11.8, 3371.0], [11.9, 3373.0], [12.0, 3376.0], [12.1, 3434.0], [12.2, 3516.0], [12.3, 3516.0], [12.4, 3550.0], [12.5, 3556.0], [12.6, 3575.0], [12.7, 3628.0], [12.8, 3643.0], [12.9, 3673.0], [13.0, 3683.0], [13.1, 3714.0], [13.2, 3722.0], [13.3, 3732.0], [13.4, 3742.0], [13.5, 3766.0], [13.6, 3770.0], [13.7, 3771.0], [13.8, 3815.0], [13.9, 3817.0], [14.0, 3828.0], [14.1, 3836.0], [14.2, 3846.0], [14.3, 3849.0], [14.4, 3858.0], [14.5, 3861.0], [14.6, 3862.0], [14.7, 3879.0], [14.8, 3880.0], [14.9, 3893.0], [15.0, 3895.0], [15.1, 3904.0], [15.2, 3905.0], [15.3, 3909.0], [15.4, 3912.0], [15.5, 3913.0], [15.6, 3919.0], [15.7, 3920.0], [15.8, 3953.0], [15.9, 3955.0], [16.0, 3961.0], [16.1, 3969.0], [16.2, 3984.0], [16.3, 3995.0], [16.4, 4005.0], [16.5, 4013.0], [16.6, 4023.0], [16.7, 4024.0], [16.8, 4027.0], [16.9, 4036.0], [17.0, 4041.0], [17.1, 4044.0], [17.2, 4065.0], [17.3, 4076.0], [17.4, 4086.0], [17.5, 4124.0], [17.6, 4135.0], [17.7, 4152.0], [17.8, 4162.0], [17.9, 4166.0], [18.0, 4205.0], [18.1, 4212.0], [18.2, 4213.0], [18.3, 4236.0], [18.4, 4236.0], [18.5, 4252.0], [18.6, 4292.0], [18.7, 4347.0], [18.8, 4459.0], [18.9, 4460.0], [19.0, 4464.0], [19.1, 4511.0], [19.2, 4511.0], [19.3, 4519.0], [19.4, 4572.0], [19.5, 4623.0], [19.6, 4642.0], [19.7, 4655.0], [19.8, 4660.0], [19.9, 4671.0], [20.0, 4676.0], [20.1, 4730.0], [20.2, 4755.0], [20.3, 4815.0], [20.4, 4823.0], [20.5, 4837.0], [20.6, 4838.0], [20.7, 4873.0], [20.8, 4877.0], [20.9, 4880.0], [21.0, 4889.0], [21.1, 4901.0], [21.2, 4905.0], [21.3, 4906.0], [21.4, 4913.0], [21.5, 4915.0], [21.6, 4918.0], [21.7, 4927.0], [21.8, 4932.0], [21.9, 4939.0], [22.0, 4954.0], [22.1, 4982.0], [22.2, 4992.0], [22.3, 5003.0], [22.4, 5004.0], [22.5, 5005.0], [22.6, 5010.0], [22.7, 5013.0], [22.8, 5024.0], [22.9, 5029.0], [23.0, 5031.0], [23.1, 5040.0], [23.2, 5040.0], [23.3, 5043.0], [23.4, 5046.0], [23.5, 5048.0], [23.6, 5058.0], [23.7, 5060.0], [23.8, 5062.0], [23.9, 5062.0], [24.0, 5068.0], [24.1, 5071.0], [24.2, 5097.0], [24.3, 5102.0], [24.4, 5114.0], [24.5, 5127.0], [24.6, 5136.0], [24.7, 5138.0], [24.8, 5139.0], [24.9, 5144.0], [25.0, 5146.0], [25.1, 5147.0], [25.2, 5148.0], [25.3, 5163.0], [25.4, 5166.0], [25.5, 5167.0], [25.6, 5172.0], [25.7, 5177.0], [25.8, 5182.0], [25.9, 5182.0], [26.0, 5183.0], [26.1, 5198.0], [26.2, 5207.0], [26.3, 5217.0], [26.4, 5235.0], [26.5, 5240.0], [26.6, 5242.0], [26.7, 5244.0], [26.8, 5248.0], [26.9, 5257.0], [27.0, 5258.0], [27.1, 5264.0], [27.2, 5265.0], [27.3, 5271.0], [27.4, 5283.0], [27.5, 5290.0], [27.6, 5290.0], [27.7, 5292.0], [27.8, 5305.0], [27.9, 5306.0], [28.0, 5314.0], [28.1, 5314.0], [28.2, 5326.0], [28.3, 5333.0], [28.4, 5336.0], [28.5, 5341.0], [28.6, 5341.0], [28.7, 5347.0], [28.8, 5360.0], [28.9, 5368.0], [29.0, 5380.0], [29.1, 5387.0], [29.2, 5393.0], [29.3, 5405.0], [29.4, 5406.0], [29.5, 5406.0], [29.6, 5411.0], [29.7, 5411.0], [29.8, 5418.0], [29.9, 5423.0], [30.0, 5424.0], [30.1, 5426.0], [30.2, 5431.0], [30.3, 5432.0], [30.4, 5446.0], [30.5, 5452.0], [30.6, 5456.0], [30.7, 5463.0], [30.8, 5464.0], [30.9, 5467.0], [31.0, 5476.0], [31.1, 5477.0], [31.2, 5480.0], [31.3, 5486.0], [31.4, 5487.0], [31.5, 5488.0], [31.6, 5495.0], [31.7, 5495.0], [31.8, 5501.0], [31.9, 5510.0], [32.0, 5517.0], [32.1, 5519.0], [32.2, 5520.0], [32.3, 5521.0], [32.4, 5522.0], [32.5, 5524.0], [32.6, 5528.0], [32.7, 5529.0], [32.8, 5537.0], [32.9, 5542.0], [33.0, 5543.0], [33.1, 5547.0], [33.2, 5553.0], [33.3, 5553.0], [33.4, 5554.0], [33.5, 5557.0], [33.6, 5557.0], [33.7, 5557.0], [33.8, 5562.0], [33.9, 5568.0], [34.0, 5569.0], [34.1, 5583.0], [34.2, 5587.0], [34.3, 5587.0], [34.4, 5590.0], [34.5, 5595.0], [34.6, 5600.0], [34.7, 5601.0], [34.8, 5608.0], [34.9, 5609.0], [35.0, 5612.0], [35.1, 5625.0], [35.2, 5632.0], [35.3, 5634.0], [35.4, 5635.0], [35.5, 5637.0], [35.6, 5637.0], [35.7, 5641.0], [35.8, 5651.0], [35.9, 5656.0], [36.0, 5669.0], [36.1, 5672.0], [36.2, 5674.0], [36.3, 5675.0], [36.4, 5678.0], [36.5, 5679.0], [36.6, 5680.0], [36.7, 5683.0], [36.8, 5686.0], [36.9, 5688.0], [37.0, 5700.0], [37.1, 5705.0], [37.2, 5708.0], [37.3, 5710.0], [37.4, 5711.0], [37.5, 5713.0], [37.6, 5714.0], [37.7, 5718.0], [37.8, 5720.0], [37.9, 5722.0], [38.0, 5727.0], [38.1, 5730.0], [38.2, 5730.0], [38.3, 5731.0], [38.4, 5736.0], [38.5, 5739.0], [38.6, 5740.0], [38.7, 5742.0], [38.8, 5745.0], [38.9, 5747.0], [39.0, 5748.0], [39.1, 5749.0], [39.2, 5749.0], [39.3, 5751.0], [39.4, 5754.0], [39.5, 5757.0], [39.6, 5758.0], [39.7, 5758.0], [39.8, 5765.0], [39.9, 5767.0], [40.0, 5768.0], [40.1, 5774.0], [40.2, 5778.0], [40.3, 5783.0], [40.4, 5786.0], [40.5, 5789.0], [40.6, 5798.0], [40.7, 5800.0], [40.8, 5802.0], [40.9, 5803.0], [41.0, 5804.0], [41.1, 5807.0], [41.2, 5809.0], [41.3, 5813.0], [41.4, 5813.0], [41.5, 5813.0], [41.6, 5815.0], [41.7, 5817.0], [41.8, 5818.0], [41.9, 5819.0], [42.0, 5822.0], [42.1, 5829.0], [42.2, 5829.0], [42.3, 5832.0], [42.4, 5833.0], [42.5, 5834.0], [42.6, 5836.0], [42.7, 5838.0], [42.8, 5842.0], [42.9, 5846.0], [43.0, 5849.0], [43.1, 5850.0], [43.2, 5852.0], [43.3, 5856.0], [43.4, 5857.0], [43.5, 5867.0], [43.6, 5871.0], [43.7, 5872.0], [43.8, 5877.0], [43.9, 5884.0], [44.0, 5884.0], [44.1, 5886.0], [44.2, 5888.0], [44.3, 5888.0], [44.4, 5892.0], [44.5, 5894.0], [44.6, 5895.0], [44.7, 5900.0], [44.8, 5907.0], [44.9, 5907.0], [45.0, 5916.0], [45.1, 5917.0], [45.2, 5921.0], [45.3, 5923.0], [45.4, 5930.0], [45.5, 5932.0], [45.6, 5933.0], [45.7, 5936.0], [45.8, 5938.0], [45.9, 5940.0], [46.0, 5940.0], [46.1, 5942.0], [46.2, 5945.0], [46.3, 5949.0], [46.4, 5950.0], [46.5, 5951.0], [46.6, 5956.0], [46.7, 5957.0], [46.8, 5958.0], [46.9, 5962.0], [47.0, 5968.0], [47.1, 5969.0], [47.2, 5971.0], [47.3, 5972.0], [47.4, 5974.0], [47.5, 5976.0], [47.6, 5977.0], [47.7, 5978.0], [47.8, 5985.0], [47.9, 5987.0], [48.0, 5987.0], [48.1, 5988.0], [48.2, 5998.0], [48.3, 6001.0], [48.4, 6008.0], [48.5, 6013.0], [48.6, 6014.0], [48.7, 6015.0], [48.8, 6016.0], [48.9, 6016.0], [49.0, 6016.0], [49.1, 6022.0], [49.2, 6024.0], [49.3, 6031.0], [49.4, 6032.0], [49.5, 6034.0], [49.6, 6034.0], [49.7, 6035.0], [49.8, 6039.0], [49.9, 6039.0], [50.0, 6040.0], [50.1, 6042.0], [50.2, 6044.0], [50.3, 6044.0], [50.4, 6044.0], [50.5, 6046.0], [50.6, 6049.0], [50.7, 6049.0], [50.8, 6050.0], [50.9, 6051.0], [51.0, 6054.0], [51.1, 6054.0], [51.2, 6057.0], [51.3, 6057.0], [51.4, 6057.0], [51.5, 6063.0], [51.6, 6064.0], [51.7, 6065.0], [51.8, 6065.0], [51.9, 6067.0], [52.0, 6070.0], [52.1, 6071.0], [52.2, 6072.0], [52.3, 6075.0], [52.4, 6077.0], [52.5, 6077.0], [52.6, 6079.0], [52.7, 6084.0], [52.8, 6089.0], [52.9, 6091.0], [53.0, 6092.0], [53.1, 6094.0], [53.2, 6095.0], [53.3, 6096.0], [53.4, 6100.0], [53.5, 6100.0], [53.6, 6100.0], [53.7, 6100.0], [53.8, 6102.0], [53.9, 6105.0], [54.0, 6108.0], [54.1, 6108.0], [54.2, 6114.0], [54.3, 6115.0], [54.4, 6115.0], [54.5, 6115.0], [54.6, 6116.0], [54.7, 6117.0], [54.8, 6120.0], [54.9, 6120.0], [55.0, 6121.0], [55.1, 6121.0], [55.2, 6121.0], [55.3, 6124.0], [55.4, 6125.0], [55.5, 6126.0], [55.6, 6128.0], [55.7, 6130.0], [55.8, 6131.0], [55.9, 6132.0], [56.0, 6134.0], [56.1, 6136.0], [56.2, 6136.0], [56.3, 6140.0], [56.4, 6142.0], [56.5, 6151.0], [56.6, 6151.0], [56.7, 6152.0], [56.8, 6156.0], [56.9, 6158.0], [57.0, 6160.0], [57.1, 6160.0], [57.2, 6163.0], [57.3, 6165.0], [57.4, 6165.0], [57.5, 6167.0], [57.6, 6168.0], [57.7, 6170.0], [57.8, 6171.0], [57.9, 6178.0], [58.0, 6178.0], [58.1, 6182.0], [58.2, 6184.0], [58.3, 6184.0], [58.4, 6185.0], [58.5, 6187.0], [58.6, 6193.0], [58.7, 6194.0], [58.8, 6196.0], [58.9, 6196.0], [59.0, 6197.0], [59.1, 6197.0], [59.2, 6198.0], [59.3, 6198.0], [59.4, 6206.0], [59.5, 6207.0], [59.6, 6212.0], [59.7, 6215.0], [59.8, 6216.0], [59.9, 6218.0], [60.0, 6221.0], [60.1, 6222.0], [60.2, 6224.0], [60.3, 6225.0], [60.4, 6227.0], [60.5, 6231.0], [60.6, 6231.0], [60.7, 6232.0], [60.8, 6233.0], [60.9, 6235.0], [61.0, 6236.0], [61.1, 6237.0], [61.2, 6238.0], [61.3, 6238.0], [61.4, 6242.0], [61.5, 6242.0], [61.6, 6248.0], [61.7, 6248.0], [61.8, 6253.0], [61.9, 6258.0], [62.0, 6258.0], [62.1, 6261.0], [62.2, 6261.0], [62.3, 6263.0], [62.4, 6265.0], [62.5, 6266.0], [62.6, 6268.0], [62.7, 6269.0], [62.8, 6271.0], [62.9, 6273.0], [63.0, 6278.0], [63.1, 6281.0], [63.2, 6283.0], [63.3, 6283.0], [63.4, 6287.0], [63.5, 6287.0], [63.6, 6290.0], [63.7, 6291.0], [63.8, 6294.0], [63.9, 6294.0], [64.0, 6297.0], [64.1, 6298.0], [64.2, 6298.0], [64.3, 6299.0], [64.4, 6301.0], [64.5, 6302.0], [64.6, 6304.0], [64.7, 6305.0], [64.8, 6310.0], [64.9, 6311.0], [65.0, 6313.0], [65.1, 6314.0], [65.2, 6314.0], [65.3, 6316.0], [65.4, 6316.0], [65.5, 6320.0], [65.6, 6326.0], [65.7, 6328.0], [65.8, 6329.0], [65.9, 6331.0], [66.0, 6331.0], [66.1, 6331.0], [66.2, 6335.0], [66.3, 6335.0], [66.4, 6336.0], [66.5, 6337.0], [66.6, 6337.0], [66.7, 6338.0], [66.8, 6339.0], [66.9, 6340.0], [67.0, 6346.0], [67.1, 6346.0], [67.2, 6347.0], [67.3, 6349.0], [67.4, 6349.0], [67.5, 6350.0], [67.6, 6351.0], [67.7, 6351.0], [67.8, 6356.0], [67.9, 6357.0], [68.0, 6364.0], [68.1, 6364.0], [68.2, 6366.0], [68.3, 6369.0], [68.4, 6369.0], [68.5, 6374.0], [68.6, 6378.0], [68.7, 6378.0], [68.8, 6381.0], [68.9, 6383.0], [69.0, 6383.0], [69.1, 6385.0], [69.2, 6386.0], [69.3, 6388.0], [69.4, 6391.0], [69.5, 6391.0], [69.6, 6391.0], [69.7, 6391.0], [69.8, 6392.0], [69.9, 6394.0], [70.0, 6395.0], [70.1, 6396.0], [70.2, 6397.0], [70.3, 6401.0], [70.4, 6401.0], [70.5, 6402.0], [70.6, 6403.0], [70.7, 6409.0], [70.8, 6411.0], [70.9, 6412.0], [71.0, 6413.0], [71.1, 6416.0], [71.2, 6416.0], [71.3, 6419.0], [71.4, 6420.0], [71.5, 6421.0], [71.6, 6423.0], [71.7, 6425.0], [71.8, 6425.0], [71.9, 6426.0], [72.0, 6427.0], [72.1, 6427.0], [72.2, 6429.0], [72.3, 6429.0], [72.4, 6430.0], [72.5, 6435.0], [72.6, 6436.0], [72.7, 6438.0], [72.8, 6440.0], [72.9, 6440.0], [73.0, 6441.0], [73.1, 6443.0], [73.2, 6443.0], [73.3, 6443.0], [73.4, 6445.0], [73.5, 6448.0], [73.6, 6451.0], [73.7, 6453.0], [73.8, 6454.0], [73.9, 6454.0], [74.0, 6455.0], [74.1, 6456.0], [74.2, 6456.0], [74.3, 6457.0], [74.4, 6459.0], [74.5, 6460.0], [74.6, 6462.0], [74.7, 6462.0], [74.8, 6462.0], [74.9, 6464.0], [75.0, 6464.0], [75.1, 6467.0], [75.2, 6468.0], [75.3, 6468.0], [75.4, 6469.0], [75.5, 6470.0], [75.6, 6471.0], [75.7, 6475.0], [75.8, 6478.0], [75.9, 6479.0], [76.0, 6481.0], [76.1, 6490.0], [76.2, 6491.0], [76.3, 6493.0], [76.4, 6493.0], [76.5, 6495.0], [76.6, 6497.0], [76.7, 6497.0], [76.8, 6498.0], [76.9, 6499.0], [77.0, 6502.0], [77.1, 6503.0], [77.2, 6505.0], [77.3, 6506.0], [77.4, 6510.0], [77.5, 6513.0], [77.6, 6513.0], [77.7, 6513.0], [77.8, 6517.0], [77.9, 6518.0], [78.0, 6519.0], [78.1, 6521.0], [78.2, 6522.0], [78.3, 6523.0], [78.4, 6524.0], [78.5, 6526.0], [78.6, 6527.0], [78.7, 6527.0], [78.8, 6528.0], [78.9, 6530.0], [79.0, 6531.0], [79.1, 6531.0], [79.2, 6532.0], [79.3, 6533.0], [79.4, 6533.0], [79.5, 6533.0], [79.6, 6533.0], [79.7, 6535.0], [79.8, 6541.0], [79.9, 6542.0], [80.0, 6545.0], [80.1, 6547.0], [80.2, 6547.0], [80.3, 6548.0], [80.4, 6548.0], [80.5, 6549.0], [80.6, 6550.0], [80.7, 6552.0], [80.8, 6553.0], [80.9, 6555.0], [81.0, 6555.0], [81.1, 6556.0], [81.2, 6557.0], [81.3, 6559.0], [81.4, 6559.0], [81.5, 6561.0], [81.6, 6562.0], [81.7, 6564.0], [81.8, 6564.0], [81.9, 6565.0], [82.0, 6566.0], [82.1, 6566.0], [82.2, 6567.0], [82.3, 6568.0], [82.4, 6571.0], [82.5, 6573.0], [82.6, 6578.0], [82.7, 6580.0], [82.8, 6581.0], [82.9, 6584.0], [83.0, 6584.0], [83.1, 6585.0], [83.2, 6585.0], [83.3, 6586.0], [83.4, 6586.0], [83.5, 6588.0], [83.6, 6588.0], [83.7, 6589.0], [83.8, 6589.0], [83.9, 6590.0], [84.0, 6594.0], [84.1, 6596.0], [84.2, 6596.0], [84.3, 6597.0], [84.4, 6598.0], [84.5, 6604.0], [84.6, 6607.0], [84.7, 6607.0], [84.8, 6607.0], [84.9, 6608.0], [85.0, 6612.0], [85.1, 6620.0], [85.2, 6625.0], [85.3, 6630.0], [85.4, 6630.0], [85.5, 6631.0], [85.6, 6632.0], [85.7, 6632.0], [85.8, 6633.0], [85.9, 6636.0], [86.0, 6636.0], [86.1, 6636.0], [86.2, 6637.0], [86.3, 6637.0], [86.4, 6637.0], [86.5, 6638.0], [86.6, 6640.0], [86.7, 6642.0], [86.8, 6645.0], [86.9, 6645.0], [87.0, 6647.0], [87.1, 6651.0], [87.2, 6653.0], [87.3, 6653.0], [87.4, 6654.0], [87.5, 6655.0], [87.6, 6658.0], [87.7, 6659.0], [87.8, 6660.0], [87.9, 6661.0], [88.0, 6661.0], [88.1, 6665.0], [88.2, 6665.0], [88.3, 6666.0], [88.4, 6668.0], [88.5, 6668.0], [88.6, 6671.0], [88.7, 6673.0], [88.8, 6673.0], [88.9, 6674.0], [89.0, 6674.0], [89.1, 6680.0], [89.2, 6681.0], [89.3, 6682.0], [89.4, 6682.0], [89.5, 6684.0], [89.6, 6684.0], [89.7, 6685.0], [89.8, 6685.0], [89.9, 6686.0], [90.0, 6695.0], [90.1, 6696.0], [90.2, 6697.0], [90.3, 6698.0], [90.4, 6699.0], [90.5, 6700.0], [90.6, 6700.0], [90.7, 6701.0], [90.8, 6701.0], [90.9, 6703.0], [91.0, 6704.0], [91.1, 6704.0], [91.2, 6705.0], [91.3, 6709.0], [91.4, 6709.0], [91.5, 6710.0], [91.6, 6715.0], [91.7, 6727.0], [91.8, 6729.0], [91.9, 6729.0], [92.0, 6731.0], [92.1, 6734.0], [92.2, 6735.0], [92.3, 6738.0], [92.4, 6738.0], [92.5, 6739.0], [92.6, 6739.0], [92.7, 6739.0], [92.8, 6743.0], [92.9, 6743.0], [93.0, 6744.0], [93.1, 6746.0], [93.2, 6746.0], [93.3, 6747.0], [93.4, 6748.0], [93.5, 6757.0], [93.6, 6759.0], [93.7, 6775.0], [93.8, 6776.0], [93.9, 6778.0], [94.0, 6779.0], [94.1, 6779.0], [94.2, 6780.0], [94.3, 6786.0], [94.4, 6786.0], [94.5, 6793.0], [94.6, 6795.0], [94.7, 6801.0], [94.8, 6802.0], [94.9, 6802.0], [95.0, 6802.0], [95.1, 6805.0], [95.2, 6809.0], [95.3, 6809.0], [95.4, 6814.0], [95.5, 6816.0], [95.6, 6817.0], [95.7, 6818.0], [95.8, 6823.0], [95.9, 6824.0], [96.0, 6826.0], [96.1, 6833.0], [96.2, 6837.0], [96.3, 6842.0], [96.4, 6844.0], [96.5, 6847.0], [96.6, 6864.0], [96.7, 6869.0], [96.8, 6876.0], [96.9, 6878.0], [97.0, 6887.0], [97.1, 6888.0], [97.2, 6891.0], [97.3, 6894.0], [97.4, 6907.0], [97.5, 6911.0], [97.6, 6920.0], [97.7, 6921.0], [97.8, 6925.0], [97.9, 6946.0], [98.0, 6946.0], [98.1, 6949.0], [98.2, 6963.0], [98.3, 6973.0], [98.4, 6978.0], [98.5, 7000.0], [98.6, 7008.0], [98.7, 7011.0], [98.8, 7024.0], [98.9, 7027.0], [99.0, 7052.0], [99.1, 7056.0], [99.2, 7057.0], [99.3, 7070.0], [99.4, 7096.0], [99.5, 7103.0], [99.6, 7103.0], [99.7, 7107.0], [99.8, 7120.0], [99.9, 7147.0]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 75.0, "series": [{"data": [[600.0, 1.0], [700.0, 4.0], [800.0, 10.0], [1000.0, 2.0], [1100.0, 3.0], [1200.0, 5.0], [1300.0, 5.0], [1400.0, 6.0], [1500.0, 3.0], [1600.0, 3.0], [1700.0, 10.0], [1800.0, 3.0], [1900.0, 4.0], [2000.0, 7.0], [2100.0, 1.0], [2200.0, 1.0], [2300.0, 2.0], [2400.0, 10.0], [2500.0, 1.0], [2600.0, 3.0], [2800.0, 3.0], [2700.0, 1.0], [2900.0, 3.0], [3000.0, 2.0], [3100.0, 6.0], [3200.0, 14.0], [3300.0, 8.0], [3400.0, 1.0], [3500.0, 5.0], [3600.0, 4.0], [3700.0, 7.0], [3800.0, 13.0], [3900.0, 13.0], [4000.0, 11.0], [4100.0, 5.0], [4200.0, 7.0], [4300.0, 1.0], [4400.0, 3.0], [4500.0, 3.0], [4600.0, 6.0], [4700.0, 2.0], [4800.0, 8.0], [4900.0, 12.0], [5000.0, 20.0], [5100.0, 19.0], [5200.0, 16.0], [5300.0, 15.0], [5600.0, 24.0], [5500.0, 28.0], [5400.0, 25.0], [5700.0, 37.0], [5800.0, 40.0], [5900.0, 36.0], [6000.0, 51.0], [6100.0, 60.0], [6200.0, 50.0], [6300.0, 59.0], [6400.0, 67.0], [6500.0, 75.0], [6600.0, 61.0], [6700.0, 42.0], [6800.0, 27.0], [6900.0, 11.0], [7000.0, 10.0], [7100.0, 5.0]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 964.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 36.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 964.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.40599999999995, "minX": 1.7557635E12, "maxY": 501.40599999999995, "series": [{"data": [[1.7557635E12, 501.40599999999995]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557635E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 761.6666666666666, "minX": 1.0, "maxY": 7127.0, "series": [{"data": [[2.0, 7103.0], [3.0, 7070.0], [5.0, 7127.0], [7.0, 6742.5], [10.0, 6882.0], [12.0, 7088.0], [13.0, 6697.0], [14.0, 6681.0], [15.0, 7103.0], [16.0, 6698.0], [17.0, 7096.0], [18.0, 6878.0], [20.0, 6776.0], [21.0, 7027.0], [22.0, 7000.0], [24.0, 6655.0], [25.0, 6498.0], [26.0, 6973.0], [28.0, 6810.5], [29.0, 6963.0], [30.0, 6946.0], [33.0, 6552.0], [32.0, 6730.0], [35.0, 6780.0], [34.0, 7052.0], [37.0, 6730.5], [41.0, 6802.0], [40.0, 6883.0], [43.0, 6978.0], [42.0, 7008.0], [45.0, 6949.0], [44.0, 6684.0], [49.0, 6671.0], [48.0, 6588.333333333333], [51.0, 6294.0], [50.0, 6734.0], [53.0, 6837.0], [55.0, 6529.666666666667], [57.0, 6595.0], [59.0, 6720.5], [61.0, 6739.0], [60.0, 6869.0], [63.0, 6918.5], [67.0, 6612.666666666667], [64.0, 6817.0], [71.0, 6764.5], [69.0, 6738.0], [68.0, 6735.0], [74.0, 6607.0], [73.0, 6331.0], [72.0, 6596.0], [79.0, 6876.0], [78.0, 6578.0], [77.0, 6464.0], [76.0, 6810.5], [82.0, 6752.5], [80.0, 6911.0], [87.0, 6476.666666666667], [84.0, 6647.5], [89.0, 6318.5], [95.0, 6493.0], [94.0, 6847.0], [93.0, 6765.5], [99.0, 6795.0], [98.0, 6842.0], [97.0, 6462.0], [103.0, 6608.0], [101.0, 6816.0], [100.0, 6702.0], [105.0, 6809.0], [104.0, 6703.0], [110.0, 6306.5], [108.0, 6759.0], [115.0, 6408.666666666667], [112.0, 6594.5], [119.0, 6557.5], [117.0, 6369.0], [116.0, 6455.0], [122.0, 6328.0], [126.0, 6072.0], [125.0, 6635.666666666667], [134.0, 6480.285714285714], [130.0, 6743.0], [142.0, 6759.0], [140.0, 6602.0], [138.0, 6622.0], [150.0, 6486.5], [149.0, 6115.0], [148.0, 6391.0], [146.0, 6705.0], [145.0, 6455.333333333333], [159.0, 6802.0], [158.0, 6594.0], [157.0, 6739.0], [154.0, 6600.0], [153.0, 6637.0], [152.0, 6331.0], [164.0, 6094.0], [163.0, 6547.5], [161.0, 6212.333333333333], [175.0, 6746.0], [174.0, 6597.333333333333], [171.0, 6786.0], [170.0, 6610.0], [168.0, 6619.0], [183.0, 6549.0], [182.0, 6654.0], [181.0, 6409.75], [177.0, 6416.0], [176.0, 6238.0], [190.0, 6467.333333333333], [187.0, 6443.0], [186.0, 6758.0], [184.0, 6636.0], [199.0, 6287.0], [197.0, 6372.5], [195.0, 6419.0], [194.0, 6533.0], [193.0, 6470.0], [206.0, 6660.0], [205.0, 6508.5], [203.0, 6645.0], [202.0, 6393.0], [200.0, 6747.0], [215.0, 6612.0], [214.0, 6442.666666666667], [211.0, 6403.0], [210.0, 6552.666666666667], [209.0, 6695.0], [223.0, 6596.0], [222.0, 6548.0], [216.0, 6517.0], [230.0, 6270.0], [229.0, 6562.0], [226.0, 6704.0], [225.0, 6641.5], [239.0, 6506.25], [236.0, 6125.0], [233.0, 6335.0], [247.0, 6438.5], [245.0, 6447.0], [243.0, 6468.0], [242.0, 6278.0], [241.0, 6559.5], [254.0, 6684.0], [253.0, 6560.333333333333], [250.0, 6294.0], [249.0, 6514.5], [269.0, 6512.25], [265.0, 6328.25], [261.0, 6290.0], [259.0, 6349.0], [257.0, 6360.666666666667], [285.0, 6658.0], [283.0, 6547.0], [282.0, 6653.0], [279.0, 6248.0], [278.0, 6555.0], [276.0, 6664.5], [274.0, 6254.0], [272.0, 6374.0], [303.0, 6522.0], [302.0, 6486.0], [299.0, 6456.5], [297.0, 6594.0], [296.0, 6281.0], [290.0, 6077.0], [289.0, 6291.0], [288.0, 6416.166666666666], [312.0, 6427.0], [316.0, 6527.0], [315.0, 5930.0], [314.0, 6518.0], [313.0, 5932.0], [311.0, 6290.333333333333], [309.0, 5990.0], [308.0, 6165.0], [305.0, 6364.0], [304.0, 5949.0], [334.0, 6366.0], [333.0, 6584.0], [331.0, 6286.5], [330.0, 6242.0], [329.0, 6116.5], [324.0, 6323.0], [322.0, 6335.0], [321.0, 6419.0], [351.0, 6571.0], [350.0, 6213.0], [349.0, 6524.0], [345.0, 6293.5], [344.0, 6398.4], [338.0, 6291.25], [355.0, 6584.0], [367.0, 6531.0], [366.0, 6380.75], [362.0, 6145.0], [360.0, 6260.333333333333], [357.0, 6533.0], [356.0, 6121.0], [354.0, 6467.0], [353.0, 6238.0], [352.0, 6604.0], [383.0, 6308.5], [380.0, 6443.0], [379.0, 6495.0], [378.0, 6108.0], [377.0, 6390.0], [375.0, 6548.0], [373.0, 6201.333333333333], [372.0, 6253.0], [370.0, 6305.0], [371.0, 6218.0], [398.0, 6057.0], [399.0, 6462.0], [397.0, 6181.5], [386.0, 6156.0], [384.0, 6426.0], [395.0, 6388.0], [394.0, 6530.0], [393.0, 6421.0], [392.0, 6438.0], [389.0, 6351.0], [388.0, 6256.5], [412.0, 6065.0], [415.0, 6521.0], [414.0, 6065.0], [413.0, 6314.0], [411.0, 6386.25], [407.0, 6084.0], [406.0, 6541.5], [405.0, 6191.666666666667], [401.0, 6454.5], [429.0, 6502.0], [428.0, 6313.0], [427.0, 5731.0], [426.0, 6510.0], [425.0, 6481.0], [424.0, 6364.874999999999], [416.0, 5921.0], [446.0, 6339.0], [447.0, 6254.0], [444.0, 6456.0], [443.0, 6457.0], [442.0, 6505.0], [441.0, 6040.0], [440.0, 6054.5], [436.0, 6213.5], [433.0, 5758.0], [432.0, 6147.666666666667], [434.0, 6182.0], [462.0, 6023.5], [460.0, 6012.0], [459.0, 6106.5], [456.0, 6008.0], [455.0, 6326.4], [450.0, 5900.5], [448.0, 6031.0], [472.0, 6402.0], [476.0, 5822.0], [475.0, 5736.0], [474.0, 6100.0], [473.0, 6035.0], [471.0, 6215.5], [469.0, 6440.0], [468.0, 6241.5], [466.0, 6378.0], [465.0, 6191.0], [464.0, 5838.0], [493.0, 6394.0], [494.0, 6287.0], [492.0, 6049.0], [491.0, 6313.0], [490.0, 6349.0], [488.0, 6100.25], [484.0, 6169.0], [483.0, 6416.0], [481.0, 6053.4], [510.0, 5829.0], [509.0, 6001.0], [507.0, 6366.0], [506.0, 5674.0], [505.0, 5867.0], [504.0, 5979.5], [500.0, 5905.5], [498.0, 5977.0], [497.0, 6385.0], [496.0, 5978.0], [541.0, 5968.0], [532.0, 5742.0], [543.0, 6140.5], [529.0, 5768.0], [528.0, 6302.0], [531.0, 6014.0], [530.0, 6261.0], [539.0, 5656.0], [538.0, 5739.0], [537.0, 6125.5], [518.0, 6128.0], [517.0, 6350.0], [516.0, 5896.333333333333], [513.0, 5940.0], [512.0, 5960.0], [527.0, 6092.0], [526.0, 6301.0], [525.0, 5957.0], [524.0, 5940.0], [523.0, 5931.0], [520.0, 5989.0], [535.0, 6197.0], [534.0, 6070.0], [533.0, 6281.0], [571.0, 5799.25], [563.0, 5819.0], [574.0, 6130.0], [573.0, 6178.0], [572.0, 6151.0], [559.0, 5834.0], [544.0, 6115.0], [546.0, 5900.0], [545.0, 5609.0], [548.0, 6193.0], [547.0, 6222.0], [551.0, 6105.0], [550.0, 5825.0], [558.0, 5833.0], [557.0, 5872.0], [556.0, 5945.0], [554.0, 5718.0], [553.0, 5411.0], [552.0, 5418.0], [567.0, 6021.666666666667], [566.0, 6134.0], [564.0, 5622.5], [561.0, 5669.0], [603.0, 5633.0], [605.0, 5896.0], [602.0, 6042.0], [601.0, 5537.0], [599.0, 5798.0], [595.0, 5809.0], [594.0, 5529.0], [593.0, 5800.5], [591.0, 5669.5], [579.0, 5813.25], [578.0, 5836.0], [581.0, 5894.0], [580.0, 5907.0], [583.0, 5813.0], [582.0, 6140.0], [589.0, 5799.5], [585.0, 5925.5], [637.0, 5655.5], [638.0, 5595.0], [636.0, 5767.5], [635.0, 5495.0], [632.0, 5610.0], [613.0, 5811.5], [611.0, 5938.0], [610.0, 5744.6], [623.0, 5745.0], [621.0, 6090.5], [619.0, 5639.5], [617.0, 5772.666666666667], [616.0, 6054.0], [631.0, 5437.333333333333], [630.0, 5678.5], [627.0, 5917.0], [624.0, 5731.0], [659.0, 5452.0], [671.0, 5888.0], [670.0, 5939.333333333333], [667.0, 5574.5], [665.0, 5427.5], [655.0, 6077.0], [640.0, 5829.0], [644.0, 5765.0], [643.0, 5648.666666666667], [654.0, 5522.0], [653.0, 5581.0], [650.0, 5884.0], [649.0, 6016.0], [648.0, 5586.75], [663.0, 5627.5], [662.0, 5569.0], [660.0, 5680.0], [658.0, 5851.0], [656.0, 5730.0], [701.0, 5800.0], [692.0, 5138.0], [696.0, 5314.0], [679.0, 5632.0], [677.0, 5637.0], [676.0, 5705.0], [675.0, 5663.5], [673.0, 5305.0], [672.0, 5467.0], [685.0, 5542.0], [684.0, 5302.0], [682.0, 5127.0], [681.0, 5884.0], [680.0, 5813.0], [695.0, 5058.0], [694.0, 5688.0], [693.0, 5271.0], [691.0, 5789.0], [690.0, 5336.0], [689.0, 5857.0], [688.0, 5443.0], [723.0, 5749.0], [734.0, 5348.0], [733.0, 5197.0], [731.0, 5299.0], [711.0, 5751.0], [709.0, 5225.5], [707.0, 5389.0], [705.0, 5257.0], [704.0, 5460.0], [717.0, 5675.0], [716.0, 5345.0], [714.0, 5290.0], [713.0, 5400.0], [712.0, 5463.0], [727.0, 5476.0], [726.0, 5183.0], [725.0, 5182.0], [722.0, 5202.25], [721.0, 5387.0], [756.0, 4927.0], [766.0, 5103.0], [753.0, 5700.0], [752.0, 5195.0], [764.0, 5347.0], [763.0, 5229.0], [761.0, 4915.0], [751.0, 5158.0], [741.0, 5372.571428571428], [743.0, 5601.0], [742.0, 5182.0], [747.0, 4954.0], [746.0, 5129.666666666667], [759.0, 5048.0], [758.0, 5177.0], [757.0, 5641.0], [755.0, 5163.0], [754.0, 5060.0], [797.0, 5004.0], [799.0, 4742.5], [796.0, 4819.0], [794.0, 4837.0], [793.0, 5290.0], [792.0, 4925.5], [783.0, 5002.0], [770.0, 5207.0], [768.0, 5026.5], [774.0, 5029.0], [772.0, 5104.666666666667], [780.0, 4877.0], [779.0, 4873.0], [778.0, 5010.0], [777.0, 5136.0], [776.0, 4989.333333333333], [790.0, 4880.0], [789.0, 5223.333333333333], [786.0, 5147.0], [785.0, 5234.5], [818.0, 4036.0], [828.0, 4342.0], [830.0, 3904.5], [816.0, 4110.5], [826.0, 4135.0], [825.0, 3984.0], [824.0, 4213.0], [807.0, 4162.0], [806.0, 4166.0], [805.0, 4236.0], [804.0, 4291.5], [803.0, 4780.5], [800.0, 4642.0], [814.0, 4267.5], [812.0, 4490.333333333333], [809.0, 4149.0], [823.0, 4414.0], [821.0, 4083.0], [819.0, 4567.0], [856.0, 4027.0], [860.0, 3376.0], [863.0, 3532.6666666666665], [850.0, 3923.0], [848.0, 3770.0], [859.0, 3434.0], [858.0, 4041.0], [857.0, 4065.0], [847.0, 3836.0], [833.0, 3872.0], [837.0, 4464.0], [836.0, 3846.6666666666665], [839.0, 3766.0], [838.0, 3909.0], [846.0, 3893.0], [845.0, 4241.5], [843.0, 4283.5], [842.0, 3858.0], [841.0, 3879.0], [855.0, 3685.0], [853.0, 3714.0], [852.0, 3683.0], [851.0, 3673.0], [883.0, 3516.0], [894.0, 3213.5], [895.0, 3880.0], [882.0, 3217.0], [893.0, 3206.0], [891.0, 3552.0], [888.0, 3592.5], [870.0, 3800.0], [869.0, 3849.0], [866.0, 3391.3333333333335], [879.0, 3599.0], [877.0, 3663.0], [875.0, 3322.0], [873.0, 3690.5], [872.0, 3251.0], [887.0, 3895.0], [885.0, 3431.0], [884.0, 3202.0], [922.0, 2546.75], [914.0, 2451.0], [927.0, 2258.6666666666665], [925.0, 2042.0], [923.0, 2430.0], [911.0, 2786.0], [898.0, 3374.0], [901.0, 3111.0], [900.0, 3362.5], [903.0, 3042.0], [902.0, 3771.0], [910.0, 3575.0], [909.0, 2866.0], [908.0, 2993.0], [907.0, 2906.0], [906.0, 3643.0], [905.0, 2964.0], [904.0, 3293.0], [918.0, 2494.0], [917.0, 3091.0], [916.0, 2811.5], [913.0, 3172.0], [912.0, 2820.0], [958.0, 1455.0], [959.0, 1986.0], [957.0, 2239.0], [956.0, 1881.0], [955.0, 2066.5], [953.0, 2133.0], [939.0, 1730.0], [928.0, 2646.0], [935.0, 2194.5], [933.0, 2135.8], [949.0, 1754.4], [948.0, 2084.0], [944.0, 2123.4], [946.0, 1780.0], [989.0, 806.5], [991.0, 1088.0], [987.0, 1477.5], [985.0, 1359.0], [984.0, 1020.0], [967.0, 1230.3333333333333], [964.0, 1275.0], [963.0, 1370.0], [962.0, 1364.0], [960.0, 1895.0], [982.0, 974.0], [980.0, 809.0], [979.0, 1077.0], [976.0, 898.0], [975.0, 1556.0], [973.0, 891.0], [971.0, 1462.0], [970.0, 1055.5], [968.0, 1702.0], [1000.0, 761.6666666666666], [997.0, 1089.0], [995.0, 1259.5], [994.0, 1468.0], [992.0, 821.0], [1.0, 6374.0]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}, {"data": [[501.4039999999994, 5475.923999999995]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12066.666666666666, "minX": 1.7557635E12, "maxY": 114983.33333333333, "series": [{"data": [[1.7557635E12, 12066.666666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7557635E12, 114983.33333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557635E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5475.923999999995, "minX": 1.7557635E12, "maxY": 5475.923999999995, "series": [{"data": [[1.7557635E12, 5475.923999999995]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557635E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5475.872000000001, "minX": 1.7557635E12, "maxY": 5475.872000000001, "series": [{"data": [[1.7557635E12, 5475.872000000001]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557635E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2492.672000000001, "minX": 1.7557635E12, "maxY": 2492.672000000001, "series": [{"data": [[1.7557635E12, 2492.672000000001]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557635E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 695.0, "minX": 1.7557635E12, "maxY": 7147.0, "series": [{"data": [[1.7557635E12, 7147.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7557635E12, 6694.099999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7557635E12, 7051.75]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7557635E12, 6802.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7557635E12, 695.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7557635E12, 6041.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557635E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 760.0, "minX": 3.0, "maxY": 6502.5, "series": [{"data": [[339.0, 5705.0], [23.0, 2475.0], [3.0, 760.0], [52.0, 4105.0], [460.0, 6502.5], [61.0, 3371.0], [62.0, 1474.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 460.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 752.0, "minX": 3.0, "maxY": 6502.5, "series": [{"data": [[339.0, 5705.0], [23.0, 2475.0], [3.0, 752.0], [52.0, 4105.0], [460.0, 6502.5], [61.0, 3371.0], [62.0, 1474.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 460.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557635E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557635E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557635E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557635E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557635E12, 16.666666666666668]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7557635E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557635E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557635E12, 16.666666666666668]], "isOverall": false, "label": "สร้างแบบประเมินสุขภาพ-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557635E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7557635E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7557635E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7557635E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

