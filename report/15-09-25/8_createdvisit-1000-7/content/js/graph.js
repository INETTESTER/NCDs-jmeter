/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 13728.0, "minX": 0.0, "maxY": 32200.0, "series": [{"data": [[0.0, 13728.0], [0.1, 14167.0], [0.2, 14185.0], [0.3, 14185.0], [0.4, 14318.0], [0.5, 14435.0], [0.6, 14612.0], [0.7, 14686.0], [0.8, 14899.0], [0.9, 14978.0], [1.0, 15127.0], [1.1, 15209.0], [1.2, 15282.0], [1.3, 15294.0], [1.4, 15294.0], [1.5, 15431.0], [1.6, 15571.0], [1.7, 15915.0], [1.8, 15938.0], [1.9, 16417.0], [2.0, 16599.0], [2.1, 16605.0], [2.2, 16704.0], [2.3, 16723.0], [2.4, 16742.0], [2.5, 17098.0], [2.6, 17193.0], [2.7, 17271.0], [2.8, 17592.0], [2.9, 17675.0], [3.0, 17703.0], [3.1, 17837.0], [3.2, 17913.0], [3.3, 17923.0], [3.4, 17927.0], [3.5, 17978.0], [3.6, 18237.0], [3.7, 18402.0], [3.8, 18532.0], [3.9, 18563.0], [4.0, 18587.0], [4.1, 18648.0], [4.2, 18729.0], [4.3, 18737.0], [4.4, 18998.0], [4.5, 19061.0], [4.6, 19063.0], [4.7, 19099.0], [4.8, 19228.0], [4.9, 19282.0], [5.0, 19284.0], [5.1, 19298.0], [5.2, 19407.0], [5.3, 19413.0], [5.4, 19418.0], [5.5, 19580.0], [5.6, 19622.0], [5.7, 19637.0], [5.8, 19641.0], [5.9, 19674.0], [6.0, 19703.0], [6.1, 19714.0], [6.2, 19744.0], [6.3, 19749.0], [6.4, 19758.0], [6.5, 19789.0], [6.6, 19828.0], [6.7, 19894.0], [6.8, 19922.0], [6.9, 19947.0], [7.0, 19989.0], [7.1, 20191.0], [7.2, 20254.0], [7.3, 20263.0], [7.4, 20404.0], [7.5, 20422.0], [7.6, 20508.0], [7.7, 20521.0], [7.8, 20545.0], [7.9, 20547.0], [8.0, 20554.0], [8.1, 20564.0], [8.2, 20645.0], [8.3, 20650.0], [8.4, 20659.0], [8.5, 20677.0], [8.6, 20709.0], [8.7, 20734.0], [8.8, 20752.0], [8.9, 20816.0], [9.0, 20854.0], [9.1, 20900.0], [9.2, 20947.0], [9.3, 21002.0], [9.4, 21002.0], [9.5, 21026.0], [9.6, 21029.0], [9.7, 21040.0], [9.8, 21042.0], [9.9, 21074.0], [10.0, 21082.0], [10.1, 21096.0], [10.2, 21114.0], [10.3, 21157.0], [10.4, 21174.0], [10.5, 21229.0], [10.6, 21235.0], [10.7, 21261.0], [10.8, 21447.0], [10.9, 21481.0], [11.0, 21539.0], [11.1, 21543.0], [11.2, 21555.0], [11.3, 21581.0], [11.4, 21586.0], [11.5, 21597.0], [11.6, 21615.0], [11.7, 21629.0], [11.8, 21644.0], [11.9, 21652.0], [12.0, 21699.0], [12.1, 21718.0], [12.2, 21818.0], [12.3, 21857.0], [12.4, 21858.0], [12.5, 21874.0], [12.6, 21898.0], [12.7, 22042.0], [12.8, 22079.0], [12.9, 22146.0], [13.0, 22153.0], [13.1, 22236.0], [13.2, 22252.0], [13.3, 22259.0], [13.4, 22279.0], [13.5, 22320.0], [13.6, 22322.0], [13.7, 22426.0], [13.8, 22455.0], [13.9, 22475.0], [14.0, 22550.0], [14.1, 22556.0], [14.2, 22564.0], [14.3, 22580.0], [14.4, 22649.0], [14.5, 22657.0], [14.6, 22659.0], [14.7, 22830.0], [14.8, 22842.0], [14.9, 22864.0], [15.0, 22865.0], [15.1, 22892.0], [15.2, 22898.0], [15.3, 22905.0], [15.4, 22914.0], [15.5, 22978.0], [15.6, 22997.0], [15.7, 23011.0], [15.8, 23035.0], [15.9, 23063.0], [16.0, 23107.0], [16.1, 23125.0], [16.2, 23211.0], [16.3, 23224.0], [16.4, 23277.0], [16.5, 23283.0], [16.6, 23360.0], [16.7, 23506.0], [16.8, 23582.0], [16.9, 23641.0], [17.0, 23663.0], [17.1, 23687.0], [17.2, 23694.0], [17.3, 23704.0], [17.4, 23705.0], [17.5, 23829.0], [17.6, 23846.0], [17.7, 23987.0], [17.8, 24043.0], [17.9, 24128.0], [18.0, 24170.0], [18.1, 24279.0], [18.2, 24308.0], [18.3, 24421.0], [18.4, 24509.0], [18.5, 24536.0], [18.6, 24704.0], [18.7, 24757.0], [18.8, 24921.0], [18.9, 24960.0], [19.0, 25021.0], [19.1, 25030.0], [19.2, 25030.0], [19.3, 25206.0], [19.4, 25294.0], [19.5, 25387.0], [19.6, 25441.0], [19.7, 25494.0], [19.8, 25579.0], [19.9, 25600.0], [20.0, 25633.0], [20.1, 25711.0], [20.2, 25716.0], [20.3, 25718.0], [20.4, 25733.0], [20.5, 25749.0], [20.6, 25774.0], [20.7, 25814.0], [20.8, 25862.0], [20.9, 25951.0], [21.0, 26016.0], [21.1, 26112.0], [21.2, 26123.0], [21.3, 26127.0], [21.4, 26137.0], [21.5, 26137.0], [21.6, 26191.0], [21.7, 26285.0], [21.8, 26288.0], [21.9, 26352.0], [22.0, 26376.0], [22.1, 26433.0], [22.2, 26441.0], [22.3, 26544.0], [22.4, 26596.0], [22.5, 26602.0], [22.6, 26667.0], [22.7, 26678.0], [22.8, 26689.0], [22.9, 26720.0], [23.0, 26756.0], [23.1, 26827.0], [23.2, 26951.0], [23.3, 27029.0], [23.4, 27071.0], [23.5, 27332.0], [23.6, 27391.0], [23.7, 27412.0], [23.8, 27534.0], [23.9, 27578.0], [24.0, 27579.0], [24.1, 27592.0], [24.2, 27594.0], [24.3, 27602.0], [24.4, 27605.0], [24.5, 27607.0], [24.6, 27627.0], [24.7, 27628.0], [24.8, 27651.0], [24.9, 27671.0], [25.0, 27692.0], [25.1, 27716.0], [25.2, 27733.0], [25.3, 27739.0], [25.4, 27740.0], [25.5, 27741.0], [25.6, 27743.0], [25.7, 27750.0], [25.8, 27769.0], [25.9, 27785.0], [26.0, 27849.0], [26.1, 27919.0], [26.2, 27920.0], [26.3, 27939.0], [26.4, 27948.0], [26.5, 27948.0], [26.6, 27953.0], [26.7, 27956.0], [26.8, 27974.0], [26.9, 27978.0], [27.0, 28012.0], [27.1, 28040.0], [27.2, 28042.0], [27.3, 28043.0], [27.4, 28079.0], [27.5, 28081.0], [27.6, 28088.0], [27.7, 28094.0], [27.8, 28116.0], [27.9, 28129.0], [28.0, 28131.0], [28.1, 28133.0], [28.2, 28139.0], [28.3, 28139.0], [28.4, 28144.0], [28.5, 28171.0], [28.6, 28181.0], [28.7, 28204.0], [28.8, 28211.0], [28.9, 28213.0], [29.0, 28226.0], [29.1, 28232.0], [29.2, 28237.0], [29.3, 28242.0], [29.4, 28272.0], [29.5, 28286.0], [29.6, 28308.0], [29.7, 28311.0], [29.8, 28331.0], [29.9, 28341.0], [30.0, 28350.0], [30.1, 28350.0], [30.2, 28352.0], [30.3, 28371.0], [30.4, 28373.0], [30.5, 28377.0], [30.6, 28382.0], [30.7, 28387.0], [30.8, 28416.0], [30.9, 28419.0], [31.0, 28422.0], [31.1, 28429.0], [31.2, 28437.0], [31.3, 28457.0], [31.4, 28466.0], [31.5, 28476.0], [31.6, 28482.0], [31.7, 28571.0], [31.8, 28582.0], [31.9, 28585.0], [32.0, 28587.0], [32.1, 28602.0], [32.2, 28609.0], [32.3, 28609.0], [32.4, 28613.0], [32.5, 28624.0], [32.6, 28625.0], [32.7, 28632.0], [32.8, 28634.0], [32.9, 28640.0], [33.0, 28641.0], [33.1, 28650.0], [33.2, 28652.0], [33.3, 28689.0], [33.4, 28701.0], [33.5, 28710.0], [33.6, 28719.0], [33.7, 28720.0], [33.8, 28727.0], [33.9, 28737.0], [34.0, 28741.0], [34.1, 28742.0], [34.2, 28743.0], [34.3, 28744.0], [34.4, 28752.0], [34.5, 28754.0], [34.6, 28755.0], [34.7, 28759.0], [34.8, 28763.0], [34.9, 28775.0], [35.0, 28784.0], [35.1, 28785.0], [35.2, 28801.0], [35.3, 28808.0], [35.4, 28818.0], [35.5, 28824.0], [35.6, 28832.0], [35.7, 28841.0], [35.8, 28843.0], [35.9, 28846.0], [36.0, 28870.0], [36.1, 28873.0], [36.2, 28875.0], [36.3, 28876.0], [36.4, 28886.0], [36.5, 28895.0], [36.6, 28897.0], [36.7, 28899.0], [36.8, 28900.0], [36.9, 28903.0], [37.0, 28904.0], [37.1, 28917.0], [37.2, 28920.0], [37.3, 28935.0], [37.4, 28943.0], [37.5, 28946.0], [37.6, 28948.0], [37.7, 28956.0], [37.8, 28958.0], [37.9, 28958.0], [38.0, 28960.0], [38.1, 28966.0], [38.2, 29020.0], [38.3, 29024.0], [38.4, 29041.0], [38.5, 29051.0], [38.6, 29053.0], [38.7, 29053.0], [38.8, 29063.0], [38.9, 29066.0], [39.0, 29077.0], [39.1, 29106.0], [39.2, 29131.0], [39.3, 29132.0], [39.4, 29133.0], [39.5, 29141.0], [39.6, 29143.0], [39.7, 29162.0], [39.8, 29203.0], [39.9, 29204.0], [40.0, 29211.0], [40.1, 29223.0], [40.2, 29234.0], [40.3, 29245.0], [40.4, 29248.0], [40.5, 29258.0], [40.6, 29263.0], [40.7, 29293.0], [40.8, 29296.0], [40.9, 29296.0], [41.0, 29300.0], [41.1, 29302.0], [41.2, 29315.0], [41.3, 29318.0], [41.4, 29335.0], [41.5, 29352.0], [41.6, 29358.0], [41.7, 29389.0], [41.8, 29392.0], [41.9, 29395.0], [42.0, 29400.0], [42.1, 29400.0], [42.2, 29419.0], [42.3, 29421.0], [42.4, 29424.0], [42.5, 29433.0], [42.6, 29434.0], [42.7, 29437.0], [42.8, 29441.0], [42.9, 29441.0], [43.0, 29448.0], [43.1, 29449.0], [43.2, 29463.0], [43.3, 29463.0], [43.4, 29465.0], [43.5, 29491.0], [43.6, 29505.0], [43.7, 29512.0], [43.8, 29525.0], [43.9, 29529.0], [44.0, 29529.0], [44.1, 29539.0], [44.2, 29547.0], [44.3, 29550.0], [44.4, 29555.0], [44.5, 29556.0], [44.6, 29558.0], [44.7, 29559.0], [44.8, 29562.0], [44.9, 29565.0], [45.0, 29570.0], [45.1, 29583.0], [45.2, 29585.0], [45.3, 29588.0], [45.4, 29590.0], [45.5, 29594.0], [45.6, 29598.0], [45.7, 29600.0], [45.8, 29603.0], [45.9, 29607.0], [46.0, 29613.0], [46.1, 29615.0], [46.2, 29630.0], [46.3, 29644.0], [46.4, 29650.0], [46.5, 29660.0], [46.6, 29661.0], [46.7, 29670.0], [46.8, 29672.0], [46.9, 29687.0], [47.0, 29689.0], [47.1, 29691.0], [47.2, 29702.0], [47.3, 29717.0], [47.4, 29746.0], [47.5, 29749.0], [47.6, 29749.0], [47.7, 29770.0], [47.8, 29781.0], [47.9, 29782.0], [48.0, 29783.0], [48.1, 29794.0], [48.2, 29806.0], [48.3, 29807.0], [48.4, 29808.0], [48.5, 29816.0], [48.6, 29819.0], [48.7, 29827.0], [48.8, 29828.0], [48.9, 29836.0], [49.0, 29836.0], [49.1, 29843.0], [49.2, 29856.0], [49.3, 29856.0], [49.4, 29857.0], [49.5, 29861.0], [49.6, 29863.0], [49.7, 29867.0], [49.8, 29876.0], [49.9, 29881.0], [50.0, 29896.0], [50.1, 29899.0], [50.2, 29900.0], [50.3, 29920.0], [50.4, 29922.0], [50.5, 29923.0], [50.6, 29924.0], [50.7, 29927.0], [50.8, 29929.0], [50.9, 29930.0], [51.0, 29937.0], [51.1, 29943.0], [51.2, 29946.0], [51.3, 29946.0], [51.4, 29948.0], [51.5, 29952.0], [51.6, 29952.0], [51.7, 29971.0], [51.8, 29974.0], [51.9, 29978.0], [52.0, 29978.0], [52.1, 29982.0], [52.2, 29983.0], [52.3, 29990.0], [52.4, 29994.0], [52.5, 30001.0], [52.6, 30002.0], [52.7, 30016.0], [52.8, 30021.0], [52.9, 30030.0], [53.0, 30036.0], [53.1, 30038.0], [53.2, 30043.0], [53.3, 30046.0], [53.4, 30048.0], [53.5, 30048.0], [53.6, 30050.0], [53.7, 30050.0], [53.8, 30051.0], [53.9, 30051.0], [54.0, 30052.0], [54.1, 30053.0], [54.2, 30054.0], [54.3, 30055.0], [54.4, 30056.0], [54.5, 30058.0], [54.6, 30061.0], [54.7, 30061.0], [54.8, 30062.0], [54.9, 30077.0], [55.0, 30087.0], [55.1, 30090.0], [55.2, 30090.0], [55.3, 30093.0], [55.4, 30093.0], [55.5, 30096.0], [55.6, 30096.0], [55.7, 30096.0], [55.8, 30097.0], [55.9, 30097.0], [56.0, 30112.0], [56.1, 30119.0], [56.2, 30119.0], [56.3, 30120.0], [56.4, 30121.0], [56.5, 30121.0], [56.6, 30123.0], [56.7, 30123.0], [56.8, 30125.0], [56.9, 30126.0], [57.0, 30131.0], [57.1, 30136.0], [57.2, 30143.0], [57.3, 30149.0], [57.4, 30153.0], [57.5, 30156.0], [57.6, 30167.0], [57.7, 30168.0], [57.8, 30171.0], [57.9, 30179.0], [58.0, 30185.0], [58.1, 30185.0], [58.2, 30186.0], [58.3, 30187.0], [58.4, 30187.0], [58.5, 30188.0], [58.6, 30188.0], [58.7, 30189.0], [58.8, 30189.0], [58.9, 30190.0], [59.0, 30197.0], [59.1, 30202.0], [59.2, 30222.0], [59.3, 30222.0], [59.4, 30231.0], [59.5, 30240.0], [59.6, 30245.0], [59.7, 30253.0], [59.8, 30253.0], [59.9, 30253.0], [60.0, 30255.0], [60.1, 30257.0], [60.2, 30259.0], [60.3, 30259.0], [60.4, 30261.0], [60.5, 30266.0], [60.6, 30270.0], [60.7, 30273.0], [60.8, 30279.0], [60.9, 30279.0], [61.0, 30281.0], [61.1, 30285.0], [61.2, 30288.0], [61.3, 30291.0], [61.4, 30296.0], [61.5, 30308.0], [61.6, 30309.0], [61.7, 30313.0], [61.8, 30348.0], [61.9, 30355.0], [62.0, 30370.0], [62.1, 30375.0], [62.2, 30377.0], [62.3, 30378.0], [62.4, 30380.0], [62.5, 30394.0], [62.6, 30397.0], [62.7, 30397.0], [62.8, 30413.0], [62.9, 30416.0], [63.0, 30418.0], [63.1, 30420.0], [63.2, 30423.0], [63.3, 30423.0], [63.4, 30436.0], [63.5, 30447.0], [63.6, 30454.0], [63.7, 30454.0], [63.8, 30457.0], [63.9, 30468.0], [64.0, 30475.0], [64.1, 30476.0], [64.2, 30481.0], [64.3, 30482.0], [64.4, 30485.0], [64.5, 30485.0], [64.6, 30488.0], [64.7, 30494.0], [64.8, 30501.0], [64.9, 30504.0], [65.0, 30507.0], [65.1, 30508.0], [65.2, 30509.0], [65.3, 30515.0], [65.4, 30517.0], [65.5, 30521.0], [65.6, 30536.0], [65.7, 30540.0], [65.8, 30540.0], [65.9, 30545.0], [66.0, 30546.0], [66.1, 30546.0], [66.2, 30553.0], [66.3, 30555.0], [66.4, 30556.0], [66.5, 30557.0], [66.6, 30558.0], [66.7, 30568.0], [66.8, 30573.0], [66.9, 30579.0], [67.0, 30584.0], [67.1, 30592.0], [67.2, 30603.0], [67.3, 30607.0], [67.4, 30612.0], [67.5, 30612.0], [67.6, 30617.0], [67.7, 30624.0], [67.8, 30641.0], [67.9, 30646.0], [68.0, 30650.0], [68.1, 30650.0], [68.2, 30653.0], [68.3, 30653.0], [68.4, 30653.0], [68.5, 30663.0], [68.6, 30664.0], [68.7, 30676.0], [68.8, 30677.0], [68.9, 30678.0], [69.0, 30681.0], [69.1, 30684.0], [69.2, 30690.0], [69.3, 30699.0], [69.4, 30701.0], [69.5, 30704.0], [69.6, 30712.0], [69.7, 30714.0], [69.8, 30720.0], [69.9, 30722.0], [70.0, 30727.0], [70.1, 30729.0], [70.2, 30732.0], [70.3, 30736.0], [70.4, 30737.0], [70.5, 30739.0], [70.6, 30739.0], [70.7, 30739.0], [70.8, 30740.0], [70.9, 30742.0], [71.0, 30742.0], [71.1, 30743.0], [71.2, 30743.0], [71.3, 30743.0], [71.4, 30744.0], [71.5, 30744.0], [71.6, 30745.0], [71.7, 30746.0], [71.8, 30746.0], [71.9, 30747.0], [72.0, 30747.0], [72.1, 30747.0], [72.2, 30749.0], [72.3, 30750.0], [72.4, 30750.0], [72.5, 30752.0], [72.6, 30752.0], [72.7, 30753.0], [72.8, 30761.0], [72.9, 30762.0], [73.0, 30764.0], [73.1, 30764.0], [73.2, 30773.0], [73.3, 30776.0], [73.4, 30779.0], [73.5, 30780.0], [73.6, 30791.0], [73.7, 30793.0], [73.8, 30796.0], [73.9, 30797.0], [74.0, 30816.0], [74.1, 30820.0], [74.2, 30838.0], [74.3, 30847.0], [74.4, 30856.0], [74.5, 30859.0], [74.6, 30867.0], [74.7, 30868.0], [74.8, 30868.0], [74.9, 30869.0], [75.0, 30872.0], [75.1, 30873.0], [75.2, 30873.0], [75.3, 30874.0], [75.4, 30874.0], [75.5, 30874.0], [75.6, 30879.0], [75.7, 30896.0], [75.8, 30901.0], [75.9, 30909.0], [76.0, 30913.0], [76.1, 30915.0], [76.2, 30915.0], [76.3, 30921.0], [76.4, 30925.0], [76.5, 30933.0], [76.6, 30935.0], [76.7, 30936.0], [76.8, 30938.0], [76.9, 30941.0], [77.0, 30941.0], [77.1, 30941.0], [77.2, 30941.0], [77.3, 30943.0], [77.4, 30943.0], [77.5, 30944.0], [77.6, 30944.0], [77.7, 30944.0], [77.8, 30949.0], [77.9, 30949.0], [78.0, 30959.0], [78.1, 30970.0], [78.2, 30974.0], [78.3, 30982.0], [78.4, 30983.0], [78.5, 30989.0], [78.6, 30998.0], [78.7, 30998.0], [78.8, 30999.0], [78.9, 31005.0], [79.0, 31009.0], [79.1, 31020.0], [79.2, 31030.0], [79.3, 31033.0], [79.4, 31035.0], [79.5, 31037.0], [79.6, 31039.0], [79.7, 31044.0], [79.8, 31052.0], [79.9, 31057.0], [80.0, 31061.0], [80.1, 31062.0], [80.2, 31062.0], [80.3, 31062.0], [80.4, 31063.0], [80.5, 31064.0], [80.6, 31064.0], [80.7, 31064.0], [80.8, 31065.0], [80.9, 31068.0], [81.0, 31068.0], [81.1, 31071.0], [81.2, 31082.0], [81.3, 31084.0], [81.4, 31084.0], [81.5, 31086.0], [81.6, 31092.0], [81.7, 31098.0], [81.8, 31102.0], [81.9, 31107.0], [82.0, 31108.0], [82.1, 31111.0], [82.2, 31113.0], [82.3, 31122.0], [82.4, 31125.0], [82.5, 31134.0], [82.6, 31143.0], [82.7, 31146.0], [82.8, 31147.0], [82.9, 31161.0], [83.0, 31170.0], [83.1, 31172.0], [83.2, 31173.0], [83.3, 31174.0], [83.4, 31177.0], [83.5, 31180.0], [83.6, 31180.0], [83.7, 31183.0], [83.8, 31194.0], [83.9, 31202.0], [84.0, 31204.0], [84.1, 31204.0], [84.2, 31209.0], [84.3, 31209.0], [84.4, 31211.0], [84.5, 31212.0], [84.6, 31213.0], [84.7, 31213.0], [84.8, 31214.0], [84.9, 31216.0], [85.0, 31224.0], [85.1, 31231.0], [85.2, 31233.0], [85.3, 31233.0], [85.4, 31237.0], [85.5, 31239.0], [85.6, 31245.0], [85.7, 31247.0], [85.8, 31249.0], [85.9, 31251.0], [86.0, 31256.0], [86.1, 31271.0], [86.2, 31278.0], [86.3, 31287.0], [86.4, 31287.0], [86.5, 31290.0], [86.6, 31294.0], [86.7, 31295.0], [86.8, 31306.0], [86.9, 31313.0], [87.0, 31315.0], [87.1, 31317.0], [87.2, 31323.0], [87.3, 31331.0], [87.4, 31337.0], [87.5, 31340.0], [87.6, 31351.0], [87.7, 31356.0], [87.8, 31357.0], [87.9, 31357.0], [88.0, 31357.0], [88.1, 31361.0], [88.2, 31368.0], [88.3, 31372.0], [88.4, 31372.0], [88.5, 31373.0], [88.6, 31374.0], [88.7, 31381.0], [88.8, 31381.0], [88.9, 31388.0], [89.0, 31389.0], [89.1, 31403.0], [89.2, 31407.0], [89.3, 31407.0], [89.4, 31408.0], [89.5, 31410.0], [89.6, 31414.0], [89.7, 31415.0], [89.8, 31418.0], [89.9, 31422.0], [90.0, 31423.0], [90.1, 31424.0], [90.2, 31428.0], [90.3, 31428.0], [90.4, 31429.0], [90.5, 31429.0], [90.6, 31433.0], [90.7, 31437.0], [90.8, 31438.0], [90.9, 31443.0], [91.0, 31443.0], [91.1, 31448.0], [91.2, 31452.0], [91.3, 31461.0], [91.4, 31462.0], [91.5, 31465.0], [91.6, 31467.0], [91.7, 31472.0], [91.8, 31476.0], [91.9, 31488.0], [92.0, 31490.0], [92.1, 31500.0], [92.2, 31509.0], [92.3, 31509.0], [92.4, 31510.0], [92.5, 31523.0], [92.6, 31532.0], [92.7, 31553.0], [92.8, 31570.0], [92.9, 31586.0], [93.0, 31598.0], [93.1, 31608.0], [93.2, 31612.0], [93.3, 31615.0], [93.4, 31630.0], [93.5, 31639.0], [93.6, 31641.0], [93.7, 31645.0], [93.8, 31649.0], [93.9, 31653.0], [94.0, 31686.0], [94.1, 31714.0], [94.2, 31732.0], [94.3, 31739.0], [94.4, 31741.0], [94.5, 31742.0], [94.6, 31751.0], [94.7, 31755.0], [94.8, 31762.0], [94.9, 31765.0], [95.0, 31778.0], [95.1, 31788.0], [95.2, 31826.0], [95.3, 31834.0], [95.4, 31863.0], [95.5, 31863.0], [95.6, 31867.0], [95.7, 31868.0], [95.8, 31871.0], [95.9, 31873.0], [96.0, 31873.0], [96.1, 31875.0], [96.2, 31908.0], [96.3, 31923.0], [96.4, 31930.0], [96.5, 31935.0], [96.6, 31936.0], [96.7, 31939.0], [96.8, 31955.0], [96.9, 31955.0], [97.0, 31960.0], [97.1, 31977.0], [97.2, 31989.0], [97.3, 32018.0], [97.4, 32024.0], [97.5, 32031.0], [97.6, 32051.0], [97.7, 32055.0], [97.8, 32064.0], [97.9, 32070.0], [98.0, 32072.0], [98.1, 32077.0], [98.2, 32083.0], [98.3, 32095.0], [98.4, 32096.0], [98.5, 32097.0], [98.6, 32102.0], [98.7, 32128.0], [98.8, 32128.0], [98.9, 32132.0], [99.0, 32133.0], [99.1, 32133.0], [99.2, 32136.0], [99.3, 32137.0], [99.4, 32144.0], [99.5, 32145.0], [99.6, 32180.0], [99.7, 32181.0], [99.8, 32184.0], [99.9, 32200.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 13700.0, "maxY": 46.0, "series": [{"data": [[13700.0, 1.0], [14100.0, 2.0], [14300.0, 1.0], [14200.0, 1.0], [14400.0, 1.0], [14600.0, 2.0], [14800.0, 1.0], [14900.0, 1.0], [15100.0, 1.0], [15200.0, 3.0], [15400.0, 1.0], [15500.0, 1.0], [15900.0, 2.0], [16400.0, 1.0], [16600.0, 1.0], [16700.0, 3.0], [16500.0, 1.0], [17000.0, 1.0], [17100.0, 1.0], [17200.0, 1.0], [17900.0, 4.0], [17500.0, 1.0], [17700.0, 1.0], [17800.0, 1.0], [18200.0, 1.0], [17600.0, 1.0], [18400.0, 1.0], [18600.0, 1.0], [19000.0, 3.0], [18900.0, 2.0], [18500.0, 3.0], [18700.0, 2.0], [19400.0, 3.0], [19200.0, 4.0], [19600.0, 4.0], [19700.0, 6.0], [19500.0, 1.0], [20200.0, 2.0], [19800.0, 2.0], [19900.0, 3.0], [20400.0, 2.0], [20100.0, 1.0], [20700.0, 3.0], [20800.0, 2.0], [20500.0, 6.0], [20600.0, 4.0], [21000.0, 9.0], [21200.0, 3.0], [20900.0, 2.0], [21100.0, 3.0], [21500.0, 6.0], [21400.0, 2.0], [22300.0, 2.0], [21600.0, 5.0], [21800.0, 5.0], [21700.0, 1.0], [22200.0, 4.0], [22100.0, 2.0], [22400.0, 3.0], [22000.0, 2.0], [22500.0, 4.0], [22600.0, 3.0], [22800.0, 6.0], [23100.0, 2.0], [22900.0, 4.0], [23000.0, 3.0], [23200.0, 4.0], [23300.0, 1.0], [23500.0, 2.0], [23700.0, 2.0], [23600.0, 4.0], [24100.0, 2.0], [23800.0, 2.0], [24500.0, 2.0], [24200.0, 1.0], [24300.0, 1.0], [24000.0, 1.0], [23900.0, 1.0], [24400.0, 1.0], [25000.0, 2.0], [24700.0, 2.0], [24900.0, 2.0], [25400.0, 2.0], [25200.0, 2.0], [25500.0, 1.0], [25300.0, 1.0], [25800.0, 2.0], [25700.0, 6.0], [25600.0, 2.0], [26100.0, 6.0], [26200.0, 2.0], [26300.0, 2.0], [26000.0, 1.0], [25900.0, 1.0], [26600.0, 4.0], [26500.0, 2.0], [26400.0, 2.0], [26700.0, 2.0], [26800.0, 1.0], [26900.0, 1.0], [27000.0, 2.0], [27600.0, 8.0], [27400.0, 1.0], [27500.0, 5.0], [27300.0, 2.0], [27900.0, 9.0], [27700.0, 9.0], [28100.0, 9.0], [27800.0, 1.0], [28300.0, 12.0], [28400.0, 9.0], [28000.0, 8.0], [28200.0, 9.0], [28600.0, 13.0], [28500.0, 4.0], [28800.0, 16.0], [28700.0, 18.0], [28900.0, 14.0], [29000.0, 9.0], [29100.0, 7.0], [29200.0, 12.0], [29300.0, 10.0], [29400.0, 16.0], [29500.0, 21.0], [29600.0, 15.0], [29900.0, 23.0], [29700.0, 10.0], [30000.0, 35.0], [29800.0, 20.0], [30100.0, 31.0], [30200.0, 24.0], [30400.0, 20.0], [30500.0, 24.0], [30600.0, 22.0], [30700.0, 46.0], [30300.0, 13.0], [31500.0, 10.0], [30800.0, 18.0], [30900.0, 31.0], [31000.0, 29.0], [31100.0, 22.0], [31200.0, 29.0], [31300.0, 23.0], [31400.0, 30.0], [31600.0, 10.0], [31700.0, 11.0], [31800.0, 10.0], [31900.0, 11.0], [32000.0, 13.0], [32100.0, 13.0], [32200.0, 1.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 502.9, "minX": 1.75792242E12, "maxY": 502.9, "series": [{"data": [[1.75792242E12, 502.9]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792242E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 14081.5, "minX": 1.0, "maxY": 32182.5, "series": [{"data": [[2.0, 31742.0], [3.0, 31653.0], [4.0, 32072.0], [6.0, 32182.5], [7.0, 32133.0], [12.0, 32002.8], [13.0, 31630.0], [14.0, 31868.0], [15.0, 31739.0], [16.0, 32180.0], [17.0, 32145.0], [19.0, 31909.0], [21.0, 31909.0], [23.0, 31799.0], [24.0, 32083.0], [25.0, 31873.0], [26.0, 32128.0], [27.0, 31936.0], [28.0, 32144.0], [29.0, 32133.0], [30.0, 31424.0], [33.0, 32128.0], [32.0, 32117.0], [35.0, 31639.0], [34.0, 32055.0], [36.0, 31686.0], [44.0, 31509.0], [47.0, 31762.0], [46.0, 32007.125], [49.0, 31598.0], [48.0, 32051.0], [51.0, 31957.5], [53.0, 31977.0], [52.0, 32024.0], [55.0, 31245.0], [54.0, 31908.0], [57.0, 31939.0], [56.0, 31871.0], [59.0, 31935.0], [58.0, 31368.0], [63.0, 31697.25], [67.0, 31874.0], [65.0, 31834.0], [64.0, 31863.0], [70.0, 31465.0], [69.0, 31788.0], [68.0, 31357.0], [75.0, 31755.0], [74.0, 31402.0], [72.0, 31570.0], [78.0, 31433.0], [77.0, 31751.0], [76.0, 31586.0], [83.0, 31472.0], [82.0, 31645.0], [81.0, 31510.0], [80.0, 31473.0], [86.0, 31381.0], [85.0, 31084.0], [84.0, 31216.0], [91.0, 31361.5], [90.0, 31202.0], [88.0, 31533.5], [95.0, 31612.0], [94.0, 31553.0], [93.0, 31388.0], [92.0, 31641.0], [99.0, 31373.0], [98.0, 31381.0], [97.0, 31237.0], [96.0, 31570.0], [103.0, 30941.0], [102.0, 31523.0], [101.0, 31509.0], [100.0, 30949.0], [107.0, 31500.0], [106.0, 31207.333333333332], [109.0, 31461.0], [108.0, 31429.0], [115.0, 31249.0], [114.0, 31307.8], [119.0, 31098.0], [118.0, 30901.0], [117.0, 31220.0], [123.0, 30998.0], [122.0, 31211.0], [121.0, 31448.0], [120.0, 31452.0], [127.0, 31438.0], [126.0, 31186.0], [135.0, 31429.0], [134.0, 31440.0], [132.0, 31283.0], [129.0, 30868.0], [128.0, 30833.0], [141.0, 31256.0], [140.0, 31423.0], [139.0, 31357.5], [137.0, 31281.0], [151.0, 31252.222222222223], [147.0, 30974.0], [159.0, 31372.0], [157.0, 31064.0], [156.0, 30970.0], [155.0, 31323.5], [153.0, 31407.0], [152.0, 30838.0], [166.0, 31253.4], [161.0, 31052.0], [160.0, 31306.0], [174.0, 31340.0], [173.0, 31010.0], [171.0, 31157.0], [183.0, 31233.0], [182.0, 31301.0], [180.0, 31313.0], [179.0, 30954.0], [177.0, 31180.0], [176.0, 31029.5], [190.0, 31056.333333333332], [187.0, 31033.0], [186.0, 31271.0], [185.0, 31143.0], [184.0, 31294.0], [196.0, 31251.0], [195.0, 31082.0], [194.0, 31084.0], [193.0, 31039.0], [207.0, 31212.0], [205.0, 31009.8], [200.0, 30980.0], [215.0, 30820.0], [213.0, 30764.0], [212.0, 30924.833333333336], [222.0, 31156.666666666668], [219.0, 31043.75], [231.0, 31012.375], [229.0, 31037.0], [237.0, 31108.0], [236.0, 31018.5], [232.0, 30959.0], [243.0, 30865.666666666668], [248.0, 30854.6], [271.0, 30731.0], [267.0, 30816.666666666668], [264.0, 30863.666666666668], [261.0, 30988.5], [260.0, 30617.0], [259.0, 31064.0], [257.0, 31065.0], [256.0, 30828.25], [284.0, 30911.666666666668], [281.0, 30624.0], [280.0, 30370.0], [279.0, 30726.0], [276.0, 30941.0], [275.0, 30739.0], [274.0, 30279.0], [273.0, 30741.0], [295.0, 30530.5], [294.0, 30823.5], [292.0, 30614.5], [291.0, 30919.666666666668], [288.0, 30762.5], [317.0, 30450.0], [315.0, 30457.6], [313.0, 30386.0], [307.0, 30826.0], [305.0, 30745.6], [333.0, 30313.0], [332.0, 30458.5], [330.0, 30699.0], [329.0, 30545.666666666668], [326.0, 30764.0], [325.0, 30627.0], [323.0, 30308.5], [321.0, 30498.25], [350.0, 30750.0], [351.0, 30750.0], [348.0, 30752.0], [347.0, 30745.0], [345.0, 30722.0], [344.0, 30350.0], [341.0, 30364.333333333332], [339.0, 30727.0], [338.0, 30679.5], [336.0, 30612.0], [362.0, 30545.0], [361.0, 30318.666666666668], [359.0, 30743.0], [358.0, 30642.0], [352.0, 30351.0], [374.0, 30433.0], [369.0, 30381.2], [368.0, 30423.0], [398.0, 30273.0], [399.0, 30348.0], [396.0, 30114.0], [394.0, 30394.0], [393.0, 30051.0], [392.0, 30447.0], [391.0, 30456.625], [389.0, 30573.0], [387.0, 30744.0], [386.0, 30397.0], [385.0, 30742.0], [384.0, 30739.0], [413.0, 30245.6], [409.0, 30352.166666666668], [404.0, 30555.0], [403.0, 30346.0], [402.0, 30494.0], [425.0, 30288.0], [428.0, 30309.0], [427.0, 30267.333333333332], [423.0, 30123.0], [422.0, 30261.0], [421.0, 30189.0], [420.0, 30397.0], [417.0, 30546.0], [416.0, 30235.5], [447.0, 29939.5], [445.0, 29946.0], [439.0, 30001.0], [437.0, 30287.5], [435.0, 30231.5], [433.0, 30228.0], [432.0, 30153.333333333332], [460.0, 29869.0], [458.0, 30116.666666666668], [452.0, 29937.0], [451.0, 29968.285714285714], [448.0, 30002.0], [479.0, 29978.0], [478.0, 29552.5], [475.0, 30056.0], [474.0, 29978.0], [468.0, 29742.5], [492.0, 29984.0], [491.0, 29975.0], [489.0, 29856.25], [487.0, 30103.0], [486.0, 29969.0], [484.0, 30188.0], [482.0, 30051.0], [480.0, 30188.0], [510.0, 29421.0], [509.0, 29843.0], [500.0, 29441.0], [499.0, 29871.0], [498.0, 29529.0], [497.0, 29795.0], [496.0, 29858.0], [514.0, 29990.0], [526.0, 29775.0], [523.0, 29720.666666666668], [521.0, 29867.285714285717], [520.0, 30005.0], [517.0, 29982.0], [516.0, 29856.0], [515.0, 29820.0], [512.0, 30119.0], [571.0, 29293.0], [569.0, 29689.0], [567.0, 29402.0], [563.0, 29992.0], [561.0, 29796.047619047622], [560.0, 29529.0], [559.0, 29629.0], [556.0, 29849.5], [554.0, 29817.5], [553.0, 30062.0], [552.0, 29563.0], [593.0, 29177.3], [606.0, 29131.88888888889], [597.0, 28917.0], [596.0, 29185.5], [594.0, 29223.0], [590.0, 29555.0], [584.0, 29077.0], [589.0, 29491.0], [580.0, 29424.0], [579.0, 29568.5], [577.0, 29630.0], [576.0, 29525.42857142857], [627.0, 28765.166666666668], [638.0, 29075.0], [639.0, 29141.0], [626.0, 28744.0], [624.0, 29300.0], [637.0, 29211.0], [636.0, 28831.0], [632.0, 28956.0], [613.0, 29258.0], [612.0, 28737.0], [611.0, 29112.2], [622.0, 28609.0], [619.0, 29302.0], [617.0, 28898.5], [631.0, 28762.5], [629.0, 29296.0], [628.0, 29263.0], [668.0, 28723.444444444445], [659.0, 28876.0], [654.0, 28429.0], [653.0, 28651.5], [649.0, 28793.333333333332], [647.0, 28619.333333333332], [645.0, 28794.0], [676.0, 28899.0], [701.0, 28237.0], [700.0, 28517.2], [695.0, 28524.375], [687.0, 28903.0], [686.0, 28627.4], [681.0, 28437.0], [680.0, 28883.5], [675.0, 28471.0], [673.0, 28664.0], [722.0, 27958.5], [728.0, 27750.0], [727.0, 27948.0], [726.0, 28058.666666666668], [723.0, 28079.0], [720.0, 28466.0], [719.0, 28211.0], [705.0, 28133.0], [704.0, 28424.333333333332], [707.0, 28609.0], [706.0, 28088.0], [710.0, 28405.5], [708.0, 28352.0], [718.0, 27741.0], [717.0, 28226.0], [716.0, 28242.0], [715.0, 27391.0], [714.0, 28084.5], [712.0, 28079.0], [766.0, 27029.0], [767.0, 27733.0], [765.0, 27627.0], [764.0, 27567.2], [759.0, 27789.875], [758.0, 27886.0], [756.0, 28181.0], [754.0, 27651.0], [751.0, 27948.0], [738.0, 28235.0], [736.0, 28028.124999999996], [740.0, 27953.0], [739.0, 27769.0], [750.0, 27692.0], [745.0, 27657.8], [785.0, 26678.0], [797.0, 25600.0], [796.0, 25494.0], [795.0, 25970.5], [793.0, 25969.0], [783.0, 26123.0], [768.0, 27071.0], [770.0, 26756.0], [769.0, 26689.0], [773.0, 26827.0], [772.0, 26809.0], [782.0, 26414.5], [780.0, 26393.5], [778.0, 26285.0], [776.0, 26256.0], [789.0, 26352.0], [788.0, 25939.0], [786.0, 26602.0], [784.0, 26720.0], [825.0, 24170.0], [829.0, 24128.0], [830.0, 23705.0], [816.0, 23987.0], [818.0, 25021.0], [817.0, 24704.0], [820.0, 23582.0], [819.0, 23687.0], [828.0, 23829.0], [827.0, 23035.0], [826.0, 23506.0], [824.0, 24509.0], [807.0, 25579.0], [806.0, 24960.0], [805.0, 25206.0], [804.0, 25774.0], [803.0, 25568.0], [801.0, 25793.0], [815.0, 24757.0], [814.0, 24536.0], [813.0, 24725.5], [811.0, 24308.0], [810.0, 24921.0], [809.0, 25441.0], [808.0, 25294.0], [823.0, 24279.0], [822.0, 23944.5], [860.0, 22455.0], [861.0, 22892.0], [859.0, 22619.5], [857.0, 23125.0], [856.0, 22646.0], [838.0, 23260.666666666668], [832.0, 23464.0], [843.0, 22931.0], [841.0, 23663.0], [840.0, 23318.5], [852.0, 22881.0], [850.0, 22649.0], [849.0, 23011.0], [848.0, 22862.4], [884.0, 21718.0], [895.0, 21410.5], [887.0, 21481.0], [886.0, 21539.0], [885.0, 21555.0], [883.0, 21624.5], [881.0, 21042.0], [880.0, 21543.0], [879.0, 21665.0], [867.0, 22198.666666666668], [864.0, 22390.666666666668], [870.0, 22162.0], [868.0, 22146.0], [876.0, 22153.0], [875.0, 21858.0], [874.0, 21818.0], [873.0, 21874.0], [872.0, 22289.5], [922.0, 20422.0], [924.0, 20372.5], [921.0, 20877.0], [920.0, 20547.0], [918.0, 19989.0], [917.0, 20720.0], [914.0, 20684.0], [912.0, 20941.5], [910.0, 21261.0], [897.0, 20875.5], [901.0, 20545.0], [899.0, 21400.5], [909.0, 20900.0], [908.0, 21078.5], [958.0, 19413.0], [959.0, 18587.0], [944.0, 19465.5], [947.0, 19749.0], [946.0, 19370.0], [957.0, 18894.0], [954.0, 19061.0], [953.0, 18532.0], [952.0, 18737.0], [942.0, 19580.0], [928.0, 20188.0], [933.0, 20159.5], [929.0, 19714.0], [935.0, 19922.0], [934.0, 19947.0], [941.0, 20078.5], [939.0, 20254.0], [938.0, 19789.0], [937.0, 19412.5], [951.0, 19284.0], [950.0, 19298.0], [949.0, 19637.0], [948.0, 19622.0], [984.0, 15915.0], [988.0, 15294.0], [991.0, 14899.0], [977.0, 16723.0], [976.0, 17098.0], [981.0, 16605.0], [980.0, 16681.666666666668], [990.0, 15127.0], [989.0, 15209.0], [987.0, 15431.0], [986.0, 15938.0], [985.0, 15282.0], [975.0, 17193.0], [960.0, 18729.0], [962.0, 18945.0], [961.0, 18563.0], [965.0, 17927.0], [964.0, 18855.5], [967.0, 18237.0], [966.0, 17675.0], [974.0, 17978.0], [973.0, 17706.5], [983.0, 15571.0], [982.0, 16417.0], [1000.0, 14185.0], [999.0, 14318.0], [998.0, 14081.5], [996.0, 14167.0], [995.0, 14457.0], [993.0, 14612.0], [992.0, 14978.0], [1.0, 32018.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}, {"data": [[502.8979999999995, 28175.359]], "isOverall": false, "label": "สร้าง Visit-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8883.333333333334, "minX": 1.75792242E12, "maxY": 11683.333333333334, "series": [{"data": [[1.75792242E12, 11683.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75792242E12, 8883.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792242E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 28175.359, "minX": 1.75792242E12, "maxY": 28175.359, "series": [{"data": [[1.75792242E12, 28175.359]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792242E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 28175.326999999976, "minX": 1.75792242E12, "maxY": 28175.326999999976, "series": [{"data": [[1.75792242E12, 28175.326999999976]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792242E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2371.7429999999986, "minX": 1.75792242E12, "maxY": 2371.7429999999986, "series": [{"data": [[1.75792242E12, 2371.7429999999986]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792242E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 13728.0, "minX": 1.75792242E12, "maxY": 32200.0, "series": [{"data": [[1.75792242E12, 32200.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75792242E12, 31422.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75792242E12, 32132.99]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75792242E12, 31777.35]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75792242E12, 13728.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75792242E12, 29897.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792242E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14185.0, "minX": 5.0, "maxY": 32041.0, "series": [{"data": [[8.0, 14938.5], [34.0, 21078.0], [9.0, 17837.0], [48.0, 32041.0], [13.0, 23846.0], [216.0, 31210.0], [16.0, 21700.0], [17.0, 27029.0], [297.0, 30189.0], [5.0, 14185.0], [91.0, 28211.0], [6.0, 16732.5], [24.0, 22060.5], [25.0, 26127.0], [107.0, 29053.0], [7.0, 15915.0], [30.0, 22946.0], [31.0, 19828.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 297.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 14178.0, "minX": 5.0, "maxY": 32041.0, "series": [{"data": [[8.0, 14938.5], [34.0, 21077.5], [9.0, 17837.0], [48.0, 32041.0], [13.0, 23846.0], [216.0, 31210.0], [16.0, 21699.0], [17.0, 27029.0], [297.0, 30189.0], [5.0, 14178.0], [91.0, 28211.0], [6.0, 16732.5], [24.0, 22060.5], [25.0, 26127.0], [107.0, 29053.0], [7.0, 15915.0], [30.0, 22946.0], [31.0, 19828.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 297.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792242E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792242E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792242E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792242E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792242E12, 16.666666666666668]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792242E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792242E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792242E12, 16.666666666666668]], "isOverall": false, "label": "สร้าง Visit-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792242E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792242E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792242E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792242E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

