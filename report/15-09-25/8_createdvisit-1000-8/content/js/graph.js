/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 324.0, "minX": 0.0, "maxY": 29773.0, "series": [{"data": [[0.0, 324.0], [0.1, 605.0], [0.2, 661.0], [0.3, 661.0], [0.4, 749.0], [0.5, 772.0], [0.6, 1670.0], [0.7, 1839.0], [0.8, 1854.0], [0.9, 1991.0], [1.0, 2127.0], [1.1, 2128.0], [1.2, 2587.0], [1.3, 2635.0], [1.4, 2635.0], [1.5, 2653.0], [1.6, 2730.0], [1.7, 2894.0], [1.8, 3195.0], [1.9, 3239.0], [2.0, 3405.0], [2.1, 3446.0], [2.2, 3692.0], [2.3, 3791.0], [2.4, 3960.0], [2.5, 3988.0], [2.6, 4025.0], [2.7, 4130.0], [2.8, 4176.0], [2.9, 4218.0], [3.0, 4244.0], [3.1, 4292.0], [3.2, 4371.0], [3.3, 4468.0], [3.4, 4486.0], [3.5, 4536.0], [3.6, 4537.0], [3.7, 4549.0], [3.8, 4601.0], [3.9, 4604.0], [4.0, 4677.0], [4.1, 4694.0], [4.2, 4731.0], [4.3, 4781.0], [4.4, 4943.0], [4.5, 4964.0], [4.6, 5011.0], [4.7, 5047.0], [4.8, 5074.0], [4.9, 5101.0], [5.0, 5290.0], [5.1, 5443.0], [5.2, 5586.0], [5.3, 5656.0], [5.4, 5669.0], [5.5, 5705.0], [5.6, 5790.0], [5.7, 5816.0], [5.8, 5994.0], [5.9, 6047.0], [6.0, 6172.0], [6.1, 6320.0], [6.2, 6419.0], [6.3, 6506.0], [6.4, 6523.0], [6.5, 6527.0], [6.6, 6545.0], [6.7, 6557.0], [6.8, 6638.0], [6.9, 6652.0], [7.0, 6670.0], [7.1, 6740.0], [7.2, 6755.0], [7.3, 6830.0], [7.4, 6845.0], [7.5, 6913.0], [7.6, 6919.0], [7.7, 6925.0], [7.8, 6956.0], [7.9, 6994.0], [8.0, 7010.0], [8.1, 7017.0], [8.2, 7019.0], [8.3, 7124.0], [8.4, 7197.0], [8.5, 7247.0], [8.6, 7260.0], [8.7, 7291.0], [8.8, 7309.0], [8.9, 7337.0], [9.0, 7406.0], [9.1, 7425.0], [9.2, 7435.0], [9.3, 7440.0], [9.4, 7503.0], [9.5, 7527.0], [9.6, 7528.0], [9.7, 7545.0], [9.8, 7551.0], [9.9, 7751.0], [10.0, 7762.0], [10.1, 7762.0], [10.2, 7873.0], [10.3, 7962.0], [10.4, 7977.0], [10.5, 8002.0], [10.6, 8039.0], [10.7, 8070.0], [10.8, 8097.0], [10.9, 8147.0], [11.0, 8172.0], [11.1, 8223.0], [11.2, 8244.0], [11.3, 8305.0], [11.4, 8309.0], [11.5, 8375.0], [11.6, 8390.0], [11.7, 8466.0], [11.8, 8513.0], [11.9, 8515.0], [12.0, 8538.0], [12.1, 8567.0], [12.2, 8584.0], [12.3, 8607.0], [12.4, 8624.0], [12.5, 8653.0], [12.6, 8680.0], [12.7, 8693.0], [12.8, 8729.0], [12.9, 8866.0], [13.0, 8876.0], [13.1, 8953.0], [13.2, 8959.0], [13.3, 9029.0], [13.4, 9033.0], [13.5, 9070.0], [13.6, 9091.0], [13.7, 9094.0], [13.8, 9111.0], [13.9, 9126.0], [14.0, 9139.0], [14.1, 9154.0], [14.2, 9159.0], [14.3, 9163.0], [14.4, 9164.0], [14.5, 9231.0], [14.6, 9238.0], [14.7, 9239.0], [14.8, 9261.0], [14.9, 9321.0], [15.0, 9353.0], [15.1, 9358.0], [15.2, 9370.0], [15.3, 9428.0], [15.4, 9433.0], [15.5, 9496.0], [15.6, 9552.0], [15.7, 9561.0], [15.8, 9616.0], [15.9, 9619.0], [16.0, 9720.0], [16.1, 9758.0], [16.2, 9818.0], [16.3, 9839.0], [16.4, 9890.0], [16.5, 10062.0], [16.6, 10125.0], [16.7, 10132.0], [16.8, 10135.0], [16.9, 10136.0], [17.0, 10215.0], [17.1, 10234.0], [17.2, 10255.0], [17.3, 10302.0], [17.4, 10320.0], [17.5, 10364.0], [17.6, 10365.0], [17.7, 10415.0], [17.8, 10420.0], [17.9, 10434.0], [18.0, 10443.0], [18.1, 10451.0], [18.2, 10506.0], [18.3, 10507.0], [18.4, 10510.0], [18.5, 10527.0], [18.6, 10564.0], [18.7, 10614.0], [18.8, 10707.0], [18.9, 10720.0], [19.0, 10738.0], [19.1, 10759.0], [19.2, 10759.0], [19.3, 10788.0], [19.4, 10793.0], [19.5, 10841.0], [19.6, 10865.0], [19.7, 10868.0], [19.8, 10889.0], [19.9, 10896.0], [20.0, 10905.0], [20.1, 10924.0], [20.2, 10931.0], [20.3, 10938.0], [20.4, 10970.0], [20.5, 10977.0], [20.6, 10993.0], [20.7, 11078.0], [20.8, 11107.0], [20.9, 11113.0], [21.0, 11117.0], [21.1, 11141.0], [21.2, 11401.0], [21.3, 11515.0], [21.4, 11516.0], [21.5, 11576.0], [21.6, 11600.0], [21.7, 11645.0], [21.8, 11693.0], [21.9, 11699.0], [22.0, 11787.0], [22.1, 11946.0], [22.2, 11948.0], [22.3, 11976.0], [22.4, 11989.0], [22.5, 11999.0], [22.6, 12000.0], [22.7, 12005.0], [22.8, 12031.0], [22.9, 12032.0], [23.0, 12059.0], [23.1, 12075.0], [23.2, 12075.0], [23.3, 12166.0], [23.4, 12181.0], [23.5, 12216.0], [23.6, 12272.0], [23.7, 12293.0], [23.8, 12324.0], [23.9, 12359.0], [24.0, 12368.0], [24.1, 12438.0], [24.2, 12451.0], [24.3, 12454.0], [24.4, 12471.0], [24.5, 12521.0], [24.6, 12531.0], [24.7, 12553.0], [24.8, 12555.0], [24.9, 12579.0], [25.0, 12579.0], [25.1, 12583.0], [25.2, 12584.0], [25.3, 12594.0], [25.4, 12671.0], [25.5, 12757.0], [25.6, 12790.0], [25.7, 12830.0], [25.8, 12862.0], [25.9, 12913.0], [26.0, 12920.0], [26.1, 12968.0], [26.2, 12990.0], [26.3, 13021.0], [26.4, 13070.0], [26.5, 13110.0], [26.6, 13144.0], [26.7, 13175.0], [26.8, 13214.0], [26.9, 13253.0], [27.0, 13260.0], [27.1, 13288.0], [27.2, 13407.0], [27.3, 13467.0], [27.4, 13554.0], [27.5, 13558.0], [27.6, 13581.0], [27.7, 13618.0], [27.8, 13692.0], [27.9, 13720.0], [28.0, 13784.0], [28.1, 13818.0], [28.2, 13840.0], [28.3, 13901.0], [28.4, 13922.0], [28.5, 13932.0], [28.6, 13955.0], [28.7, 14065.0], [28.8, 14133.0], [28.9, 14195.0], [29.0, 14196.0], [29.1, 14226.0], [29.2, 14309.0], [29.3, 14311.0], [29.4, 14313.0], [29.5, 14346.0], [29.6, 14353.0], [29.7, 14373.0], [29.8, 14376.0], [29.9, 14386.0], [30.0, 14407.0], [30.1, 14442.0], [30.2, 14451.0], [30.3, 14538.0], [30.4, 14581.0], [30.5, 14667.0], [30.6, 14677.0], [30.7, 14697.0], [30.8, 14700.0], [30.9, 14857.0], [31.0, 14889.0], [31.1, 14892.0], [31.2, 14915.0], [31.3, 14936.0], [31.4, 14939.0], [31.5, 14958.0], [31.6, 14962.0], [31.7, 14974.0], [31.8, 15059.0], [31.9, 15065.0], [32.0, 15092.0], [32.1, 15106.0], [32.2, 15135.0], [32.3, 15170.0], [32.4, 15202.0], [32.5, 15214.0], [32.6, 15228.0], [32.7, 15232.0], [32.8, 15291.0], [32.9, 15349.0], [33.0, 15350.0], [33.1, 15377.0], [33.2, 15529.0], [33.3, 15541.0], [33.4, 15558.0], [33.5, 15585.0], [33.6, 15608.0], [33.7, 15613.0], [33.8, 15618.0], [33.9, 15668.0], [34.0, 15696.0], [34.1, 15739.0], [34.2, 15762.0], [34.3, 15776.0], [34.4, 15776.0], [34.5, 15788.0], [34.6, 15843.0], [34.7, 15843.0], [34.8, 15846.0], [34.9, 15847.0], [35.0, 15847.0], [35.1, 15851.0], [35.2, 15887.0], [35.3, 15895.0], [35.4, 15941.0], [35.5, 15992.0], [35.6, 15995.0], [35.7, 16004.0], [35.8, 16080.0], [35.9, 16080.0], [36.0, 16109.0], [36.1, 16115.0], [36.2, 16154.0], [36.3, 16174.0], [36.4, 16194.0], [36.5, 16224.0], [36.6, 16229.0], [36.7, 16231.0], [36.8, 16237.0], [36.9, 16255.0], [37.0, 16321.0], [37.1, 16328.0], [37.2, 16385.0], [37.3, 16465.0], [37.4, 16469.0], [37.5, 16497.0], [37.6, 16529.0], [37.7, 16582.0], [37.8, 16596.0], [37.9, 16630.0], [38.0, 16654.0], [38.1, 16665.0], [38.2, 16759.0], [38.3, 16760.0], [38.4, 16912.0], [38.5, 16963.0], [38.6, 17011.0], [38.7, 17171.0], [38.8, 17177.0], [38.9, 17204.0], [39.0, 17204.0], [39.1, 17228.0], [39.2, 17393.0], [39.3, 17510.0], [39.4, 17525.0], [39.5, 17547.0], [39.6, 17549.0], [39.7, 17580.0], [39.8, 17600.0], [39.9, 17625.0], [40.0, 17654.0], [40.1, 17749.0], [40.2, 17789.0], [40.3, 17840.0], [40.4, 17886.0], [40.5, 17894.0], [40.6, 17897.0], [40.7, 18024.0], [40.8, 18086.0], [40.9, 18086.0], [41.0, 18086.0], [41.1, 18273.0], [41.2, 18280.0], [41.3, 18285.0], [41.4, 18302.0], [41.5, 18335.0], [41.6, 18375.0], [41.7, 18420.0], [41.8, 18424.0], [41.9, 18474.0], [42.0, 18561.0], [42.1, 18564.0], [42.2, 18610.0], [42.3, 18625.0], [42.4, 18626.0], [42.5, 18635.0], [42.6, 18636.0], [42.7, 18674.0], [42.8, 18674.0], [42.9, 18690.0], [43.0, 18722.0], [43.1, 18723.0], [43.2, 18725.0], [43.3, 18732.0], [43.4, 18740.0], [43.5, 18760.0], [43.6, 18768.0], [43.7, 18772.0], [43.8, 18776.0], [43.9, 18784.0], [44.0, 18842.0], [44.1, 18848.0], [44.2, 18851.0], [44.3, 18893.0], [44.4, 18939.0], [44.5, 18942.0], [44.6, 19005.0], [44.7, 19006.0], [44.8, 19006.0], [44.9, 19066.0], [45.0, 19071.0], [45.1, 19074.0], [45.2, 19102.0], [45.3, 19125.0], [45.4, 19140.0], [45.5, 19140.0], [45.6, 19146.0], [45.7, 19170.0], [45.8, 19170.0], [45.9, 19172.0], [46.0, 19190.0], [46.1, 19202.0], [46.2, 19210.0], [46.3, 19214.0], [46.4, 19227.0], [46.5, 19240.0], [46.6, 19240.0], [46.7, 19241.0], [46.8, 19242.0], [46.9, 19245.0], [47.0, 19246.0], [47.1, 19246.0], [47.2, 19247.0], [47.3, 19247.0], [47.4, 19250.0], [47.5, 19255.0], [47.6, 19256.0], [47.7, 19290.0], [47.8, 19300.0], [47.9, 19304.0], [48.0, 19306.0], [48.1, 19310.0], [48.2, 19316.0], [48.3, 19347.0], [48.4, 19460.0], [48.5, 19463.0], [48.6, 19476.0], [48.7, 19510.0], [48.8, 19522.0], [48.9, 19529.0], [49.0, 19576.0], [49.1, 19596.0], [49.2, 19611.0], [49.3, 19675.0], [49.4, 19700.0], [49.5, 19731.0], [49.6, 19748.0], [49.7, 19751.0], [49.8, 19781.0], [49.9, 19837.0], [50.0, 19844.0], [50.1, 19855.0], [50.2, 19887.0], [50.3, 19891.0], [50.4, 19929.0], [50.5, 19979.0], [50.6, 20005.0], [50.7, 20006.0], [50.8, 20008.0], [50.9, 20016.0], [51.0, 20029.0], [51.1, 20049.0], [51.2, 20054.0], [51.3, 20055.0], [51.4, 20058.0], [51.5, 20076.0], [51.6, 20082.0], [51.7, 20118.0], [51.8, 20118.0], [51.9, 20123.0], [52.0, 20141.0], [52.1, 20152.0], [52.2, 20156.0], [52.3, 20164.0], [52.4, 20165.0], [52.5, 20165.0], [52.6, 20184.0], [52.7, 20207.0], [52.8, 20253.0], [52.9, 20261.0], [53.0, 20266.0], [53.1, 20294.0], [53.2, 20375.0], [53.3, 20384.0], [53.4, 20400.0], [53.5, 20427.0], [53.6, 20432.0], [53.7, 20452.0], [53.8, 20494.0], [53.9, 20531.0], [54.0, 20536.0], [54.1, 20562.0], [54.2, 20567.0], [54.3, 20581.0], [54.4, 20581.0], [54.5, 20591.0], [54.6, 20605.0], [54.7, 20605.0], [54.8, 20647.0], [54.9, 20652.0], [55.0, 20666.0], [55.1, 20724.0], [55.2, 20725.0], [55.3, 20726.0], [55.4, 20731.0], [55.5, 20736.0], [55.6, 20746.0], [55.7, 20753.0], [55.8, 20775.0], [55.9, 20785.0], [56.0, 20789.0], [56.1, 20791.0], [56.2, 20793.0], [56.3, 20811.0], [56.4, 20821.0], [56.5, 20838.0], [56.6, 20844.0], [56.7, 20858.0], [56.8, 20862.0], [56.9, 20901.0], [57.0, 20916.0], [57.1, 20934.0], [57.2, 20940.0], [57.3, 20941.0], [57.4, 20960.0], [57.5, 20965.0], [57.6, 20975.0], [57.7, 20991.0], [57.8, 20993.0], [57.9, 21003.0], [58.0, 21011.0], [58.1, 21037.0], [58.2, 21047.0], [58.3, 21063.0], [58.4, 21075.0], [58.5, 21079.0], [58.6, 21094.0], [58.7, 21100.0], [58.8, 21122.0], [58.9, 21124.0], [59.0, 21139.0], [59.1, 21139.0], [59.2, 21169.0], [59.3, 21177.0], [59.4, 21232.0], [59.5, 21238.0], [59.6, 21247.0], [59.7, 21247.0], [59.8, 21259.0], [59.9, 21260.0], [60.0, 21297.0], [60.1, 21313.0], [60.2, 21342.0], [60.3, 21346.0], [60.4, 21360.0], [60.5, 21385.0], [60.6, 21385.0], [60.7, 21389.0], [60.8, 21389.0], [60.9, 21390.0], [61.0, 21398.0], [61.1, 21402.0], [61.2, 21420.0], [61.3, 21433.0], [61.4, 21456.0], [61.5, 21489.0], [61.6, 21499.0], [61.7, 21502.0], [61.8, 21513.0], [61.9, 21538.0], [62.0, 21564.0], [62.1, 21573.0], [62.2, 21585.0], [62.3, 21586.0], [62.4, 21594.0], [62.5, 21604.0], [62.6, 21614.0], [62.7, 21639.0], [62.8, 21639.0], [62.9, 21652.0], [63.0, 21660.0], [63.1, 21691.0], [63.2, 21691.0], [63.3, 21703.0], [63.4, 21712.0], [63.5, 21728.0], [63.6, 21744.0], [63.7, 21746.0], [63.8, 21795.0], [63.9, 21800.0], [64.0, 21816.0], [64.1, 21825.0], [64.2, 21859.0], [64.3, 21873.0], [64.4, 21882.0], [64.5, 21893.0], [64.6, 21899.0], [64.7, 21917.0], [64.8, 21924.0], [64.9, 21925.0], [65.0, 21934.0], [65.1, 21968.0], [65.2, 21980.0], [65.3, 21985.0], [65.4, 21994.0], [65.5, 21996.0], [65.6, 22009.0], [65.7, 22012.0], [65.8, 22031.0], [65.9, 22037.0], [66.0, 22046.0], [66.1, 22084.0], [66.2, 22095.0], [66.3, 22151.0], [66.4, 22157.0], [66.5, 22175.0], [66.6, 22185.0], [66.7, 22194.0], [66.8, 22197.0], [66.9, 22216.0], [67.0, 22217.0], [67.1, 22218.0], [67.2, 22218.0], [67.3, 22221.0], [67.4, 22223.0], [67.5, 22225.0], [67.6, 22225.0], [67.7, 22253.0], [67.8, 22255.0], [67.9, 22258.0], [68.0, 22258.0], [68.1, 22263.0], [68.2, 22266.0], [68.3, 22269.0], [68.4, 22276.0], [68.5, 22281.0], [68.6, 22285.0], [68.7, 22286.0], [68.8, 22288.0], [68.9, 22288.0], [69.0, 22292.0], [69.1, 22292.0], [69.2, 22296.0], [69.3, 22300.0], [69.4, 22329.0], [69.5, 22335.0], [69.6, 22336.0], [69.7, 22342.0], [69.8, 22349.0], [69.9, 22357.0], [70.0, 22364.0], [70.1, 22370.0], [70.2, 22372.0], [70.3, 22413.0], [70.4, 22428.0], [70.5, 22432.0], [70.6, 22436.0], [70.7, 22436.0], [70.8, 22462.0], [70.9, 22465.0], [71.0, 22472.0], [71.1, 22472.0], [71.2, 22489.0], [71.3, 22494.0], [71.4, 22537.0], [71.5, 22547.0], [71.6, 22549.0], [71.7, 22551.0], [71.8, 22557.0], [71.9, 22567.0], [72.0, 22570.0], [72.1, 22576.0], [72.2, 22577.0], [72.3, 22592.0], [72.4, 22598.0], [72.5, 22606.0], [72.6, 22617.0], [72.7, 22617.0], [72.8, 22625.0], [72.9, 22631.0], [73.0, 22645.0], [73.1, 22655.0], [73.2, 22668.0], [73.3, 22677.0], [73.4, 22696.0], [73.5, 22719.0], [73.6, 22721.0], [73.7, 22725.0], [73.8, 22735.0], [73.9, 22737.0], [74.0, 22744.0], [74.1, 22745.0], [74.2, 22760.0], [74.3, 22761.0], [74.4, 22766.0], [74.5, 22774.0], [74.6, 22806.0], [74.7, 22829.0], [74.8, 22832.0], [74.9, 22844.0], [75.0, 22853.0], [75.1, 22872.0], [75.2, 22872.0], [75.3, 22875.0], [75.4, 22886.0], [75.5, 22888.0], [75.6, 22915.0], [75.7, 22918.0], [75.8, 22921.0], [75.9, 22937.0], [76.0, 22945.0], [76.1, 22975.0], [76.2, 22978.0], [76.3, 22996.0], [76.4, 22999.0], [76.5, 23007.0], [76.6, 23009.0], [76.7, 23011.0], [76.8, 23012.0], [76.9, 23021.0], [77.0, 23037.0], [77.1, 23087.0], [77.2, 23176.0], [77.3, 23180.0], [77.4, 23207.0], [77.5, 23226.0], [77.6, 23235.0], [77.7, 23252.0], [77.8, 23277.0], [77.9, 23298.0], [78.0, 23330.0], [78.1, 23331.0], [78.2, 23333.0], [78.3, 23342.0], [78.4, 23344.0], [78.5, 23347.0], [78.6, 23365.0], [78.7, 23392.0], [78.8, 23434.0], [78.9, 23436.0], [79.0, 23446.0], [79.1, 23449.0], [79.2, 23463.0], [79.3, 23466.0], [79.4, 23473.0], [79.5, 23483.0], [79.6, 23499.0], [79.7, 23503.0], [79.8, 23510.0], [79.9, 23516.0], [80.0, 23586.0], [80.1, 23611.0], [80.2, 23629.0], [80.3, 23664.0], [80.4, 23691.0], [80.5, 23700.0], [80.6, 23736.0], [80.7, 23767.0], [80.8, 23791.0], [80.9, 23825.0], [81.0, 23846.0], [81.1, 23869.0], [81.2, 23879.0], [81.3, 23912.0], [81.4, 23915.0], [81.5, 23916.0], [81.6, 23918.0], [81.7, 23919.0], [81.8, 23922.0], [81.9, 23929.0], [82.0, 23929.0], [82.1, 23936.0], [82.2, 23939.0], [82.3, 23993.0], [82.4, 23998.0], [82.5, 24006.0], [82.6, 24013.0], [82.7, 24016.0], [82.8, 24059.0], [82.9, 24077.0], [83.0, 24098.0], [83.1, 24112.0], [83.2, 24170.0], [83.3, 24171.0], [83.4, 24173.0], [83.5, 24174.0], [83.6, 24188.0], [83.7, 24258.0], [83.8, 24261.0], [83.9, 24262.0], [84.0, 24270.0], [84.1, 24275.0], [84.2, 24278.0], [84.3, 24331.0], [84.4, 24339.0], [84.5, 24341.0], [84.6, 24341.0], [84.7, 24360.0], [84.8, 24371.0], [84.9, 24381.0], [85.0, 24403.0], [85.1, 24406.0], [85.2, 24409.0], [85.3, 24419.0], [85.4, 24452.0], [85.5, 24469.0], [85.6, 24469.0], [85.7, 24480.0], [85.8, 24482.0], [85.9, 24498.0], [86.0, 24547.0], [86.1, 24547.0], [86.2, 24557.0], [86.3, 24577.0], [86.4, 24587.0], [86.5, 24605.0], [86.6, 24615.0], [86.7, 24619.0], [86.8, 24622.0], [86.9, 24642.0], [87.0, 24683.0], [87.1, 24692.0], [87.2, 24693.0], [87.3, 24695.0], [87.4, 24729.0], [87.5, 24729.0], [87.6, 24731.0], [87.7, 24731.0], [87.8, 24731.0], [87.9, 24732.0], [88.0, 24734.0], [88.1, 24734.0], [88.2, 24739.0], [88.3, 24741.0], [88.4, 24752.0], [88.5, 24754.0], [88.6, 24757.0], [88.7, 24760.0], [88.8, 24761.0], [88.9, 24766.0], [89.0, 24768.0], [89.1, 24773.0], [89.2, 24788.0], [89.3, 24804.0], [89.4, 24809.0], [89.5, 24813.0], [89.6, 24818.0], [89.7, 24819.0], [89.8, 24838.0], [89.9, 24839.0], [90.0, 24842.0], [90.1, 24871.0], [90.2, 24893.0], [90.3, 24893.0], [90.4, 24898.0], [90.5, 24903.0], [90.6, 24909.0], [90.7, 24932.0], [90.8, 24942.0], [90.9, 24952.0], [91.0, 24955.0], [91.1, 24962.0], [91.2, 24995.0], [91.3, 25006.0], [91.4, 25007.0], [91.5, 25036.0], [91.6, 25039.0], [91.7, 25068.0], [91.8, 25089.0], [91.9, 25094.0], [92.0, 25118.0], [92.1, 25158.0], [92.2, 25161.0], [92.3, 25176.0], [92.4, 25181.0], [92.5, 25188.0], [92.6, 25191.0], [92.7, 25206.0], [92.8, 25210.0], [92.9, 25295.0], [93.0, 25299.0], [93.1, 25322.0], [93.2, 25331.0], [93.3, 25347.0], [93.4, 25380.0], [93.5, 25391.0], [93.6, 25399.0], [93.7, 25409.0], [93.8, 25413.0], [93.9, 25424.0], [94.0, 25436.0], [94.1, 25452.0], [94.2, 25460.0], [94.3, 25471.0], [94.4, 25514.0], [94.5, 25546.0], [94.6, 25550.0], [94.7, 25557.0], [94.8, 25575.0], [94.9, 25672.0], [95.0, 25686.0], [95.1, 25706.0], [95.2, 25856.0], [95.3, 25892.0], [95.4, 25895.0], [95.5, 25905.0], [95.6, 25950.0], [95.7, 26059.0], [95.8, 26075.0], [95.9, 26117.0], [96.0, 26168.0], [96.1, 26255.0], [96.2, 26296.0], [96.3, 26360.0], [96.4, 26446.0], [96.5, 26500.0], [96.6, 26540.0], [96.7, 26568.0], [96.8, 26697.0], [96.9, 26772.0], [97.0, 26845.0], [97.1, 27112.0], [97.2, 27219.0], [97.3, 27722.0], [97.4, 27938.0], [97.5, 27946.0], [97.6, 27954.0], [97.7, 28370.0], [97.8, 28370.0], [97.9, 28512.0], [98.0, 28746.0], [98.1, 28907.0], [98.2, 29004.0], [98.3, 29035.0], [98.4, 29101.0], [98.5, 29130.0], [98.6, 29153.0], [98.7, 29240.0], [98.8, 29319.0], [98.9, 29326.0], [99.0, 29359.0], [99.1, 29448.0], [99.2, 29509.0], [99.3, 29514.0], [99.4, 29521.0], [99.5, 29522.0], [99.6, 29547.0], [99.7, 29599.0], [99.8, 29763.0], [99.9, 29773.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 300.0, "maxY": 24.0, "series": [{"data": [[300.0, 1.0], [600.0, 3.0], [700.0, 2.0], [1600.0, 1.0], [1800.0, 2.0], [1900.0, 1.0], [2100.0, 2.0], [2500.0, 1.0], [2600.0, 2.0], [2800.0, 1.0], [2700.0, 1.0], [3100.0, 1.0], [3200.0, 1.0], [3400.0, 2.0], [3700.0, 1.0], [3600.0, 1.0], [3900.0, 2.0], [4000.0, 1.0], [4200.0, 3.0], [4100.0, 2.0], [4300.0, 1.0], [4400.0, 2.0], [4500.0, 3.0], [4600.0, 4.0], [4700.0, 2.0], [4800.0, 1.0], [5000.0, 3.0], [4900.0, 2.0], [5100.0, 1.0], [5200.0, 1.0], [5400.0, 1.0], [5600.0, 2.0], [5500.0, 1.0], [5700.0, 2.0], [5800.0, 1.0], [6000.0, 1.0], [6100.0, 1.0], [5900.0, 1.0], [6300.0, 1.0], [6400.0, 1.0], [6500.0, 5.0], [6600.0, 3.0], [6900.0, 5.0], [6700.0, 2.0], [6800.0, 2.0], [7000.0, 3.0], [7100.0, 2.0], [7200.0, 3.0], [7400.0, 4.0], [7300.0, 2.0], [7500.0, 5.0], [7900.0, 2.0], [7700.0, 3.0], [7800.0, 1.0], [8000.0, 4.0], [8100.0, 2.0], [8300.0, 4.0], [8500.0, 5.0], [8400.0, 1.0], [8700.0, 1.0], [8600.0, 5.0], [8200.0, 2.0], [8800.0, 2.0], [9000.0, 5.0], [9100.0, 7.0], [8900.0, 2.0], [9200.0, 4.0], [9300.0, 4.0], [9500.0, 2.0], [9600.0, 2.0], [9400.0, 3.0], [9700.0, 2.0], [9800.0, 3.0], [10000.0, 1.0], [10200.0, 3.0], [10100.0, 4.0], [10500.0, 5.0], [10700.0, 6.0], [10400.0, 5.0], [10300.0, 4.0], [10600.0, 1.0], [10800.0, 5.0], [10900.0, 7.0], [11000.0, 1.0], [11100.0, 4.0], [11400.0, 1.0], [11500.0, 3.0], [11600.0, 4.0], [11700.0, 1.0], [11900.0, 5.0], [12000.0, 7.0], [12200.0, 3.0], [12100.0, 2.0], [12300.0, 3.0], [12500.0, 9.0], [12400.0, 4.0], [12600.0, 1.0], [12700.0, 2.0], [12800.0, 2.0], [12900.0, 4.0], [13000.0, 2.0], [13100.0, 3.0], [13200.0, 4.0], [13400.0, 2.0], [13500.0, 3.0], [13600.0, 2.0], [13700.0, 2.0], [13800.0, 2.0], [13900.0, 4.0], [14100.0, 3.0], [14200.0, 1.0], [14300.0, 8.0], [14000.0, 1.0], [14400.0, 3.0], [14500.0, 2.0], [14600.0, 3.0], [14700.0, 1.0], [14800.0, 3.0], [14900.0, 6.0], [15100.0, 3.0], [15000.0, 3.0], [15200.0, 5.0], [15300.0, 3.0], [15800.0, 8.0], [15600.0, 5.0], [15700.0, 5.0], [15500.0, 4.0], [16100.0, 5.0], [16000.0, 3.0], [16200.0, 5.0], [15900.0, 3.0], [16300.0, 3.0], [16400.0, 3.0], [16600.0, 3.0], [17000.0, 1.0], [17200.0, 3.0], [17800.0, 4.0], [18000.0, 4.0], [17600.0, 3.0], [18400.0, 3.0], [18200.0, 3.0], [18600.0, 8.0], [18800.0, 4.0], [19200.0, 17.0], [19000.0, 6.0], [19400.0, 3.0], [19600.0, 2.0], [20000.0, 11.0], [19800.0, 5.0], [20200.0, 5.0], [20400.0, 5.0], [20600.0, 5.0], [20800.0, 6.0], [21000.0, 8.0], [21200.0, 7.0], [21400.0, 6.0], [21600.0, 8.0], [21800.0, 8.0], [22000.0, 7.0], [22200.0, 24.0], [22400.0, 11.0], [22600.0, 10.0], [22800.0, 10.0], [23000.0, 7.0], [23200.0, 6.0], [23400.0, 9.0], [23800.0, 4.0], [23600.0, 4.0], [24000.0, 6.0], [24400.0, 10.0], [24200.0, 6.0], [24600.0, 9.0], [24800.0, 12.0], [25000.0, 7.0], [25400.0, 7.0], [25200.0, 4.0], [25800.0, 3.0], [25600.0, 2.0], [26000.0, 2.0], [26200.0, 2.0], [26400.0, 1.0], [26600.0, 1.0], [26800.0, 1.0], [27200.0, 1.0], [29200.0, 1.0], [29000.0, 2.0], [29400.0, 1.0], [16500.0, 3.0], [16700.0, 2.0], [16900.0, 2.0], [17100.0, 2.0], [17300.0, 1.0], [17500.0, 5.0], [17700.0, 2.0], [18300.0, 3.0], [18700.0, 10.0], [19100.0, 9.0], [18500.0, 2.0], [18900.0, 2.0], [19300.0, 6.0], [19500.0, 5.0], [20100.0, 10.0], [19700.0, 5.0], [19900.0, 2.0], [20300.0, 2.0], [21300.0, 10.0], [20500.0, 7.0], [20700.0, 12.0], [20900.0, 10.0], [21100.0, 7.0], [21500.0, 8.0], [22300.0, 10.0], [21700.0, 6.0], [21900.0, 9.0], [22100.0, 6.0], [22500.0, 11.0], [22700.0, 11.0], [22900.0, 9.0], [23300.0, 8.0], [23100.0, 3.0], [23500.0, 4.0], [23900.0, 12.0], [23700.0, 4.0], [24100.0, 6.0], [24300.0, 7.0], [24500.0, 5.0], [24700.0, 19.0], [24900.0, 8.0], [25100.0, 7.0], [25300.0, 6.0], [25500.0, 5.0], [25700.0, 1.0], [26100.0, 2.0], [25900.0, 2.0], [26500.0, 3.0], [26300.0, 1.0], [26700.0, 1.0], [27100.0, 1.0], [27700.0, 1.0], [27900.0, 3.0], [28300.0, 2.0], [28500.0, 1.0], [28900.0, 1.0], [29100.0, 3.0], [29300.0, 3.0], [28700.0, 1.0], [29500.0, 6.0], [29700.0, 2.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 29700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 994.0, "series": [{"data": [[0.0, 1.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 994.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 388.88615782664914, "minX": 1.75792272E12, "maxY": 887.1189427312775, "series": [{"data": [[1.75792278E12, 388.88615782664914], [1.75792272E12, 887.1189427312775]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792278E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 749.0, "minX": 1.0, "maxY": 29773.0, "series": [{"data": [[2.0, 29359.0], [3.0, 29521.0], [4.0, 29035.0], [5.0, 29773.0], [6.0, 29514.0], [7.0, 29547.0], [8.0, 29448.0], [9.0, 29522.0], [10.0, 29763.0], [11.0, 29509.0], [12.0, 29599.0], [13.0, 28512.0], [14.0, 29004.0], [15.0, 28746.0], [16.0, 29326.0], [17.0, 29240.0], [18.0, 29130.0], [19.0, 29101.0], [20.0, 29153.0], [21.0, 28370.0], [22.0, 28907.0], [23.0, 27946.0], [25.0, 28162.0], [26.0, 27938.0], [27.0, 27722.0], [28.0, 27219.0], [29.0, 26540.0], [30.0, 27112.0], [31.0, 26568.0], [33.0, 26771.0], [34.0, 26360.0], [37.0, 26168.0], [36.0, 26513.5], [39.0, 26500.0], [38.0, 26446.0], [41.0, 26296.0], [40.0, 25905.0], [42.0, 25950.0], [45.0, 25911.0], [49.0, 25471.0], [48.0, 25615.333333333332], [54.0, 25546.0], [61.0, 25375.5], [60.0, 25769.75], [63.0, 25374.666666666668], [67.0, 25138.5], [70.0, 25118.0], [69.0, 24898.0], [68.0, 24339.0], [75.0, 24839.0], [73.0, 25550.0], [72.0, 25114.5], [79.0, 24842.0], [78.0, 25546.0], [77.0, 24819.0], [76.0, 25337.5], [83.0, 24896.5], [82.0, 25331.0], [80.0, 24757.0], [90.0, 24683.0], [88.0, 25136.6], [92.0, 25172.333333333332], [99.0, 24622.0], [97.0, 25007.0], [96.0, 24799.25], [103.0, 25181.0], [102.0, 24942.0], [101.0, 24741.0], [100.0, 24820.0], [105.0, 24909.0], [104.0, 24962.0], [109.0, 24688.5], [115.0, 24737.0], [117.0, 24747.5], [122.0, 24667.5], [135.0, 24776.5], [133.0, 24419.0], [132.0, 24479.0], [131.0, 24331.0], [130.0, 24547.0], [129.0, 24565.25], [143.0, 24813.0], [142.0, 24815.333333333332], [141.0, 24768.0], [139.0, 24734.0], [138.0, 24757.0], [150.0, 23998.0], [149.0, 24006.0], [147.0, 24332.333333333332], [144.0, 24739.0], [157.0, 24407.142857142855], [153.0, 24059.0], [167.0, 24731.0], [166.0, 24506.0], [164.0, 24305.666666666668], [163.0, 24586.0], [162.0, 24173.0], [161.0, 24270.0], [171.0, 24428.25], [181.0, 23939.0], [180.0, 24174.0], [179.0, 23629.333333333332], [176.0, 24204.0], [191.0, 23710.0], [188.0, 23608.5], [186.0, 23745.0], [184.0, 23493.0], [198.0, 23869.0], [199.0, 23643.0], [194.0, 23516.0], [193.0, 23288.5], [207.0, 23664.0], [205.0, 23483.0], [203.0, 23917.5], [201.0, 23436.0], [200.0, 23490.333333333332], [213.0, 23176.0], [212.0, 23591.8], [211.0, 23918.0], [223.0, 23060.5], [221.0, 23587.0], [218.0, 23767.0], [216.0, 23736.0], [231.0, 22721.0], [229.0, 23037.0], [228.0, 22965.333333333332], [225.0, 23298.0], [224.0, 22735.0], [237.0, 23331.0], [246.0, 22673.8], [241.0, 22879.44444444445], [253.0, 22598.0], [248.0, 22817.5], [259.0, 22639.5], [271.0, 22590.5], [268.0, 22719.0], [267.0, 22795.2], [264.0, 23007.0], [260.0, 22434.0], [258.0, 22366.0], [257.0, 22872.0], [256.0, 22529.0], [286.0, 22730.333333333332], [283.0, 22537.0], [282.0, 22597.333333333332], [279.0, 22542.285714285714], [277.0, 22570.0], [275.0, 22744.0], [273.0, 22372.0], [302.0, 22258.0], [298.0, 22560.25], [295.0, 22921.0], [293.0, 22441.5], [289.0, 22890.5], [288.0, 22978.0], [319.0, 22462.0], [318.0, 22190.0], [314.0, 22494.0], [313.0, 22310.5], [311.0, 22327.0], [307.0, 22464.25], [335.0, 22248.0], [332.0, 21985.0], [331.0, 22346.25], [328.0, 22725.0], [327.0, 22549.0], [323.0, 22603.0], [351.0, 21746.0], [347.0, 21703.0], [346.0, 21825.0], [345.0, 21861.5], [343.0, 22038.4], [338.0, 22216.0], [337.0, 22294.0], [367.0, 21586.0], [366.0, 22037.0], [363.0, 21594.0], [362.0, 22013.5], [359.0, 21934.0], [358.0, 21816.0], [354.0, 21585.0], [381.0, 21573.0], [378.0, 21139.0], [377.0, 21728.0], [376.0, 21710.4], [371.0, 21925.0], [370.0, 21817.5], [369.0, 21917.0], [387.0, 21456.0], [398.0, 21489.0], [399.0, 21100.0], [396.0, 21159.333333333332], [393.0, 21502.0], [392.0, 21037.0], [391.0, 21079.0], [390.0, 21400.5], [385.0, 21478.2], [384.0, 21177.0], [415.0, 20971.0], [414.0, 20862.0], [413.0, 20934.0], [408.0, 20941.0], [407.0, 21181.5], [405.0, 21192.5], [403.0, 21139.0], [402.0, 21389.5], [430.0, 21024.5], [426.0, 20652.0], [425.0, 21122.0], [424.0, 21340.25], [420.0, 21228.25], [419.0, 20858.0], [416.0, 21027.5], [447.0, 21047.0], [446.0, 20562.0], [445.0, 20531.0], [444.0, 21124.0], [443.0, 20647.0], [442.0, 20833.0], [440.0, 20839.285714285714], [433.0, 21162.333333333332], [463.0, 20474.25], [459.0, 20789.0], [458.0, 20838.0], [457.0, 20732.0], [454.0, 20631.333333333332], [451.0, 20768.0], [448.0, 20384.0], [478.0, 19959.666666666668], [475.0, 20434.5], [473.0, 20400.0], [472.0, 20017.0], [470.0, 20054.0], [469.0, 20581.0], [468.0, 20253.0], [467.0, 20726.0], [466.0, 20239.333333333332], [490.0, 19731.0], [489.0, 20016.0], [488.0, 19895.0], [486.0, 20192.0], [484.0, 19751.0], [483.0, 20141.0], [482.0, 20360.5], [481.0, 19871.0], [510.0, 19748.0], [511.0, 20118.0], [509.0, 19955.083333333336], [508.0, 20152.0], [505.0, 20049.0], [504.0, 19510.0], [503.0, 19822.5], [500.0, 20082.0], [501.0, 20164.0], [539.0, 18722.0], [543.0, 19074.0], [537.0, 19306.0], [536.0, 19290.0], [535.0, 18964.666666666664], [534.0, 19146.0], [528.0, 19025.0], [526.0, 18987.666666666668], [514.0, 19457.5], [512.0, 19675.0], [517.0, 19576.0], [516.0, 19116.0], [519.0, 19463.0], [518.0, 19190.0], [523.0, 19025.0], [521.0, 19476.0], [520.0, 19460.0], [569.0, 19225.0], [573.0, 19245.0], [574.0, 18821.0], [571.0, 19172.0], [567.0, 18561.0], [563.0, 18626.0], [559.0, 18842.0], [545.0, 19028.4], [551.0, 19102.0], [547.0, 18983.666666666668], [555.0, 18674.0], [554.0, 19140.0], [553.0, 19244.0], [552.0, 18772.0], [600.0, 17635.6], [607.0, 17891.5], [605.0, 17840.0], [604.0, 17669.0], [595.0, 18087.5], [589.0, 18422.0], [576.0, 19070.42857142857], [580.0, 18531.666666666668], [577.0, 18280.0], [587.0, 18302.0], [586.0, 18514.25], [582.0, 18474.0], [581.0, 18760.0], [627.0, 16529.0], [637.0, 16115.0], [624.0, 16593.25], [634.0, 15887.0], [633.0, 16105.333333333334], [612.0, 17282.0], [610.0, 16912.0], [609.0, 17549.0], [608.0, 17204.0], [620.0, 16665.0], [619.0, 16237.0], [618.0, 17011.0], [617.0, 16963.0], [616.0, 17051.25], [630.0, 15992.0], [629.0, 16497.0], [628.0, 16582.0], [626.0, 16654.0], [625.0, 16630.0], [644.0, 15668.0], [671.0, 15529.0], [668.0, 15528.5], [642.0, 15938.5], [640.0, 16046.666666666666], [662.0, 15551.666666666666], [659.0, 16174.0], [658.0, 15974.75], [654.0, 15819.857142857143], [652.0, 16211.5], [650.0, 16231.0], [648.0, 15995.0], [690.0, 15106.0], [701.0, 14700.0], [703.0, 14526.5], [689.0, 14538.0], [688.0, 14697.0], [700.0, 14615.0], [698.0, 14765.333333333334], [696.0, 14311.0], [679.0, 15184.5], [675.0, 14890.5], [673.0, 15637.625000000002], [687.0, 15043.333333333334], [684.0, 15170.0], [683.0, 15070.5], [694.0, 14958.0], [693.0, 14657.5], [691.0, 14386.0], [729.0, 13618.0], [722.0, 13840.0], [731.0, 12968.0], [733.0, 12970.5], [721.0, 13397.5], [730.0, 13558.0], [728.0, 13360.0], [711.0, 14346.0], [710.0, 13955.0], [709.0, 14451.0], [708.0, 14065.0], [707.0, 14407.0], [706.0, 14581.0], [705.0, 14309.0], [704.0, 14313.0], [719.0, 13932.0], [718.0, 13922.0], [717.0, 14133.0], [716.0, 14195.5], [714.0, 13893.666666666666], [726.0, 13720.0], [725.0, 13784.0], [724.0, 13755.0], [764.0, 11948.0], [766.0, 12258.0], [763.0, 12476.666666666666], [762.0, 11989.0], [760.0, 12000.0], [743.0, 12870.25], [739.0, 12790.0], [738.0, 13179.0], [756.0, 12075.0], [755.0, 12552.0], [752.0, 12630.333333333334], [749.0, 12913.0], [748.0, 12324.0], [747.0, 12451.0], [746.0, 12555.0], [745.0, 13030.0], [796.0, 10880.5], [787.0, 10993.0], [799.0, 10827.666666666666], [784.0, 11787.0], [786.0, 11693.0], [785.0, 11699.0], [794.0, 11117.0], [793.0, 10977.0], [792.0, 11401.0], [775.0, 12292.0], [773.0, 12317.428571428572], [770.0, 12293.0], [783.0, 11516.0], [782.0, 11645.0], [781.0, 11600.0], [780.0, 12003.0], [777.0, 12067.0], [791.0, 11358.5], [789.0, 10905.0], [788.0, 11515.0], [829.0, 10446.0], [831.0, 10508.5], [824.0, 10136.0], [806.0, 10471.0], [804.0, 10989.2], [823.0, 10218.5], [821.0, 10564.0], [820.0, 10788.0], [819.0, 10394.25], [815.0, 10868.0], [814.0, 10841.0], [813.0, 10931.0], [811.0, 10490.0], [809.0, 10691.0], [857.0, 9126.0], [862.0, 9139.0], [863.0, 9159.0], [849.0, 9231.0], [848.0, 9496.0], [852.0, 9154.0], [851.0, 9080.5], [861.0, 9321.0], [860.0, 9163.0], [859.0, 9355.5], [856.0, 9111.0], [839.0, 9890.0], [838.0, 9576.5], [836.0, 10062.0], [835.0, 10255.0], [834.0, 9818.0], [833.0, 10170.0], [847.0, 9238.0], [846.0, 9261.0], [845.0, 9758.0], [844.0, 9552.0], [843.0, 9619.0], [842.0, 9428.0], [841.0, 9839.0], [840.0, 9370.0], [855.0, 9400.0], [854.0, 9616.0], [888.0, 8729.0], [892.0, 8515.0], [895.0, 8097.0], [881.0, 8876.0], [880.0, 8653.0], [884.0, 8172.0], [883.0, 8471.0], [894.0, 8070.0], [893.0, 8390.0], [891.0, 7406.0], [890.0, 8002.0], [889.0, 8466.0], [879.0, 8584.0], [868.0, 8822.666666666666], [865.0, 8956.0], [871.0, 9094.0], [870.0, 8818.0], [878.0, 8223.0], [877.0, 8305.0], [876.0, 8244.0], [875.0, 8538.0], [874.0, 8866.0], [873.0, 9033.0], [872.0, 8693.0], [887.0, 8228.0], [885.0, 8513.0], [920.0, 6845.0], [925.0, 7017.0], [926.0, 7247.0], [912.0, 7019.0], [914.0, 7337.0], [913.0, 7197.0], [924.0, 7007.5], [922.0, 6956.0], [921.0, 6830.0], [911.0, 7309.0], [897.0, 7873.0], [896.0, 7977.0], [899.0, 7762.0], [898.0, 7762.0], [901.0, 7435.0], [900.0, 7551.0], [903.0, 8039.0], [902.0, 7751.0], [910.0, 7545.0], [909.0, 7425.0], [908.0, 7962.0], [907.0, 7291.0], [906.0, 7503.0], [905.0, 7527.0], [904.0, 7528.0], [919.0, 6913.0], [918.0, 7024.5], [916.0, 7440.0], [915.0, 6994.0], [952.0, 5101.0], [956.0, 5047.0], [959.0, 5074.0], [944.0, 5705.0], [949.0, 5556.5], [945.0, 5669.0], [958.0, 4731.0], [957.0, 5290.0], [955.0, 4943.0], [954.0, 5011.0], [953.0, 4244.0], [943.0, 5586.0], [931.0, 6660.2], [933.0, 6670.0], [932.0, 6557.0], [935.0, 6506.0], [934.0, 6527.0], [942.0, 6419.0], [941.0, 6304.0], [938.0, 6523.0], [937.0, 6172.0], [936.0, 6652.0], [951.0, 5443.0], [950.0, 4802.0], [985.0, 1410.5], [990.0, 2894.0], [989.0, 1194.0], [987.0, 1313.0], [986.0, 1250.0], [991.0, 2128.0], [977.0, 3791.0], [976.0, 4292.0], [979.0, 3988.0], [978.0, 3960.0], [988.0, 2730.0], [984.0, 3405.0], [967.0, 4537.0], [966.0, 4536.0], [964.0, 4677.0], [963.0, 4781.0], [962.0, 4549.0], [961.0, 4601.0], [960.0, 4694.0], [975.0, 4486.0], [974.0, 4176.0], [973.0, 3692.0], [972.0, 4025.0], [971.0, 4218.0], [970.0, 4130.0], [969.0, 4536.0], [968.0, 4371.0], [983.0, 3195.0], [982.0, 3239.0], [981.0, 2587.0], [980.0, 3446.0], [995.0, 1670.0], [994.0, 749.0], [993.0, 1991.0], [992.0, 2635.0], [1.0, 29319.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}, {"data": [[501.9830000000002, 17840.01900000001]], "isOverall": false, "label": "สร้าง Visit-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 995.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2016.5166666666667, "minX": 1.75792272E12, "maxY": 9031.216666666667, "series": [{"data": [[1.75792278E12, 9031.216666666667], [1.75792272E12, 2652.116666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75792278E12, 6866.816666666667], [1.75792272E12, 2016.5166666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792278E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7771.955947136564, "minX": 1.75792272E12, "maxY": 20796.61707632604, "series": [{"data": [[1.75792278E12, 20796.61707632604], [1.75792272E12, 7771.955947136564]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792278E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7771.916299559471, "minX": 1.75792272E12, "maxY": 20796.60284605432, "series": [{"data": [[1.75792278E12, 20796.60284605432], [1.75792272E12, 7771.916299559471]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792278E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1180.145374449339, "minX": 1.75792272E12, "maxY": 2189.521345407504, "series": [{"data": [[1.75792278E12, 2189.521345407504], [1.75792272E12, 1180.145374449339]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792278E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 324.0, "minX": 1.75792272E12, "maxY": 29773.0, "series": [{"data": [[1.75792278E12, 29773.0], [1.75792272E12, 12368.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75792278E12, 25170.0], [1.75792272E12, 10980.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75792278E12, 29510.3], [1.75792272E12, 12176.52]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75792278E12, 26267.3], [1.75792272E12, 11627.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75792278E12, 11948.0], [1.75792272E12, 324.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75792278E12, 21456.0], [1.75792272E12, 8305.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792278E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 661.0, "minX": 2.0, "maxY": 29101.0, "series": [{"data": [[2.0, 1209.5], [34.0, 14890.5], [36.0, 10713.5], [39.0, 16848.5], [43.0, 12579.0], [45.0, 19836.5], [44.0, 19992.5], [55.0, 21795.0], [4.0, 27946.0], [70.0, 19068.5], [5.0, 661.0], [83.0, 20901.0], [98.0, 24712.0], [114.0, 22584.5], [9.0, 29101.0], [10.0, 2381.5], [12.0, 26554.0], [13.0, 3960.0], [14.0, 17528.5], [16.0, 7548.0], [18.0, 4640.5], [19.0, 16759.0], [20.0, 11669.0], [22.0, 17814.5], [23.0, 13840.0], [27.0, 8255.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 114.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 661.0, "minX": 2.0, "maxY": 29101.0, "series": [{"data": [[2.0, 1209.5], [34.0, 14890.5], [36.0, 10713.5], [39.0, 16848.5], [43.0, 12579.0], [45.0, 19836.5], [44.0, 19992.5], [55.0, 21795.0], [4.0, 27946.0], [70.0, 19068.5], [5.0, 661.0], [83.0, 20901.0], [98.0, 24712.0], [114.0, 22584.5], [9.0, 29101.0], [10.0, 2381.5], [12.0, 26553.5], [13.0, 3960.0], [14.0, 17528.5], [16.0, 7548.0], [18.0, 4640.5], [19.0, 16759.0], [20.0, 11669.0], [22.0, 17814.0], [23.0, 13840.0], [27.0, 8254.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 114.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792272E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792272E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792272E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.783333333333333, "minX": 1.75792272E12, "maxY": 12.883333333333333, "series": [{"data": [[1.75792278E12, 12.883333333333333], [1.75792272E12, 3.783333333333333]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792278E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.783333333333333, "minX": 1.75792272E12, "maxY": 12.883333333333333, "series": [{"data": [[1.75792278E12, 12.883333333333333], [1.75792272E12, 3.783333333333333]], "isOverall": false, "label": "สร้าง Visit-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792278E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.783333333333333, "minX": 1.75792272E12, "maxY": 12.883333333333333, "series": [{"data": [[1.75792278E12, 12.883333333333333], [1.75792272E12, 3.783333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792278E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

