/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 30021.0, "minX": 0.0, "maxY": 33165.0, "series": [{"data": [[0.0, 30021.0], [0.1, 30022.0], [0.2, 30022.0], [0.3, 30022.0], [0.4, 30023.0], [0.5, 30023.0], [0.6, 30023.0], [0.7, 30024.0], [0.8, 30024.0], [0.9, 30024.0], [1.0, 30025.0], [1.1, 30025.0], [1.2, 30025.0], [1.3, 30025.0], [1.4, 30026.0], [1.5, 30027.0], [1.6, 30027.0], [1.7, 30028.0], [1.8, 30028.0], [1.9, 30028.0], [2.0, 30029.0], [2.1, 30029.0], [2.2, 30030.0], [2.3, 30030.0], [2.4, 30031.0], [2.5, 30031.0], [2.6, 30031.0], [2.7, 30034.0], [2.8, 30034.0], [2.9, 30035.0], [3.0, 30036.0], [3.1, 30036.0], [3.2, 30037.0], [3.3, 30038.0], [3.4, 30039.0], [3.5, 30039.0], [3.6, 30039.0], [3.7, 30040.0], [3.8, 30040.0], [3.9, 30040.0], [4.0, 30040.0], [4.1, 30041.0], [4.2, 30041.0], [4.3, 30041.0], [4.4, 30042.0], [4.5, 30042.0], [4.6, 30043.0], [4.7, 30044.0], [4.8, 30044.0], [4.9, 30044.0], [5.0, 30044.0], [5.1, 30046.0], [5.2, 30048.0], [5.3, 30048.0], [5.4, 30051.0], [5.5, 30051.0], [5.6, 30051.0], [5.7, 30056.0], [5.8, 30060.0], [5.9, 30065.0], [6.0, 30116.0], [6.1, 30226.0], [6.2, 30229.0], [6.3, 30233.0], [6.4, 30234.0], [6.5, 30237.0], [6.6, 30238.0], [6.7, 30473.0], [6.8, 30499.0], [6.9, 30502.0], [7.0, 30519.0], [7.1, 30541.0], [7.2, 30614.0], [7.3, 30620.0], [7.4, 30656.0], [7.5, 30675.0], [7.6, 30679.0], [7.7, 30701.0], [7.8, 30711.0], [7.9, 30711.0], [8.0, 30716.0], [8.1, 30734.0], [8.2, 30770.0], [8.3, 30773.0], [8.4, 30775.0], [8.5, 30776.0], [8.6, 30787.0], [8.7, 30787.0], [8.8, 30789.0], [8.9, 30794.0], [9.0, 30805.0], [9.1, 30810.0], [9.2, 30813.0], [9.3, 30818.0], [9.4, 30824.0], [9.5, 30832.0], [9.6, 30846.0], [9.7, 30853.0], [9.8, 30857.0], [9.9, 30885.0], [10.0, 30891.0], [10.1, 30909.0], [10.2, 30936.0], [10.3, 30956.0], [10.4, 30965.0], [10.5, 30966.0], [10.6, 30973.0], [10.7, 30981.0], [10.8, 30995.0], [10.9, 31031.0], [11.0, 31032.0], [11.1, 31042.0], [11.2, 31044.0], [11.3, 31046.0], [11.4, 31047.0], [11.5, 31050.0], [11.6, 31050.0], [11.7, 31054.0], [11.8, 31063.0], [11.9, 31070.0], [12.0, 31080.0], [12.1, 31086.0], [12.2, 31088.0], [12.3, 31088.0], [12.4, 31089.0], [12.5, 31090.0], [12.6, 31094.0], [12.7, 31099.0], [12.8, 31102.0], [12.9, 31110.0], [13.0, 31113.0], [13.1, 31114.0], [13.2, 31115.0], [13.3, 31116.0], [13.4, 31127.0], [13.5, 31133.0], [13.6, 31135.0], [13.7, 31138.0], [13.8, 31140.0], [13.9, 31143.0], [14.0, 31149.0], [14.1, 31152.0], [14.2, 31154.0], [14.3, 31159.0], [14.4, 31166.0], [14.5, 31172.0], [14.6, 31181.0], [14.7, 31183.0], [14.8, 31187.0], [14.9, 31187.0], [15.0, 31192.0], [15.1, 31194.0], [15.2, 31197.0], [15.3, 31199.0], [15.4, 31202.0], [15.5, 31212.0], [15.6, 31217.0], [15.7, 31217.0], [15.8, 31218.0], [15.9, 31219.0], [16.0, 31225.0], [16.1, 31234.0], [16.2, 31236.0], [16.3, 31239.0], [16.4, 31251.0], [16.5, 31257.0], [16.6, 31273.0], [16.7, 31274.0], [16.8, 31275.0], [16.9, 31275.0], [17.0, 31285.0], [17.1, 31288.0], [17.2, 31292.0], [17.3, 31294.0], [17.4, 31295.0], [17.5, 31296.0], [17.6, 31304.0], [17.7, 31305.0], [17.8, 31316.0], [17.9, 31325.0], [18.0, 31328.0], [18.1, 31341.0], [18.2, 31342.0], [18.3, 31346.0], [18.4, 31347.0], [18.5, 31352.0], [18.6, 31358.0], [18.7, 31368.0], [18.8, 31370.0], [18.9, 31370.0], [19.0, 31372.0], [19.1, 31380.0], [19.2, 31381.0], [19.3, 31381.0], [19.4, 31387.0], [19.5, 31387.0], [19.6, 31388.0], [19.7, 31389.0], [19.8, 31397.0], [19.9, 31398.0], [20.0, 31399.0], [20.1, 31400.0], [20.2, 31404.0], [20.3, 31404.0], [20.4, 31407.0], [20.5, 31408.0], [20.6, 31411.0], [20.7, 31417.0], [20.8, 31423.0], [20.9, 31426.0], [21.0, 31427.0], [21.1, 31428.0], [21.2, 31430.0], [21.3, 31431.0], [21.4, 31432.0], [21.5, 31437.0], [21.6, 31440.0], [21.7, 31441.0], [21.8, 31442.0], [21.9, 31442.0], [22.0, 31444.0], [22.1, 31445.0], [22.2, 31451.0], [22.3, 31453.0], [22.4, 31455.0], [22.5, 31459.0], [22.6, 31461.0], [22.7, 31462.0], [22.8, 31466.0], [22.9, 31473.0], [23.0, 31474.0], [23.1, 31474.0], [23.2, 31475.0], [23.3, 31477.0], [23.4, 31479.0], [23.5, 31481.0], [23.6, 31482.0], [23.7, 31482.0], [23.8, 31482.0], [23.9, 31488.0], [24.0, 31490.0], [24.1, 31491.0], [24.2, 31491.0], [24.3, 31492.0], [24.4, 31493.0], [24.5, 31494.0], [24.6, 31494.0], [24.7, 31495.0], [24.8, 31496.0], [24.9, 31497.0], [25.0, 31498.0], [25.1, 31500.0], [25.2, 31503.0], [25.3, 31503.0], [25.4, 31506.0], [25.5, 31507.0], [25.6, 31509.0], [25.7, 31511.0], [25.8, 31519.0], [25.9, 31520.0], [26.0, 31526.0], [26.1, 31530.0], [26.2, 31533.0], [26.3, 31539.0], [26.4, 31541.0], [26.5, 31545.0], [26.6, 31545.0], [26.7, 31546.0], [26.8, 31547.0], [26.9, 31548.0], [27.0, 31550.0], [27.1, 31556.0], [27.2, 31559.0], [27.3, 31564.0], [27.4, 31566.0], [27.5, 31567.0], [27.6, 31568.0], [27.7, 31568.0], [27.8, 31570.0], [27.9, 31575.0], [28.0, 31581.0], [28.1, 31583.0], [28.2, 31584.0], [28.3, 31586.0], [28.4, 31586.0], [28.5, 31587.0], [28.6, 31590.0], [28.7, 31591.0], [28.8, 31592.0], [28.9, 31592.0], [29.0, 31592.0], [29.1, 31594.0], [29.2, 31596.0], [29.3, 31598.0], [29.4, 31598.0], [29.5, 31599.0], [29.6, 31600.0], [29.7, 31600.0], [29.8, 31606.0], [29.9, 31610.0], [30.0, 31611.0], [30.1, 31612.0], [30.2, 31615.0], [30.3, 31617.0], [30.4, 31617.0], [30.5, 31619.0], [30.6, 31620.0], [30.7, 31624.0], [30.8, 31627.0], [30.9, 31627.0], [31.0, 31638.0], [31.1, 31638.0], [31.2, 31638.0], [31.3, 31640.0], [31.4, 31641.0], [31.5, 31641.0], [31.6, 31641.0], [31.7, 31643.0], [31.8, 31643.0], [31.9, 31644.0], [32.0, 31649.0], [32.1, 31649.0], [32.2, 31650.0], [32.3, 31650.0], [32.4, 31651.0], [32.5, 31651.0], [32.6, 31652.0], [32.7, 31655.0], [32.8, 31656.0], [32.9, 31657.0], [33.0, 31660.0], [33.1, 31667.0], [33.2, 31667.0], [33.3, 31670.0], [33.4, 31671.0], [33.5, 31671.0], [33.6, 31672.0], [33.7, 31674.0], [33.8, 31675.0], [33.9, 31678.0], [34.0, 31679.0], [34.1, 31681.0], [34.2, 31683.0], [34.3, 31688.0], [34.4, 31691.0], [34.5, 31695.0], [34.6, 31698.0], [34.7, 31702.0], [34.8, 31702.0], [34.9, 31704.0], [35.0, 31705.0], [35.1, 31713.0], [35.2, 31716.0], [35.3, 31717.0], [35.4, 31724.0], [35.5, 31726.0], [35.6, 31729.0], [35.7, 31731.0], [35.8, 31735.0], [35.9, 31736.0], [36.0, 31737.0], [36.1, 31743.0], [36.2, 31743.0], [36.3, 31747.0], [36.4, 31749.0], [36.5, 31753.0], [36.6, 31754.0], [36.7, 31763.0], [36.8, 31767.0], [36.9, 31769.0], [37.0, 31771.0], [37.1, 31772.0], [37.2, 31772.0], [37.3, 31772.0], [37.4, 31776.0], [37.5, 31780.0], [37.6, 31788.0], [37.7, 31789.0], [37.8, 31790.0], [37.9, 31792.0], [38.0, 31793.0], [38.1, 31795.0], [38.2, 31799.0], [38.3, 31801.0], [38.4, 31806.0], [38.5, 31809.0], [38.6, 31809.0], [38.7, 31813.0], [38.8, 31814.0], [38.9, 31815.0], [39.0, 31817.0], [39.1, 31819.0], [39.2, 31819.0], [39.3, 31819.0], [39.4, 31822.0], [39.5, 31824.0], [39.6, 31825.0], [39.7, 31825.0], [39.8, 31825.0], [39.9, 31825.0], [40.0, 31825.0], [40.1, 31832.0], [40.2, 31833.0], [40.3, 31833.0], [40.4, 31833.0], [40.5, 31835.0], [40.6, 31836.0], [40.7, 31837.0], [40.8, 31839.0], [40.9, 31842.0], [41.0, 31846.0], [41.1, 31847.0], [41.2, 31849.0], [41.3, 31856.0], [41.4, 31857.0], [41.5, 31857.0], [41.6, 31857.0], [41.7, 31858.0], [41.8, 31859.0], [41.9, 31860.0], [42.0, 31861.0], [42.1, 31863.0], [42.2, 31863.0], [42.3, 31868.0], [42.4, 31873.0], [42.5, 31874.0], [42.6, 31876.0], [42.7, 31877.0], [42.8, 31881.0], [42.9, 31888.0], [43.0, 31891.0], [43.1, 31895.0], [43.2, 31896.0], [43.3, 31896.0], [43.4, 31900.0], [43.5, 31900.0], [43.6, 31906.0], [43.7, 31910.0], [43.8, 31911.0], [43.9, 31913.0], [44.0, 31916.0], [44.1, 31917.0], [44.2, 31920.0], [44.3, 31923.0], [44.4, 31924.0], [44.5, 31927.0], [44.6, 31927.0], [44.7, 31930.0], [44.8, 31933.0], [44.9, 31934.0], [45.0, 31934.0], [45.1, 31934.0], [45.2, 31935.0], [45.3, 31936.0], [45.4, 31938.0], [45.5, 31941.0], [45.6, 31942.0], [45.7, 31944.0], [45.8, 31946.0], [45.9, 31953.0], [46.0, 31954.0], [46.1, 31954.0], [46.2, 31956.0], [46.3, 31956.0], [46.4, 31957.0], [46.5, 31959.0], [46.6, 31960.0], [46.7, 31961.0], [46.8, 31964.0], [46.9, 31964.0], [47.0, 31970.0], [47.1, 31972.0], [47.2, 31977.0], [47.3, 31977.0], [47.4, 31978.0], [47.5, 31979.0], [47.6, 31980.0], [47.7, 31981.0], [47.8, 31984.0], [47.9, 31986.0], [48.0, 31992.0], [48.1, 31994.0], [48.2, 31994.0], [48.3, 31998.0], [48.4, 31999.0], [48.5, 31999.0], [48.6, 32005.0], [48.7, 32005.0], [48.8, 32005.0], [48.9, 32006.0], [49.0, 32007.0], [49.1, 32008.0], [49.2, 32008.0], [49.3, 32009.0], [49.4, 32009.0], [49.5, 32011.0], [49.6, 32013.0], [49.7, 32015.0], [49.8, 32016.0], [49.9, 32018.0], [50.0, 32018.0], [50.1, 32021.0], [50.2, 32026.0], [50.3, 32030.0], [50.4, 32033.0], [50.5, 32040.0], [50.6, 32046.0], [50.7, 32047.0], [50.8, 32048.0], [50.9, 32051.0], [51.0, 32059.0], [51.1, 32060.0], [51.2, 32061.0], [51.3, 32068.0], [51.4, 32069.0], [51.5, 32071.0], [51.6, 32073.0], [51.7, 32073.0], [51.8, 32077.0], [51.9, 32084.0], [52.0, 32091.0], [52.1, 32094.0], [52.2, 32096.0], [52.3, 32096.0], [52.4, 32098.0], [52.5, 32101.0], [52.6, 32102.0], [52.7, 32104.0], [52.8, 32104.0], [52.9, 32109.0], [53.0, 32110.0], [53.1, 32110.0], [53.2, 32110.0], [53.3, 32111.0], [53.4, 32112.0], [53.5, 32113.0], [53.6, 32117.0], [53.7, 32118.0], [53.8, 32119.0], [53.9, 32120.0], [54.0, 32121.0], [54.1, 32122.0], [54.2, 32125.0], [54.3, 32125.0], [54.4, 32126.0], [54.5, 32127.0], [54.6, 32129.0], [54.7, 32129.0], [54.8, 32131.0], [54.9, 32132.0], [55.0, 32133.0], [55.1, 32133.0], [55.2, 32134.0], [55.3, 32134.0], [55.4, 32135.0], [55.5, 32137.0], [55.6, 32139.0], [55.7, 32139.0], [55.8, 32144.0], [55.9, 32147.0], [56.0, 32150.0], [56.1, 32151.0], [56.2, 32152.0], [56.3, 32153.0], [56.4, 32153.0], [56.5, 32155.0], [56.6, 32156.0], [56.7, 32160.0], [56.8, 32169.0], [56.9, 32169.0], [57.0, 32181.0], [57.1, 32186.0], [57.2, 32187.0], [57.3, 32191.0], [57.4, 32192.0], [57.5, 32196.0], [57.6, 32196.0], [57.7, 32200.0], [57.8, 32200.0], [57.9, 32200.0], [58.0, 32200.0], [58.1, 32200.0], [58.2, 32200.0], [58.3, 32201.0], [58.4, 32203.0], [58.5, 32213.0], [58.6, 32216.0], [58.7, 32217.0], [58.8, 32218.0], [58.9, 32219.0], [59.0, 32219.0], [59.1, 32220.0], [59.2, 32220.0], [59.3, 32223.0], [59.4, 32230.0], [59.5, 32230.0], [59.6, 32232.0], [59.7, 32233.0], [59.8, 32233.0], [59.9, 32234.0], [60.0, 32234.0], [60.1, 32235.0], [60.2, 32235.0], [60.3, 32237.0], [60.4, 32238.0], [60.5, 32238.0], [60.6, 32249.0], [60.7, 32253.0], [60.8, 32253.0], [60.9, 32257.0], [61.0, 32258.0], [61.1, 32260.0], [61.2, 32260.0], [61.3, 32262.0], [61.4, 32263.0], [61.5, 32263.0], [61.6, 32264.0], [61.7, 32266.0], [61.8, 32267.0], [61.9, 32267.0], [62.0, 32268.0], [62.1, 32269.0], [62.2, 32269.0], [62.3, 32270.0], [62.4, 32274.0], [62.5, 32277.0], [62.6, 32277.0], [62.7, 32280.0], [62.8, 32284.0], [62.9, 32285.0], [63.0, 32286.0], [63.1, 32288.0], [63.2, 32290.0], [63.3, 32291.0], [63.4, 32291.0], [63.5, 32292.0], [63.6, 32296.0], [63.7, 32296.0], [63.8, 32298.0], [63.9, 32301.0], [64.0, 32302.0], [64.1, 32303.0], [64.2, 32307.0], [64.3, 32307.0], [64.4, 32312.0], [64.5, 32312.0], [64.6, 32312.0], [64.7, 32315.0], [64.8, 32317.0], [64.9, 32318.0], [65.0, 32321.0], [65.1, 32322.0], [65.2, 32323.0], [65.3, 32323.0], [65.4, 32323.0], [65.5, 32325.0], [65.6, 32328.0], [65.7, 32329.0], [65.8, 32331.0], [65.9, 32336.0], [66.0, 32336.0], [66.1, 32339.0], [66.2, 32339.0], [66.3, 32340.0], [66.4, 32344.0], [66.5, 32348.0], [66.6, 32348.0], [66.7, 32349.0], [66.8, 32349.0], [66.9, 32351.0], [67.0, 32353.0], [67.1, 32353.0], [67.2, 32353.0], [67.3, 32354.0], [67.4, 32356.0], [67.5, 32358.0], [67.6, 32361.0], [67.7, 32362.0], [67.8, 32362.0], [67.9, 32363.0], [68.0, 32363.0], [68.1, 32364.0], [68.2, 32365.0], [68.3, 32367.0], [68.4, 32370.0], [68.5, 32371.0], [68.6, 32371.0], [68.7, 32373.0], [68.8, 32374.0], [68.9, 32377.0], [69.0, 32379.0], [69.1, 32380.0], [69.2, 32382.0], [69.3, 32383.0], [69.4, 32386.0], [69.5, 32387.0], [69.6, 32389.0], [69.7, 32390.0], [69.8, 32391.0], [69.9, 32394.0], [70.0, 32400.0], [70.1, 32402.0], [70.2, 32404.0], [70.3, 32405.0], [70.4, 32405.0], [70.5, 32406.0], [70.6, 32406.0], [70.7, 32408.0], [70.8, 32409.0], [70.9, 32411.0], [71.0, 32412.0], [71.1, 32415.0], [71.2, 32415.0], [71.3, 32416.0], [71.4, 32416.0], [71.5, 32416.0], [71.6, 32417.0], [71.7, 32419.0], [71.8, 32419.0], [71.9, 32420.0], [72.0, 32420.0], [72.1, 32421.0], [72.2, 32427.0], [72.3, 32431.0], [72.4, 32432.0], [72.5, 32432.0], [72.6, 32433.0], [72.7, 32433.0], [72.8, 32437.0], [72.9, 32441.0], [73.0, 32441.0], [73.1, 32442.0], [73.2, 32442.0], [73.3, 32443.0], [73.4, 32443.0], [73.5, 32444.0], [73.6, 32445.0], [73.7, 32447.0], [73.8, 32448.0], [73.9, 32450.0], [74.0, 32450.0], [74.1, 32450.0], [74.2, 32454.0], [74.3, 32457.0], [74.4, 32457.0], [74.5, 32457.0], [74.6, 32460.0], [74.7, 32461.0], [74.8, 32463.0], [74.9, 32463.0], [75.0, 32464.0], [75.1, 32466.0], [75.2, 32467.0], [75.3, 32467.0], [75.4, 32468.0], [75.5, 32470.0], [75.6, 32472.0], [75.7, 32473.0], [75.8, 32473.0], [75.9, 32474.0], [76.0, 32474.0], [76.1, 32474.0], [76.2, 32481.0], [76.3, 32481.0], [76.4, 32485.0], [76.5, 32486.0], [76.6, 32486.0], [76.7, 32489.0], [76.8, 32490.0], [76.9, 32491.0], [77.0, 32491.0], [77.1, 32491.0], [77.2, 32492.0], [77.3, 32494.0], [77.4, 32494.0], [77.5, 32495.0], [77.6, 32498.0], [77.7, 32499.0], [77.8, 32499.0], [77.9, 32500.0], [78.0, 32500.0], [78.1, 32501.0], [78.2, 32502.0], [78.3, 32504.0], [78.4, 32509.0], [78.5, 32509.0], [78.6, 32510.0], [78.7, 32510.0], [78.8, 32511.0], [78.9, 32513.0], [79.0, 32513.0], [79.1, 32516.0], [79.2, 32518.0], [79.3, 32519.0], [79.4, 32521.0], [79.5, 32523.0], [79.6, 32523.0], [79.7, 32523.0], [79.8, 32523.0], [79.9, 32526.0], [80.0, 32528.0], [80.1, 32529.0], [80.2, 32529.0], [80.3, 32529.0], [80.4, 32531.0], [80.5, 32531.0], [80.6, 32533.0], [80.7, 32533.0], [80.8, 32537.0], [80.9, 32541.0], [81.0, 32541.0], [81.1, 32543.0], [81.2, 32544.0], [81.3, 32544.0], [81.4, 32545.0], [81.5, 32546.0], [81.6, 32547.0], [81.7, 32547.0], [81.8, 32548.0], [81.9, 32548.0], [82.0, 32549.0], [82.1, 32550.0], [82.2, 32551.0], [82.3, 32551.0], [82.4, 32552.0], [82.5, 32553.0], [82.6, 32554.0], [82.7, 32555.0], [82.8, 32555.0], [82.9, 32556.0], [83.0, 32561.0], [83.1, 32562.0], [83.2, 32564.0], [83.3, 32565.0], [83.4, 32565.0], [83.5, 32565.0], [83.6, 32566.0], [83.7, 32566.0], [83.8, 32566.0], [83.9, 32566.0], [84.0, 32567.0], [84.1, 32567.0], [84.2, 32567.0], [84.3, 32567.0], [84.4, 32570.0], [84.5, 32572.0], [84.6, 32572.0], [84.7, 32573.0], [84.8, 32577.0], [84.9, 32577.0], [85.0, 32578.0], [85.1, 32579.0], [85.2, 32580.0], [85.3, 32581.0], [85.4, 32582.0], [85.5, 32582.0], [85.6, 32585.0], [85.7, 32589.0], [85.8, 32589.0], [85.9, 32590.0], [86.0, 32592.0], [86.1, 32594.0], [86.2, 32595.0], [86.3, 32595.0], [86.4, 32600.0], [86.5, 32600.0], [86.6, 32602.0], [86.7, 32606.0], [86.8, 32608.0], [86.9, 32610.0], [87.0, 32613.0], [87.1, 32613.0], [87.2, 32614.0], [87.3, 32619.0], [87.4, 32621.0], [87.5, 32622.0], [87.6, 32622.0], [87.7, 32623.0], [87.8, 32624.0], [87.9, 32628.0], [88.0, 32628.0], [88.1, 32628.0], [88.2, 32628.0], [88.3, 32628.0], [88.4, 32630.0], [88.5, 32632.0], [88.6, 32636.0], [88.7, 32636.0], [88.8, 32636.0], [88.9, 32637.0], [89.0, 32637.0], [89.1, 32640.0], [89.2, 32641.0], [89.3, 32642.0], [89.4, 32643.0], [89.5, 32644.0], [89.6, 32646.0], [89.7, 32648.0], [89.8, 32650.0], [89.9, 32651.0], [90.0, 32656.0], [90.1, 32658.0], [90.2, 32659.0], [90.3, 32659.0], [90.4, 32661.0], [90.5, 32662.0], [90.6, 32665.0], [90.7, 32665.0], [90.8, 32668.0], [90.9, 32669.0], [91.0, 32671.0], [91.1, 32672.0], [91.2, 32674.0], [91.3, 32675.0], [91.4, 32675.0], [91.5, 32676.0], [91.6, 32677.0], [91.7, 32677.0], [91.8, 32681.0], [91.9, 32684.0], [92.0, 32684.0], [92.1, 32685.0], [92.2, 32688.0], [92.3, 32689.0], [92.4, 32692.0], [92.5, 32694.0], [92.6, 32696.0], [92.7, 32699.0], [92.8, 32699.0], [92.9, 32701.0], [93.0, 32702.0], [93.1, 32703.0], [93.2, 32705.0], [93.3, 32713.0], [93.4, 32713.0], [93.5, 32722.0], [93.6, 32729.0], [93.7, 32729.0], [93.8, 32732.0], [93.9, 32739.0], [94.0, 32740.0], [94.1, 32740.0], [94.2, 32740.0], [94.3, 32740.0], [94.4, 32742.0], [94.5, 32743.0], [94.6, 32745.0], [94.7, 32755.0], [94.8, 32760.0], [94.9, 32760.0], [95.0, 32761.0], [95.1, 32766.0], [95.2, 32770.0], [95.3, 32777.0], [95.4, 32793.0], [95.5, 32815.0], [95.6, 32834.0], [95.7, 32848.0], [95.8, 32848.0], [95.9, 32854.0], [96.0, 32856.0], [96.1, 32864.0], [96.2, 32878.0], [96.3, 32879.0], [96.4, 32881.0], [96.5, 32883.0], [96.6, 32896.0], [96.7, 32898.0], [96.8, 32906.0], [96.9, 32907.0], [97.0, 32927.0], [97.1, 32933.0], [97.2, 32940.0], [97.3, 32956.0], [97.4, 32960.0], [97.5, 32964.0], [97.6, 32969.0], [97.7, 32973.0], [97.8, 32982.0], [97.9, 32995.0], [98.0, 33029.0], [98.1, 33034.0], [98.2, 33039.0], [98.3, 33047.0], [98.4, 33055.0], [98.5, 33064.0], [98.6, 33069.0], [98.7, 33092.0], [98.8, 33094.0], [98.9, 33110.0], [99.0, 33112.0], [99.1, 33116.0], [99.2, 33117.0], [99.3, 33124.0], [99.4, 33125.0], [99.5, 33128.0], [99.6, 33136.0], [99.7, 33153.0], [99.8, 33153.0], [99.9, 33165.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 30000.0, "maxY": 85.0, "series": [{"data": [[30200.0, 6.0], [30600.0, 5.0], [30400.0, 2.0], [30700.0, 13.0], [30000.0, 60.0], [30500.0, 3.0], [30100.0, 1.0], [31500.0, 45.0], [30800.0, 11.0], [30900.0, 8.0], [31000.0, 19.0], [31100.0, 26.0], [31200.0, 22.0], [31300.0, 24.0], [31400.0, 50.0], [31600.0, 51.0], [31700.0, 36.0], [31800.0, 51.0], [32000.0, 39.0], [32100.0, 52.0], [31900.0, 52.0], [32200.0, 62.0], [32300.0, 61.0], [32400.0, 79.0], [32500.0, 85.0], [32600.0, 66.0], [32700.0, 26.0], [32800.0, 13.0], [32900.0, 12.0], [33000.0, 9.0], [33100.0, 11.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 33100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.0289999999995, "minX": 1.75792188E12, "maxY": 501.0289999999995, "series": [{"data": [[1.75792188E12, 501.0289999999995]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792188E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 30021.0, "minX": 1.0, "maxY": 33165.0, "series": [{"data": [[3.0, 32556.0], [5.0, 32611.5], [6.0, 32567.0], [7.0, 32623.0], [8.0, 33165.0], [9.0, 32555.0], [12.0, 32749.333333333332], [14.0, 32567.0], [15.0, 32583.0], [16.0, 33128.0], [17.0, 33153.0], [19.0, 32585.0], [20.0, 32570.0], [23.0, 32923.0], [24.0, 32572.0], [25.0, 32577.0], [26.0, 32541.0], [27.0, 33153.0], [28.0, 32529.0], [29.0, 33124.0], [31.0, 32538.0], [33.0, 32544.0], [32.0, 32528.0], [34.0, 33116.0], [37.0, 32916.0], [39.0, 32549.5], [41.0, 32523.0], [40.0, 32513.0], [43.0, 33112.0], [42.0, 32622.0], [45.0, 33110.0], [44.0, 32582.0], [47.0, 32500.0], [46.0, 32509.0], [49.0, 32567.0], [48.0, 32499.0], [50.0, 33117.0], [52.0, 32495.0], [55.0, 32600.0], [54.0, 32705.333333333332], [56.0, 33069.0], [58.0, 32557.5], [61.0, 32481.0], [60.0, 32556.0], [63.0, 32516.0], [62.0, 32906.0], [67.0, 32521.5], [65.0, 32499.5], [71.0, 32566.0], [70.0, 32473.0], [69.0, 32499.0], [68.0, 33047.0], [75.0, 32467.0], [74.0, 32457.0], [73.0, 32730.5], [79.0, 33034.0], [78.0, 32457.0], [77.0, 32444.0], [76.0, 32457.0], [81.0, 32480.0], [85.0, 32649.5], [90.0, 32521.0], [89.0, 32764.5], [88.0, 32736.0], [93.0, 32969.0], [98.0, 32568.57142857143], [103.0, 32629.5], [101.0, 32386.0], [100.0, 32424.0], [106.0, 32405.0], [104.0, 32390.0], [109.0, 32995.0], [108.0, 32403.0], [115.0, 32349.0], [114.0, 32702.0], [112.0, 32397.333333333332], [119.0, 32659.5], [117.0, 32447.0], [116.0, 32907.0], [123.0, 32933.0], [122.0, 32660.0], [127.0, 32420.0], [126.0, 32956.0], [125.0, 32378.0], [135.0, 32385.5], [133.0, 32424.5], [131.0, 32635.0], [129.0, 32412.0], [128.0, 32336.0], [143.0, 32389.0], [142.0, 32408.0], [141.0, 32394.0], [140.0, 32377.0], [138.0, 32416.0], [137.0, 32331.0], [136.0, 32325.0], [151.0, 32296.0], [149.0, 32383.0], [148.0, 32848.0], [147.0, 32912.5], [145.0, 32540.5], [159.0, 32285.0], [158.0, 32878.0], [157.0, 32332.5], [155.0, 32881.0], [154.0, 32351.0], [153.0, 32373.0], [152.0, 32416.0], [166.0, 32358.0], [165.0, 32291.0], [164.0, 32319.0], [162.0, 32371.0], [161.0, 32396.0], [174.0, 32303.5], [172.0, 32307.0], [170.0, 32296.0], [169.0, 32356.666666666668], [183.0, 32339.0], [182.0, 32522.333333333332], [181.0, 32260.0], [178.0, 32588.5], [191.0, 32263.0], [190.0, 32303.0], [189.0, 32353.0], [188.0, 32268.0], [187.0, 32856.0], [186.0, 32264.0], [185.0, 32296.0], [184.0, 32267.0], [199.0, 32233.0], [198.0, 32235.0], [197.0, 32374.0], [196.0, 32238.0], [195.0, 32335.5], [193.0, 32235.5], [205.0, 32815.0], [204.0, 32363.0], [203.0, 32431.666666666668], [202.0, 32312.0], [214.0, 32307.0], [213.0, 32307.0], [212.0, 32322.0], [211.0, 32217.0], [210.0, 32219.0], [209.0, 32289.333333333332], [208.0, 32269.0], [221.0, 32323.0], [220.0, 32610.333333333332], [217.0, 32201.0], [216.0, 32495.0], [230.0, 32200.0], [229.0, 32191.5], [227.0, 32302.0], [226.0, 32277.0], [225.0, 32203.0], [224.0, 32228.0], [239.0, 32761.0], [238.0, 32739.0], [237.0, 32513.5], [235.0, 32169.0], [234.0, 32181.0], [233.0, 32266.0], [232.0, 32544.0], [247.0, 32200.666666666668], [244.0, 32729.0], [243.0, 32262.0], [242.0, 32253.0], [241.0, 32202.0], [255.0, 32760.0], [253.0, 32439.5], [251.0, 32219.0], [250.0, 32371.333333333332], [270.0, 32726.5], [271.0, 32648.0], [269.0, 32407.666666666668], [268.0, 32657.5], [266.0, 32656.0], [265.0, 32729.0], [260.0, 32675.0], [257.0, 32446.5], [256.0, 32743.0], [275.0, 32698.5], [287.0, 32696.0], [286.0, 32667.333333333332], [283.0, 32153.0], [282.0, 32555.0], [280.0, 32636.0], [279.0, 32689.0], [278.0, 32707.0], [276.0, 32641.0], [273.0, 32591.75], [272.0, 32740.0], [291.0, 32628.0], [303.0, 32701.0], [302.0, 32568.5], [300.0, 32659.0], [296.0, 32683.0], [294.0, 32699.0], [293.0, 32695.5], [290.0, 32630.0], [289.0, 32702.0], [288.0, 32658.0], [319.0, 32595.0], [318.0, 32645.333333333332], [315.0, 32640.0], [314.0, 32672.0], [313.0, 32585.0], [312.0, 32643.0], [311.0, 32487.666666666668], [308.0, 32669.0], [307.0, 32684.0], [306.0, 32646.5], [304.0, 32659.0], [323.0, 32606.0], [333.0, 32629.0], [332.0, 32639.0], [330.0, 32578.0], [329.0, 32567.5], [327.0, 32560.5], [325.0, 32628.0], [322.0, 32564.0], [321.0, 32659.0], [320.0, 32676.0], [351.0, 32292.666666666668], [348.0, 32144.0], [347.0, 32610.5], [345.0, 32513.5], [343.0, 32069.0], [342.0, 32636.0], [340.0, 32547.0], [339.0, 32578.333333333332], [336.0, 32605.666666666668], [365.0, 32119.0], [367.0, 32314.0], [364.0, 32121.0], [355.0, 32133.0], [354.0, 32293.0], [363.0, 32122.0], [362.0, 32127.0], [361.0, 32125.0], [360.0, 32099.333333333332], [357.0, 32579.0], [356.0, 32131.0], [383.0, 32456.4], [378.0, 32531.0], [377.0, 32573.0], [376.0, 32362.0], [373.0, 32537.0], [372.0, 32111.0], [371.0, 32565.0], [369.0, 32601.5], [398.0, 32531.0], [399.0, 32523.0], [397.0, 31868.0], [396.0, 32552.0], [395.0, 32423.5], [393.0, 32529.0], [392.0, 32489.0], [389.0, 32494.0], [387.0, 32400.0], [386.0, 32558.0], [385.0, 32551.0], [388.0, 32518.0], [402.0, 32432.0], [413.0, 31954.0], [414.0, 32461.0], [412.0, 32291.333333333332], [409.0, 32339.0], [408.0, 32419.0], [406.0, 31856.0], [405.0, 32454.0], [404.0, 32482.0], [401.0, 32353.0], [400.0, 32448.0], [429.0, 32021.0], [428.0, 32419.0], [427.0, 32101.333333333332], [424.0, 32437.666666666668], [421.0, 32489.5], [419.0, 32502.0], [418.0, 32474.0], [417.0, 32501.666666666668], [445.0, 32249.0], [447.0, 32212.0], [444.0, 31998.5], [442.0, 32173.666666666668], [441.0, 31862.0], [437.0, 32315.0], [434.0, 32008.0], [433.0, 32111.0], [432.0, 32314.666666666668], [451.0, 32371.0], [462.0, 32153.75], [458.0, 31977.0], [456.0, 32019.0], [453.0, 32156.0], [452.0, 32030.0], [450.0, 32442.0], [449.0, 32101.0], [448.0, 32109.0], [477.0, 31946.0], [476.0, 32415.0], [475.0, 32155.0], [474.0, 32009.0], [473.0, 31978.0], [471.0, 32016.0], [470.0, 31801.5], [468.0, 32073.0], [467.0, 32026.333333333332], [464.0, 32214.0], [493.0, 32064.0], [495.0, 32064.0], [492.0, 31978.0], [490.0, 31795.0], [489.0, 31944.0], [488.0, 32107.5], [486.0, 32267.666666666668], [483.0, 32183.0], [481.0, 32180.333333333332], [480.0, 31994.0], [510.0, 31660.0], [511.0, 31649.0], [509.0, 31650.0], [508.0, 31652.0], [507.0, 31923.5], [505.0, 31671.0], [504.0, 31930.5], [502.0, 31927.0], [499.0, 31792.0], [498.0, 31762.333333333332], [501.0, 31930.0], [500.0, 31959.0], [519.0, 32152.0], [530.0, 32317.0], [540.0, 32093.5], [538.0, 31933.0], [537.0, 31948.666666666668], [518.0, 31671.0], [517.0, 31743.0], [516.0, 32102.0], [515.0, 32277.0], [514.0, 32111.5], [512.0, 31913.0], [527.0, 31552.0], [525.0, 32260.0], [524.0, 31080.0], [523.0, 32187.0], [521.0, 32025.5], [534.0, 32016.5], [532.0, 31044.0], [531.0, 31050.0], [529.0, 31063.0], [528.0, 31088.0], [574.0, 31493.5], [575.0, 32169.0], [562.0, 32000.5], [560.0, 31567.0], [572.0, 31441.5], [570.0, 31546.0], [569.0, 31837.0], [568.0, 32233.0], [559.0, 32046.0], [545.0, 31934.0], [544.0, 32023.25], [547.0, 31583.0], [546.0, 32061.0], [551.0, 31801.666666666668], [550.0, 32258.0], [558.0, 31744.0], [556.0, 31789.5], [554.0, 32270.0], [553.0, 31967.0], [567.0, 31917.0], [566.0, 30853.0], [565.0, 31737.5], [563.0, 32084.0], [601.0, 32005.0], [605.0, 31860.0], [606.0, 31891.0], [593.0, 30620.0], [592.0, 32200.0], [597.0, 31874.0], [596.0, 32080.666666666668], [604.0, 31788.0], [603.0, 31857.0], [602.0, 31900.0], [600.0, 32005.0], [583.0, 31881.0], [582.0, 31695.0], [581.0, 30770.0], [580.0, 32196.0], [579.0, 31896.0], [578.0, 31924.0], [577.0, 30775.0], [591.0, 30657.5], [590.0, 31545.0], [588.0, 31927.5], [586.0, 32033.0], [585.0, 30711.0], [584.0, 31935.0], [599.0, 32008.0], [598.0, 32196.0], [633.0, 31819.0], [627.0, 31818.0], [637.0, 32073.0], [638.0, 32151.0], [625.0, 31964.0], [636.0, 31801.333333333332], [632.0, 31819.0], [614.0, 31794.5], [612.0, 31825.0], [611.0, 31920.5], [610.0, 31906.0], [608.0, 32023.0], [623.0, 31794.0], [621.0, 31825.0], [620.0, 32153.0], [619.0, 32006.0], [618.0, 31895.0], [617.0, 31941.666666666668], [631.0, 31900.0], [630.0, 31787.0], [628.0, 31960.0], [670.0, 31813.0], [671.0, 31814.0], [657.0, 31758.333333333332], [656.0, 31839.0], [660.0, 31817.0], [659.0, 31730.5], [669.0, 31942.5], [667.0, 31772.0], [666.0, 31704.0], [665.0, 31809.0], [664.0, 31753.0], [645.0, 31783.666666666668], [642.0, 31976.5], [640.0, 31858.0], [653.0, 32059.0], [652.0, 31780.0], [650.0, 31688.0], [649.0, 31726.0], [648.0, 31806.666666666668], [663.0, 31709.5], [661.0, 31824.0], [679.0, 31842.0], [702.0, 31678.5], [703.0, 31713.0], [700.0, 31716.0], [699.0, 31651.0], [697.0, 31787.0], [678.0, 31612.0], [677.0, 31381.0], [676.0, 31790.0], [675.0, 31799.0], [674.0, 31920.0], [672.0, 31698.0], [687.0, 31592.0], [686.0, 31594.0], [685.0, 31638.0], [684.0, 31668.0], [681.0, 31646.5], [695.0, 31586.0], [693.0, 31598.333333333332], [691.0, 31619.0], [689.0, 31680.5], [728.0, 31629.5], [734.0, 31689.5], [735.0, 31763.0], [720.0, 31631.666666666668], [732.0, 31657.0], [731.0, 31702.0], [730.0, 31629.0], [717.0, 31581.0], [704.0, 31638.0], [707.0, 31556.0], [706.0, 31698.0], [709.0, 31627.0], [708.0, 31590.0], [711.0, 31729.0], [710.0, 31702.0], [715.0, 31547.0], [714.0, 31550.0], [713.0, 31605.5], [726.0, 31599.0], [725.0, 31684.666666666668], [722.0, 31292.0], [721.0, 31670.0], [740.0, 31526.0], [765.0, 31535.5], [767.0, 31679.0], [761.0, 31532.5], [743.0, 31491.0], [742.0, 31579.0], [739.0, 31644.0], [738.0, 31503.0], [737.0, 31651.0], [736.0, 31641.0], [759.0, 31563.0], [756.0, 31629.0], [754.0, 31542.333333333332], [751.0, 31493.0], [750.0, 31494.0], [749.0, 31496.0], [748.0, 31656.0], [747.0, 31513.5], [745.0, 31507.0], [744.0, 31511.0], [798.0, 31541.0], [799.0, 31417.0], [785.0, 31494.5], [788.0, 31477.0], [787.0, 31424.5], [797.0, 31437.0], [796.0, 31409.5], [794.0, 31352.0], [793.0, 31474.0], [792.0, 31579.5], [775.0, 31467.0], [773.0, 31497.0], [772.0, 31397.0], [771.0, 31533.0], [770.0, 31417.0], [768.0, 31586.0], [783.0, 31551.6], [778.0, 31506.0], [777.0, 31399.0], [776.0, 31492.0], [790.0, 31389.0], [789.0, 31474.0], [825.0, 31387.0], [818.0, 31408.0], [829.0, 31325.0], [830.0, 31295.0], [817.0, 31388.0], [816.0, 31498.0], [828.0, 31389.0], [824.0, 31295.0], [807.0, 31570.0], [806.0, 31444.0], [805.0, 31453.0], [804.0, 31442.0], [803.0, 31675.0], [802.0, 31592.0], [801.0, 31539.0], [800.0, 31455.0], [815.0, 31423.0], [814.0, 31365.5], [812.0, 31187.0], [811.0, 31426.0], [810.0, 31519.0], [809.0, 31432.0], [808.0, 31328.0], [823.0, 31398.0], [821.0, 31405.5], [819.0, 31491.0], [857.0, 30021.0], [862.0, 30038.0], [863.0, 31212.0], [848.0, 30629.5], [850.0, 31431.0], [849.0, 31275.0], [852.0, 31407.0], [851.0, 31380.0], [861.0, 30023.0], [859.0, 31285.0], [858.0, 31372.0], [856.0, 31370.0], [839.0, 30024.0], [838.0, 31341.0], [837.0, 31305.0], [836.0, 30025.0], [835.0, 31346.0], [834.0, 31482.0], [833.0, 30856.333333333332], [846.0, 31428.0], [845.0, 31239.0], [844.0, 30023.0], [843.0, 31108.5], [841.0, 31441.0], [855.0, 31217.0], [854.0, 31299.5], [888.0, 30965.0], [894.0, 30042.0], [895.0, 30040.0], [881.0, 31138.0], [880.0, 31251.0], [883.0, 31219.0], [882.0, 31217.0], [893.0, 30043.0], [892.0, 31181.0], [891.0, 30805.333333333332], [879.0, 30024.0], [865.0, 31198.0], [868.0, 30621.0], [866.0, 30027.0], [870.0, 31288.0], [869.0, 30024.0], [877.0, 31154.0], [876.0, 30885.0], [875.0, 31347.0], [874.0, 31257.0], [873.0, 30891.0], [872.0, 30601.0], [887.0, 31199.0], [886.0, 30028.0], [885.0, 31114.0], [884.0, 31316.0], [922.0, 30025.0], [926.0, 31115.0], [927.0, 30734.0], [915.0, 30374.0], [914.0, 30036.0], [925.0, 31197.0], [924.0, 31094.0], [923.0, 30028.0], [921.0, 30371.0], [903.0, 31192.0], [902.0, 31144.5], [900.0, 31166.0], [899.0, 31133.0], [898.0, 30035.0], [897.0, 30036.0], [896.0, 30039.0], [911.0, 30041.0], [910.0, 30040.333333333332], [907.0, 30048.0], [906.0, 30776.0], [905.0, 31090.0], [904.0, 30116.0], [918.0, 31152.0], [917.0, 30589.0], [954.0, 31110.0], [948.0, 30656.0], [958.0, 30932.5], [959.0, 31070.0], [947.0, 31006.5], [945.0, 30581.5], [956.0, 31047.0], [953.0, 31024.5], [935.0, 30900.0], [933.0, 31088.0], [932.0, 30716.0], [931.0, 30031.0], [930.0, 30027.0], [929.0, 30607.0], [943.0, 30743.0], [940.0, 31149.0], [939.0, 31050.0], [938.0, 30675.0], [937.0, 31159.0], [936.0, 30024.0], [951.0, 31116.0], [950.0, 30026.0], [949.0, 30031.0], [985.0, 30445.0], [977.0, 30805.0], [990.0, 30818.0], [989.0, 30276.666666666668], [986.0, 30973.0], [982.0, 30048.0], [981.0, 30448.0], [978.0, 30034.0], [976.0, 30519.0], [975.0, 30565.333333333332], [961.0, 30065.0], [960.0, 30046.0], [963.0, 30060.0], [962.0, 30031.0], [966.0, 30443.5], [964.0, 30047.0], [972.0, 30029.0], [971.0, 30824.0], [970.0, 30044.0], [969.0, 30541.0], [968.0, 30537.5], [1000.0, 30232.833333333332], [994.0, 30679.0], [993.0, 30810.0], [992.0, 30630.0], [1.0, 32580.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}, {"data": [[501.0289999999995, 31896.480000000007]], "isOverall": false, "label": "สร้าง Visit-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.75792188E12, "maxY": 35183.333333333336, "series": [{"data": [[1.75792188E12, 35183.333333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75792188E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792188E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 31896.480000000007, "minX": 1.75792188E12, "maxY": 31896.480000000007, "series": [{"data": [[1.75792188E12, 31896.480000000007]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792188E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75792188E12, "maxY": 4.9E-324, "series": [{"data": [[1.75792188E12, 0.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792188E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1891.6810000000016, "minX": 1.75792188E12, "maxY": 1891.6810000000016, "series": [{"data": [[1.75792188E12, 1891.6810000000016]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792188E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 30238.0, "minX": 39.0, "maxY": 32433.0, "series": [{"data": [[547.0, 32433.0], [39.0, 30238.0], [414.0, 31504.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 547.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 39.0, "maxY": 4.9E-324, "series": [{"data": [[547.0, 0.0], [39.0, 0.0], [414.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 547.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792188E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792188E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792188E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792188E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792188E12, 16.666666666666668]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792188E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792188E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792188E12, 16.666666666666668]], "isOverall": false, "label": "สร้าง Visit-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792188E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792188E12, "maxY": 16.666666666666668, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75792188E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792188E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

