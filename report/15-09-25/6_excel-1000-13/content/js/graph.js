/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "maxY": 19485.0, "series": [{"data": [[0.0, 102.0], [0.1, 108.0], [0.2, 109.0], [0.3, 109.0], [0.4, 115.0], [0.5, 116.0], [0.6, 120.0], [0.7, 120.0], [0.8, 123.0], [0.9, 127.0], [1.0, 127.0], [1.1, 128.0], [1.2, 128.0], [1.3, 129.0], [1.4, 129.0], [1.5, 133.0], [1.6, 137.0], [1.7, 137.0], [1.8, 139.0], [1.9, 139.0], [2.0, 142.0], [2.1, 142.0], [2.2, 143.0], [2.3, 143.0], [2.4, 143.0], [2.5, 144.0], [2.6, 147.0], [2.7, 150.0], [2.8, 151.0], [2.9, 159.0], [3.0, 180.0], [3.1, 228.0], [3.2, 229.0], [3.3, 231.0], [3.4, 355.0], [3.5, 397.0], [3.6, 429.0], [3.7, 448.0], [3.8, 509.0], [3.9, 665.0], [4.0, 686.0], [4.1, 688.0], [4.2, 695.0], [4.3, 697.0], [4.4, 697.0], [4.5, 702.0], [4.6, 704.0], [4.7, 742.0], [4.8, 744.0], [4.9, 745.0], [5.0, 836.0], [5.1, 838.0], [5.2, 874.0], [5.3, 884.0], [5.4, 894.0], [5.5, 1035.0], [5.6, 1036.0], [5.7, 1109.0], [5.8, 1135.0], [5.9, 1140.0], [6.0, 1142.0], [6.1, 1192.0], [6.2, 1240.0], [6.3, 1254.0], [6.4, 1282.0], [6.5, 1286.0], [6.6, 1301.0], [6.7, 1309.0], [6.8, 1331.0], [6.9, 1354.0], [7.0, 1379.0], [7.1, 1404.0], [7.2, 1407.0], [7.3, 1426.0], [7.4, 1433.0], [7.5, 1441.0], [7.6, 1457.0], [7.7, 1493.0], [7.8, 1494.0], [7.9, 1498.0], [8.0, 1508.0], [8.1, 1525.0], [8.2, 1538.0], [8.3, 1539.0], [8.4, 1546.0], [8.5, 1560.0], [8.6, 1567.0], [8.7, 1578.0], [8.8, 1583.0], [8.9, 1588.0], [9.0, 1595.0], [9.1, 1620.0], [9.2, 1636.0], [9.3, 1651.0], [9.4, 1680.0], [9.5, 1729.0], [9.6, 1730.0], [9.7, 1738.0], [9.8, 1749.0], [9.9, 1754.0], [10.0, 1758.0], [10.1, 1768.0], [10.2, 1776.0], [10.3, 1805.0], [10.4, 1807.0], [10.5, 1816.0], [10.6, 1837.0], [10.7, 1851.0], [10.8, 1853.0], [10.9, 1854.0], [11.0, 1855.0], [11.1, 1864.0], [11.2, 1872.0], [11.3, 1872.0], [11.4, 1883.0], [11.5, 1887.0], [11.6, 1890.0], [11.7, 1891.0], [11.8, 1891.0], [11.9, 1897.0], [12.0, 1906.0], [12.1, 1909.0], [12.2, 1910.0], [12.3, 1914.0], [12.4, 1918.0], [12.5, 1918.0], [12.6, 1925.0], [12.7, 1926.0], [12.8, 1929.0], [12.9, 1943.0], [13.0, 1948.0], [13.1, 1966.0], [13.2, 1972.0], [13.3, 1974.0], [13.4, 1978.0], [13.5, 1979.0], [13.6, 1994.0], [13.7, 2005.0], [13.8, 2006.0], [13.9, 2006.0], [14.0, 2009.0], [14.1, 2011.0], [14.2, 2012.0], [14.3, 2030.0], [14.4, 2035.0], [14.5, 2037.0], [14.6, 2037.0], [14.7, 2058.0], [14.8, 2062.0], [14.9, 2064.0], [15.0, 2068.0], [15.1, 2068.0], [15.2, 2069.0], [15.3, 2070.0], [15.4, 2077.0], [15.5, 2088.0], [15.6, 2097.0], [15.7, 2118.0], [15.8, 2121.0], [15.9, 2123.0], [16.0, 2135.0], [16.1, 2137.0], [16.2, 2139.0], [16.3, 2155.0], [16.4, 2159.0], [16.5, 2189.0], [16.6, 2195.0], [16.7, 2195.0], [16.8, 2202.0], [16.9, 2208.0], [17.0, 2211.0], [17.1, 2216.0], [17.2, 2240.0], [17.3, 2241.0], [17.4, 2245.0], [17.5, 2307.0], [17.6, 2312.0], [17.7, 2317.0], [17.8, 2356.0], [17.9, 2382.0], [18.0, 2390.0], [18.1, 2392.0], [18.2, 2410.0], [18.3, 2421.0], [18.4, 2422.0], [18.5, 2427.0], [18.6, 2428.0], [18.7, 2429.0], [18.8, 2431.0], [18.9, 2432.0], [19.0, 2443.0], [19.1, 2449.0], [19.2, 2449.0], [19.3, 2461.0], [19.4, 2471.0], [19.5, 2472.0], [19.6, 2478.0], [19.7, 2502.0], [19.8, 2507.0], [19.9, 2512.0], [20.0, 2513.0], [20.1, 2514.0], [20.2, 2529.0], [20.3, 2545.0], [20.4, 2593.0], [20.5, 2595.0], [20.6, 2597.0], [20.7, 2600.0], [20.8, 2608.0], [20.9, 2615.0], [21.0, 2622.0], [21.1, 2625.0], [21.2, 2631.0], [21.3, 2647.0], [21.4, 2660.0], [21.5, 2691.0], [21.6, 2692.0], [21.7, 2713.0], [21.8, 2722.0], [21.9, 2732.0], [22.0, 2743.0], [22.1, 2743.0], [22.2, 2748.0], [22.3, 2752.0], [22.4, 2790.0], [22.5, 2823.0], [22.6, 2826.0], [22.7, 2826.0], [22.8, 2846.0], [22.9, 2855.0], [23.0, 2873.0], [23.1, 2875.0], [23.2, 2879.0], [23.3, 2912.0], [23.4, 2916.0], [23.5, 2918.0], [23.6, 2921.0], [23.7, 2927.0], [23.8, 2933.0], [23.9, 2941.0], [24.0, 2946.0], [24.1, 2957.0], [24.2, 2962.0], [24.3, 2980.0], [24.4, 2983.0], [24.5, 2998.0], [24.6, 3003.0], [24.7, 3014.0], [24.8, 3028.0], [24.9, 3041.0], [25.0, 3042.0], [25.1, 3044.0], [25.2, 3044.0], [25.3, 3052.0], [25.4, 3056.0], [25.5, 3060.0], [25.6, 3068.0], [25.7, 3069.0], [25.8, 3070.0], [25.9, 3072.0], [26.0, 3076.0], [26.1, 3088.0], [26.2, 3093.0], [26.3, 3106.0], [26.4, 3106.0], [26.5, 3111.0], [26.6, 3113.0], [26.7, 3116.0], [26.8, 3123.0], [26.9, 3128.0], [27.0, 3128.0], [27.1, 3134.0], [27.2, 3140.0], [27.3, 3159.0], [27.4, 3162.0], [27.5, 3176.0], [27.6, 3189.0], [27.7, 3189.0], [27.8, 3206.0], [27.9, 3206.0], [28.0, 3219.0], [28.1, 3220.0], [28.2, 3220.0], [28.3, 3225.0], [28.4, 3230.0], [28.5, 3233.0], [28.6, 3238.0], [28.7, 3249.0], [28.8, 3256.0], [28.9, 3257.0], [29.0, 3260.0], [29.1, 3265.0], [29.2, 3268.0], [29.3, 3290.0], [29.4, 3306.0], [29.5, 3318.0], [29.6, 3318.0], [29.7, 3329.0], [29.8, 3334.0], [29.9, 3335.0], [30.0, 3348.0], [30.1, 3358.0], [30.2, 3358.0], [30.3, 3363.0], [30.4, 3378.0], [30.5, 3382.0], [30.6, 3382.0], [30.7, 3387.0], [30.8, 3395.0], [30.9, 3397.0], [31.0, 3400.0], [31.1, 3442.0], [31.2, 3453.0], [31.3, 3454.0], [31.4, 3455.0], [31.5, 3456.0], [31.6, 3464.0], [31.7, 3464.0], [31.8, 3475.0], [31.9, 3476.0], [32.0, 3481.0], [32.1, 3488.0], [32.2, 3496.0], [32.3, 3503.0], [32.4, 3511.0], [32.5, 3518.0], [32.6, 3526.0], [32.7, 3535.0], [32.8, 3537.0], [32.9, 3538.0], [33.0, 3545.0], [33.1, 3578.0], [33.2, 3606.0], [33.3, 3625.0], [33.4, 3659.0], [33.5, 3660.0], [33.6, 3676.0], [33.7, 3688.0], [33.8, 3695.0], [33.9, 3696.0], [34.0, 3704.0], [34.1, 3713.0], [34.2, 3726.0], [34.3, 3738.0], [34.4, 3741.0], [34.5, 3745.0], [34.6, 3756.0], [34.7, 3769.0], [34.8, 3782.0], [34.9, 3785.0], [35.0, 3785.0], [35.1, 3819.0], [35.2, 3835.0], [35.3, 3839.0], [35.4, 3881.0], [35.5, 3893.0], [35.6, 3898.0], [35.7, 3923.0], [35.8, 3923.0], [35.9, 3924.0], [36.0, 3925.0], [36.1, 3938.0], [36.2, 3943.0], [36.3, 3949.0], [36.4, 3964.0], [36.5, 3966.0], [36.6, 3971.0], [36.7, 3978.0], [36.8, 3979.0], [36.9, 3991.0], [37.0, 3993.0], [37.1, 4022.0], [37.2, 4036.0], [37.3, 4042.0], [37.4, 4046.0], [37.5, 4056.0], [37.6, 4065.0], [37.7, 4067.0], [37.8, 4086.0], [37.9, 4094.0], [38.0, 4103.0], [38.1, 4122.0], [38.2, 4143.0], [38.3, 4163.0], [38.4, 4164.0], [38.5, 4173.0], [38.6, 4197.0], [38.7, 4205.0], [38.8, 4207.0], [38.9, 4207.0], [39.0, 4317.0], [39.1, 4337.0], [39.2, 4398.0], [39.3, 4399.0], [39.4, 4425.0], [39.5, 4427.0], [39.6, 4478.0], [39.7, 4488.0], [39.8, 4489.0], [39.9, 4510.0], [40.0, 4553.0], [40.1, 4585.0], [40.2, 4685.0], [40.3, 4736.0], [40.4, 4873.0], [40.5, 5227.0], [40.6, 5253.0], [40.7, 5277.0], [40.8, 5605.0], [40.9, 5832.0], [41.0, 5898.0], [41.1, 6082.0], [41.2, 6092.0], [41.3, 6404.0], [41.4, 6655.0], [41.5, 6939.0], [41.6, 7199.0], [41.7, 7249.0], [41.8, 7395.0], [41.9, 7583.0], [42.0, 7613.0], [42.1, 7761.0], [42.2, 8139.0], [42.3, 8193.0], [42.4, 8280.0], [42.5, 8319.0], [42.6, 8346.0], [42.7, 8347.0], [42.8, 8366.0], [42.9, 8525.0], [43.0, 8607.0], [43.1, 8881.0], [43.2, 9091.0], [43.3, 9125.0], [43.4, 9260.0], [43.5, 9343.0], [43.6, 9343.0], [43.7, 9475.0], [43.8, 9643.0], [43.9, 9688.0], [44.0, 9716.0], [44.1, 9747.0], [44.2, 9760.0], [44.3, 9815.0], [44.4, 9822.0], [44.5, 9858.0], [44.6, 9866.0], [44.7, 9960.0], [44.8, 9980.0], [44.9, 10016.0], [45.0, 10056.0], [45.1, 10075.0], [45.2, 10129.0], [45.3, 10192.0], [45.4, 10221.0], [45.5, 10270.0], [45.6, 10280.0], [45.7, 10290.0], [45.8, 10326.0], [45.9, 10421.0], [46.0, 10517.0], [46.1, 10522.0], [46.2, 10556.0], [46.3, 10581.0], [46.4, 10583.0], [46.5, 10716.0], [46.6, 10778.0], [46.7, 10797.0], [46.8, 10853.0], [46.9, 10859.0], [47.0, 10867.0], [47.1, 10941.0], [47.2, 10943.0], [47.3, 10945.0], [47.4, 10957.0], [47.5, 10974.0], [47.6, 11029.0], [47.7, 11058.0], [47.8, 11072.0], [47.9, 11080.0], [48.0, 11100.0], [48.1, 11112.0], [48.2, 11114.0], [48.3, 11115.0], [48.4, 11118.0], [48.5, 11124.0], [48.6, 11129.0], [48.7, 11130.0], [48.8, 11146.0], [48.9, 11147.0], [49.0, 11155.0], [49.1, 11169.0], [49.2, 11172.0], [49.3, 11178.0], [49.4, 11199.0], [49.5, 11230.0], [49.6, 11232.0], [49.7, 11266.0], [49.8, 11308.0], [49.9, 11309.0], [50.0, 11312.0], [50.1, 11327.0], [50.2, 11334.0], [50.3, 11356.0], [50.4, 11374.0], [50.5, 11382.0], [50.6, 11383.0], [50.7, 11386.0], [50.8, 11389.0], [50.9, 11412.0], [51.0, 11429.0], [51.1, 11454.0], [51.2, 11470.0], [51.3, 11472.0], [51.4, 11475.0], [51.5, 11488.0], [51.6, 11504.0], [51.7, 11525.0], [51.8, 11526.0], [51.9, 11527.0], [52.0, 11529.0], [52.1, 11530.0], [52.2, 11540.0], [52.3, 11551.0], [52.4, 11566.0], [52.5, 11571.0], [52.6, 11583.0], [52.7, 11613.0], [52.8, 11633.0], [52.9, 11654.0], [53.0, 11661.0], [53.1, 11669.0], [53.2, 11671.0], [53.3, 11673.0], [53.4, 11678.0], [53.5, 11680.0], [53.6, 11681.0], [53.7, 11686.0], [53.8, 11688.0], [53.9, 11699.0], [54.0, 11700.0], [54.1, 11700.0], [54.2, 11702.0], [54.3, 11702.0], [54.4, 11703.0], [54.5, 11710.0], [54.6, 11711.0], [54.7, 11711.0], [54.8, 11713.0], [54.9, 11726.0], [55.0, 11727.0], [55.1, 11734.0], [55.2, 11737.0], [55.3, 11744.0], [55.4, 11749.0], [55.5, 11771.0], [55.6, 11787.0], [55.7, 11858.0], [55.8, 11884.0], [55.9, 11886.0], [56.0, 11897.0], [56.1, 11919.0], [56.2, 11923.0], [56.3, 11938.0], [56.4, 11962.0], [56.5, 11981.0], [56.6, 12025.0], [56.7, 12082.0], [56.8, 12092.0], [56.9, 12115.0], [57.0, 12140.0], [57.1, 12142.0], [57.2, 12158.0], [57.3, 12190.0], [57.4, 12213.0], [57.5, 12276.0], [57.6, 12285.0], [57.7, 12292.0], [57.8, 12292.0], [57.9, 12302.0], [58.0, 12307.0], [58.1, 12311.0], [58.2, 12351.0], [58.3, 12361.0], [58.4, 12372.0], [58.5, 12380.0], [58.6, 12381.0], [58.7, 12386.0], [58.8, 12400.0], [58.9, 12410.0], [59.0, 12422.0], [59.1, 12459.0], [59.2, 12469.0], [59.3, 12479.0], [59.4, 12487.0], [59.5, 12490.0], [59.6, 12496.0], [59.7, 12501.0], [59.8, 12508.0], [59.9, 12516.0], [60.0, 12523.0], [60.1, 12526.0], [60.2, 12534.0], [60.3, 12534.0], [60.4, 12549.0], [60.5, 12560.0], [60.6, 12581.0], [60.7, 12587.0], [60.8, 12590.0], [60.9, 12605.0], [61.0, 12612.0], [61.1, 12684.0], [61.2, 12691.0], [61.3, 12701.0], [61.4, 12724.0], [61.5, 12728.0], [61.6, 12749.0], [61.7, 12751.0], [61.8, 12765.0], [61.9, 12778.0], [62.0, 12790.0], [62.1, 12801.0], [62.2, 12814.0], [62.3, 12821.0], [62.4, 12827.0], [62.5, 12836.0], [62.6, 12839.0], [62.7, 12855.0], [62.8, 12860.0], [62.9, 12902.0], [63.0, 12986.0], [63.1, 12995.0], [63.2, 12995.0], [63.3, 13003.0], [63.4, 13013.0], [63.5, 13025.0], [63.6, 13082.0], [63.7, 13094.0], [63.8, 13101.0], [63.9, 13110.0], [64.0, 13120.0], [64.1, 13134.0], [64.2, 13149.0], [64.3, 13168.0], [64.4, 13204.0], [64.5, 13237.0], [64.6, 13271.0], [64.7, 13290.0], [64.8, 13294.0], [64.9, 13331.0], [65.0, 13341.0], [65.1, 13357.0], [65.2, 13365.0], [65.3, 13386.0], [65.4, 13396.0], [65.5, 13399.0], [65.6, 13416.0], [65.7, 13424.0], [65.8, 13429.0], [65.9, 13431.0], [66.0, 13431.0], [66.1, 13464.0], [66.2, 13485.0], [66.3, 13510.0], [66.4, 13519.0], [66.5, 13559.0], [66.6, 13573.0], [66.7, 13601.0], [66.8, 13606.0], [66.9, 13607.0], [67.0, 13619.0], [67.1, 13654.0], [67.2, 13670.0], [67.3, 13680.0], [67.4, 13683.0], [67.5, 13709.0], [67.6, 13713.0], [67.7, 13749.0], [67.8, 13795.0], [67.9, 13902.0], [68.0, 13931.0], [68.1, 13940.0], [68.2, 13952.0], [68.3, 14032.0], [68.4, 14092.0], [68.5, 14130.0], [68.6, 14154.0], [68.7, 14181.0], [68.8, 14271.0], [68.9, 14292.0], [69.0, 14333.0], [69.1, 14337.0], [69.2, 14461.0], [69.3, 14464.0], [69.4, 14474.0], [69.5, 14477.0], [69.6, 14510.0], [69.7, 14608.0], [69.8, 14625.0], [69.9, 14632.0], [70.0, 14633.0], [70.1, 14652.0], [70.2, 14738.0], [70.3, 14745.0], [70.4, 14785.0], [70.5, 14796.0], [70.6, 14812.0], [70.7, 14818.0], [70.8, 14833.0], [70.9, 14836.0], [71.0, 14841.0], [71.1, 14857.0], [71.2, 14871.0], [71.3, 14916.0], [71.4, 14930.0], [71.5, 14988.0], [71.6, 15001.0], [71.7, 15015.0], [71.8, 15038.0], [71.9, 15105.0], [72.0, 15135.0], [72.1, 15186.0], [72.2, 15194.0], [72.3, 15217.0], [72.4, 15318.0], [72.5, 15382.0], [72.6, 15405.0], [72.7, 15436.0], [72.8, 15497.0], [72.9, 15501.0], [73.0, 15501.0], [73.1, 15527.0], [73.2, 15528.0], [73.3, 15529.0], [73.4, 15537.0], [73.5, 15588.0], [73.6, 15639.0], [73.7, 15666.0], [73.8, 15677.0], [73.9, 15690.0], [74.0, 15696.0], [74.1, 15712.0], [74.2, 15724.0], [74.3, 15742.0], [74.4, 15763.0], [74.5, 15765.0], [74.6, 15790.0], [74.7, 15791.0], [74.8, 15804.0], [74.9, 15864.0], [75.0, 15865.0], [75.1, 15878.0], [75.2, 15881.0], [75.3, 15885.0], [75.4, 15917.0], [75.5, 15930.0], [75.6, 15957.0], [75.7, 15998.0], [75.8, 15999.0], [75.9, 16007.0], [76.0, 16042.0], [76.1, 16058.0], [76.2, 16068.0], [76.3, 16069.0], [76.4, 16129.0], [76.5, 16144.0], [76.6, 16144.0], [76.7, 16163.0], [76.8, 16167.0], [76.9, 16167.0], [77.0, 16173.0], [77.1, 16193.0], [77.2, 16269.0], [77.3, 16276.0], [77.4, 16276.0], [77.5, 16289.0], [77.6, 16294.0], [77.7, 16305.0], [77.8, 16341.0], [77.9, 16365.0], [78.0, 16372.0], [78.1, 16375.0], [78.2, 16380.0], [78.3, 16399.0], [78.4, 16410.0], [78.5, 16411.0], [78.6, 16417.0], [78.7, 16419.0], [78.8, 16420.0], [78.9, 16424.0], [79.0, 16435.0], [79.1, 16436.0], [79.2, 16483.0], [79.3, 16490.0], [79.4, 16503.0], [79.5, 16536.0], [79.6, 16546.0], [79.7, 16618.0], [79.8, 16624.0], [79.9, 16637.0], [80.0, 16637.0], [80.1, 16669.0], [80.2, 16673.0], [80.3, 16691.0], [80.4, 16733.0], [80.5, 16748.0], [80.6, 16751.0], [80.7, 16762.0], [80.8, 16798.0], [80.9, 16801.0], [81.0, 16807.0], [81.1, 16809.0], [81.2, 16821.0], [81.3, 16830.0], [81.4, 16838.0], [81.5, 16840.0], [81.6, 16887.0], [81.7, 16891.0], [81.8, 16896.0], [81.9, 16897.0], [82.0, 16899.0], [82.1, 16922.0], [82.2, 16924.0], [82.3, 16925.0], [82.4, 16937.0], [82.5, 16937.0], [82.6, 16944.0], [82.7, 16960.0], [82.8, 16960.0], [82.9, 16961.0], [83.0, 16970.0], [83.1, 16977.0], [83.2, 17023.0], [83.3, 17028.0], [83.4, 17038.0], [83.5, 17045.0], [83.6, 17046.0], [83.7, 17047.0], [83.8, 17052.0], [83.9, 17068.0], [84.0, 17070.0], [84.1, 17080.0], [84.2, 17080.0], [84.3, 17086.0], [84.4, 17088.0], [84.5, 17110.0], [84.6, 17118.0], [84.7, 17119.0], [84.8, 17127.0], [84.9, 17132.0], [85.0, 17175.0], [85.1, 17186.0], [85.2, 17189.0], [85.3, 17201.0], [85.4, 17238.0], [85.5, 17247.0], [85.6, 17253.0], [85.7, 17261.0], [85.8, 17262.0], [85.9, 17288.0], [86.0, 17294.0], [86.1, 17307.0], [86.2, 17314.0], [86.3, 17315.0], [86.4, 17319.0], [86.5, 17322.0], [86.6, 17325.0], [86.7, 17332.0], [86.8, 17341.0], [86.9, 17343.0], [87.0, 17355.0], [87.1, 17369.0], [87.2, 17386.0], [87.3, 17393.0], [87.4, 17395.0], [87.5, 17397.0], [87.6, 17400.0], [87.7, 17404.0], [87.8, 17410.0], [87.9, 17413.0], [88.0, 17418.0], [88.1, 17436.0], [88.2, 17440.0], [88.3, 17443.0], [88.4, 17448.0], [88.5, 17457.0], [88.6, 17466.0], [88.7, 17476.0], [88.8, 17490.0], [88.9, 17492.0], [89.0, 17514.0], [89.1, 17528.0], [89.2, 17529.0], [89.3, 17536.0], [89.4, 17545.0], [89.5, 17565.0], [89.6, 17575.0], [89.7, 17577.0], [89.8, 17577.0], [89.9, 17578.0], [90.0, 17578.0], [90.1, 17582.0], [90.2, 17587.0], [90.3, 17588.0], [90.4, 17591.0], [90.5, 17593.0], [90.6, 17607.0], [90.7, 17612.0], [90.8, 17612.0], [90.9, 17612.0], [91.0, 17629.0], [91.1, 17634.0], [91.2, 17634.0], [91.3, 17645.0], [91.4, 17649.0], [91.5, 17653.0], [91.6, 17684.0], [91.7, 17689.0], [91.8, 17702.0], [91.9, 17715.0], [92.0, 17724.0], [92.1, 17729.0], [92.2, 17751.0], [92.3, 17763.0], [92.4, 17764.0], [92.5, 17769.0], [92.6, 17777.0], [92.7, 17782.0], [92.8, 17784.0], [92.9, 17784.0], [93.0, 17788.0], [93.1, 17790.0], [93.2, 17799.0], [93.3, 17802.0], [93.4, 17824.0], [93.5, 17827.0], [93.6, 17834.0], [93.7, 17840.0], [93.8, 17851.0], [93.9, 17861.0], [94.0, 17878.0], [94.1, 17885.0], [94.2, 17888.0], [94.3, 17907.0], [94.4, 17908.0], [94.5, 17932.0], [94.6, 17941.0], [94.7, 17943.0], [94.8, 17961.0], [94.9, 17985.0], [95.0, 17994.0], [95.1, 18007.0], [95.2, 18099.0], [95.3, 18112.0], [95.4, 18122.0], [95.5, 18122.0], [95.6, 18127.0], [95.7, 18139.0], [95.8, 18153.0], [95.9, 18171.0], [96.0, 18175.0], [96.1, 18195.0], [96.2, 18197.0], [96.3, 18200.0], [96.4, 18204.0], [96.5, 18210.0], [96.6, 18213.0], [96.7, 18222.0], [96.8, 18226.0], [96.9, 18235.0], [97.0, 18267.0], [97.1, 18271.0], [97.2, 18272.0], [97.3, 18274.0], [97.4, 18275.0], [97.5, 18312.0], [97.6, 18318.0], [97.7, 18325.0], [97.8, 18332.0], [97.9, 18354.0], [98.0, 18399.0], [98.1, 18431.0], [98.2, 18436.0], [98.3, 18445.0], [98.4, 18526.0], [98.5, 18537.0], [98.6, 18544.0], [98.7, 18619.0], [98.8, 18639.0], [98.9, 18677.0], [99.0, 18882.0], [99.1, 18895.0], [99.2, 19030.0], [99.3, 19048.0], [99.4, 19089.0], [99.5, 19162.0], [99.6, 19213.0], [99.7, 19276.0], [99.8, 19431.0], [99.9, 19485.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 30.0, "series": [{"data": [[100.0, 30.0], [200.0, 3.0], [300.0, 2.0], [400.0, 2.0], [500.0, 1.0], [600.0, 6.0], [700.0, 6.0], [800.0, 5.0], [1000.0, 2.0], [1100.0, 5.0], [1200.0, 4.0], [1300.0, 5.0], [1400.0, 9.0], [1500.0, 11.0], [1600.0, 4.0], [1700.0, 8.0], [1800.0, 17.0], [1900.0, 17.0], [2000.0, 20.0], [2100.0, 11.0], [2200.0, 7.0], [2300.0, 7.0], [2400.0, 14.0], [2500.0, 10.0], [2600.0, 10.0], [2700.0, 8.0], [2800.0, 8.0], [2900.0, 13.0], [3000.0, 17.0], [3100.0, 15.0], [3200.0, 16.0], [3300.0, 16.0], [3400.0, 13.0], [3500.0, 9.0], [3600.0, 8.0], [3700.0, 11.0], [3800.0, 6.0], [3900.0, 14.0], [4000.0, 9.0], [4100.0, 7.0], [4200.0, 3.0], [4300.0, 4.0], [4500.0, 3.0], [4400.0, 5.0], [4600.0, 1.0], [4700.0, 1.0], [4800.0, 1.0], [5200.0, 3.0], [5600.0, 1.0], [5800.0, 2.0], [6000.0, 2.0], [6400.0, 1.0], [6600.0, 1.0], [6900.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7300.0, 1.0], [7500.0, 1.0], [7600.0, 1.0], [7700.0, 1.0], [8100.0, 2.0], [8300.0, 4.0], [8200.0, 1.0], [8600.0, 1.0], [8500.0, 1.0], [9100.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [9200.0, 1.0], [9300.0, 2.0], [9400.0, 1.0], [9600.0, 2.0], [9700.0, 3.0], [9800.0, 4.0], [9900.0, 2.0], [10000.0, 3.0], [10200.0, 4.0], [10100.0, 2.0], [10300.0, 1.0], [10400.0, 1.0], [10500.0, 5.0], [10700.0, 3.0], [10800.0, 3.0], [11100.0, 15.0], [10900.0, 5.0], [11000.0, 4.0], [11200.0, 3.0], [11300.0, 11.0], [11400.0, 7.0], [11500.0, 11.0], [11600.0, 13.0], [11700.0, 17.0], [11800.0, 4.0], [12100.0, 5.0], [11900.0, 5.0], [12000.0, 3.0], [12200.0, 5.0], [12300.0, 9.0], [12400.0, 9.0], [12500.0, 12.0], [12600.0, 4.0], [12700.0, 8.0], [12800.0, 8.0], [13000.0, 5.0], [12900.0, 4.0], [13200.0, 5.0], [13100.0, 6.0], [13300.0, 7.0], [13500.0, 4.0], [13400.0, 7.0], [13600.0, 8.0], [13700.0, 4.0], [13900.0, 4.0], [14100.0, 3.0], [14200.0, 2.0], [14000.0, 2.0], [14300.0, 2.0], [14700.0, 4.0], [14600.0, 5.0], [14400.0, 4.0], [14800.0, 7.0], [14500.0, 1.0], [15000.0, 3.0], [15100.0, 4.0], [15300.0, 2.0], [14900.0, 3.0], [15200.0, 1.0], [15500.0, 7.0], [15400.0, 3.0], [15800.0, 7.0], [15700.0, 7.0], [15600.0, 5.0], [15900.0, 5.0], [16000.0, 5.0], [16300.0, 7.0], [16200.0, 5.0], [16100.0, 8.0], [17200.0, 8.0], [16500.0, 3.0], [16400.0, 10.0], [16600.0, 7.0], [16800.0, 12.0], [16900.0, 11.0], [17000.0, 13.0], [17100.0, 8.0], [16700.0, 5.0], [17300.0, 15.0], [17400.0, 14.0], [18200.0, 12.0], [17500.0, 16.0], [17600.0, 12.0], [17700.0, 15.0], [17800.0, 10.0], [17900.0, 8.0], [18000.0, 2.0], [18100.0, 10.0], [18400.0, 3.0], [18300.0, 6.0], [18500.0, 3.0], [18600.0, 3.0], [18800.0, 2.0], [19000.0, 3.0], [19200.0, 2.0], [19100.0, 1.0], [19400.0, 2.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 37.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 920.0, "series": [{"data": [[0.0, 37.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 43.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 920.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.081, "minX": 1.7579181E12, "maxY": 501.081, "series": [{"data": [[1.7579181E12, 501.081]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7579181E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 102.0, "minX": 1.0, "maxY": 19485.0, "series": [{"data": [[2.0, 18312.0], [3.0, 19276.0], [4.0, 19485.0], [5.0, 18639.0], [6.0, 19431.0], [8.0, 19125.5], [9.0, 19213.0], [10.0, 18537.0], [11.0, 19030.0], [12.0, 19048.0], [13.0, 18431.0], [14.0, 17715.0], [15.0, 18677.0], [16.0, 18882.0], [17.0, 18895.0], [18.0, 18526.0], [19.0, 17985.0], [20.0, 18619.0], [23.0, 17558.0], [25.0, 17783.0], [26.0, 18122.0], [27.0, 18267.0], [28.0, 18544.0], [29.0, 17941.0], [30.0, 18325.0], [31.0, 17052.0], [33.0, 17943.0], [32.0, 18399.0], [35.0, 18354.0], [34.0, 17261.0], [37.0, 17491.0], [39.0, 18272.0], [38.0, 18195.0], [40.0, 18332.0], [43.0, 18318.0], [42.0, 17927.5], [45.0, 18226.0], [44.0, 17840.0], [47.0, 16042.0], [46.0, 17634.0], [49.0, 18007.0], [51.0, 18170.0], [53.0, 17587.0], [52.0, 17119.0], [54.0, 18127.0], [57.0, 17080.0], [56.0, 18057.0], [58.0, 16840.0], [61.0, 16838.0], [60.0, 17907.5], [63.0, 16751.0], [62.0, 16897.0], [67.0, 17888.0], [66.0, 16878.0], [64.0, 18122.0], [71.0, 17476.0], [70.0, 18271.0], [69.0, 18112.0], [68.0, 18200.0], [75.0, 16970.0], [74.0, 16977.0], [73.0, 17861.0], [72.0, 17645.0], [79.0, 16821.0], [78.0, 17802.0], [77.0, 17634.0], [76.0, 17440.0], [83.0, 17607.0], [82.0, 17413.0], [81.0, 18275.0], [80.0, 16960.0], [87.0, 18222.0], [86.0, 17591.0], [85.0, 15537.0], [84.0, 18235.0], [91.0, 17578.0], [90.0, 18192.5], [88.0, 18213.0], [95.0, 16891.0], [94.0, 18197.0], [93.0, 18044.5], [99.0, 17788.0], [98.0, 17741.0], [96.0, 17824.0], [103.0, 16762.0], [102.0, 17247.0], [101.0, 17443.0], [100.0, 18099.0], [107.0, 17577.0], [106.0, 16748.0], [105.0, 17582.0], [104.0, 17790.0], [110.0, 17751.0], [109.0, 17536.0], [108.0, 17397.0], [115.0, 16435.0], [114.0, 17590.5], [112.0, 17117.5], [119.0, 17175.0], [118.0, 17994.0], [117.0, 17030.0], [123.0, 17764.0], [122.0, 17186.0], [121.0, 17355.0], [120.0, 17528.0], [127.0, 17492.0], [126.0, 17000.5], [124.0, 17702.0], [129.0, 17127.0], [128.0, 17545.0], [143.0, 17386.0], [142.0, 17315.0], [141.0, 17395.0], [140.0, 17047.0], [139.0, 17088.0], [138.0, 17262.0], [137.0, 17522.5], [151.0, 17784.0], [150.0, 17307.0], [149.0, 17514.0], [148.0, 17689.0], [147.0, 17827.0], [146.0, 17612.0], [145.0, 17878.0], [144.0, 17393.0], [159.0, 16924.0], [158.0, 17448.0], [157.0, 17288.0], [156.0, 17769.0], [155.0, 17565.0], [154.0, 17322.0], [153.0, 16960.0], [152.0, 17593.0], [167.0, 17400.0], [166.0, 17490.0], [165.0, 17201.0], [164.0, 17529.0], [163.0, 17369.0], [162.0, 17724.0], [161.0, 16899.0], [160.0, 17763.0], [175.0, 14916.0], [174.0, 17575.0], [173.0, 16937.0], [172.0, 16294.0], [171.0, 16961.0], [170.0, 17612.0], [169.0, 17410.0], [168.0, 17325.0], [183.0, 16637.0], [181.0, 16173.0], [180.0, 17457.0], [179.0, 16922.0], [178.0, 16896.0], [177.0, 17578.0], [176.0, 14818.0], [191.0, 17418.0], [190.0, 17110.0], [189.0, 15528.0], [188.0, 16129.0], [187.0, 16807.0], [186.0, 17466.0], [185.0, 17436.0], [184.0, 17189.0], [198.0, 17319.0], [197.0, 17118.0], [196.0, 16503.0], [195.0, 15436.0], [194.0, 17132.0], [193.0, 17341.0], [192.0, 16944.0], [207.0, 16375.0], [206.0, 16370.5], [204.0, 16148.5], [202.0, 16925.0], [201.0, 17046.0], [200.0, 16933.0], [215.0, 15742.0], [214.0, 16809.0], [213.0, 16673.0], [212.0, 17028.0], [211.0, 17070.0], [210.0, 16536.0], [209.0, 15885.0], [208.0, 17238.0], [223.0, 16420.0], [222.0, 16144.0], [221.0, 16167.0], [220.0, 16830.0], [219.0, 16801.0], [218.0, 15712.0], [217.0, 16193.0], [216.0, 17038.0], [231.0, 16372.0], [230.0, 16546.0], [229.0, 16648.5], [227.0, 16502.0], [225.0, 16058.0], [224.0, 16937.0], [239.0, 15865.0], [238.0, 16276.0], [237.0, 16411.0], [236.0, 16163.0], [235.0, 16424.0], [234.0, 15763.0], [232.0, 15529.0], [247.0, 16365.0], [246.0, 15791.0], [245.0, 16269.0], [244.0, 16276.0], [243.0, 16167.0], [242.0, 16399.0], [241.0, 16419.0], [240.0, 16691.0], [255.0, 14836.0], [254.0, 16007.0], [253.0, 14833.0], [252.0, 16289.0], [251.0, 16490.0], [250.0, 15878.0], [249.0, 15881.0], [248.0, 16144.0], [270.0, 16068.0], [271.0, 14988.0], [269.0, 16305.0], [268.0, 15501.0], [267.0, 15015.0], [266.0, 14738.0], [265.0, 15497.0], [264.0, 15690.0], [263.0, 16341.0], [257.0, 16417.0], [256.0, 15588.0], [259.0, 15930.0], [258.0, 15105.0], [262.0, 15724.0], [261.0, 15765.0], [260.0, 16069.0], [286.0, 15318.0], [287.0, 14652.0], [285.0, 15763.0], [284.0, 15639.0], [283.0, 15186.0], [282.0, 15666.0], [281.0, 14510.0], [280.0, 15804.0], [279.0, 14812.0], [273.0, 15790.0], [272.0, 15917.0], [275.0, 15998.0], [274.0, 14477.0], [278.0, 15677.0], [277.0, 14608.0], [276.0, 15957.0], [302.0, 14032.0], [303.0, 15001.0], [301.0, 14871.0], [300.0, 14785.0], [299.0, 14625.0], [298.0, 14154.0], [297.0, 15194.0], [296.0, 15382.0], [295.0, 15135.0], [288.0, 14461.0], [290.0, 15864.0], [289.0, 15857.0], [294.0, 14930.0], [293.0, 15501.0], [292.0, 14668.0], [318.0, 14292.0], [319.0, 13749.0], [317.0, 13952.0], [316.0, 14333.0], [315.0, 13902.0], [314.0, 14337.0], [313.0, 14745.0], [312.0, 14130.0], [311.0, 14633.0], [305.0, 14464.0], [304.0, 15038.0], [307.0, 14841.0], [306.0, 14857.0], [310.0, 14474.0], [309.0, 14796.0], [308.0, 14632.0], [334.0, 13795.0], [333.0, 13566.333333333334], [330.0, 13619.0], [329.0, 13543.166666666668], [323.0, 13940.0], [322.0, 14181.0], [321.0, 14271.0], [320.0, 14092.0], [350.0, 13431.0], [349.0, 13601.0], [348.0, 13438.5], [346.0, 13654.0], [345.0, 13440.0], [343.0, 13368.166666666666], [337.0, 13709.0], [336.0, 13584.0], [364.0, 13101.0], [363.0, 13294.0], [362.0, 13134.0], [361.0, 13072.5], [359.0, 13094.0], [353.0, 13393.333333333334], [358.0, 13371.5], [356.0, 13149.0], [355.0, 12860.0], [354.0, 10859.0], [382.0, 12868.75], [378.0, 12919.666666666666], [375.0, 12724.0], [374.0, 12855.0], [373.0, 12827.0], [372.0, 13082.0], [371.0, 13003.42857142857], [399.0, 12513.5], [397.0, 12469.666666666666], [394.0, 12668.0], [390.0, 12590.0], [389.0, 12549.0], [386.0, 12425.25], [414.0, 12459.0], [413.0, 12432.2], [408.0, 12115.0], [407.0, 12648.0], [405.0, 12739.5], [403.0, 12501.0], [402.0, 12627.5], [400.0, 12508.0], [419.0, 12495.5], [430.0, 12487.0], [429.0, 11884.0], [428.0, 12271.6], [423.0, 12132.0], [422.0, 12496.0], [420.0, 12587.0], [417.0, 12534.0], [416.0, 12318.5], [446.0, 12158.0], [447.0, 11470.0], [445.0, 11981.0], [444.0, 11613.0], [443.0, 11919.0], [442.0, 12187.0], [440.0, 12078.333333333334], [437.0, 12223.5], [435.0, 12410.0], [434.0, 11965.75], [461.0, 11702.0], [460.0, 11345.75], [456.0, 11379.666666666666], [453.0, 11540.0], [452.0, 11745.0], [450.0, 11700.0], [449.0, 11858.0], [448.0, 11686.0], [476.0, 11538.916666666666], [464.0, 11350.0], [493.0, 11382.1], [492.0, 11734.0], [491.0, 11526.0], [489.0, 11578.0], [488.0, 11178.0], [487.0, 11118.0], [483.0, 11129.0], [507.0, 11250.5], [505.0, 11360.0], [503.0, 11636.7], [542.0, 10581.0], [543.0, 10192.0], [541.0, 10319.5], [539.0, 10556.0], [538.0, 10748.0], [519.0, 11153.666666666666], [516.0, 11583.0], [515.0, 11029.0], [514.0, 11358.142857142857], [527.0, 11139.0], [521.0, 11529.0], [534.0, 10716.0], [533.0, 10778.0], [532.0, 11176.75], [528.0, 11374.0], [572.0, 8435.5], [575.0, 8424.333333333334], [570.0, 9032.333333333334], [551.0, 10021.0], [549.0, 9815.0], [548.0, 10345.5], [546.0, 10221.0], [545.0, 9866.0], [544.0, 10075.0], [567.0, 9387.0], [564.0, 9541.0], [562.0, 9750.5], [560.0, 9980.0], [559.0, 10153.0], [557.0, 9747.0], [556.0, 10280.0], [555.0, 9925.666666666666], [552.0, 9760.0], [604.0, 4427.0], [607.0, 3395.0], [592.0, 5605.0], [594.0, 5277.0], [593.0, 5832.0], [596.0, 5227.0], [595.0, 5253.0], [606.0, 4478.0], [605.0, 4736.0], [603.0, 4425.0], [602.0, 4685.0], [601.0, 4510.0], [600.0, 4489.0], [591.0, 5898.0], [578.0, 8279.5], [576.0, 8280.0], [581.0, 7613.0], [580.0, 7950.0], [583.0, 7583.0], [582.0, 7395.0], [590.0, 6404.0], [589.0, 6655.0], [588.0, 6082.0], [587.0, 6092.0], [586.0, 7249.0], [585.0, 7199.0], [584.0, 6939.0], [599.0, 4267.0], [597.0, 4873.0], [634.0, 3038.5], [626.0, 3943.0], [637.0, 3835.0], [639.0, 4168.0], [625.0, 4317.0], [624.0, 4056.0], [636.0, 2906.5], [632.0, 4202.0], [615.0, 3966.0], [614.0, 3378.0], [613.0, 4036.0], [612.0, 4065.0], [611.0, 4553.0], [610.0, 4585.0], [609.0, 4399.0], [608.0, 3578.0], [623.0, 4337.0], [622.0, 3819.0], [621.0, 3925.0], [620.0, 4398.0], [619.0, 3979.0], [618.0, 2846.0], [617.0, 4207.0], [616.0, 4122.0], [630.0, 2195.0], [629.0, 3774.5], [627.0, 2428.0], [665.0, 3898.0], [669.0, 3949.0], [670.0, 3938.0], [657.0, 3993.0], [656.0, 3623.0], [660.0, 1331.5], [659.0, 4022.0], [668.0, 3971.0], [667.0, 3738.0], [666.0, 3756.0], [664.0, 3363.0], [647.0, 3741.0], [646.0, 3785.0], [645.0, 4164.0], [644.0, 3923.0], [643.0, 3964.0], [642.0, 3956.0], [640.0, 1837.0], [654.0, 3802.0], [652.0, 1404.0], [651.0, 4094.0], [650.0, 4086.0], [649.0, 3704.0], [648.0, 4103.0], [663.0, 3503.0], [662.0, 3859.0], [701.0, 3541.5], [702.0, 3454.0], [688.0, 3387.0], [690.0, 3176.0], [689.0, 3260.0], [700.0, 3189.0], [698.0, 3518.0], [697.0, 3695.0], [696.0, 3288.5], [687.0, 3249.0], [674.0, 3348.0], [673.0, 3719.3333333333335], [677.0, 3535.0], [676.0, 3668.0], [679.0, 3233.0], [678.0, 3893.0], [686.0, 3606.0], [685.0, 3612.75], [681.0, 3355.5], [694.0, 3116.0], [693.0, 3745.0], [692.0, 3475.0], [691.0, 3128.0], [728.0, 3453.0], [734.0, 2933.0], [735.0, 3206.0], [733.0, 2144.6666666666665], [730.0, 3044.0], [729.0, 3238.0], [719.0, 3070.0], [706.0, 3320.6666666666665], [709.0, 3541.3333333333335], [707.0, 3713.0], [711.0, 3726.0], [710.0, 3106.0], [718.0, 3442.0], [717.0, 3142.0], [714.0, 3056.0], [713.0, 3696.0], [712.0, 3088.0], [727.0, 3501.0], [724.0, 3346.5], [720.0, 3069.0], [754.0, 3334.0], [765.0, 3185.5], [766.0, 2713.0], [752.0, 3280.0], [763.0, 3149.5], [761.0, 3318.0], [760.0, 3304.0], [740.0, 2916.0], [739.0, 2875.0], [738.0, 3208.3333333333335], [750.0, 3111.0], [749.0, 2974.0], [747.0, 3358.0], [746.0, 3382.0], [745.0, 3220.0], [744.0, 3251.5], [758.0, 3329.0], [757.0, 2998.0], [756.0, 2972.3333333333335], [796.0, 139.0], [799.0, 1580.3333333333335], [795.0, 151.0], [794.0, 2937.5], [792.0, 2676.0], [775.0, 2512.0], [774.0, 3041.0], [773.0, 3068.0], [772.0, 2732.0], [771.0, 3011.6666666666665], [768.0, 2957.0], [783.0, 3028.0], [782.0, 2478.0], [781.0, 2986.0], [779.0, 2983.0], [778.0, 2787.6666666666665], [790.0, 2153.5], [786.0, 3003.0], [785.0, 2743.0], [784.0, 3014.0], [825.0, 2312.0], [830.0, 2449.0], [831.0, 2429.0], [817.0, 143.0], [819.0, 2241.0], [818.0, 143.5], [821.0, 2088.0], [820.0, 2691.0], [829.0, 1461.5], [827.0, 2189.0], [826.0, 2471.0], [824.0, 2647.0], [807.0, 2427.0], [806.0, 2432.0], [805.0, 1305.5], [803.0, 2826.0], [802.0, 2876.0], [800.0, 448.0], [815.0, 2118.0], [814.0, 2421.0], [813.0, 2529.0], [812.0, 128.5], [810.0, 2472.0], [809.0, 2307.0], [808.0, 2826.0], [823.0, 137.0], [822.0, 2743.0], [856.0, 2507.0], [862.0, 2109.5], [863.0, 1918.0], [849.0, 2600.0], [848.0, 2597.0], [851.0, 2513.0], [850.0, 2595.0], [860.0, 159.0], [859.0, 2422.0], [858.0, 1324.5], [847.0, 1972.0], [833.0, 127.0], [832.0, 2443.0], [835.0, 2390.0], [834.0, 2410.0], [837.0, 142.0], [836.0, 2615.0], [839.0, 2211.0], [838.0, 2631.0], [846.0, 2625.0], [845.0, 2137.0], [844.0, 2622.0], [843.0, 2608.0], [842.0, 2139.0], [841.0, 228.0], [840.0, 2660.0], [855.0, 2121.0], [854.0, 2202.0], [853.0, 2037.0], [852.0, 2514.0], [889.0, 1872.0], [893.0, 1966.0], [894.0, 2216.0], [880.0, 1914.0], [883.0, 1119.5], [881.0, 127.0], [885.0, 128.0], [884.0, 355.0], [892.0, 1854.0], [891.0, 1749.0], [890.0, 1851.0], [888.0, 2240.0], [871.0, 2135.0], [870.0, 2317.0], [869.0, 2123.0], [868.0, 2392.0], [867.0, 139.0], [866.0, 2006.0], [865.0, 1054.0], [879.0, 1918.0], [878.0, 1925.0], [877.0, 1926.0], [876.0, 229.0], [875.0, 1951.5], [874.0, 1853.0], [872.0, 2382.0], [887.0, 1909.0], [886.0, 2077.0], [921.0, 2068.0], [925.0, 2035.0], [926.0, 2006.0], [913.0, 1012.0], [916.0, 1751.5], [914.0, 1887.0], [924.0, 2037.0], [923.0, 2070.0], [922.0, 2062.0], [920.0, 2064.0], [903.0, 2159.0], [902.0, 1754.0], [901.0, 2195.0], [900.0, 1816.0], [899.0, 1994.0], [898.0, 1974.0], [897.0, 2155.0], [896.0, 1932.0], [910.0, 1738.0], [909.0, 1807.0], [908.0, 2069.0], [907.0, 2005.0], [906.0, 1929.0], [905.0, 1864.0], [904.0, 1776.0], [919.0, 1897.0], [918.0, 1651.3333333333333], [952.0, 108.0], [957.0, 1567.0], [959.0, 1758.0], [945.0, 1560.0], [944.0, 1546.0], [956.0, 1332.5], [955.0, 1382.0], [953.0, 1441.0], [943.0, 1407.0], [928.0, 2044.0], [930.0, 2068.0], [929.0, 1578.0], [932.0, 1910.0], [931.0, 1978.0], [935.0, 1744.5], [933.0, 1301.0], [942.0, 1426.0], [941.0, 1720.5], [939.0, 1771.5], [937.0, 1768.0], [936.0, 397.0], [949.0, 1805.0], [948.0, 120.0], [947.0, 509.0], [946.0, 109.0], [989.0, 907.6666666666666], [979.0, 1123.6], [990.0, 1297.0], [986.0, 1039.3333333333333], [967.0, 123.0], [966.0, 429.0], [965.0, 112.0], [964.0, 102.0], [963.0, 1525.0], [962.0, 115.0], [961.0, 120.0], [960.0, 116.0], [983.0, 977.0], [981.0, 1191.0], [980.0, 702.0], [978.0, 827.5], [977.0, 1457.0], [976.0, 1680.0], [970.0, 1729.0], [969.0, 1188.0], [1.0, 17851.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[501.081, 9548.213000000003]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 990.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11483.333333333334, "minX": 1.7579181E12, "maxY": 7182432.283333333, "series": [{"data": [[1.7579181E12, 11483.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7579181E12, 7182432.283333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7579181E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 9548.213000000003, "minX": 1.7579181E12, "maxY": 9548.213000000003, "series": [{"data": [[1.7579181E12, 9548.213000000003]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7579181E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 9548.167999999992, "minX": 1.7579181E12, "maxY": 9548.167999999992, "series": [{"data": [[1.7579181E12, 9548.167999999992]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7579181E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3009.2210000000005, "minX": 1.7579181E12, "maxY": 3009.2210000000005, "series": [{"data": [[1.7579181E12, 3009.2210000000005]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7579181E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 102.0, "minX": 1.7579181E12, "maxY": 19485.0, "series": [{"data": [[1.7579181E12, 19485.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7579181E12, 17578.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7579181E12, 18879.95]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7579181E12, 17993.55]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7579181E12, 102.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7579181E12, 11319.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7579181E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1137.5, "minX": 2.0, "maxY": 18325.0, "series": [{"data": [[132.0, 1756.0], [130.0, 2737.5], [8.0, 7687.0], [135.0, 17545.0], [2.0, 18081.5], [9.0, 8525.0], [40.0, 13587.0], [41.0, 18325.0], [46.0, 15544.5], [14.0, 1137.5], [16.0, 10747.0], [17.0, 14633.0], [75.0, 12612.0], [73.0, 16490.0], [19.0, 4488.0], [5.0, 6087.0], [24.0, 9862.0], [98.0, 11558.5], [111.0, 3659.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 135.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1137.5, "minX": 2.0, "maxY": 18325.0, "series": [{"data": [[132.0, 1755.5], [130.0, 2737.5], [8.0, 7687.0], [135.0, 17545.0], [2.0, 18081.5], [9.0, 8525.0], [40.0, 13587.0], [41.0, 18325.0], [46.0, 15544.5], [14.0, 1137.5], [16.0, 10747.0], [17.0, 14633.0], [75.0, 12612.0], [73.0, 16490.0], [19.0, 4488.0], [5.0, 6086.5], [24.0, 9862.0], [98.0, 11558.5], [111.0, 3659.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 135.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7579181E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7579181E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7579181E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7579181E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7579181E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7579181E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7579181E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7579181E12, 16.666666666666668]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7579181E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7579181E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7579181E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7579181E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

