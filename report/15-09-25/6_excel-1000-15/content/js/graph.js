/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 672.0, "minX": 0.0, "maxY": 17545.0, "series": [{"data": [[0.0, 672.0], [0.1, 726.0], [0.2, 733.0], [0.3, 733.0], [0.4, 824.0], [0.5, 849.0], [0.6, 892.0], [0.7, 897.0], [0.8, 922.0], [0.9, 936.0], [1.0, 966.0], [1.1, 1050.0], [1.2, 1050.0], [1.3, 1074.0], [1.4, 1106.0], [1.5, 1134.0], [1.6, 1142.0], [1.7, 1142.0], [1.8, 1153.0], [1.9, 1159.0], [2.0, 1185.0], [2.1, 1190.0], [2.2, 1221.0], [2.3, 1231.0], [2.4, 1236.0], [2.5, 1247.0], [2.6, 1249.0], [2.7, 1296.0], [2.8, 1296.0], [2.9, 1302.0], [3.0, 1313.0], [3.1, 1320.0], [3.2, 1349.0], [3.3, 1353.0], [3.4, 1356.0], [3.5, 1366.0], [3.6, 1369.0], [3.7, 1372.0], [3.8, 1375.0], [3.9, 1377.0], [4.0, 1403.0], [4.1, 1415.0], [4.2, 1426.0], [4.3, 1454.0], [4.4, 1473.0], [4.5, 1475.0], [4.6, 1488.0], [4.7, 1499.0], [4.8, 1517.0], [4.9, 1561.0], [5.0, 1578.0], [5.1, 1648.0], [5.2, 1676.0], [5.3, 1683.0], [5.4, 1692.0], [5.5, 1707.0], [5.6, 1722.0], [5.7, 1728.0], [5.8, 1752.0], [5.9, 1752.0], [6.0, 1769.0], [6.1, 1771.0], [6.2, 1822.0], [6.3, 1863.0], [6.4, 1864.0], [6.5, 1891.0], [6.6, 1939.0], [6.7, 2180.0], [6.8, 2256.0], [6.9, 2263.0], [7.0, 2264.0], [7.1, 2307.0], [7.2, 2415.0], [7.3, 2423.0], [7.4, 2479.0], [7.5, 2553.0], [7.6, 2616.0], [7.7, 2631.0], [7.8, 2632.0], [7.9, 2633.0], [8.0, 2696.0], [8.1, 2719.0], [8.2, 2893.0], [8.3, 2955.0], [8.4, 3068.0], [8.5, 3486.0], [8.6, 3867.0], [8.7, 3883.0], [8.8, 3911.0], [8.9, 3994.0], [9.0, 4137.0], [9.1, 4208.0], [9.2, 4209.0], [9.3, 4279.0], [9.4, 4291.0], [9.5, 4308.0], [9.6, 4310.0], [9.7, 4330.0], [9.8, 4364.0], [9.9, 4377.0], [10.0, 4441.0], [10.1, 4508.0], [10.2, 4653.0], [10.3, 5126.0], [10.4, 5326.0], [10.5, 5617.0], [10.6, 5649.0], [10.7, 5654.0], [10.8, 5686.0], [10.9, 5957.0], [11.0, 6004.0], [11.1, 6038.0], [11.2, 6053.0], [11.3, 6127.0], [11.4, 6145.0], [11.5, 6171.0], [11.6, 6254.0], [11.7, 6259.0], [11.8, 6260.0], [11.9, 6297.0], [12.0, 6515.0], [12.1, 6520.0], [12.2, 6526.0], [12.3, 6530.0], [12.4, 6544.0], [12.5, 6576.0], [12.6, 6595.0], [12.7, 6665.0], [12.8, 6690.0], [12.9, 6719.0], [13.0, 6765.0], [13.1, 6806.0], [13.2, 6834.0], [13.3, 6849.0], [13.4, 6879.0], [13.5, 7002.0], [13.6, 7017.0], [13.7, 7030.0], [13.8, 7109.0], [13.9, 7110.0], [14.0, 7133.0], [14.1, 7161.0], [14.2, 7187.0], [14.3, 7238.0], [14.4, 7252.0], [14.5, 7307.0], [14.6, 7475.0], [14.7, 7478.0], [14.8, 7500.0], [14.9, 7504.0], [15.0, 7511.0], [15.1, 7529.0], [15.2, 7551.0], [15.3, 7735.0], [15.4, 7747.0], [15.5, 7753.0], [15.6, 7756.0], [15.7, 7758.0], [15.8, 7780.0], [15.9, 7792.0], [16.0, 7809.0], [16.1, 7892.0], [16.2, 7913.0], [16.3, 7944.0], [16.4, 8031.0], [16.5, 8104.0], [16.6, 8116.0], [16.7, 8129.0], [16.8, 8195.0], [16.9, 8218.0], [17.0, 8348.0], [17.1, 8360.0], [17.2, 8512.0], [17.3, 8517.0], [17.4, 8545.0], [17.5, 8582.0], [17.6, 8600.0], [17.7, 8635.0], [17.8, 8688.0], [17.9, 8751.0], [18.0, 8776.0], [18.1, 8791.0], [18.2, 8809.0], [18.3, 8821.0], [18.4, 8834.0], [18.5, 8844.0], [18.6, 8847.0], [18.7, 8868.0], [18.8, 8871.0], [18.9, 8871.0], [19.0, 8917.0], [19.1, 8922.0], [19.2, 8940.0], [19.3, 8959.0], [19.4, 8972.0], [19.5, 8976.0], [19.6, 8981.0], [19.7, 8988.0], [19.8, 8989.0], [19.9, 9012.0], [20.0, 9019.0], [20.1, 9042.0], [20.2, 9059.0], [20.3, 9087.0], [20.4, 9107.0], [20.5, 9131.0], [20.6, 9143.0], [20.7, 9150.0], [20.8, 9163.0], [20.9, 9193.0], [21.0, 9204.0], [21.1, 9217.0], [21.2, 9245.0], [21.3, 9252.0], [21.4, 9253.0], [21.5, 9304.0], [21.6, 9343.0], [21.7, 9344.0], [21.8, 9362.0], [21.9, 9363.0], [22.0, 9364.0], [22.1, 9383.0], [22.2, 9396.0], [22.3, 9404.0], [22.4, 9406.0], [22.5, 9407.0], [22.6, 9443.0], [22.7, 9474.0], [22.8, 9490.0], [22.9, 9492.0], [23.0, 9510.0], [23.1, 9521.0], [23.2, 9537.0], [23.3, 9546.0], [23.4, 9552.0], [23.5, 9557.0], [23.6, 9592.0], [23.7, 9595.0], [23.8, 9599.0], [23.9, 9613.0], [24.0, 9632.0], [24.1, 9635.0], [24.2, 9647.0], [24.3, 9649.0], [24.4, 9649.0], [24.5, 9672.0], [24.6, 9689.0], [24.7, 9695.0], [24.8, 9717.0], [24.9, 9729.0], [25.0, 9749.0], [25.1, 9867.0], [25.2, 9871.0], [25.3, 9886.0], [25.4, 9902.0], [25.5, 9903.0], [25.6, 9904.0], [25.7, 9938.0], [25.8, 9942.0], [25.9, 10004.0], [26.0, 10010.0], [26.1, 10029.0], [26.2, 10043.0], [26.3, 10044.0], [26.4, 10049.0], [26.5, 10133.0], [26.6, 10179.0], [26.7, 10185.0], [26.8, 10259.0], [26.9, 10282.0], [27.0, 10283.0], [27.1, 10283.0], [27.2, 10301.0], [27.3, 10308.0], [27.4, 10314.0], [27.5, 10317.0], [27.6, 10337.0], [27.7, 10341.0], [27.8, 10341.0], [27.9, 10345.0], [28.0, 10360.0], [28.1, 10376.0], [28.2, 10379.0], [28.3, 10413.0], [28.4, 10436.0], [28.5, 10452.0], [28.6, 10452.0], [28.7, 10453.0], [28.8, 10473.0], [28.9, 10519.0], [29.0, 10541.0], [29.1, 10562.0], [29.2, 10587.0], [29.3, 10592.0], [29.4, 10604.0], [29.5, 10614.0], [29.6, 10680.0], [29.7, 10693.0], [29.8, 10730.0], [29.9, 10775.0], [30.0, 10775.0], [30.1, 10777.0], [30.2, 10797.0], [30.3, 10798.0], [30.4, 10798.0], [30.5, 10831.0], [30.6, 10837.0], [30.7, 10850.0], [30.8, 10858.0], [30.9, 10879.0], [31.0, 10931.0], [31.1, 10955.0], [31.2, 10995.0], [31.3, 10997.0], [31.4, 11003.0], [31.5, 11017.0], [31.6, 11026.0], [31.7, 11041.0], [31.8, 11054.0], [31.9, 11054.0], [32.0, 11057.0], [32.1, 11063.0], [32.2, 11090.0], [32.3, 11125.0], [32.4, 11126.0], [32.5, 11133.0], [32.6, 11148.0], [32.7, 11150.0], [32.8, 11172.0], [32.9, 11202.0], [33.0, 11209.0], [33.1, 11225.0], [33.2, 11241.0], [33.3, 11246.0], [33.4, 11258.0], [33.5, 11272.0], [33.6, 11297.0], [33.7, 11321.0], [33.8, 11334.0], [33.9, 11336.0], [34.0, 11345.0], [34.1, 11351.0], [34.2, 11375.0], [34.3, 11401.0], [34.4, 11432.0], [34.5, 11436.0], [34.6, 11452.0], [34.7, 11470.0], [34.8, 11480.0], [34.9, 11488.0], [35.0, 11489.0], [35.1, 11504.0], [35.2, 11506.0], [35.3, 11512.0], [35.4, 11523.0], [35.5, 11578.0], [35.6, 11583.0], [35.7, 11608.0], [35.8, 11626.0], [35.9, 11626.0], [36.0, 11652.0], [36.1, 11671.0], [36.2, 11673.0], [36.3, 11686.0], [36.4, 11696.0], [36.5, 11703.0], [36.6, 11724.0], [36.7, 11735.0], [36.8, 11740.0], [36.9, 11767.0], [37.0, 11803.0], [37.1, 11850.0], [37.2, 11868.0], [37.3, 11890.0], [37.4, 11902.0], [37.5, 11916.0], [37.6, 11920.0], [37.7, 11924.0], [37.8, 11940.0], [37.9, 11950.0], [38.0, 11972.0], [38.1, 12021.0], [38.2, 12022.0], [38.3, 12036.0], [38.4, 12045.0], [38.5, 12059.0], [38.6, 12062.0], [38.7, 12068.0], [38.8, 12091.0], [38.9, 12165.0], [39.0, 12168.0], [39.1, 12194.0], [39.2, 12202.0], [39.3, 12206.0], [39.4, 12223.0], [39.5, 12247.0], [39.6, 12263.0], [39.7, 12284.0], [39.8, 12290.0], [39.9, 12300.0], [40.0, 12302.0], [40.1, 12309.0], [40.2, 12344.0], [40.3, 12383.0], [40.4, 12393.0], [40.5, 12397.0], [40.6, 12403.0], [40.7, 12421.0], [40.8, 12430.0], [40.9, 12441.0], [41.0, 12460.0], [41.1, 12477.0], [41.2, 12486.0], [41.3, 12522.0], [41.4, 12523.0], [41.5, 12536.0], [41.6, 12542.0], [41.7, 12574.0], [41.8, 12577.0], [41.9, 12582.0], [42.0, 12594.0], [42.1, 12601.0], [42.2, 12619.0], [42.3, 12621.0], [42.4, 12622.0], [42.5, 12629.0], [42.6, 12630.0], [42.7, 12632.0], [42.8, 12648.0], [42.9, 12650.0], [43.0, 12663.0], [43.1, 12672.0], [43.2, 12681.0], [43.3, 12686.0], [43.4, 12694.0], [43.5, 12697.0], [43.6, 12721.0], [43.7, 12722.0], [43.8, 12731.0], [43.9, 12742.0], [44.0, 12744.0], [44.1, 12752.0], [44.2, 12765.0], [44.3, 12773.0], [44.4, 12779.0], [44.5, 12795.0], [44.6, 12804.0], [44.7, 12823.0], [44.8, 12835.0], [44.9, 12837.0], [45.0, 12840.0], [45.1, 12874.0], [45.2, 12874.0], [45.3, 12880.0], [45.4, 12880.0], [45.5, 12883.0], [45.6, 12896.0], [45.7, 12909.0], [45.8, 12910.0], [45.9, 12917.0], [46.0, 12927.0], [46.1, 12928.0], [46.2, 12940.0], [46.3, 12942.0], [46.4, 12942.0], [46.5, 12949.0], [46.6, 12953.0], [46.7, 12956.0], [46.8, 12966.0], [46.9, 12966.0], [47.0, 12970.0], [47.1, 12978.0], [47.2, 12984.0], [47.3, 12985.0], [47.4, 12991.0], [47.5, 12991.0], [47.6, 13005.0], [47.7, 13007.0], [47.8, 13031.0], [47.9, 13050.0], [48.0, 13053.0], [48.1, 13053.0], [48.2, 13059.0], [48.3, 13060.0], [48.4, 13061.0], [48.5, 13072.0], [48.6, 13074.0], [48.7, 13075.0], [48.8, 13084.0], [48.9, 13089.0], [49.0, 13092.0], [49.1, 13092.0], [49.2, 13097.0], [49.3, 13105.0], [49.4, 13108.0], [49.5, 13114.0], [49.6, 13117.0], [49.7, 13120.0], [49.8, 13126.0], [49.9, 13127.0], [50.0, 13130.0], [50.1, 13132.0], [50.2, 13134.0], [50.3, 13142.0], [50.4, 13144.0], [50.5, 13155.0], [50.6, 13161.0], [50.7, 13168.0], [50.8, 13169.0], [50.9, 13169.0], [51.0, 13170.0], [51.1, 13173.0], [51.2, 13174.0], [51.3, 13176.0], [51.4, 13179.0], [51.5, 13186.0], [51.6, 13186.0], [51.7, 13188.0], [51.8, 13189.0], [51.9, 13191.0], [52.0, 13194.0], [52.1, 13195.0], [52.2, 13196.0], [52.3, 13198.0], [52.4, 13206.0], [52.5, 13211.0], [52.6, 13224.0], [52.7, 13232.0], [52.8, 13242.0], [52.9, 13253.0], [53.0, 13253.0], [53.1, 13255.0], [53.2, 13260.0], [53.3, 13262.0], [53.4, 13264.0], [53.5, 13266.0], [53.6, 13266.0], [53.7, 13267.0], [53.8, 13274.0], [53.9, 13282.0], [54.0, 13286.0], [54.1, 13287.0], [54.2, 13287.0], [54.3, 13290.0], [54.4, 13290.0], [54.5, 13297.0], [54.6, 13300.0], [54.7, 13304.0], [54.8, 13305.0], [54.9, 13307.0], [55.0, 13308.0], [55.1, 13309.0], [55.2, 13329.0], [55.3, 13329.0], [55.4, 13332.0], [55.5, 13334.0], [55.6, 13344.0], [55.7, 13344.0], [55.8, 13347.0], [55.9, 13351.0], [56.0, 13378.0], [56.1, 13378.0], [56.2, 13381.0], [56.3, 13382.0], [56.4, 13392.0], [56.5, 13396.0], [56.6, 13411.0], [56.7, 13414.0], [56.8, 13422.0], [56.9, 13427.0], [57.0, 13431.0], [57.1, 13431.0], [57.2, 13432.0], [57.3, 13436.0], [57.4, 13439.0], [57.5, 13440.0], [57.6, 13445.0], [57.7, 13448.0], [57.8, 13449.0], [57.9, 13453.0], [58.0, 13454.0], [58.1, 13460.0], [58.2, 13467.0], [58.3, 13469.0], [58.4, 13474.0], [58.5, 13480.0], [58.6, 13488.0], [58.7, 13489.0], [58.8, 13494.0], [58.9, 13496.0], [59.0, 13497.0], [59.1, 13500.0], [59.2, 13510.0], [59.3, 13519.0], [59.4, 13520.0], [59.5, 13524.0], [59.6, 13525.0], [59.7, 13532.0], [59.8, 13536.0], [59.9, 13548.0], [60.0, 13550.0], [60.1, 13552.0], [60.2, 13557.0], [60.3, 13559.0], [60.4, 13559.0], [60.5, 13572.0], [60.6, 13572.0], [60.7, 13574.0], [60.8, 13577.0], [60.9, 13588.0], [61.0, 13592.0], [61.1, 13609.0], [61.2, 13610.0], [61.3, 13616.0], [61.4, 13616.0], [61.5, 13616.0], [61.6, 13619.0], [61.7, 13619.0], [61.8, 13633.0], [61.9, 13637.0], [62.0, 13638.0], [62.1, 13644.0], [62.2, 13649.0], [62.3, 13659.0], [62.4, 13659.0], [62.5, 13662.0], [62.6, 13665.0], [62.7, 13668.0], [62.8, 13677.0], [62.9, 13684.0], [63.0, 13685.0], [63.1, 13688.0], [63.2, 13694.0], [63.3, 13696.0], [63.4, 13701.0], [63.5, 13702.0], [63.6, 13707.0], [63.7, 13708.0], [63.8, 13709.0], [63.9, 13710.0], [64.0, 13720.0], [64.1, 13722.0], [64.2, 13727.0], [64.3, 13732.0], [64.4, 13733.0], [64.5, 13748.0], [64.6, 13749.0], [64.7, 13750.0], [64.8, 13753.0], [64.9, 13760.0], [65.0, 13764.0], [65.1, 13766.0], [65.2, 13780.0], [65.3, 13781.0], [65.4, 13788.0], [65.5, 13792.0], [65.6, 13794.0], [65.7, 13804.0], [65.8, 13808.0], [65.9, 13809.0], [66.0, 13814.0], [66.1, 13819.0], [66.2, 13822.0], [66.3, 13824.0], [66.4, 13824.0], [66.5, 13828.0], [66.6, 13830.0], [66.7, 13832.0], [66.8, 13838.0], [66.9, 13840.0], [67.0, 13841.0], [67.1, 13847.0], [67.2, 13849.0], [67.3, 13851.0], [67.4, 13853.0], [67.5, 13853.0], [67.6, 13859.0], [67.7, 13864.0], [67.8, 13867.0], [67.9, 13868.0], [68.0, 13877.0], [68.1, 13885.0], [68.2, 13885.0], [68.3, 13889.0], [68.4, 13906.0], [68.5, 13907.0], [68.6, 13910.0], [68.7, 13914.0], [68.8, 13921.0], [68.9, 13924.0], [69.0, 13932.0], [69.1, 13936.0], [69.2, 13939.0], [69.3, 13941.0], [69.4, 13944.0], [69.5, 13944.0], [69.6, 13945.0], [69.7, 13950.0], [69.8, 13952.0], [69.9, 13954.0], [70.0, 13959.0], [70.1, 13972.0], [70.2, 13975.0], [70.3, 13978.0], [70.4, 13980.0], [70.5, 13980.0], [70.6, 13985.0], [70.7, 13992.0], [70.8, 13994.0], [70.9, 13997.0], [71.0, 13998.0], [71.1, 14002.0], [71.2, 14013.0], [71.3, 14014.0], [71.4, 14017.0], [71.5, 14017.0], [71.6, 14020.0], [71.7, 14026.0], [71.8, 14027.0], [71.9, 14032.0], [72.0, 14036.0], [72.1, 14041.0], [72.2, 14049.0], [72.3, 14049.0], [72.4, 14051.0], [72.5, 14051.0], [72.6, 14054.0], [72.7, 14055.0], [72.8, 14063.0], [72.9, 14074.0], [73.0, 14074.0], [73.1, 14077.0], [73.2, 14079.0], [73.3, 14085.0], [73.4, 14086.0], [73.5, 14099.0], [73.6, 14106.0], [73.7, 14107.0], [73.8, 14108.0], [73.9, 14114.0], [74.0, 14117.0], [74.1, 14120.0], [74.2, 14122.0], [74.3, 14122.0], [74.4, 14124.0], [74.5, 14129.0], [74.6, 14132.0], [74.7, 14134.0], [74.8, 14137.0], [74.9, 14138.0], [75.0, 14138.0], [75.1, 14147.0], [75.2, 14148.0], [75.3, 14149.0], [75.4, 14149.0], [75.5, 14158.0], [75.6, 14161.0], [75.7, 14170.0], [75.8, 14170.0], [75.9, 14172.0], [76.0, 14172.0], [76.1, 14173.0], [76.2, 14175.0], [76.3, 14176.0], [76.4, 14177.0], [76.5, 14179.0], [76.6, 14179.0], [76.7, 14180.0], [76.8, 14190.0], [76.9, 14190.0], [77.0, 14193.0], [77.1, 14193.0], [77.2, 14196.0], [77.3, 14198.0], [77.4, 14198.0], [77.5, 14200.0], [77.6, 14214.0], [77.7, 14214.0], [77.8, 14214.0], [77.9, 14221.0], [78.0, 14223.0], [78.1, 14225.0], [78.2, 14230.0], [78.3, 14235.0], [78.4, 14240.0], [78.5, 14243.0], [78.6, 14244.0], [78.7, 14244.0], [78.8, 14247.0], [78.9, 14257.0], [79.0, 14259.0], [79.1, 14261.0], [79.2, 14265.0], [79.3, 14267.0], [79.4, 14282.0], [79.5, 14291.0], [79.6, 14296.0], [79.7, 14302.0], [79.8, 14302.0], [79.9, 14304.0], [80.0, 14306.0], [80.1, 14306.0], [80.2, 14307.0], [80.3, 14309.0], [80.4, 14312.0], [80.5, 14315.0], [80.6, 14316.0], [80.7, 14322.0], [80.8, 14324.0], [80.9, 14326.0], [81.0, 14327.0], [81.1, 14329.0], [81.2, 14335.0], [81.3, 14337.0], [81.4, 14340.0], [81.5, 14348.0], [81.6, 14354.0], [81.7, 14358.0], [81.8, 14373.0], [81.9, 14380.0], [82.0, 14381.0], [82.1, 14382.0], [82.2, 14382.0], [82.3, 14384.0], [82.4, 14388.0], [82.5, 14391.0], [82.6, 14398.0], [82.7, 14399.0], [82.8, 14400.0], [82.9, 14401.0], [83.0, 14403.0], [83.1, 14406.0], [83.2, 14408.0], [83.3, 14415.0], [83.4, 14416.0], [83.5, 14419.0], [83.6, 14420.0], [83.7, 14422.0], [83.8, 14423.0], [83.9, 14424.0], [84.0, 14434.0], [84.1, 14437.0], [84.2, 14444.0], [84.3, 14455.0], [84.4, 14458.0], [84.5, 14464.0], [84.6, 14473.0], [84.7, 14479.0], [84.8, 14482.0], [84.9, 14485.0], [85.0, 14486.0], [85.1, 14488.0], [85.2, 14491.0], [85.3, 14493.0], [85.4, 14495.0], [85.5, 14501.0], [85.6, 14501.0], [85.7, 14502.0], [85.8, 14505.0], [85.9, 14506.0], [86.0, 14507.0], [86.1, 14511.0], [86.2, 14512.0], [86.3, 14522.0], [86.4, 14523.0], [86.5, 14527.0], [86.6, 14528.0], [86.7, 14530.0], [86.8, 14533.0], [86.9, 14537.0], [87.0, 14549.0], [87.1, 14551.0], [87.2, 14556.0], [87.3, 14557.0], [87.4, 14558.0], [87.5, 14560.0], [87.6, 14561.0], [87.7, 14566.0], [87.8, 14569.0], [87.9, 14575.0], [88.0, 14586.0], [88.1, 14603.0], [88.2, 14611.0], [88.3, 14612.0], [88.4, 14620.0], [88.5, 14621.0], [88.6, 14623.0], [88.7, 14628.0], [88.8, 14642.0], [88.9, 14643.0], [89.0, 14644.0], [89.1, 14646.0], [89.2, 14648.0], [89.3, 14653.0], [89.4, 14663.0], [89.5, 14668.0], [89.6, 14670.0], [89.7, 14671.0], [89.8, 14680.0], [89.9, 14682.0], [90.0, 14683.0], [90.1, 14684.0], [90.2, 14689.0], [90.3, 14693.0], [90.4, 14713.0], [90.5, 14715.0], [90.6, 14716.0], [90.7, 14718.0], [90.8, 14731.0], [90.9, 14734.0], [91.0, 14735.0], [91.1, 14736.0], [91.2, 14742.0], [91.3, 14755.0], [91.4, 14756.0], [91.5, 14765.0], [91.6, 14794.0], [91.7, 14807.0], [91.8, 14807.0], [91.9, 14816.0], [92.0, 14827.0], [92.1, 14828.0], [92.2, 14842.0], [92.3, 14866.0], [92.4, 14868.0], [92.5, 14881.0], [92.6, 14888.0], [92.7, 14894.0], [92.8, 14922.0], [92.9, 14923.0], [93.0, 14931.0], [93.1, 14932.0], [93.2, 14936.0], [93.3, 14941.0], [93.4, 14943.0], [93.5, 14951.0], [93.6, 14953.0], [93.7, 14964.0], [93.8, 14964.0], [93.9, 14971.0], [94.0, 14978.0], [94.1, 14993.0], [94.2, 15008.0], [94.3, 15014.0], [94.4, 15017.0], [94.5, 15024.0], [94.6, 15037.0], [94.7, 15040.0], [94.8, 15044.0], [94.9, 15044.0], [95.0, 15057.0], [95.1, 15070.0], [95.2, 15079.0], [95.3, 15080.0], [95.4, 15101.0], [95.5, 15104.0], [95.6, 15104.0], [95.7, 15114.0], [95.8, 15126.0], [95.9, 15129.0], [96.0, 15140.0], [96.1, 15152.0], [96.2, 15158.0], [96.3, 16489.0], [96.4, 16562.0], [96.5, 16679.0], [96.6, 16725.0], [96.7, 16725.0], [96.8, 16740.0], [96.9, 16751.0], [97.0, 16752.0], [97.1, 16785.0], [97.2, 16786.0], [97.3, 16787.0], [97.4, 16793.0], [97.5, 16813.0], [97.6, 16816.0], [97.7, 16913.0], [97.8, 16924.0], [97.9, 16950.0], [98.0, 16997.0], [98.1, 17017.0], [98.2, 17020.0], [98.3, 17093.0], [98.4, 17112.0], [98.5, 17150.0], [98.6, 17207.0], [98.7, 17208.0], [98.8, 17212.0], [98.9, 17260.0], [99.0, 17321.0], [99.1, 17395.0], [99.2, 17454.0], [99.3, 17466.0], [99.4, 17470.0], [99.5, 17482.0], [99.6, 17491.0], [99.7, 17504.0], [99.8, 17536.0], [99.9, 17545.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 600.0, "maxY": 39.0, "series": [{"data": [[600.0, 1.0], [700.0, 3.0], [800.0, 4.0], [900.0, 3.0], [1000.0, 3.0], [1100.0, 7.0], [1200.0, 7.0], [1300.0, 11.0], [1400.0, 9.0], [1500.0, 3.0], [1600.0, 4.0], [1700.0, 7.0], [1800.0, 4.0], [1900.0, 1.0], [2100.0, 1.0], [2200.0, 3.0], [2300.0, 1.0], [2400.0, 3.0], [2500.0, 1.0], [2600.0, 5.0], [2700.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3400.0, 1.0], [3800.0, 2.0], [3900.0, 2.0], [4100.0, 1.0], [4300.0, 5.0], [4200.0, 4.0], [4500.0, 1.0], [4400.0, 1.0], [4600.0, 1.0], [5100.0, 1.0], [5300.0, 1.0], [5600.0, 4.0], [6000.0, 3.0], [5900.0, 1.0], [6100.0, 3.0], [6200.0, 4.0], [6500.0, 7.0], [6600.0, 2.0], [6700.0, 2.0], [6800.0, 4.0], [7000.0, 3.0], [7100.0, 5.0], [7200.0, 2.0], [7400.0, 2.0], [7300.0, 1.0], [7500.0, 5.0], [7700.0, 7.0], [7800.0, 2.0], [7900.0, 2.0], [8000.0, 1.0], [8100.0, 4.0], [8200.0, 1.0], [8600.0, 3.0], [8500.0, 4.0], [8700.0, 3.0], [8300.0, 2.0], [8800.0, 7.0], [8900.0, 9.0], [9000.0, 5.0], [9200.0, 5.0], [9100.0, 6.0], [9300.0, 8.0], [9500.0, 9.0], [9400.0, 7.0], [9600.0, 9.0], [9700.0, 3.0], [9900.0, 5.0], [9800.0, 3.0], [10000.0, 6.0], [10100.0, 3.0], [10200.0, 4.0], [10300.0, 11.0], [10600.0, 4.0], [10500.0, 5.0], [10400.0, 6.0], [10700.0, 7.0], [11100.0, 6.0], [10800.0, 5.0], [11200.0, 8.0], [10900.0, 4.0], [11000.0, 9.0], [11400.0, 8.0], [11500.0, 6.0], [11300.0, 6.0], [11600.0, 8.0], [11700.0, 5.0], [11800.0, 4.0], [11900.0, 7.0], [12000.0, 8.0], [12100.0, 3.0], [12200.0, 7.0], [12300.0, 7.0], [12400.0, 7.0], [12500.0, 8.0], [12600.0, 15.0], [12700.0, 10.0], [12800.0, 11.0], [12900.0, 19.0], [13000.0, 17.0], [13100.0, 31.0], [13200.0, 22.0], [13300.0, 20.0], [13400.0, 25.0], [13500.0, 20.0], [13600.0, 23.0], [13700.0, 23.0], [13800.0, 27.0], [13900.0, 27.0], [14000.0, 25.0], [14100.0, 39.0], [14200.0, 22.0], [14300.0, 32.0], [14400.0, 27.0], [14500.0, 26.0], [14600.0, 23.0], [14700.0, 13.0], [14800.0, 11.0], [14900.0, 14.0], [15000.0, 12.0], [15100.0, 9.0], [16500.0, 1.0], [16700.0, 9.0], [16800.0, 2.0], [16400.0, 1.0], [17200.0, 4.0], [16600.0, 1.0], [17400.0, 5.0], [17300.0, 2.0], [16900.0, 4.0], [17100.0, 2.0], [17000.0, 3.0], [17500.0, 3.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 17500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 48.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 952.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 48.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 952.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.29000000000076, "minX": 1.75791882E12, "maxY": 501.29000000000076, "series": [{"data": [[1.75791882E12, 501.29000000000076]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791882E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 726.0, "minX": 24.0, "maxY": 17212.0, "series": [{"data": [[24.0, 17167.916666666664], [25.0, 16562.0], [26.0, 16785.0], [27.0, 16793.0], [28.0, 16816.0], [29.0, 16725.0], [30.0, 16787.0], [31.0, 17212.0], [32.0, 17207.0], [35.0, 16836.666666666668], [37.0, 16752.0], [36.0, 16751.0], [38.0, 14663.0], [41.0, 14693.0], [40.0, 14393.0], [45.0, 15158.0], [44.0, 14974.333333333334], [47.0, 15040.5], [48.0, 15014.0], [50.0, 14742.0], [53.0, 14713.0], [52.0, 14713.333333333334], [54.0, 15057.0], [57.0, 14845.666666666666], [59.0, 14736.0], [58.0, 14623.0], [61.0, 14838.5], [63.0, 14873.0], [67.0, 14816.666666666666], [64.0, 15104.0], [71.0, 14746.333333333334], [68.0, 14715.0], [75.0, 14964.0], [74.0, 14309.0], [73.0, 14644.0], [72.0, 15079.0], [79.0, 14766.0], [77.0, 14685.5], [82.0, 15044.0], [81.0, 14978.0], [80.0, 15070.0], [87.0, 14575.0], [86.0, 14549.0], [85.0, 14501.0], [84.0, 14803.0], [91.0, 14735.0], [90.0, 14588.666666666666], [95.0, 14922.0], [94.0, 14180.0], [93.0, 14964.0], [92.0, 14566.0], [97.0, 14932.0], [96.0, 14415.0], [103.0, 14894.0], [102.0, 14533.0], [101.0, 14550.0], [107.0, 14391.0], [106.0, 14173.0], [105.0, 14556.0], [104.0, 14399.0], [111.0, 14625.0], [109.0, 14951.0], [108.0, 14953.0], [114.0, 14721.0], [112.0, 14382.0], [119.0, 14690.5], [117.0, 14496.333333333334], [122.0, 14495.0], [121.0, 14122.0], [120.0, 14936.0], [127.0, 14452.0], [125.0, 14522.0], [124.0, 14457.5], [135.0, 14307.0], [134.0, 14888.0], [133.0, 14358.0], [132.0, 14683.0], [131.0, 14312.0], [130.0, 14612.0], [129.0, 14321.5], [143.0, 14651.0], [141.0, 14190.0], [139.0, 14827.0], [138.0, 14842.0], [137.0, 14881.0], [136.0, 14479.0], [151.0, 14600.0], [150.0, 14731.0], [148.0, 14338.5], [146.0, 14718.0], [145.0, 14807.0], [144.0, 14866.0], [159.0, 14794.0], [158.0, 14020.0], [157.0, 14816.0], [156.0, 14648.0], [155.0, 14492.5], [153.0, 14214.0], [152.0, 14807.0], [167.0, 14304.0], [166.0, 14765.0], [165.0, 14360.5], [163.0, 14455.0], [162.0, 14239.0], [160.0, 14348.0], [175.0, 14235.0], [174.0, 14734.0], [173.0, 14261.0], [172.0, 13950.0], [171.0, 14221.0], [170.0, 13932.0], [169.0, 14535.0], [183.0, 14211.5], [181.0, 14172.0], [180.0, 14473.25], [176.0, 14200.0], [190.0, 14259.0], [189.0, 14190.0], [188.0, 14132.0], [187.0, 14680.0], [186.0, 14269.5], [184.0, 14017.0], [198.0, 14682.0], [197.0, 14684.0], [196.0, 14414.5], [194.0, 14689.0], [193.0, 14214.0], [192.0, 14299.5], [207.0, 14437.0], [206.0, 14493.0], [205.0, 14165.5], [203.0, 13877.0], [202.0, 14179.0], [201.0, 14085.0], [200.0, 14350.0], [213.0, 14420.0], [212.0, 14644.5], [210.0, 14055.0], [209.0, 14148.0], [208.0, 13849.0], [223.0, 14198.0], [222.0, 14316.0], [221.0, 14558.0], [220.0, 14108.0], [219.0, 14621.0], [218.0, 14313.4], [231.0, 14326.0], [230.0, 14557.0], [229.0, 14158.0], [228.0, 13994.0], [227.0, 14014.0], [226.0, 14074.0], [225.0, 14486.0], [224.0, 14017.0], [239.0, 14107.0], [238.0, 13872.0], [236.0, 14444.0], [234.0, 14322.0], [232.0, 13760.0], [247.0, 14517.5], [245.0, 13945.0], [244.0, 14473.0], [243.0, 14512.0], [242.0, 14124.0], [241.0, 13895.0], [255.0, 13694.0], [254.0, 14505.0], [253.0, 14246.833333333332], [270.0, 14400.0], [271.0, 13840.0], [269.0, 14384.0], [268.0, 13959.0], [267.0, 14122.0], [266.0, 14204.0], [264.0, 13853.0], [263.0, 13975.0], [257.0, 13844.0], [259.0, 14036.0], [258.0, 14380.0], [262.0, 14026.0], [261.0, 13944.0], [260.0, 14464.0], [287.0, 13734.5], [284.0, 13952.0], [283.0, 14106.0], [282.0, 14354.0], [281.0, 14113.0], [280.0, 13966.0], [276.0, 13832.0], [275.0, 13972.0], [274.0, 14223.0], [273.0, 14071.5], [302.0, 13748.0], [303.0, 13710.0], [301.0, 14247.0], [300.0, 13824.0], [299.0, 13822.0], [298.0, 14300.0], [297.0, 14137.0], [296.0, 14302.0], [295.0, 13665.0], [288.0, 13968.5], [290.0, 14324.0], [289.0, 14335.0], [294.0, 14327.0], [293.0, 14260.0], [292.0, 14337.0], [317.0, 14230.0], [319.0, 14000.0], [316.0, 13469.0], [315.0, 13460.0], [314.0, 13916.0], [312.0, 14244.0], [311.0, 14170.0], [310.0, 13830.0], [309.0, 14265.0], [308.0, 13868.0], [323.0, 13414.0], [333.0, 13431.0], [335.0, 13950.0], [332.0, 13759.0], [330.0, 13679.0], [328.0, 13701.0], [327.0, 14175.5], [325.0, 13392.0], [324.0, 13637.0], [322.0, 14049.0], [321.0, 13764.0], [320.0, 14117.0], [351.0, 13847.0], [350.0, 13815.75], [338.0, 13849.5], [336.0, 14063.0], [346.0, 13732.0], [345.0, 13859.0], [344.0, 13552.0], [343.0, 13619.0], [342.0, 14149.0], [341.0, 13588.0], [340.0, 14068.0], [367.0, 13630.0], [365.0, 13850.0], [355.0, 13824.0], [354.0, 13309.0], [353.0, 13574.0], [352.0, 13914.0], [363.0, 14054.0], [362.0, 13780.0], [361.0, 13907.0], [360.0, 13579.5], [358.0, 13524.0], [357.0, 14086.0], [356.0, 13334.0], [382.0, 13440.0], [383.0, 13427.0], [381.0, 13998.0], [380.0, 13708.0], [379.0, 13610.0], [378.0, 13851.0], [377.0, 13565.5], [375.0, 14013.0], [368.0, 13616.0], [370.0, 13255.0], [369.0, 13260.0], [374.0, 14027.0], [373.0, 13980.0], [372.0, 13687.5], [398.0, 13488.0], [399.0, 13889.0], [397.0, 13494.0], [396.0, 13329.0], [395.0, 13332.0], [394.0, 13445.0], [393.0, 13939.0], [392.0, 13791.5], [390.0, 13134.0], [387.0, 13189.0], [386.0, 13954.0], [385.0, 13188.0], [384.0, 13868.0], [389.0, 13740.0], [403.0, 13792.0], [409.0, 13439.0], [410.0, 13550.0], [408.0, 13287.0], [407.0, 13300.0], [406.0, 13307.0], [405.0, 13577.0], [404.0, 13885.0], [402.0, 13826.0], [400.0, 13867.0], [430.0, 13206.0], [431.0, 13173.0], [429.0, 13198.5], [419.0, 13804.0], [418.0, 13809.0], [417.0, 13480.285714285714], [427.0, 13727.0], [426.0, 13329.0], [425.0, 13007.0], [424.0, 13781.0], [423.0, 13540.0], [421.0, 13416.5], [435.0, 13186.0], [446.0, 13707.0], [447.0, 13117.0], [445.0, 13336.5], [443.0, 13459.0], [441.0, 13407.666666666666], [438.0, 13203.0], [436.0, 13194.0], [433.0, 13142.0], [432.0, 13344.0], [451.0, 13677.0], [463.0, 13373.5], [461.0, 13219.5], [459.0, 13520.0], [458.0, 13327.666666666666], [455.0, 13520.5], [453.0, 13060.0], [452.0, 13242.0], [450.0, 13470.5], [448.0, 13532.0], [472.0, 12773.0], [478.0, 12887.333333333334], [475.0, 13525.0], [474.0, 13519.0], [473.0, 12744.0], [471.0, 13572.0], [470.0, 13548.0], [469.0, 13314.5], [467.0, 13592.0], [466.0, 13297.0], [465.0, 13137.0], [495.0, 12938.0], [492.0, 13480.0], [491.0, 13005.0], [490.0, 13474.0], [489.0, 13061.0], [488.0, 13272.5], [486.0, 13274.75], [483.0, 13048.25], [510.0, 13267.0], [511.0, 13308.0], [509.0, 12880.0], [508.0, 13378.0], [507.0, 13183.5], [505.0, 12874.0], [504.0, 13431.0], [503.0, 13381.0], [497.0, 13467.0], [496.0, 13031.0], [499.0, 13422.0], [498.0, 12917.0], [502.0, 13286.0], [501.0, 13170.0], [500.0, 13290.0], [537.0, 12650.0], [542.0, 13144.0], [543.0, 12837.0], [528.0, 13168.0], [530.0, 12601.0], [529.0, 13191.0], [532.0, 13127.0], [531.0, 13198.0], [541.0, 13129.0], [539.0, 12880.0], [538.0, 12574.0], [536.0, 13120.0], [519.0, 13084.0], [518.0, 13262.0], [517.0, 13282.0], [516.0, 13287.0], [515.0, 13305.0], [514.0, 12901.0], [512.0, 13347.0], [527.0, 12721.0], [526.0, 13155.0], [525.0, 13089.0], [524.0, 13264.0], [523.0, 13253.0], [522.0, 12586.0], [520.0, 12804.0], [535.0, 12886.5], [533.0, 13194.0], [569.0, 12927.0], [574.0, 12742.0], [575.0, 12779.0], [561.0, 13053.0], [560.0, 13059.0], [563.0, 12795.0], [562.0, 12460.0], [573.0, 12910.0], [572.0, 12896.0], [571.0, 12631.0], [568.0, 12942.0], [551.0, 12284.0], [550.0, 12810.0], [548.0, 13114.0], [547.0, 13126.0], [546.0, 13130.0], [545.0, 12913.0], [559.0, 13037.75], [555.0, 12523.0], [554.0, 12909.0], [553.0, 12984.0], [552.0, 13092.0], [567.0, 12958.0], [564.0, 12765.0], [601.0, 11696.0], [606.0, 12216.5], [607.0, 12263.0], [593.0, 12522.0], [592.0, 12477.0], [595.0, 12663.0], [594.0, 12542.0], [597.0, 12622.0], [596.0, 12648.0], [604.0, 12430.0], [603.0, 12302.0], [602.0, 12393.0], [600.0, 12536.0], [581.0, 12672.0], [580.0, 12309.0], [579.0, 12840.0], [578.0, 12874.0], [577.0, 12290.0], [576.0, 12883.0], [591.0, 12619.0], [590.0, 11902.0], [589.0, 11916.0], [588.0, 12533.0], [586.0, 11972.0], [585.0, 12835.0], [584.0, 12546.333333333334], [599.0, 12247.0], [598.0, 12582.0], [634.0, 11476.5], [625.0, 12059.0], [638.0, 11895.0], [639.0, 11924.0], [624.0, 12166.5], [636.0, 11811.5], [632.0, 11656.0], [615.0, 12206.0], [614.0, 12383.0], [613.0, 12068.0], [612.0, 12022.0], [611.0, 12021.0], [610.0, 12421.0], [609.0, 12247.0], [622.0, 11998.5], [620.0, 12212.5], [618.0, 11890.0], [617.0, 12110.0], [630.0, 11626.0], [629.0, 11919.666666666666], [626.0, 11740.0], [665.0, 11345.0], [657.0, 11671.0], [668.0, 11105.5], [671.0, 11121.0], [656.0, 11655.5], [666.0, 11241.0], [664.0, 11251.0], [647.0, 11558.75], [643.0, 11868.0], [642.0, 11480.0], [641.0, 11544.5], [655.0, 11321.0], [653.0, 11334.0], [652.0, 11724.0], [651.0, 11125.0], [650.0, 10955.0], [649.0, 11767.0], [648.0, 11172.0], [661.0, 11258.0], [660.0, 11316.5], [658.0, 11272.0], [689.0, 10931.0], [703.0, 10892.333333333334], [700.0, 10817.5], [698.0, 10858.0], [697.0, 10795.5], [684.0, 11003.0], [672.0, 11504.0], [675.0, 11289.0], [673.0, 11470.0], [678.0, 11401.0], [677.0, 11247.5], [683.0, 10775.0], [682.0, 11017.0], [681.0, 10971.0], [693.0, 11029.5], [691.0, 11225.0], [690.0, 10997.0], [688.0, 11051.5], [730.0, 9938.0], [731.0, 10345.0], [729.0, 10496.0], [710.0, 10798.0], [709.0, 10436.0], [708.0, 10452.0], [707.0, 10452.5], [705.0, 10368.0], [727.0, 10254.666666666666], [724.0, 10259.0], [723.0, 10353.333333333334], [720.0, 10395.666666666666], [717.0, 10510.5], [715.0, 10693.0], [714.0, 10559.25], [743.0, 9942.0], [765.0, 9510.0], [767.0, 9405.0], [764.0, 9637.5], [742.0, 10283.0], [741.0, 10274.666666666666], [738.0, 10090.5], [736.0, 10054.0], [758.0, 9588.5], [754.0, 9678.25], [750.0, 9872.5], [746.0, 10337.0], [745.0, 9613.0], [744.0, 10133.0], [795.0, 9363.0], [794.0, 9098.666666666666], [774.0, 9362.0], [773.0, 9390.0], [770.0, 9380.0], [768.0, 9904.0], [791.0, 9546.0], [790.0, 9050.5], [788.0, 9109.0], [786.0, 9309.8], [782.0, 9552.0], [780.0, 9249.0], [778.0, 9577.0], [830.0, 8567.666666666666], [831.0, 8688.0], [824.0, 8826.333333333334], [806.0, 9163.0], [805.0, 8972.0], [803.0, 9025.5], [801.0, 8871.0], [800.0, 9201.4], [821.0, 8562.0], [819.0, 8653.333333333334], [816.0, 8940.5], [814.0, 8981.0], [813.0, 8840.25], [809.0, 9019.0], [808.0, 8988.5], [849.0, 7307.0], [861.0, 7068.333333333333], [862.0, 7109.0], [848.0, 7753.0], [858.0, 7187.0], [857.0, 7478.0], [856.0, 7511.0], [838.0, 7869.666666666667], [835.0, 7780.0], [834.0, 8162.0], [832.0, 8218.0], [847.0, 7778.0], [845.0, 7918.0], [843.0, 7630.666666666667], [840.0, 7791.0], [855.0, 7348.666666666667], [852.0, 7774.0], [850.0, 7252.0], [890.0, 5617.0], [893.0, 6260.0], [895.0, 5651.5], [892.0, 6167.5], [889.0, 5976.5], [869.0, 7030.0], [868.0, 6699.5], [866.0, 6849.0], [865.0, 6977.666666666667], [885.0, 6461.5], [881.0, 6526.75], [878.0, 6515.0], [876.0, 6145.0], [875.0, 6595.0], [874.0, 6127.0], [873.0, 7002.0], [872.0, 6561.333333333333], [921.0, 2415.0], [915.0, 3486.0], [926.0, 2572.25], [927.0, 2616.0], [914.0, 4002.0], [912.0, 4310.0], [923.0, 2633.0], [920.0, 2423.0], [903.0, 4364.0], [902.0, 4291.0], [901.0, 4208.0], [900.0, 4653.0], [899.0, 4279.0], [898.0, 4209.0], [897.0, 5326.0], [896.0, 5126.0], [911.0, 4195.5], [909.0, 4109.5], [907.0, 4409.0], [906.0, 4330.0], [904.0, 3994.0], [919.0, 2686.0], [917.0, 3068.0], [916.0, 2955.0], [952.0, 1692.0], [956.0, 1185.0], [959.0, 1302.0], [947.0, 1458.0], [946.0, 1540.5], [958.0, 1648.0], [957.0, 1707.0], [955.0, 1864.0], [954.0, 1320.0], [953.0, 1624.0], [951.0, 1752.0], [948.0, 1356.0], [941.0, 1822.0], [929.0, 2264.0], [928.0, 2696.0], [931.0, 1891.0], [930.0, 2553.0], [933.0, 2263.0], [932.0, 2180.0], [935.0, 2256.0], [934.0, 1561.0], [940.0, 1473.0], [939.0, 1460.0], [937.0, 1415.0], [936.0, 1863.0], [986.0, 1354.5], [990.0, 849.0], [991.0, 726.0], [977.0, 1313.0], [976.0, 897.0], [979.0, 1296.0], [978.0, 966.0], [989.0, 1499.0], [988.0, 1454.0], [987.0, 1578.0], [985.0, 1377.0], [967.0, 1142.0], [966.0, 1231.0], [965.0, 1676.0], [964.0, 1249.0], [963.0, 1587.5], [961.0, 1683.0], [960.0, 1247.0], [975.0, 1050.0], [974.0, 1050.0], [973.0, 936.0], [972.0, 1423.0], [970.0, 1106.0], [968.0, 1465.0], [983.0, 892.0], [982.0, 824.0], [981.0, 1296.0], [980.0, 922.0], [1000.0, 937.6], [995.0, 1134.0], [994.0, 1190.0], [993.0, 1475.0], [992.0, 1153.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[501.289, 11503.485]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11483.333333333334, "minX": 1.75791882E12, "maxY": 7182426.883333334, "series": [{"data": [[1.75791882E12, 11483.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75791882E12, 7182426.883333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791882E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 11503.485, "minX": 1.75791882E12, "maxY": 11503.485, "series": [{"data": [[1.75791882E12, 11503.485]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791882E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 11503.430999999991, "minX": 1.75791882E12, "maxY": 11503.430999999991, "series": [{"data": [[1.75791882E12, 11503.430999999991]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791882E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3452.227999999999, "minX": 1.75791882E12, "maxY": 3452.227999999999, "series": [{"data": [[1.75791882E12, 3452.227999999999]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791882E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 672.0, "minX": 1.75791882E12, "maxY": 17545.0, "series": [{"data": [[1.75791882E12, 17545.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75791882E12, 14682.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75791882E12, 17320.39]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75791882E12, 15056.349999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75791882E12, 672.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75791882E12, 13131.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791882E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1353.0, "minX": 4.0, "maxY": 17020.0, "series": [{"data": [[8.0, 16800.0], [209.0, 13467.0], [55.0, 9304.0], [15.0, 4308.0], [65.0, 1353.0], [4.0, 5487.5], [68.0, 10339.0], [278.0, 14386.0], [18.0, 2451.0], [72.0, 11461.0], [5.0, 3486.0], [94.0, 12667.5], [25.0, 7478.0], [27.0, 8517.0], [28.0, 6517.5], [29.0, 17020.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 278.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1353.0, "minX": 4.0, "maxY": 17020.0, "series": [{"data": [[8.0, 16800.0], [209.0, 13467.0], [55.0, 9304.0], [15.0, 4308.0], [65.0, 1353.0], [4.0, 5487.0], [68.0, 10338.5], [278.0, 14386.0], [18.0, 2451.0], [72.0, 11461.0], [5.0, 3486.0], [94.0, 12667.5], [25.0, 7478.0], [27.0, 8517.0], [28.0, 6517.5], [29.0, 17020.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 278.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791882E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791882E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791882E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791882E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791882E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791882E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791882E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791882E12, 16.666666666666668]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791882E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791882E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791882E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791882E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

