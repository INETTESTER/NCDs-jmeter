/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1388.0, "minX": 0.0, "maxY": 23071.0, "series": [{"data": [[0.0, 1388.0], [0.1, 1409.0], [0.2, 1548.0], [0.3, 1548.0], [0.4, 1556.0], [0.5, 1622.0], [0.6, 1694.0], [0.7, 1719.0], [0.8, 1735.0], [0.9, 1780.0], [1.0, 1810.0], [1.1, 1810.0], [1.2, 1816.0], [1.3, 1827.0], [1.4, 1827.0], [1.5, 1865.0], [1.6, 1876.0], [1.7, 1877.0], [1.8, 1880.0], [1.9, 1883.0], [2.0, 1896.0], [2.1, 1907.0], [2.2, 1994.0], [2.3, 2033.0], [2.4, 2071.0], [2.5, 2071.0], [2.6, 2136.0], [2.7, 2162.0], [2.8, 2164.0], [2.9, 2184.0], [3.0, 2194.0], [3.1, 2211.0], [3.2, 2218.0], [3.3, 2253.0], [3.4, 2324.0], [3.5, 2353.0], [3.6, 2394.0], [3.7, 2412.0], [3.8, 2413.0], [3.9, 2414.0], [4.0, 2429.0], [4.1, 2463.0], [4.2, 2587.0], [4.3, 2629.0], [4.4, 2662.0], [4.5, 2670.0], [4.6, 2712.0], [4.7, 2778.0], [4.8, 2784.0], [4.9, 2791.0], [5.0, 2866.0], [5.1, 2868.0], [5.2, 2892.0], [5.3, 2940.0], [5.4, 2940.0], [5.5, 2940.0], [5.6, 2953.0], [5.7, 2986.0], [5.8, 3041.0], [5.9, 3043.0], [6.0, 3088.0], [6.1, 3104.0], [6.2, 3126.0], [6.3, 3150.0], [6.4, 3276.0], [6.5, 3945.0], [6.6, 4441.0], [6.7, 4477.0], [6.8, 4524.0], [6.9, 4648.0], [7.0, 4667.0], [7.1, 4704.0], [7.2, 4715.0], [7.3, 4832.0], [7.4, 4878.0], [7.5, 4964.0], [7.6, 4966.0], [7.7, 5029.0], [7.8, 5051.0], [7.9, 5055.0], [8.0, 5088.0], [8.1, 5127.0], [8.2, 5184.0], [8.3, 5185.0], [8.4, 5185.0], [8.5, 5418.0], [8.6, 5419.0], [8.7, 5427.0], [8.8, 5436.0], [8.9, 5550.0], [9.0, 5661.0], [9.1, 5802.0], [9.2, 5859.0], [9.3, 5894.0], [9.4, 5979.0], [9.5, 6088.0], [9.6, 6102.0], [9.7, 6108.0], [9.8, 6123.0], [9.9, 6152.0], [10.0, 6170.0], [10.1, 6199.0], [10.2, 6214.0], [10.3, 6371.0], [10.4, 6396.0], [10.5, 6421.0], [10.6, 6425.0], [10.7, 6463.0], [10.8, 6485.0], [10.9, 6669.0], [11.0, 6676.0], [11.1, 6684.0], [11.2, 6707.0], [11.3, 6709.0], [11.4, 6726.0], [11.5, 6743.0], [11.6, 6789.0], [11.7, 6843.0], [11.8, 6918.0], [11.9, 7018.0], [12.0, 7082.0], [12.1, 7151.0], [12.2, 7172.0], [12.3, 7216.0], [12.4, 7295.0], [12.5, 7404.0], [12.6, 7410.0], [12.7, 7418.0], [12.8, 7458.0], [12.9, 7490.0], [13.0, 7577.0], [13.1, 7578.0], [13.2, 8117.0], [13.3, 8151.0], [13.4, 8191.0], [13.5, 8227.0], [13.6, 8237.0], [13.7, 8364.0], [13.8, 8459.0], [13.9, 8518.0], [14.0, 8625.0], [14.1, 8773.0], [14.2, 8806.0], [14.3, 8817.0], [14.4, 8829.0], [14.5, 8904.0], [14.6, 8950.0], [14.7, 8954.0], [14.8, 9071.0], [14.9, 9113.0], [15.0, 9173.0], [15.1, 9248.0], [15.2, 9274.0], [15.3, 9277.0], [15.4, 9287.0], [15.5, 9290.0], [15.6, 9294.0], [15.7, 9395.0], [15.8, 9417.0], [15.9, 9437.0], [16.0, 9459.0], [16.1, 9523.0], [16.2, 9537.0], [16.3, 9546.0], [16.4, 9596.0], [16.5, 9619.0], [16.6, 9671.0], [16.7, 9695.0], [16.8, 9697.0], [16.9, 9697.0], [17.0, 9742.0], [17.1, 9750.0], [17.2, 9773.0], [17.3, 9794.0], [17.4, 9844.0], [17.5, 9940.0], [17.6, 10097.0], [17.7, 10181.0], [17.8, 10506.0], [17.9, 10545.0], [18.0, 11022.0], [18.1, 11283.0], [18.2, 11563.0], [18.3, 11593.0], [18.4, 11605.0], [18.5, 11887.0], [18.6, 12002.0], [18.7, 12104.0], [18.8, 12266.0], [18.9, 12297.0], [19.0, 12318.0], [19.1, 12423.0], [19.2, 12423.0], [19.3, 12531.0], [19.4, 12632.0], [19.5, 13019.0], [19.6, 13025.0], [19.7, 13161.0], [19.8, 13298.0], [19.9, 13325.0], [20.0, 13342.0], [20.1, 13348.0], [20.2, 13486.0], [20.3, 13579.0], [20.4, 13580.0], [20.5, 13583.0], [20.6, 13594.0], [20.7, 13924.0], [20.8, 13941.0], [20.9, 14159.0], [21.0, 14274.0], [21.1, 14456.0], [21.2, 14803.0], [21.3, 14839.0], [21.4, 14859.0], [21.5, 14931.0], [21.6, 14957.0], [21.7, 15007.0], [21.8, 15194.0], [21.9, 15481.0], [22.0, 15935.0], [22.1, 16066.0], [22.2, 16086.0], [22.3, 16286.0], [22.4, 16584.0], [22.5, 16630.0], [22.6, 17002.0], [22.7, 17071.0], [22.8, 17116.0], [22.9, 17148.0], [23.0, 17189.0], [23.1, 17248.0], [23.2, 17261.0], [23.3, 17376.0], [23.4, 17419.0], [23.5, 17503.0], [23.6, 17543.0], [23.7, 17674.0], [23.8, 17734.0], [23.9, 17747.0], [24.0, 17764.0], [24.1, 17771.0], [24.2, 17880.0], [24.3, 17931.0], [24.4, 17988.0], [24.5, 18042.0], [24.6, 18046.0], [24.7, 18051.0], [24.8, 18097.0], [24.9, 18143.0], [25.0, 18167.0], [25.1, 18187.0], [25.2, 18190.0], [25.3, 18225.0], [25.4, 18229.0], [25.5, 18241.0], [25.6, 18242.0], [25.7, 18244.0], [25.8, 18270.0], [25.9, 18278.0], [26.0, 18280.0], [26.1, 18305.0], [26.2, 18309.0], [26.3, 18371.0], [26.4, 18389.0], [26.5, 18390.0], [26.6, 18394.0], [26.7, 18426.0], [26.8, 18429.0], [26.9, 18432.0], [27.0, 18433.0], [27.1, 18436.0], [27.2, 18496.0], [27.3, 18544.0], [27.4, 18595.0], [27.5, 18596.0], [27.6, 18603.0], [27.7, 18618.0], [27.8, 18670.0], [27.9, 18676.0], [28.0, 18678.0], [28.1, 18685.0], [28.2, 18700.0], [28.3, 18733.0], [28.4, 18742.0], [28.5, 18782.0], [28.6, 18801.0], [28.7, 18811.0], [28.8, 18816.0], [28.9, 18853.0], [29.0, 18868.0], [29.1, 18892.0], [29.2, 18923.0], [29.3, 18950.0], [29.4, 18976.0], [29.5, 18983.0], [29.6, 18989.0], [29.7, 18995.0], [29.8, 19017.0], [29.9, 19019.0], [30.0, 19019.0], [30.1, 19028.0], [30.2, 19033.0], [30.3, 19035.0], [30.4, 19036.0], [30.5, 19057.0], [30.6, 19060.0], [30.7, 19062.0], [30.8, 19066.0], [30.9, 19090.0], [31.0, 19097.0], [31.1, 19097.0], [31.2, 19105.0], [31.3, 19107.0], [31.4, 19114.0], [31.5, 19121.0], [31.6, 19127.0], [31.7, 19142.0], [31.8, 19147.0], [31.9, 19150.0], [32.0, 19155.0], [32.1, 19157.0], [32.2, 19162.0], [32.3, 19171.0], [32.4, 19175.0], [32.5, 19215.0], [32.6, 19217.0], [32.7, 19233.0], [32.8, 19234.0], [32.9, 19264.0], [33.0, 19266.0], [33.1, 19269.0], [33.2, 19271.0], [33.3, 19276.0], [33.4, 19278.0], [33.5, 19286.0], [33.6, 19287.0], [33.7, 19296.0], [33.8, 19296.0], [33.9, 19309.0], [34.0, 19310.0], [34.1, 19322.0], [34.2, 19325.0], [34.3, 19329.0], [34.4, 19346.0], [34.5, 19347.0], [34.6, 19355.0], [34.7, 19357.0], [34.8, 19371.0], [34.9, 19379.0], [35.0, 19381.0], [35.1, 19382.0], [35.2, 19387.0], [35.3, 19388.0], [35.4, 19392.0], [35.5, 19399.0], [35.6, 19404.0], [35.7, 19408.0], [35.8, 19413.0], [35.9, 19414.0], [36.0, 19420.0], [36.1, 19421.0], [36.2, 19424.0], [36.3, 19427.0], [36.4, 19431.0], [36.5, 19432.0], [36.6, 19435.0], [36.7, 19443.0], [36.8, 19444.0], [36.9, 19445.0], [37.0, 19446.0], [37.1, 19453.0], [37.2, 19466.0], [37.3, 19467.0], [37.4, 19476.0], [37.5, 19486.0], [37.6, 19500.0], [37.7, 19505.0], [37.8, 19506.0], [37.9, 19522.0], [38.0, 19528.0], [38.1, 19535.0], [38.2, 19537.0], [38.3, 19539.0], [38.4, 19543.0], [38.5, 19545.0], [38.6, 19546.0], [38.7, 19551.0], [38.8, 19555.0], [38.9, 19556.0], [39.0, 19556.0], [39.1, 19558.0], [39.2, 19561.0], [39.3, 19562.0], [39.4, 19568.0], [39.5, 19584.0], [39.6, 19585.0], [39.7, 19587.0], [39.8, 19588.0], [39.9, 19588.0], [40.0, 19592.0], [40.1, 19593.0], [40.2, 19600.0], [40.3, 19600.0], [40.4, 19601.0], [40.5, 19603.0], [40.6, 19604.0], [40.7, 19606.0], [40.8, 19606.0], [40.9, 19611.0], [41.0, 19617.0], [41.1, 19618.0], [41.2, 19622.0], [41.3, 19624.0], [41.4, 19628.0], [41.5, 19633.0], [41.6, 19634.0], [41.7, 19637.0], [41.8, 19642.0], [41.9, 19647.0], [42.0, 19659.0], [42.1, 19662.0], [42.2, 19664.0], [42.3, 19666.0], [42.4, 19667.0], [42.5, 19667.0], [42.6, 19671.0], [42.7, 19678.0], [42.8, 19681.0], [42.9, 19683.0], [43.0, 19684.0], [43.1, 19685.0], [43.2, 19689.0], [43.3, 19691.0], [43.4, 19694.0], [43.5, 19697.0], [43.6, 19700.0], [43.7, 19701.0], [43.8, 19701.0], [43.9, 19702.0], [44.0, 19702.0], [44.1, 19706.0], [44.2, 19706.0], [44.3, 19709.0], [44.4, 19712.0], [44.5, 19712.0], [44.6, 19713.0], [44.7, 19721.0], [44.8, 19721.0], [44.9, 19722.0], [45.0, 19732.0], [45.1, 19747.0], [45.2, 19754.0], [45.3, 19756.0], [45.4, 19761.0], [45.5, 19764.0], [45.6, 19774.0], [45.7, 19777.0], [45.8, 19781.0], [45.9, 19789.0], [46.0, 19795.0], [46.1, 19804.0], [46.2, 19805.0], [46.3, 19810.0], [46.4, 19812.0], [46.5, 19816.0], [46.6, 19817.0], [46.7, 19819.0], [46.8, 19823.0], [46.9, 19824.0], [47.0, 19825.0], [47.1, 19826.0], [47.2, 19828.0], [47.3, 19828.0], [47.4, 19830.0], [47.5, 19840.0], [47.6, 19841.0], [47.7, 19847.0], [47.8, 19847.0], [47.9, 19849.0], [48.0, 19853.0], [48.1, 19854.0], [48.2, 19855.0], [48.3, 19856.0], [48.4, 19857.0], [48.5, 19858.0], [48.6, 19859.0], [48.7, 19860.0], [48.8, 19861.0], [48.9, 19865.0], [49.0, 19865.0], [49.1, 19866.0], [49.2, 19870.0], [49.3, 19873.0], [49.4, 19874.0], [49.5, 19875.0], [49.6, 19876.0], [49.7, 19876.0], [49.8, 19876.0], [49.9, 19878.0], [50.0, 19885.0], [50.1, 19887.0], [50.2, 19895.0], [50.3, 19897.0], [50.4, 19899.0], [50.5, 19901.0], [50.6, 19902.0], [50.7, 19904.0], [50.8, 19911.0], [50.9, 19912.0], [51.0, 19913.0], [51.1, 19915.0], [51.2, 19917.0], [51.3, 19920.0], [51.4, 19923.0], [51.5, 19925.0], [51.6, 19926.0], [51.7, 19928.0], [51.8, 19928.0], [51.9, 19933.0], [52.0, 19933.0], [52.1, 19938.0], [52.2, 19942.0], [52.3, 19943.0], [52.4, 19943.0], [52.5, 19945.0], [52.6, 19949.0], [52.7, 19951.0], [52.8, 19952.0], [52.9, 19953.0], [53.0, 19955.0], [53.1, 19957.0], [53.2, 19960.0], [53.3, 19963.0], [53.4, 19965.0], [53.5, 19967.0], [53.6, 19969.0], [53.7, 19969.0], [53.8, 19971.0], [53.9, 19974.0], [54.0, 19974.0], [54.1, 19976.0], [54.2, 19978.0], [54.3, 19978.0], [54.4, 19982.0], [54.5, 19985.0], [54.6, 19995.0], [54.7, 19996.0], [54.8, 19998.0], [54.9, 19999.0], [55.0, 20003.0], [55.1, 20004.0], [55.2, 20007.0], [55.3, 20007.0], [55.4, 20009.0], [55.5, 20012.0], [55.6, 20013.0], [55.7, 20014.0], [55.8, 20019.0], [55.9, 20020.0], [56.0, 20027.0], [56.1, 20029.0], [56.2, 20031.0], [56.3, 20035.0], [56.4, 20036.0], [56.5, 20036.0], [56.6, 20040.0], [56.7, 20040.0], [56.8, 20041.0], [56.9, 20046.0], [57.0, 20047.0], [57.1, 20048.0], [57.2, 20050.0], [57.3, 20053.0], [57.4, 20054.0], [57.5, 20055.0], [57.6, 20055.0], [57.7, 20056.0], [57.8, 20061.0], [57.9, 20063.0], [58.0, 20063.0], [58.1, 20065.0], [58.2, 20065.0], [58.3, 20066.0], [58.4, 20067.0], [58.5, 20067.0], [58.6, 20068.0], [58.7, 20070.0], [58.8, 20073.0], [58.9, 20073.0], [59.0, 20074.0], [59.1, 20075.0], [59.2, 20082.0], [59.3, 20082.0], [59.4, 20086.0], [59.5, 20086.0], [59.6, 20088.0], [59.7, 20092.0], [59.8, 20092.0], [59.9, 20094.0], [60.0, 20097.0], [60.1, 20098.0], [60.2, 20101.0], [60.3, 20104.0], [60.4, 20107.0], [60.5, 20108.0], [60.6, 20108.0], [60.7, 20111.0], [60.8, 20115.0], [60.9, 20115.0], [61.0, 20117.0], [61.1, 20119.0], [61.2, 20120.0], [61.3, 20122.0], [61.4, 20123.0], [61.5, 20125.0], [61.6, 20127.0], [61.7, 20128.0], [61.8, 20128.0], [61.9, 20129.0], [62.0, 20129.0], [62.1, 20130.0], [62.2, 20132.0], [62.3, 20133.0], [62.4, 20134.0], [62.5, 20135.0], [62.6, 20139.0], [62.7, 20141.0], [62.8, 20142.0], [62.9, 20143.0], [63.0, 20144.0], [63.1, 20146.0], [63.2, 20149.0], [63.3, 20149.0], [63.4, 20151.0], [63.5, 20153.0], [63.6, 20154.0], [63.7, 20156.0], [63.8, 20161.0], [63.9, 20162.0], [64.0, 20164.0], [64.1, 20165.0], [64.2, 20166.0], [64.3, 20166.0], [64.4, 20166.0], [64.5, 20172.0], [64.6, 20172.0], [64.7, 20180.0], [64.8, 20181.0], [64.9, 20181.0], [65.0, 20181.0], [65.1, 20182.0], [65.2, 20186.0], [65.3, 20188.0], [65.4, 20188.0], [65.5, 20193.0], [65.6, 20194.0], [65.7, 20194.0], [65.8, 20197.0], [65.9, 20198.0], [66.0, 20200.0], [66.1, 20201.0], [66.2, 20203.0], [66.3, 20208.0], [66.4, 20209.0], [66.5, 20209.0], [66.6, 20210.0], [66.7, 20211.0], [66.8, 20214.0], [66.9, 20215.0], [67.0, 20217.0], [67.1, 20217.0], [67.2, 20220.0], [67.3, 20220.0], [67.4, 20221.0], [67.5, 20221.0], [67.6, 20222.0], [67.7, 20223.0], [67.8, 20223.0], [67.9, 20226.0], [68.0, 20228.0], [68.1, 20229.0], [68.2, 20229.0], [68.3, 20230.0], [68.4, 20237.0], [68.5, 20241.0], [68.6, 20243.0], [68.7, 20244.0], [68.8, 20248.0], [68.9, 20248.0], [69.0, 20249.0], [69.1, 20251.0], [69.2, 20252.0], [69.3, 20252.0], [69.4, 20252.0], [69.5, 20255.0], [69.6, 20255.0], [69.7, 20255.0], [69.8, 20258.0], [69.9, 20270.0], [70.0, 20270.0], [70.1, 20270.0], [70.2, 20274.0], [70.3, 20277.0], [70.4, 20278.0], [70.5, 20283.0], [70.6, 20285.0], [70.7, 20285.0], [70.8, 20286.0], [70.9, 20288.0], [71.0, 20290.0], [71.1, 20291.0], [71.2, 20294.0], [71.3, 20296.0], [71.4, 20296.0], [71.5, 20296.0], [71.6, 20300.0], [71.7, 20301.0], [71.8, 20302.0], [71.9, 20305.0], [72.0, 20309.0], [72.1, 20309.0], [72.2, 20312.0], [72.3, 20316.0], [72.4, 20317.0], [72.5, 20318.0], [72.6, 20324.0], [72.7, 20324.0], [72.8, 20327.0], [72.9, 20328.0], [73.0, 20329.0], [73.1, 20335.0], [73.2, 20335.0], [73.3, 20343.0], [73.4, 20343.0], [73.5, 20344.0], [73.6, 20348.0], [73.7, 20349.0], [73.8, 20350.0], [73.9, 20350.0], [74.0, 20351.0], [74.1, 20353.0], [74.2, 20357.0], [74.3, 20359.0], [74.4, 20360.0], [74.5, 20362.0], [74.6, 20364.0], [74.7, 20368.0], [74.8, 20372.0], [74.9, 20373.0], [75.0, 20374.0], [75.1, 20374.0], [75.2, 20375.0], [75.3, 20379.0], [75.4, 20379.0], [75.5, 20382.0], [75.6, 20382.0], [75.7, 20382.0], [75.8, 20385.0], [75.9, 20388.0], [76.0, 20390.0], [76.1, 20394.0], [76.2, 20395.0], [76.3, 20399.0], [76.4, 20402.0], [76.5, 20403.0], [76.6, 20404.0], [76.7, 20407.0], [76.8, 20413.0], [76.9, 20428.0], [77.0, 20430.0], [77.1, 20431.0], [77.2, 20434.0], [77.3, 20435.0], [77.4, 20435.0], [77.5, 20436.0], [77.6, 20437.0], [77.7, 20439.0], [77.8, 20440.0], [77.9, 20440.0], [78.0, 20442.0], [78.1, 20442.0], [78.2, 20452.0], [78.3, 20453.0], [78.4, 20455.0], [78.5, 20455.0], [78.6, 20455.0], [78.7, 20465.0], [78.8, 20466.0], [78.9, 20467.0], [79.0, 20475.0], [79.1, 20481.0], [79.2, 20481.0], [79.3, 20483.0], [79.4, 20484.0], [79.5, 20484.0], [79.6, 20485.0], [79.7, 20488.0], [79.8, 20488.0], [79.9, 20489.0], [80.0, 20490.0], [80.1, 20492.0], [80.2, 20493.0], [80.3, 20497.0], [80.4, 20498.0], [80.5, 20499.0], [80.6, 20499.0], [80.7, 20502.0], [80.8, 20505.0], [80.9, 20506.0], [81.0, 20506.0], [81.1, 20506.0], [81.2, 20512.0], [81.3, 20512.0], [81.4, 20517.0], [81.5, 20518.0], [81.6, 20525.0], [81.7, 20527.0], [81.8, 20527.0], [81.9, 20531.0], [82.0, 20531.0], [82.1, 20533.0], [82.2, 20536.0], [82.3, 20538.0], [82.4, 20538.0], [82.5, 20539.0], [82.6, 20545.0], [82.7, 20548.0], [82.8, 20549.0], [82.9, 20549.0], [83.0, 20554.0], [83.1, 20554.0], [83.2, 20556.0], [83.3, 20560.0], [83.4, 20565.0], [83.5, 20566.0], [83.6, 20577.0], [83.7, 20577.0], [83.8, 20582.0], [83.9, 20583.0], [84.0, 20584.0], [84.1, 20586.0], [84.2, 20587.0], [84.3, 20588.0], [84.4, 20589.0], [84.5, 20595.0], [84.6, 20595.0], [84.7, 20596.0], [84.8, 20597.0], [84.9, 20599.0], [85.0, 20599.0], [85.1, 20605.0], [85.2, 20606.0], [85.3, 20615.0], [85.4, 20616.0], [85.5, 20622.0], [85.6, 20623.0], [85.7, 20626.0], [85.8, 20626.0], [85.9, 20627.0], [86.0, 20631.0], [86.1, 20641.0], [86.2, 20642.0], [86.3, 20643.0], [86.4, 20645.0], [86.5, 20649.0], [86.6, 20649.0], [86.7, 20653.0], [86.8, 20656.0], [86.9, 20658.0], [87.0, 20661.0], [87.1, 20661.0], [87.2, 20662.0], [87.3, 20663.0], [87.4, 20665.0], [87.5, 20667.0], [87.6, 20668.0], [87.7, 20668.0], [87.8, 20669.0], [87.9, 20670.0], [88.0, 20671.0], [88.1, 20674.0], [88.2, 20674.0], [88.3, 20681.0], [88.4, 20685.0], [88.5, 20686.0], [88.6, 20689.0], [88.7, 20693.0], [88.8, 20695.0], [88.9, 20696.0], [89.0, 20699.0], [89.1, 20704.0], [89.2, 20705.0], [89.3, 20705.0], [89.4, 20706.0], [89.5, 20709.0], [89.6, 20709.0], [89.7, 20710.0], [89.8, 20713.0], [89.9, 20715.0], [90.0, 20719.0], [90.1, 20722.0], [90.2, 20727.0], [90.3, 20730.0], [90.4, 20733.0], [90.5, 20735.0], [90.6, 20742.0], [90.7, 20742.0], [90.8, 20743.0], [90.9, 20749.0], [91.0, 20755.0], [91.1, 20755.0], [91.2, 20756.0], [91.3, 20759.0], [91.4, 20764.0], [91.5, 20764.0], [91.6, 20769.0], [91.7, 20770.0], [91.8, 20771.0], [91.9, 20772.0], [92.0, 20774.0], [92.1, 20774.0], [92.2, 20777.0], [92.3, 20778.0], [92.4, 20779.0], [92.5, 20782.0], [92.6, 20783.0], [92.7, 20786.0], [92.8, 20788.0], [92.9, 20791.0], [93.0, 20794.0], [93.1, 20797.0], [93.2, 20803.0], [93.3, 20803.0], [93.4, 20805.0], [93.5, 20811.0], [93.6, 20812.0], [93.7, 20812.0], [93.8, 20814.0], [93.9, 20815.0], [94.0, 20816.0], [94.1, 20817.0], [94.2, 20818.0], [94.3, 20824.0], [94.4, 20824.0], [94.5, 20829.0], [94.6, 20830.0], [94.7, 20830.0], [94.8, 20830.0], [94.9, 20837.0], [95.0, 20838.0], [95.1, 20838.0], [95.2, 20838.0], [95.3, 20850.0], [95.4, 20851.0], [95.5, 20854.0], [95.6, 20864.0], [95.7, 20865.0], [95.8, 20875.0], [95.9, 20884.0], [96.0, 20886.0], [96.1, 20887.0], [96.2, 20887.0], [96.3, 20890.0], [96.4, 20892.0], [96.5, 20894.0], [96.6, 20896.0], [96.7, 20897.0], [96.8, 20898.0], [96.9, 20901.0], [97.0, 20907.0], [97.1, 20908.0], [97.2, 20913.0], [97.3, 20914.0], [97.4, 20931.0], [97.5, 20934.0], [97.6, 20935.0], [97.7, 20955.0], [97.8, 20964.0], [97.9, 20987.0], [98.0, 20989.0], [98.1, 20993.0], [98.2, 21010.0], [98.3, 21016.0], [98.4, 21019.0], [98.5, 21019.0], [98.6, 21045.0], [98.7, 21056.0], [98.8, 21061.0], [98.9, 21075.0], [99.0, 21082.0], [99.1, 21082.0], [99.2, 21083.0], [99.3, 22351.0], [99.4, 22907.0], [99.5, 22927.0], [99.6, 22986.0], [99.7, 23023.0], [99.8, 23061.0], [99.9, 23071.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1300.0, "maxY": 58.0, "series": [{"data": [[1300.0, 1.0], [1400.0, 1.0], [1500.0, 3.0], [1600.0, 2.0], [1700.0, 3.0], [1800.0, 10.0], [1900.0, 2.0], [2000.0, 3.0], [2100.0, 5.0], [2300.0, 3.0], [2200.0, 3.0], [2400.0, 5.0], [2500.0, 1.0], [2600.0, 4.0], [2700.0, 4.0], [2800.0, 3.0], [2900.0, 5.0], [3000.0, 3.0], [3100.0, 3.0], [3200.0, 1.0], [3900.0, 1.0], [4400.0, 2.0], [4600.0, 2.0], [4500.0, 1.0], [4700.0, 2.0], [4800.0, 2.0], [4900.0, 2.0], [5000.0, 4.0], [5100.0, 4.0], [5400.0, 4.0], [5600.0, 1.0], [5500.0, 1.0], [5800.0, 3.0], [5900.0, 1.0], [6100.0, 6.0], [6000.0, 1.0], [6200.0, 1.0], [6300.0, 2.0], [6400.0, 4.0], [6600.0, 3.0], [6700.0, 5.0], [6800.0, 1.0], [6900.0, 1.0], [7000.0, 2.0], [7100.0, 2.0], [7200.0, 2.0], [7400.0, 5.0], [7500.0, 2.0], [8100.0, 3.0], [8600.0, 1.0], [8300.0, 1.0], [8500.0, 1.0], [8200.0, 2.0], [8400.0, 1.0], [8700.0, 1.0], [8900.0, 3.0], [8800.0, 3.0], [9100.0, 2.0], [9200.0, 6.0], [9000.0, 1.0], [9400.0, 3.0], [9500.0, 4.0], [9600.0, 5.0], [9300.0, 1.0], [9700.0, 4.0], [9800.0, 1.0], [9900.0, 1.0], [10000.0, 1.0], [10100.0, 1.0], [10500.0, 2.0], [11200.0, 1.0], [11000.0, 1.0], [11500.0, 2.0], [11600.0, 1.0], [12100.0, 1.0], [11800.0, 1.0], [12200.0, 2.0], [12000.0, 1.0], [12300.0, 1.0], [12500.0, 1.0], [12400.0, 1.0], [12600.0, 1.0], [13000.0, 2.0], [13100.0, 1.0], [13300.0, 3.0], [13200.0, 1.0], [13500.0, 4.0], [13400.0, 1.0], [13900.0, 2.0], [14100.0, 1.0], [14200.0, 1.0], [14400.0, 1.0], [14800.0, 3.0], [15000.0, 1.0], [14900.0, 2.0], [15100.0, 1.0], [15400.0, 1.0], [15900.0, 1.0], [16000.0, 2.0], [16200.0, 1.0], [16500.0, 1.0], [17000.0, 2.0], [16600.0, 1.0], [17300.0, 1.0], [17100.0, 3.0], [17400.0, 1.0], [17200.0, 2.0], [17600.0, 1.0], [17700.0, 4.0], [17800.0, 1.0], [18100.0, 4.0], [18000.0, 4.0], [17500.0, 2.0], [17900.0, 2.0], [18200.0, 8.0], [18400.0, 6.0], [18300.0, 6.0], [19300.0, 17.0], [18500.0, 3.0], [18600.0, 6.0], [19200.0, 14.0], [18900.0, 6.0], [19100.0, 13.0], [19000.0, 14.0], [18800.0, 6.0], [18700.0, 4.0], [19400.0, 20.0], [19600.0, 34.0], [19500.0, 26.0], [19700.0, 25.0], [19800.0, 44.0], [19900.0, 45.0], [20000.0, 52.0], [20100.0, 58.0], [20200.0, 56.0], [20300.0, 48.0], [20400.0, 43.0], [20500.0, 44.0], [20600.0, 41.0], [20700.0, 41.0], [20800.0, 37.0], [20900.0, 13.0], [21000.0, 11.0], [22300.0, 1.0], [22900.0, 3.0], [23000.0, 3.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 998.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 998.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.93899999999945, "minX": 1.75791174E12, "maxY": 500.93899999999945, "series": [{"data": [[1.75791174E12, 500.93899999999945]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791174E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1388.0, "minX": 1.0, "maxY": 23071.0, "series": [{"data": [[2.0, 23071.0], [3.0, 22907.0], [5.0, 22706.0], [7.0, 22956.5], [8.0, 21083.0], [9.0, 20890.0], [11.0, 20794.0], [13.0, 21082.0], [14.0, 20987.0], [15.0, 20932.5], [16.0, 20850.0], [17.0, 21075.0], [19.0, 20853.5], [20.0, 20353.0], [23.0, 20795.0], [25.0, 20826.5], [26.0, 20399.0], [27.0, 20779.0], [28.0, 20623.0], [29.0, 21045.0], [30.0, 20512.0], [31.0, 20886.0], [32.0, 20964.0], [35.0, 21019.0], [34.0, 20686.5], [36.0, 20865.0], [39.0, 20742.0], [38.0, 20696.0], [43.0, 20689.0], [42.0, 20898.333333333332], [45.0, 20881.5], [47.0, 20756.0], [46.0, 20658.0], [49.0, 20209.0], [48.0, 20914.0], [50.0, 20989.0], [52.0, 20689.5], [54.0, 20784.5], [57.0, 20181.0], [56.0, 20764.5], [59.0, 20898.0], [58.0, 20892.0], [61.0, 20696.0], [60.0, 20805.0], [63.0, 20839.0], [65.0, 20492.0], [64.0, 20705.0], [71.0, 20818.0], [70.0, 20684.5], [68.0, 20538.333333333332], [75.0, 20517.0], [74.0, 20779.5], [72.0, 20681.0], [77.0, 20435.0], [76.0, 20222.0], [83.0, 20460.0], [81.0, 20545.5], [87.0, 20777.0], [85.0, 20228.0], [84.0, 20955.0], [90.0, 20791.0], [89.0, 20774.5], [88.0, 20669.0], [94.0, 20348.0], [92.0, 20235.0], [99.0, 20316.0], [98.0, 20374.5], [96.0, 20789.5], [103.0, 20686.0], [102.0, 20186.0], [101.0, 20931.0], [100.0, 20908.0], [107.0, 20864.0], [106.0, 20830.0], [105.0, 20107.0], [104.0, 20755.0], [109.0, 20465.0], [108.0, 20452.0], [115.0, 20364.5], [114.0, 20837.0], [112.0, 20412.0], [119.0, 20901.0], [117.0, 20913.0], [116.0, 20641.0], [123.0, 20200.0], [122.0, 20649.0], [121.0, 20868.5], [120.0, 20774.0], [127.0, 20797.0], [126.0, 20661.0], [125.0, 20855.0], [135.0, 20897.0], [134.0, 20699.0], [133.0, 20627.0], [132.0, 20624.0], [131.0, 20350.0], [130.0, 20759.0], [129.0, 20149.0], [128.0, 20764.0], [143.0, 20243.0], [142.0, 20203.0], [141.0, 20709.0], [140.0, 20599.0], [139.0, 20577.0], [138.0, 20887.0], [137.0, 20481.0], [136.0, 20643.0], [151.0, 20774.0], [150.0, 20128.0], [149.0, 20388.5], [147.0, 20700.0], [144.0, 20252.0], [158.0, 20119.0], [155.0, 20455.0], [154.0, 20827.0], [152.0, 20166.0], [167.0, 20854.0], [166.0, 20329.666666666668], [163.0, 20431.0], [162.0, 20229.0], [161.0, 20445.75], [160.0, 20710.0], [175.0, 20623.0], [173.0, 20786.0], [172.0, 20838.0], [171.0, 20536.0], [170.0, 20407.0], [169.0, 20771.0], [168.0, 20554.0], [183.0, 20506.0], [182.0, 20587.0], [181.0, 20743.0], [180.0, 20830.0], [179.0, 20601.5], [177.0, 20096.0], [190.0, 20548.0], [189.0, 20286.0], [188.0, 20185.0], [187.0, 20670.0], [185.0, 20817.0], [184.0, 20488.0], [199.0, 20470.4], [196.0, 20549.0], [194.0, 20385.0], [192.0, 20704.0], [206.0, 20206.5], [204.0, 20803.0], [203.0, 20172.0], [202.0, 20431.666666666668], [215.0, 20622.0], [214.0, 20165.0], [213.0, 20626.0], [212.0, 20531.0], [211.0, 20556.0], [210.0, 20545.0], [209.0, 20651.666666666668], [223.0, 19967.0], [222.0, 20788.0], [221.0, 20499.0], [220.0, 20511.333333333332], [217.0, 20115.0], [216.0, 20794.0], [231.0, 20769.0], [230.0, 20540.0], [228.0, 20706.0], [227.0, 20196.666666666668], [224.0, 20151.0], [239.0, 20502.0], [238.0, 20490.0], [237.0, 20693.0], [236.0, 20130.0], [234.0, 20198.0], [233.0, 20527.0], [232.0, 20362.0], [247.0, 20215.0], [246.0, 20311.5], [244.0, 20362.5], [242.0, 20134.5], [240.0, 20405.5], [255.0, 20285.0], [254.0, 20455.0], [253.0, 20211.0], [252.0, 20485.0], [251.0, 20525.0], [250.0, 20742.0], [249.0, 19993.5], [258.0, 20014.0], [271.0, 20110.5], [268.0, 20344.5], [265.0, 20467.0], [263.0, 20668.0], [262.0, 20440.0], [261.0, 20650.666666666668], [257.0, 20027.0], [256.0, 20727.0], [284.0, 20499.0], [287.0, 20217.0], [286.0, 19902.0], [285.0, 20277.0], [283.0, 19943.0], [279.0, 20350.0], [273.0, 20506.0], [272.0, 20287.25], [275.0, 20041.0], [274.0, 20040.0], [278.0, 20455.0], [277.0, 20309.0], [276.0, 20549.0], [291.0, 20054.0], [302.0, 20668.0], [303.0, 20081.5], [300.0, 19974.0], [299.0, 19978.0], [298.0, 20198.666666666668], [295.0, 20326.5], [293.0, 20394.0], [292.0, 20065.0], [290.0, 20506.0], [289.0, 20566.0], [288.0, 20068.0], [318.0, 19963.0], [319.0, 20595.0], [317.0, 20479.333333333336], [311.0, 20252.0], [310.0, 19969.0], [309.0, 20031.0], [308.0, 20493.0], [306.0, 20558.0], [304.0, 20538.0], [322.0, 20484.0], [334.0, 19823.0], [335.0, 19819.0], [332.0, 20285.0], [329.0, 19878.0], [328.0, 20194.0], [327.0, 20169.0], [325.0, 19957.0], [324.0, 20174.5], [321.0, 20335.0], [320.0, 19920.0], [349.0, 20073.0], [350.0, 20125.0], [348.0, 20466.0], [338.0, 20388.666666666668], [337.0, 19996.0], [347.0, 20383.5], [345.0, 20327.0], [344.0, 20344.0], [343.0, 20182.0], [342.0, 20117.0], [341.0, 20351.0], [340.0, 20154.5], [367.0, 20149.0], [366.0, 20399.666666666668], [363.0, 19754.0], [362.0, 20484.0], [361.0, 20055.0], [360.0, 20005.0], [357.0, 20229.5], [352.0, 19938.0], [355.0, 20296.0], [354.0, 20181.0], [353.0, 20595.0], [382.0, 19860.0], [381.0, 20490.0], [371.0, 20560.0], [370.0, 19933.0], [369.0, 20270.0], [368.0, 20291.0], [379.0, 20036.0], [378.0, 20404.0], [377.0, 19917.0], [376.0, 20133.0], [375.0, 20070.0], [373.0, 20086.0], [372.0, 20489.0], [387.0, 20104.0], [397.0, 20435.0], [399.0, 19961.0], [396.0, 20227.5], [394.0, 20463.0], [392.0, 20361.0], [391.0, 20248.0], [389.0, 20032.5], [388.0, 20056.0], [385.0, 20343.0], [384.0, 20021.0], [413.0, 19953.0], [415.0, 19817.0], [412.0, 20436.0], [402.0, 20364.0], [400.0, 20288.0], [411.0, 19865.0], [410.0, 19722.0], [409.0, 20255.0], [408.0, 20368.0], [407.0, 19945.0], [405.0, 20359.0], [404.0, 20103.5], [419.0, 20144.0], [430.0, 20073.5], [428.0, 19840.0], [427.0, 20093.666666666668], [424.0, 19891.0], [421.0, 20221.0], [420.0, 20488.0], [418.0, 19810.0], [417.0, 20075.0], [416.0, 20437.0], [446.0, 19913.0], [447.0, 20209.0], [445.0, 20220.0], [444.0, 20012.0], [443.0, 20241.0], [442.0, 20283.0], [441.0, 20301.0], [440.0, 19816.0], [439.0, 19712.0], [433.0, 20481.0], [432.0, 20045.5], [435.0, 20294.0], [434.0, 19943.0], [438.0, 20402.0], [437.0, 19642.0], [436.0, 20194.0], [463.0, 19885.666666666668], [460.0, 19659.0], [459.0, 20388.0], [458.0, 20318.0], [457.0, 19982.0], [456.0, 19861.5], [454.0, 19924.0], [452.0, 19689.0], [451.0, 19857.0], [450.0, 19861.0], [449.0, 20335.0], [448.0, 20129.0], [466.0, 19611.0], [479.0, 20233.333333333332], [476.0, 19832.0], [474.0, 20349.0], [473.0, 20156.5], [471.0, 20063.0], [470.0, 19858.25], [465.0, 20255.0], [464.0, 19887.0], [483.0, 20108.0], [493.0, 20053.0], [492.0, 20040.0], [491.0, 19588.0], [490.0, 19909.0], [489.0, 20324.0], [487.0, 19701.0], [486.0, 19978.5], [485.0, 19826.0], [482.0, 20018.5], [480.0, 19732.0], [509.0, 20300.0], [511.0, 19554.0], [508.0, 19978.5], [499.0, 20061.0], [497.0, 19931.25], [506.0, 19841.0], [505.0, 19678.0], [504.0, 20226.0], [503.0, 19897.0], [502.0, 20097.0], [501.0, 19981.0], [536.0, 19404.0], [542.0, 19983.0], [543.0, 19876.0], [529.0, 19856.0], [540.0, 19537.0], [539.0, 20092.0], [538.0, 19781.0], [527.0, 19995.0], [512.0, 19585.0], [514.0, 19830.0], [513.0, 20197.0], [516.0, 19600.0], [515.0, 19721.0], [519.0, 20252.0], [518.0, 20001.0], [526.0, 19859.0], [523.0, 20154.0], [521.0, 20153.0], [520.0, 20101.0], [535.0, 19515.5], [533.0, 19667.0], [532.0, 19917.5], [531.0, 20098.0], [563.0, 19457.0], [573.0, 19424.0], [575.0, 19712.0], [561.0, 19925.0], [560.0, 19357.0], [572.0, 19592.0], [571.0, 19612.333333333332], [568.0, 19555.0], [548.0, 20067.0], [547.0, 19870.0], [546.0, 20051.0], [544.0, 19901.0], [559.0, 20055.0], [558.0, 19915.0], [556.0, 19420.0], [555.0, 20082.0], [554.0, 19507.5], [552.0, 19891.75], [567.0, 19909.0], [565.0, 19446.0], [564.0, 20129.0], [606.0, 19755.5], [607.0, 19500.0], [592.0, 19695.0], [594.0, 19618.0], [593.0, 19604.0], [596.0, 19382.0], [595.0, 19933.0], [604.0, 19543.0], [603.0, 19535.0], [602.0, 19700.0], [601.0, 19697.0], [600.0, 19410.0], [582.0, 19828.0], [580.0, 20028.0], [578.0, 19616.0], [590.0, 19296.0], [589.0, 19325.0], [588.0, 19628.0], [587.0, 19392.0], [586.0, 19591.0], [584.0, 19954.333333333332], [598.0, 19600.0], [597.0, 19781.0], [637.0, 19217.0], [639.0, 19499.5], [624.0, 19234.0], [636.0, 19683.0], [635.0, 19155.0], [634.0, 19387.0], [633.0, 19626.5], [623.0, 19502.0], [611.0, 19774.0], [610.0, 19724.0], [615.0, 19684.5], [613.0, 19584.5], [621.0, 19795.0], [620.0, 19876.0], [619.0, 19617.0], [618.0, 19355.0], [617.0, 19142.0], [616.0, 19296.0], [631.0, 19777.0], [630.0, 19513.75], [629.0, 19865.0], [626.0, 19127.0], [664.0, 19639.5], [668.0, 19266.0], [671.0, 19389.0], [658.0, 19344.333333333332], [667.0, 19019.0], [666.0, 19286.0], [665.0, 19702.0], [655.0, 19347.0], [640.0, 19147.0], [642.0, 19825.0], [641.0, 19427.0], [644.0, 19114.0], [643.0, 19551.0], [646.0, 19539.0], [645.0, 18995.0], [654.0, 19624.0], [653.0, 19162.0], [652.0, 19157.0], [651.0, 19269.0], [650.0, 19019.0], [649.0, 19381.0], [648.0, 19325.5], [662.0, 19432.0], [661.0, 19060.0], [660.0, 19561.0], [659.0, 19671.0], [696.0, 19379.0], [700.0, 18782.0], [703.0, 18923.0], [688.0, 18976.0], [692.0, 19444.666666666668], [689.0, 19528.0], [702.0, 18700.0], [701.0, 18816.0], [699.0, 18742.0], [698.0, 18685.0], [697.0, 19435.0], [687.0, 19090.0], [672.0, 19706.0], [677.0, 19351.0], [675.0, 19173.333333333332], [679.0, 19606.0], [678.0, 19684.0], [686.0, 19466.0], [685.0, 18983.0], [684.0, 19097.0], [683.0, 19346.0], [682.0, 19414.0], [681.0, 19271.0], [680.0, 19215.0], [695.0, 19419.0], [693.0, 19309.0], [729.0, 18603.0], [734.0, 17931.0], [735.0, 18426.0], [723.0, 18886.4], [722.0, 18811.0], [725.0, 18390.0], [724.0, 19097.0], [733.0, 18596.0], [732.0, 18167.0], [731.0, 18814.0], [728.0, 19107.0], [711.0, 18989.0], [710.0, 19062.0], [709.0, 18595.0], [708.0, 18432.0], [707.0, 18496.0], [706.0, 18853.0], [705.0, 18923.5], [717.0, 18750.0], [713.0, 18309.0], [712.0, 19121.0], [727.0, 19028.0], [726.0, 18670.0], [761.0, 18097.0], [766.0, 17674.0], [767.0, 17248.0], [752.0, 18229.0], [754.0, 18143.0], [753.0, 18242.0], [756.0, 18280.0], [755.0, 17747.0], [765.0, 17807.0], [763.0, 17261.0], [762.0, 18190.0], [760.0, 17774.5], [743.0, 18241.0], [742.0, 18305.0], [741.0, 18618.0], [740.0, 18266.0], [738.0, 18371.0], [737.0, 18394.0], [736.0, 18042.0], [751.0, 18096.5], [749.0, 18278.0], [748.0, 18187.0], [747.0, 18225.0], [746.0, 18389.0], [745.0, 18244.0], [744.0, 18270.0], [759.0, 17543.0], [757.0, 18051.0], [793.0, 14159.0], [797.0, 13594.0], [798.0, 13342.0], [784.0, 15194.0], [786.0, 14839.0], [785.0, 14957.0], [788.0, 14931.0], [787.0, 14803.0], [796.0, 13298.0], [795.0, 13583.0], [794.0, 13924.0], [792.0, 14198.5], [775.0, 16630.0], [774.0, 17376.0], [773.0, 17116.0], [772.0, 17071.0], [771.0, 17419.0], [770.0, 17771.0], [769.0, 17189.0], [768.0, 17148.0], [783.0, 14859.0], [782.0, 15481.0], [781.0, 15935.0], [780.0, 16086.0], [779.0, 16066.0], [778.0, 16435.0], [776.0, 17002.0], [790.0, 14274.0], [789.0, 15007.0], [820.0, 11299.333333333334], [831.0, 9744.25], [827.0, 9537.0], [826.0, 9923.5], [824.0, 10181.0], [815.0, 11605.0], [805.0, 13334.75], [801.0, 13386.333333333334], [807.0, 13025.0], [806.0, 12632.0], [814.0, 12318.0], [813.0, 11887.0], [812.0, 12266.0], [811.0, 12266.5], [809.0, 12423.0], [808.0, 12297.0], [823.0, 9773.0], [822.0, 10506.0], [821.0, 10545.0], [817.0, 12104.0], [816.0, 11563.0], [862.0, 8232.0], [863.0, 8518.0], [860.0, 8904.0], [859.0, 8459.0], [858.0, 8959.5], [856.0, 9173.0], [847.0, 8773.0], [833.0, 9610.0], [835.0, 9742.0], [834.0, 9695.0], [838.0, 9544.0], [836.0, 9437.0], [846.0, 8954.0], [845.0, 8829.0], [844.0, 8950.0], [843.0, 9505.0], [855.0, 8817.0], [854.0, 9288.5], [852.0, 9318.75], [848.0, 9277.0], [890.0, 6648.6], [882.0, 7216.0], [895.0, 6314.0], [893.0, 6152.0], [891.0, 6684.0], [874.0, 7404.0], [864.0, 8364.0], [867.0, 8151.0], [866.0, 8371.0], [869.0, 7490.0], [868.0, 8191.0], [871.0, 7151.0], [870.0, 7458.0], [873.0, 7410.0], [872.0, 7082.0], [885.0, 7018.0], [884.0, 6789.0], [883.0, 6669.0], [881.0, 6843.0], [880.0, 7326.333333333333], [921.0, 5185.0], [926.0, 4524.0], [927.0, 4832.0], [914.0, 5265.333333333333], [917.0, 5055.0], [916.0, 5605.5], [925.0, 5088.0], [924.0, 5029.0], [923.0, 4964.5], [920.0, 4966.0], [903.0, 5802.0], [902.0, 5859.0], [901.0, 6396.0], [900.0, 6088.0], [899.0, 6485.0], [898.0, 6454.333333333333], [911.0, 5418.0], [910.0, 5894.0], [909.0, 5436.0], [908.0, 5979.0], [907.0, 6170.0], [906.0, 6102.0], [905.0, 6168.5], [919.0, 5127.0], [918.0, 5419.0], [952.0, 2940.0], [956.0, 2868.0], [959.0, 3104.0], [946.0, 2953.0], [944.0, 2784.0], [948.0, 2791.0], [947.0, 2814.0], [958.0, 2629.0], [957.0, 2712.0], [955.0, 2778.0], [954.0, 2892.0], [953.0, 2429.0], [943.0, 3088.0], [929.0, 4964.0], [928.0, 4441.0], [931.0, 4704.0], [930.0, 4715.0], [933.0, 4667.0], [932.0, 4648.0], [935.0, 3945.0], [934.0, 4477.0], [942.0, 3126.0], [941.0, 2866.0], [940.0, 2940.0], [939.0, 3043.0], [938.0, 2828.0], [936.0, 3276.0], [951.0, 2662.0], [950.0, 3045.0], [985.0, 2353.0], [989.0, 1883.0], [991.0, 1886.0], [976.0, 2071.0], [988.0, 1719.0], [987.0, 2162.0], [986.0, 1810.0], [984.0, 2184.0], [967.0, 1827.0], [966.0, 2136.0], [965.0, 1880.0], [964.0, 2324.0], [963.0, 2047.3333333333333], [960.0, 2638.0], [975.0, 2218.0], [974.0, 2463.0], [973.0, 2394.0], [972.0, 2414.0], [971.0, 1876.0], [970.0, 2253.0], [969.0, 2413.0], [968.0, 1816.0], [983.0, 2098.5], [981.0, 2053.0], [980.0, 1735.0], [978.0, 2010.5], [1000.0, 1594.5], [998.0, 1556.0], [997.0, 1725.0], [996.0, 1388.0], [994.0, 1548.0], [993.0, 1808.0], [1.0, 23023.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[500.9370000000004, 17111.53000000001]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11483.333333333334, "minX": 1.75791174E12, "maxY": 7182427.733333333, "series": [{"data": [[1.75791174E12, 11483.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75791174E12, 7182427.733333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791174E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 17111.53000000001, "minX": 1.75791174E12, "maxY": 17111.53000000001, "series": [{"data": [[1.75791174E12, 17111.53000000001]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791174E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 17111.482999999982, "minX": 1.75791174E12, "maxY": 17111.482999999982, "series": [{"data": [[1.75791174E12, 17111.482999999982]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791174E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3483.981999999998, "minX": 1.75791174E12, "maxY": 3483.981999999998, "series": [{"data": [[1.75791174E12, 3483.981999999998]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791174E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1388.0, "minX": 1.75791174E12, "maxY": 23071.0, "series": [{"data": [[1.75791174E12, 23071.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75791174E12, 20718.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75791174E12, 21081.93]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75791174E12, 20837.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75791174E12, 1388.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75791174E12, 19886.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791174E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2288.5, "minX": 4.0, "maxY": 20349.0, "series": [{"data": [[32.0, 9406.0], [513.0, 20349.0], [9.0, 2332.0], [10.0, 12185.0], [185.0, 19556.0], [48.0, 2288.5], [12.0, 8232.0], [13.0, 7216.0], [14.0, 17318.5], [56.0, 18427.5], [15.0, 13348.0], [4.0, 11152.5], [19.0, 5184.0], [5.0, 12672.5], [6.0, 15471.0], [25.0, 6396.0], [7.0, 13657.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 513.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2288.5, "minX": 4.0, "maxY": 20349.0, "series": [{"data": [[32.0, 9406.0], [513.0, 20349.0], [9.0, 2332.0], [10.0, 12185.0], [185.0, 19556.0], [48.0, 2288.5], [12.0, 8232.0], [13.0, 7216.0], [14.0, 17318.5], [56.0, 18427.5], [15.0, 13348.0], [4.0, 11152.5], [19.0, 5184.0], [5.0, 12672.5], [6.0, 15470.5], [25.0, 6396.0], [7.0, 13657.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 513.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791174E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791174E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791174E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791174E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791174E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791174E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791174E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791174E12, 16.666666666666668]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791174E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791174E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791174E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791174E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

