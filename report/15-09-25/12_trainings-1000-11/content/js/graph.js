/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 185.0, "minX": 0.0, "maxY": 33420.0, "series": [{"data": [[0.0, 185.0], [0.1, 219.0], [0.2, 239.0], [0.3, 239.0], [0.4, 268.0], [0.5, 346.0], [0.6, 352.0], [0.7, 356.0], [0.8, 375.0], [0.9, 376.0], [1.0, 400.0], [1.1, 462.0], [1.2, 507.0], [1.3, 510.0], [1.4, 510.0], [1.5, 545.0], [1.6, 556.0], [1.7, 621.0], [1.8, 632.0], [1.9, 634.0], [2.0, 644.0], [2.1, 648.0], [2.2, 663.0], [2.3, 665.0], [2.4, 666.0], [2.5, 676.0], [2.6, 684.0], [2.7, 694.0], [2.8, 701.0], [2.9, 771.0], [3.0, 789.0], [3.1, 821.0], [3.2, 835.0], [3.3, 836.0], [3.4, 846.0], [3.5, 863.0], [3.6, 871.0], [3.7, 884.0], [3.8, 910.0], [3.9, 927.0], [4.0, 944.0], [4.1, 957.0], [4.2, 972.0], [4.3, 985.0], [4.4, 1019.0], [4.5, 1020.0], [4.6, 1031.0], [4.7, 1060.0], [4.8, 1065.0], [4.9, 1069.0], [5.0, 1078.0], [5.1, 1081.0], [5.2, 1086.0], [5.3, 1090.0], [5.4, 1111.0], [5.5, 1124.0], [5.6, 1172.0], [5.7, 1174.0], [5.8, 1177.0], [5.9, 1225.0], [6.0, 1257.0], [6.1, 1297.0], [6.2, 1336.0], [6.3, 1346.0], [6.4, 1615.0], [6.5, 1644.0], [6.6, 1660.0], [6.7, 1698.0], [6.8, 1727.0], [6.9, 1876.0], [7.0, 1939.0], [7.1, 1952.0], [7.2, 1953.0], [7.3, 2197.0], [7.4, 2233.0], [7.5, 2250.0], [7.6, 2298.0], [7.7, 2391.0], [7.8, 2536.0], [7.9, 2549.0], [8.0, 2668.0], [8.1, 2715.0], [8.2, 2822.0], [8.3, 2968.0], [8.4, 3054.0], [8.5, 3192.0], [8.6, 3663.0], [8.7, 3948.0], [8.8, 4256.0], [8.9, 13564.0], [9.0, 14100.0], [9.1, 15456.0], [9.2, 30022.0], [9.3, 30022.0], [9.4, 30022.0], [9.5, 30023.0], [9.6, 30023.0], [9.7, 30023.0], [9.8, 30023.0], [9.9, 30023.0], [10.0, 30025.0], [10.1, 30025.0], [10.2, 30025.0], [10.3, 30025.0], [10.4, 30025.0], [10.5, 30025.0], [10.6, 30025.0], [10.7, 30027.0], [10.8, 30027.0], [10.9, 30027.0], [11.0, 30027.0], [11.1, 30028.0], [11.2, 30029.0], [11.3, 30030.0], [11.4, 30030.0], [11.5, 30031.0], [11.6, 30031.0], [11.7, 30031.0], [11.8, 30032.0], [11.9, 30033.0], [12.0, 30034.0], [12.1, 30035.0], [12.2, 30036.0], [12.3, 30037.0], [12.4, 30038.0], [12.5, 30038.0], [12.6, 30039.0], [12.7, 30040.0], [12.8, 30041.0], [12.9, 30041.0], [13.0, 30041.0], [13.1, 30041.0], [13.2, 30043.0], [13.3, 30043.0], [13.4, 30046.0], [13.5, 30053.0], [13.6, 30056.0], [13.7, 30079.0], [13.8, 30092.0], [13.9, 30824.0], [14.0, 30832.0], [14.1, 30844.0], [14.2, 30844.0], [14.3, 30849.0], [14.4, 30851.0], [14.5, 30861.0], [14.6, 30892.0], [14.7, 30919.0], [14.8, 30926.0], [14.9, 30955.0], [15.0, 30961.0], [15.1, 30967.0], [15.2, 30968.0], [15.3, 30968.0], [15.4, 30974.0], [15.5, 30990.0], [15.6, 30994.0], [15.7, 30997.0], [15.8, 31008.0], [15.9, 31022.0], [16.0, 31026.0], [16.1, 31030.0], [16.2, 31032.0], [16.3, 31036.0], [16.4, 31066.0], [16.5, 31067.0], [16.6, 31073.0], [16.7, 31079.0], [16.8, 31089.0], [16.9, 31096.0], [17.0, 31104.0], [17.1, 31117.0], [17.2, 31124.0], [17.3, 31127.0], [17.4, 31140.0], [17.5, 31160.0], [17.6, 31163.0], [17.7, 31165.0], [17.8, 31170.0], [17.9, 31181.0], [18.0, 31185.0], [18.1, 31190.0], [18.2, 31223.0], [18.3, 31224.0], [18.4, 31224.0], [18.5, 31233.0], [18.6, 31244.0], [18.7, 31251.0], [18.8, 31252.0], [18.9, 31258.0], [19.0, 31260.0], [19.1, 31271.0], [19.2, 31274.0], [19.3, 31292.0], [19.4, 31296.0], [19.5, 31296.0], [19.6, 31298.0], [19.7, 31298.0], [19.8, 31326.0], [19.9, 31350.0], [20.0, 31357.0], [20.1, 31373.0], [20.2, 31385.0], [20.3, 31390.0], [20.4, 31392.0], [20.5, 31395.0], [20.6, 31408.0], [20.7, 31419.0], [20.8, 31422.0], [20.9, 31433.0], [21.0, 31433.0], [21.1, 31437.0], [21.2, 31442.0], [21.3, 31445.0], [21.4, 31449.0], [21.5, 31453.0], [21.6, 31457.0], [21.7, 31458.0], [21.8, 31458.0], [21.9, 31465.0], [22.0, 31472.0], [22.1, 31472.0], [22.2, 31475.0], [22.3, 31476.0], [22.4, 31480.0], [22.5, 31481.0], [22.6, 31483.0], [22.7, 31484.0], [22.8, 31489.0], [22.9, 31491.0], [23.0, 31492.0], [23.1, 31492.0], [23.2, 31492.0], [23.3, 31493.0], [23.4, 31493.0], [23.5, 31494.0], [23.6, 31496.0], [23.7, 31507.0], [23.8, 31509.0], [23.9, 31510.0], [24.0, 31511.0], [24.1, 31512.0], [24.2, 31518.0], [24.3, 31520.0], [24.4, 31520.0], [24.5, 31523.0], [24.6, 31525.0], [24.7, 31525.0], [24.8, 31528.0], [24.9, 31531.0], [25.0, 31534.0], [25.1, 31539.0], [25.2, 31543.0], [25.3, 31552.0], [25.4, 31552.0], [25.5, 31553.0], [25.6, 31556.0], [25.7, 31559.0], [25.8, 31567.0], [25.9, 31568.0], [26.0, 31578.0], [26.1, 31583.0], [26.2, 31590.0], [26.3, 31593.0], [26.4, 31593.0], [26.5, 31599.0], [26.6, 31600.0], [26.7, 31601.0], [26.8, 31603.0], [26.9, 31606.0], [27.0, 31608.0], [27.1, 31609.0], [27.2, 31611.0], [27.3, 31612.0], [27.4, 31631.0], [27.5, 31632.0], [27.6, 31634.0], [27.7, 31637.0], [27.8, 31645.0], [27.9, 31654.0], [28.0, 31656.0], [28.1, 31657.0], [28.2, 31660.0], [28.3, 31665.0], [28.4, 31668.0], [28.5, 31673.0], [28.6, 31675.0], [28.7, 31680.0], [28.8, 31687.0], [28.9, 31689.0], [29.0, 31691.0], [29.1, 31697.0], [29.2, 31698.0], [29.3, 31704.0], [29.4, 31705.0], [29.5, 31705.0], [29.6, 31705.0], [29.7, 31712.0], [29.8, 31713.0], [29.9, 31717.0], [30.0, 31718.0], [30.1, 31718.0], [30.2, 31719.0], [30.3, 31721.0], [30.4, 31723.0], [30.5, 31725.0], [30.6, 31727.0], [30.7, 31728.0], [30.8, 31734.0], [30.9, 31736.0], [31.0, 31742.0], [31.1, 31746.0], [31.2, 31750.0], [31.3, 31758.0], [31.4, 31759.0], [31.5, 31762.0], [31.6, 31763.0], [31.7, 31764.0], [31.8, 31764.0], [31.9, 31766.0], [32.0, 31768.0], [32.1, 31769.0], [32.2, 31771.0], [32.3, 31774.0], [32.4, 31775.0], [32.5, 31783.0], [32.6, 31784.0], [32.7, 31786.0], [32.8, 31790.0], [32.9, 31790.0], [33.0, 31799.0], [33.1, 31800.0], [33.2, 31803.0], [33.3, 31806.0], [33.4, 31811.0], [33.5, 31811.0], [33.6, 31815.0], [33.7, 31818.0], [33.8, 31821.0], [33.9, 31827.0], [34.0, 31827.0], [34.1, 31829.0], [34.2, 31840.0], [34.3, 31841.0], [34.4, 31842.0], [34.5, 31843.0], [34.6, 31847.0], [34.7, 31848.0], [34.8, 31856.0], [34.9, 31865.0], [35.0, 31866.0], [35.1, 31873.0], [35.2, 31873.0], [35.3, 31878.0], [35.4, 31879.0], [35.5, 31887.0], [35.6, 31894.0], [35.7, 31898.0], [35.8, 31901.0], [35.9, 31902.0], [36.0, 31903.0], [36.1, 31905.0], [36.2, 31906.0], [36.3, 31910.0], [36.4, 31914.0], [36.5, 31924.0], [36.6, 31929.0], [36.7, 31930.0], [36.8, 31956.0], [36.9, 31956.0], [37.0, 31958.0], [37.1, 31958.0], [37.2, 31965.0], [37.3, 31967.0], [37.4, 31967.0], [37.5, 31968.0], [37.6, 31969.0], [37.7, 31972.0], [37.8, 31984.0], [37.9, 31985.0], [38.0, 31988.0], [38.1, 31991.0], [38.2, 31991.0], [38.3, 32006.0], [38.4, 32015.0], [38.5, 32017.0], [38.6, 32018.0], [38.7, 32020.0], [38.8, 32022.0], [38.9, 32024.0], [39.0, 32027.0], [39.1, 32031.0], [39.2, 32032.0], [39.3, 32032.0], [39.4, 32041.0], [39.5, 32042.0], [39.6, 32045.0], [39.7, 32051.0], [39.8, 32054.0], [39.9, 32055.0], [40.0, 32056.0], [40.1, 32059.0], [40.2, 32062.0], [40.3, 32063.0], [40.4, 32067.0], [40.5, 32074.0], [40.6, 32075.0], [40.7, 32079.0], [40.8, 32081.0], [40.9, 32083.0], [41.0, 32087.0], [41.1, 32089.0], [41.2, 32090.0], [41.3, 32091.0], [41.4, 32092.0], [41.5, 32100.0], [41.6, 32101.0], [41.7, 32103.0], [41.8, 32104.0], [41.9, 32105.0], [42.0, 32105.0], [42.1, 32106.0], [42.2, 32109.0], [42.3, 32111.0], [42.4, 32117.0], [42.5, 32118.0], [42.6, 32118.0], [42.7, 32119.0], [42.8, 32121.0], [42.9, 32121.0], [43.0, 32122.0], [43.1, 32124.0], [43.2, 32125.0], [43.3, 32134.0], [43.4, 32135.0], [43.5, 32135.0], [43.6, 32136.0], [43.7, 32139.0], [43.8, 32140.0], [43.9, 32140.0], [44.0, 32140.0], [44.1, 32142.0], [44.2, 32142.0], [44.3, 32147.0], [44.4, 32148.0], [44.5, 32153.0], [44.6, 32160.0], [44.7, 32161.0], [44.8, 32162.0], [44.9, 32164.0], [45.0, 32172.0], [45.1, 32173.0], [45.2, 32176.0], [45.3, 32178.0], [45.4, 32178.0], [45.5, 32179.0], [45.6, 32179.0], [45.7, 32181.0], [45.8, 32182.0], [45.9, 32184.0], [46.0, 32189.0], [46.1, 32191.0], [46.2, 32193.0], [46.3, 32193.0], [46.4, 32194.0], [46.5, 32195.0], [46.6, 32197.0], [46.7, 32198.0], [46.8, 32199.0], [46.9, 32203.0], [47.0, 32207.0], [47.1, 32216.0], [47.2, 32216.0], [47.3, 32216.0], [47.4, 32218.0], [47.5, 32219.0], [47.6, 32221.0], [47.7, 32222.0], [47.8, 32225.0], [47.9, 32225.0], [48.0, 32226.0], [48.1, 32227.0], [48.2, 32233.0], [48.3, 32234.0], [48.4, 32238.0], [48.5, 32238.0], [48.6, 32238.0], [48.7, 32240.0], [48.8, 32245.0], [48.9, 32247.0], [49.0, 32248.0], [49.1, 32253.0], [49.2, 32256.0], [49.3, 32256.0], [49.4, 32257.0], [49.5, 32260.0], [49.6, 32260.0], [49.7, 32260.0], [49.8, 32261.0], [49.9, 32261.0], [50.0, 32262.0], [50.1, 32265.0], [50.2, 32271.0], [50.3, 32271.0], [50.4, 32273.0], [50.5, 32276.0], [50.6, 32277.0], [50.7, 32278.0], [50.8, 32282.0], [50.9, 32283.0], [51.0, 32285.0], [51.1, 32287.0], [51.2, 32287.0], [51.3, 32292.0], [51.4, 32295.0], [51.5, 32295.0], [51.6, 32297.0], [51.7, 32297.0], [51.8, 32297.0], [51.9, 32304.0], [52.0, 32306.0], [52.1, 32307.0], [52.2, 32307.0], [52.3, 32308.0], [52.4, 32308.0], [52.5, 32313.0], [52.6, 32313.0], [52.7, 32315.0], [52.8, 32315.0], [52.9, 32316.0], [53.0, 32319.0], [53.1, 32320.0], [53.2, 32323.0], [53.3, 32323.0], [53.4, 32325.0], [53.5, 32326.0], [53.6, 32327.0], [53.7, 32329.0], [53.8, 32329.0], [53.9, 32331.0], [54.0, 32331.0], [54.1, 32332.0], [54.2, 32333.0], [54.3, 32333.0], [54.4, 32335.0], [54.5, 32337.0], [54.6, 32338.0], [54.7, 32338.0], [54.8, 32339.0], [54.9, 32346.0], [55.0, 32347.0], [55.1, 32350.0], [55.2, 32352.0], [55.3, 32354.0], [55.4, 32355.0], [55.5, 32355.0], [55.6, 32361.0], [55.7, 32362.0], [55.8, 32369.0], [55.9, 32370.0], [56.0, 32371.0], [56.1, 32372.0], [56.2, 32373.0], [56.3, 32374.0], [56.4, 32375.0], [56.5, 32377.0], [56.6, 32378.0], [56.7, 32379.0], [56.8, 32382.0], [56.9, 32382.0], [57.0, 32383.0], [57.1, 32384.0], [57.2, 32385.0], [57.3, 32385.0], [57.4, 32390.0], [57.5, 32390.0], [57.6, 32390.0], [57.7, 32393.0], [57.8, 32394.0], [57.9, 32396.0], [58.0, 32399.0], [58.1, 32402.0], [58.2, 32403.0], [58.3, 32404.0], [58.4, 32406.0], [58.5, 32408.0], [58.6, 32408.0], [58.7, 32409.0], [58.8, 32412.0], [58.9, 32414.0], [59.0, 32414.0], [59.1, 32417.0], [59.2, 32420.0], [59.3, 32422.0], [59.4, 32425.0], [59.5, 32432.0], [59.6, 32433.0], [59.7, 32433.0], [59.8, 32433.0], [59.9, 32434.0], [60.0, 32435.0], [60.1, 32436.0], [60.2, 32437.0], [60.3, 32437.0], [60.4, 32438.0], [60.5, 32443.0], [60.6, 32444.0], [60.7, 32446.0], [60.8, 32450.0], [60.9, 32452.0], [61.0, 32453.0], [61.1, 32454.0], [61.2, 32455.0], [61.3, 32461.0], [61.4, 32465.0], [61.5, 32468.0], [61.6, 32469.0], [61.7, 32469.0], [61.8, 32469.0], [61.9, 32471.0], [62.0, 32471.0], [62.1, 32473.0], [62.2, 32477.0], [62.3, 32477.0], [62.4, 32479.0], [62.5, 32482.0], [62.6, 32485.0], [62.7, 32485.0], [62.8, 32486.0], [62.9, 32487.0], [63.0, 32487.0], [63.1, 32489.0], [63.2, 32491.0], [63.3, 32497.0], [63.4, 32498.0], [63.5, 32499.0], [63.6, 32501.0], [63.7, 32502.0], [63.8, 32505.0], [63.9, 32508.0], [64.0, 32509.0], [64.1, 32510.0], [64.2, 32512.0], [64.3, 32512.0], [64.4, 32518.0], [64.5, 32519.0], [64.6, 32522.0], [64.7, 32523.0], [64.8, 32526.0], [64.9, 32527.0], [65.0, 32527.0], [65.1, 32528.0], [65.2, 32531.0], [65.3, 32531.0], [65.4, 32532.0], [65.5, 32533.0], [65.6, 32533.0], [65.7, 32536.0], [65.8, 32540.0], [65.9, 32543.0], [66.0, 32543.0], [66.1, 32544.0], [66.2, 32546.0], [66.3, 32546.0], [66.4, 32548.0], [66.5, 32549.0], [66.6, 32550.0], [66.7, 32550.0], [66.8, 32553.0], [66.9, 32554.0], [67.0, 32554.0], [67.1, 32554.0], [67.2, 32555.0], [67.3, 32556.0], [67.4, 32557.0], [67.5, 32557.0], [67.6, 32562.0], [67.7, 32564.0], [67.8, 32566.0], [67.9, 32568.0], [68.0, 32571.0], [68.1, 32578.0], [68.2, 32579.0], [68.3, 32580.0], [68.4, 32582.0], [68.5, 32584.0], [68.6, 32585.0], [68.7, 32585.0], [68.8, 32593.0], [68.9, 32601.0], [69.0, 32603.0], [69.1, 32607.0], [69.2, 32611.0], [69.3, 32612.0], [69.4, 32613.0], [69.5, 32615.0], [69.6, 32617.0], [69.7, 32617.0], [69.8, 32619.0], [69.9, 32630.0], [70.0, 32635.0], [70.1, 32637.0], [70.2, 32642.0], [70.3, 32644.0], [70.4, 32647.0], [70.5, 32650.0], [70.6, 32656.0], [70.7, 32657.0], [70.8, 32658.0], [70.9, 32659.0], [71.0, 32662.0], [71.1, 32663.0], [71.2, 32664.0], [71.3, 32664.0], [71.4, 32666.0], [71.5, 32666.0], [71.6, 32668.0], [71.7, 32669.0], [71.8, 32669.0], [71.9, 32671.0], [72.0, 32677.0], [72.1, 32677.0], [72.2, 32682.0], [72.3, 32683.0], [72.4, 32683.0], [72.5, 32685.0], [72.6, 32690.0], [72.7, 32692.0], [72.8, 32693.0], [72.9, 32695.0], [73.0, 32701.0], [73.1, 32704.0], [73.2, 32706.0], [73.3, 32706.0], [73.4, 32709.0], [73.5, 32710.0], [73.6, 32715.0], [73.7, 32716.0], [73.8, 32717.0], [73.9, 32719.0], [74.0, 32719.0], [74.1, 32719.0], [74.2, 32719.0], [74.3, 32723.0], [74.4, 32730.0], [74.5, 32731.0], [74.6, 32732.0], [74.7, 32734.0], [74.8, 32734.0], [74.9, 32734.0], [75.0, 32736.0], [75.1, 32737.0], [75.2, 32739.0], [75.3, 32744.0], [75.4, 32745.0], [75.5, 32746.0], [75.6, 32747.0], [75.7, 32749.0], [75.8, 32749.0], [75.9, 32750.0], [76.0, 32753.0], [76.1, 32754.0], [76.2, 32754.0], [76.3, 32760.0], [76.4, 32764.0], [76.5, 32765.0], [76.6, 32767.0], [76.7, 32767.0], [76.8, 32771.0], [76.9, 32774.0], [77.0, 32774.0], [77.1, 32774.0], [77.2, 32781.0], [77.3, 32783.0], [77.4, 32784.0], [77.5, 32788.0], [77.6, 32793.0], [77.7, 32793.0], [77.8, 32794.0], [77.9, 32796.0], [78.0, 32800.0], [78.1, 32802.0], [78.2, 32803.0], [78.3, 32806.0], [78.4, 32810.0], [78.5, 32812.0], [78.6, 32815.0], [78.7, 32817.0], [78.8, 32819.0], [78.9, 32819.0], [79.0, 32820.0], [79.1, 32824.0], [79.2, 32824.0], [79.3, 32825.0], [79.4, 32825.0], [79.5, 32828.0], [79.6, 32828.0], [79.7, 32829.0], [79.8, 32830.0], [79.9, 32832.0], [80.0, 32833.0], [80.1, 32834.0], [80.2, 32835.0], [80.3, 32845.0], [80.4, 32846.0], [80.5, 32846.0], [80.6, 32847.0], [80.7, 32847.0], [80.8, 32850.0], [80.9, 32852.0], [81.0, 32853.0], [81.1, 32853.0], [81.2, 32855.0], [81.3, 32857.0], [81.4, 32859.0], [81.5, 32863.0], [81.6, 32864.0], [81.7, 32865.0], [81.8, 32868.0], [81.9, 32869.0], [82.0, 32870.0], [82.1, 32870.0], [82.2, 32872.0], [82.3, 32872.0], [82.4, 32872.0], [82.5, 32876.0], [82.6, 32877.0], [82.7, 32877.0], [82.8, 32878.0], [82.9, 32879.0], [83.0, 32882.0], [83.1, 32887.0], [83.2, 32888.0], [83.3, 32890.0], [83.4, 32892.0], [83.5, 32895.0], [83.6, 32895.0], [83.7, 32897.0], [83.8, 32898.0], [83.9, 32903.0], [84.0, 32911.0], [84.1, 32911.0], [84.2, 32912.0], [84.3, 32913.0], [84.4, 32914.0], [84.5, 32916.0], [84.6, 32920.0], [84.7, 32922.0], [84.8, 32927.0], [84.9, 32932.0], [85.0, 32934.0], [85.1, 32934.0], [85.2, 32935.0], [85.3, 32935.0], [85.4, 32937.0], [85.5, 32940.0], [85.6, 32941.0], [85.7, 32941.0], [85.8, 32944.0], [85.9, 32946.0], [86.0, 32954.0], [86.1, 32955.0], [86.2, 32962.0], [86.3, 32965.0], [86.4, 32966.0], [86.5, 32971.0], [86.6, 32972.0], [86.7, 32973.0], [86.8, 32974.0], [86.9, 32975.0], [87.0, 32975.0], [87.1, 32977.0], [87.2, 32978.0], [87.3, 32980.0], [87.4, 32982.0], [87.5, 32982.0], [87.6, 32983.0], [87.7, 32987.0], [87.8, 32988.0], [87.9, 32989.0], [88.0, 32989.0], [88.1, 32992.0], [88.2, 32994.0], [88.3, 32999.0], [88.4, 33000.0], [88.5, 33003.0], [88.6, 33008.0], [88.7, 33013.0], [88.8, 33023.0], [88.9, 33024.0], [89.0, 33025.0], [89.1, 33026.0], [89.2, 33027.0], [89.3, 33033.0], [89.4, 33033.0], [89.5, 33034.0], [89.6, 33035.0], [89.7, 33035.0], [89.8, 33037.0], [89.9, 33041.0], [90.0, 33042.0], [90.1, 33044.0], [90.2, 33047.0], [90.3, 33049.0], [90.4, 33049.0], [90.5, 33051.0], [90.6, 33054.0], [90.7, 33057.0], [90.8, 33060.0], [90.9, 33062.0], [91.0, 33063.0], [91.1, 33063.0], [91.2, 33068.0], [91.3, 33090.0], [91.4, 33090.0], [91.5, 33092.0], [91.6, 33094.0], [91.7, 33103.0], [91.8, 33103.0], [91.9, 33108.0], [92.0, 33109.0], [92.1, 33117.0], [92.2, 33118.0], [92.3, 33119.0], [92.4, 33122.0], [92.5, 33125.0], [92.6, 33128.0], [92.7, 33137.0], [92.8, 33141.0], [92.9, 33142.0], [93.0, 33145.0], [93.1, 33151.0], [93.2, 33154.0], [93.3, 33168.0], [93.4, 33170.0], [93.5, 33175.0], [93.6, 33175.0], [93.7, 33175.0], [93.8, 33179.0], [93.9, 33180.0], [94.0, 33184.0], [94.1, 33185.0], [94.2, 33192.0], [94.3, 33194.0], [94.4, 33206.0], [94.5, 33206.0], [94.6, 33214.0], [94.7, 33217.0], [94.8, 33222.0], [94.9, 33225.0], [95.0, 33226.0], [95.1, 33234.0], [95.2, 33240.0], [95.3, 33245.0], [95.4, 33254.0], [95.5, 33262.0], [95.6, 33269.0], [95.7, 33271.0], [95.8, 33274.0], [95.9, 33278.0], [96.0, 33280.0], [96.1, 33284.0], [96.2, 33285.0], [96.3, 33289.0], [96.4, 33295.0], [96.5, 33305.0], [96.6, 33308.0], [96.7, 33313.0], [96.8, 33314.0], [96.9, 33314.0], [97.0, 33316.0], [97.1, 33320.0], [97.2, 33323.0], [97.3, 33324.0], [97.4, 33324.0], [97.5, 33324.0], [97.6, 33330.0], [97.7, 33340.0], [97.8, 33349.0], [97.9, 33354.0], [98.0, 33354.0], [98.1, 33360.0], [98.2, 33363.0], [98.3, 33366.0], [98.4, 33368.0], [98.5, 33370.0], [98.6, 33373.0], [98.7, 33374.0], [98.8, 33376.0], [98.9, 33376.0], [99.0, 33378.0], [99.1, 33378.0], [99.2, 33381.0], [99.3, 33386.0], [99.4, 33388.0], [99.5, 33398.0], [99.6, 33400.0], [99.7, 33404.0], [99.8, 33411.0], [99.9, 33420.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 62.0, "series": [{"data": [[600.0, 11.0], [700.0, 3.0], [800.0, 7.0], [900.0, 6.0], [1000.0, 11.0], [1100.0, 5.0], [1200.0, 3.0], [1300.0, 2.0], [1600.0, 4.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 3.0], [2100.0, 1.0], [2200.0, 3.0], [2300.0, 1.0], [2500.0, 2.0], [2600.0, 1.0], [2800.0, 1.0], [2700.0, 1.0], [2900.0, 1.0], [3000.0, 1.0], [3100.0, 1.0], [3600.0, 1.0], [3900.0, 1.0], [4200.0, 1.0], [13500.0, 1.0], [14100.0, 1.0], [15400.0, 1.0], [100.0, 1.0], [30000.0, 47.0], [30800.0, 8.0], [31000.0, 12.0], [31200.0, 15.0], [31100.0, 12.0], [31300.0, 8.0], [31400.0, 31.0], [30900.0, 11.0], [31500.0, 29.0], [31600.0, 27.0], [31700.0, 38.0], [31800.0, 27.0], [31900.0, 25.0], [32000.0, 32.0], [32100.0, 54.0], [32200.0, 50.0], [32300.0, 62.0], [32400.0, 55.0], [32500.0, 53.0], [32600.0, 41.0], [32700.0, 50.0], [32800.0, 60.0], [32900.0, 45.0], [33000.0, 33.0], [33100.0, 27.0], [33200.0, 21.0], [33300.0, 31.0], [33400.0, 4.0], [200.0, 4.0], [300.0, 5.0], [400.0, 2.0], [500.0, 4.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 33400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 3.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1000.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 456.3743139407245, "minX": 1.75792602E12, "maxY": 925.9101123595505, "series": [{"data": [[1.75792608E12, 456.3743139407245], [1.75792602E12, 925.9101123595505]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792608E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 723.1428571428572, "minX": 1.0, "maxY": 33420.0, "series": [{"data": [[3.0, 33037.0], [4.0, 32794.0], [5.0, 33035.0], [6.0, 33033.0], [7.0, 33192.0], [9.0, 33405.5], [10.0, 33027.0], [11.0, 33023.0], [12.0, 33404.0], [13.0, 32937.0], [14.0, 33398.0], [15.0, 33388.0], [17.0, 33199.5], [18.0, 33381.0], [19.0, 33008.0], [20.0, 33373.0], [22.0, 33378.0], [23.0, 33374.0], [24.0, 32999.0], [25.0, 33368.0], [27.0, 33376.0], [28.0, 33316.0], [29.0, 33366.0], [33.0, 33354.0], [32.0, 33326.0], [35.0, 33363.0], [34.0, 33349.0], [36.0, 33360.0], [39.0, 32975.0], [38.0, 32979.0], [41.0, 33313.0], [40.0, 32975.0], [42.0, 32973.0], [45.0, 32701.0], [44.0, 32839.0], [47.0, 33196.0], [49.0, 33340.0], [48.0, 33060.0], [51.0, 33324.0], [50.0, 32955.0], [52.0, 33274.0], [55.0, 33320.0], [54.0, 33323.5], [56.0, 33245.0], [59.0, 33317.333333333336], [61.0, 33068.0], [60.0, 33308.0], [63.0, 33305.0], [62.0, 33271.0], [67.0, 33038.5], [65.0, 32944.5], [71.0, 33292.0], [69.0, 33222.0], [68.0, 33262.0], [75.0, 33285.0], [74.0, 33034.0], [73.0, 33151.0], [72.0, 33217.0], [79.0, 33279.0], [77.0, 32922.0], [76.0, 33175.0], [82.0, 33284.0], [81.0, 33175.0], [80.0, 33141.0], [87.0, 32879.0], [86.0, 32870.0], [85.0, 33269.0], [84.0, 32904.0], [91.0, 33206.0], [90.0, 33058.5], [88.0, 32877.0], [95.0, 32868.0], [94.0, 32988.0], [93.0, 32869.0], [92.0, 33234.0], [99.0, 32847.0], [98.0, 32971.0], [97.0, 33226.0], [96.0, 32932.0], [102.0, 33214.0], [101.0, 32859.0], [100.0, 32585.0], [107.0, 33007.0], [105.0, 33027.0], [111.0, 32829.0], [110.0, 32828.0], [109.0, 32830.0], [108.0, 32920.0], [112.0, 32825.0], [117.0, 33057.0], [116.0, 32994.5], [123.0, 33180.0], [122.0, 33011.5], [120.0, 32985.666666666664], [126.0, 32968.0], [135.0, 32987.0], [134.0, 32888.0], [133.0, 33168.0], [132.0, 32833.0], [130.0, 33170.0], [129.0, 32531.0], [128.0, 33039.5], [143.0, 33125.0], [142.0, 32858.0], [141.0, 33154.0], [140.0, 32983.0], [139.0, 32526.0], [138.0, 32911.0], [137.0, 33090.0], [136.0, 32989.0], [151.0, 33142.0], [150.0, 32895.0], [149.0, 32865.0], [148.0, 32847.0], [147.0, 32903.0], [146.0, 32518.0], [145.0, 33118.0], [144.0, 32982.0], [159.0, 32992.0], [158.0, 33128.0], [157.0, 32499.0], [156.0, 32920.5], [154.0, 32899.5], [152.0, 33137.0], [167.0, 33108.0], [166.0, 33122.0], [165.0, 33015.5], [163.0, 32875.0], [162.0, 33119.0], [160.0, 32832.0], [175.0, 33010.666666666664], [172.0, 32979.666666666664], [169.0, 32863.0], [168.0, 32934.0], [183.0, 33094.0], [182.0, 32972.5], [180.0, 32855.0], [179.0, 32857.0], [178.0, 32469.0], [177.0, 33024.0], [176.0, 32853.0], [191.0, 32765.666666666668], [188.0, 32788.0], [187.0, 32845.0], [186.0, 32793.0], [185.0, 32846.0], [184.0, 32800.0], [199.0, 32828.0], [198.0, 32777.5], [196.0, 33047.0], [195.0, 32735.0], [194.0, 33041.0], [192.0, 32892.0], [207.0, 32921.0], [205.0, 32989.0], [204.0, 32748.333333333332], [201.0, 32825.0], [214.0, 33044.0], [213.0, 33049.0], [212.0, 32916.0], [211.0, 33063.0], [210.0, 33054.0], [209.0, 32766.0], [222.0, 32785.0], [219.0, 32766.0], [216.0, 32922.5], [231.0, 32747.0], [229.0, 32994.0], [228.0, 32806.0], [227.0, 32815.0], [226.0, 33003.0], [225.0, 32774.0], [224.0, 32824.5], [239.0, 32739.0], [238.0, 32793.0], [237.0, 32982.0], [236.0, 32734.0], [235.0, 32746.0], [234.0, 32749.0], [233.0, 32941.0], [232.0, 32874.5], [246.0, 32935.0], [245.0, 32764.0], [243.0, 32515.0], [241.0, 32853.5], [254.0, 32719.0], [253.0, 32719.0], [252.0, 32331.0], [251.0, 32733.0], [249.0, 32666.0], [248.0, 32724.0], [269.0, 32934.0], [271.0, 32428.0], [268.0, 32940.0], [267.0, 32754.0], [266.0, 32662.0], [265.0, 32724.0], [264.0, 32944.0], [260.0, 32568.666666666668], [257.0, 32836.333333333336], [275.0, 32544.0], [287.0, 32485.333333333332], [284.0, 32488.0], [282.0, 32297.0], [281.0, 32469.0], [280.0, 32297.0], [279.0, 32122.666666666668], [276.0, 32306.0], [274.0, 32546.0], [273.0, 32935.0], [272.0, 32603.0], [302.0, 32607.0], [303.0, 32505.0], [301.0, 32172.5], [299.0, 32508.0], [298.0, 32178.0], [297.0, 32712.0], [295.0, 32212.0], [292.0, 32236.0], [290.0, 32414.333333333332], [306.0, 32617.0], [318.0, 32180.5], [319.0, 32140.0], [317.0, 32819.0], [305.0, 32164.0], [304.0, 32240.0], [315.0, 32140.0], [314.0, 32362.0], [311.0, 32872.0], [310.0, 32153.0], [309.0, 32550.0], [308.0, 32209.5], [323.0, 32612.0], [331.0, 32523.0], [329.0, 32199.0], [328.0, 32852.0], [327.0, 32275.0], [325.0, 32121.0], [324.0, 32580.0], [322.0, 32477.0], [321.0, 32136.0], [320.0, 32134.0], [350.0, 32407.333333333332], [347.0, 32578.0], [346.0, 32447.0], [343.0, 32413.0], [341.0, 32327.5], [339.0, 32556.0], [338.0, 32114.5], [336.0, 32332.8], [365.0, 32382.0], [366.0, 32176.0], [364.0, 32178.0], [363.0, 32536.0], [362.0, 32375.0], [361.0, 32278.5], [359.0, 32328.333333333332], [356.0, 32543.0], [355.0, 32484.5], [353.0, 32390.0], [352.0, 32540.5], [382.0, 32497.0], [383.0, 32719.0], [381.0, 32123.5], [377.0, 32502.0], [376.0, 32510.5], [374.0, 32753.0], [373.0, 32412.5], [372.0, 32313.0], [370.0, 32249.75], [397.0, 32477.0], [398.0, 32287.0], [396.0, 32285.0], [395.0, 32517.666666666668], [392.0, 32236.0], [390.0, 32750.0], [389.0, 32337.0], [388.0, 32572.666666666668], [385.0, 32332.0], [384.0, 32373.0], [413.0, 32443.0], [414.0, 32260.0], [412.0, 32105.0], [402.0, 32227.0], [401.0, 32736.0], [400.0, 32378.5], [411.0, 32731.0], [410.0, 32216.0], [409.0, 32676.5], [407.0, 32278.0], [406.0, 32297.0], [405.0, 32423.666666666668], [431.0, 32619.0], [429.0, 32256.0], [419.0, 32460.0], [417.0, 32476.333333333332], [427.0, 32468.0], [426.0, 32184.0], [425.0, 32716.0], [424.0, 32191.0], [423.0, 32706.0], [422.0, 32195.0], [421.0, 32286.0], [435.0, 32469.0], [446.0, 32671.0], [445.0, 32282.333333333332], [442.0, 32572.0], [439.0, 32406.0], [438.0, 32682.0], [437.0, 32433.0], [436.0, 32692.0], [434.0, 32650.0], [433.0, 32593.0], [432.0, 32571.0], [462.0, 32557.0], [463.0, 32408.0], [461.0, 32420.0], [460.0, 32446.0], [459.0, 32657.0], [458.0, 32435.0], [457.0, 32662.0], [455.0, 32385.0], [448.0, 32567.5], [451.0, 32663.5], [449.0, 32390.0], [454.0, 32615.0], [453.0, 32659.0], [452.0, 32562.0], [477.0, 32471.0], [475.0, 32617.0], [474.0, 32100.0], [473.0, 32478.0], [470.0, 32402.0], [469.0, 32508.0], [466.0, 32600.0], [464.0, 32644.0], [494.0, 32135.0], [495.0, 32522.0], [493.0, 32354.0], [492.0, 32582.0], [491.0, 32161.0], [490.0, 32540.0], [489.0, 32193.0], [488.0, 32487.0], [487.0, 32470.0], [481.0, 32383.0], [480.0, 32353.666666666668], [483.0, 32532.0], [482.0, 32601.0], [485.0, 32501.0], [484.0, 32528.0], [509.0, 32546.0], [510.0, 32554.0], [508.0, 32109.0], [507.0, 31930.0], [506.0, 32315.0], [504.0, 32549.0], [502.0, 32512.0], [501.0, 32521.5], [499.0, 32557.0], [498.0, 32335.0], [497.0, 32571.5], [542.0, 31821.0], [532.0, 32409.0], [543.0, 32455.0], [529.0, 32271.0], [528.0, 32056.5], [531.0, 32444.0], [530.0, 32487.0], [541.0, 32248.0], [539.0, 32257.0], [537.0, 32471.0], [517.0, 32338.0], [514.0, 32144.0], [512.0, 32212.0], [526.0, 32509.0], [525.0, 32222.0], [524.0, 32074.0], [523.0, 32434.0], [522.0, 32307.0], [520.0, 32261.333333333332], [535.0, 32486.0], [534.0, 32182.0], [533.0, 32234.0], [569.0, 32382.0], [573.0, 32371.0], [575.0, 32167.0], [561.0, 32404.0], [560.0, 32360.0], [563.0, 32313.0], [562.0, 32319.0], [572.0, 31924.0], [571.0, 32125.0], [570.0, 32122.0], [568.0, 32377.0], [550.0, 32425.0], [549.0, 32432.0], [548.0, 32170.0], [546.0, 32436.5], [544.0, 32438.0], [558.0, 31958.0], [557.0, 31949.0], [555.0, 31958.0], [554.0, 31965.0], [553.0, 31969.0], [552.0, 32278.0], [567.0, 32379.0], [566.0, 32222.0], [600.0, 32059.0], [606.0, 32265.0], [607.0, 32056.0], [592.0, 32333.0], [605.0, 31989.0], [603.0, 32272.5], [601.0, 32326.0], [590.0, 31719.0], [578.0, 32345.0], [576.0, 32221.0], [580.0, 31843.0], [579.0, 32372.0], [583.0, 32132.0], [581.0, 32362.0], [589.0, 32345.5], [587.0, 32271.0], [586.0, 31902.0], [585.0, 31906.0], [584.0, 31903.0], [598.0, 31704.0], [597.0, 32286.0], [595.0, 32178.5], [593.0, 32329.0], [633.0, 31790.0], [638.0, 31790.0], [639.0, 31967.0], [625.0, 31764.0], [628.0, 31758.0], [626.0, 32256.0], [637.0, 31848.5], [635.0, 32106.0], [634.0, 31786.0], [632.0, 31988.0], [614.0, 31766.0], [613.0, 32253.0], [612.0, 31847.0], [611.0, 32287.0], [610.0, 32248.0], [623.0, 31760.0], [621.0, 31806.0], [620.0, 31771.0], [619.0, 31841.0], [618.0, 31821.0], [616.0, 31802.0], [631.0, 32011.5], [629.0, 31991.0], [659.0, 32160.0], [669.0, 32044.666666666668], [670.0, 31657.0], [658.0, 31705.0], [657.0, 31723.0], [666.0, 31656.0], [665.0, 32067.0], [664.0, 31900.5], [647.0, 31956.0], [646.0, 31928.5], [644.0, 31785.0], [642.0, 31727.0], [641.0, 31994.5], [655.0, 31761.5], [653.0, 31947.0], [651.0, 31750.0], [650.0, 31898.666666666668], [662.0, 31603.0], [661.0, 31608.0], [660.0, 31680.0], [702.0, 31437.0], [703.0, 32054.0], [689.0, 31634.0], [688.0, 31706.25], [691.0, 31465.0], [690.0, 32032.0], [701.0, 31612.5], [699.0, 32055.0], [698.0, 31984.0], [697.0, 31606.0], [696.0, 31453.5], [679.0, 31753.5], [677.0, 31492.0], [675.0, 31668.0], [674.0, 31654.0], [673.0, 31970.0], [684.0, 31476.0], [683.0, 31840.0], [682.0, 31481.0], [681.0, 31769.0], [694.0, 32063.0], [693.0, 31738.5], [729.0, 31887.0], [733.0, 31531.0], [734.0, 31873.0], [720.0, 31767.0], [723.0, 31480.0], [722.0, 31646.5], [725.0, 31567.0], [724.0, 31520.0], [732.0, 31552.0], [731.0, 31723.0], [730.0, 31509.0], [728.0, 31511.0], [711.0, 31578.0], [710.0, 31730.5], [708.0, 31583.0], [707.0, 31991.0], [706.0, 31599.0], [705.0, 31453.0], [704.0, 32041.0], [718.0, 31910.0], [717.0, 32022.0], [716.0, 31704.0], [713.0, 32018.0], [712.0, 32024.0], [727.0, 31660.0], [726.0, 31543.0], [766.0, 30700.0], [767.0, 31271.0], [752.0, 30972.0], [755.0, 30037.0], [754.0, 30841.5], [757.0, 31433.0], [756.0, 31901.0], [764.0, 31856.0], [763.0, 30028.0], [762.0, 31818.0], [761.0, 31865.0], [760.0, 31769.0], [741.0, 31666.0], [738.0, 31972.0], [737.0, 31489.0], [736.0, 31720.5], [750.0, 30040.5], [748.0, 30043.0], [747.0, 30079.0], [746.0, 30053.0], [745.0, 31231.5], [759.0, 31829.0], [758.0, 30022.0], [793.0, 31705.0], [798.0, 30022.0], [799.0, 31252.0], [784.0, 31233.0], [786.0, 30030.0], [785.0, 31665.0], [788.0, 30027.0], [787.0, 30027.0], [797.0, 30868.0], [795.0, 30029.0], [794.0, 31224.0], [792.0, 31480.0], [775.0, 31194.666666666668], [772.0, 30788.5], [768.0, 31866.0], [783.0, 31811.0], [782.0, 31811.0], [781.0, 31593.0], [780.0, 30025.0], [779.0, 30022.5], [777.0, 31244.0], [776.0, 31350.0], [790.0, 31326.0], [789.0, 31718.0], [825.0, 30025.0], [830.0, 30025.0], [831.0, 31611.0], [817.0, 31697.0], [816.0, 31251.0], [819.0, 31590.0], [818.0, 31553.0], [829.0, 31079.0], [828.0, 30812.0], [826.0, 31675.0], [824.0, 31292.0], [806.0, 30033.0], [805.0, 30041.0], [804.0, 31601.0], [803.0, 31742.0], [802.0, 31494.0], [801.0, 31298.0], [800.0, 31296.0], [815.0, 30867.5], [813.0, 30642.5], [811.0, 31390.0], [810.0, 31223.0], [809.0, 31274.0], [808.0, 30585.5], [823.0, 30597.0], [821.0, 30598.5], [862.0, 30967.0], [863.0, 31030.0], [848.0, 30516.5], [861.0, 31510.0], [860.0, 31289.0], [858.0, 30025.0], [857.0, 31233.0], [846.0, 31096.0], [833.0, 31190.0], [832.0, 31089.0], [835.0, 31385.0], [834.0, 30025.0], [838.0, 30575.0], [836.0, 30027.0], [845.0, 31600.0], [844.0, 31610.5], [842.0, 31568.0], [841.0, 31455.333333333332], [855.0, 31031.5], [853.0, 31288.0], [851.0, 31020.0], [849.0, 30034.0], [894.0, 30844.0], [895.0, 30861.0], [883.0, 30538.5], [881.0, 30770.0], [885.0, 30994.0], [884.0, 30955.0], [893.0, 31422.0], [892.0, 31296.0], [891.0, 30041.0], [890.0, 30905.5], [888.0, 30968.0], [870.0, 31184.333333333332], [867.0, 31326.666666666668], [864.0, 31534.0], [879.0, 30046.0], [878.0, 31491.0], [877.0, 31494.5], [875.0, 31520.0], [874.0, 30968.0], [873.0, 31012.0], [887.0, 30926.0], [886.0, 31445.0], [921.0, 1042.375], [926.0, 970.75], [927.0, 1493.0], [913.0, 3948.0], [912.0, 4256.0], [915.0, 2968.0], [914.0, 3192.0], [917.0, 2715.0], [916.0, 3663.0], [925.0, 992.1428571428571], [923.0, 1182.75], [920.0, 1058.111111111111], [903.0, 31124.0], [902.0, 30832.0], [901.0, 31103.0], [899.0, 30847.5], [897.0, 31160.0], [896.0, 30824.0], [911.0, 13564.0], [910.0, 14100.0], [909.0, 15456.0], [908.0, 31032.0], [907.0, 31298.0], [906.0, 30043.0], [905.0, 31117.0], [904.0, 30038.0], [919.0, 1331.25], [918.0, 1422.5], [922.0, 1075.0], [924.0, 2822.0], [931.0, 1136.0], [934.0, 723.1428571428572], [930.0, 994.5], [929.0, 2391.0], [933.0, 1392.0], [932.0, 751.5], [928.0, 1174.5], [938.0, 1086.0], [943.0, 1953.0], [937.0, 1257.0], [945.0, 1346.0], [944.0, 1952.0], [1.0, 33420.0]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}, {"data": [[498.1630000000001, 29401.74200000001]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 945.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 58.05, "minX": 1.75792602E12, "maxY": 31968.766666666666, "series": [{"data": [[1.75792608E12, 31968.766666666666], [1.75792602E12, 661.5666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75792608E12, 58.05], [1.75792602E12, 1722.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792608E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1266.539325842697, "minX": 1.75792602E12, "maxY": 32150.406147091122, "series": [{"data": [[1.75792608E12, 32150.406147091122], [1.75792602E12, 1266.539325842697]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792608E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 47.33260153677274, "minX": 1.75792602E12, "maxY": 1265.573033707865, "series": [{"data": [[1.75792608E12, 47.33260153677274], [1.75792602E12, 1265.573033707865]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792608E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 575.5393258426967, "minX": 1.75792602E12, "maxY": 2200.1635565312836, "series": [{"data": [[1.75792608E12, 2200.1635565312836], [1.75792602E12, 575.5393258426967]], "isOverall": false, "label": "สร้างนัดหมายการอบรม", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792608E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.7976931348623157E308, "minX": 1.7976931348623157E308, "maxY": 4.9E-324, "series": [{"data": [], "isOverall": false, "label": "Max", "isController": false}, {"data": [], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [], "isOverall": false, "label": "Min", "isController": false}, {"data": [], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 4.9E-324, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 835.0, "minX": 1.0, "maxY": 32767.0, "series": [{"data": [[16.0, 1495.0], [4.0, 3080.0], [1.0, 13564.0], [67.0, 31032.0], [10.0, 2393.0], [372.0, 31865.5], [57.0, 835.0], [469.0, 32767.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 469.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 13564.0, "series": [{"data": [[16.0, 1495.0], [4.0, 3080.0], [1.0, 13564.0], [67.0, 0.0], [10.0, 2392.5], [372.0, 0.0], [57.0, 827.0], [469.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 469.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792602E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792602E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792602E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.75792602E12, "maxY": 15.133333333333333, "series": [{"data": [[1.75792608E12, 0.05], [1.75792602E12, 1.4833333333333334]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.75792608E12, 15.133333333333333]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792608E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.4833333333333334, "minX": 1.75792602E12, "maxY": 15.183333333333334, "series": [{"data": [[1.75792608E12, 15.183333333333334], [1.75792602E12, 1.4833333333333334]], "isOverall": false, "label": "สร้างนัดหมายการอบรม-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792608E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.4833333333333334, "minX": 1.75792602E12, "maxY": 15.183333333333334, "series": [{"data": [], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75792608E12, 15.183333333333334], [1.75792602E12, 1.4833333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792608E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

