/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18408.0, "minX": 0.0, "maxY": 33272.0, "series": [{"data": [[0.0, 18408.0], [0.1, 19177.0], [0.2, 19700.0], [0.3, 19700.0], [0.4, 20062.0], [0.5, 20446.0], [0.6, 20746.0], [0.7, 20788.0], [0.8, 21025.0], [0.9, 21108.0], [1.0, 21110.0], [1.1, 21180.0], [1.2, 21213.0], [1.3, 21241.0], [1.4, 21241.0], [1.5, 21243.0], [1.6, 21263.0], [1.7, 21270.0], [1.8, 21275.0], [1.9, 21358.0], [2.0, 21404.0], [2.1, 21476.0], [2.2, 21514.0], [2.3, 21551.0], [2.4, 21575.0], [2.5, 21602.0], [2.6, 21610.0], [2.7, 21619.0], [2.8, 21663.0], [2.9, 21697.0], [3.0, 21720.0], [3.1, 21726.0], [3.2, 21747.0], [3.3, 21799.0], [3.4, 22031.0], [3.5, 22073.0], [3.6, 22085.0], [3.7, 22128.0], [3.8, 22130.0], [3.9, 22139.0], [4.0, 22159.0], [4.1, 22164.0], [4.2, 22172.0], [4.3, 22177.0], [4.4, 22196.0], [4.5, 22212.0], [4.6, 22214.0], [4.7, 22237.0], [4.8, 22240.0], [4.9, 22271.0], [5.0, 22304.0], [5.1, 22314.0], [5.2, 22333.0], [5.3, 22339.0], [5.4, 22344.0], [5.5, 22346.0], [5.6, 22357.0], [5.7, 22371.0], [5.8, 22411.0], [5.9, 22439.0], [6.0, 22455.0], [6.1, 22474.0], [6.2, 22474.0], [6.3, 22480.0], [6.4, 22493.0], [6.5, 22509.0], [6.6, 22575.0], [6.7, 22583.0], [6.8, 22586.0], [6.9, 22595.0], [7.0, 22595.0], [7.1, 22614.0], [7.2, 22634.0], [7.3, 22661.0], [7.4, 22676.0], [7.5, 22692.0], [7.6, 22709.0], [7.7, 22729.0], [7.8, 22745.0], [7.9, 22775.0], [8.0, 22778.0], [8.1, 22793.0], [8.2, 22800.0], [8.3, 22803.0], [8.4, 22808.0], [8.5, 22815.0], [8.6, 22821.0], [8.7, 22825.0], [8.8, 22845.0], [8.9, 22855.0], [9.0, 22861.0], [9.1, 22873.0], [9.2, 22885.0], [9.3, 22897.0], [9.4, 22900.0], [9.5, 22948.0], [9.6, 22979.0], [9.7, 22983.0], [9.8, 23325.0], [9.9, 23350.0], [10.0, 23391.0], [10.1, 23401.0], [10.2, 23418.0], [10.3, 23425.0], [10.4, 23432.0], [10.5, 23441.0], [10.6, 23457.0], [10.7, 23474.0], [10.8, 23500.0], [10.9, 23548.0], [11.0, 23555.0], [11.1, 23568.0], [11.2, 23577.0], [11.3, 23601.0], [11.4, 23607.0], [11.5, 23610.0], [11.6, 23618.0], [11.7, 23635.0], [11.8, 23644.0], [11.9, 23648.0], [12.0, 23648.0], [12.1, 23656.0], [12.2, 23668.0], [12.3, 23673.0], [12.4, 23681.0], [12.5, 23685.0], [12.6, 23710.0], [12.7, 23737.0], [12.8, 23746.0], [12.9, 23756.0], [13.0, 23804.0], [13.1, 23816.0], [13.2, 23819.0], [13.3, 23821.0], [13.4, 23821.0], [13.5, 23827.0], [13.6, 23831.0], [13.7, 23844.0], [13.8, 23856.0], [13.9, 23859.0], [14.0, 23860.0], [14.1, 23871.0], [14.2, 23889.0], [14.3, 23903.0], [14.4, 23907.0], [14.5, 23907.0], [14.6, 23908.0], [14.7, 23921.0], [14.8, 23942.0], [14.9, 23944.0], [15.0, 23961.0], [15.1, 23963.0], [15.2, 24023.0], [15.3, 24050.0], [15.4, 24071.0], [15.5, 24080.0], [15.6, 24086.0], [15.7, 24094.0], [15.8, 24122.0], [15.9, 24150.0], [16.0, 24155.0], [16.1, 24167.0], [16.2, 24188.0], [16.3, 24196.0], [16.4, 24201.0], [16.5, 24252.0], [16.6, 24287.0], [16.7, 24296.0], [16.8, 24297.0], [16.9, 24326.0], [17.0, 24332.0], [17.1, 24341.0], [17.2, 24348.0], [17.3, 24373.0], [17.4, 24387.0], [17.5, 24547.0], [17.6, 24550.0], [17.7, 24555.0], [17.8, 24602.0], [17.9, 24618.0], [18.0, 24631.0], [18.1, 24641.0], [18.2, 24654.0], [18.3, 24680.0], [18.4, 24691.0], [18.5, 24726.0], [18.6, 24767.0], [18.7, 24853.0], [18.8, 24857.0], [18.9, 24857.0], [19.0, 24897.0], [19.1, 24906.0], [19.2, 24963.0], [19.3, 24986.0], [19.4, 25009.0], [19.5, 25028.0], [19.6, 25085.0], [19.7, 25098.0], [19.8, 25109.0], [19.9, 25133.0], [20.0, 25190.0], [20.1, 25192.0], [20.2, 25195.0], [20.3, 25234.0], [20.4, 25251.0], [20.5, 25277.0], [20.6, 25319.0], [20.7, 25331.0], [20.8, 25342.0], [20.9, 25373.0], [21.0, 25376.0], [21.1, 25390.0], [21.2, 25440.0], [21.3, 25458.0], [21.4, 25506.0], [21.5, 25522.0], [21.6, 25537.0], [21.7, 25565.0], [21.8, 25578.0], [21.9, 25668.0], [22.0, 25679.0], [22.1, 25708.0], [22.2, 25721.0], [22.3, 25806.0], [22.4, 25830.0], [22.5, 25834.0], [22.6, 25872.0], [22.7, 25879.0], [22.8, 25913.0], [22.9, 25960.0], [23.0, 25971.0], [23.1, 25998.0], [23.2, 26006.0], [23.3, 26023.0], [23.4, 26048.0], [23.5, 26059.0], [23.6, 26093.0], [23.7, 26097.0], [23.8, 26117.0], [23.9, 26210.0], [24.0, 26213.0], [24.1, 26220.0], [24.2, 26221.0], [24.3, 26231.0], [24.4, 26238.0], [24.5, 26255.0], [24.6, 26258.0], [24.7, 26286.0], [24.8, 26286.0], [24.9, 26305.0], [25.0, 26320.0], [25.1, 26347.0], [25.2, 26368.0], [25.3, 26396.0], [25.4, 26411.0], [25.5, 26420.0], [25.6, 26422.0], [25.7, 26423.0], [25.8, 26428.0], [25.9, 26435.0], [26.0, 26449.0], [26.1, 26453.0], [26.2, 26460.0], [26.3, 26471.0], [26.4, 26478.0], [26.5, 26479.0], [26.6, 26482.0], [26.7, 26483.0], [26.8, 26487.0], [26.9, 26488.0], [27.0, 26492.0], [27.1, 26502.0], [27.2, 26513.0], [27.3, 26514.0], [27.4, 26515.0], [27.5, 26519.0], [27.6, 26572.0], [27.7, 26576.0], [27.8, 26577.0], [27.9, 26588.0], [28.0, 26591.0], [28.1, 26593.0], [28.2, 26611.0], [28.3, 26612.0], [28.4, 26619.0], [28.5, 26633.0], [28.6, 26637.0], [28.7, 26638.0], [28.8, 26646.0], [28.9, 26651.0], [29.0, 26657.0], [29.1, 26657.0], [29.2, 26663.0], [29.3, 26665.0], [29.4, 26684.0], [29.5, 26684.0], [29.6, 26685.0], [29.7, 26716.0], [29.8, 26718.0], [29.9, 26726.0], [30.0, 26745.0], [30.1, 26760.0], [30.2, 26761.0], [30.3, 26766.0], [30.4, 26766.0], [30.5, 26766.0], [30.6, 26772.0], [30.7, 26776.0], [30.8, 26780.0], [30.9, 26786.0], [31.0, 26804.0], [31.1, 26810.0], [31.2, 26836.0], [31.3, 26836.0], [31.4, 26852.0], [31.5, 26903.0], [31.6, 26922.0], [31.7, 26927.0], [31.8, 26937.0], [31.9, 26939.0], [32.0, 26959.0], [32.1, 26977.0], [32.2, 27160.0], [32.3, 27364.0], [32.4, 27562.0], [32.5, 27712.0], [32.6, 27779.0], [32.7, 27902.0], [32.8, 27939.0], [32.9, 28109.0], [33.0, 28286.0], [33.1, 28435.0], [33.2, 28532.0], [33.3, 28602.0], [33.4, 28856.0], [33.5, 29298.0], [33.6, 29595.0], [33.7, 29820.0], [33.8, 30019.0], [33.9, 30019.0], [34.0, 30019.0], [34.1, 30019.0], [34.2, 30019.0], [34.3, 30019.0], [34.4, 30019.0], [34.5, 30019.0], [34.6, 30019.0], [34.7, 30020.0], [34.8, 30020.0], [34.9, 30020.0], [35.0, 30020.0], [35.1, 30020.0], [35.2, 30020.0], [35.3, 30020.0], [35.4, 30021.0], [35.5, 30021.0], [35.6, 30021.0], [35.7, 30021.0], [35.8, 30021.0], [35.9, 30021.0], [36.0, 30021.0], [36.1, 30022.0], [36.2, 30022.0], [36.3, 30022.0], [36.4, 30022.0], [36.5, 30022.0], [36.6, 30022.0], [36.7, 30022.0], [36.8, 30022.0], [36.9, 30022.0], [37.0, 30023.0], [37.1, 30023.0], [37.2, 30023.0], [37.3, 30023.0], [37.4, 30023.0], [37.5, 30023.0], [37.6, 30023.0], [37.7, 30023.0], [37.8, 30023.0], [37.9, 30024.0], [38.0, 30024.0], [38.1, 30024.0], [38.2, 30024.0], [38.3, 30024.0], [38.4, 30024.0], [38.5, 30024.0], [38.6, 30024.0], [38.7, 30024.0], [38.8, 30024.0], [38.9, 30024.0], [39.0, 30024.0], [39.1, 30025.0], [39.2, 30025.0], [39.3, 30025.0], [39.4, 30025.0], [39.5, 30025.0], [39.6, 30025.0], [39.7, 30025.0], [39.8, 30025.0], [39.9, 30025.0], [40.0, 30025.0], [40.1, 30026.0], [40.2, 30026.0], [40.3, 30026.0], [40.4, 30026.0], [40.5, 30026.0], [40.6, 30026.0], [40.7, 30026.0], [40.8, 30026.0], [40.9, 30026.0], [41.0, 30026.0], [41.1, 30027.0], [41.2, 30027.0], [41.3, 30027.0], [41.4, 30027.0], [41.5, 30027.0], [41.6, 30028.0], [41.7, 30028.0], [41.8, 30028.0], [41.9, 30028.0], [42.0, 30028.0], [42.1, 30028.0], [42.2, 30028.0], [42.3, 30028.0], [42.4, 30029.0], [42.5, 30029.0], [42.6, 30029.0], [42.7, 30030.0], [42.8, 30030.0], [42.9, 30030.0], [43.0, 30030.0], [43.1, 30030.0], [43.2, 30030.0], [43.3, 30030.0], [43.4, 30030.0], [43.5, 30031.0], [43.6, 30031.0], [43.7, 30033.0], [43.8, 30033.0], [43.9, 30033.0], [44.0, 30034.0], [44.1, 30034.0], [44.2, 30034.0], [44.3, 30034.0], [44.4, 30035.0], [44.5, 30035.0], [44.6, 30035.0], [44.7, 30035.0], [44.8, 30035.0], [44.9, 30036.0], [45.0, 30037.0], [45.1, 30037.0], [45.2, 30037.0], [45.3, 30038.0], [45.4, 30038.0], [45.5, 30038.0], [45.6, 30039.0], [45.7, 30039.0], [45.8, 30040.0], [45.9, 30040.0], [46.0, 30040.0], [46.1, 30041.0], [46.2, 30041.0], [46.3, 30042.0], [46.4, 30042.0], [46.5, 30042.0], [46.6, 30043.0], [46.7, 30044.0], [46.8, 30045.0], [46.9, 30045.0], [47.0, 30048.0], [47.1, 30048.0], [47.2, 30052.0], [47.3, 30053.0], [47.4, 30054.0], [47.5, 30055.0], [47.6, 30055.0], [47.7, 30055.0], [47.8, 30058.0], [47.9, 30060.0], [48.0, 30062.0], [48.1, 30063.0], [48.2, 30075.0], [48.3, 30084.0], [48.4, 30093.0], [48.5, 30100.0], [48.6, 30114.0], [48.7, 30129.0], [48.8, 30185.0], [48.9, 30281.0], [49.0, 30283.0], [49.1, 30287.0], [49.2, 30295.0], [49.3, 30306.0], [49.4, 30306.0], [49.5, 30317.0], [49.6, 30411.0], [49.7, 30529.0], [49.8, 30645.0], [49.9, 30697.0], [50.0, 30701.0], [50.1, 30704.0], [50.2, 30722.0], [50.3, 30736.0], [50.4, 30851.0], [50.5, 30861.0], [50.6, 30867.0], [50.7, 30870.0], [50.8, 30878.0], [50.9, 30878.0], [51.0, 30889.0], [51.1, 30894.0], [51.2, 30902.0], [51.3, 30909.0], [51.4, 30927.0], [51.5, 30936.0], [51.6, 30949.0], [51.7, 30972.0], [51.8, 30975.0], [51.9, 30975.0], [52.0, 30978.0], [52.1, 30984.0], [52.2, 30986.0], [52.3, 30993.0], [52.4, 31042.0], [52.5, 31068.0], [52.6, 31068.0], [52.7, 31075.0], [52.8, 31076.0], [52.9, 31078.0], [53.0, 31086.0], [53.1, 31093.0], [53.2, 31097.0], [53.3, 31098.0], [53.4, 31105.0], [53.5, 31107.0], [53.6, 31114.0], [53.7, 31144.0], [53.8, 31162.0], [53.9, 31163.0], [54.0, 31170.0], [54.1, 31181.0], [54.2, 31193.0], [54.3, 31206.0], [54.4, 31209.0], [54.5, 31211.0], [54.6, 31212.0], [54.7, 31214.0], [54.8, 31232.0], [54.9, 31264.0], [55.0, 31273.0], [55.1, 31273.0], [55.2, 31276.0], [55.3, 31284.0], [55.4, 31292.0], [55.5, 31296.0], [55.6, 31304.0], [55.7, 31305.0], [55.8, 31320.0], [55.9, 31322.0], [56.0, 31327.0], [56.1, 31330.0], [56.2, 31340.0], [56.3, 31344.0], [56.4, 31360.0], [56.5, 31360.0], [56.6, 31361.0], [56.7, 31379.0], [56.8, 31386.0], [56.9, 31387.0], [57.0, 31397.0], [57.1, 31406.0], [57.2, 31409.0], [57.3, 31411.0], [57.4, 31412.0], [57.5, 31415.0], [57.6, 31422.0], [57.7, 31431.0], [57.8, 31447.0], [57.9, 31461.0], [58.0, 31470.0], [58.1, 31484.0], [58.2, 31484.0], [58.3, 31489.0], [58.4, 31492.0], [58.5, 31494.0], [58.6, 31494.0], [58.7, 31499.0], [58.8, 31503.0], [58.9, 31507.0], [59.0, 31511.0], [59.1, 31522.0], [59.2, 31525.0], [59.3, 31532.0], [59.4, 31537.0], [59.5, 31539.0], [59.6, 31540.0], [59.7, 31540.0], [59.8, 31540.0], [59.9, 31561.0], [60.0, 31573.0], [60.1, 31593.0], [60.2, 31595.0], [60.3, 31599.0], [60.4, 31600.0], [60.5, 31605.0], [60.6, 31607.0], [60.7, 31608.0], [60.8, 31609.0], [60.9, 31611.0], [61.0, 31614.0], [61.1, 31623.0], [61.2, 31634.0], [61.3, 31636.0], [61.4, 31638.0], [61.5, 31642.0], [61.6, 31660.0], [61.7, 31666.0], [61.8, 31668.0], [61.9, 31674.0], [62.0, 31677.0], [62.1, 31681.0], [62.2, 31684.0], [62.3, 31690.0], [62.4, 31701.0], [62.5, 31702.0], [62.6, 31706.0], [62.7, 31712.0], [62.8, 31712.0], [62.9, 31718.0], [63.0, 31720.0], [63.1, 31721.0], [63.2, 31724.0], [63.3, 31724.0], [63.4, 31726.0], [63.5, 31726.0], [63.6, 31728.0], [63.7, 31731.0], [63.8, 31744.0], [63.9, 31748.0], [64.0, 31760.0], [64.1, 31760.0], [64.2, 31760.0], [64.3, 31761.0], [64.4, 31762.0], [64.5, 31764.0], [64.6, 31782.0], [64.7, 31782.0], [64.8, 31785.0], [64.9, 31791.0], [65.0, 31804.0], [65.1, 31827.0], [65.2, 31831.0], [65.3, 31834.0], [65.4, 31837.0], [65.5, 31838.0], [65.6, 31843.0], [65.7, 31844.0], [65.8, 31849.0], [65.9, 31858.0], [66.0, 31858.0], [66.1, 31859.0], [66.2, 31859.0], [66.3, 31863.0], [66.4, 31863.0], [66.5, 31863.0], [66.6, 31863.0], [66.7, 31872.0], [66.8, 31887.0], [66.9, 31891.0], [67.0, 31896.0], [67.1, 31897.0], [67.2, 31898.0], [67.3, 31899.0], [67.4, 31905.0], [67.5, 31915.0], [67.6, 31917.0], [67.7, 31917.0], [67.8, 31920.0], [67.9, 31923.0], [68.0, 31930.0], [68.1, 31941.0], [68.2, 31943.0], [68.3, 31946.0], [68.4, 31952.0], [68.5, 31960.0], [68.6, 31963.0], [68.7, 31964.0], [68.8, 31968.0], [68.9, 31970.0], [69.0, 31971.0], [69.1, 31972.0], [69.2, 31973.0], [69.3, 31976.0], [69.4, 31978.0], [69.5, 31979.0], [69.6, 31983.0], [69.7, 31984.0], [69.8, 31987.0], [69.9, 31988.0], [70.0, 31990.0], [70.1, 31991.0], [70.2, 31991.0], [70.3, 31995.0], [70.4, 31996.0], [70.5, 31996.0], [70.6, 32001.0], [70.7, 32004.0], [70.8, 32011.0], [70.9, 32014.0], [71.0, 32016.0], [71.1, 32016.0], [71.2, 32017.0], [71.3, 32021.0], [71.4, 32022.0], [71.5, 32024.0], [71.6, 32025.0], [71.7, 32029.0], [71.8, 32029.0], [71.9, 32030.0], [72.0, 32031.0], [72.1, 32032.0], [72.2, 32038.0], [72.3, 32038.0], [72.4, 32043.0], [72.5, 32044.0], [72.6, 32044.0], [72.7, 32045.0], [72.8, 32049.0], [72.9, 32050.0], [73.0, 32053.0], [73.1, 32062.0], [73.2, 32064.0], [73.3, 32071.0], [73.4, 32072.0], [73.5, 32074.0], [73.6, 32076.0], [73.7, 32078.0], [73.8, 32080.0], [73.9, 32082.0], [74.0, 32088.0], [74.1, 32099.0], [74.2, 32101.0], [74.3, 32101.0], [74.4, 32102.0], [74.5, 32105.0], [74.6, 32108.0], [74.7, 32117.0], [74.8, 32118.0], [74.9, 32119.0], [75.0, 32123.0], [75.1, 32125.0], [75.2, 32129.0], [75.3, 32131.0], [75.4, 32133.0], [75.5, 32133.0], [75.6, 32135.0], [75.7, 32137.0], [75.8, 32148.0], [75.9, 32148.0], [76.0, 32152.0], [76.1, 32153.0], [76.2, 32155.0], [76.3, 32156.0], [76.4, 32158.0], [76.5, 32160.0], [76.6, 32166.0], [76.7, 32170.0], [76.8, 32170.0], [76.9, 32175.0], [77.0, 32176.0], [77.1, 32178.0], [77.2, 32181.0], [77.3, 32187.0], [77.4, 32190.0], [77.5, 32191.0], [77.6, 32192.0], [77.7, 32194.0], [77.8, 32194.0], [77.9, 32201.0], [78.0, 32204.0], [78.1, 32204.0], [78.2, 32205.0], [78.3, 32211.0], [78.4, 32216.0], [78.5, 32229.0], [78.6, 32230.0], [78.7, 32233.0], [78.8, 32246.0], [78.9, 32251.0], [79.0, 32251.0], [79.1, 32252.0], [79.2, 32267.0], [79.3, 32271.0], [79.4, 32278.0], [79.5, 32290.0], [79.6, 32291.0], [79.7, 32295.0], [79.8, 32301.0], [79.9, 32305.0], [80.0, 32309.0], [80.1, 32311.0], [80.2, 32312.0], [80.3, 32313.0], [80.4, 32319.0], [80.5, 32329.0], [80.6, 32340.0], [80.7, 32340.0], [80.8, 32344.0], [80.9, 32352.0], [81.0, 32358.0], [81.1, 32363.0], [81.2, 32365.0], [81.3, 32372.0], [81.4, 32385.0], [81.5, 32392.0], [81.6, 32392.0], [81.7, 32393.0], [81.8, 32396.0], [81.9, 32396.0], [82.0, 32398.0], [82.1, 32399.0], [82.2, 32401.0], [82.3, 32411.0], [82.4, 32415.0], [82.5, 32416.0], [82.6, 32419.0], [82.7, 32420.0], [82.8, 32428.0], [82.9, 32429.0], [83.0, 32430.0], [83.1, 32430.0], [83.2, 32433.0], [83.3, 32434.0], [83.4, 32434.0], [83.5, 32441.0], [83.6, 32442.0], [83.7, 32446.0], [83.8, 32446.0], [83.9, 32450.0], [84.0, 32451.0], [84.1, 32452.0], [84.2, 32452.0], [84.3, 32455.0], [84.4, 32456.0], [84.5, 32456.0], [84.6, 32457.0], [84.7, 32458.0], [84.8, 32462.0], [84.9, 32464.0], [85.0, 32465.0], [85.1, 32468.0], [85.2, 32469.0], [85.3, 32470.0], [85.4, 32473.0], [85.5, 32474.0], [85.6, 32474.0], [85.7, 32475.0], [85.8, 32476.0], [85.9, 32484.0], [86.0, 32489.0], [86.1, 32491.0], [86.2, 32493.0], [86.3, 32494.0], [86.4, 32499.0], [86.5, 32502.0], [86.6, 32506.0], [86.7, 32510.0], [86.8, 32520.0], [86.9, 32524.0], [87.0, 32525.0], [87.1, 32525.0], [87.2, 32527.0], [87.3, 32541.0], [87.4, 32547.0], [87.5, 32549.0], [87.6, 32554.0], [87.7, 32556.0], [87.8, 32574.0], [87.9, 32587.0], [88.0, 32588.0], [88.1, 32589.0], [88.2, 32596.0], [88.3, 32596.0], [88.4, 32598.0], [88.5, 32601.0], [88.6, 32602.0], [88.7, 32606.0], [88.8, 32609.0], [88.9, 32609.0], [89.0, 32614.0], [89.1, 32614.0], [89.2, 32615.0], [89.3, 32622.0], [89.4, 32624.0], [89.5, 32625.0], [89.6, 32625.0], [89.7, 32627.0], [89.8, 32629.0], [89.9, 32632.0], [90.0, 32636.0], [90.1, 32642.0], [90.2, 32646.0], [90.3, 32655.0], [90.4, 32655.0], [90.5, 32665.0], [90.6, 32672.0], [90.7, 32681.0], [90.8, 32684.0], [90.9, 32691.0], [91.0, 32695.0], [91.1, 32696.0], [91.2, 32711.0], [91.3, 32711.0], [91.4, 32711.0], [91.5, 32715.0], [91.6, 32716.0], [91.7, 32717.0], [91.8, 32721.0], [91.9, 32723.0], [92.0, 32726.0], [92.1, 32728.0], [92.2, 32729.0], [92.3, 32730.0], [92.4, 32736.0], [92.5, 32746.0], [92.6, 32750.0], [92.7, 32751.0], [92.8, 32751.0], [92.9, 32752.0], [93.0, 32763.0], [93.1, 32770.0], [93.2, 32771.0], [93.3, 32772.0], [93.4, 32773.0], [93.5, 32782.0], [93.6, 32784.0], [93.7, 32787.0], [93.8, 32797.0], [93.9, 32799.0], [94.0, 32800.0], [94.1, 32804.0], [94.2, 32805.0], [94.3, 32822.0], [94.4, 32826.0], [94.5, 32836.0], [94.6, 32843.0], [94.7, 32850.0], [94.8, 32851.0], [94.9, 32852.0], [95.0, 32854.0], [95.1, 32857.0], [95.2, 32859.0], [95.3, 32867.0], [95.4, 32869.0], [95.5, 32874.0], [95.6, 32874.0], [95.7, 32879.0], [95.8, 32884.0], [95.9, 32885.0], [96.0, 32886.0], [96.1, 32887.0], [96.2, 32887.0], [96.3, 32900.0], [96.4, 32900.0], [96.5, 32909.0], [96.6, 32910.0], [96.7, 32912.0], [96.8, 32914.0], [96.9, 32923.0], [97.0, 32925.0], [97.1, 32933.0], [97.2, 32942.0], [97.3, 32942.0], [97.4, 32947.0], [97.5, 32947.0], [97.6, 32951.0], [97.7, 32957.0], [97.8, 32961.0], [97.9, 32964.0], [98.0, 32967.0], [98.1, 32969.0], [98.2, 32972.0], [98.3, 32978.0], [98.4, 32980.0], [98.5, 32980.0], [98.6, 32987.0], [98.7, 32988.0], [98.8, 32993.0], [98.9, 32995.0], [99.0, 33014.0], [99.1, 33024.0], [99.2, 33042.0], [99.3, 33054.0], [99.4, 33071.0], [99.5, 33106.0], [99.6, 33111.0], [99.7, 33125.0], [99.8, 33174.0], [99.9, 33272.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 18400.0, "maxY": 147.0, "series": [{"data": [[32900.0, 27.0], [33100.0, 4.0], [18400.0, 1.0], [19100.0, 1.0], [19700.0, 2.0], [20000.0, 1.0], [20400.0, 1.0], [21500.0, 3.0], [20700.0, 2.0], [21100.0, 3.0], [21200.0, 6.0], [21300.0, 1.0], [21000.0, 1.0], [21400.0, 2.0], [21700.0, 4.0], [21600.0, 5.0], [22000.0, 3.0], [22300.0, 8.0], [22100.0, 9.0], [22200.0, 5.0], [22400.0, 7.0], [22500.0, 6.0], [22600.0, 5.0], [22800.0, 12.0], [22900.0, 4.0], [22700.0, 6.0], [23400.0, 7.0], [23500.0, 5.0], [23300.0, 3.0], [23700.0, 4.0], [23600.0, 13.0], [23800.0, 13.0], [23900.0, 9.0], [24100.0, 6.0], [24000.0, 6.0], [24300.0, 6.0], [24200.0, 5.0], [24500.0, 3.0], [24800.0, 3.0], [24600.0, 7.0], [24900.0, 3.0], [24700.0, 2.0], [25000.0, 4.0], [25300.0, 6.0], [25100.0, 5.0], [25200.0, 3.0], [25500.0, 5.0], [25400.0, 2.0], [25700.0, 2.0], [25900.0, 4.0], [26000.0, 6.0], [25600.0, 2.0], [26200.0, 10.0], [25800.0, 5.0], [26100.0, 1.0], [26300.0, 5.0], [26400.0, 17.0], [26600.0, 15.0], [26500.0, 11.0], [26700.0, 13.0], [26800.0, 5.0], [26900.0, 7.0], [27300.0, 1.0], [27100.0, 1.0], [27500.0, 1.0], [27700.0, 2.0], [27900.0, 2.0], [28200.0, 1.0], [28100.0, 1.0], [28500.0, 1.0], [28600.0, 1.0], [28400.0, 1.0], [28800.0, 1.0], [29200.0, 1.0], [29500.0, 1.0], [29800.0, 1.0], [30300.0, 3.0], [30200.0, 4.0], [30100.0, 4.0], [30600.0, 2.0], [30000.0, 147.0], [30700.0, 4.0], [30400.0, 1.0], [30500.0, 1.0], [31500.0, 16.0], [30800.0, 8.0], [30900.0, 12.0], [31100.0, 9.0], [31200.0, 13.0], [31000.0, 10.0], [31300.0, 15.0], [31400.0, 17.0], [31600.0, 20.0], [31700.0, 26.0], [31800.0, 24.0], [31900.0, 32.0], [32000.0, 36.0], [32100.0, 38.0], [32200.0, 19.0], [32400.0, 43.0], [32300.0, 24.0], [32500.0, 20.0], [32600.0, 27.0], [32700.0, 28.0], [32800.0, 23.0], [33000.0, 5.0], [33200.0, 1.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 33200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 339.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 661.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 339.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 661.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 500.68236472945955, "minX": 1.75792368E12, "maxY": 999.5, "series": [{"data": [[1.75792374E12, 500.68236472945955], [1.75792368E12, 999.5]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792374E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18408.0, "minX": 1.0, "maxY": 33272.0, "series": [{"data": [[2.0, 30722.0], [3.0, 32170.0], [5.0, 33108.5], [6.0, 33272.0], [7.0, 32910.0], [8.0, 32155.0], [9.0, 32752.0], [10.0, 32711.0], [11.0, 32730.0], [12.0, 32729.0], [13.0, 32721.0], [14.0, 32763.0], [15.0, 32717.0], [16.0, 32715.0], [17.0, 32716.0], [18.0, 32711.0], [20.0, 32686.0], [21.0, 32646.0], [22.0, 32642.0], [23.0, 32636.0], [24.0, 32629.0], [25.0, 32625.0], [26.0, 33174.0], [28.0, 32609.0], [29.0, 32606.0], [30.0, 32601.0], [31.0, 32589.0], [33.0, 32800.0], [32.0, 32076.0], [35.0, 32614.0], [34.0, 32797.0], [37.0, 32972.0], [39.0, 32980.0], [38.0, 32044.0], [41.0, 32031.0], [40.0, 32596.0], [43.0, 32771.0], [42.0, 33125.0], [45.0, 32396.0], [47.0, 32011.0], [46.0, 32947.0], [48.0, 32001.0], [50.0, 31996.0], [53.0, 32549.0], [52.0, 32457.5], [55.0, 32527.5], [56.0, 31983.0], [59.0, 31976.0], [58.0, 32731.0], [61.0, 31971.0], [60.0, 32525.0], [63.0, 32510.0], [62.0, 31968.0], [67.0, 32885.0], [66.0, 32978.0], [65.0, 32944.0], [71.0, 32773.0], [70.0, 33042.0], [69.0, 32913.0], [74.0, 32695.0], [73.0, 32869.0], [72.0, 33054.0], [77.0, 32884.0], [76.0, 32761.5], [83.0, 32696.0], [82.0, 32671.0], [80.0, 32926.0], [87.0, 32702.0], [85.0, 32470.0], [84.0, 32799.0], [90.0, 32491.0], [88.0, 32684.0], [92.0, 32657.5], [99.0, 32781.142857142855], [102.0, 32820.5], [100.0, 32665.0], [106.0, 32923.0], [105.0, 32663.0], [104.0, 32442.0], [111.0, 32429.0], [110.0, 32655.0], [109.0, 32874.0], [108.0, 32957.0], [115.0, 32654.5], [113.0, 32456.0], [112.0, 32457.0], [118.0, 32299.0], [116.0, 32826.0], [122.0, 32964.0], [121.0, 31609.0], [120.0, 32854.5], [127.0, 31499.0], [126.0, 32804.0], [125.0, 32805.0], [124.0, 32153.5], [135.0, 31618.2], [130.0, 32969.0], [129.0, 32951.0], [128.0, 31322.0], [143.0, 31552.0], [140.0, 32625.0], [139.0, 32872.5], [137.0, 31919.0], [151.0, 32849.0], [150.0, 30878.0], [148.0, 32746.0], [147.0, 31656.5], [146.0, 32723.0], [144.0, 32451.0], [159.0, 32602.0], [158.0, 32728.0], [157.0, 31325.666666666668], [154.0, 30701.0], [153.0, 30704.0], [152.0, 32942.0], [167.0, 30306.0], [166.0, 32614.0], [165.0, 32711.0], [164.0, 31884.333333333332], [161.0, 32750.0], [160.0, 32474.0], [175.0, 30058.0], [174.0, 30063.0], [173.0, 32772.0], [172.0, 30243.333333333332], [169.0, 30287.0], [168.0, 32879.0], [183.0, 32657.75], [179.0, 30984.0], [176.0, 32556.0], [191.0, 30722.75], [187.0, 31293.0], [185.0, 32719.5], [199.0, 31286.0], [197.0, 30040.0], [194.0, 30038.5], [192.0, 30038.0], [207.0, 30028.0], [206.0, 32502.0], [205.0, 30042.0], [204.0, 30045.0], [203.0, 30035.0], [201.0, 30034.5], [215.0, 32473.0], [214.0, 32468.0], [213.0, 30033.0], [212.0, 30025.666666666668], [209.0, 30030.0], [208.0, 30027.0], [221.0, 32502.0], [219.0, 31237.0], [217.0, 32469.0], [216.0, 32441.0], [229.0, 30019.5], [227.0, 32433.5], [225.0, 30025.0], [224.0, 32456.0], [239.0, 32396.0], [238.0, 32491.0], [237.0, 30814.333333333332], [234.0, 32415.0], [233.0, 32419.0], [232.0, 32512.0], [247.0, 32399.0], [246.0, 30023.0], [245.0, 32365.0], [244.0, 31135.5], [242.0, 31205.5], [240.0, 32393.0], [255.0, 30027.0], [254.0, 30026.0], [253.0, 32510.0], [251.0, 31337.0], [249.0, 32420.0], [248.0, 32358.0], [259.0, 32394.0], [270.0, 32624.0], [271.0, 32446.0], [269.0, 32315.5], [267.0, 31318.0], [265.0, 31199.25], [261.0, 32465.0], [260.0, 32352.0], [257.0, 32340.0], [256.0, 30035.0], [286.0, 30023.0], [287.0, 32194.0], [285.0, 30021.0], [284.0, 32204.0], [283.0, 32271.0], [282.0, 30020.0], [281.0, 30024.0], [280.0, 32278.0], [279.0, 30021.0], [274.0, 32485.0], [272.0, 32313.0], [278.0, 32267.0], [277.0, 30791.666666666668], [302.0, 32131.0], [303.0, 30019.0], [301.0, 30023.0], [300.0, 32229.0], [299.0, 32363.0], [298.0, 32175.0], [297.0, 32148.0], [296.0, 30023.0], [295.0, 32295.0], [291.0, 32303.0], [289.0, 32250.5], [294.0, 32372.0], [293.0, 32187.0], [292.0, 32251.0], [307.0, 32314.5], [317.0, 32233.0], [318.0, 32088.0], [316.0, 32178.0], [315.0, 31512.0], [312.0, 31066.0], [310.0, 32205.0], [309.0, 32432.5], [305.0, 30025.0], [304.0, 32541.0], [334.0, 32061.0], [332.0, 30026.0], [331.0, 30024.0], [330.0, 32201.0], [329.0, 32204.0], [328.0, 32286.666666666668], [325.0, 32105.0], [324.0, 31379.0], [321.0, 32080.0], [320.0, 32215.0], [351.0, 32015.0], [349.0, 32131.0], [338.0, 30021.0], [337.0, 30022.0], [336.0, 32080.0], [347.0, 32430.0], [346.0, 32194.0], [345.0, 30019.0], [344.0, 30021.0], [343.0, 32030.0], [342.0, 32434.0], [341.0, 32029.0], [340.0, 30035.5], [367.0, 31988.0], [366.0, 32036.0], [363.0, 30021.0], [362.0, 32101.0], [361.0, 31089.5], [359.0, 32048.333333333332], [356.0, 32137.0], [355.0, 30038.5], [353.0, 32101.0], [382.0, 31896.0], [383.0, 30027.0], [381.0, 30028.0], [380.0, 30030.0], [379.0, 30036.0], [377.0, 30034.0], [376.0, 32290.0], [375.0, 31897.0], [369.0, 31838.0], [368.0, 31963.0], [371.0, 32148.0], [370.0, 31978.0], [374.0, 30031.0], [373.0, 32024.0], [372.0, 32135.0], [398.0, 30022.0], [399.0, 30021.0], [397.0, 30024.0], [396.0, 30942.0], [394.0, 30023.0], [393.0, 31863.0], [392.0, 31872.0], [391.0, 32004.0], [385.0, 31920.0], [384.0, 30026.0], [387.0, 32064.0], [386.0, 32291.0], [390.0, 31991.0], [389.0, 30020.0], [388.0, 31995.0], [413.0, 32032.0], [414.0, 32071.0], [412.0, 31660.0], [402.0, 31960.0], [401.0, 31837.0], [400.0, 32251.0], [411.0, 30033.0], [410.0, 32029.0], [409.0, 31934.5], [407.0, 32230.0], [406.0, 31677.0], [405.0, 31834.0], [404.0, 30868.5], [431.0, 31890.0], [429.0, 32052.0], [418.0, 31973.0], [417.0, 32062.0], [416.0, 32144.0], [427.0, 32156.0], [426.0, 32038.0], [425.0, 30026.0], [424.0, 32190.0], [423.0, 30025.0], [422.0, 31899.0], [421.0, 32017.0], [420.0, 30943.0], [445.0, 30028.0], [446.0, 32133.0], [444.0, 32118.0], [443.0, 31864.0], [442.0, 32101.0], [440.0, 32142.333333333332], [437.0, 31634.0], [436.0, 31760.0], [435.0, 30025.0], [434.0, 31608.0], [433.0, 32173.0], [462.0, 32050.0], [463.0, 31843.0], [461.0, 32053.0], [460.0, 31905.0], [459.0, 32043.0], [458.0, 31970.0], [457.0, 31762.0], [456.0, 32111.0], [455.0, 31849.5], [449.0, 31785.0], [448.0, 31887.0], [451.0, 31849.0], [450.0, 31712.0], [453.0, 31887.0], [452.0, 31898.0], [477.0, 31522.0], [478.0, 31674.0], [476.0, 31748.0], [475.0, 31484.0], [474.0, 30780.5], [472.0, 32021.0], [471.0, 31626.5], [469.0, 30873.0], [467.0, 31859.0], [466.0, 31726.0], [465.0, 31863.0], [464.0, 31507.0], [494.0, 31731.0], [495.0, 30025.0], [493.0, 31863.0], [492.0, 31489.0], [491.0, 31952.0], [490.0, 31668.0], [489.0, 31484.0], [488.0, 31858.0], [487.0, 31712.0], [480.0, 30809.0], [482.0, 31827.0], [481.0, 30024.0], [486.0, 31724.0], [485.0, 31876.0], [499.0, 31001.0], [511.0, 31720.0], [510.0, 31796.0], [507.0, 31722.0], [504.0, 30022.0], [503.0, 31706.0], [502.0, 31943.0], [501.0, 31917.0], [500.0, 31760.0], [497.0, 31666.0], [496.0, 31946.0], [529.0, 31406.0], [540.0, 31461.0], [543.0, 30444.0], [528.0, 31296.0], [539.0, 31791.0], [538.0, 31543.0], [536.0, 31599.0], [519.0, 31360.0], [518.0, 31517.0], [515.0, 31415.0], [514.0, 30055.0], [513.0, 30026.0], [512.0, 31702.0], [527.0, 31804.0], [526.0, 30829.5], [524.0, 31295.25], [520.0, 31690.0], [535.0, 31547.666666666668], [532.0, 30028.0], [531.0, 31507.0], [568.0, 31607.0], [573.0, 30040.0], [575.0, 30818.5], [560.0, 30029.0], [562.0, 30021.0], [561.0, 31264.0], [572.0, 30042.5], [570.0, 30045.0], [569.0, 30053.0], [559.0, 30022.0], [545.0, 31573.0], [544.0, 30020.0], [547.0, 31273.0], [546.0, 31760.0], [549.0, 30022.0], [548.0, 31537.0], [551.0, 30044.0], [550.0, 31701.0], [558.0, 30029.0], [557.0, 30028.0], [556.0, 30059.0], [554.0, 30075.0], [553.0, 31681.0], [552.0, 30020.0], [567.0, 31494.0], [566.0, 30033.0], [565.0, 31397.0], [564.0, 30029.0], [600.0, 30093.0], [606.0, 31360.0], [607.0, 31470.0], [593.0, 31098.0], [592.0, 30030.0], [605.0, 31217.0], [602.0, 31494.0], [601.0, 30023.0], [591.0, 31540.0], [576.0, 30028.0], [578.0, 30030.0], [577.0, 30052.0], [581.0, 31387.0], [580.0, 30028.0], [583.0, 31561.0], [582.0, 31344.0], [590.0, 31536.0], [588.0, 31540.0], [587.0, 31525.0], [586.0, 31413.0], [584.0, 30037.0], [599.0, 30030.0], [598.0, 31305.0], [597.0, 30069.0], [595.0, 30764.5], [634.0, 30736.0], [627.0, 30975.0], [638.0, 31091.5], [639.0, 31093.0], [626.0, 31163.0], [625.0, 30475.5], [636.0, 31185.0], [633.0, 31110.5], [615.0, 31181.0], [614.0, 30993.0], [613.0, 30026.0], [612.0, 30034.0], [611.0, 31422.0], [610.0, 30039.0], [609.0, 30636.0], [623.0, 31209.0], [622.0, 31162.0], [621.0, 30025.0], [620.0, 31292.0], [619.0, 30035.5], [617.0, 31185.0], [631.0, 31276.0], [630.0, 31320.0], [629.0, 30979.0], [664.0, 30317.0], [670.0, 28532.0], [671.0, 28109.0], [656.0, 29662.0], [658.0, 30867.0], [657.0, 30100.0], [669.0, 28602.0], [668.0, 28856.0], [667.0, 29571.0], [654.0, 30925.5], [641.0, 31075.0], [640.0, 31086.0], [643.0, 31170.0], [642.0, 30028.0], [645.0, 31193.0], [644.0, 31214.0], [647.0, 30975.0], [646.0, 30878.0], [653.0, 30870.0], [651.0, 30894.0], [650.0, 30978.0], [649.0, 30909.0], [648.0, 30936.0], [663.0, 30282.0], [661.0, 30185.0], [660.0, 30645.0], [659.0, 30851.0], [687.0, 26760.0], [702.0, 26748.25], [698.0, 26290.333333333332], [679.0, 27779.0], [678.0, 27939.0], [677.0, 25679.0], [676.0, 27712.0], [675.0, 25721.0], [674.0, 26903.0], [673.0, 27902.0], [672.0, 28286.0], [695.0, 26274.75], [691.0, 26634.0], [689.0, 26024.5], [686.0, 26977.0], [685.0, 27364.0], [684.0, 26176.0], [682.0, 26210.0], [681.0, 27562.0], [680.0, 25806.0], [731.0, 26470.11111111111], [729.0, 26646.0], [710.0, 26341.75], [706.0, 24196.0], [705.0, 26810.0], [704.0, 26354.0], [725.0, 26093.5], [724.0, 26766.0], [723.0, 25673.0], [722.0, 26836.0], [719.0, 24417.5], [718.0, 26593.0], [717.0, 26631.0], [754.0, 26761.0], [765.0, 24341.0], [766.0, 26478.0], [753.0, 25849.0], [764.0, 26502.0], [762.0, 26220.0], [761.0, 24738.0], [739.0, 24373.0], [751.0, 26492.0], [750.0, 26417.0], [748.0, 26804.0], [747.0, 25270.5], [745.0, 26247.750000000004], [744.0, 26776.0], [759.0, 26556.0], [757.0, 25085.0], [756.0, 26716.0], [798.0, 25342.0], [799.0, 26023.0], [797.0, 25889.0], [794.0, 26305.0], [793.0, 26276.5], [775.0, 26238.0], [781.0, 26453.0], [778.0, 25620.25], [791.0, 26059.0], [790.0, 26612.0], [789.0, 25500.0], [784.0, 26499.6], [828.0, 25109.0], [831.0, 24986.0], [817.0, 24296.0], [816.0, 25733.0], [830.0, 25331.0], [829.0, 24853.0], [827.0, 25098.0], [826.0, 25234.0], [825.0, 25190.0], [824.0, 25161.666666666668], [814.0, 25009.0], [813.0, 26006.0], [812.0, 25708.0], [811.0, 25913.0], [810.0, 25668.0], [809.0, 26221.0], [808.0, 25297.333333333332], [821.0, 24715.0], [819.0, 25236.0], [862.0, 24188.0], [863.0, 23635.0], [851.0, 23866.42857142857], [861.0, 23903.0], [860.0, 23889.0], [859.0, 23871.0], [858.0, 24111.0], [844.0, 24618.0], [833.0, 23457.0], [832.0, 25028.0], [835.0, 24641.0], [834.0, 22979.0], [837.0, 24726.0], [836.0, 22371.0], [843.0, 24387.0], [842.0, 22304.0], [841.0, 24736.0], [855.0, 24023.0], [854.0, 22778.0], [853.0, 22775.0], [852.0, 24094.0], [894.0, 23685.0], [893.0, 22240.0], [889.0, 22790.250000000004], [887.0, 22159.0], [876.0, 23417.333333333332], [874.0, 23907.0], [873.0, 23802.5], [864.0, 24071.0], [901.0, 22539.75], [923.0, 23446.5], [925.0, 22603.8], [920.0, 23269.666666666668], [918.0, 23756.0], [912.0, 23555.0], [910.0, 23762.0], [907.0, 23652.5], [897.0, 22376.0], [896.0, 22686.75], [945.0, 22821.0], [958.0, 22208.0], [956.0, 21358.0], [954.0, 22586.0], [953.0, 22396.0], [943.0, 22676.0], [931.0, 23197.153846153844], [928.0, 23607.0], [934.0, 21720.0], [932.0, 23441.0], [942.0, 22148.666666666668], [939.0, 22492.5], [937.0, 21697.0], [936.0, 22595.0], [949.0, 21270.0], [947.0, 22845.0], [946.0, 22861.0], [944.0, 22885.0], [977.0, 21941.333333333332], [991.0, 22243.0], [989.0, 22344.0], [988.0, 22193.25], [987.0, 22333.0], [983.0, 20788.0], [982.0, 22377.0], [981.0, 21124.0], [976.0, 22445.8], [975.0, 22595.0], [967.0, 22815.0], [966.0, 22517.2], [962.0, 22745.0], [961.0, 21726.0], [960.0, 21275.0], [974.0, 20446.0], [1000.0, 18408.0], [999.0, 19764.0], [998.0, 20488.0], [996.0, 21619.0], [995.0, 19700.0], [994.0, 21778.0], [1.0, 31042.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}, {"data": [[501.68, 29199.006000000034]], "isOverall": false, "label": "สร้าง Visit-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 17.766666666666666, "minX": 1.75792368E12, "maxY": 27193.466666666667, "series": [{"data": [[1.75792374E12, 27193.466666666667], [1.75792368E12, 23.366666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75792374E12, 2993.6833333333334], [1.75792368E12, 17.766666666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792374E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 19086.0, "minX": 1.75792368E12, "maxY": 29219.27254509016, "series": [{"data": [[1.75792374E12, 29219.27254509016], [1.75792368E12, 19086.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792374E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 8291.91983967934, "minX": 1.75792368E12, "maxY": 19083.0, "series": [{"data": [[1.75792374E12, 8291.91983967934], [1.75792368E12, 19083.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792374E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1418.5, "minX": 1.75792368E12, "maxY": 1597.553106212424, "series": [{"data": [[1.75792374E12, 1597.553106212424], [1.75792368E12, 1418.5]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792374E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18408.0, "minX": 1.75792368E12, "maxY": 32805.0, "series": [{"data": [[1.75792374E12, 32805.0], [1.75792368E12, 19764.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75792374E12, 26772.8], [1.75792368E12, 19764.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75792374E12, 29734.5], [1.75792368E12, 19764.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75792374E12, 27383.799999999992], [1.75792368E12, 19764.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75792374E12, 19177.0], [1.75792368E12, 18408.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75792374E12, 24332.0], [1.75792368E12, 19086.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792374E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 19086.0, "minX": 1.0, "maxY": 32805.0, "series": [{"data": [[1.0, 19086.0], [64.0, 26107.0], [2.0, 28729.0], [4.0, 29707.5], [35.0, 22709.0], [72.0, 26574.0], [89.0, 23618.0], [12.0, 27745.5], [206.0, 32805.0], [26.0, 24881.5], [120.0, 28435.0], [31.0, 22172.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[337.0, 31899.0], [206.0, 32625.0], [120.0, 30949.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 337.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 32805.0, "series": [{"data": [[1.0, 19083.0], [64.0, 26107.0], [2.0, 28729.0], [4.0, 29707.5], [35.0, 22709.0], [72.0, 26573.5], [89.0, 23618.0], [12.0, 27745.5], [206.0, 32805.0], [26.0, 24881.5], [120.0, 28435.0], [31.0, 22172.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[337.0, 0.0], [206.0, 0.0], [120.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 337.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792368E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792368E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792368E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75792368E12, "maxY": 11.016666666666667, "series": [{"data": [[1.75792374E12, 5.616666666666666], [1.75792368E12, 0.03333333333333333]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.75792374E12, 11.016666666666667]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792374E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75792368E12, "maxY": 11.016666666666667, "series": [{"data": [[1.75792374E12, 11.016666666666667]], "isOverall": false, "label": "สร้าง Visit-failure", "isController": false}, {"data": [[1.75792374E12, 5.616666666666666], [1.75792368E12, 0.03333333333333333]], "isOverall": false, "label": "สร้าง Visit-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792374E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.75792368E12, "maxY": 11.016666666666667, "series": [{"data": [[1.75792374E12, 5.616666666666666], [1.75792368E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75792374E12, 11.016666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792374E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

