/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 18103.0, "minX": 0.0, "maxY": 29070.0, "series": [{"data": [[0.0, 18103.0], [0.1, 18244.0], [0.2, 18468.0], [0.3, 18468.0], [0.4, 18506.0], [0.5, 18605.0], [0.6, 18727.0], [0.7, 18814.0], [0.8, 18970.0], [0.9, 19174.0], [1.0, 19180.0], [1.1, 19750.0], [1.2, 19752.0], [1.3, 19943.0], [1.4, 19943.0], [1.5, 20071.0], [1.6, 20183.0], [1.7, 20342.0], [1.8, 20474.0], [1.9, 20511.0], [2.0, 20515.0], [2.1, 20521.0], [2.2, 20725.0], [2.3, 20734.0], [2.4, 20814.0], [2.5, 20902.0], [2.6, 20904.0], [2.7, 20990.0], [2.8, 21292.0], [2.9, 21347.0], [3.0, 21417.0], [3.1, 21421.0], [3.2, 21465.0], [3.3, 21508.0], [3.4, 21509.0], [3.5, 21536.0], [3.6, 21594.0], [3.7, 21633.0], [3.8, 21684.0], [3.9, 21702.0], [4.0, 21768.0], [4.1, 21912.0], [4.2, 21931.0], [4.3, 21955.0], [4.4, 22106.0], [4.5, 22138.0], [4.6, 22139.0], [4.7, 22167.0], [4.8, 22277.0], [4.9, 22299.0], [5.0, 22327.0], [5.1, 22347.0], [5.2, 22362.0], [5.3, 22365.0], [5.4, 22391.0], [5.5, 22432.0], [5.6, 22460.0], [5.7, 22466.0], [5.8, 22542.0], [5.9, 22597.0], [6.0, 22621.0], [6.1, 22624.0], [6.2, 22628.0], [6.3, 22644.0], [6.4, 22656.0], [6.5, 22696.0], [6.6, 22708.0], [6.7, 22716.0], [6.8, 22721.0], [6.9, 22730.0], [7.0, 22748.0], [7.1, 22850.0], [7.2, 22874.0], [7.3, 22917.0], [7.4, 22949.0], [7.5, 22956.0], [7.6, 22990.0], [7.7, 22994.0], [7.8, 23007.0], [7.9, 23011.0], [8.0, 23029.0], [8.1, 23039.0], [8.2, 23056.0], [8.3, 23057.0], [8.4, 23060.0], [8.5, 23062.0], [8.6, 23087.0], [8.7, 23092.0], [8.8, 23119.0], [8.9, 23121.0], [9.0, 23158.0], [9.1, 23177.0], [9.2, 23187.0], [9.3, 23199.0], [9.4, 23208.0], [9.5, 23210.0], [9.6, 23227.0], [9.7, 23240.0], [9.8, 23257.0], [9.9, 23273.0], [10.0, 23291.0], [10.1, 23317.0], [10.2, 23321.0], [10.3, 23326.0], [10.4, 23328.0], [10.5, 23384.0], [10.6, 23406.0], [10.7, 23432.0], [10.8, 23511.0], [10.9, 23523.0], [11.0, 23529.0], [11.1, 23579.0], [11.2, 23590.0], [11.3, 23619.0], [11.4, 23620.0], [11.5, 23624.0], [11.6, 23638.0], [11.7, 23658.0], [11.8, 23674.0], [11.9, 23694.0], [12.0, 23706.0], [12.1, 23706.0], [12.2, 23706.0], [12.3, 23711.0], [12.4, 23720.0], [12.5, 23726.0], [12.6, 23732.0], [12.7, 23732.0], [12.8, 23749.0], [12.9, 23773.0], [13.0, 23782.0], [13.1, 23827.0], [13.2, 23830.0], [13.3, 23830.0], [13.4, 23830.0], [13.5, 23843.0], [13.6, 23870.0], [13.7, 23873.0], [13.8, 23883.0], [13.9, 23890.0], [14.0, 23893.0], [14.1, 23902.0], [14.2, 23920.0], [14.3, 23954.0], [14.4, 23969.0], [14.5, 23971.0], [14.6, 23992.0], [14.7, 24018.0], [14.8, 24036.0], [14.9, 24061.0], [15.0, 24063.0], [15.1, 24064.0], [15.2, 24091.0], [15.3, 24102.0], [15.4, 24118.0], [15.5, 24131.0], [15.6, 24135.0], [15.7, 24156.0], [15.8, 24167.0], [15.9, 24176.0], [16.0, 24179.0], [16.1, 24197.0], [16.2, 24209.0], [16.3, 24210.0], [16.4, 24275.0], [16.5, 24296.0], [16.6, 24302.0], [16.7, 24319.0], [16.8, 24322.0], [16.9, 24327.0], [17.0, 24329.0], [17.1, 24334.0], [17.2, 24339.0], [17.3, 24347.0], [17.4, 24353.0], [17.5, 24367.0], [17.6, 24372.0], [17.7, 24375.0], [17.8, 24395.0], [17.9, 24403.0], [18.0, 24415.0], [18.1, 24420.0], [18.2, 24424.0], [18.3, 24437.0], [18.4, 24445.0], [18.5, 24450.0], [18.6, 24452.0], [18.7, 24463.0], [18.8, 24469.0], [18.9, 24469.0], [19.0, 24470.0], [19.1, 24477.0], [19.2, 24477.0], [19.3, 24484.0], [19.4, 24485.0], [19.5, 24513.0], [19.6, 24514.0], [19.7, 24516.0], [19.8, 24527.0], [19.9, 24538.0], [20.0, 24568.0], [20.1, 24573.0], [20.2, 24581.0], [20.3, 24589.0], [20.4, 24591.0], [20.5, 24592.0], [20.6, 24594.0], [20.7, 24606.0], [20.8, 24609.0], [20.9, 24618.0], [21.0, 24633.0], [21.1, 24677.0], [21.2, 24690.0], [21.3, 24691.0], [21.4, 24696.0], [21.5, 24698.0], [21.6, 24699.0], [21.7, 24702.0], [21.8, 24719.0], [21.9, 24728.0], [22.0, 24732.0], [22.1, 24745.0], [22.2, 24761.0], [22.3, 24762.0], [22.4, 24783.0], [22.5, 24800.0], [22.6, 24803.0], [22.7, 24803.0], [22.8, 24803.0], [22.9, 24806.0], [23.0, 24842.0], [23.1, 24854.0], [23.2, 24856.0], [23.3, 24879.0], [23.4, 24891.0], [23.5, 24893.0], [23.6, 24904.0], [23.7, 24908.0], [23.8, 24909.0], [23.9, 24913.0], [24.0, 24941.0], [24.1, 24945.0], [24.2, 24947.0], [24.3, 24949.0], [24.4, 24949.0], [24.5, 24950.0], [24.6, 24958.0], [24.7, 24971.0], [24.8, 24984.0], [24.9, 24990.0], [25.0, 24996.0], [25.1, 24997.0], [25.2, 25005.0], [25.3, 25011.0], [25.4, 25012.0], [25.5, 25013.0], [25.6, 25015.0], [25.7, 25018.0], [25.8, 25026.0], [25.9, 25026.0], [26.0, 25029.0], [26.1, 25030.0], [26.2, 25056.0], [26.3, 25089.0], [26.4, 25102.0], [26.5, 25104.0], [26.6, 25106.0], [26.7, 25109.0], [26.8, 25114.0], [26.9, 25125.0], [27.0, 25129.0], [27.1, 25131.0], [27.2, 25132.0], [27.3, 25141.0], [27.4, 25143.0], [27.5, 25149.0], [27.6, 25156.0], [27.7, 25168.0], [27.8, 25175.0], [27.9, 25178.0], [28.0, 25179.0], [28.1, 25182.0], [28.2, 25186.0], [28.3, 25189.0], [28.4, 25191.0], [28.5, 25191.0], [28.6, 25195.0], [28.7, 25199.0], [28.8, 25201.0], [28.9, 25229.0], [29.0, 25237.0], [29.1, 25256.0], [29.2, 25281.0], [29.3, 25286.0], [29.4, 25294.0], [29.5, 25302.0], [29.6, 25303.0], [29.7, 25304.0], [29.8, 25304.0], [29.9, 25304.0], [30.0, 25312.0], [30.1, 25324.0], [30.2, 25330.0], [30.3, 25333.0], [30.4, 25339.0], [30.5, 25341.0], [30.6, 25342.0], [30.7, 25352.0], [30.8, 25360.0], [30.9, 25370.0], [31.0, 25371.0], [31.1, 25383.0], [31.2, 25386.0], [31.3, 25393.0], [31.4, 25402.0], [31.5, 25405.0], [31.6, 25407.0], [31.7, 25417.0], [31.8, 25423.0], [31.9, 25424.0], [32.0, 25429.0], [32.1, 25441.0], [32.2, 25450.0], [32.3, 25459.0], [32.4, 25464.0], [32.5, 25475.0], [32.6, 25483.0], [32.7, 25486.0], [32.8, 25499.0], [32.9, 25534.0], [33.0, 25537.0], [33.1, 25549.0], [33.2, 25554.0], [33.3, 25560.0], [33.4, 25563.0], [33.5, 25570.0], [33.6, 25577.0], [33.7, 25593.0], [33.8, 25600.0], [33.9, 25606.0], [34.0, 25613.0], [34.1, 25619.0], [34.2, 25621.0], [34.3, 25621.0], [34.4, 25629.0], [34.5, 25630.0], [34.6, 25631.0], [34.7, 25631.0], [34.8, 25631.0], [34.9, 25633.0], [35.0, 25641.0], [35.1, 25643.0], [35.2, 25643.0], [35.3, 25644.0], [35.4, 25647.0], [35.5, 25650.0], [35.6, 25654.0], [35.7, 25662.0], [35.8, 25670.0], [35.9, 25671.0], [36.0, 25672.0], [36.1, 25673.0], [36.2, 25677.0], [36.3, 25678.0], [36.4, 25702.0], [36.5, 25707.0], [36.6, 25713.0], [36.7, 25732.0], [36.8, 25737.0], [36.9, 25743.0], [37.0, 25749.0], [37.1, 25772.0], [37.2, 25779.0], [37.3, 25782.0], [37.4, 25782.0], [37.5, 25791.0], [37.6, 25793.0], [37.7, 25794.0], [37.8, 25799.0], [37.9, 25799.0], [38.0, 25801.0], [38.1, 25821.0], [38.2, 25837.0], [38.3, 25839.0], [38.4, 25846.0], [38.5, 25861.0], [38.6, 25865.0], [38.7, 25871.0], [38.8, 25878.0], [38.9, 25879.0], [39.0, 25883.0], [39.1, 25888.0], [39.2, 25897.0], [39.3, 25900.0], [39.4, 25907.0], [39.5, 25908.0], [39.6, 25909.0], [39.7, 25911.0], [39.8, 25922.0], [39.9, 25925.0], [40.0, 25929.0], [40.1, 25930.0], [40.2, 25945.0], [40.3, 25951.0], [40.4, 25952.0], [40.5, 25957.0], [40.6, 25973.0], [40.7, 25973.0], [40.8, 25974.0], [40.9, 25975.0], [41.0, 25976.0], [41.1, 25979.0], [41.2, 25979.0], [41.3, 25984.0], [41.4, 25985.0], [41.5, 25987.0], [41.6, 25993.0], [41.7, 25996.0], [41.8, 26002.0], [41.9, 26002.0], [42.0, 26009.0], [42.1, 26010.0], [42.2, 26010.0], [42.3, 26018.0], [42.4, 26018.0], [42.5, 26019.0], [42.6, 26023.0], [42.7, 26024.0], [42.8, 26040.0], [42.9, 26041.0], [43.0, 26042.0], [43.1, 26059.0], [43.2, 26060.0], [43.3, 26069.0], [43.4, 26070.0], [43.5, 26076.0], [43.6, 26083.0], [43.7, 26085.0], [43.8, 26091.0], [43.9, 26095.0], [44.0, 26099.0], [44.1, 26099.0], [44.2, 26102.0], [44.3, 26104.0], [44.4, 26106.0], [44.5, 26106.0], [44.6, 26117.0], [44.7, 26126.0], [44.8, 26128.0], [44.9, 26130.0], [45.0, 26144.0], [45.1, 26152.0], [45.2, 26155.0], [45.3, 26159.0], [45.4, 26160.0], [45.5, 26171.0], [45.6, 26186.0], [45.7, 26187.0], [45.8, 26206.0], [45.9, 26211.0], [46.0, 26215.0], [46.1, 26226.0], [46.2, 26233.0], [46.3, 26237.0], [46.4, 26245.0], [46.5, 26249.0], [46.6, 26254.0], [46.7, 26258.0], [46.8, 26280.0], [46.9, 26282.0], [47.0, 26284.0], [47.1, 26287.0], [47.2, 26290.0], [47.3, 26296.0], [47.4, 26301.0], [47.5, 26305.0], [47.6, 26310.0], [47.7, 26317.0], [47.8, 26317.0], [47.9, 26318.0], [48.0, 26326.0], [48.1, 26330.0], [48.2, 26332.0], [48.3, 26334.0], [48.4, 26346.0], [48.5, 26357.0], [48.6, 26359.0], [48.7, 26359.0], [48.8, 26362.0], [48.9, 26362.0], [49.0, 26387.0], [49.1, 26388.0], [49.2, 26388.0], [49.3, 26389.0], [49.4, 26397.0], [49.5, 26398.0], [49.6, 26400.0], [49.7, 26404.0], [49.8, 26405.0], [49.9, 26411.0], [50.0, 26425.0], [50.1, 26425.0], [50.2, 26450.0], [50.3, 26451.0], [50.4, 26454.0], [50.5, 26455.0], [50.6, 26459.0], [50.7, 26460.0], [50.8, 26461.0], [50.9, 26463.0], [51.0, 26465.0], [51.1, 26465.0], [51.2, 26466.0], [51.3, 26468.0], [51.4, 26469.0], [51.5, 26480.0], [51.6, 26482.0], [51.7, 26493.0], [51.8, 26494.0], [51.9, 26517.0], [52.0, 26520.0], [52.1, 26548.0], [52.2, 26554.0], [52.3, 26564.0], [52.4, 26566.0], [52.5, 26567.0], [52.6, 26568.0], [52.7, 26574.0], [52.8, 26580.0], [52.9, 26581.0], [53.0, 26583.0], [53.1, 26584.0], [53.2, 26589.0], [53.3, 26597.0], [53.4, 26600.0], [53.5, 26601.0], [53.6, 26603.0], [53.7, 26611.0], [53.8, 26611.0], [53.9, 26614.0], [54.0, 26621.0], [54.1, 26622.0], [54.2, 26624.0], [54.3, 26626.0], [54.4, 26633.0], [54.5, 26635.0], [54.6, 26644.0], [54.7, 26650.0], [54.8, 26650.0], [54.9, 26650.0], [55.0, 26653.0], [55.1, 26656.0], [55.2, 26666.0], [55.3, 26666.0], [55.4, 26696.0], [55.5, 26701.0], [55.6, 26708.0], [55.7, 26710.0], [55.8, 26729.0], [55.9, 26735.0], [56.0, 26740.0], [56.1, 26742.0], [56.2, 26745.0], [56.3, 26746.0], [56.4, 26754.0], [56.5, 26761.0], [56.6, 26772.0], [56.7, 26778.0], [56.8, 26778.0], [56.9, 26782.0], [57.0, 26783.0], [57.1, 26785.0], [57.2, 26785.0], [57.3, 26788.0], [57.4, 26789.0], [57.5, 26792.0], [57.6, 26794.0], [57.7, 26795.0], [57.8, 26796.0], [57.9, 26797.0], [58.0, 26800.0], [58.1, 26802.0], [58.2, 26804.0], [58.3, 26807.0], [58.4, 26809.0], [58.5, 26810.0], [58.6, 26812.0], [58.7, 26813.0], [58.8, 26813.0], [58.9, 26814.0], [59.0, 26815.0], [59.1, 26815.0], [59.2, 26816.0], [59.3, 26818.0], [59.4, 26820.0], [59.5, 26824.0], [59.6, 26826.0], [59.7, 26828.0], [59.8, 26828.0], [59.9, 26831.0], [60.0, 26841.0], [60.1, 26843.0], [60.2, 26844.0], [60.3, 26846.0], [60.4, 26846.0], [60.5, 26846.0], [60.6, 26847.0], [60.7, 26848.0], [60.8, 26852.0], [60.9, 26858.0], [61.0, 26866.0], [61.1, 26878.0], [61.2, 26886.0], [61.3, 26890.0], [61.4, 26894.0], [61.5, 26899.0], [61.6, 26913.0], [61.7, 26915.0], [61.8, 26917.0], [61.9, 26917.0], [62.0, 26921.0], [62.1, 26922.0], [62.2, 26926.0], [62.3, 26929.0], [62.4, 26937.0], [62.5, 26937.0], [62.6, 26942.0], [62.7, 26943.0], [62.8, 26944.0], [62.9, 26947.0], [63.0, 26948.0], [63.1, 26949.0], [63.2, 26949.0], [63.3, 26950.0], [63.4, 26950.0], [63.5, 26951.0], [63.6, 26952.0], [63.7, 26954.0], [63.8, 26955.0], [63.9, 26956.0], [64.0, 26958.0], [64.1, 26960.0], [64.2, 26961.0], [64.3, 26963.0], [64.4, 26963.0], [64.5, 26963.0], [64.6, 26966.0], [64.7, 26966.0], [64.8, 26967.0], [64.9, 26969.0], [65.0, 26973.0], [65.1, 26976.0], [65.2, 26976.0], [65.3, 26979.0], [65.4, 26980.0], [65.5, 26989.0], [65.6, 26990.0], [65.7, 26997.0], [65.8, 26999.0], [65.9, 27007.0], [66.0, 27008.0], [66.1, 27008.0], [66.2, 27012.0], [66.3, 27019.0], [66.4, 27020.0], [66.5, 27021.0], [66.6, 27025.0], [66.7, 27026.0], [66.8, 27032.0], [66.9, 27035.0], [67.0, 27056.0], [67.1, 27064.0], [67.2, 27072.0], [67.3, 27073.0], [67.4, 27078.0], [67.5, 27078.0], [67.6, 27083.0], [67.7, 27088.0], [67.8, 27094.0], [67.9, 27096.0], [68.0, 27109.0], [68.1, 27110.0], [68.2, 27129.0], [68.3, 27131.0], [68.4, 27135.0], [68.5, 27143.0], [68.6, 27149.0], [68.7, 27149.0], [68.8, 27149.0], [68.9, 27151.0], [69.0, 27152.0], [69.1, 27157.0], [69.2, 27160.0], [69.3, 27162.0], [69.4, 27169.0], [69.5, 27175.0], [69.6, 27183.0], [69.7, 27192.0], [69.8, 27201.0], [69.9, 27204.0], [70.0, 27210.0], [70.1, 27223.0], [70.2, 27224.0], [70.3, 27229.0], [70.4, 27231.0], [70.5, 27236.0], [70.6, 27246.0], [70.7, 27246.0], [70.8, 27255.0], [70.9, 27255.0], [71.0, 27257.0], [71.1, 27258.0], [71.2, 27261.0], [71.3, 27267.0], [71.4, 27268.0], [71.5, 27270.0], [71.6, 27276.0], [71.7, 27277.0], [71.8, 27280.0], [71.9, 27280.0], [72.0, 27282.0], [72.1, 27288.0], [72.2, 27290.0], [72.3, 27291.0], [72.4, 27292.0], [72.5, 27295.0], [72.6, 27297.0], [72.7, 27297.0], [72.8, 27298.0], [72.9, 27302.0], [73.0, 27303.0], [73.1, 27305.0], [73.2, 27306.0], [73.3, 27307.0], [73.4, 27307.0], [73.5, 27308.0], [73.6, 27308.0], [73.7, 27308.0], [73.8, 27308.0], [73.9, 27309.0], [74.0, 27309.0], [74.1, 27311.0], [74.2, 27311.0], [74.3, 27311.0], [74.4, 27311.0], [74.5, 27312.0], [74.6, 27316.0], [74.7, 27318.0], [74.8, 27320.0], [74.9, 27324.0], [75.0, 27326.0], [75.1, 27327.0], [75.2, 27338.0], [75.3, 27342.0], [75.4, 27344.0], [75.5, 27346.0], [75.6, 27367.0], [75.7, 27370.0], [75.8, 27372.0], [75.9, 27377.0], [76.0, 27378.0], [76.1, 27383.0], [76.2, 27392.0], [76.3, 27393.0], [76.4, 27394.0], [76.5, 27405.0], [76.6, 27412.0], [76.7, 27417.0], [76.8, 27419.0], [76.9, 27421.0], [77.0, 27421.0], [77.1, 27438.0], [77.2, 27444.0], [77.3, 27446.0], [77.4, 27450.0], [77.5, 27457.0], [77.6, 27457.0], [77.7, 27466.0], [77.8, 27470.0], [77.9, 27471.0], [78.0, 27474.0], [78.1, 27476.0], [78.2, 27477.0], [78.3, 27478.0], [78.4, 27489.0], [78.5, 27490.0], [78.6, 27490.0], [78.7, 27497.0], [78.8, 27502.0], [78.9, 27502.0], [79.0, 27509.0], [79.1, 27521.0], [79.2, 27522.0], [79.3, 27523.0], [79.4, 27547.0], [79.5, 27558.0], [79.6, 27558.0], [79.7, 27559.0], [79.8, 27562.0], [79.9, 27563.0], [80.0, 27581.0], [80.1, 27587.0], [80.2, 27597.0], [80.3, 27599.0], [80.4, 27605.0], [80.5, 27606.0], [80.6, 27606.0], [80.7, 27610.0], [80.8, 27610.0], [80.9, 27612.0], [81.0, 27621.0], [81.1, 27621.0], [81.2, 27624.0], [81.3, 27637.0], [81.4, 27638.0], [81.5, 27639.0], [81.6, 27650.0], [81.7, 27658.0], [81.8, 27660.0], [81.9, 27660.0], [82.0, 27662.0], [82.1, 27664.0], [82.2, 27666.0], [82.3, 27668.0], [82.4, 27669.0], [82.5, 27671.0], [82.6, 27680.0], [82.7, 27688.0], [82.8, 27695.0], [82.9, 27696.0], [83.0, 27699.0], [83.1, 27702.0], [83.2, 27706.0], [83.3, 27708.0], [83.4, 27713.0], [83.5, 27716.0], [83.6, 27717.0], [83.7, 27720.0], [83.8, 27733.0], [83.9, 27733.0], [84.0, 27741.0], [84.1, 27742.0], [84.2, 27744.0], [84.3, 27748.0], [84.4, 27748.0], [84.5, 27751.0], [84.6, 27759.0], [84.7, 27768.0], [84.8, 27769.0], [84.9, 27769.0], [85.0, 27772.0], [85.1, 27775.0], [85.2, 27784.0], [85.3, 27815.0], [85.4, 27815.0], [85.5, 27819.0], [85.6, 27822.0], [85.7, 27829.0], [85.8, 27831.0], [85.9, 27831.0], [86.0, 27833.0], [86.1, 27840.0], [86.2, 27841.0], [86.3, 27841.0], [86.4, 27861.0], [86.5, 27870.0], [86.6, 27876.0], [86.7, 27877.0], [86.8, 27881.0], [86.9, 27881.0], [87.0, 27889.0], [87.1, 27899.0], [87.2, 27914.0], [87.3, 27921.0], [87.4, 27925.0], [87.5, 27926.0], [87.6, 27928.0], [87.7, 27941.0], [87.8, 27944.0], [87.9, 27945.0], [88.0, 27954.0], [88.1, 27956.0], [88.2, 27967.0], [88.3, 27970.0], [88.4, 27980.0], [88.5, 27983.0], [88.6, 27988.0], [88.7, 27988.0], [88.8, 27990.0], [88.9, 27995.0], [89.0, 28005.0], [89.1, 28006.0], [89.2, 28006.0], [89.3, 28008.0], [89.4, 28013.0], [89.5, 28016.0], [89.6, 28019.0], [89.7, 28025.0], [89.8, 28026.0], [89.9, 28032.0], [90.0, 28060.0], [90.1, 28061.0], [90.2, 28063.0], [90.3, 28068.0], [90.4, 28070.0], [90.5, 28079.0], [90.6, 28083.0], [90.7, 28085.0], [90.8, 28093.0], [90.9, 28094.0], [91.0, 28099.0], [91.1, 28103.0], [91.2, 28104.0], [91.3, 28106.0], [91.4, 28109.0], [91.5, 28109.0], [91.6, 28111.0], [91.7, 28119.0], [91.8, 28128.0], [91.9, 28130.0], [92.0, 28135.0], [92.1, 28136.0], [92.2, 28140.0], [92.3, 28142.0], [92.4, 28146.0], [92.5, 28147.0], [92.6, 28156.0], [92.7, 28158.0], [92.8, 28161.0], [92.9, 28170.0], [93.0, 28170.0], [93.1, 28175.0], [93.2, 28185.0], [93.3, 28187.0], [93.4, 28189.0], [93.5, 28222.0], [93.6, 28226.0], [93.7, 28246.0], [93.8, 28250.0], [93.9, 28257.0], [94.0, 28267.0], [94.1, 28286.0], [94.2, 28294.0], [94.3, 28305.0], [94.4, 28312.0], [94.5, 28315.0], [94.6, 28317.0], [94.7, 28328.0], [94.8, 28330.0], [94.9, 28330.0], [95.0, 28342.0], [95.1, 28346.0], [95.2, 28355.0], [95.3, 28359.0], [95.4, 28360.0], [95.5, 28371.0], [95.6, 28382.0], [95.7, 28386.0], [95.8, 28389.0], [95.9, 28390.0], [96.0, 28395.0], [96.1, 28396.0], [96.2, 28405.0], [96.3, 28410.0], [96.4, 28421.0], [96.5, 28436.0], [96.6, 28445.0], [96.7, 28466.0], [96.8, 28483.0], [96.9, 28496.0], [97.0, 28497.0], [97.1, 28509.0], [97.2, 28532.0], [97.3, 28550.0], [97.4, 28560.0], [97.5, 28561.0], [97.6, 28563.0], [97.7, 28583.0], [97.8, 28585.0], [97.9, 28609.0], [98.0, 28624.0], [98.1, 28645.0], [98.2, 28650.0], [98.3, 28654.0], [98.4, 28665.0], [98.5, 28667.0], [98.6, 28674.0], [98.7, 28693.0], [98.8, 28699.0], [98.9, 28703.0], [99.0, 28713.0], [99.1, 28719.0], [99.2, 28756.0], [99.3, 28768.0], [99.4, 28779.0], [99.5, 28811.0], [99.6, 28837.0], [99.7, 28852.0], [99.8, 28895.0], [99.9, 29070.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 18100.0, "maxY": 43.0, "series": [{"data": [[18200.0, 1.0], [18100.0, 1.0], [18400.0, 2.0], [19100.0, 2.0], [18800.0, 1.0], [18500.0, 1.0], [18900.0, 1.0], [18600.0, 1.0], [18700.0, 1.0], [19700.0, 2.0], [20000.0, 1.0], [20300.0, 1.0], [20400.0, 1.0], [19900.0, 1.0], [20100.0, 1.0], [20500.0, 3.0], [20700.0, 2.0], [20800.0, 1.0], [21500.0, 4.0], [21400.0, 3.0], [20900.0, 3.0], [21200.0, 1.0], [21300.0, 1.0], [22300.0, 5.0], [21700.0, 2.0], [21600.0, 2.0], [21900.0, 3.0], [22400.0, 3.0], [22500.0, 2.0], [22200.0, 2.0], [22100.0, 4.0], [22000.0, 1.0], [23400.0, 2.0], [22600.0, 6.0], [22700.0, 5.0], [22900.0, 5.0], [22800.0, 2.0], [23000.0, 10.0], [23100.0, 6.0], [23200.0, 7.0], [23500.0, 5.0], [23300.0, 5.0], [23800.0, 10.0], [23600.0, 7.0], [23700.0, 11.0], [24000.0, 6.0], [24100.0, 9.0], [23900.0, 6.0], [24200.0, 4.0], [24300.0, 13.0], [24500.0, 12.0], [24400.0, 15.0], [24700.0, 8.0], [24600.0, 10.0], [24800.0, 11.0], [25000.0, 12.0], [24900.0, 16.0], [25100.0, 24.0], [25300.0, 19.0], [25200.0, 7.0], [25400.0, 15.0], [25500.0, 9.0], [25700.0, 16.0], [25600.0, 26.0], [25800.0, 13.0], [25900.0, 25.0], [26000.0, 24.0], [26100.0, 16.0], [26200.0, 16.0], [26300.0, 22.0], [26400.0, 23.0], [26500.0, 15.0], [26600.0, 21.0], [27400.0, 23.0], [26700.0, 25.0], [26800.0, 36.0], [26900.0, 43.0], [27000.0, 21.0], [27100.0, 18.0], [27300.0, 36.0], [27200.0, 31.0], [27500.0, 17.0], [27600.0, 27.0], [27800.0, 19.0], [27700.0, 22.0], [27900.0, 18.0], [28000.0, 21.0], [28100.0, 24.0], [28300.0, 19.0], [28200.0, 8.0], [28400.0, 9.0], [28500.0, 8.0], [28600.0, 10.0], [28700.0, 6.0], [28800.0, 4.0], [29000.0, 1.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 29000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 505.24099999999953, "minX": 1.75792314E12, "maxY": 505.24099999999953, "series": [{"data": [[1.75792314E12, 505.24099999999953]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792314E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 18103.0, "minX": 1.0, "maxY": 29070.0, "series": [{"data": [[2.0, 28895.0], [3.0, 28713.0], [4.0, 28852.0], [5.0, 28811.0], [6.0, 28654.0], [7.0, 28650.0], [10.0, 28496.666666666668], [11.0, 28837.0], [12.0, 28386.0], [19.0, 26936.0], [21.0, 28435.857142857145], [22.0, 26878.0], [23.0, 28222.0], [26.0, 28475.333333333332], [27.0, 28703.0], [29.0, 27409.5], [31.0, 28372.5], [32.0, 28674.0], [39.0, 26334.0], [38.0, 28256.666666666664], [40.0, 28025.0], [45.0, 28227.4], [46.0, 26332.0], [55.0, 28550.0], [54.0, 28410.5], [58.0, 28449.666666666668], [71.0, 27884.5], [70.0, 28585.0], [68.0, 28305.0], [75.0, 26405.0], [73.0, 28561.0], [72.0, 28364.2], [79.0, 28405.0], [76.0, 28244.5], [80.0, 28355.0], [86.0, 26906.0], [84.0, 28043.636363636364], [91.0, 28169.25], [90.0, 28342.0], [95.0, 27669.5], [94.0, 27699.0], [92.0, 28106.0], [98.0, 28245.0], [96.0, 28371.0], [103.0, 28156.0], [102.0, 27706.0], [100.0, 28328.0], [113.0, 27819.0], [116.0, 27982.0], [122.0, 27664.0], [121.0, 26824.0], [120.0, 28080.5], [127.0, 27610.0], [126.0, 28032.0], [125.0, 27077.0], [124.0, 28135.0], [135.0, 28140.0], [134.0, 28117.5], [132.0, 27985.666666666668], [130.0, 28085.5], [129.0, 28170.0], [128.0, 27923.5], [143.0, 27603.0], [142.0, 27766.5], [140.0, 27991.5], [138.0, 27673.5], [139.0, 26404.0], [151.0, 26550.666666666668], [150.0, 27606.0], [149.0, 27875.0], [146.0, 25900.0], [145.0, 27769.0], [156.0, 26024.0], [155.0, 27521.0], [154.0, 27335.333333333332], [164.0, 27754.0], [161.0, 27775.0], [160.0, 27842.25], [189.0, 27624.0], [187.0, 27994.666666666668], [186.0, 27579.857142857145], [185.0, 28107.5], [199.0, 27815.0], [194.0, 27595.933333333334], [192.0, 27148.0], [207.0, 27344.125000000004], [211.0, 27716.0], [223.0, 27790.5], [221.0, 27669.0], [219.0, 27270.0], [218.0, 27315.374999999996], [216.0, 27392.0], [226.0, 27372.0], [225.0, 27833.0], [224.0, 27861.0], [232.0, 27052.5], [246.0, 27748.0], [245.0, 27124.8], [243.0, 27357.0], [254.0, 27073.0], [263.0, 27012.0], [262.0, 27188.2], [260.0, 27412.0], [259.0, 26948.666666666668], [258.0, 27696.0], [257.0, 26479.5], [256.0, 26691.666666666668], [287.0, 27476.0], [283.0, 25393.0], [282.0, 27658.0], [281.0, 26707.5], [279.0, 26207.5], [278.0, 27509.0], [277.0, 27666.0], [275.0, 27204.0], [274.0, 27660.0], [302.0, 26701.0], [301.0, 27522.0], [294.0, 27122.375], [290.0, 27276.0], [288.0, 26926.0], [316.0, 27561.333333333332], [313.0, 27311.5], [312.0, 27290.0], [309.0, 27587.0], [308.0, 26990.2], [306.0, 27297.0], [350.0, 27000.772727272724], [349.0, 25868.666666666668], [348.0, 25360.0], [358.0, 26914.333333333332], [357.0, 27502.0], [356.0, 27324.0], [354.0, 27351.333333333332], [353.0, 27280.0], [352.0, 27330.25], [383.0, 26831.0], [380.0, 26841.0], [379.0, 26611.0], [378.0, 26484.0], [377.0, 26665.5], [376.0, 26979.0], [373.0, 26942.0], [372.0, 26921.0], [397.0, 26894.0], [399.0, 26580.0], [396.0, 26945.0], [395.0, 27176.0], [394.0, 27089.5], [391.0, 26666.0], [388.0, 25109.0], [387.0, 27026.0], [386.0, 26979.5], [414.0, 27232.5], [415.0, 26336.0], [412.0, 26635.0], [410.0, 27172.0], [409.0, 26387.5], [406.0, 27292.0], [405.0, 26937.5], [403.0, 27305.0], [400.0, 25143.0], [418.0, 26001.5], [429.0, 24971.0], [430.0, 25131.0], [428.0, 27025.0], [427.0, 27087.5], [424.0, 26980.0], [423.0, 27129.0], [420.0, 27052.666666666668], [417.0, 27230.0], [416.0, 27291.0], [435.0, 27327.0], [447.0, 26861.0], [445.0, 26791.666666666668], [442.0, 26375.0], [438.0, 26039.5], [437.0, 26796.0], [434.0, 27298.0], [433.0, 27109.428571428572], [432.0, 26297.5], [455.0, 26846.6], [450.0, 26398.0], [449.0, 26613.5], [478.0, 26468.0], [469.0, 26886.5], [465.0, 24719.0], [464.0, 26619.444444444445], [494.0, 26737.555555555555], [492.0, 26280.0], [490.0, 26152.75], [489.0, 26590.14285714286], [484.0, 25801.5], [488.0, 26810.0], [511.0, 26899.0], [510.0, 26951.0], [507.0, 25605.0], [506.0, 26603.0], [501.0, 26729.0], [497.0, 26958.0], [496.0, 26891.0], [528.0, 26728.5], [538.0, 26714.916666666664], [518.0, 26794.666666666668], [517.0, 26949.0], [515.0, 26601.0], [514.0, 26564.0], [513.0, 26217.25], [535.0, 26772.0], [534.0, 26990.0], [532.0, 26566.0], [527.0, 26785.0], [526.0, 26581.0], [524.0, 25563.0], [523.0, 26708.0], [521.0, 26249.0], [520.0, 26821.5], [561.0, 26846.0], [568.0, 26289.69230769231], [548.0, 26317.0], [546.0, 26701.0], [547.0, 26666.0], [566.0, 26808.0], [564.0, 24469.0], [563.0, 26632.333333333332], [559.0, 24663.5], [554.0, 25639.5], [553.0, 26460.0], [552.0, 26818.0], [583.0, 25619.0], [603.0, 25748.0], [604.0, 26302.5], [602.0, 26455.0], [590.0, 26240.5], [588.0, 26113.0], [587.0, 26701.0], [584.0, 26788.0], [578.0, 26457.0], [576.0, 25736.333333333332], [577.0, 25469.0], [614.0, 26186.0], [635.0, 26128.0], [634.0, 25537.0], [633.0, 26134.85714285714], [628.0, 26359.0], [623.0, 26359.0], [617.0, 25979.666666666668], [613.0, 26148.5], [611.0, 24513.0], [610.0, 25952.0], [609.0, 26400.0], [608.0, 25891.0], [666.0, 26106.0], [670.0, 25764.0], [665.0, 26087.0], [641.0, 25614.833333333336], [663.0, 25873.333333333332], [661.0, 25641.0], [659.0, 25554.333333333332], [658.0, 23890.0], [655.0, 25673.0], [654.0, 26060.0], [653.0, 25629.0], [652.0, 25605.0], [702.0, 25594.857142857145], [695.0, 25464.0], [694.0, 24415.0], [689.0, 25369.5], [686.0, 25233.333333333332], [685.0, 25858.666666666668], [681.0, 25049.25], [678.0, 25330.0], [672.0, 24775.5], [735.0, 25146.571428571428], [728.0, 25518.0], [710.0, 25996.5], [726.0, 25643.0], [725.0, 25690.0], [723.0, 25929.0], [722.0, 25298.0], [718.0, 25951.0], [717.0, 25756.375], [716.0, 25679.0], [715.0, 26018.0], [714.0, 25630.0], [712.0, 25984.0], [741.0, 25558.0], [766.0, 24555.8], [761.0, 25377.5], [759.0, 25499.0], [757.0, 23619.0], [756.0, 24949.4], [751.0, 24785.0], [749.0, 24984.666666666668], [747.0, 25486.0], [737.0, 25237.0], [736.0, 25782.0], [790.0, 25082.5], [788.0, 25153.900000000005], [778.0, 24723.8], [768.0, 25221.5], [827.0, 24660.5], [829.0, 23883.0], [830.0, 24234.0], [828.0, 23830.0], [825.0, 24393.0], [819.0, 24803.0], [818.0, 24401.777777777777], [809.0, 24837.8], [803.0, 24702.0], [802.0, 24573.249999999996], [804.0, 24803.0], [862.0, 24403.0], [863.0, 22624.0], [858.0, 24236.0], [856.0, 24677.0], [855.0, 24100.0], [850.0, 24622.666666666668], [849.0, 23291.0], [848.0, 24696.0], [845.0, 24382.0], [835.0, 23720.0], [838.0, 23830.0], [836.0, 24800.25], [844.0, 24527.0], [841.0, 24446.25], [840.0, 24743.5], [882.0, 22823.0], [894.0, 23711.0], [893.0, 23916.333333333332], [890.0, 23827.0], [889.0, 23806.25], [879.0, 24319.0], [870.0, 24422.0], [868.0, 23952.75], [878.0, 24197.0], [877.0, 24296.6], [872.0, 24354.0], [885.0, 23992.0], [884.0, 21912.0], [883.0, 22460.0], [880.0, 24302.0], [922.0, 23199.0], [924.0, 22277.0], [926.0, 23331.5], [923.0, 23432.0], [921.0, 23012.5], [900.0, 23726.0], [899.0, 23674.0], [898.0, 22994.0], [897.0, 23960.666666666668], [917.0, 23065.0], [914.0, 23351.5], [910.0, 22874.0], [909.0, 24091.0], [908.0, 23573.0], [905.0, 23818.4], [956.0, 21918.25], [952.0, 21762.5], [950.0, 22917.0], [949.0, 22644.0], [948.0, 23039.0], [947.0, 22451.916666666664], [939.0, 23087.0], [929.0, 21347.0], [928.0, 22122.5], [934.0, 22956.0], [933.0, 22637.5], [931.0, 23141.5], [985.0, 20533.5], [990.0, 19750.0], [991.0, 18605.0], [977.0, 20966.0], [979.0, 20183.0], [978.0, 21536.0], [989.0, 19239.5], [987.0, 20071.0], [986.0, 20515.0], [975.0, 21508.0], [962.0, 22148.666666666668], [965.0, 22515.75], [963.0, 22003.5], [967.0, 22391.0], [966.0, 22466.0], [974.0, 20734.0], [973.0, 21702.0], [972.0, 21684.0], [971.0, 21768.0], [970.0, 21794.0], [968.0, 20902.0], [983.0, 20474.0], [982.0, 20521.0], [981.0, 20814.0], [980.0, 19943.0], [1000.0, 18244.0], [999.0, 18103.0], [998.0, 18821.0], [996.0, 18997.0], [994.0, 18650.333333333332], [1.0, 29070.0]], "isOverall": false, "label": "สร้าง Visit", "isController": false}, {"data": [[505.237, 25976.68999999999]], "isOverall": false, "label": "สร้าง Visit-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8883.333333333334, "minX": 1.75792314E12, "maxY": 11683.333333333334, "series": [{"data": [[1.75792314E12, 11683.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75792314E12, 8883.333333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792314E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25976.68999999999, "minX": 1.75792314E12, "maxY": 25976.68999999999, "series": [{"data": [[1.75792314E12, 25976.68999999999]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792314E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 25976.668000000023, "minX": 1.75792314E12, "maxY": 25976.668000000023, "series": [{"data": [[1.75792314E12, 25976.668000000023]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792314E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1583.5980000000009, "minX": 1.75792314E12, "maxY": 1583.5980000000009, "series": [{"data": [[1.75792314E12, 1583.5980000000009]], "isOverall": false, "label": "สร้าง Visit", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792314E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 18103.0, "minX": 1.75792314E12, "maxY": 29070.0, "series": [{"data": [[1.75792314E12, 29070.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75792314E12, 28057.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75792314E12, 28712.9]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75792314E12, 28341.399999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75792314E12, 18103.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75792314E12, 26425.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792314E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 18173.5, "minX": 2.0, "maxY": 28387.5, "series": [{"data": [[2.0, 18173.5], [8.0, 18709.5], [4.0, 19751.0], [274.0, 26809.5], [84.0, 28387.5], [44.0, 22609.0], [45.0, 23711.0], [176.0, 25762.5], [13.0, 21536.0], [111.0, 24690.0], [7.0, 20515.0], [232.0, 27610.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 274.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 18171.0, "minX": 2.0, "maxY": 28387.5, "series": [{"data": [[2.0, 18171.0], [8.0, 18709.5], [4.0, 19751.0], [274.0, 26809.5], [84.0, 28387.5], [44.0, 22609.0], [45.0, 23711.0], [176.0, 25762.5], [13.0, 21536.0], [111.0, 24690.0], [7.0, 20515.0], [232.0, 27610.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 274.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792314E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792314E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792314E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792314E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792314E12, 16.666666666666668]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75792314E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792314E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792314E12, 16.666666666666668]], "isOverall": false, "label": "สร้าง Visit-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792314E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75792314E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75792314E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75792314E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

