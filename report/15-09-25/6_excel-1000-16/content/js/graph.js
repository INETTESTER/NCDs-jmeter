/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1447.0, "minX": 0.0, "maxY": 20743.0, "series": [{"data": [[0.0, 1447.0], [0.1, 1482.0], [0.2, 1508.0], [0.3, 1508.0], [0.4, 1577.0], [0.5, 1588.0], [0.6, 1597.0], [0.7, 1641.0], [0.8, 1644.0], [0.9, 1655.0], [1.0, 1659.0], [1.1, 1682.0], [1.2, 1708.0], [1.3, 1709.0], [1.4, 1709.0], [1.5, 1768.0], [1.6, 1774.0], [1.7, 1788.0], [1.8, 1808.0], [1.9, 1823.0], [2.0, 1825.0], [2.1, 1829.0], [2.2, 1852.0], [2.3, 1880.0], [2.4, 1903.0], [2.5, 1926.0], [2.6, 1927.0], [2.7, 1946.0], [2.8, 1954.0], [2.9, 1977.0], [3.0, 1998.0], [3.1, 2002.0], [3.2, 2003.0], [3.3, 2009.0], [3.4, 2014.0], [3.5, 2016.0], [3.6, 2024.0], [3.7, 2041.0], [3.8, 2058.0], [3.9, 2066.0], [4.0, 2066.0], [4.1, 2075.0], [4.2, 2087.0], [4.3, 2095.0], [4.4, 2119.0], [4.5, 2121.0], [4.6, 2123.0], [4.7, 2125.0], [4.8, 2142.0], [4.9, 2147.0], [5.0, 2160.0], [5.1, 2176.0], [5.2, 2176.0], [5.3, 2197.0], [5.4, 2236.0], [5.5, 2264.0], [5.6, 2267.0], [5.7, 2290.0], [5.8, 2292.0], [5.9, 2306.0], [6.0, 2312.0], [6.1, 2325.0], [6.2, 2334.0], [6.3, 2344.0], [6.4, 2344.0], [6.5, 2365.0], [6.6, 2367.0], [6.7, 2373.0], [6.8, 2383.0], [6.9, 2386.0], [7.0, 2392.0], [7.1, 2394.0], [7.2, 2398.0], [7.3, 2407.0], [7.4, 2432.0], [7.5, 2445.0], [7.6, 2449.0], [7.7, 2449.0], [7.8, 2456.0], [7.9, 2485.0], [8.0, 2556.0], [8.1, 2565.0], [8.2, 2588.0], [8.3, 2599.0], [8.4, 2601.0], [8.5, 2634.0], [8.6, 2663.0], [8.7, 2715.0], [8.8, 2807.0], [8.9, 2861.0], [9.0, 2901.0], [9.1, 2916.0], [9.2, 2943.0], [9.3, 2952.0], [9.4, 2954.0], [9.5, 2955.0], [9.6, 2989.0], [9.7, 3011.0], [9.8, 3137.0], [9.9, 3151.0], [10.0, 3186.0], [10.1, 3643.0], [10.2, 3850.0], [10.3, 3922.0], [10.4, 4130.0], [10.5, 4396.0], [10.6, 4397.0], [10.7, 4476.0], [10.8, 4530.0], [10.9, 4592.0], [11.0, 4621.0], [11.1, 4623.0], [11.2, 5198.0], [11.3, 5223.0], [11.4, 5334.0], [11.5, 5358.0], [11.6, 5468.0], [11.7, 5490.0], [11.8, 5755.0], [11.9, 5857.0], [12.0, 5975.0], [12.1, 6401.0], [12.2, 7960.0], [12.3, 8048.0], [12.4, 8053.0], [12.5, 8096.0], [12.6, 8240.0], [12.7, 8453.0], [12.8, 8512.0], [12.9, 8520.0], [13.0, 8538.0], [13.1, 8559.0], [13.2, 8562.0], [13.3, 8587.0], [13.4, 8604.0], [13.5, 8691.0], [13.6, 8863.0], [13.7, 8885.0], [13.8, 8924.0], [13.9, 9025.0], [14.0, 9048.0], [14.1, 9053.0], [14.2, 9059.0], [14.3, 9149.0], [14.4, 9193.0], [14.5, 9224.0], [14.6, 9711.0], [14.7, 10130.0], [14.8, 10226.0], [14.9, 10236.0], [15.0, 10275.0], [15.1, 10349.0], [15.2, 10368.0], [15.3, 10376.0], [15.4, 10642.0], [15.5, 10706.0], [15.6, 10709.0], [15.7, 10749.0], [15.8, 10860.0], [15.9, 10860.0], [16.0, 10935.0], [16.1, 10968.0], [16.2, 10980.0], [16.3, 11050.0], [16.4, 11062.0], [16.5, 11073.0], [16.6, 11075.0], [16.7, 11077.0], [16.8, 11136.0], [16.9, 11159.0], [17.0, 11170.0], [17.1, 11263.0], [17.2, 11271.0], [17.3, 11360.0], [17.4, 11422.0], [17.5, 11463.0], [17.6, 11482.0], [17.7, 11490.0], [17.8, 11490.0], [17.9, 11493.0], [18.0, 11495.0], [18.1, 11510.0], [18.2, 11550.0], [18.3, 11564.0], [18.4, 11604.0], [18.5, 11620.0], [18.6, 11682.0], [18.7, 11695.0], [18.8, 11703.0], [18.9, 11716.0], [19.0, 11721.0], [19.1, 11731.0], [19.2, 11731.0], [19.3, 11732.0], [19.4, 11777.0], [19.5, 11780.0], [19.6, 11811.0], [19.7, 11825.0], [19.8, 11829.0], [19.9, 11865.0], [20.0, 12080.0], [20.1, 12087.0], [20.2, 12120.0], [20.3, 12126.0], [20.4, 12127.0], [20.5, 12144.0], [20.6, 12145.0], [20.7, 12156.0], [20.8, 12161.0], [20.9, 12192.0], [21.0, 12214.0], [21.1, 12221.0], [21.2, 12233.0], [21.3, 12237.0], [21.4, 12255.0], [21.5, 12278.0], [21.6, 12281.0], [21.7, 12282.0], [21.8, 12283.0], [21.9, 12284.0], [22.0, 12291.0], [22.1, 12293.0], [22.2, 12323.0], [22.3, 12325.0], [22.4, 12328.0], [22.5, 12331.0], [22.6, 12333.0], [22.7, 12339.0], [22.8, 12342.0], [22.9, 12371.0], [23.0, 12372.0], [23.1, 12431.0], [23.2, 12454.0], [23.3, 12478.0], [23.4, 12484.0], [23.5, 12489.0], [23.6, 12489.0], [23.7, 12507.0], [23.8, 12511.0], [23.9, 12547.0], [24.0, 12595.0], [24.1, 12657.0], [24.2, 12659.0], [24.3, 12668.0], [24.4, 12668.0], [24.5, 12698.0], [24.6, 12707.0], [24.7, 12707.0], [24.8, 12745.0], [24.9, 12750.0], [25.0, 12794.0], [25.1, 12802.0], [25.2, 12828.0], [25.3, 12855.0], [25.4, 12956.0], [25.5, 12983.0], [25.6, 12986.0], [25.7, 13078.0], [25.8, 13080.0], [25.9, 13209.0], [26.0, 13237.0], [26.1, 13254.0], [26.2, 13268.0], [26.3, 13305.0], [26.4, 13321.0], [26.5, 13335.0], [26.6, 13358.0], [26.7, 13378.0], [26.8, 13390.0], [26.9, 13421.0], [27.0, 13431.0], [27.1, 13462.0], [27.2, 13491.0], [27.3, 13502.0], [27.4, 13503.0], [27.5, 13515.0], [27.6, 13522.0], [27.7, 13569.0], [27.8, 13624.0], [27.9, 13643.0], [28.0, 13666.0], [28.1, 13669.0], [28.2, 13680.0], [28.3, 13689.0], [28.4, 13694.0], [28.5, 13699.0], [28.6, 13707.0], [28.7, 13715.0], [28.8, 13770.0], [28.9, 13770.0], [29.0, 13783.0], [29.1, 13793.0], [29.2, 13803.0], [29.3, 13808.0], [29.4, 13832.0], [29.5, 13849.0], [29.6, 13851.0], [29.7, 13852.0], [29.8, 13854.0], [29.9, 13857.0], [30.0, 13868.0], [30.1, 13870.0], [30.2, 13892.0], [30.3, 13892.0], [30.4, 13910.0], [30.5, 13910.0], [30.6, 13913.0], [30.7, 13924.0], [30.8, 13933.0], [30.9, 13950.0], [31.0, 13964.0], [31.1, 13971.0], [31.2, 13974.0], [31.3, 13978.0], [31.4, 13989.0], [31.5, 13997.0], [31.6, 14003.0], [31.7, 14005.0], [31.8, 14008.0], [31.9, 14008.0], [32.0, 14021.0], [32.1, 14024.0], [32.2, 14026.0], [32.3, 14042.0], [32.4, 14052.0], [32.5, 14069.0], [32.6, 14080.0], [32.7, 14083.0], [32.8, 14122.0], [32.9, 14159.0], [33.0, 14250.0], [33.1, 14263.0], [33.2, 14318.0], [33.3, 14318.0], [33.4, 14351.0], [33.5, 14364.0], [33.6, 14413.0], [33.7, 14434.0], [33.8, 14488.0], [33.9, 14497.0], [34.0, 14527.0], [34.1, 14543.0], [34.2, 14571.0], [34.3, 14586.0], [34.4, 14634.0], [34.5, 14637.0], [34.6, 14645.0], [34.7, 14649.0], [34.8, 14658.0], [34.9, 14677.0], [35.0, 14696.0], [35.1, 14710.0], [35.2, 14726.0], [35.3, 14763.0], [35.4, 14765.0], [35.5, 14779.0], [35.6, 14801.0], [35.7, 14809.0], [35.8, 14826.0], [35.9, 14887.0], [36.0, 14942.0], [36.1, 14944.0], [36.2, 14957.0], [36.3, 15003.0], [36.4, 15009.0], [36.5, 15033.0], [36.6, 15038.0], [36.7, 15045.0], [36.8, 15049.0], [36.9, 15065.0], [37.0, 15081.0], [37.1, 15107.0], [37.2, 15109.0], [37.3, 15181.0], [37.4, 15204.0], [37.5, 15216.0], [37.6, 15297.0], [37.7, 15322.0], [37.8, 15323.0], [37.9, 15351.0], [38.0, 15407.0], [38.1, 15419.0], [38.2, 15433.0], [38.3, 15462.0], [38.4, 15465.0], [38.5, 15478.0], [38.6, 15494.0], [38.7, 15502.0], [38.8, 15505.0], [38.9, 15514.0], [39.0, 15547.0], [39.1, 15558.0], [39.2, 15604.0], [39.3, 15627.0], [39.4, 15647.0], [39.5, 15649.0], [39.6, 15650.0], [39.7, 15742.0], [39.8, 15770.0], [39.9, 15809.0], [40.0, 15816.0], [40.1, 15847.0], [40.2, 15858.0], [40.3, 15866.0], [40.4, 15886.0], [40.5, 15892.0], [40.6, 15896.0], [40.7, 15899.0], [40.8, 15904.0], [40.9, 15925.0], [41.0, 15968.0], [41.1, 15969.0], [41.2, 15987.0], [41.3, 15988.0], [41.4, 15994.0], [41.5, 16007.0], [41.6, 16010.0], [41.7, 16014.0], [41.8, 16020.0], [41.9, 16033.0], [42.0, 16043.0], [42.1, 16046.0], [42.2, 16046.0], [42.3, 16055.0], [42.4, 16076.0], [42.5, 16076.0], [42.6, 16080.0], [42.7, 16085.0], [42.8, 16088.0], [42.9, 16094.0], [43.0, 16095.0], [43.1, 16108.0], [43.2, 16112.0], [43.3, 16130.0], [43.4, 16153.0], [43.5, 16159.0], [43.6, 16172.0], [43.7, 16184.0], [43.8, 16205.0], [43.9, 16212.0], [44.0, 16243.0], [44.1, 16243.0], [44.2, 16251.0], [44.3, 16260.0], [44.4, 16262.0], [44.5, 16286.0], [44.6, 16289.0], [44.7, 16294.0], [44.8, 16310.0], [44.9, 16310.0], [45.0, 16321.0], [45.1, 16337.0], [45.2, 16356.0], [45.3, 16360.0], [45.4, 16361.0], [45.5, 16370.0], [45.6, 16387.0], [45.7, 16396.0], [45.8, 16417.0], [45.9, 16418.0], [46.0, 16426.0], [46.1, 16428.0], [46.2, 16433.0], [46.3, 16458.0], [46.4, 16458.0], [46.5, 16465.0], [46.6, 16479.0], [46.7, 16480.0], [46.8, 16502.0], [46.9, 16503.0], [47.0, 16513.0], [47.1, 16524.0], [47.2, 16528.0], [47.3, 16530.0], [47.4, 16545.0], [47.5, 16553.0], [47.6, 16578.0], [47.7, 16590.0], [47.8, 16602.0], [47.9, 16627.0], [48.0, 16631.0], [48.1, 16634.0], [48.2, 16648.0], [48.3, 16674.0], [48.4, 16702.0], [48.5, 16703.0], [48.6, 16703.0], [48.7, 16704.0], [48.8, 16723.0], [48.9, 16749.0], [49.0, 16766.0], [49.1, 16767.0], [49.2, 16781.0], [49.3, 16783.0], [49.4, 16789.0], [49.5, 16829.0], [49.6, 16837.0], [49.7, 16839.0], [49.8, 16842.0], [49.9, 16851.0], [50.0, 16857.0], [50.1, 16860.0], [50.2, 16863.0], [50.3, 16871.0], [50.4, 16883.0], [50.5, 16897.0], [50.6, 16914.0], [50.7, 16917.0], [50.8, 16920.0], [50.9, 16939.0], [51.0, 16950.0], [51.1, 16970.0], [51.2, 16976.0], [51.3, 16979.0], [51.4, 16980.0], [51.5, 16995.0], [51.6, 16996.0], [51.7, 16998.0], [51.8, 17001.0], [51.9, 17002.0], [52.0, 17004.0], [52.1, 17015.0], [52.2, 17026.0], [52.3, 17038.0], [52.4, 17056.0], [52.5, 17060.0], [52.6, 17064.0], [52.7, 17085.0], [52.8, 17086.0], [52.9, 17086.0], [53.0, 17090.0], [53.1, 17111.0], [53.2, 17115.0], [53.3, 17118.0], [53.4, 17130.0], [53.5, 17132.0], [53.6, 17138.0], [53.7, 17146.0], [53.8, 17190.0], [53.9, 17197.0], [54.0, 17203.0], [54.1, 17203.0], [54.2, 17204.0], [54.3, 17205.0], [54.4, 17205.0], [54.5, 17207.0], [54.6, 17210.0], [54.7, 17214.0], [54.8, 17230.0], [54.9, 17233.0], [55.0, 17237.0], [55.1, 17247.0], [55.2, 17252.0], [55.3, 17254.0], [55.4, 17263.0], [55.5, 17265.0], [55.6, 17265.0], [55.7, 17267.0], [55.8, 17284.0], [55.9, 17287.0], [56.0, 17290.0], [56.1, 17290.0], [56.2, 17300.0], [56.3, 17301.0], [56.4, 17303.0], [56.5, 17305.0], [56.6, 17305.0], [56.7, 17310.0], [56.8, 17326.0], [56.9, 17330.0], [57.0, 17332.0], [57.1, 17333.0], [57.2, 17343.0], [57.3, 17347.0], [57.4, 17355.0], [57.5, 17356.0], [57.6, 17356.0], [57.7, 17371.0], [57.8, 17378.0], [57.9, 17380.0], [58.0, 17389.0], [58.1, 17394.0], [58.2, 17401.0], [58.3, 17409.0], [58.4, 17413.0], [58.5, 17424.0], [58.6, 17426.0], [58.7, 17433.0], [58.8, 17449.0], [58.9, 17450.0], [59.0, 17460.0], [59.1, 17466.0], [59.2, 17477.0], [59.3, 17483.0], [59.4, 17484.0], [59.5, 17497.0], [59.6, 17500.0], [59.7, 17503.0], [59.8, 17507.0], [59.9, 17507.0], [60.0, 17508.0], [60.1, 17514.0], [60.2, 17515.0], [60.3, 17516.0], [60.4, 17521.0], [60.5, 17522.0], [60.6, 17524.0], [60.7, 17530.0], [60.8, 17531.0], [60.9, 17537.0], [61.0, 17539.0], [61.1, 17551.0], [61.2, 17567.0], [61.3, 17569.0], [61.4, 17570.0], [61.5, 17571.0], [61.6, 17580.0], [61.7, 17590.0], [61.8, 17602.0], [61.9, 17604.0], [62.0, 17610.0], [62.1, 17636.0], [62.2, 17643.0], [62.3, 17645.0], [62.4, 17648.0], [62.5, 17657.0], [62.6, 17659.0], [62.7, 17662.0], [62.8, 17664.0], [62.9, 17673.0], [63.0, 17675.0], [63.1, 17677.0], [63.2, 17688.0], [63.3, 17693.0], [63.4, 17695.0], [63.5, 17706.0], [63.6, 17706.0], [63.7, 17715.0], [63.8, 17718.0], [63.9, 17720.0], [64.0, 17723.0], [64.1, 17725.0], [64.2, 17726.0], [64.3, 17727.0], [64.4, 17731.0], [64.5, 17732.0], [64.6, 17739.0], [64.7, 17745.0], [64.8, 17767.0], [64.9, 17771.0], [65.0, 17781.0], [65.1, 17782.0], [65.2, 17786.0], [65.3, 17792.0], [65.4, 17796.0], [65.5, 17800.0], [65.6, 17801.0], [65.7, 17803.0], [65.8, 17806.0], [65.9, 17811.0], [66.0, 17813.0], [66.1, 17817.0], [66.2, 17817.0], [66.3, 17835.0], [66.4, 17841.0], [66.5, 17843.0], [66.6, 17846.0], [66.7, 17848.0], [66.8, 17852.0], [66.9, 17852.0], [67.0, 17861.0], [67.1, 17871.0], [67.2, 17879.0], [67.3, 17883.0], [67.4, 17886.0], [67.5, 17901.0], [67.6, 17902.0], [67.7, 17902.0], [67.8, 17904.0], [67.9, 17906.0], [68.0, 17907.0], [68.1, 17908.0], [68.2, 17908.0], [68.3, 17909.0], [68.4, 17914.0], [68.5, 17924.0], [68.6, 17926.0], [68.7, 17928.0], [68.8, 17933.0], [68.9, 17944.0], [69.0, 17945.0], [69.1, 17951.0], [69.2, 17954.0], [69.3, 17955.0], [69.4, 17961.0], [69.5, 17964.0], [69.6, 17966.0], [69.7, 17966.0], [69.8, 17975.0], [69.9, 17976.0], [70.0, 17982.0], [70.1, 17982.0], [70.2, 17991.0], [70.3, 17997.0], [70.4, 17998.0], [70.5, 17998.0], [70.6, 18003.0], [70.7, 18004.0], [70.8, 18010.0], [70.9, 18013.0], [71.0, 18014.0], [71.1, 18021.0], [71.2, 18023.0], [71.3, 18026.0], [71.4, 18035.0], [71.5, 18043.0], [71.6, 18043.0], [71.7, 18045.0], [71.8, 18058.0], [71.9, 18077.0], [72.0, 18079.0], [72.1, 18080.0], [72.2, 18080.0], [72.3, 18083.0], [72.4, 18090.0], [72.5, 18091.0], [72.6, 18096.0], [72.7, 18098.0], [72.8, 18098.0], [72.9, 18099.0], [73.0, 18100.0], [73.1, 18107.0], [73.2, 18107.0], [73.3, 18111.0], [73.4, 18114.0], [73.5, 18124.0], [73.6, 18128.0], [73.7, 18133.0], [73.8, 18138.0], [73.9, 18141.0], [74.0, 18146.0], [74.1, 18150.0], [74.2, 18151.0], [74.3, 18154.0], [74.4, 18157.0], [74.5, 18157.0], [74.6, 18160.0], [74.7, 18171.0], [74.8, 18180.0], [74.9, 18192.0], [75.0, 18193.0], [75.1, 18207.0], [75.2, 18208.0], [75.3, 18209.0], [75.4, 18215.0], [75.5, 18227.0], [75.6, 18229.0], [75.7, 18240.0], [75.8, 18243.0], [75.9, 18251.0], [76.0, 18254.0], [76.1, 18263.0], [76.2, 18266.0], [76.3, 18267.0], [76.4, 18272.0], [76.5, 18277.0], [76.6, 18279.0], [76.7, 18295.0], [76.8, 18295.0], [76.9, 18302.0], [77.0, 18306.0], [77.1, 18317.0], [77.2, 18317.0], [77.3, 18325.0], [77.4, 18326.0], [77.5, 18326.0], [77.6, 18326.0], [77.7, 18335.0], [77.8, 18336.0], [77.9, 18346.0], [78.0, 18350.0], [78.1, 18354.0], [78.2, 18361.0], [78.3, 18365.0], [78.4, 18375.0], [78.5, 18381.0], [78.6, 18381.0], [78.7, 18388.0], [78.8, 18388.0], [78.9, 18389.0], [79.0, 18390.0], [79.1, 18392.0], [79.2, 18394.0], [79.3, 18396.0], [79.4, 18398.0], [79.5, 18410.0], [79.6, 18410.0], [79.7, 18410.0], [79.8, 18413.0], [79.9, 18414.0], [80.0, 18428.0], [80.1, 18438.0], [80.2, 18441.0], [80.3, 18443.0], [80.4, 18449.0], [80.5, 18449.0], [80.6, 18450.0], [80.7, 18450.0], [80.8, 18456.0], [80.9, 18456.0], [81.0, 18468.0], [81.1, 18468.0], [81.2, 18476.0], [81.3, 18481.0], [81.4, 18488.0], [81.5, 18491.0], [81.6, 18493.0], [81.7, 18494.0], [81.8, 18499.0], [81.9, 18499.0], [82.0, 18500.0], [82.1, 18503.0], [82.2, 18507.0], [82.3, 18508.0], [82.4, 18511.0], [82.5, 18515.0], [82.6, 18517.0], [82.7, 18522.0], [82.8, 18523.0], [82.9, 18525.0], [83.0, 18533.0], [83.1, 18534.0], [83.2, 18535.0], [83.3, 18536.0], [83.4, 18538.0], [83.5, 18540.0], [83.6, 18543.0], [83.7, 18545.0], [83.8, 18545.0], [83.9, 18547.0], [84.0, 18549.0], [84.1, 18553.0], [84.2, 18556.0], [84.3, 18557.0], [84.4, 18560.0], [84.5, 18564.0], [84.6, 18567.0], [84.7, 18567.0], [84.8, 18568.0], [84.9, 18572.0], [85.0, 18573.0], [85.1, 18573.0], [85.2, 18579.0], [85.3, 18581.0], [85.4, 18583.0], [85.5, 18583.0], [85.6, 18584.0], [85.7, 18587.0], [85.8, 18594.0], [85.9, 18595.0], [86.0, 18599.0], [86.1, 18599.0], [86.2, 18610.0], [86.3, 18611.0], [86.4, 18614.0], [86.5, 18617.0], [86.6, 18617.0], [86.7, 18629.0], [86.8, 18637.0], [86.9, 18644.0], [87.0, 18654.0], [87.1, 18657.0], [87.2, 18660.0], [87.3, 18663.0], [87.4, 18674.0], [87.5, 18686.0], [87.6, 18689.0], [87.7, 18690.0], [87.8, 18691.0], [87.9, 18698.0], [88.0, 18700.0], [88.1, 18700.0], [88.2, 18702.0], [88.3, 18707.0], [88.4, 18709.0], [88.5, 18717.0], [88.6, 18722.0], [88.7, 18724.0], [88.8, 18728.0], [88.9, 18737.0], [89.0, 18740.0], [89.1, 18753.0], [89.2, 18757.0], [89.3, 18758.0], [89.4, 18775.0], [89.5, 18780.0], [89.6, 18780.0], [89.7, 18788.0], [89.8, 18796.0], [89.9, 18797.0], [90.0, 18799.0], [90.1, 18802.0], [90.2, 18805.0], [90.3, 18806.0], [90.4, 18808.0], [90.5, 18809.0], [90.6, 18812.0], [90.7, 18814.0], [90.8, 18816.0], [90.9, 18817.0], [91.0, 18817.0], [91.1, 18825.0], [91.2, 18833.0], [91.3, 18841.0], [91.4, 18843.0], [91.5, 18847.0], [91.6, 18847.0], [91.7, 18853.0], [91.8, 18857.0], [91.9, 18859.0], [92.0, 18861.0], [92.1, 18863.0], [92.2, 18869.0], [92.3, 18871.0], [92.4, 18874.0], [92.5, 18875.0], [92.6, 18875.0], [92.7, 18886.0], [92.8, 18889.0], [92.9, 18903.0], [93.0, 18904.0], [93.1, 18905.0], [93.2, 18906.0], [93.3, 18907.0], [93.4, 18912.0], [93.5, 18914.0], [93.6, 18916.0], [93.7, 18918.0], [93.8, 18929.0], [93.9, 18940.0], [94.0, 18945.0], [94.1, 18966.0], [94.2, 19017.0], [94.3, 19047.0], [94.4, 19050.0], [94.5, 19065.0], [94.6, 19069.0], [94.7, 19070.0], [94.8, 19078.0], [94.9, 19590.0], [95.0, 19608.0], [95.1, 19725.0], [95.2, 19727.0], [95.3, 19774.0], [95.4, 19819.0], [95.5, 19939.0], [95.6, 19940.0], [95.7, 19942.0], [95.8, 19974.0], [95.9, 19993.0], [96.0, 20068.0], [96.1, 20072.0], [96.2, 20110.0], [96.3, 20124.0], [96.4, 20169.0], [96.5, 20171.0], [96.6, 20186.0], [96.7, 20233.0], [96.8, 20239.0], [96.9, 20262.0], [97.0, 20265.0], [97.1, 20269.0], [97.2, 20282.0], [97.3, 20299.0], [97.4, 20301.0], [97.5, 20302.0], [97.6, 20325.0], [97.7, 20339.0], [97.8, 20362.0], [97.9, 20376.0], [98.0, 20393.0], [98.1, 20399.0], [98.2, 20408.0], [98.3, 20426.0], [98.4, 20441.0], [98.5, 20467.0], [98.6, 20496.0], [98.7, 20505.0], [98.8, 20507.0], [98.9, 20522.0], [99.0, 20531.0], [99.1, 20551.0], [99.2, 20581.0], [99.3, 20653.0], [99.4, 20654.0], [99.5, 20673.0], [99.6, 20675.0], [99.7, 20713.0], [99.8, 20743.0], [99.9, 20743.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 1400.0, "maxY": 42.0, "series": [{"data": [[1400.0, 2.0], [1500.0, 5.0], [1600.0, 5.0], [1700.0, 5.0], [1800.0, 6.0], [1900.0, 7.0], [2000.0, 13.0], [2100.0, 11.0], [2200.0, 5.0], [2300.0, 14.0], [2400.0, 7.0], [2500.0, 4.0], [2600.0, 3.0], [2700.0, 1.0], [2800.0, 2.0], [2900.0, 7.0], [3000.0, 1.0], [3100.0, 3.0], [3600.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4300.0, 2.0], [4100.0, 1.0], [4400.0, 1.0], [4500.0, 2.0], [4600.0, 2.0], [5100.0, 1.0], [5300.0, 2.0], [5200.0, 1.0], [5400.0, 2.0], [5700.0, 1.0], [5800.0, 1.0], [5900.0, 1.0], [6400.0, 1.0], [7900.0, 1.0], [8000.0, 3.0], [8200.0, 1.0], [8500.0, 6.0], [8400.0, 1.0], [8600.0, 2.0], [9000.0, 4.0], [8800.0, 2.0], [9100.0, 2.0], [9200.0, 1.0], [8900.0, 1.0], [9700.0, 1.0], [10100.0, 1.0], [10200.0, 3.0], [10700.0, 3.0], [10300.0, 3.0], [10600.0, 1.0], [10800.0, 2.0], [11000.0, 5.0], [11100.0, 3.0], [10900.0, 3.0], [11200.0, 2.0], [11400.0, 7.0], [11500.0, 3.0], [11600.0, 4.0], [11300.0, 1.0], [11700.0, 7.0], [12100.0, 8.0], [12200.0, 12.0], [11800.0, 4.0], [12000.0, 2.0], [12300.0, 9.0], [12400.0, 6.0], [12600.0, 5.0], [12700.0, 5.0], [12500.0, 4.0], [12800.0, 3.0], [12900.0, 3.0], [13000.0, 2.0], [13200.0, 4.0], [13300.0, 6.0], [13400.0, 4.0], [13500.0, 5.0], [13600.0, 8.0], [13800.0, 12.0], [13700.0, 6.0], [13900.0, 12.0], [14000.0, 12.0], [14100.0, 2.0], [14200.0, 2.0], [14300.0, 4.0], [14400.0, 4.0], [14500.0, 4.0], [14600.0, 7.0], [14700.0, 5.0], [14800.0, 4.0], [14900.0, 3.0], [15100.0, 3.0], [15000.0, 8.0], [15200.0, 3.0], [15300.0, 3.0], [15400.0, 7.0], [15500.0, 5.0], [15600.0, 5.0], [15800.0, 9.0], [15700.0, 2.0], [15900.0, 7.0], [16000.0, 16.0], [16100.0, 7.0], [16200.0, 10.0], [16300.0, 10.0], [16600.0, 6.0], [16400.0, 10.0], [16500.0, 10.0], [16700.0, 11.0], [16800.0, 11.0], [16900.0, 12.0], [17400.0, 14.0], [17000.0, 13.0], [17100.0, 9.0], [17200.0, 22.0], [17300.0, 20.0], [18200.0, 18.0], [17500.0, 22.0], [17600.0, 17.0], [17700.0, 20.0], [17800.0, 20.0], [17900.0, 31.0], [18100.0, 21.0], [18000.0, 24.0], [18300.0, 27.0], [18400.0, 25.0], [18500.0, 42.0], [18600.0, 18.0], [18700.0, 21.0], [18800.0, 28.0], [18900.0, 13.0], [19000.0, 7.0], [20300.0, 8.0], [19600.0, 1.0], [19500.0, 1.0], [19700.0, 3.0], [19900.0, 5.0], [20100.0, 5.0], [20200.0, 7.0], [19800.0, 1.0], [20000.0, 2.0], [20400.0, 5.0], [20500.0, 6.0], [20600.0, 4.0], [20700.0, 3.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 20700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 998.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 998.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.1450000000005, "minX": 1.75791954E12, "maxY": 501.1450000000005, "series": [{"data": [[1.75791954E12, 501.1450000000005]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791954E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 1508.0, "minX": 1.0, "maxY": 20743.0, "series": [{"data": [[2.0, 20743.0], [3.0, 20743.0], [4.0, 20325.0], [5.0, 20299.0], [6.0, 20339.0], [7.0, 20467.0], [8.0, 20551.0], [9.0, 20362.0], [10.0, 20713.0], [11.0, 20239.0], [12.0, 20302.0], [13.0, 20507.0], [14.0, 20233.0], [15.0, 20265.0], [16.0, 20675.0], [19.0, 20504.333333333332], [20.0, 20169.0], [21.0, 20124.0], [22.0, 20653.0], [23.0, 20581.0], [24.0, 20269.0], [26.0, 20406.5], [27.0, 20426.0], [28.0, 20262.0], [29.0, 20110.0], [30.0, 19993.0], [31.0, 20522.0], [33.0, 19974.0], [32.0, 20399.0], [35.0, 20068.0], [34.0, 20441.0], [37.0, 20505.0], [36.0, 20376.0], [39.0, 20408.0], [38.0, 20393.0], [41.0, 19819.0], [40.0, 20072.0], [43.0, 19942.0], [42.0, 20171.0], [45.0, 19940.0], [44.0, 20301.0], [47.0, 19939.0], [46.0, 19774.0], [49.0, 19727.0], [48.0, 19725.0], [51.0, 19590.0], [50.0, 19608.0], [53.0, 18660.0], [52.0, 18905.0], [55.0, 19070.0], [54.0, 18663.0], [57.0, 19078.0], [56.0, 18700.0], [58.0, 18737.0], [61.0, 18581.0], [60.0, 19058.0], [62.0, 18579.0], [67.0, 18888.0], [65.0, 19050.0], [64.0, 18762.0], [71.0, 18545.0], [70.0, 18687.0], [68.0, 18847.0], [75.0, 18966.0], [74.0, 18833.0], [73.0, 19065.0], [72.0, 18468.0], [78.0, 18863.0], [77.0, 18591.0], [83.0, 18553.0], [82.0, 18871.0], [81.0, 18410.0], [80.0, 18734.5], [87.0, 18389.0], [86.0, 18916.0], [91.0, 18690.0], [89.0, 18940.0], [88.0, 18515.0], [95.0, 18715.0], [93.0, 18758.0], [92.0, 18388.0], [98.0, 18825.0], [97.0, 18375.0], [96.0, 18573.0], [103.0, 18687.0], [102.0, 18564.0], [100.0, 18756.0], [107.0, 18770.0], [105.0, 18610.0], [104.0, 18775.0], [111.0, 18627.5], [109.0, 18410.0], [108.0, 18853.0], [115.0, 18889.0], [114.0, 18906.0], [113.0, 18945.0], [112.0, 18808.0], [119.0, 18839.0], [117.0, 18531.5], [123.0, 18567.0], [122.0, 18413.0], [121.0, 18723.0], [127.0, 18707.0], [124.0, 18806.0], [134.0, 18535.0], [133.0, 18700.0], [131.0, 18666.333333333332], [128.0, 18551.333333333332], [143.0, 18392.0], [142.0, 18825.0], [139.0, 18525.0], [138.0, 18780.0], [137.0, 18555.0], [149.0, 18519.5], [147.0, 18650.0], [145.0, 18449.0], [159.0, 18469.0], [158.0, 18494.0], [156.0, 18903.0], [155.0, 18817.0], [154.0, 18568.0], [153.0, 18803.5], [152.0, 18788.0], [165.0, 18568.25], [161.0, 18652.5], [173.0, 18272.0], [172.0, 18717.0], [171.0, 18724.0], [170.0, 18372.0], [169.0, 18859.0], [168.0, 18681.0], [183.0, 18686.0], [182.0, 18691.0], [181.0, 18576.0], [179.0, 18644.0], [178.0, 18639.0], [176.0, 18720.666666666668], [191.0, 18698.0], [190.0, 18690.0], [189.0, 18209.0], [188.0, 18263.5], [186.0, 18157.0], [185.0, 18673.0], [199.0, 18595.0], [198.0, 18207.0], [197.0, 18614.0], [196.0, 18560.0], [195.0, 18279.0], [194.0, 18442.0], [205.0, 18611.0], [204.0, 18481.0], [203.0, 18361.0], [202.0, 18281.0], [200.0, 18160.0], [215.0, 18547.0], [214.0, 18171.0], [213.0, 18035.0], [212.0, 18599.0], [211.0, 18077.0], [210.0, 18511.0], [209.0, 18004.0], [208.0, 18427.333333333332], [222.0, 18141.0], [221.0, 18466.0], [219.0, 18295.0], [218.0, 18208.0], [217.0, 18227.0], [216.0, 18243.0], [231.0, 18120.0], [229.0, 18617.0], [228.0, 18476.0], [227.0, 18499.0], [226.0, 18495.0], [225.0, 18180.0], [224.0, 18098.0], [239.0, 18043.0], [238.0, 18010.0], [237.0, 18500.0], [236.0, 18449.0], [235.0, 18522.0], [234.0, 18450.0], [233.0, 18488.0], [232.0, 18587.0], [247.0, 18114.0], [246.0, 17991.0], [245.0, 18543.0], [244.0, 17933.0], [243.0, 18045.0], [242.0, 18300.0], [240.0, 18336.0], [255.0, 18449.0], [254.0, 18411.666666666668], [251.0, 18216.5], [249.0, 17883.0], [248.0, 18302.0], [271.0, 18073.333333333332], [268.0, 17964.0], [259.0, 18350.0], [258.0, 18091.0], [257.0, 18023.0], [267.0, 17966.0], [266.0, 18326.0], [265.0, 18021.0], [264.0, 17782.0], [263.0, 17949.0], [261.0, 18410.0], [260.0, 18326.0], [275.0, 18255.0], [285.0, 17852.0], [287.0, 17993.0], [284.0, 17929.5], [273.0, 18215.0], [272.0, 18325.0], [282.0, 17677.0], [281.0, 18096.0], [279.0, 17811.0], [278.0, 18346.0], [277.0, 18154.0], [276.0, 18365.0], [302.0, 18263.0], [303.0, 18266.0], [301.0, 17817.0], [300.0, 17843.0], [299.0, 17852.0], [298.0, 17803.0], [297.0, 17883.5], [295.0, 17902.0], [288.0, 17976.0], [291.0, 18160.0], [289.0, 18251.0], [294.0, 17862.5], [292.0, 17908.0], [318.0, 18083.0], [319.0, 18026.0], [317.0, 18151.0], [316.0, 17745.0], [315.0, 17726.0], [314.0, 17771.0], [313.0, 18020.5], [311.0, 17817.0], [305.0, 17645.0], [304.0, 17926.0], [307.0, 18150.0], [306.0, 18098.0], [310.0, 17701.5], [308.0, 17739.0], [322.0, 17982.0], [335.0, 17500.0], [334.0, 17838.5], [330.0, 17813.0], [329.0, 18124.0], [328.0, 17706.0], [327.0, 17848.0], [326.0, 17932.5], [324.0, 17911.0], [321.0, 18111.0], [320.0, 18090.0], [339.0, 17659.0], [351.0, 17998.0], [350.0, 17885.4], [345.0, 17727.0], [344.0, 18013.0], [343.0, 18058.0], [342.0, 17657.0], [341.0, 18023.0], [340.0, 18100.0], [338.0, 17723.0], [337.0, 18070.5], [366.0, 17961.0], [367.0, 17537.0], [365.0, 17951.0], [364.0, 17868.5], [362.0, 17907.0], [361.0, 17928.0], [360.0, 17748.5], [358.0, 17801.0], [353.0, 17841.0], [352.0, 17706.0], [355.0, 17997.0], [354.0, 17524.0], [357.0, 17508.0], [356.0, 17998.0], [371.0, 17610.0], [382.0, 17463.5], [380.0, 17570.0], [379.0, 17669.333333333332], [376.0, 17516.0], [375.0, 17507.0], [374.0, 17909.0], [373.0, 17740.5], [370.0, 17664.0], [369.0, 17531.0], [368.0, 17806.0], [398.0, 17378.0], [399.0, 17356.0], [397.0, 17731.0], [396.0, 17718.0], [395.0, 17725.0], [394.0, 17263.0], [393.0, 17424.0], [392.0, 17466.0], [391.0, 17265.0], [385.0, 17871.0], [384.0, 17850.5], [387.0, 17426.0], [386.0, 17796.0], [390.0, 17497.0], [389.0, 17449.0], [388.0, 17792.0], [414.0, 17579.0], [415.0, 17190.0], [412.0, 17571.0], [403.0, 17287.0], [402.0, 17484.0], [401.0, 17367.0], [411.0, 17332.0], [410.0, 17205.0], [409.0, 17533.0], [407.0, 17693.0], [406.0, 17681.5], [404.0, 17290.0], [430.0, 17146.0], [429.0, 17216.0], [419.0, 17203.0], [418.0, 17648.0], [417.0, 17252.0], [416.0, 17602.0], [427.0, 17138.0], [426.0, 17118.0], [425.0, 16976.0], [424.0, 17539.0], [423.0, 17015.0], [422.0, 17254.0], [421.0, 17590.0], [420.0, 17604.0], [447.0, 17433.0], [445.0, 17342.5], [443.0, 17003.0], [441.0, 17064.0], [440.0, 17343.0], [439.0, 17522.0], [438.0, 16979.0], [437.0, 17167.5], [435.0, 17318.5], [433.0, 17547.0], [462.0, 17210.0], [463.0, 17330.0], [461.0, 16980.0], [460.0, 17205.0], [459.0, 17333.0], [458.0, 17026.0], [457.0, 17460.0], [456.0, 17300.0], [455.0, 17326.0], [449.0, 17355.0], [448.0, 17450.0], [451.0, 16920.0], [450.0, 17233.0], [454.0, 17394.5], [452.0, 17310.0], [478.0, 17233.5], [479.0, 16839.0], [476.0, 17305.0], [466.0, 17175.0], [464.0, 17347.0], [475.0, 16996.0], [474.0, 17305.0], [473.0, 17303.0], [472.0, 16842.0], [471.0, 17265.0], [470.0, 16871.0], [469.0, 17214.0], [468.0, 17126.5], [493.0, 17111.0], [494.0, 16781.0], [492.0, 16829.0], [483.0, 17197.0], [482.0, 17247.0], [481.0, 17059.0], [491.0, 17204.0], [490.0, 16627.0], [489.0, 16998.0], [488.0, 16712.5], [486.0, 16837.0], [485.0, 17207.0], [484.0, 16857.0], [510.0, 17102.5], [511.0, 16970.0], [508.0, 16883.0], [498.0, 16631.0], [497.0, 16688.0], [507.0, 16648.0], [506.0, 16818.0], [504.0, 17004.0], [503.0, 16530.0], [502.0, 16767.0], [501.0, 16766.0], [500.0, 16793.5], [538.0, 16212.0], [542.0, 16094.0], [543.0, 16310.0], [529.0, 16860.0], [528.0, 16600.0], [531.0, 16428.0], [530.0, 16370.0], [533.0, 16458.0], [532.0, 16674.0], [541.0, 16703.0], [540.0, 16704.0], [539.0, 16789.0], [537.0, 16286.0], [519.0, 16524.0], [518.0, 16741.0], [516.0, 16801.5], [514.0, 16590.0], [513.0, 17086.0], [512.0, 16749.0], [526.0, 16939.0], [525.0, 16458.0], [524.0, 16917.0], [523.0, 16553.0], [522.0, 16914.0], [521.0, 16528.0], [520.0, 16995.0], [535.0, 16321.0], [534.0, 16418.0], [568.0, 16208.0], [572.0, 15858.0], [575.0, 15896.0], [561.0, 16503.0], [560.0, 16112.0], [564.0, 16426.0], [563.0, 16426.0], [574.0, 16433.0], [573.0, 16014.0], [571.0, 16243.0], [570.0, 16076.0], [569.0, 15886.0], [559.0, 16260.0], [544.0, 16294.0], [546.0, 16108.0], [545.0, 16545.0], [549.0, 16059.5], [547.0, 16184.0], [551.0, 16046.0], [550.0, 16480.0], [558.0, 16252.5], [556.0, 16153.0], [555.0, 16085.0], [554.0, 15987.0], [553.0, 16479.0], [552.0, 16513.0], [566.0, 16360.0], [565.0, 16080.0], [601.0, 15604.0], [606.0, 15951.0], [607.0, 15925.0], [593.0, 15558.0], [592.0, 16046.0], [595.0, 15547.0], [594.0, 16020.0], [597.0, 15742.0], [596.0, 15502.0], [604.0, 15994.0], [603.0, 15627.0], [602.0, 16007.0], [600.0, 16033.0], [583.0, 16243.0], [582.0, 15650.0], [581.0, 15904.0], [580.0, 15968.0], [579.0, 16289.0], [578.0, 15847.0], [577.0, 16162.5], [591.0, 16112.5], [589.0, 16205.0], [588.0, 16159.0], [587.0, 16251.0], [586.0, 15899.0], [585.0, 16172.0], [584.0, 16286.0], [599.0, 15988.0], [598.0, 15649.0], [634.0, 15153.0], [638.0, 14801.0], [639.0, 15109.0], [625.0, 15063.0], [627.0, 15038.0], [626.0, 15407.0], [629.0, 15003.0], [628.0, 15323.0], [637.0, 14696.0], [636.0, 15204.0], [635.0, 15351.0], [632.0, 14809.0], [615.0, 15033.0], [614.0, 15647.0], [613.0, 15514.0], [612.0, 15793.0], [610.0, 15866.0], [609.0, 15462.0], [608.0, 15809.0], [623.0, 15433.0], [622.0, 15505.0], [621.0, 15465.0], [620.0, 15419.0], [619.0, 15049.0], [618.0, 14957.0], [617.0, 15494.0], [616.0, 15478.0], [631.0, 15216.0], [630.0, 15322.0], [665.0, 13971.0], [670.0, 14434.0], [671.0, 13964.0], [656.0, 14726.0], [658.0, 14779.0], [657.0, 14763.0], [661.0, 14658.0], [660.0, 14737.5], [669.0, 14248.0], [667.0, 14527.0], [666.0, 14413.0], [664.0, 14645.0], [647.0, 14497.0], [646.0, 15107.0], [645.0, 14871.0], [643.0, 14826.0], [642.0, 14942.0], [641.0, 14571.0], [640.0, 15181.0], [655.0, 14318.0], [654.0, 14447.0], [652.0, 14586.0], [651.0, 14887.0], [650.0, 14789.0], [648.0, 14637.0], [663.0, 14159.0], [662.0, 14649.0], [679.0, 13870.5], [700.0, 13931.0], [703.0, 14014.333333333334], [696.0, 13780.166666666666], [677.0, 13811.0], [675.0, 14263.0], [674.0, 14318.0], [673.0, 14364.0], [672.0, 14003.0], [690.0, 13770.5], [688.0, 13770.0], [687.0, 14040.0], [685.0, 14042.0], [684.0, 13899.333333333334], [681.0, 13974.5], [729.0, 13686.25], [734.0, 13528.666666666666], [731.0, 13680.0], [730.0, 13209.0], [725.0, 13622.833333333332], [719.0, 13702.666666666666], [708.0, 14005.0], [707.0, 13765.0], [711.0, 13910.0], [710.0, 13955.5], [716.0, 13832.0], [715.0, 13715.0], [714.0, 13462.0], [713.0, 13931.5], [763.0, 12221.0], [766.0, 12467.0], [762.0, 12828.0], [761.0, 12552.333333333334], [758.0, 12489.0], [757.0, 12573.0], [755.0, 12834.0], [751.0, 12718.5], [736.0, 13479.5], [739.0, 13358.0], [738.0, 13237.0], [743.0, 13240.666666666666], [740.0, 12855.0], [747.0, 12628.5], [745.0, 13268.0], [744.0, 13335.0], [798.0, 12112.0], [785.0, 12029.0], [783.0, 12210.111111111111], [774.0, 12523.5], [768.0, 12413.5], [827.0, 11490.0], [821.0, 11303.2], [816.0, 11564.0], [815.0, 11062.0], [814.0, 12127.0], [813.0, 12243.0], [810.0, 11995.625], [802.0, 11950.0], [858.0, 9224.0], [862.0, 8826.25], [857.0, 8993.333333333334], [839.0, 11136.0], [838.0, 10935.0], [837.0, 11336.0], [834.0, 11331.166666666668], [854.0, 9711.0], [853.0, 10183.0], [851.0, 10635.0], [847.0, 10453.666666666666], [844.0, 10358.5], [842.0, 10751.0], [840.0, 11077.0], [894.0, 4361.0], [895.0, 4476.0], [883.0, 5740.0], [880.0, 5857.0], [885.0, 5223.0], [884.0, 5358.0], [892.0, 4621.0], [891.0, 4397.0], [890.0, 4530.0], [889.0, 4623.0], [888.0, 5198.0], [870.0, 8587.0], [869.0, 8745.0], [864.0, 9050.5], [879.0, 6401.0], [878.0, 8065.666666666667], [875.0, 8240.0], [874.0, 8512.0], [873.0, 7960.0], [872.0, 8507.5], [887.0, 5468.0], [886.0, 5334.0], [920.0, 2715.0], [925.0, 2301.0], [927.0, 2494.0], [913.0, 2952.0], [912.0, 2634.0], [915.0, 2367.0], [914.0, 3011.0], [924.0, 2176.0], [922.0, 1977.0], [921.0, 2394.0], [911.0, 2954.0], [897.0, 3850.0], [896.0, 4396.0], [899.0, 3922.0], [898.0, 3643.0], [901.0, 2943.0], [900.0, 3186.0], [903.0, 2955.0], [902.0, 2861.0], [910.0, 2600.0], [908.0, 2663.0], [907.0, 2989.0], [906.0, 2485.0], [905.0, 3151.0], [904.0, 3137.0], [919.0, 2807.0], [918.0, 2445.0], [917.0, 2916.0], [916.0, 2901.0], [947.0, 2119.0], [957.0, 2290.0], [958.0, 1823.0], [944.0, 2392.0], [946.0, 2264.0], [945.0, 2160.0], [956.0, 2334.0], [955.0, 1829.0], [954.0, 2184.0], [933.0, 2132.5], [931.0, 2176.0], [930.0, 2507.0], [928.0, 2197.0], [943.0, 2009.0], [942.0, 2352.0], [940.0, 2342.5], [938.0, 2228.4], [951.0, 2407.0], [950.0, 1808.0], [949.0, 1927.0], [986.0, 2087.0], [990.0, 2121.0], [991.0, 1774.0], [978.0, 2147.0], [977.0, 2075.0], [989.0, 1597.0], [988.0, 2108.0], [987.0, 1588.0], [985.0, 1577.0], [967.0, 2236.0], [966.0, 2292.0], [965.0, 1880.0], [964.0, 2344.0], [963.0, 2066.0], [962.0, 1954.0], [961.0, 2386.0], [960.0, 2174.5], [974.0, 1659.3333333333333], [971.0, 1659.0], [970.0, 1768.0], [969.0, 1903.0], [968.0, 1709.0], [983.0, 1998.0], [982.0, 2095.0], [981.0, 1716.0], [979.0, 2267.0], [1000.0, 1721.0], [998.0, 2066.0], [997.0, 2037.0], [996.0, 2003.0], [994.0, 1524.0], [993.0, 2125.0], [992.0, 1508.0], [1.0, 20496.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[501.1450000000005, 14677.404]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11483.333333333334, "minX": 1.75791954E12, "maxY": 7182430.433333334, "series": [{"data": [[1.75791954E12, 11483.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75791954E12, 7182430.433333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791954E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 14677.404, "minX": 1.75791954E12, "maxY": 14677.404, "series": [{"data": [[1.75791954E12, 14677.404]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791954E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 14677.345999999994, "minX": 1.75791954E12, "maxY": 14677.345999999994, "series": [{"data": [[1.75791954E12, 14677.345999999994]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791954E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3936.795000000001, "minX": 1.75791954E12, "maxY": 3936.795000000001, "series": [{"data": [[1.75791954E12, 3936.795000000001]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791954E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1447.0, "minX": 1.75791954E12, "maxY": 20743.0, "series": [{"data": [[1.75791954E12, 20743.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75791954E12, 18798.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75791954E12, 20530.91]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75791954E12, 19607.1]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75791954E12, 1447.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75791954E12, 16858.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791954E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 2075.0, "minX": 1.0, "maxY": 20301.0, "series": [{"data": [[8.0, 8168.0], [33.0, 11995.5], [142.0, 17193.5], [9.0, 4396.0], [44.0, 15041.5], [51.0, 20301.0], [52.0, 12235.0], [220.0, 18078.0], [1.0, 6401.0], [16.0, 8904.5], [73.0, 13933.0], [79.0, 16088.0], [81.0, 2075.0], [20.0, 2908.5], [5.0, 5755.0], [6.0, 5210.5], [7.0, 10376.0], [120.0, 18726.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 220.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 2075.0, "minX": 1.0, "maxY": 20301.0, "series": [{"data": [[8.0, 8168.0], [33.0, 11995.5], [142.0, 17193.5], [9.0, 4396.0], [44.0, 15041.5], [51.0, 20301.0], [52.0, 12235.0], [220.0, 18078.0], [1.0, 6401.0], [16.0, 8904.5], [73.0, 13933.0], [79.0, 16088.0], [81.0, 2075.0], [20.0, 2908.5], [5.0, 5755.0], [6.0, 5210.5], [7.0, 10376.0], [120.0, 18726.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 220.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791954E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791954E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791954E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791954E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791954E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791954E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791954E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791954E12, 16.666666666666668]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791954E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791954E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791954E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791954E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

