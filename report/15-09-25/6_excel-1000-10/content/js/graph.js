/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 11131.0, "series": [{"data": [[0.0, 9.0], [0.1, 9.0], [0.2, 10.0], [0.3, 10.0], [0.4, 10.0], [0.5, 10.0], [0.6, 10.0], [0.7, 11.0], [0.8, 11.0], [0.9, 11.0], [1.0, 12.0], [1.1, 12.0], [1.2, 12.0], [1.3, 12.0], [1.4, 12.0], [1.5, 13.0], [1.6, 13.0], [1.7, 13.0], [1.8, 13.0], [1.9, 13.0], [2.0, 15.0], [2.1, 15.0], [2.2, 16.0], [2.3, 16.0], [2.4, 17.0], [2.5, 17.0], [2.6, 19.0], [2.7, 20.0], [2.8, 20.0], [2.9, 23.0], [3.0, 25.0], [3.1, 26.0], [3.2, 28.0], [3.3, 42.0], [3.4, 76.0], [3.5, 93.0], [3.6, 95.0], [3.7, 114.0], [3.8, 115.0], [3.9, 117.0], [4.0, 127.0], [4.1, 128.0], [4.2, 140.0], [4.3, 164.0], [4.4, 203.0], [4.5, 292.0], [4.6, 384.0], [4.7, 410.0], [4.8, 422.0], [4.9, 433.0], [5.0, 471.0], [5.1, 505.0], [5.2, 519.0], [5.3, 534.0], [5.4, 553.0], [5.5, 558.0], [5.6, 840.0], [5.7, 859.0], [5.8, 942.0], [5.9, 967.0], [6.0, 994.0], [6.1, 1007.0], [6.2, 1013.0], [6.3, 1023.0], [6.4, 1025.0], [6.5, 1028.0], [6.6, 1069.0], [6.7, 1098.0], [6.8, 1105.0], [6.9, 1105.0], [7.0, 1113.0], [7.1, 1116.0], [7.2, 1125.0], [7.3, 1154.0], [7.4, 1154.0], [7.5, 1158.0], [7.6, 1159.0], [7.7, 1161.0], [7.8, 1175.0], [7.9, 1180.0], [8.0, 1183.0], [8.1, 1189.0], [8.2, 1198.0], [8.3, 1204.0], [8.4, 1209.0], [8.5, 1212.0], [8.6, 1213.0], [8.7, 1219.0], [8.8, 1227.0], [8.9, 1236.0], [9.0, 1238.0], [9.1, 1240.0], [9.2, 1240.0], [9.3, 1246.0], [9.4, 1258.0], [9.5, 1260.0], [9.6, 1265.0], [9.7, 1267.0], [9.8, 1270.0], [9.9, 1271.0], [10.0, 1274.0], [10.1, 1280.0], [10.2, 1282.0], [10.3, 1292.0], [10.4, 1300.0], [10.5, 1300.0], [10.6, 1306.0], [10.7, 1307.0], [10.8, 1312.0], [10.9, 1315.0], [11.0, 1319.0], [11.1, 1323.0], [11.2, 1327.0], [11.3, 1329.0], [11.4, 1330.0], [11.5, 1335.0], [11.6, 1336.0], [11.7, 1352.0], [11.8, 1398.0], [11.9, 1410.0], [12.0, 1418.0], [12.1, 1430.0], [12.2, 1435.0], [12.3, 1445.0], [12.4, 1477.0], [12.5, 1491.0], [12.6, 1511.0], [12.7, 1544.0], [12.8, 1569.0], [12.9, 1574.0], [13.0, 1591.0], [13.1, 1604.0], [13.2, 1608.0], [13.3, 1612.0], [13.4, 1614.0], [13.5, 1614.0], [13.6, 1622.0], [13.7, 1627.0], [13.8, 1631.0], [13.9, 1631.0], [14.0, 1636.0], [14.1, 1636.0], [14.2, 1645.0], [14.3, 1646.0], [14.4, 1647.0], [14.5, 1653.0], [14.6, 1655.0], [14.7, 1664.0], [14.8, 1665.0], [14.9, 1672.0], [15.0, 1676.0], [15.1, 1683.0], [15.2, 1686.0], [15.3, 1686.0], [15.4, 1687.0], [15.5, 1691.0], [15.6, 1691.0], [15.7, 1695.0], [15.8, 1696.0], [15.9, 1700.0], [16.0, 1701.0], [16.1, 1706.0], [16.2, 1708.0], [16.3, 1709.0], [16.4, 1711.0], [16.5, 1712.0], [16.6, 1713.0], [16.7, 1713.0], [16.8, 1715.0], [16.9, 1719.0], [17.0, 1722.0], [17.1, 1726.0], [17.2, 1729.0], [17.3, 1730.0], [17.4, 1731.0], [17.5, 1732.0], [17.6, 1734.0], [17.7, 1735.0], [17.8, 1735.0], [17.9, 1738.0], [18.0, 1738.0], [18.1, 1742.0], [18.2, 1742.0], [18.3, 1743.0], [18.4, 1747.0], [18.5, 1751.0], [18.6, 1753.0], [18.7, 1754.0], [18.8, 1757.0], [18.9, 1759.0], [19.0, 1762.0], [19.1, 1762.0], [19.2, 1763.0], [19.3, 1764.0], [19.4, 1768.0], [19.5, 1772.0], [19.6, 1772.0], [19.7, 1774.0], [19.8, 1778.0], [19.9, 1778.0], [20.0, 1781.0], [20.1, 1782.0], [20.2, 1790.0], [20.3, 1792.0], [20.4, 1796.0], [20.5, 1798.0], [20.6, 1798.0], [20.7, 1800.0], [20.8, 1803.0], [20.9, 1803.0], [21.0, 1804.0], [21.1, 1808.0], [21.2, 1808.0], [21.3, 1818.0], [21.4, 1818.0], [21.5, 1820.0], [21.6, 1822.0], [21.7, 1824.0], [21.8, 1825.0], [21.9, 1826.0], [22.0, 1830.0], [22.1, 1831.0], [22.2, 1832.0], [22.3, 1838.0], [22.4, 1839.0], [22.5, 1841.0], [22.6, 1851.0], [22.7, 1855.0], [22.8, 1859.0], [22.9, 1860.0], [23.0, 1863.0], [23.1, 1864.0], [23.2, 1870.0], [23.3, 1870.0], [23.4, 1877.0], [23.5, 1877.0], [23.6, 1884.0], [23.7, 1885.0], [23.8, 1887.0], [23.9, 1891.0], [24.0, 1895.0], [24.1, 1896.0], [24.2, 1900.0], [24.3, 1900.0], [24.4, 1904.0], [24.5, 1913.0], [24.6, 1914.0], [24.7, 1915.0], [24.8, 1917.0], [24.9, 1919.0], [25.0, 1920.0], [25.1, 1922.0], [25.2, 1924.0], [25.3, 1926.0], [25.4, 1930.0], [25.5, 1935.0], [25.6, 1937.0], [25.7, 1938.0], [25.8, 1938.0], [25.9, 1939.0], [26.0, 1940.0], [26.1, 1942.0], [26.2, 1942.0], [26.3, 1944.0], [26.4, 1946.0], [26.5, 1952.0], [26.6, 1954.0], [26.7, 1956.0], [26.8, 1958.0], [26.9, 1960.0], [27.0, 1972.0], [27.1, 1972.0], [27.2, 1974.0], [27.3, 1976.0], [27.4, 1978.0], [27.5, 1979.0], [27.6, 1980.0], [27.7, 1982.0], [27.8, 1984.0], [27.9, 1985.0], [28.0, 1986.0], [28.1, 1986.0], [28.2, 1987.0], [28.3, 1990.0], [28.4, 1994.0], [28.5, 1995.0], [28.6, 2000.0], [28.7, 2005.0], [28.8, 2008.0], [28.9, 2009.0], [29.0, 2009.0], [29.1, 2014.0], [29.2, 2014.0], [29.3, 2020.0], [29.4, 2021.0], [29.5, 2032.0], [29.6, 2037.0], [29.7, 2045.0], [29.8, 2059.0], [29.9, 2060.0], [30.0, 2070.0], [30.1, 2072.0], [30.2, 2077.0], [30.3, 2082.0], [30.4, 2084.0], [30.5, 2084.0], [30.6, 2098.0], [30.7, 2099.0], [30.8, 2100.0], [30.9, 2123.0], [31.0, 2127.0], [31.1, 2133.0], [31.2, 2142.0], [31.3, 2143.0], [31.4, 2152.0], [31.5, 2154.0], [31.6, 2161.0], [31.7, 2163.0], [31.8, 2170.0], [31.9, 2172.0], [32.0, 2173.0], [32.1, 2175.0], [32.2, 2176.0], [32.3, 2177.0], [32.4, 2180.0], [32.5, 2182.0], [32.6, 2183.0], [32.7, 2192.0], [32.8, 2192.0], [32.9, 2197.0], [33.0, 2202.0], [33.1, 2204.0], [33.2, 2230.0], [33.3, 2230.0], [33.4, 2237.0], [33.5, 2237.0], [33.6, 2243.0], [33.7, 2243.0], [33.8, 2243.0], [33.9, 2246.0], [34.0, 2249.0], [34.1, 2254.0], [34.2, 2260.0], [34.3, 2262.0], [34.4, 2263.0], [34.5, 2264.0], [34.6, 2264.0], [34.7, 2266.0], [34.8, 2266.0], [34.9, 2269.0], [35.0, 2271.0], [35.1, 2273.0], [35.2, 2275.0], [35.3, 2277.0], [35.4, 2278.0], [35.5, 2279.0], [35.6, 2285.0], [35.7, 2286.0], [35.8, 2287.0], [35.9, 2289.0], [36.0, 2290.0], [36.1, 2294.0], [36.2, 2296.0], [36.3, 2297.0], [36.4, 2298.0], [36.5, 2301.0], [36.6, 2303.0], [36.7, 2305.0], [36.8, 2306.0], [36.9, 2306.0], [37.0, 2307.0], [37.1, 2308.0], [37.2, 2309.0], [37.3, 2313.0], [37.4, 2314.0], [37.5, 2316.0], [37.6, 2321.0], [37.7, 2324.0], [37.8, 2336.0], [37.9, 2337.0], [38.0, 2340.0], [38.1, 2341.0], [38.2, 2342.0], [38.3, 2344.0], [38.4, 2345.0], [38.5, 2350.0], [38.6, 2351.0], [38.7, 2356.0], [38.8, 2357.0], [38.9, 2362.0], [39.0, 2362.0], [39.1, 2363.0], [39.2, 2364.0], [39.3, 2368.0], [39.4, 2368.0], [39.5, 2373.0], [39.6, 2375.0], [39.7, 2387.0], [39.8, 2387.0], [39.9, 2393.0], [40.0, 2396.0], [40.1, 2399.0], [40.2, 2410.0], [40.3, 2413.0], [40.4, 2423.0], [40.5, 2424.0], [40.6, 2428.0], [40.7, 2430.0], [40.8, 2432.0], [40.9, 2433.0], [41.0, 2434.0], [41.1, 2437.0], [41.2, 2439.0], [41.3, 2440.0], [41.4, 2440.0], [41.5, 2442.0], [41.6, 2442.0], [41.7, 2446.0], [41.8, 2448.0], [41.9, 2448.0], [42.0, 2452.0], [42.1, 2454.0], [42.2, 2455.0], [42.3, 2457.0], [42.4, 2459.0], [42.5, 2460.0], [42.6, 2462.0], [42.7, 2466.0], [42.8, 2471.0], [42.9, 2474.0], [43.0, 2475.0], [43.1, 2478.0], [43.2, 2483.0], [43.3, 2484.0], [43.4, 2484.0], [43.5, 2484.0], [43.6, 2485.0], [43.7, 2486.0], [43.8, 2486.0], [43.9, 2487.0], [44.0, 2491.0], [44.1, 2495.0], [44.2, 2495.0], [44.3, 2498.0], [44.4, 2500.0], [44.5, 2500.0], [44.6, 2510.0], [44.7, 2511.0], [44.8, 2512.0], [44.9, 2515.0], [45.0, 2516.0], [45.1, 2516.0], [45.2, 2530.0], [45.3, 2532.0], [45.4, 2533.0], [45.5, 2542.0], [45.6, 2548.0], [45.7, 2548.0], [45.8, 2551.0], [45.9, 2552.0], [46.0, 2553.0], [46.1, 2554.0], [46.2, 2557.0], [46.3, 2559.0], [46.4, 2559.0], [46.5, 2561.0], [46.6, 2562.0], [46.7, 2562.0], [46.8, 2563.0], [46.9, 2566.0], [47.0, 2567.0], [47.1, 2570.0], [47.2, 2570.0], [47.3, 2572.0], [47.4, 2572.0], [47.5, 2573.0], [47.6, 2573.0], [47.7, 2574.0], [47.8, 2575.0], [47.9, 2575.0], [48.0, 2577.0], [48.1, 2578.0], [48.2, 2579.0], [48.3, 2579.0], [48.4, 2581.0], [48.5, 2582.0], [48.6, 2583.0], [48.7, 2588.0], [48.8, 2589.0], [48.9, 2591.0], [49.0, 2602.0], [49.1, 2603.0], [49.2, 2606.0], [49.3, 2608.0], [49.4, 2610.0], [49.5, 2611.0], [49.6, 2613.0], [49.7, 2618.0], [49.8, 2618.0], [49.9, 2624.0], [50.0, 2625.0], [50.1, 2626.0], [50.2, 2628.0], [50.3, 2629.0], [50.4, 2630.0], [50.5, 2630.0], [50.6, 2634.0], [50.7, 2636.0], [50.8, 2642.0], [50.9, 2643.0], [51.0, 2647.0], [51.1, 2650.0], [51.2, 2650.0], [51.3, 2651.0], [51.4, 2651.0], [51.5, 2653.0], [51.6, 2653.0], [51.7, 2655.0], [51.8, 2656.0], [51.9, 2656.0], [52.0, 2659.0], [52.1, 2661.0], [52.2, 2663.0], [52.3, 2664.0], [52.4, 2671.0], [52.5, 2671.0], [52.6, 2675.0], [52.7, 2678.0], [52.8, 2684.0], [52.9, 2686.0], [53.0, 2687.0], [53.1, 2690.0], [53.2, 2691.0], [53.3, 2692.0], [53.4, 2693.0], [53.5, 2694.0], [53.6, 2696.0], [53.7, 2698.0], [53.8, 2699.0], [53.9, 2700.0], [54.0, 2702.0], [54.1, 2703.0], [54.2, 2705.0], [54.3, 2707.0], [54.4, 2707.0], [54.5, 2711.0], [54.6, 2712.0], [54.7, 2712.0], [54.8, 2715.0], [54.9, 2715.0], [55.0, 2717.0], [55.1, 2718.0], [55.2, 2718.0], [55.3, 2720.0], [55.4, 2721.0], [55.5, 2722.0], [55.6, 2723.0], [55.7, 2724.0], [55.8, 2724.0], [55.9, 2725.0], [56.0, 2725.0], [56.1, 2728.0], [56.2, 2730.0], [56.3, 2734.0], [56.4, 2737.0], [56.5, 2737.0], [56.6, 2738.0], [56.7, 2738.0], [56.8, 2741.0], [56.9, 2741.0], [57.0, 2742.0], [57.1, 2744.0], [57.2, 2745.0], [57.3, 2747.0], [57.4, 2749.0], [57.5, 2752.0], [57.6, 2753.0], [57.7, 2754.0], [57.8, 2755.0], [57.9, 2755.0], [58.0, 2759.0], [58.1, 2762.0], [58.2, 2765.0], [58.3, 2765.0], [58.4, 2767.0], [58.5, 2767.0], [58.6, 2768.0], [58.7, 2768.0], [58.8, 2771.0], [58.9, 2773.0], [59.0, 2773.0], [59.1, 2773.0], [59.2, 2775.0], [59.3, 2776.0], [59.4, 2776.0], [59.5, 2777.0], [59.6, 2777.0], [59.7, 2779.0], [59.8, 2781.0], [59.9, 2781.0], [60.0, 2781.0], [60.1, 2782.0], [60.2, 2782.0], [60.3, 2788.0], [60.4, 2789.0], [60.5, 2790.0], [60.6, 2790.0], [60.7, 2791.0], [60.8, 2793.0], [60.9, 2794.0], [61.0, 2795.0], [61.1, 2795.0], [61.2, 2796.0], [61.3, 2797.0], [61.4, 2798.0], [61.5, 2798.0], [61.6, 2801.0], [61.7, 2801.0], [61.8, 2803.0], [61.9, 2804.0], [62.0, 2807.0], [62.1, 2807.0], [62.2, 2808.0], [62.3, 2809.0], [62.4, 2811.0], [62.5, 2814.0], [62.6, 2815.0], [62.7, 2816.0], [62.8, 2820.0], [62.9, 2820.0], [63.0, 2820.0], [63.1, 2822.0], [63.2, 2822.0], [63.3, 2823.0], [63.4, 2823.0], [63.5, 2824.0], [63.6, 2824.0], [63.7, 2826.0], [63.8, 2829.0], [63.9, 2834.0], [64.0, 2834.0], [64.1, 2838.0], [64.2, 2840.0], [64.3, 2846.0], [64.4, 2847.0], [64.5, 2849.0], [64.6, 2850.0], [64.7, 2853.0], [64.8, 2859.0], [64.9, 2859.0], [65.0, 2859.0], [65.1, 2860.0], [65.2, 2861.0], [65.3, 2866.0], [65.4, 2867.0], [65.5, 2871.0], [65.6, 2873.0], [65.7, 2874.0], [65.8, 2874.0], [65.9, 2876.0], [66.0, 2878.0], [66.1, 2879.0], [66.2, 2886.0], [66.3, 2886.0], [66.4, 2890.0], [66.5, 2891.0], [66.6, 2897.0], [66.7, 2903.0], [66.8, 2903.0], [66.9, 2906.0], [67.0, 2908.0], [67.1, 2909.0], [67.2, 2909.0], [67.3, 2909.0], [67.4, 2910.0], [67.5, 2913.0], [67.6, 2914.0], [67.7, 2919.0], [67.8, 2925.0], [67.9, 2933.0], [68.0, 2934.0], [68.1, 2936.0], [68.2, 2942.0], [68.3, 2953.0], [68.4, 2957.0], [68.5, 2960.0], [68.6, 2967.0], [68.7, 2978.0], [68.8, 2995.0], [68.9, 2999.0], [69.0, 3002.0], [69.1, 3002.0], [69.2, 3004.0], [69.3, 3008.0], [69.4, 3020.0], [69.5, 3022.0], [69.6, 3029.0], [69.7, 3040.0], [69.8, 3047.0], [69.9, 3048.0], [70.0, 3056.0], [70.1, 3090.0], [70.2, 3109.0], [70.3, 3131.0], [70.4, 3131.0], [70.5, 3132.0], [70.6, 3137.0], [70.7, 3143.0], [70.8, 3149.0], [70.9, 3156.0], [71.0, 3161.0], [71.1, 3162.0], [71.2, 3183.0], [71.3, 3198.0], [71.4, 3206.0], [71.5, 3213.0], [71.6, 3228.0], [71.7, 3243.0], [71.8, 3244.0], [71.9, 3309.0], [72.0, 3309.0], [72.1, 3317.0], [72.2, 3322.0], [72.3, 3326.0], [72.4, 3328.0], [72.5, 3329.0], [72.6, 3333.0], [72.7, 3336.0], [72.8, 3344.0], [72.9, 3352.0], [73.0, 3354.0], [73.1, 3360.0], [73.2, 3367.0], [73.3, 3368.0], [73.4, 3375.0], [73.5, 3385.0], [73.6, 3506.0], [73.7, 3530.0], [73.8, 3551.0], [73.9, 3560.0], [74.0, 3571.0], [74.1, 3649.0], [74.2, 3690.0], [74.3, 3858.0], [74.4, 4117.0], [74.5, 4261.0], [74.6, 4356.0], [74.7, 4732.0], [74.8, 4786.0], [74.9, 4834.0], [75.0, 4843.0], [75.1, 4866.0], [75.2, 4923.0], [75.3, 4937.0], [75.4, 4946.0], [75.5, 4972.0], [75.6, 4997.0], [75.7, 5010.0], [75.8, 5010.0], [75.9, 5038.0], [76.0, 5051.0], [76.1, 5058.0], [76.2, 5059.0], [76.3, 5066.0], [76.4, 5080.0], [76.5, 5090.0], [76.6, 5091.0], [76.7, 5119.0], [76.8, 5151.0], [76.9, 5170.0], [77.0, 5182.0], [77.1, 5184.0], [77.2, 5190.0], [77.3, 5190.0], [77.4, 5200.0], [77.5, 5244.0], [77.6, 5253.0], [77.7, 5265.0], [77.8, 5277.0], [77.9, 5298.0], [78.0, 5312.0], [78.1, 5320.0], [78.2, 5323.0], [78.3, 5342.0], [78.4, 5357.0], [78.5, 5362.0], [78.6, 5376.0], [78.7, 5378.0], [78.8, 5384.0], [78.9, 5386.0], [79.0, 5389.0], [79.1, 5390.0], [79.2, 5390.0], [79.3, 5391.0], [79.4, 5391.0], [79.5, 5392.0], [79.6, 5393.0], [79.7, 5395.0], [79.8, 5406.0], [79.9, 5409.0], [80.0, 5411.0], [80.1, 5419.0], [80.2, 5420.0], [80.3, 5420.0], [80.4, 5425.0], [80.5, 5425.0], [80.6, 5428.0], [80.7, 5430.0], [80.8, 5430.0], [80.9, 5431.0], [81.0, 5433.0], [81.1, 5445.0], [81.2, 5447.0], [81.3, 5449.0], [81.4, 5451.0], [81.5, 5469.0], [81.6, 5476.0], [81.7, 5478.0], [81.8, 5480.0], [81.9, 5497.0], [82.0, 5497.0], [82.1, 5497.0], [82.2, 5499.0], [82.3, 5500.0], [82.4, 5502.0], [82.5, 5513.0], [82.6, 5513.0], [82.7, 5514.0], [82.8, 5514.0], [82.9, 5516.0], [83.0, 5517.0], [83.1, 5522.0], [83.2, 5524.0], [83.3, 5527.0], [83.4, 5531.0], [83.5, 5531.0], [83.6, 5532.0], [83.7, 5533.0], [83.8, 5542.0], [83.9, 5554.0], [84.0, 5554.0], [84.1, 5555.0], [84.2, 5557.0], [84.3, 5557.0], [84.4, 5561.0], [84.5, 5562.0], [84.6, 5562.0], [84.7, 5565.0], [84.8, 5566.0], [84.9, 5572.0], [85.0, 5575.0], [85.1, 5579.0], [85.2, 5581.0], [85.3, 5586.0], [85.4, 5595.0], [85.5, 5595.0], [85.6, 5596.0], [85.7, 5598.0], [85.8, 5598.0], [85.9, 5604.0], [86.0, 5605.0], [86.1, 5605.0], [86.2, 5606.0], [86.3, 5607.0], [86.4, 5610.0], [86.5, 5618.0], [86.6, 5626.0], [86.7, 5632.0], [86.8, 5635.0], [86.9, 5635.0], [87.0, 5638.0], [87.1, 5653.0], [87.2, 5653.0], [87.3, 5663.0], [87.4, 5668.0], [87.5, 5671.0], [87.6, 5672.0], [87.7, 5675.0], [87.8, 5675.0], [87.9, 5683.0], [88.0, 5684.0], [88.1, 5684.0], [88.2, 5687.0], [88.3, 5697.0], [88.4, 5713.0], [88.5, 5714.0], [88.6, 5723.0], [88.7, 5730.0], [88.8, 5734.0], [88.9, 5739.0], [89.0, 5743.0], [89.1, 5747.0], [89.2, 5752.0], [89.3, 5758.0], [89.4, 5761.0], [89.5, 5767.0], [89.6, 5776.0], [89.7, 5793.0], [89.8, 5802.0], [89.9, 5807.0], [90.0, 5812.0], [90.1, 5814.0], [90.2, 5820.0], [90.3, 5824.0], [90.4, 5832.0], [90.5, 5842.0], [90.6, 5846.0], [90.7, 5858.0], [90.8, 5871.0], [90.9, 5876.0], [91.0, 5886.0], [91.1, 5903.0], [91.2, 5917.0], [91.3, 5917.0], [91.4, 5946.0], [91.5, 5961.0], [91.6, 5965.0], [91.7, 5984.0], [91.8, 6007.0], [91.9, 6029.0], [92.0, 6031.0], [92.1, 6048.0], [92.2, 6079.0], [92.3, 6115.0], [92.4, 6115.0], [92.5, 6138.0], [92.6, 6152.0], [92.7, 6183.0], [92.8, 6197.0], [92.9, 6216.0], [93.0, 6233.0], [93.1, 6241.0], [93.2, 6261.0], [93.3, 6318.0], [93.4, 6333.0], [93.5, 6335.0], [93.6, 6350.0], [93.7, 6369.0], [93.8, 6391.0], [93.9, 6395.0], [94.0, 6415.0], [94.1, 6423.0], [94.2, 6432.0], [94.3, 6437.0], [94.4, 6441.0], [94.5, 6444.0], [94.6, 6477.0], [94.7, 6486.0], [94.8, 6495.0], [94.9, 6501.0], [95.0, 6516.0], [95.1, 6524.0], [95.2, 6526.0], [95.3, 6540.0], [95.4, 6546.0], [95.5, 6547.0], [95.6, 6574.0], [95.7, 6627.0], [95.8, 6642.0], [95.9, 6658.0], [96.0, 6659.0], [96.1, 6684.0], [96.2, 6690.0], [96.3, 6702.0], [96.4, 6709.0], [96.5, 6720.0], [96.6, 6724.0], [96.7, 6731.0], [96.8, 6741.0], [96.9, 6763.0], [97.0, 6782.0], [97.1, 6788.0], [97.2, 6798.0], [97.3, 6810.0], [97.4, 6821.0], [97.5, 6824.0], [97.6, 6837.0], [97.7, 6853.0], [97.8, 6854.0], [97.9, 6878.0], [98.0, 6903.0], [98.1, 6976.0], [98.2, 7005.0], [98.3, 7033.0], [98.4, 7131.0], [98.5, 7132.0], [98.6, 7133.0], [98.7, 7134.0], [98.8, 7168.0], [98.9, 7227.0], [99.0, 7237.0], [99.1, 7251.0], [99.2, 7265.0], [99.3, 7291.0], [99.4, 7299.0], [99.5, 7303.0], [99.6, 7306.0], [99.7, 7365.0], [99.8, 7370.0], [99.9, 11131.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 77.0, "series": [{"data": [[0.0, 36.0], [800.0, 2.0], [900.0, 3.0], [1000.0, 7.0], [1100.0, 15.0], [1200.0, 21.0], [1300.0, 15.0], [1400.0, 7.0], [1500.0, 5.0], [1600.0, 28.0], [1700.0, 48.0], [1800.0, 34.0], [1900.0, 44.0], [2000.0, 22.0], [2100.0, 22.0], [2200.0, 35.0], [2300.0, 37.0], [2400.0, 42.0], [2500.0, 46.0], [2600.0, 49.0], [2700.0, 77.0], [2800.0, 51.0], [2900.0, 23.0], [3000.0, 12.0], [3100.0, 12.0], [3200.0, 5.0], [3300.0, 17.0], [3500.0, 5.0], [3600.0, 2.0], [3800.0, 1.0], [4100.0, 1.0], [4200.0, 1.0], [4300.0, 1.0], [4800.0, 3.0], [4700.0, 2.0], [5100.0, 7.0], [4900.0, 6.0], [5000.0, 10.0], [5200.0, 6.0], [5300.0, 18.0], [5400.0, 25.0], [5500.0, 36.0], [5600.0, 25.0], [5700.0, 14.0], [5800.0, 13.0], [5900.0, 7.0], [6000.0, 5.0], [6100.0, 6.0], [6300.0, 7.0], [6200.0, 4.0], [6400.0, 9.0], [6500.0, 8.0], [6600.0, 6.0], [6700.0, 10.0], [6800.0, 7.0], [6900.0, 2.0], [7000.0, 2.0], [7100.0, 5.0], [7200.0, 6.0], [7300.0, 4.0], [11100.0, 1.0], [100.0, 8.0], [200.0, 2.0], [300.0, 1.0], [400.0, 4.0], [500.0, 5.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 265.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 735.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 265.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 735.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.75791042E12, "maxY": 501.4354354354356, "series": [{"data": [[1.75791042E12, 501.4354354354356], [1.75791048E12, 1.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791048E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 11131.0, "series": [{"data": [[2.0, 7370.0], [3.0, 7168.0], [4.0, 7306.0], [5.0, 7365.0], [6.0, 7303.0], [7.0, 7133.0], [8.0, 6763.0], [9.0, 6233.0], [10.0, 7299.0], [11.0, 6391.0], [12.0, 7291.0], [13.0, 4906.0], [14.0, 7251.0], [15.0, 6788.0], [16.0, 6853.0], [17.0, 7265.0], [18.0, 7131.0], [20.0, 6721.5], [21.0, 7237.0], [22.0, 7033.0], [23.0, 6976.0], [24.0, 6782.0], [25.0, 6335.0], [26.0, 6903.0], [28.0, 6965.0], [29.0, 7134.0], [30.0, 6878.0], [31.0, 6810.0], [32.0, 6854.0], [35.0, 6526.0], [34.0, 6921.0], [37.0, 5984.0], [36.0, 4732.0], [39.0, 6731.0], [38.0, 6720.0], [41.0, 6226.0], [43.0, 6658.0], [42.0, 6642.0], [45.0, 6821.0], [44.0, 6824.0], [46.0, 5684.0], [49.0, 6724.0], [48.0, 6657.5], [50.0, 6690.0], [53.0, 6423.0], [52.0, 6528.0], [55.0, 6659.0], [54.0, 6079.0], [57.0, 6512.0], [59.0, 6486.0], [58.0, 6702.0], [61.0, 5917.0], [60.0, 6684.0], [63.0, 6501.0], [62.0, 6495.0], [67.0, 5876.0], [66.0, 6484.0], [64.0, 6441.0], [71.0, 6546.0], [70.0, 6415.0], [69.0, 6432.0], [68.0, 6627.0], [75.0, 6395.0], [74.0, 6318.0], [73.0, 6351.0], [79.0, 6350.0], [78.0, 6261.0], [77.0, 6437.0], [76.0, 6241.0], [83.0, 6197.0], [82.0, 5566.0], [81.0, 5190.0], [80.0, 6048.0], [87.0, 6062.666666666667], [84.0, 4834.0], [91.0, 6183.0], [90.0, 6115.0], [89.0, 5961.0], [88.0, 5965.0], [95.0, 6115.0], [94.0, 5917.0], [93.0, 6138.0], [92.0, 3858.0], [99.0, 5946.0], [98.0, 5871.0], [97.0, 5820.0], [96.0, 6031.0], [103.0, 5886.0], [102.0, 5903.0], [101.0, 5151.0], [100.0, 5747.0], [107.0, 5858.0], [106.0, 5672.0], [105.0, 5675.0], [104.0, 5671.0], [110.0, 5846.0], [109.0, 4356.0], [108.0, 5687.0], [115.0, 5814.0], [114.0, 5842.0], [113.0, 5832.0], [112.0, 4628.0], [119.0, 5802.0], [118.0, 5812.0], [117.0, 5824.0], [116.0, 5635.0], [123.0, 5244.0], [122.0, 5253.0], [121.0, 5807.0], [120.0, 5793.0], [127.0, 4261.0], [126.0, 5618.0], [125.0, 5776.0], [124.0, 5734.0], [134.0, 5370.666666666667], [131.0, 5531.0], [130.0, 5761.0], [129.0, 5767.0], [128.0, 5010.0], [143.0, 5739.0], [142.0, 4117.0], [141.0, 5385.0], [138.0, 4924.5], [150.0, 3322.0], [149.0, 3506.0], [148.0, 5287.5], [146.0, 5222.5], [144.0, 5565.0], [159.0, 5499.0], [158.0, 5722.0], [156.0, 5080.0], [155.0, 4756.0], [152.0, 4374.0], [167.0, 5469.0], [166.0, 4786.0], [165.0, 5713.0], [164.0, 5599.5], [162.0, 5320.0], [161.0, 5517.0], [160.0, 5555.0], [175.0, 5683.5], [173.0, 5532.0], [172.0, 5569.333333333333], [170.0, 5497.0], [182.0, 5542.0], [181.0, 5635.0], [180.0, 5577.5], [178.0, 5066.0], [177.0, 5519.5], [191.0, 5632.0], [190.0, 5535.0], [187.0, 5668.0], [186.0, 5478.0], [185.0, 5212.666666666667], [199.0, 5395.0], [195.0, 5527.0], [193.0, 4290.5], [205.0, 5090.0], [201.0, 5420.0], [200.0, 5264.75], [215.0, 5445.0], [214.0, 5304.333333333333], [212.0, 5010.0], [211.0, 5336.666666666666], [218.0, 5215.666666666667], [217.0, 4843.0], [230.0, 5545.727272727273], [228.0, 5430.0], [234.0, 5495.75], [245.0, 5471.5], [243.0, 5521.444444444444], [255.0, 5497.0], [254.0, 5524.0], [253.0, 5516.0], [270.0, 3333.0], [271.0, 2933.0], [269.0, 2957.0], [268.0, 2415.0], [266.0, 3206.0], [265.0, 5200.0], [264.0, 5182.0], [263.0, 5277.0], [259.0, 5401.0], [256.0, 5392.0], [262.0, 5430.0], [261.0, 5449.0], [286.0, 2876.0], [287.0, 3040.0], [285.0, 3020.0], [284.0, 2891.0], [283.0, 2959.5], [282.0, 2909.0], [280.0, 2903.0], [279.0, 2933.0], [273.0, 2716.0], [275.0, 2747.0], [274.0, 2925.0], [277.0, 2919.0], [276.0, 2442.0], [301.0, 2712.0], [303.0, 2765.0], [300.0, 2715.0], [291.0, 2859.0], [290.0, 2866.0], [289.0, 2867.0], [288.0, 2871.0], [299.0, 2721.0], [298.0, 2822.0], [297.0, 2822.5], [295.0, 2847.0], [294.0, 2850.0], [293.0, 2860.0], [292.0, 3243.0], [317.0, 2834.0], [319.0, 2575.0], [316.0, 2789.0], [307.0, 2793.0], [306.0, 2798.0], [305.0, 2795.0], [304.0, 2702.0], [315.0, 2321.0], [314.0, 2588.5], [312.0, 2368.0], [311.0, 2656.0], [310.0, 2671.0], [309.0, 2671.0], [308.0, 2765.0], [334.0, 2285.0], [335.0, 2886.0], [333.0, 2286.0], [332.0, 2287.0], [331.0, 2289.0], [330.0, 2290.0], [329.0, 2903.0], [328.0, 2296.5], [326.0, 2294.0], [320.0, 2313.0], [322.0, 2307.0], [321.0, 2308.0], [325.0, 2301.0], [324.0, 2305.5], [350.0, 3360.0], [351.0, 2777.0], [349.0, 3385.0], [348.0, 2781.0], [347.0, 3213.0], [346.0, 2591.0], [345.0, 2942.0], [344.0, 2260.0], [343.0, 2262.0], [337.0, 2277.0], [336.0, 2279.0], [339.0, 2273.0], [338.0, 2275.0], [342.0, 2265.0], [340.0, 2269.0], [355.0, 3329.0], [366.0, 2748.0], [367.0, 3309.0], [364.0, 2821.0], [354.0, 3352.0], [353.0, 3375.0], [352.0, 3368.0], [361.0, 3367.0], [360.0, 3244.0], [359.0, 3326.0], [358.0, 3344.0], [357.0, 2849.0], [356.0, 3317.0], [382.0, 3162.0], [383.0, 3336.0], [381.0, 3109.0], [380.0, 3149.0], [379.0, 3354.0], [378.0, 2804.0], [377.0, 2776.0], [376.0, 2794.0], [375.0, 2795.0], [369.0, 2803.0], [371.0, 2803.0], [370.0, 2801.0], [374.0, 3183.0], [373.0, 2829.0], [372.0, 2801.0], [398.0, 3328.0], [399.0, 3132.0], [397.0, 1935.0], [396.0, 3198.0], [395.0, 3309.0], [394.0, 3143.0], [393.0, 2734.0], [392.0, 1604.0], [391.0, 2728.0], [385.0, 2790.0], [384.0, 3161.0], [387.0, 3156.0], [386.0, 2742.0], [390.0, 2693.0], [389.0, 2781.0], [388.0, 2699.0], [414.0, 3056.0], [415.0, 1025.0], [413.0, 2914.0], [402.0, 2759.0], [401.0, 3131.0], [400.0, 3131.0], [411.0, 3008.0], [410.0, 967.0], [409.0, 2698.0], [408.0, 1882.5], [406.0, 1948.0], [404.0, 2962.5], [429.0, 2796.0], [431.0, 2954.5], [428.0, 3029.0], [419.0, 2656.0], [418.0, 3228.0], [417.0, 994.0], [416.0, 1007.0], [427.0, 2790.0], [426.0, 2926.0], [424.0, 2767.0], [423.0, 2768.0], [422.0, 900.5], [420.0, 2655.0], [446.0, 2936.0], [447.0, 2909.0], [445.0, 2906.0], [444.0, 2815.0], [443.0, 2603.0], [442.0, 2914.0], [441.0, 2886.0], [440.0, 2971.3333333333335], [437.0, 2797.0], [435.0, 2859.0], [434.0, 2999.0], [433.0, 2953.0], [436.0, 2967.0], [462.0, 2809.0], [463.0, 2791.0], [461.0, 2807.0], [460.0, 2807.0], [459.0, 2764.0], [458.0, 2814.0], [456.0, 2718.0], [455.0, 2820.0], [451.0, 2723.0], [450.0, 2873.0], [454.0, 3004.0], [453.0, 2824.0], [452.0, 2820.0], [467.0, 2782.0], [479.0, 2813.5], [477.0, 2815.5], [466.0, 2781.0], [465.0, 2775.0], [464.0, 2909.0], [475.0, 2762.0], [474.0, 2890.0], [473.0, 2766.0], [471.0, 2776.0], [470.0, 2773.0], [469.0, 2777.0], [468.0, 2773.0], [494.0, 2559.0], [495.0, 2557.0], [493.0, 2744.0], [492.0, 2745.0], [491.0, 2755.0], [490.0, 2754.0], [489.0, 2577.0], [488.0, 2808.0], [487.0, 2798.0], [481.0, 2846.0], [480.0, 2873.0], [483.0, 2826.0], [482.0, 2840.0], [486.0, 2824.0], [485.0, 2816.0], [484.0, 2820.0], [509.0, 2663.0], [510.0, 2650.0], [508.0, 1028.0], [499.0, 2548.0], [498.0, 2551.0], [497.0, 2553.0], [496.0, 2737.0], [507.0, 1023.0], [506.0, 2618.0], [505.0, 2618.0], [504.0, 2718.0], [503.0, 2722.0], [502.0, 2724.0], [501.0, 2724.0], [500.0, 2874.0], [538.0, 2652.0], [542.0, 2573.0], [543.0, 2711.0], [529.0, 2720.0], [528.0, 2669.5], [531.0, 2755.0], [530.0, 2738.0], [533.0, 2753.0], [532.0, 2741.0], [541.0, 2298.0], [540.0, 2715.0], [539.0, 2306.0], [536.0, 2578.0], [518.0, 2559.0], [517.0, 2439.0], [516.0, 2626.0], [515.0, 2628.0], [514.0, 2356.0], [513.0, 2642.0], [512.0, 2647.0], [526.0, 2344.0], [525.0, 2606.0], [524.0, 2610.0], [523.0, 2336.0], [522.0, 2341.0], [521.0, 2340.0], [520.0, 2670.0], [535.0, 2581.0], [534.0, 2583.0], [572.0, 2691.0], [575.0, 2661.0], [561.0, 2634.0], [560.0, 2512.0], [563.0, 2625.0], [562.0, 2703.0], [565.0, 2705.0], [564.0, 2500.0], [574.0, 2664.0], [573.0, 2510.0], [571.0, 2515.0], [570.0, 2653.0], [569.0, 2511.0], [568.0, 2678.0], [559.0, 2690.0], [545.0, 2572.0], [544.0, 2572.0], [547.0, 2483.0], [546.0, 2730.0], [549.0, 2694.0], [548.0, 2651.0], [551.0, 2712.0], [550.0, 2542.0], [558.0, 2707.0], [557.0, 2533.0], [556.0, 2617.5], [554.0, 2700.0], [553.0, 2692.0], [552.0, 2624.0], [567.0, 2495.0], [566.0, 2675.0], [601.0, 2454.0], [606.0, 2598.5], [607.0, 2440.0], [593.0, 2457.0], [592.0, 2484.0], [595.0, 2653.0], [594.0, 2460.0], [597.0, 2570.0], [596.0, 2650.0], [605.0, 2552.0], [603.0, 2636.0], [602.0, 2452.0], [600.0, 2446.0], [583.0, 2237.0], [581.0, 2484.0], [580.0, 2500.0], [579.0, 2495.0], [578.0, 2486.0], [577.0, 2672.5], [591.0, 2462.0], [590.0, 2413.0], [589.0, 2410.0], [588.0, 2466.0], [587.0, 2629.0], [586.0, 2475.0], [585.0, 2471.0], [584.0, 2364.0], [599.0, 2647.0], [598.0, 2630.0], [633.0, 2362.0], [637.0, 2562.0], [638.0, 1013.0], [625.0, 1113.0], [624.0, 2575.0], [627.0, 2570.0], [626.0, 2573.0], [629.0, 2588.0], [628.0, 2566.0], [636.0, 1105.0], [635.0, 2579.0], [634.0, 2516.0], [632.0, 1189.0], [615.0, 2432.0], [614.0, 2611.0], [613.0, 2423.0], [612.0, 2424.0], [611.0, 2434.0], [610.0, 2428.0], [609.0, 2539.0], [623.0, 2575.0], [622.0, 2574.0], [621.0, 2483.0], [620.0, 2387.0], [619.0, 2582.0], [617.0, 2572.5], [631.0, 2362.0], [630.0, 2562.0], [665.0, 2230.0], [670.0, 2394.5], [671.0, 2433.0], [656.0, 2351.0], [659.0, 2478.0], [658.0, 2336.5], [661.0, 2237.0], [660.0, 2345.0], [668.0, 2487.0], [667.0, 2474.0], [666.0, 2314.0], [664.0, 2254.0], [647.0, 2278.0], [646.0, 2530.0], [645.0, 2350.0], [644.0, 2459.0], [643.0, 2554.0], [642.0, 2516.0], [641.0, 2486.0], [640.0, 2452.0], [655.0, 2484.0], [654.0, 2498.0], [653.0, 2249.0], [652.0, 2377.0], [650.0, 2266.0], [649.0, 2357.0], [648.0, 2363.0], [663.0, 2373.0], [662.0, 2342.0], [696.0, 1987.5], [701.0, 2243.0], [703.0, 2230.0], [688.0, 1974.0], [690.0, 2123.0], [689.0, 2375.0], [700.0, 2005.0], [699.0, 2089.0], [698.0, 2303.0], [687.0, 1979.0], [672.0, 2455.0], [674.0, 2154.0], [673.0, 2399.0], [676.0, 2202.0], [675.0, 2448.0], [678.0, 2197.0], [677.0, 2440.0], [686.0, 2176.0], [685.0, 2008.0], [684.0, 2172.0], [683.0, 2364.0], [682.0, 2442.0], [681.0, 1978.0], [680.0, 2167.0], [694.0, 1913.0], [693.0, 2264.0], [692.0, 2309.0], [691.0, 2368.0], [729.0, 1939.0], [733.0, 1982.0], [734.0, 10.0], [720.0, 1976.0], [722.0, 1995.0], [721.0, 1958.0], [724.0, 1818.0], [723.0, 1820.0], [732.0, 1804.0], [731.0, 2175.0], [730.0, 2204.0], [728.0, 1938.0], [711.0, 2271.0], [710.0, 2000.0], [709.0, 2246.0], [708.0, 2011.5], [706.0, 2072.6666666666665], [704.0, 2037.0], [719.0, 1972.0], [718.0, 1972.0], [717.0, 1980.0], [716.0, 2001.6666666666667], [713.0, 2099.0], [712.0, 1994.0], [727.0, 1928.5], [725.0, 2183.0], [761.0, 1937.0], [766.0, 1826.0], [767.0, 9.0], [753.0, 1768.0], [752.0, 23.0], [756.0, 1751.0], [755.0, 1945.0], [765.0, 940.0], [763.0, 1877.0], [762.0, 2161.0], [760.0, 1938.0], [742.0, 10.0], [741.0, 2163.0], [740.0, 11.0], [739.0, 1919.0], [738.0, 2004.6666666666667], [736.0, 2182.0], [751.0, 895.5], [749.0, 10.0], [748.0, 20.0], [747.0, 1774.0], [746.0, 2170.0], [745.0, 2173.0], [744.0, 2166.0], [759.0, 1058.5], [757.0, 2098.0], [796.0, 883.5], [797.0, 26.0], [793.0, 1803.0], [792.0, 1927.5], [791.0, 12.0], [790.0, 13.0], [784.0, 11.0], [783.0, 13.0], [772.0, 1911.0], [769.0, 9.0], [774.0, 1888.5], [773.0, 1729.0], [782.0, 12.0], [781.0, 14.0], [780.0, 15.0], [779.0, 2070.0], [778.0, 1859.0], [777.0, 2082.0], [776.0, 1939.0], [825.0, 12.0], [830.0, 2059.5], [831.0, 1839.0], [817.0, 1738.0], [816.0, 1591.0], [819.0, 1731.0], [818.0, 1735.0], [821.0, 1722.0], [820.0, 1511.0], [828.0, 15.0], [827.0, 1418.0], [826.0, 1477.0], [824.0, 1747.0], [807.0, 1876.0], [805.0, 1665.0], [803.0, 2072.0], [802.0, 1855.0], [801.0, 1790.0], [800.0, 1792.0], [815.0, 1611.0], [813.0, 12.0], [812.0, 1709.0], [811.0, 1696.0], [810.0, 17.0], [809.0, 1647.0], [808.0, 798.2222222222222], [823.0, 1711.0], [822.0, 1713.0], [857.0, 1410.0], [862.0, 1676.0], [863.0, 13.0], [850.0, 1904.0], [852.0, 1944.0], [851.0, 1984.0], [861.0, 2014.0], [860.0, 1445.0], [858.0, 1757.0], [856.0, 1877.0], [838.0, 1491.0], [837.0, 28.0], [836.0, 42.0], [835.0, 17.0], [834.0, 1864.0], [833.0, 1887.0], [832.0, 1614.0], [847.0, 1569.0], [846.0, 1691.0], [845.0, 1430.0], [843.0, 1896.0], [842.0, 1574.0], [855.0, 1997.5], [853.0, 1895.0], [893.0, 1824.0], [884.0, 357.7142857142857], [883.0, 1956.0], [882.0, 1960.0], [881.0, 385.5], [895.0, 546.0], [892.0, 505.0], [891.0, 1954.0], [890.0, 1944.0], [888.0, 1914.0], [879.0, 433.0], [864.0, 1489.5], [871.0, 1664.0], [870.0, 1641.5], [878.0, 1796.0], [877.0, 1783.0], [875.0, 1798.0], [874.0, 1952.0], [873.0, 410.0], [872.0, 1808.0], [887.0, 1627.0], [886.0, 1678.5], [920.0, 1307.0], [925.0, 1695.0], [927.0, 1517.0], [912.0, 1863.0], [914.0, 1686.0], [913.0, 1719.0], [924.0, 1300.0], [923.0, 1565.0], [921.0, 1808.0], [911.0, 1900.0], [896.0, 1940.0], [899.0, 1757.0], [898.0, 536.0], [901.0, 1759.0], [900.0, 1753.0], [903.0, 1930.0], [902.0, 1762.0], [910.0, 1701.0], [909.0, 1742.0], [908.0, 1729.0], [907.0, 1870.0], [906.0, 1924.0], [905.0, 1884.0], [904.0, 1926.0], [919.0, 1315.0], [918.0, 1497.5], [917.0, 1550.0], [915.0, 1327.0], [952.0, 1622.0], [956.0, 1219.0], [959.0, 1335.0], [945.0, 1209.0], [944.0, 1677.5], [948.0, 1612.0], [947.0, 1497.0], [958.0, 1271.0], [957.0, 1210.0], [955.0, 1798.0], [954.0, 1265.0], [953.0, 1282.0], [942.0, 1822.0], [928.0, 1280.0], [930.0, 76.0], [929.0, 1631.0], [933.0, 384.0], [932.0, 1071.5], [935.0, 1838.0], [934.0, 1832.0], [941.0, 164.0], [940.0, 1825.0], [939.0, 1710.5], [937.0, 1807.3333333333333], [950.0, 1238.0], [949.0, 1260.0], [965.0, 1355.25], [978.0, 1213.5], [981.0, 976.0], [980.0, 921.0], [979.0, 1208.5], [977.0, 1234.0], [976.0, 1479.5], [982.0, 1380.5], [975.0, 1267.0], [960.0, 1204.0], [962.0, 1772.0], [961.0, 1330.0], [964.0, 1158.0], [963.0, 1236.0], [966.0, 1404.6666666666667], [974.0, 1198.0], [973.0, 1687.0], [972.0, 1691.0], [971.0, 1175.0], [970.0, 1274.0], [969.0, 422.0], [968.0, 1352.0], [1.0, 11131.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[500.9329999999995, 3094.814000000001]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 982.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11.483333333333333, "minX": 1.75791042E12, "maxY": 1899539.05, "series": [{"data": [[1.75791042E12, 54163.1], [1.75791048E12, 11.483333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75791042E12, 1899539.05], [1.75791048E12, 7195.083333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791048E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3086.769769769771, "minX": 1.75791042E12, "maxY": 11131.0, "series": [{"data": [[1.75791042E12, 3086.769769769771], [1.75791048E12, 11131.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791048E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1525.38938938939, "minX": 1.75791042E12, "maxY": 11131.0, "series": [{"data": [[1.75791042E12, 1525.38938938939], [1.75791048E12, 11131.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791048E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2471.0160160160153, "minX": 1.75791042E12, "maxY": 3012.0, "series": [{"data": [[1.75791042E12, 2471.0160160160153], [1.75791048E12, 3012.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791048E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3322.0, "minX": 1.75791042E12, "maxY": 11131.0, "series": [{"data": [[1.75791042E12, 7370.0], [1.75791048E12, 11131.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75791042E12, 6804.0], [1.75791048E12, 11131.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75791042E12, 7326.6500000000015], [1.75791048E12, 11131.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75791042E12, 7132.75], [1.75791048E12, 11131.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75791042E12, 3322.0], [1.75791048E12, 11131.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75791042E12, 5629.0], [1.75791048E12, 11131.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791048E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 136.0, "minX": 1.0, "maxY": 11131.0, "series": [{"data": [[1.0, 11131.0], [70.0, 6705.5], [182.0, 5554.0], [12.0, 5411.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[293.0, 1735.0], [427.0, 2663.0], [15.0, 136.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 427.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 11131.0, "series": [{"data": [[1.0, 11131.0], [70.0, 6705.5], [182.0, 5554.0], [12.0, 5411.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[293.0, 0.0], [427.0, 0.0], [15.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 427.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791042E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791042E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791042E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75791042E12, "maxY": 12.25, "series": [{"data": [[1.75791042E12, 12.25]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLException", "isController": false}, {"data": [[1.75791042E12, 4.4], [1.75791048E12, 0.016666666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791048E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75791042E12, "maxY": 12.25, "series": [{"data": [[1.75791042E12, 4.4], [1.75791048E12, 0.016666666666666666]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}, {"data": [[1.75791042E12, 12.25]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791048E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.75791042E12, "maxY": 12.25, "series": [{"data": [[1.75791042E12, 4.4], [1.75791048E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75791042E12, 12.25]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791048E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

