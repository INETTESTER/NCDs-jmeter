/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 886.0, "minX": 0.0, "maxY": 22323.0, "series": [{"data": [[0.0, 886.0], [0.1, 997.0], [0.2, 1070.0], [0.3, 1070.0], [0.4, 1104.0], [0.5, 1131.0], [0.6, 1189.0], [0.7, 1190.0], [0.8, 1191.0], [0.9, 1210.0], [1.0, 1234.0], [1.1, 1239.0], [1.2, 1249.0], [1.3, 1254.0], [1.4, 1254.0], [1.5, 1259.0], [1.6, 1289.0], [1.7, 1289.0], [1.8, 1289.0], [1.9, 1290.0], [2.0, 1291.0], [2.1, 1298.0], [2.2, 1304.0], [2.3, 1305.0], [2.4, 1308.0], [2.5, 1319.0], [2.6, 1328.0], [2.7, 1344.0], [2.8, 1347.0], [2.9, 1347.0], [3.0, 1362.0], [3.1, 1370.0], [3.2, 1377.0], [3.3, 1387.0], [3.4, 1401.0], [3.5, 1405.0], [3.6, 1433.0], [3.7, 1440.0], [3.8, 1442.0], [3.9, 1446.0], [4.0, 1456.0], [4.1, 1458.0], [4.2, 1482.0], [4.3, 1482.0], [4.4, 1489.0], [4.5, 1510.0], [4.6, 1511.0], [4.7, 1566.0], [4.8, 1566.0], [4.9, 1577.0], [5.0, 1586.0], [5.1, 1590.0], [5.2, 1591.0], [5.3, 1603.0], [5.4, 1625.0], [5.5, 1626.0], [5.6, 1629.0], [5.7, 1664.0], [5.8, 1671.0], [5.9, 1672.0], [6.0, 1687.0], [6.1, 1689.0], [6.2, 1696.0], [6.3, 1713.0], [6.4, 1717.0], [6.5, 1724.0], [6.6, 1728.0], [6.7, 1739.0], [6.8, 1741.0], [6.9, 1750.0], [7.0, 1755.0], [7.1, 1761.0], [7.2, 1766.0], [7.3, 1775.0], [7.4, 1796.0], [7.5, 1805.0], [7.6, 1812.0], [7.7, 1826.0], [7.8, 1834.0], [7.9, 1845.0], [8.0, 1847.0], [8.1, 1851.0], [8.2, 1857.0], [8.3, 1874.0], [8.4, 1878.0], [8.5, 1884.0], [8.6, 1887.0], [8.7, 1888.0], [8.8, 1889.0], [8.9, 1904.0], [9.0, 1907.0], [9.1, 1911.0], [9.2, 1916.0], [9.3, 1916.0], [9.4, 1922.0], [9.5, 1923.0], [9.6, 1927.0], [9.7, 1934.0], [9.8, 1942.0], [9.9, 1957.0], [10.0, 1962.0], [10.1, 1964.0], [10.2, 2033.0], [10.3, 2041.0], [10.4, 2052.0], [10.5, 2085.0], [10.6, 2086.0], [10.7, 2088.0], [10.8, 2109.0], [10.9, 2116.0], [11.0, 2126.0], [11.1, 2126.0], [11.2, 2133.0], [11.3, 2145.0], [11.4, 2146.0], [11.5, 2152.0], [11.6, 2176.0], [11.7, 2185.0], [11.8, 2197.0], [11.9, 2203.0], [12.0, 2205.0], [12.1, 2230.0], [12.2, 2285.0], [12.3, 2402.0], [12.4, 2509.0], [12.5, 2516.0], [12.6, 2517.0], [12.7, 2521.0], [12.8, 2646.0], [12.9, 2784.0], [13.0, 2826.0], [13.1, 2901.0], [13.2, 7216.0], [13.3, 7325.0], [13.4, 7480.0], [13.5, 7697.0], [13.6, 7830.0], [13.7, 7990.0], [13.8, 9419.0], [13.9, 10150.0], [14.0, 10178.0], [14.1, 10186.0], [14.2, 10543.0], [14.3, 10689.0], [14.4, 10797.0], [14.5, 10837.0], [14.6, 11137.0], [14.7, 11172.0], [14.8, 11174.0], [14.9, 11175.0], [15.0, 11187.0], [15.1, 11207.0], [15.2, 11222.0], [15.3, 11222.0], [15.4, 11232.0], [15.5, 11236.0], [15.6, 11255.0], [15.7, 11257.0], [15.8, 11267.0], [15.9, 11281.0], [16.0, 11301.0], [16.1, 11429.0], [16.2, 11432.0], [16.3, 11477.0], [16.4, 11493.0], [16.5, 11527.0], [16.6, 11549.0], [16.7, 11574.0], [16.8, 11594.0], [16.9, 11595.0], [17.0, 11625.0], [17.1, 11655.0], [17.2, 11664.0], [17.3, 11696.0], [17.4, 11763.0], [17.5, 11894.0], [17.6, 11907.0], [17.7, 11929.0], [17.8, 11932.0], [17.9, 11940.0], [18.0, 11942.0], [18.1, 11942.0], [18.2, 11942.0], [18.3, 11943.0], [18.4, 11951.0], [18.5, 11953.0], [18.6, 11965.0], [18.7, 11984.0], [18.8, 11988.0], [18.9, 11991.0], [19.0, 11997.0], [19.1, 12004.0], [19.2, 12004.0], [19.3, 12016.0], [19.4, 12016.0], [19.5, 12020.0], [19.6, 12030.0], [19.7, 12068.0], [19.8, 12092.0], [19.9, 12094.0], [20.0, 12098.0], [20.1, 12132.0], [20.2, 12162.0], [20.3, 12163.0], [20.4, 12222.0], [20.5, 12227.0], [20.6, 12232.0], [20.7, 12233.0], [20.8, 12234.0], [20.9, 12253.0], [21.0, 12254.0], [21.1, 12266.0], [21.2, 12354.0], [21.3, 12356.0], [21.4, 12359.0], [21.5, 12361.0], [21.6, 12400.0], [21.7, 12463.0], [21.8, 12502.0], [21.9, 12530.0], [22.0, 12566.0], [22.1, 12600.0], [22.2, 12600.0], [22.3, 12624.0], [22.4, 12725.0], [22.5, 12777.0], [22.6, 12781.0], [22.7, 12790.0], [22.8, 12800.0], [22.9, 12800.0], [23.0, 12830.0], [23.1, 12843.0], [23.2, 12853.0], [23.3, 12857.0], [23.4, 12862.0], [23.5, 12872.0], [23.6, 12883.0], [23.7, 12888.0], [23.8, 12891.0], [23.9, 12894.0], [24.0, 12911.0], [24.1, 12932.0], [24.2, 12933.0], [24.3, 12949.0], [24.4, 12960.0], [24.5, 12968.0], [24.6, 12972.0], [24.7, 12973.0], [24.8, 13005.0], [24.9, 13009.0], [25.0, 13068.0], [25.1, 13127.0], [25.2, 13135.0], [25.3, 13195.0], [25.4, 13196.0], [25.5, 13208.0], [25.6, 13210.0], [25.7, 13220.0], [25.8, 13222.0], [25.9, 13231.0], [26.0, 13235.0], [26.1, 13237.0], [26.2, 13253.0], [26.3, 13280.0], [26.4, 13280.0], [26.5, 13282.0], [26.6, 13282.0], [26.7, 13297.0], [26.8, 13298.0], [26.9, 13300.0], [27.0, 13301.0], [27.1, 13331.0], [27.2, 13337.0], [27.3, 13339.0], [27.4, 13427.0], [27.5, 13433.0], [27.6, 13436.0], [27.7, 13448.0], [27.8, 13454.0], [27.9, 13457.0], [28.0, 13462.0], [28.1, 13462.0], [28.2, 13468.0], [28.3, 13475.0], [28.4, 13479.0], [28.5, 13480.0], [28.6, 13481.0], [28.7, 13482.0], [28.8, 13487.0], [28.9, 13491.0], [29.0, 13502.0], [29.1, 13504.0], [29.2, 13505.0], [29.3, 13507.0], [29.4, 13508.0], [29.5, 13522.0], [29.6, 13522.0], [29.7, 13526.0], [29.8, 13528.0], [29.9, 13528.0], [30.0, 13536.0], [30.1, 13537.0], [30.2, 13546.0], [30.3, 13547.0], [30.4, 13552.0], [30.5, 13560.0], [30.6, 13560.0], [30.7, 13565.0], [30.8, 13568.0], [30.9, 13588.0], [31.0, 13598.0], [31.1, 13603.0], [31.2, 13611.0], [31.3, 13662.0], [31.4, 13748.0], [31.5, 13754.0], [31.6, 13796.0], [31.7, 13811.0], [31.8, 13822.0], [31.9, 13839.0], [32.0, 13850.0], [32.1, 13893.0], [32.2, 13906.0], [32.3, 13916.0], [32.4, 13960.0], [32.5, 14007.0], [32.6, 14017.0], [32.7, 14028.0], [32.8, 14047.0], [32.9, 14056.0], [33.0, 14083.0], [33.1, 14086.0], [33.2, 14393.0], [33.3, 14429.0], [33.4, 14434.0], [33.5, 15166.0], [33.6, 15192.0], [33.7, 15287.0], [33.8, 15291.0], [33.9, 15381.0], [34.0, 15500.0], [34.1, 15507.0], [34.2, 15513.0], [34.3, 15577.0], [34.4, 15600.0], [34.5, 15605.0], [34.6, 15668.0], [34.7, 15679.0], [34.8, 15703.0], [34.9, 15708.0], [35.0, 15757.0], [35.1, 15760.0], [35.2, 15765.0], [35.3, 15791.0], [35.4, 15791.0], [35.5, 15792.0], [35.6, 15805.0], [35.7, 15817.0], [35.8, 15857.0], [35.9, 15858.0], [36.0, 15900.0], [36.1, 15933.0], [36.2, 15936.0], [36.3, 15938.0], [36.4, 15945.0], [36.5, 15960.0], [36.6, 15965.0], [36.7, 15977.0], [36.8, 15982.0], [36.9, 16004.0], [37.0, 16022.0], [37.1, 16031.0], [37.2, 16033.0], [37.3, 16048.0], [37.4, 16052.0], [37.5, 16076.0], [37.6, 16085.0], [37.7, 16085.0], [37.8, 16115.0], [37.9, 16122.0], [38.0, 16124.0], [38.1, 16135.0], [38.2, 16139.0], [38.3, 16155.0], [38.4, 16160.0], [38.5, 16165.0], [38.6, 16171.0], [38.7, 16175.0], [38.8, 16179.0], [38.9, 16195.0], [39.0, 16204.0], [39.1, 16205.0], [39.2, 16235.0], [39.3, 16248.0], [39.4, 16253.0], [39.5, 16294.0], [39.6, 16295.0], [39.7, 16347.0], [39.8, 16356.0], [39.9, 16381.0], [40.0, 16387.0], [40.1, 16403.0], [40.2, 16408.0], [40.3, 16412.0], [40.4, 16416.0], [40.5, 16438.0], [40.6, 16460.0], [40.7, 16493.0], [40.8, 16499.0], [40.9, 16530.0], [41.0, 16533.0], [41.1, 16543.0], [41.2, 16550.0], [41.3, 16564.0], [41.4, 16610.0], [41.5, 16612.0], [41.6, 16615.0], [41.7, 16624.0], [41.8, 16624.0], [41.9, 16636.0], [42.0, 16643.0], [42.1, 16649.0], [42.2, 16742.0], [42.3, 16776.0], [42.4, 16779.0], [42.5, 16806.0], [42.6, 16814.0], [42.7, 16820.0], [42.8, 16863.0], [42.9, 16864.0], [43.0, 16873.0], [43.1, 16907.0], [43.2, 16920.0], [43.3, 16943.0], [43.4, 17104.0], [43.5, 17119.0], [43.6, 17133.0], [43.7, 17252.0], [43.8, 17280.0], [43.9, 17299.0], [44.0, 17422.0], [44.1, 17438.0], [44.2, 17445.0], [44.3, 17477.0], [44.4, 17480.0], [44.5, 17486.0], [44.6, 17490.0], [44.7, 17537.0], [44.8, 17538.0], [44.9, 17567.0], [45.0, 17571.0], [45.1, 17574.0], [45.2, 17629.0], [45.3, 17630.0], [45.4, 17638.0], [45.5, 17640.0], [45.6, 17679.0], [45.7, 17705.0], [45.8, 17717.0], [45.9, 17745.0], [46.0, 17770.0], [46.1, 17771.0], [46.2, 17785.0], [46.3, 17811.0], [46.4, 17833.0], [46.5, 17852.0], [46.6, 17858.0], [46.7, 17862.0], [46.8, 17892.0], [46.9, 17900.0], [47.0, 17910.0], [47.1, 17918.0], [47.2, 17923.0], [47.3, 17928.0], [47.4, 17929.0], [47.5, 17932.0], [47.6, 17936.0], [47.7, 17946.0], [47.8, 17947.0], [47.9, 17949.0], [48.0, 17955.0], [48.1, 17955.0], [48.2, 17955.0], [48.3, 17962.0], [48.4, 17968.0], [48.5, 17988.0], [48.6, 17991.0], [48.7, 18004.0], [48.8, 18004.0], [48.9, 18015.0], [49.0, 18018.0], [49.1, 18020.0], [49.2, 18021.0], [49.3, 18022.0], [49.4, 18024.0], [49.5, 18042.0], [49.6, 18044.0], [49.7, 18046.0], [49.8, 18056.0], [49.9, 18057.0], [50.0, 18062.0], [50.1, 18066.0], [50.2, 18069.0], [50.3, 18088.0], [50.4, 18095.0], [50.5, 18102.0], [50.6, 18135.0], [50.7, 18141.0], [50.8, 18146.0], [50.9, 18146.0], [51.0, 18164.0], [51.1, 18166.0], [51.2, 18167.0], [51.3, 18171.0], [51.4, 18176.0], [51.5, 18179.0], [51.6, 18187.0], [51.7, 18191.0], [51.8, 18192.0], [51.9, 18199.0], [52.0, 18200.0], [52.1, 18205.0], [52.2, 18208.0], [52.3, 18209.0], [52.4, 18210.0], [52.5, 18215.0], [52.6, 18219.0], [52.7, 18225.0], [52.8, 18226.0], [52.9, 18227.0], [53.0, 18228.0], [53.1, 18237.0], [53.2, 18239.0], [53.3, 18242.0], [53.4, 18247.0], [53.5, 18248.0], [53.6, 18249.0], [53.7, 18250.0], [53.8, 18251.0], [53.9, 18254.0], [54.0, 18255.0], [54.1, 18262.0], [54.2, 18264.0], [54.3, 18272.0], [54.4, 18278.0], [54.5, 18281.0], [54.6, 18282.0], [54.7, 18294.0], [54.8, 18301.0], [54.9, 18301.0], [55.0, 18303.0], [55.1, 18305.0], [55.2, 18311.0], [55.3, 18321.0], [55.4, 18330.0], [55.5, 18336.0], [55.6, 18339.0], [55.7, 18341.0], [55.8, 18342.0], [55.9, 18343.0], [56.0, 18346.0], [56.1, 18352.0], [56.2, 18352.0], [56.3, 18353.0], [56.4, 18353.0], [56.5, 18353.0], [56.6, 18354.0], [56.7, 18354.0], [56.8, 18361.0], [56.9, 18364.0], [57.0, 18372.0], [57.1, 18373.0], [57.2, 18377.0], [57.3, 18380.0], [57.4, 18383.0], [57.5, 18390.0], [57.6, 18394.0], [57.7, 18398.0], [57.8, 18405.0], [57.9, 18406.0], [58.0, 18406.0], [58.1, 18408.0], [58.2, 18412.0], [58.3, 18413.0], [58.4, 18415.0], [58.5, 18417.0], [58.6, 18422.0], [58.7, 18424.0], [58.8, 18425.0], [58.9, 18426.0], [59.0, 18432.0], [59.1, 18434.0], [59.2, 18437.0], [59.3, 18440.0], [59.4, 18445.0], [59.5, 18452.0], [59.6, 18453.0], [59.7, 18453.0], [59.8, 18461.0], [59.9, 18464.0], [60.0, 18465.0], [60.1, 18466.0], [60.2, 18467.0], [60.3, 18467.0], [60.4, 18468.0], [60.5, 18469.0], [60.6, 18470.0], [60.7, 18477.0], [60.8, 18479.0], [60.9, 18483.0], [61.0, 18490.0], [61.1, 18493.0], [61.2, 18495.0], [61.3, 18495.0], [61.4, 18496.0], [61.5, 18503.0], [61.6, 18504.0], [61.7, 18507.0], [61.8, 18509.0], [61.9, 18512.0], [62.0, 18518.0], [62.1, 18518.0], [62.2, 18519.0], [62.3, 18522.0], [62.4, 18523.0], [62.5, 18526.0], [62.6, 18527.0], [62.7, 18540.0], [62.8, 18540.0], [62.9, 18541.0], [63.0, 18542.0], [63.1, 18544.0], [63.2, 18546.0], [63.3, 18549.0], [63.4, 18551.0], [63.5, 18555.0], [63.6, 18556.0], [63.7, 18557.0], [63.8, 18563.0], [63.9, 18574.0], [64.0, 18581.0], [64.1, 18590.0], [64.2, 18590.0], [64.3, 18591.0], [64.4, 18599.0], [64.5, 18605.0], [64.6, 18606.0], [64.7, 18606.0], [64.8, 18608.0], [64.9, 18612.0], [65.0, 18616.0], [65.1, 18623.0], [65.2, 18624.0], [65.3, 18628.0], [65.4, 18633.0], [65.5, 18635.0], [65.6, 18638.0], [65.7, 18649.0], [65.8, 18650.0], [65.9, 18654.0], [66.0, 18656.0], [66.1, 18661.0], [66.2, 18663.0], [66.3, 18663.0], [66.4, 18666.0], [66.5, 18670.0], [66.6, 18680.0], [66.7, 18681.0], [66.8, 18682.0], [66.9, 18685.0], [67.0, 18687.0], [67.1, 18688.0], [67.2, 18690.0], [67.3, 18695.0], [67.4, 18696.0], [67.5, 18696.0], [67.6, 18701.0], [67.7, 18701.0], [67.8, 18709.0], [67.9, 18710.0], [68.0, 18712.0], [68.1, 18713.0], [68.2, 18715.0], [68.3, 18715.0], [68.4, 18716.0], [68.5, 18716.0], [68.6, 18716.0], [68.7, 18719.0], [68.8, 18719.0], [68.9, 18720.0], [69.0, 18730.0], [69.1, 18736.0], [69.2, 18737.0], [69.3, 18740.0], [69.4, 18744.0], [69.5, 18745.0], [69.6, 18746.0], [69.7, 18748.0], [69.8, 18754.0], [69.9, 18754.0], [70.0, 18754.0], [70.1, 18756.0], [70.2, 18757.0], [70.3, 18757.0], [70.4, 18758.0], [70.5, 18769.0], [70.6, 18770.0], [70.7, 18771.0], [70.8, 18772.0], [70.9, 18772.0], [71.0, 18775.0], [71.1, 18780.0], [71.2, 18787.0], [71.3, 18787.0], [71.4, 18791.0], [71.5, 18795.0], [71.6, 18796.0], [71.7, 18796.0], [71.8, 18800.0], [71.9, 18800.0], [72.0, 18801.0], [72.1, 18806.0], [72.2, 18806.0], [72.3, 18807.0], [72.4, 18807.0], [72.5, 18810.0], [72.6, 18814.0], [72.7, 18815.0], [72.8, 18816.0], [72.9, 18817.0], [73.0, 18819.0], [73.1, 18820.0], [73.2, 18822.0], [73.3, 18823.0], [73.4, 18824.0], [73.5, 18830.0], [73.6, 18842.0], [73.7, 18842.0], [73.8, 18843.0], [73.9, 18847.0], [74.0, 18849.0], [74.1, 18850.0], [74.2, 18852.0], [74.3, 18859.0], [74.4, 18860.0], [74.5, 18860.0], [74.6, 18866.0], [74.7, 18868.0], [74.8, 18869.0], [74.9, 18870.0], [75.0, 18871.0], [75.1, 18872.0], [75.2, 18874.0], [75.3, 18881.0], [75.4, 18882.0], [75.5, 18882.0], [75.6, 18885.0], [75.7, 18890.0], [75.8, 18896.0], [75.9, 18900.0], [76.0, 18908.0], [76.1, 18911.0], [76.2, 18914.0], [76.3, 18915.0], [76.4, 18928.0], [76.5, 18931.0], [76.6, 18933.0], [76.7, 18942.0], [76.8, 18943.0], [76.9, 18947.0], [77.0, 18950.0], [77.1, 18950.0], [77.2, 18953.0], [77.3, 18955.0], [77.4, 18964.0], [77.5, 18965.0], [77.6, 18968.0], [77.7, 18968.0], [77.8, 18977.0], [77.9, 18982.0], [78.0, 18987.0], [78.1, 18991.0], [78.2, 18995.0], [78.3, 18997.0], [78.4, 19002.0], [78.5, 19005.0], [78.6, 19005.0], [78.7, 19007.0], [78.8, 19013.0], [78.9, 19013.0], [79.0, 19014.0], [79.1, 19017.0], [79.2, 19022.0], [79.3, 19024.0], [79.4, 19032.0], [79.5, 19033.0], [79.6, 19034.0], [79.7, 19040.0], [79.8, 19044.0], [79.9, 19044.0], [80.0, 19049.0], [80.1, 19050.0], [80.2, 19050.0], [80.3, 19051.0], [80.4, 19055.0], [80.5, 19055.0], [80.6, 19059.0], [80.7, 19072.0], [80.8, 19073.0], [80.9, 19073.0], [81.0, 19074.0], [81.1, 19079.0], [81.2, 19080.0], [81.3, 19083.0], [81.4, 19083.0], [81.5, 19084.0], [81.6, 19090.0], [81.7, 19093.0], [81.8, 19099.0], [81.9, 19101.0], [82.0, 19104.0], [82.1, 19105.0], [82.2, 19106.0], [82.3, 19118.0], [82.4, 19120.0], [82.5, 19126.0], [82.6, 19127.0], [82.7, 19128.0], [82.8, 19129.0], [82.9, 19133.0], [83.0, 19139.0], [83.1, 19142.0], [83.2, 19143.0], [83.3, 19145.0], [83.4, 19148.0], [83.5, 19150.0], [83.6, 19152.0], [83.7, 19153.0], [83.8, 19155.0], [83.9, 19155.0], [84.0, 19157.0], [84.1, 19158.0], [84.2, 19159.0], [84.3, 19168.0], [84.4, 19169.0], [84.5, 19169.0], [84.6, 19169.0], [84.7, 19170.0], [84.8, 19172.0], [84.9, 19173.0], [85.0, 19173.0], [85.1, 19174.0], [85.2, 19175.0], [85.3, 19180.0], [85.4, 19180.0], [85.5, 19181.0], [85.6, 19181.0], [85.7, 19185.0], [85.8, 19190.0], [85.9, 19192.0], [86.0, 19193.0], [86.1, 19195.0], [86.2, 19200.0], [86.3, 19201.0], [86.4, 19204.0], [86.5, 19208.0], [86.6, 19210.0], [86.7, 19217.0], [86.8, 19218.0], [86.9, 19220.0], [87.0, 19221.0], [87.1, 19221.0], [87.2, 19225.0], [87.3, 19225.0], [87.4, 19225.0], [87.5, 19228.0], [87.6, 19228.0], [87.7, 19229.0], [87.8, 19231.0], [87.9, 19237.0], [88.0, 19246.0], [88.1, 19248.0], [88.2, 19253.0], [88.3, 19253.0], [88.4, 19256.0], [88.5, 19263.0], [88.6, 19264.0], [88.7, 19265.0], [88.8, 19276.0], [88.9, 19279.0], [89.0, 19283.0], [89.1, 19287.0], [89.2, 19288.0], [89.3, 19290.0], [89.4, 19291.0], [89.5, 19300.0], [89.6, 19303.0], [89.7, 19306.0], [89.8, 19309.0], [89.9, 19310.0], [90.0, 19312.0], [90.1, 19312.0], [90.2, 19323.0], [90.3, 19325.0], [90.4, 19330.0], [90.5, 19331.0], [90.6, 19333.0], [90.7, 19335.0], [90.8, 19337.0], [90.9, 19342.0], [91.0, 19343.0], [91.1, 19344.0], [91.2, 19346.0], [91.3, 19349.0], [91.4, 19356.0], [91.5, 19357.0], [91.6, 19357.0], [91.7, 19359.0], [91.8, 19364.0], [91.9, 19370.0], [92.0, 19370.0], [92.1, 19375.0], [92.2, 19376.0], [92.3, 19384.0], [92.4, 19386.0], [92.5, 19390.0], [92.6, 19391.0], [92.7, 19400.0], [92.8, 19402.0], [92.9, 19409.0], [93.0, 19411.0], [93.1, 19426.0], [93.2, 19429.0], [93.3, 19432.0], [93.4, 19436.0], [93.5, 19441.0], [93.6, 19442.0], [93.7, 19449.0], [93.8, 19452.0], [93.9, 19457.0], [94.0, 19468.0], [94.1, 19471.0], [94.2, 19479.0], [94.3, 19480.0], [94.4, 19483.0], [94.5, 19486.0], [94.6, 19487.0], [94.7, 19489.0], [94.8, 19511.0], [94.9, 19514.0], [95.0, 19520.0], [95.1, 19527.0], [95.2, 19529.0], [95.3, 19533.0], [95.4, 19534.0], [95.5, 19534.0], [95.6, 19537.0], [95.7, 19541.0], [95.8, 19547.0], [95.9, 19549.0], [96.0, 19555.0], [96.1, 19567.0], [96.2, 19568.0], [96.3, 19568.0], [96.4, 19571.0], [96.5, 19577.0], [96.6, 19580.0], [96.7, 19581.0], [96.8, 19583.0], [96.9, 19584.0], [97.0, 19588.0], [97.1, 19602.0], [97.2, 19608.0], [97.3, 19609.0], [97.4, 19609.0], [97.5, 19609.0], [97.6, 19622.0], [97.7, 19635.0], [97.8, 19642.0], [97.9, 19645.0], [98.0, 19648.0], [98.1, 19675.0], [98.2, 19679.0], [98.3, 19700.0], [98.4, 19703.0], [98.5, 19707.0], [98.6, 19713.0], [98.7, 19723.0], [98.8, 19747.0], [98.9, 19749.0], [99.0, 19774.0], [99.1, 19831.0], [99.2, 19831.0], [99.3, 19848.0], [99.4, 19850.0], [99.5, 19853.0], [99.6, 19949.0], [99.7, 19957.0], [99.8, 22087.0], [99.9, 22323.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 800.0, "maxY": 43.0, "series": [{"data": [[800.0, 1.0], [900.0, 1.0], [1000.0, 2.0], [1100.0, 5.0], [1200.0, 12.0], [1300.0, 12.0], [1400.0, 11.0], [1500.0, 9.0], [1600.0, 10.0], [1700.0, 12.0], [1800.0, 14.0], [1900.0, 13.0], [2000.0, 6.0], [2100.0, 11.0], [2200.0, 4.0], [2400.0, 1.0], [2500.0, 4.0], [2600.0, 1.0], [2700.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [7200.0, 1.0], [7400.0, 1.0], [7300.0, 1.0], [7600.0, 1.0], [7800.0, 1.0], [7900.0, 1.0], [9400.0, 1.0], [10100.0, 3.0], [10500.0, 1.0], [10600.0, 1.0], [10700.0, 1.0], [10800.0, 1.0], [11100.0, 5.0], [11200.0, 9.0], [11400.0, 4.0], [11500.0, 5.0], [11600.0, 4.0], [11300.0, 1.0], [11700.0, 1.0], [12100.0, 3.0], [12200.0, 8.0], [11900.0, 15.0], [11800.0, 1.0], [12000.0, 9.0], [12300.0, 4.0], [12500.0, 3.0], [12600.0, 3.0], [12400.0, 2.0], [12700.0, 4.0], [12800.0, 12.0], [12900.0, 8.0], [13000.0, 3.0], [13200.0, 14.0], [13100.0, 4.0], [13300.0, 5.0], [13400.0, 16.0], [13500.0, 21.0], [13600.0, 3.0], [13800.0, 5.0], [13700.0, 3.0], [13900.0, 3.0], [14000.0, 7.0], [14300.0, 1.0], [14400.0, 2.0], [15100.0, 2.0], [15200.0, 2.0], [15300.0, 1.0], [15600.0, 4.0], [15500.0, 4.0], [15700.0, 8.0], [15800.0, 4.0], [15900.0, 9.0], [16300.0, 4.0], [16100.0, 12.0], [16200.0, 7.0], [16000.0, 9.0], [16500.0, 5.0], [16400.0, 8.0], [16600.0, 8.0], [16800.0, 6.0], [17400.0, 7.0], [16700.0, 3.0], [16900.0, 3.0], [17100.0, 3.0], [17200.0, 3.0], [17600.0, 5.0], [17500.0, 5.0], [17800.0, 6.0], [17900.0, 18.0], [18000.0, 18.0], [17700.0, 6.0], [18100.0, 15.0], [18200.0, 28.0], [18300.0, 30.0], [18400.0, 37.0], [18500.0, 30.0], [18600.0, 31.0], [18700.0, 42.0], [18800.0, 41.0], [18900.0, 25.0], [19000.0, 36.0], [19100.0, 43.0], [19200.0, 33.0], [19300.0, 32.0], [19400.0, 21.0], [19500.0, 23.0], [19600.0, 12.0], [19700.0, 8.0], [19800.0, 5.0], [19900.0, 2.0], [22300.0, 1.0], [22000.0, 1.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 22300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 951.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 44.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 951.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.15999999999997, "minX": 1.75791834E12, "maxY": 501.15999999999997, "series": [{"data": [[1.75791834E12, 501.15999999999997]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791834E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 997.0, "minX": 1.0, "maxY": 22323.0, "series": [{"data": [[2.0, 22323.0], [3.0, 19608.0], [4.0, 19609.0], [7.0, 19521.666666666668], [8.0, 19957.0], [10.0, 19662.0], [12.0, 19469.0], [13.0, 19949.0], [14.0, 19648.0], [15.0, 19642.0], [16.0, 19584.0], [17.0, 19330.0], [18.0, 19370.0], [19.0, 19312.0], [20.0, 19529.0], [21.0, 19489.0], [22.0, 19527.0], [23.0, 19848.0], [25.0, 19180.0], [26.0, 19557.0], [27.0, 19602.0], [28.0, 19157.0], [30.0, 19704.0], [33.0, 19441.0], [32.0, 19639.5], [35.0, 19831.0], [34.0, 19831.0], [36.0, 19325.0], [39.0, 19466.0], [41.0, 19479.0], [40.0, 19511.0], [43.0, 19432.0], [42.0, 19172.0], [45.0, 19265.0], [44.0, 19471.0], [47.0, 19713.0], [46.0, 19050.0], [49.0, 19568.0], [48.0, 19457.0], [50.0, 19774.0], [53.0, 19400.0], [52.0, 19064.0], [54.0, 19436.0], [57.0, 19174.0], [56.0, 19426.5], [59.0, 19406.0], [61.0, 19376.0], [60.0, 19749.0], [63.0, 19587.5], [66.0, 19442.0], [65.0, 19323.0], [64.0, 19333.0], [71.0, 19559.0], [69.0, 19391.0], [68.0, 19160.0], [75.0, 19635.0], [74.0, 19343.0], [73.0, 19426.0], [72.0, 19703.0], [79.0, 19005.0], [78.0, 18915.0], [77.0, 19675.0], [76.0, 19700.0], [83.0, 18874.0], [82.0, 19142.0], [81.0, 18881.0], [80.0, 19279.0], [87.0, 19349.0], [86.0, 19381.5], [84.0, 19083.0], [91.0, 18885.0], [90.0, 19342.0], [89.0, 19386.0], [88.0, 19306.0], [93.0, 19312.0], [92.0, 19133.0], [99.0, 19365.5], [97.0, 19093.0], [96.0, 18943.0], [103.0, 19381.5], [101.0, 19192.0], [100.0, 18847.0], [107.0, 19221.0], [106.0, 19044.0], [105.0, 19303.0], [104.0, 19609.0], [110.0, 18896.0], [109.0, 19228.0], [108.0, 19017.0], [115.0, 19237.0], [114.0, 19290.0], [113.0, 19291.0], [112.0, 19032.0], [119.0, 19379.0], [117.0, 19217.0], [116.0, 19310.0], [121.0, 18787.0], [120.0, 19390.0], [135.0, 19568.0], [134.0, 19225.0], [133.0, 19050.0], [132.0, 19225.0], [131.0, 19248.0], [130.0, 19567.0], [129.0, 19232.875], [142.0, 19059.0], [141.0, 19169.0], [140.0, 19283.0], [139.0, 18945.0], [137.0, 19208.0], [136.0, 19287.0], [151.0, 19004.0], [149.0, 19181.0], [148.0, 19220.0], [147.0, 19201.0], [146.0, 19549.0], [145.0, 19225.0], [144.0, 19133.0], [159.0, 19346.0], [157.0, 19139.0], [156.0, 18842.0], [155.0, 19256.0], [154.0, 19533.0], [153.0, 19335.0], [152.0, 19264.0], [167.0, 19514.0], [166.0, 19206.5], [164.0, 18931.0], [163.0, 18688.0], [162.0, 19246.0], [161.0, 18715.0], [160.0, 18950.0], [175.0, 19081.0], [173.0, 19128.0], [172.0, 19480.0], [171.0, 18872.0], [170.0, 19175.0], [169.0, 19190.0], [168.0, 18882.0], [183.0, 19049.0], [182.0, 19487.0], [181.0, 18800.0], [180.0, 19041.5], [178.0, 18807.0], [177.0, 19150.0], [176.0, 19300.0], [191.0, 19169.5], [189.0, 19148.0], [188.0, 19152.5], [186.0, 18997.0], [185.0, 19295.5], [199.0, 19155.0], [198.0, 19101.0], [197.0, 19402.0], [196.0, 19079.0], [195.0, 18685.0], [194.0, 18914.0], [192.0, 19180.0], [206.0, 19364.0], [205.0, 18807.0], [204.0, 19055.0], [203.0, 19092.0], [201.0, 19129.0], [200.0, 19126.0], [215.0, 19223.0], [214.0, 18991.0], [211.0, 19024.0], [210.0, 18623.0], [209.0, 18895.0], [222.0, 19375.0], [221.0, 19014.0], [220.0, 19173.0], [219.0, 19032.0], [218.0, 19033.0], [217.0, 19007.0], [216.0, 19181.0], [231.0, 18616.0], [230.0, 19055.0], [229.0, 19034.0], [227.0, 19016.5], [225.0, 19072.0], [224.0, 18802.5], [239.0, 18542.0], [238.0, 18882.0], [237.0, 18716.0], [236.0, 19022.0], [233.0, 18987.666666666668], [247.0, 18757.0], [246.0, 19263.0], [245.0, 19002.0], [244.0, 18987.0], [243.0, 18857.0], [240.0, 18871.0], [255.0, 18947.0], [254.0, 18882.0], [252.0, 18964.0], [251.0, 18756.5], [249.0, 18670.0], [248.0, 18745.0], [270.0, 18434.0], [271.0, 18523.0], [269.0, 18468.0], [268.0, 18546.0], [267.0, 18654.0], [265.0, 18890.0], [264.0, 18908.0], [263.0, 18690.0], [259.0, 18681.5], [257.0, 18955.0], [262.0, 19253.0], [261.0, 18719.0], [260.0, 18650.0], [286.0, 18519.0], [287.0, 18406.0], [285.0, 19168.0], [284.0, 19204.0], [283.0, 19169.0], [282.0, 19210.0], [281.0, 18852.0], [280.0, 18757.333333333332], [277.0, 19231.0], [275.0, 18965.0], [274.0, 18763.666666666668], [276.0, 18914.0], [303.0, 18699.666666666668], [300.0, 18466.0], [299.0, 18859.0], [298.0, 18866.0], [297.0, 18806.0], [296.0, 18816.0], [294.0, 18823.0], [293.0, 18924.0], [291.0, 19193.0], [290.0, 18557.0], [289.0, 19169.0], [288.0, 18843.0], [318.0, 18612.0], [319.0, 18445.0], [317.0, 18581.0], [316.0, 18772.0], [315.0, 18817.0], [314.0, 18364.0], [313.0, 18806.0], [312.0, 18933.5], [310.0, 18757.0], [307.0, 18796.0], [306.0, 19145.0], [305.0, 18643.0], [309.0, 19006.5], [323.0, 18756.0], [334.0, 18519.0], [335.0, 19099.0], [332.0, 18779.5], [330.0, 18301.0], [329.0, 18507.0], [327.0, 18708.0], [325.0, 18783.0], [322.0, 18330.0], [321.0, 18437.0], [320.0, 18608.0], [350.0, 18426.0], [351.0, 18490.0], [349.0, 18737.0], [348.0, 18215.0], [347.0, 18383.0], [346.0, 18551.0], [345.0, 18353.0], [344.0, 18780.0], [343.0, 18264.0], [337.0, 18796.0], [336.0, 18816.0], [339.0, 18815.0], [338.0, 19073.0], [342.0, 18380.0], [341.0, 18918.5], [366.0, 18469.0], [367.0, 18635.0], [365.0, 18453.0], [364.0, 18541.0], [363.0, 18422.0], [362.0, 18687.0], [361.0, 19022.0], [360.0, 18544.0], [359.0, 18710.0], [353.0, 19013.0], [352.0, 18715.0], [355.0, 18661.0], [354.0, 18518.0], [358.0, 18712.0], [357.0, 18461.0], [356.0, 18606.0], [382.0, 18412.0], [383.0, 18242.0], [381.0, 18496.0], [380.0, 18495.0], [379.0, 18619.0], [377.0, 18953.0], [376.0, 18208.0], [375.0, 18341.0], [369.0, 18209.0], [368.0, 18191.0], [371.0, 18390.0], [370.0, 18666.0], [374.0, 18624.0], [373.0, 18467.0], [372.0, 18638.0], [386.0, 18394.0], [397.0, 18377.0], [399.0, 18543.5], [396.0, 18334.0], [385.0, 18527.0], [384.0, 18591.0], [395.0, 18537.0], [392.0, 18540.0], [391.0, 18352.0], [390.0, 18219.0], [389.0, 18171.0], [388.0, 18711.5], [414.0, 18860.0], [415.0, 18509.0], [413.0, 18337.0], [403.0, 18294.0], [402.0, 18272.0], [401.0, 18472.5], [411.0, 18522.0], [410.0, 18255.0], [409.0, 18507.0], [408.0, 18146.0], [407.0, 18164.0], [406.0, 18529.5], [404.0, 18563.0], [430.0, 18004.0], [431.0, 18479.0], [429.0, 18200.0], [428.0, 18210.0], [427.0, 18628.0], [426.0, 18800.0], [425.0, 18526.0], [424.0, 18860.0], [423.0, 18470.5], [418.0, 18354.0], [417.0, 18656.0], [416.0, 18493.0], [421.0, 18229.333333333332], [446.0, 18801.0], [447.0, 18199.0], [445.0, 18470.0], [444.0, 18237.0], [443.0, 17991.0], [442.0, 18407.0], [441.0, 18483.0], [439.0, 18769.0], [433.0, 18239.0], [435.0, 18824.0], [434.0, 18122.0], [438.0, 18255.5], [436.0, 18022.0], [462.0, 18342.0], [463.0, 18701.0], [461.0, 18167.0], [460.0, 18057.0], [459.0, 18754.0], [458.0, 18486.5], [456.0, 18452.0], [455.0, 18372.0], [448.0, 18250.0], [451.0, 18473.0], [449.0, 18495.0], [454.0, 18413.0], [453.0, 18417.0], [452.0, 18432.0], [467.0, 18696.0], [477.0, 18415.0], [476.0, 18375.0], [474.0, 18106.0], [472.0, 17932.0], [471.0, 18680.0], [470.0, 18709.0], [469.0, 18166.0], [468.0, 18102.0], [466.0, 18733.0], [464.0, 18004.0], [494.0, 18311.0], [495.0, 18247.0], [493.0, 17962.0], [483.0, 18315.5], [481.0, 18361.0], [480.0, 18441.333333333332], [491.0, 17862.0], [490.0, 18066.0], [489.0, 18069.0], [488.0, 18301.0], [487.0, 18015.0], [486.0, 18701.0], [485.0, 18024.0], [484.0, 18373.0], [510.0, 17928.0], [511.0, 17811.0], [509.0, 17936.0], [508.0, 18021.0], [507.0, 17852.0], [506.0, 17955.0], [505.0, 18249.0], [504.0, 18042.0], [503.0, 18281.0], [497.0, 18228.0], [496.0, 18248.0], [499.0, 18425.0], [498.0, 18282.0], [502.0, 17988.0], [501.0, 18339.0], [500.0, 18254.0], [540.0, 17929.0], [543.0, 17480.0], [529.0, 18305.0], [528.0, 18262.0], [531.0, 17717.0], [530.0, 17955.0], [533.0, 17486.0], [532.0, 17490.0], [542.0, 17785.0], [541.0, 17574.0], [539.0, 17705.0], [538.0, 17923.0], [537.0, 18251.0], [536.0, 17955.0], [527.0, 18303.0], [513.0, 18294.0], [515.0, 17833.0], [514.0, 17745.0], [517.0, 18088.0], [516.0, 18146.0], [519.0, 17679.0], [518.0, 18179.0], [526.0, 18311.0], [525.0, 17771.0], [524.0, 17629.0], [523.0, 17947.0], [522.0, 18336.0], [521.0, 18354.0], [520.0, 17918.0], [535.0, 17910.0], [534.0, 17946.0], [572.0, 16863.0], [575.0, 16742.0], [561.0, 17900.0], [560.0, 17949.0], [563.0, 17538.0], [562.0, 17858.0], [565.0, 16920.0], [564.0, 17104.0], [574.0, 16943.0], [573.0, 16806.0], [571.0, 16776.0], [570.0, 17567.0], [569.0, 16873.0], [568.0, 17133.0], [559.0, 17630.0], [545.0, 17445.0], [544.0, 18141.0], [547.0, 17299.0], [546.0, 18095.0], [549.0, 17438.0], [548.0, 17537.0], [551.0, 17770.0], [550.0, 17422.0], [558.0, 17252.0], [557.0, 17119.0], [556.0, 17280.0], [555.0, 17640.0], [554.0, 17841.0], [552.0, 17571.0], [567.0, 16820.0], [566.0, 16907.0], [600.0, 16106.0], [604.0, 16004.0], [607.0, 16403.0], [592.0, 16235.0], [595.0, 16550.0], [594.0, 16287.5], [606.0, 16022.0], [605.0, 16085.0], [603.0, 16408.0], [602.0, 16135.0], [601.0, 16438.0], [591.0, 16406.0], [576.0, 16779.0], [578.0, 17477.0], [577.0, 16643.0], [580.0, 16624.0], [579.0, 16615.0], [582.0, 16493.0], [581.0, 16610.0], [589.0, 16179.0], [588.0, 16530.0], [587.0, 16864.0], [586.0, 16636.0], [585.0, 16533.0], [584.0, 16713.0], [598.0, 16139.0], [597.0, 16145.0], [636.0, 15791.0], [639.0, 15805.0], [625.0, 16649.0], [624.0, 16253.0], [627.0, 15900.0], [626.0, 16171.0], [629.0, 16195.0], [628.0, 16624.0], [638.0, 16543.0], [637.0, 15679.0], [635.0, 15792.0], [634.0, 16165.0], [633.0, 15765.0], [632.0, 15757.0], [623.0, 16155.0], [610.0, 16076.0], [609.0, 16292.5], [612.0, 16356.0], [611.0, 16295.0], [614.0, 15938.0], [613.0, 15982.0], [622.0, 15945.0], [621.0, 16294.0], [620.0, 15977.0], [619.0, 15985.333333333334], [616.0, 16040.5], [631.0, 16124.0], [630.0, 15760.0], [665.0, 15600.0], [670.0, 14056.0], [671.0, 13916.0], [656.0, 15857.0], [658.0, 15791.0], [657.0, 15500.0], [660.0, 15708.0], [659.0, 15381.0], [669.0, 14393.0], [668.0, 14434.0], [667.0, 14797.5], [664.0, 15287.0], [647.0, 16387.0], [646.0, 16347.0], [645.0, 16416.0], [644.0, 16412.0], [643.0, 15703.0], [642.0, 16122.0], [641.0, 16499.0], [640.0, 16175.0], [655.0, 15605.0], [654.0, 15507.0], [653.0, 15577.0], [652.0, 15936.0], [651.0, 15933.0], [650.0, 15858.0], [649.0, 15817.0], [648.0, 15668.0], [663.0, 15402.0], [661.0, 15192.0], [678.0, 14047.0], [703.0, 13850.0], [694.0, 13638.625], [686.0, 13548.0], [680.0, 13507.0], [679.0, 13611.0], [677.0, 14057.0], [675.0, 14017.0], [674.0, 13748.0], [673.0, 13918.5], [734.0, 13335.5], [728.0, 13368.0], [725.0, 13382.666666666666], [722.0, 13475.0], [721.0, 13822.0], [720.0, 13579.0], [709.0, 13571.75], [705.0, 13547.4], [743.0, 13068.0], [766.0, 13048.0], [764.0, 12969.0], [759.0, 13021.0], [754.0, 12993.142857142859], [747.0, 13009.0], [746.0, 12968.0], [745.0, 13433.0], [744.0, 13127.0], [742.0, 13526.0], [741.0, 13196.0], [740.0, 13185.0], [738.0, 13220.5], [736.0, 13280.0], [780.0, 12400.0], [796.0, 12030.0], [792.0, 12094.666666666666], [775.0, 12972.0], [774.0, 12777.0], [773.0, 12790.5], [771.0, 12902.5], [769.0, 12830.0], [768.0, 12999.0], [789.0, 12430.5], [785.0, 12376.2], [779.0, 12502.0], [778.0, 12463.0], [777.0, 12872.0], [776.0, 12725.0], [827.0, 11729.5], [831.0, 11510.75], [825.0, 12132.0], [824.0, 12233.0], [823.0, 12019.75], [821.0, 11943.0], [818.0, 11982.714285714284], [817.0, 11907.0], [815.0, 12047.5], [806.0, 12012.0], [804.0, 12169.727272727272], [808.0, 12145.0], [862.0, 9419.0], [863.0, 7990.0], [848.0, 11207.0], [861.0, 10186.0], [860.0, 10164.0], [858.0, 10543.0], [857.0, 10689.0], [856.0, 10923.666666666666], [841.0, 11384.0], [853.0, 11174.0], [852.0, 11353.800000000001], [892.0, 1996.5], [884.0, 1889.0], [893.0, 1857.0], [881.0, 2052.0], [880.0, 2646.0], [883.0, 2205.0], [882.0, 2126.0], [890.0, 1834.0], [889.0, 2402.0], [888.0, 2185.0], [871.0, 2826.0], [870.0, 2901.0], [869.0, 2521.0], [868.0, 7216.0], [867.0, 7588.5], [865.0, 7325.0], [864.0, 7830.0], [879.0, 2139.5], [878.0, 2085.0], [876.0, 2517.0], [875.0, 2512.5], [873.0, 2088.0], [872.0, 2784.0], [887.0, 2126.0], [886.0, 1934.0], [885.0, 1957.0], [921.0, 2041.0], [926.0, 1942.0], [927.0, 1566.0], [915.0, 1728.0], [914.0, 1867.0], [917.0, 1750.0], [916.0, 1766.0], [925.0, 1911.0], [924.0, 2116.0], [923.0, 1648.5], [920.0, 1878.0], [902.0, 2197.0], [901.0, 2176.0], [900.0, 1872.6666666666667], [897.0, 1916.0], [896.0, 1911.3333333333333], [911.0, 1755.0], [910.0, 1713.0], [909.0, 1946.5], [907.0, 2197.0], [905.0, 1775.0], [904.0, 2040.5], [919.0, 2033.0], [918.0, 2203.0], [953.0, 1442.0], [957.0, 1696.0], [958.0, 1405.0], [945.0, 1761.0], [944.0, 1449.0], [949.0, 1587.0], [946.0, 1664.0], [956.0, 1812.0], [955.0, 1401.0], [954.0, 1724.0], [952.0, 1433.0], [935.0, 1590.0], [934.0, 1591.0], [933.0, 1532.0], [932.0, 1603.0], [931.0, 1887.0], [930.0, 1629.0], [929.0, 1964.0], [928.0, 1922.0], [942.0, 1482.0], [941.0, 1456.0], [940.0, 1511.0], [939.0, 1796.0], [938.0, 1845.0], [937.0, 1566.0], [936.0, 1962.0], [951.0, 1482.0], [950.0, 1916.0], [987.0, 1362.0], [979.0, 1234.0], [990.0, 1340.6666666666667], [976.0, 1339.0], [986.0, 1377.0], [985.0, 1070.0], [984.0, 1072.0], [967.0, 1308.0], [966.0, 1305.0], [965.0, 1289.0], [964.0, 1289.0], [963.0, 1290.0], [962.0, 1847.0], [961.0, 1874.0], [960.0, 1688.0], [974.0, 1586.0], [973.0, 1259.0], [972.0, 1626.0], [971.0, 1671.0], [970.0, 1298.0], [969.0, 1249.0], [968.0, 1289.0], [983.0, 1104.0], [982.0, 1384.0], [981.0, 1131.0], [978.0, 1387.0], [977.0, 1254.0], [1000.0, 1131.25], [996.0, 1304.0], [995.0, 1370.0], [994.0, 1291.0], [993.0, 997.0], [992.0, 1331.5], [1.0, 22087.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[501.15999999999997, 15004.559000000005]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11465.416666666666, "minX": 1.75791834E12, "maxY": 7182426.783333333, "series": [{"data": [[1.75791834E12, 11465.416666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75791834E12, 7182426.783333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791834E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 15004.559000000005, "minX": 1.75791834E12, "maxY": 15004.559000000005, "series": [{"data": [[1.75791834E12, 15004.559000000005]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791834E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 15004.505000000003, "minX": 1.75791834E12, "maxY": 15004.505000000003, "series": [{"data": [[1.75791834E12, 15004.505000000003]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791834E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 3066.796000000001, "minX": 1.75791834E12, "maxY": 3066.796000000001, "series": [{"data": [[1.75791834E12, 3066.796000000001]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791834E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 886.0, "minX": 1.75791834E12, "maxY": 22323.0, "series": [{"data": [[1.75791834E12, 22323.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75791834E12, 19312.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75791834E12, 19776.28]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75791834E12, 19521.399999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75791834E12, 886.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75791834E12, 18088.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791834E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1319.0, "minX": 1.0, "maxY": 22205.0, "series": [{"data": [[8.0, 10616.0], [2.0, 22205.0], [146.0, 18185.5], [40.0, 16619.5], [48.0, 12855.0], [14.0, 2517.0], [15.0, 1319.0], [61.0, 11929.0], [63.0, 15977.0], [1.0, 9419.0], [4.0, 14431.5], [75.0, 13508.0], [6.0, 7588.5], [388.0, 18979.5], [103.0, 1728.0], [26.0, 19578.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[14.0, 2146.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 388.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1319.0, "minX": 1.0, "maxY": 22205.0, "series": [{"data": [[8.0, 10616.0], [2.0, 22205.0], [146.0, 18185.5], [40.0, 16619.5], [48.0, 12855.0], [14.0, 2517.0], [15.0, 1319.0], [61.0, 11929.0], [63.0, 15977.0], [1.0, 9419.0], [4.0, 14431.5], [75.0, 13508.0], [6.0, 7588.5], [388.0, 18979.5], [103.0, 1728.0], [26.0, 19578.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[14.0, 2146.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 388.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791834E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791834E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791834E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.75791834E12, "maxY": 16.583333333333332, "series": [{"data": [[1.75791834E12, 16.583333333333332]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.75791834E12, 0.08333333333333333]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791834E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.75791834E12, "maxY": 16.583333333333332, "series": [{"data": [[1.75791834E12, 16.583333333333332]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}, {"data": [[1.75791834E12, 0.08333333333333333]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791834E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.75791834E12, "maxY": 16.583333333333332, "series": [{"data": [[1.75791834E12, 16.583333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.75791834E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791834E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

