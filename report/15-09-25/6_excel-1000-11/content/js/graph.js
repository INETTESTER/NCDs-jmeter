/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 122.0, "minX": 0.0, "maxY": 14926.0, "series": [{"data": [[0.0, 122.0], [0.1, 128.0], [0.2, 133.0], [0.3, 133.0], [0.4, 140.0], [0.5, 148.0], [0.6, 153.0], [0.7, 155.0], [0.8, 156.0], [0.9, 156.0], [1.0, 159.0], [1.1, 166.0], [1.2, 166.0], [1.3, 177.0], [1.4, 178.0], [1.5, 189.0], [1.6, 211.0], [1.7, 217.0], [1.8, 221.0], [1.9, 223.0], [2.0, 227.0], [2.1, 229.0], [2.2, 238.0], [2.3, 245.0], [2.4, 250.0], [2.5, 253.0], [2.6, 256.0], [2.7, 267.0], [2.8, 279.0], [2.9, 281.0], [3.0, 290.0], [3.1, 295.0], [3.2, 297.0], [3.3, 317.0], [3.4, 333.0], [3.5, 335.0], [3.6, 350.0], [3.7, 362.0], [3.8, 372.0], [3.9, 376.0], [4.0, 387.0], [4.1, 390.0], [4.2, 391.0], [4.3, 396.0], [4.4, 397.0], [4.5, 399.0], [4.6, 433.0], [4.7, 459.0], [4.8, 486.0], [4.9, 523.0], [5.0, 582.0], [5.1, 631.0], [5.2, 639.0], [5.3, 643.0], [5.4, 665.0], [5.5, 669.0], [5.6, 697.0], [5.7, 719.0], [5.8, 790.0], [5.9, 812.0], [6.0, 887.0], [6.1, 887.0], [6.2, 978.0], [6.3, 1002.0], [6.4, 1023.0], [6.5, 1043.0], [6.6, 1077.0], [6.7, 1151.0], [6.8, 1160.0], [6.9, 1200.0], [7.0, 1202.0], [7.1, 1207.0], [7.2, 1209.0], [7.3, 1215.0], [7.4, 1217.0], [7.5, 1221.0], [7.6, 1224.0], [7.7, 1229.0], [7.8, 1231.0], [7.9, 1232.0], [8.0, 1238.0], [8.1, 1262.0], [8.2, 1272.0], [8.3, 1284.0], [8.4, 1312.0], [8.5, 1313.0], [8.6, 1322.0], [8.7, 1334.0], [8.8, 1334.0], [8.9, 1341.0], [9.0, 1343.0], [9.1, 1345.0], [9.2, 1373.0], [9.3, 1387.0], [9.4, 1392.0], [9.5, 1408.0], [9.6, 1412.0], [9.7, 1419.0], [9.8, 1448.0], [9.9, 1450.0], [10.0, 1471.0], [10.1, 1496.0], [10.2, 1500.0], [10.3, 1520.0], [10.4, 1521.0], [10.5, 1525.0], [10.6, 1538.0], [10.7, 1563.0], [10.8, 1575.0], [10.9, 1577.0], [11.0, 1584.0], [11.1, 1601.0], [11.2, 1601.0], [11.3, 1607.0], [11.4, 1632.0], [11.5, 1637.0], [11.6, 1641.0], [11.7, 1641.0], [11.8, 1645.0], [11.9, 1657.0], [12.0, 1666.0], [12.1, 1678.0], [12.2, 1679.0], [12.3, 1698.0], [12.4, 1705.0], [12.5, 1722.0], [12.6, 1735.0], [12.7, 1785.0], [12.8, 1795.0], [12.9, 1805.0], [13.0, 1806.0], [13.1, 1822.0], [13.2, 1823.0], [13.3, 1824.0], [13.4, 1848.0], [13.5, 1873.0], [13.6, 1874.0], [13.7, 1874.0], [13.8, 1892.0], [13.9, 1893.0], [14.0, 1895.0], [14.1, 1901.0], [14.2, 1914.0], [14.3, 1940.0], [14.4, 1984.0], [14.5, 1996.0], [14.6, 1998.0], [14.7, 1999.0], [14.8, 2023.0], [14.9, 2031.0], [15.0, 2033.0], [15.1, 2034.0], [15.2, 2036.0], [15.3, 2045.0], [15.4, 2050.0], [15.5, 2050.0], [15.6, 2054.0], [15.7, 2073.0], [15.8, 2091.0], [15.9, 2099.0], [16.0, 2125.0], [16.1, 2179.0], [16.2, 2218.0], [16.3, 2230.0], [16.4, 2237.0], [16.5, 2288.0], [16.6, 2307.0], [16.7, 2377.0], [16.8, 2423.0], [16.9, 2425.0], [17.0, 2427.0], [17.1, 2495.0], [17.2, 2499.0], [17.3, 2500.0], [17.4, 2504.0], [17.5, 2508.0], [17.6, 2577.0], [17.7, 2580.0], [17.8, 2586.0], [17.9, 2587.0], [18.0, 2614.0], [18.1, 2626.0], [18.2, 2634.0], [18.3, 2638.0], [18.4, 2663.0], [18.5, 2677.0], [18.6, 2681.0], [18.7, 2685.0], [18.8, 2702.0], [18.9, 2702.0], [19.0, 2706.0], [19.1, 2707.0], [19.2, 2729.0], [19.3, 2736.0], [19.4, 2737.0], [19.5, 2755.0], [19.6, 2756.0], [19.7, 2757.0], [19.8, 2769.0], [19.9, 2777.0], [20.0, 2800.0], [20.1, 2822.0], [20.2, 2832.0], [20.3, 2833.0], [20.4, 2845.0], [20.5, 2882.0], [20.6, 2890.0], [20.7, 2894.0], [20.8, 2898.0], [20.9, 2899.0], [21.0, 2929.0], [21.1, 2942.0], [21.2, 2986.0], [21.3, 2988.0], [21.4, 2991.0], [21.5, 2991.0], [21.6, 2992.0], [21.7, 2994.0], [21.8, 3011.0], [21.9, 3016.0], [22.0, 3019.0], [22.1, 3027.0], [22.2, 3061.0], [22.3, 3081.0], [22.4, 3090.0], [22.5, 3115.0], [22.6, 3183.0], [22.7, 3191.0], [22.8, 3286.0], [22.9, 3353.0], [23.0, 3394.0], [23.1, 3395.0], [23.2, 3432.0], [23.3, 3452.0], [23.4, 3475.0], [23.5, 3488.0], [23.6, 3505.0], [23.7, 3520.0], [23.8, 3545.0], [23.9, 3556.0], [24.0, 3556.0], [24.1, 3562.0], [24.2, 3598.0], [24.3, 3601.0], [24.4, 3602.0], [24.5, 3639.0], [24.6, 3650.0], [24.7, 3689.0], [24.8, 3754.0], [24.9, 3756.0], [25.0, 3774.0], [25.1, 3899.0], [25.2, 3953.0], [25.3, 3970.0], [25.4, 4162.0], [25.5, 4167.0], [25.6, 4286.0], [25.7, 4434.0], [25.8, 4573.0], [25.9, 5414.0], [26.0, 5536.0], [26.1, 5890.0], [26.2, 5918.0], [26.3, 6031.0], [26.4, 6062.0], [26.5, 6278.0], [26.6, 6325.0], [26.7, 6395.0], [26.8, 6449.0], [26.9, 6467.0], [27.0, 6483.0], [27.1, 6524.0], [27.2, 6668.0], [27.3, 6707.0], [27.4, 6710.0], [27.5, 6811.0], [27.6, 6811.0], [27.7, 6827.0], [27.8, 6851.0], [27.9, 6853.0], [28.0, 6866.0], [28.1, 6886.0], [28.2, 6900.0], [28.3, 6908.0], [28.4, 6927.0], [28.5, 6941.0], [28.6, 6943.0], [28.7, 6947.0], [28.8, 6949.0], [28.9, 6952.0], [29.0, 7015.0], [29.1, 7016.0], [29.2, 7024.0], [29.3, 7027.0], [29.4, 7053.0], [29.5, 7057.0], [29.6, 7076.0], [29.7, 7085.0], [29.8, 7094.0], [29.9, 7095.0], [30.0, 7158.0], [30.1, 7164.0], [30.2, 7180.0], [30.3, 7186.0], [30.4, 7206.0], [30.5, 7237.0], [30.6, 7247.0], [30.7, 7251.0], [30.8, 7266.0], [30.9, 7352.0], [31.0, 7365.0], [31.1, 7380.0], [31.2, 7425.0], [31.3, 7488.0], [31.4, 7506.0], [31.5, 7542.0], [31.6, 7597.0], [31.7, 7677.0], [31.8, 7696.0], [31.9, 7696.0], [32.0, 7706.0], [32.1, 7774.0], [32.2, 7854.0], [32.3, 7917.0], [32.4, 7923.0], [32.5, 7962.0], [32.6, 7982.0], [32.7, 7983.0], [32.8, 8002.0], [32.9, 8029.0], [33.0, 8053.0], [33.1, 8065.0], [33.2, 8115.0], [33.3, 8145.0], [33.4, 8163.0], [33.5, 8178.0], [33.6, 8183.0], [33.7, 8189.0], [33.8, 8211.0], [33.9, 8282.0], [34.0, 8330.0], [34.1, 8330.0], [34.2, 8372.0], [34.3, 8396.0], [34.4, 8433.0], [34.5, 8446.0], [34.6, 8451.0], [34.7, 8453.0], [34.8, 8477.0], [34.9, 8492.0], [35.0, 8531.0], [35.1, 8557.0], [35.2, 8566.0], [35.3, 8589.0], [35.4, 8593.0], [35.5, 8602.0], [35.6, 8615.0], [35.7, 8620.0], [35.8, 8624.0], [35.9, 8636.0], [36.0, 8642.0], [36.1, 8685.0], [36.2, 8688.0], [36.3, 8699.0], [36.4, 8699.0], [36.5, 8737.0], [36.6, 8751.0], [36.7, 8751.0], [36.8, 8752.0], [36.9, 8778.0], [37.0, 8781.0], [37.1, 8781.0], [37.2, 8785.0], [37.3, 8796.0], [37.4, 8805.0], [37.5, 8812.0], [37.6, 8822.0], [37.7, 8843.0], [37.8, 8844.0], [37.9, 8858.0], [38.0, 8867.0], [38.1, 8878.0], [38.2, 8916.0], [38.3, 8926.0], [38.4, 8958.0], [38.5, 8968.0], [38.6, 8970.0], [38.7, 8973.0], [38.8, 8988.0], [38.9, 8996.0], [39.0, 8997.0], [39.1, 8998.0], [39.2, 9002.0], [39.3, 9008.0], [39.4, 9017.0], [39.5, 9019.0], [39.6, 9025.0], [39.7, 9028.0], [39.8, 9029.0], [39.9, 9034.0], [40.0, 9045.0], [40.1, 9053.0], [40.2, 9059.0], [40.3, 9064.0], [40.4, 9066.0], [40.5, 9067.0], [40.6, 9071.0], [40.7, 9077.0], [40.8, 9090.0], [40.9, 9095.0], [41.0, 9103.0], [41.1, 9109.0], [41.2, 9122.0], [41.3, 9131.0], [41.4, 9132.0], [41.5, 9136.0], [41.6, 9138.0], [41.7, 9150.0], [41.8, 9154.0], [41.9, 9154.0], [42.0, 9160.0], [42.1, 9173.0], [42.2, 9187.0], [42.3, 9202.0], [42.4, 9220.0], [42.5, 9221.0], [42.6, 9226.0], [42.7, 9230.0], [42.8, 9230.0], [42.9, 9240.0], [43.0, 9244.0], [43.1, 9251.0], [43.2, 9271.0], [43.3, 9291.0], [43.4, 9296.0], [43.5, 9312.0], [43.6, 9321.0], [43.7, 9346.0], [43.8, 9354.0], [43.9, 9354.0], [44.0, 9356.0], [44.1, 9356.0], [44.2, 9374.0], [44.3, 9378.0], [44.4, 9393.0], [44.5, 9394.0], [44.6, 9398.0], [44.7, 9406.0], [44.8, 9412.0], [44.9, 9412.0], [45.0, 9417.0], [45.1, 9419.0], [45.2, 9432.0], [45.3, 9437.0], [45.4, 9438.0], [45.5, 9442.0], [45.6, 9465.0], [45.7, 9482.0], [45.8, 9483.0], [45.9, 9484.0], [46.0, 9490.0], [46.1, 9504.0], [46.2, 9506.0], [46.3, 9511.0], [46.4, 9515.0], [46.5, 9517.0], [46.6, 9519.0], [46.7, 9522.0], [46.8, 9524.0], [46.9, 9524.0], [47.0, 9535.0], [47.1, 9545.0], [47.2, 9546.0], [47.3, 9547.0], [47.4, 9550.0], [47.5, 9561.0], [47.6, 9575.0], [47.7, 9585.0], [47.8, 9587.0], [47.9, 9598.0], [48.0, 9606.0], [48.1, 9608.0], [48.2, 9613.0], [48.3, 9619.0], [48.4, 9625.0], [48.5, 9629.0], [48.6, 9631.0], [48.7, 9633.0], [48.8, 9634.0], [48.9, 9634.0], [49.0, 9651.0], [49.1, 9652.0], [49.2, 9656.0], [49.3, 9658.0], [49.4, 9660.0], [49.5, 9664.0], [49.6, 9667.0], [49.7, 9668.0], [49.8, 9674.0], [49.9, 9683.0], [50.0, 9683.0], [50.1, 9683.0], [50.2, 9698.0], [50.3, 9702.0], [50.4, 9713.0], [50.5, 9721.0], [50.6, 9722.0], [50.7, 9723.0], [50.8, 9728.0], [50.9, 9729.0], [51.0, 9741.0], [51.1, 9744.0], [51.2, 9748.0], [51.3, 9764.0], [51.4, 9766.0], [51.5, 9774.0], [51.6, 9780.0], [51.7, 9789.0], [51.8, 9793.0], [51.9, 9795.0], [52.0, 9797.0], [52.1, 9801.0], [52.2, 9805.0], [52.3, 9806.0], [52.4, 9809.0], [52.5, 9810.0], [52.6, 9813.0], [52.7, 9820.0], [52.8, 9822.0], [52.9, 9823.0], [53.0, 9824.0], [53.1, 9825.0], [53.2, 9826.0], [53.3, 9836.0], [53.4, 9837.0], [53.5, 9838.0], [53.6, 9847.0], [53.7, 9850.0], [53.8, 9851.0], [53.9, 9851.0], [54.0, 9855.0], [54.1, 9855.0], [54.2, 9857.0], [54.3, 9858.0], [54.4, 9860.0], [54.5, 9863.0], [54.6, 9865.0], [54.7, 9866.0], [54.8, 9868.0], [54.9, 9871.0], [55.0, 9873.0], [55.1, 9876.0], [55.2, 9883.0], [55.3, 9891.0], [55.4, 9891.0], [55.5, 9894.0], [55.6, 9895.0], [55.7, 9896.0], [55.8, 9903.0], [55.9, 9909.0], [56.0, 9910.0], [56.1, 9910.0], [56.2, 9911.0], [56.3, 9912.0], [56.4, 9915.0], [56.5, 9916.0], [56.6, 9916.0], [56.7, 9923.0], [56.8, 9928.0], [56.9, 9931.0], [57.0, 9932.0], [57.1, 9939.0], [57.2, 9941.0], [57.3, 9941.0], [57.4, 9947.0], [57.5, 9948.0], [57.6, 9949.0], [57.7, 9952.0], [57.8, 9955.0], [57.9, 9960.0], [58.0, 9963.0], [58.1, 9963.0], [58.2, 9967.0], [58.3, 9967.0], [58.4, 9968.0], [58.5, 9969.0], [58.6, 9970.0], [58.7, 9979.0], [58.8, 9981.0], [58.9, 9981.0], [59.0, 9981.0], [59.1, 9982.0], [59.2, 9986.0], [59.3, 9987.0], [59.4, 9988.0], [59.5, 9989.0], [59.6, 9992.0], [59.7, 9993.0], [59.8, 9995.0], [59.9, 9995.0], [60.0, 9997.0], [60.1, 10000.0], [60.2, 10001.0], [60.3, 10003.0], [60.4, 10004.0], [60.5, 10007.0], [60.6, 10007.0], [60.7, 10007.0], [60.8, 10007.0], [60.9, 10008.0], [61.0, 10009.0], [61.1, 10019.0], [61.2, 10021.0], [61.3, 10022.0], [61.4, 10024.0], [61.5, 10034.0], [61.6, 10043.0], [61.7, 10045.0], [61.8, 10047.0], [61.9, 10048.0], [62.0, 10048.0], [62.1, 10049.0], [62.2, 10050.0], [62.3, 10051.0], [62.4, 10055.0], [62.5, 10055.0], [62.6, 10056.0], [62.7, 10056.0], [62.8, 10057.0], [62.9, 10058.0], [63.0, 10059.0], [63.1, 10059.0], [63.2, 10061.0], [63.3, 10062.0], [63.4, 10063.0], [63.5, 10064.0], [63.6, 10070.0], [63.7, 10071.0], [63.8, 10075.0], [63.9, 10076.0], [64.0, 10076.0], [64.1, 10079.0], [64.2, 10081.0], [64.3, 10081.0], [64.4, 10083.0], [64.5, 10084.0], [64.6, 10084.0], [64.7, 10084.0], [64.8, 10087.0], [64.9, 10090.0], [65.0, 10096.0], [65.1, 10100.0], [65.2, 10102.0], [65.3, 10103.0], [65.4, 10106.0], [65.5, 10107.0], [65.6, 10112.0], [65.7, 10112.0], [65.8, 10119.0], [65.9, 10119.0], [66.0, 10120.0], [66.1, 10123.0], [66.2, 10126.0], [66.3, 10126.0], [66.4, 10128.0], [66.5, 10129.0], [66.6, 10131.0], [66.7, 10132.0], [66.8, 10133.0], [66.9, 10133.0], [67.0, 10150.0], [67.1, 10150.0], [67.2, 10150.0], [67.3, 10151.0], [67.4, 10152.0], [67.5, 10168.0], [67.6, 10177.0], [67.7, 10177.0], [67.8, 10178.0], [67.9, 10179.0], [68.0, 10183.0], [68.1, 10185.0], [68.2, 10186.0], [68.3, 10199.0], [68.4, 10199.0], [68.5, 10199.0], [68.6, 10200.0], [68.7, 10201.0], [68.8, 10203.0], [68.9, 10205.0], [69.0, 10208.0], [69.1, 10209.0], [69.2, 10216.0], [69.3, 10216.0], [69.4, 10217.0], [69.5, 10221.0], [69.6, 10226.0], [69.7, 10230.0], [69.8, 10230.0], [69.9, 10240.0], [70.0, 10241.0], [70.1, 10241.0], [70.2, 10242.0], [70.3, 10243.0], [70.4, 10246.0], [70.5, 10246.0], [70.6, 10247.0], [70.7, 10248.0], [70.8, 10249.0], [70.9, 10253.0], [71.0, 10256.0], [71.1, 10258.0], [71.2, 10259.0], [71.3, 10259.0], [71.4, 10260.0], [71.5, 10260.0], [71.6, 10260.0], [71.7, 10266.0], [71.8, 10268.0], [71.9, 10268.0], [72.0, 10272.0], [72.1, 10273.0], [72.2, 10279.0], [72.3, 10280.0], [72.4, 10281.0], [72.5, 10288.0], [72.6, 10290.0], [72.7, 10292.0], [72.8, 10297.0], [72.9, 10301.0], [73.0, 10301.0], [73.1, 10316.0], [73.2, 10320.0], [73.3, 10320.0], [73.4, 10320.0], [73.5, 10327.0], [73.6, 10328.0], [73.7, 10329.0], [73.8, 10332.0], [73.9, 10334.0], [74.0, 10341.0], [74.1, 10342.0], [74.2, 10343.0], [74.3, 10350.0], [74.4, 10357.0], [74.5, 10360.0], [74.6, 10360.0], [74.7, 10361.0], [74.8, 10362.0], [74.9, 10364.0], [75.0, 10368.0], [75.1, 10370.0], [75.2, 10370.0], [75.3, 10373.0], [75.4, 10376.0], [75.5, 10376.0], [75.6, 10379.0], [75.7, 10381.0], [75.8, 10381.0], [75.9, 10383.0], [76.0, 10386.0], [76.1, 10387.0], [76.2, 10387.0], [76.3, 10389.0], [76.4, 10398.0], [76.5, 10403.0], [76.6, 10404.0], [76.7, 10408.0], [76.8, 10420.0], [76.9, 10423.0], [77.0, 10423.0], [77.1, 10428.0], [77.2, 10434.0], [77.3, 10434.0], [77.4, 10438.0], [77.5, 10441.0], [77.6, 10448.0], [77.7, 10450.0], [77.8, 10451.0], [77.9, 10452.0], [78.0, 10452.0], [78.1, 10465.0], [78.2, 10468.0], [78.3, 10469.0], [78.4, 10469.0], [78.5, 10479.0], [78.6, 10482.0], [78.7, 10484.0], [78.8, 10487.0], [78.9, 10497.0], [79.0, 10500.0], [79.1, 10503.0], [79.2, 10506.0], [79.3, 10507.0], [79.4, 10507.0], [79.5, 10510.0], [79.6, 10513.0], [79.7, 10513.0], [79.8, 10518.0], [79.9, 10519.0], [80.0, 10522.0], [80.1, 10522.0], [80.2, 10527.0], [80.3, 10529.0], [80.4, 10534.0], [80.5, 10537.0], [80.6, 10545.0], [80.7, 10545.0], [80.8, 10551.0], [80.9, 10554.0], [81.0, 10555.0], [81.1, 10558.0], [81.2, 10562.0], [81.3, 10563.0], [81.4, 10563.0], [81.5, 10565.0], [81.6, 10565.0], [81.7, 10571.0], [81.8, 10571.0], [81.9, 10574.0], [82.0, 10580.0], [82.1, 10597.0], [82.2, 10611.0], [82.3, 10615.0], [82.4, 10624.0], [82.5, 10625.0], [82.6, 10626.0], [82.7, 10649.0], [82.8, 10649.0], [82.9, 10662.0], [83.0, 10669.0], [83.1, 10673.0], [83.2, 10686.0], [83.3, 10692.0], [83.4, 10693.0], [83.5, 10698.0], [83.6, 10698.0], [83.7, 10706.0], [83.8, 10708.0], [83.9, 10729.0], [84.0, 10735.0], [84.1, 10738.0], [84.2, 10742.0], [84.3, 10749.0], [84.4, 10762.0], [84.5, 10762.0], [84.6, 10763.0], [84.7, 10775.0], [84.8, 10779.0], [84.9, 10780.0], [85.0, 10785.0], [85.1, 10787.0], [85.2, 10812.0], [85.3, 10818.0], [85.4, 10819.0], [85.5, 10822.0], [85.6, 10827.0], [85.7, 10829.0], [85.8, 10840.0], [85.9, 10848.0], [86.0, 10850.0], [86.1, 10851.0], [86.2, 10852.0], [86.3, 10854.0], [86.4, 10860.0], [86.5, 10860.0], [86.6, 10863.0], [86.7, 10873.0], [86.8, 10874.0], [86.9, 10890.0], [87.0, 10895.0], [87.1, 10898.0], [87.2, 10899.0], [87.3, 10904.0], [87.4, 10905.0], [87.5, 10911.0], [87.6, 10912.0], [87.7, 10919.0], [87.8, 10920.0], [87.9, 10925.0], [88.0, 10926.0], [88.1, 10954.0], [88.2, 10969.0], [88.3, 10969.0], [88.4, 10970.0], [88.5, 10982.0], [88.6, 10985.0], [88.7, 10986.0], [88.8, 10990.0], [88.9, 10996.0], [89.0, 10996.0], [89.1, 10998.0], [89.2, 10999.0], [89.3, 10999.0], [89.4, 11015.0], [89.5, 11021.0], [89.6, 11022.0], [89.7, 11025.0], [89.8, 11027.0], [89.9, 11027.0], [90.0, 11033.0], [90.1, 11044.0], [90.2, 11047.0], [90.3, 11051.0], [90.4, 11052.0], [90.5, 11058.0], [90.6, 11058.0], [90.7, 11059.0], [90.8, 11066.0], [90.9, 11069.0], [91.0, 11084.0], [91.1, 11128.0], [91.2, 11130.0], [91.3, 11134.0], [91.4, 11136.0], [91.5, 11139.0], [91.6, 11159.0], [91.7, 11165.0], [91.8, 11176.0], [91.9, 11185.0], [92.0, 11196.0], [92.1, 11197.0], [92.2, 11198.0], [92.3, 11199.0], [92.4, 11210.0], [92.5, 11213.0], [92.6, 11213.0], [92.7, 11222.0], [92.8, 11226.0], [92.9, 11232.0], [93.0, 11252.0], [93.1, 11253.0], [93.2, 11256.0], [93.3, 11268.0], [93.4, 11269.0], [93.5, 11284.0], [93.6, 11284.0], [93.7, 11292.0], [93.8, 11293.0], [93.9, 11295.0], [94.0, 11295.0], [94.1, 11300.0], [94.2, 11336.0], [94.3, 11353.0], [94.4, 11365.0], [94.5, 11390.0], [94.6, 11409.0], [94.7, 11413.0], [94.8, 11413.0], [94.9, 11414.0], [95.0, 11440.0], [95.1, 11476.0], [95.2, 11494.0], [95.3, 11499.0], [95.4, 11501.0], [95.5, 11502.0], [95.6, 11510.0], [95.7, 11517.0], [95.8, 11518.0], [95.9, 11528.0], [96.0, 11529.0], [96.1, 11543.0], [96.2, 11547.0], [96.3, 12574.0], [96.4, 13573.0], [96.5, 13576.0], [96.6, 13642.0], [96.7, 13842.0], [96.8, 13894.0], [96.9, 13910.0], [97.0, 13912.0], [97.1, 13929.0], [97.2, 13935.0], [97.3, 13940.0], [97.4, 13949.0], [97.5, 13957.0], [97.6, 13984.0], [97.7, 14065.0], [97.8, 14084.0], [97.9, 14091.0], [98.0, 14175.0], [98.1, 14251.0], [98.2, 14307.0], [98.3, 14379.0], [98.4, 14442.0], [98.5, 14453.0], [98.6, 14540.0], [98.7, 14582.0], [98.8, 14582.0], [98.9, 14596.0], [99.0, 14607.0], [99.1, 14642.0], [99.2, 14649.0], [99.3, 14651.0], [99.4, 14659.0], [99.5, 14799.0], [99.6, 14823.0], [99.7, 14900.0], [99.8, 14911.0], [99.9, 14926.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 50.0, "series": [{"data": [[100.0, 15.0], [200.0, 17.0], [300.0, 13.0], [400.0, 4.0], [500.0, 2.0], [600.0, 6.0], [700.0, 2.0], [800.0, 3.0], [900.0, 1.0], [1000.0, 4.0], [1100.0, 2.0], [1200.0, 15.0], [1300.0, 11.0], [1400.0, 7.0], [1500.0, 9.0], [1600.0, 13.0], [1700.0, 5.0], [1800.0, 12.0], [1900.0, 7.0], [2000.0, 12.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 2.0], [2400.0, 5.0], [2500.0, 7.0], [2600.0, 8.0], [2700.0, 11.0], [2800.0, 10.0], [2900.0, 8.0], [3000.0, 7.0], [3100.0, 3.0], [3200.0, 1.0], [3300.0, 3.0], [3400.0, 4.0], [3500.0, 7.0], [3600.0, 5.0], [3700.0, 3.0], [3800.0, 1.0], [3900.0, 2.0], [4200.0, 1.0], [4100.0, 2.0], [4500.0, 1.0], [4400.0, 1.0], [5500.0, 1.0], [5400.0, 1.0], [5800.0, 1.0], [6000.0, 2.0], [5900.0, 1.0], [6300.0, 2.0], [6200.0, 1.0], [6500.0, 1.0], [6400.0, 3.0], [6600.0, 1.0], [6700.0, 2.0], [6900.0, 8.0], [6800.0, 7.0], [7000.0, 10.0], [7100.0, 4.0], [7200.0, 5.0], [7400.0, 2.0], [7300.0, 3.0], [7500.0, 3.0], [7600.0, 3.0], [7900.0, 5.0], [7800.0, 1.0], [7700.0, 2.0], [8100.0, 6.0], [8000.0, 4.0], [8300.0, 4.0], [8400.0, 6.0], [8500.0, 5.0], [8600.0, 10.0], [8700.0, 9.0], [8200.0, 2.0], [8900.0, 10.0], [9000.0, 18.0], [8800.0, 8.0], [9100.0, 13.0], [9200.0, 12.0], [9300.0, 12.0], [9400.0, 14.0], [9500.0, 19.0], [9600.0, 23.0], [9700.0, 18.0], [9800.0, 37.0], [10000.0, 50.0], [9900.0, 43.0], [10100.0, 35.0], [10200.0, 43.0], [10300.0, 36.0], [10400.0, 25.0], [10500.0, 32.0], [10600.0, 16.0], [10700.0, 15.0], [10800.0, 21.0], [10900.0, 21.0], [11000.0, 17.0], [11200.0, 17.0], [11100.0, 13.0], [11300.0, 5.0], [11500.0, 9.0], [11400.0, 8.0], [12500.0, 1.0], [13800.0, 2.0], [13500.0, 2.0], [13600.0, 1.0], [13900.0, 8.0], [14100.0, 1.0], [14000.0, 3.0], [14300.0, 2.0], [14200.0, 1.0], [14600.0, 5.0], [14500.0, 4.0], [14400.0, 2.0], [14700.0, 1.0], [14800.0, 1.0], [14900.0, 3.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 49.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 897.0, "series": [{"data": [[0.0, 49.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 54.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 897.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 501.142, "minX": 1.75791144E12, "maxY": 501.142, "series": [{"data": [[1.75791144E12, 501.142]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791144E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 122.0, "minX": 1.0, "maxY": 14926.0, "series": [{"data": [[2.0, 14540.0], [4.0, 14725.0], [5.0, 14307.0], [9.0, 14271.25], [10.0, 14582.0], [11.0, 14926.0], [12.0, 14582.0], [14.0, 14510.5], [16.0, 14682.0], [17.0, 14607.0], [18.0, 14442.0], [20.0, 14748.0], [21.0, 14649.0], [22.0, 12574.0], [23.0, 14065.0], [25.0, 13953.0], [26.0, 13576.0], [27.0, 13940.0], [28.0, 13842.0], [29.0, 13935.0], [30.0, 13642.0], [31.0, 13929.0], [33.0, 13912.0], [32.0, 14175.0], [35.0, 13573.0], [34.0, 13910.0], [37.0, 13984.0], [36.0, 13894.0], [39.0, 11027.0], [38.0, 11033.0], [41.0, 11136.0], [40.0, 11547.0], [45.0, 11419.0], [44.0, 10698.0], [48.0, 11352.5], [51.0, 10698.0], [50.0, 11256.0], [53.0, 11068.6], [54.0, 10911.0], [57.0, 11529.0], [56.0, 11357.0], [59.0, 11021.0], [58.0, 11517.0], [60.0, 11284.0], [62.0, 11219.5], [67.0, 11058.0], [66.0, 11518.0], [65.0, 11315.0], [71.0, 11304.0], [69.0, 10545.0], [68.0, 11059.0], [75.0, 10899.0], [74.0, 11052.0], [73.0, 11176.0], [72.0, 11253.0], [79.0, 11385.0], [77.0, 11252.0], [83.0, 11499.0], [82.0, 11130.333333333334], [80.0, 11293.0], [87.0, 11375.0], [86.0, 11365.0], [91.0, 11188.0], [89.0, 10670.5], [94.0, 11217.5], [92.0, 11232.0], [99.0, 10982.0], [98.0, 10978.0], [96.0, 10866.0], [103.0, 10873.0], [102.0, 11093.0], [100.0, 11198.0], [107.0, 11128.0], [106.0, 10851.0], [105.0, 10538.5], [111.0, 11284.0], [110.0, 10762.0], [109.0, 10763.0], [108.0, 11130.0], [114.0, 10819.0], [113.0, 10850.0], [112.0, 10904.0], [119.0, 11210.0], [118.0, 11022.0], [117.0, 11353.0], [116.0, 11131.5], [122.0, 11047.0], [121.0, 10818.0], [120.0, 11185.0], [127.0, 11165.0], [126.0, 10827.0], [125.0, 10848.0], [124.0, 11130.5], [135.0, 10649.0], [134.0, 10855.333333333334], [131.0, 11074.5], [129.0, 10969.0], [128.0, 11058.0], [143.0, 10749.0], [142.0, 10794.0], [140.0, 10890.0], [139.0, 11213.0], [138.0, 10615.0], [137.0, 10562.0], [136.0, 11226.0], [151.0, 10260.0], [150.0, 10969.0], [149.0, 10996.0], [148.0, 10896.5], [146.0, 10624.0], [145.0, 10558.0], [159.0, 10742.0], [158.0, 11051.0], [156.0, 10574.0], [155.0, 10558.0], [154.0, 11069.0], [153.0, 10611.0], [152.0, 10497.0], [165.0, 10859.0], [163.0, 10513.0], [162.0, 10905.0], [161.0, 10565.0], [160.0, 10831.0], [175.0, 10822.0], [174.0, 10985.0], [173.0, 10292.0], [172.0, 10840.0], [171.0, 10775.0], [170.0, 10984.0], [168.0, 10861.0], [182.0, 10469.0], [181.0, 10465.0], [180.0, 10706.0], [179.0, 10538.5], [177.0, 10829.0], [176.0, 10673.0], [191.0, 10303.5], [189.0, 10860.0], [188.0, 10361.0], [187.0, 10343.0], [186.0, 10625.0], [185.0, 10492.0], [199.0, 10389.0], [198.0, 10860.0], [197.0, 10854.0], [196.0, 10863.0], [195.0, 10357.0], [194.0, 10350.0], [193.0, 10729.0], [192.0, 10364.0], [207.0, 10096.5], [205.0, 10406.0], [203.0, 10580.0], [202.0, 10368.0], [201.0, 10332.0], [200.0, 10253.0], [215.0, 10177.0], [214.0, 10731.5], [213.0, 10424.5], [210.0, 10779.0], [209.0, 10762.0], [208.0, 10534.0], [222.0, 10335.0], [220.0, 10133.0], [219.0, 10686.0], [218.0, 10203.0], [216.0, 10554.0], [231.0, 10420.0], [230.0, 10045.0], [229.0, 10563.0], [228.0, 9722.0], [225.0, 10597.0], [224.0, 10150.0], [239.0, 10280.0], [238.0, 9598.0], [237.0, 10288.0], [236.0, 9728.0], [235.0, 10555.0], [234.0, 10061.0], [233.0, 10563.0], [232.0, 10571.0], [247.0, 10386.0], [246.0, 9945.5], [244.0, 10058.0], [243.0, 10070.0], [242.0, 10064.0], [241.0, 10129.0], [240.0, 10150.0], [255.0, 10519.0], [254.0, 10522.0], [253.0, 10286.5], [252.0, 9995.0], [248.0, 10527.0], [259.0, 10452.0], [270.0, 10315.0], [271.0, 10043.0], [268.0, 10266.0], [267.0, 9979.0], [266.0, 10032.666666666666], [263.0, 10381.0], [262.0, 10020.5], [261.0, 10537.0], [258.0, 10360.0], [257.0, 10518.0], [256.0, 10199.0], [286.0, 10234.5], [284.0, 10315.0], [282.0, 9723.0], [281.0, 9952.0], [280.0, 10484.0], [279.0, 10181.0], [277.0, 9976.0], [275.0, 10147.333333333334], [272.0, 9995.0], [296.0, 10072.5], [303.0, 10120.333333333334], [299.0, 10426.0], [298.0, 10107.0], [297.0, 10200.0], [293.0, 10383.0], [292.0, 10276.333333333334], [289.0, 10112.0], [288.0, 10309.5], [319.0, 10248.0], [318.0, 9889.25], [314.0, 9810.0], [313.0, 10500.0], [312.0, 10439.5], [311.0, 10403.0], [309.0, 10258.0], [308.0, 10278.5], [305.0, 10221.0], [304.0, 9955.0], [333.0, 10328.0], [334.0, 10216.0], [332.0, 10179.0], [323.0, 10482.0], [322.0, 10479.0], [321.0, 9931.0], [320.0, 9683.0], [331.0, 10219.0], [329.0, 9748.0], [328.0, 10226.0], [327.0, 10106.5], [325.0, 10076.0], [324.0, 10076.0], [350.0, 10221.5], [348.0, 10423.0], [347.0, 9490.0], [346.0, 10208.0], [345.0, 10219.5], [343.0, 10025.0], [342.0, 10151.0], [340.0, 10077.25], [336.0, 10342.0], [367.0, 10404.0], [363.0, 9940.5], [361.0, 10028.0], [359.0, 9891.0], [358.0, 10102.0], [357.0, 10236.0], [355.0, 10081.25], [352.0, 9981.0], [382.0, 9896.0], [383.0, 10423.0], [381.0, 9926.0], [379.0, 10197.5], [377.0, 10360.0], [376.0, 9893.0], [374.0, 10221.5], [372.0, 9882.0], [370.0, 10185.0], [369.0, 9909.0], [368.0, 10403.5], [387.0, 10090.0], [398.0, 9838.0], [399.0, 10084.0], [396.0, 10045.5], [394.0, 10048.0], [393.0, 10186.0], [391.0, 10057.5], [389.0, 10152.0], [388.0, 10260.0], [386.0, 10398.0], [385.0, 10132.0], [384.0, 9863.0], [403.0, 9826.0], [414.0, 10311.0], [412.0, 10171.5], [410.0, 10049.0], [409.0, 10241.0], [408.0, 10131.0], [406.0, 10050.0], [405.0, 10256.0], [404.0, 9789.0], [402.0, 10084.0], [401.0, 9912.0], [400.0, 9546.0], [419.0, 9948.5], [429.0, 10230.0], [430.0, 10022.0], [428.0, 9784.5], [426.0, 10193.0], [424.0, 9519.0], [423.0, 10123.0], [422.0, 10126.0], [421.0, 9877.0], [417.0, 10145.0], [416.0, 10112.0], [435.0, 9744.0], [446.0, 9936.0], [444.0, 10020.5], [442.0, 10205.0], [441.0, 10329.0], [440.0, 9924.0], [438.0, 9850.0], [437.0, 10062.0], [434.0, 9667.0], [433.0, 9656.0], [432.0, 10083.0], [462.0, 9822.0], [463.0, 10059.0], [461.0, 9837.5], [451.0, 9916.0], [450.0, 10062.0], [449.0, 9847.0], [448.0, 10241.5], [459.0, 10055.0], [458.0, 10301.0], [457.0, 9949.0], [456.0, 10057.0], [455.0, 9876.0], [452.0, 9915.0], [478.0, 9633.0], [479.0, 10007.0], [477.0, 10119.0], [476.0, 9795.0], [475.0, 9939.0], [474.0, 10273.0], [473.0, 10106.0], [472.0, 10008.0], [471.0, 9966.5], [467.0, 10069.0], [465.0, 9801.0], [469.0, 9851.0], [468.0, 9780.0], [494.0, 9923.0], [495.0, 9702.0], [493.0, 10075.0], [492.0, 9844.5], [490.0, 9992.0], [489.0, 9910.0], [488.0, 10240.0], [487.0, 10243.0], [481.0, 10252.5], [483.0, 9660.0], [482.0, 10003.0], [486.0, 9825.0], [485.0, 9398.0], [484.0, 10242.0], [509.0, 9824.0], [511.0, 9999.5], [508.0, 9296.0], [499.0, 9894.0], [498.0, 9801.0], [497.0, 9614.5], [507.0, 10000.0], [506.0, 9561.0], [505.0, 9994.0], [503.0, 9621.0], [502.0, 10201.0], [500.0, 9860.0], [537.0, 9722.0], [531.0, 9297.5], [539.0, 9713.0], [543.0, 9415.0], [529.0, 9240.0], [528.0, 9658.0], [538.0, 9132.0], [536.0, 8796.0], [519.0, 9354.0], [518.0, 9774.0], [517.0, 9826.5], [515.0, 9625.0], [514.0, 9438.0], [513.0, 9796.0], [527.0, 9664.0], [526.0, 9694.0], [524.0, 9857.0], [523.0, 9230.0], [522.0, 9729.0], [521.0, 10081.0], [520.0, 9858.0], [535.0, 9187.5], [533.0, 9587.0], [532.0, 9173.0], [570.0, 8002.0], [574.0, 9484.0], [575.0, 9465.0], [561.0, 9077.0], [560.0, 9394.0], [564.0, 9574.0], [562.0, 9017.0], [573.0, 9393.0], [572.0, 9090.0], [571.0, 9482.0], [569.0, 9522.666666666666], [551.0, 9419.0], [550.0, 8843.0], [549.0, 8492.0], [548.0, 9067.0], [547.0, 8932.5], [546.0, 9064.0], [545.0, 9547.0], [559.0, 9106.5], [558.0, 9045.0], [556.0, 9522.0], [555.0, 9154.0], [554.0, 9668.0], [553.0, 9034.0], [552.0, 9683.0], [566.0, 9619.0], [565.0, 9634.0], [601.0, 9158.5], [606.0, 9393.0], [607.0, 9029.0], [594.0, 9025.0], [593.0, 9044.0], [604.0, 8997.0], [603.0, 9515.0], [602.0, 9291.0], [591.0, 9221.0], [577.0, 9150.0], [576.0, 8642.0], [579.0, 8878.0], [578.0, 8988.0], [583.0, 9031.0], [581.0, 9379.0], [590.0, 8751.0], [589.0, 9095.0], [588.0, 9244.0], [587.0, 9028.0], [586.0, 9483.0], [585.0, 9504.0], [584.0, 9374.0], [599.0, 9103.0], [598.0, 8901.0], [596.0, 9131.0], [595.0, 9545.0], [633.0, 8752.0], [637.0, 8446.0], [638.0, 8699.0], [627.0, 8896.5], [625.0, 8989.0], [629.0, 8624.0], [628.0, 8916.0], [636.0, 8688.0], [635.0, 8996.0], [634.0, 9346.0], [632.0, 9356.0], [615.0, 9187.0], [614.0, 9312.0], [613.0, 9220.0], [612.0, 8636.0], [611.0, 8822.0], [610.0, 9138.0], [609.0, 8740.5], [623.0, 9160.0], [622.0, 9271.0], [621.0, 9193.5], [619.0, 8973.0], [618.0, 8812.0], [617.0, 9053.0], [616.0, 9202.0], [631.0, 9136.0], [630.0, 9226.0], [647.0, 8029.0], [669.0, 8115.0], [671.0, 7982.5], [668.0, 7482.666666666667], [665.0, 8699.0], [664.0, 8464.0], [646.0, 8163.0], [645.0, 8396.0], [644.0, 8968.0], [643.0, 7506.0], [642.0, 9002.0], [641.0, 8615.0], [640.0, 8791.5], [661.0, 8366.0], [658.0, 8669.0], [656.0, 8211.0], [655.0, 8078.5], [653.0, 7962.0], [652.0, 8183.0], [651.0, 8593.0], [650.0, 8926.0], [649.0, 8781.0], [648.0, 8685.0], [690.0, 7923.0], [703.0, 7165.5], [700.0, 7306.0], [698.0, 7331.25], [678.0, 8178.0], [677.0, 7983.2], [672.0, 8531.0], [687.0, 6908.0], [686.0, 7677.0], [685.0, 6941.0], [684.0, 7696.0], [683.0, 8330.0], [682.0, 6866.0], [681.0, 8477.0], [680.0, 7015.5], [694.0, 8330.0], [693.0, 6851.0], [692.0, 7698.0], [689.0, 7774.0], [688.0, 8453.0], [733.0, 6711.571428571428], [732.0, 7024.0], [709.0, 6943.0], [708.0, 7057.0], [707.0, 7425.0], [706.0, 7537.5], [704.0, 7474.5], [725.0, 6325.0], [724.0, 6927.0], [723.0, 6947.0], [722.0, 7020.0], [719.0, 6817.5], [717.0, 6739.5], [715.0, 6592.333333333333], [712.0, 7142.333333333333], [753.0, 3756.0], [765.0, 3452.0], [762.0, 2023.0], [761.0, 3335.5], [742.0, 5536.0], [741.0, 5414.0], [740.0, 5890.0], [739.0, 6615.5], [737.0, 6227.75], [759.0, 3724.3333333333335], [757.0, 3614.5], [754.0, 3953.0], [752.0, 3899.0], [751.0, 2425.0], [750.0, 3488.0], [749.0, 3556.0], [748.0, 3545.0], [747.0, 4286.0], [746.0, 4573.0], [745.0, 4434.0], [744.0, 4164.5], [793.0, 2677.0], [797.0, 3011.0], [798.0, 2050.0], [784.0, 3090.0], [786.0, 1412.0], [785.0, 2218.0], [796.0, 3019.0], [795.0, 2230.0], [794.0, 3016.0], [792.0, 2632.0], [775.0, 3395.0], [774.0, 3353.0], [773.0, 3372.5], [771.0, 3598.0], [770.0, 3627.6], [768.0, 3535.5], [783.0, 3081.0], [782.0, 2307.0], [781.0, 3191.0], [780.0, 2882.0], [779.0, 2504.0], [778.0, 3061.0], [777.0, 3286.0], [776.0, 3394.0], [790.0, 2809.3333333333335], [787.0, 2702.0], [826.0, 1577.0], [830.0, 2580.0], [831.0, 2681.0], [816.0, 1343.0], [818.0, 2929.0], [817.0, 2833.0], [820.0, 2587.0], [819.0, 2822.0], [829.0, 2685.0], [828.0, 1940.0], [827.0, 2586.0], [825.0, 2180.5], [807.0, 2845.0], [806.0, 2033.0], [805.0, 2832.0], [804.0, 2034.0], [803.0, 2991.0], [802.0, 2045.0], [801.0, 2179.0], [800.0, 2828.5], [815.0, 1345.0], [814.0, 2991.0], [813.0, 2614.0], [812.0, 2638.0], [811.0, 2810.0], [809.0, 2941.0], [823.0, 2056.5], [821.0, 2942.0], [857.0, 1232.0], [862.0, 1796.0], [863.0, 2423.0], [848.0, 1848.0], [850.0, 1238.0], [849.0, 1996.0], [860.0, 1795.0], [859.0, 1224.0], [858.0, 1229.0], [856.0, 1819.6666666666667], [839.0, 2577.0], [838.0, 2899.0], [837.0, 2898.0], [836.0, 2073.0], [835.0, 1500.0], [834.0, 2626.0], [833.0, 2755.0], [832.0, 2890.0], [847.0, 2495.0], [846.0, 2508.0], [845.0, 2099.0], [844.0, 2091.0], [843.0, 1538.0], [842.0, 2736.0], [841.0, 1496.0], [840.0, 2031.0], [854.0, 2769.0], [852.0, 2591.5], [894.0, 1334.0], [895.0, 133.0], [880.0, 1805.0], [883.0, 1974.5], [881.0, 1999.0], [893.0, 433.0], [892.0, 2054.0], [891.0, 509.0], [888.0, 177.0], [879.0, 1823.0], [871.0, 1732.4285714285713], [864.0, 2737.0], [878.0, 2500.0], [877.0, 2499.0], [876.0, 2288.0], [875.0, 1002.0], [874.0, 1678.0], [873.0, 1043.0], [872.0, 2706.0], [887.0, 1984.0], [886.0, 2036.0], [885.0, 486.0], [884.0, 1822.0], [921.0, 507.0], [926.0, 1666.0], [927.0, 1657.0], [913.0, 350.0], [912.0, 362.0], [915.0, 250.0], [914.0, 1151.0], [925.0, 280.0], [923.0, 1914.0], [922.0, 290.0], [911.0, 1641.0], [896.0, 1077.0], [898.0, 1806.0], [897.0, 2050.0], [900.0, 1998.0], [899.0, 1217.0], [903.0, 148.0], [902.0, 393.0], [910.0, 1679.0], [909.0, 376.0], [908.0, 390.5], [906.0, 1023.0], [905.0, 799.5], [919.0, 812.0], [918.0, 229.0], [917.0, 245.0], [916.0, 335.0], [952.0, 1641.0], [946.0, 1645.0], [959.0, 156.0], [957.0, 1637.0], [955.0, 474.5], [943.0, 1705.0], [929.0, 669.0], [928.0, 1901.0], [931.0, 256.0], [930.0, 267.0], [935.0, 1735.0], [933.0, 245.5], [941.0, 217.0], [940.0, 223.0], [939.0, 189.0], [938.0, 227.0], [937.0, 1525.0], [936.0, 1874.0], [951.0, 1448.0], [950.0, 134.0], [948.0, 1785.0], [944.0, 211.0], [989.0, 639.0], [990.0, 697.0], [976.0, 1133.75], [988.0, 1160.0], [987.0, 297.0], [986.0, 583.0], [984.0, 1200.0], [973.0, 1066.6], [962.0, 982.5], [960.0, 154.66666666666666], [965.0, 1419.0], [964.0, 441.0], [967.0, 1698.0], [966.0, 221.0], [972.0, 1563.0], [970.0, 1520.0], [969.0, 1117.25], [968.0, 317.0], [980.0, 1207.0], [979.0, 459.0], [978.0, 1601.0], [977.0, 1601.0], [1000.0, 1285.0], [999.0, 1334.0], [998.0, 128.0], [997.0, 122.0], [996.0, 396.0], [995.0, 606.5], [994.0, 1262.0], [993.0, 1392.0], [992.0, 1429.0], [1.0, 14823.0]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}, {"data": [[501.1410000000003, 7881.007000000008]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 11483.333333333334, "minX": 1.75791144E12, "maxY": 7182429.483333333, "series": [{"data": [[1.75791144E12, 11483.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.75791144E12, 7182429.483333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791144E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 7881.007000000008, "minX": 1.75791144E12, "maxY": 7881.007000000008, "series": [{"data": [[1.75791144E12, 7881.007000000008]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791144E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 7880.964000000002, "minX": 1.75791144E12, "maxY": 7880.964000000002, "series": [{"data": [[1.75791144E12, 7880.964000000002]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791144E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 2238.828000000001, "minX": 1.75791144E12, "maxY": 2238.828000000001, "series": [{"data": [[1.75791144E12, 2238.828000000001]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791144E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 122.0, "minX": 1.75791144E12, "maxY": 14926.0, "series": [{"data": [[1.75791144E12, 14926.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.75791144E12, 11032.4]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.75791144E12, 14606.89]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.75791144E12, 11438.699999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.75791144E12, 122.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.75791144E12, 9683.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791144E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1203.5, "minX": 2.0, "maxY": 14596.0, "series": [{"data": [[2.0, 5652.0], [128.0, 9126.5], [166.0, 10925.5], [3.0, 4167.0], [56.0, 7814.0], [58.0, 1203.5], [16.0, 13920.5], [18.0, 3601.5], [321.0, 10075.0], [84.0, 2766.0], [21.0, 14596.0], [96.0, 1231.5], [31.0, 6827.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 321.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1203.5, "minX": 2.0, "maxY": 14596.0, "series": [{"data": [[2.0, 5652.0], [128.0, 9126.5], [166.0, 10925.5], [3.0, 4167.0], [56.0, 7814.0], [58.0, 1203.5], [16.0, 13920.5], [18.0, 3601.5], [321.0, 10075.0], [84.0, 2766.0], [21.0, 14596.0], [96.0, 1231.5], [31.0, 6827.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 321.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791144E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791144E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791144E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791144E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791144E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.75791144E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791144E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791144E12, 16.666666666666668]], "isOverall": false, "label": "เพิ่มทะเบียนบุคคลด้วย Excel-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791144E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.75791144E12, "maxY": 16.666666666666668, "series": [{"data": [[1.75791144E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.75791144E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 25200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

